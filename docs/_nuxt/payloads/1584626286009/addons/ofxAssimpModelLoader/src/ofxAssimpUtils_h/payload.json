{"data":[{"page":{"entry":{"name":"ofxAssimpUtils.h","filename":"ofxAssimpUtils.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/addons/ofxAssimpModelLoader/src/ofxAssimpUtils.h","path":"/addons/ofxAssimpModelLoader/src/ofxAssimpUtils_h","route":"/addons/ofxAssimpModelLoader/src/ofxAssimpUtils.h","dir":"../addons/ofxAssimpModelLoader/src","ext":"h","type":"source","id":71,"parent":61,"breadcrumbs":[61,62,36],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//  ofxAssimpUtils.h</span>\n<span class=\"token comment\" spellcheck=\"true\">//  Created by Lukasz Karluk on 4/12/12.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMain.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxAssimpMeshHelper.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assimp/cimport.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assimp/scene.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assimp/postprocess.h></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">inline</span> ofFloatColor <span class=\"token function\">aiColorToOfColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> aiColor4D<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofFloatColor</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">inline</span> ofFloatColor <span class=\"token function\">aiColorToOfColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> aiColor3D<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofFloatColor</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">inline</span> ofDefaultVec3 <span class=\"token function\">aiVecToOfVec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> aiVector3D<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofDefaultVec3</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">inline</span> vector<span class=\"token operator\">&lt;</span>ofDefaultVec3<span class=\"token operator\">></span> <span class=\"token function\">aiVecVecToOfVecVec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>aiVector3D<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>ofDefaultVec3<span class=\"token operator\">></span> <span class=\"token function\">ofv</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>ofv<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>ofDefaultVec3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ofv<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">aiMeshToOfMesh</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> aiMesh<span class=\"token operator\">*</span> aim<span class=\"token punctuation\">,</span> ofMesh<span class=\"token operator\">&amp;</span> ofm<span class=\"token punctuation\">,</span> ofxAssimpMeshHelper <span class=\"token operator\">*</span> helper <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// default to triangle mode</span>\n\tofm<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>OF_PRIMITIVE_TRIANGLES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// copy vertices</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mNumVertices<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofm<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mVertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mVertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mVertices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">HasNormals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mNumVertices<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tofm<span class=\"token punctuation\">.</span><span class=\"token function\">addNormal</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mNormals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mNormals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mNormals<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// aiVector3D * \tmTextureCoords [AI_MAX_NUMBER_OF_TEXTURECOORDS]</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// just one for now</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">GetNumUVChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mNumVertices<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>helper <span class=\"token operator\">&amp;&amp;</span> helper<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">hasTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tofTexture <span class=\"token operator\">&amp;</span> tex <span class=\"token operator\">=</span> helper<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getTextureRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tofVec2f texCoord <span class=\"token operator\">=</span> tex<span class=\"token punctuation\">.</span><span class=\"token function\">getCoordFromPercent</span><span class=\"token punctuation\">(</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mTextureCoords<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">,</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mTextureCoords<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tofm<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span>texCoord<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\tofm<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mTextureCoords<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">,</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mTextureCoords<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//aiColor4D * \tmColors [AI_MAX_NUMBER_OF_COLOR_SETS]</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// just one for now</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">GetNumColorChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mNumVertices<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tofm<span class=\"token punctuation\">.</span><span class=\"token function\">addColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">aiColorToOfColor</span><span class=\"token punctuation\">(</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mColors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mNumFaces<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mFaces<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mNumIndices<span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxAssimpUtils\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"aiMeshToOfMesh(): non triangular face found: model face \"</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mFaces<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mNumIndices<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tofm<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>aim<span class=\"token operator\">-</span><span class=\"token operator\">></span>mFaces<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mIndices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}