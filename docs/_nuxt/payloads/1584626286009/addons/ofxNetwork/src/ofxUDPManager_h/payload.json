{"data":[{"page":{"entry":{"name":"ofxUDPManager.h","filename":"ofxUDPManager.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/addons/ofxNetwork/src/ofxUDPManager.h","path":"/addons/ofxNetwork/src/ofxUDPManager_h","route":"/addons/ofxNetwork/src/ofxUDPManager.h","dir":"../addons/ofxNetwork/src","ext":"h","type":"source","id":136,"parent":123,"breadcrumbs":[123,124,36],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//////////////////////////////////////////////////////////////////////////////////////</span>\n<span class=\"token comment\" spellcheck=\"true\">// Original author: ???????? we think Christian Naglhofer</span>\n<span class=\"token comment\" spellcheck=\"true\">// Crossplatform port by: Theodore Watson May 2007 - update Jan 2008</span>\n<span class=\"token comment\" spellcheck=\"true\">// Changes: Mac (and should be nix) equivilant functions and data types for</span>\n<span class=\"token comment\" spellcheck=\"true\">// win32 calls, as well as non blocking option SetNonBlocking(bool nonBlocking);</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//////////////////////////////////////////////////////////////////////////////////////</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/*-----------------------------------------------------------------------------------\nUSAGE\n-------------------------------------------------------------------------------------\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!!! LINK WITH ws2_32.lib !!!\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nUDP Socket Client (sending):\n------------------\n\n1) create()\n2) connect()\n3) send()\n...\nx) close()\n\noptional:\nSetTimeoutSend()\n\nUDP Multicast (sending):\n--------------\n\n1) Create()\n2) ConnectMcast()\n3) Send()\n...\nx) Close()\n\nextra optional:\nSetTTL() - default is 1 (current subnet)\n\nUDP Socket Server (receiving):\n------------------\n\n1) create()\n2) bind()\n3) receive()\n...\nx) close()\n\noptional:\nSetTimeoutReceive()\n\nUDP Multicast (receiving):\n--------------\n\n1) Create()\n2) BindMcast()\n3) Receive()\n...\nx) Close()\n\n--------------------------------------------------------------------------------*/</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxUDPSettings.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;wchar.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//unix includes - works for osx should be same for *nix</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//#ifdef TARGET_LINUX</span>\n        <span class=\"token comment\" spellcheck=\"true\">// linux needs this:</span>\n        <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/tcp.h></span>\t\t</span><span class=\"token comment\" spellcheck=\"true\">/* for TCP_MAXSEG value */</span>\n    <span class=\"token comment\" spellcheck=\"true\">//#endif</span>\n\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SO_MAX_MSG_SIZE TCP_MAXSEG</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> INVALID_SOCKET -1</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SOCKET_ERROR -1</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FAR</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token comment\" spellcheck=\"true\">//windows includes</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winsock2.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ws2tcpip.h></span>\t\t</span><span class=\"token comment\" spellcheck=\"true\">// TCP/IP annex needed for multicasting</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// Socket constants.</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SOCKET_TIMEOUT\t\t\tSOCKET_ERROR - 1</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Implementation of a UDP socket.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofxUDPManager</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//constructor</span>\n\t<span class=\"token function\">ofxUDPManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//destructor</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofxUDPManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">HasSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span>\t<span class=\"token function\">HasSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\t<span class=\"token punctuation\">{</span>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">!=</span> INVALID_SOCKET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxUDPSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pHost<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">ConnectMcast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pMcast<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">BindMcast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pMcast<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">Send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//all data will be sent guaranteed.</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">SendAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">PeekReceive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">//\treturn number of bytes waiting</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SetTimeoutSend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeoutInSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SetTimeoutReceive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeoutInSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetTimeoutSend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetTimeoutReceive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">GetRemoteAddr</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> address<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">//\tgets the IP and port of last received packet</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">GetListenAddr</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> address<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> port<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">//\tget our bound IP and port</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">SetReceiveBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">SetSendBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetReceiveBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetSendBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">SetReuseAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> allowReuse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">SetEnableBroadcast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> enableBroadcast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">SetNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> useNonBlocking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetMaxMsgSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// returns -1 on failure</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetTTL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">SetTTL</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nTTL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\tSOCKET m_hSocket<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span> m_hSocket<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">WaitReceive</span><span class=\"token punctuation\">(</span>time_t timeoutSeconds<span class=\"token punctuation\">,</span> time_t timeoutMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">WaitSend</span><span class=\"token punctuation\">(</span>time_t timeoutSeconds<span class=\"token punctuation\">,</span> time_t timeoutMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> m_dwTimeoutReceive<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> m_dwTimeoutSend<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> nonBlocking<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> sockaddr_in saServer<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> sockaddr_in saClient<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> m_bWinsockInit<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> canGetRemoteAddress<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source","static":true}}],"fetch":[]}