{"data":[{"page":{"entry":{"name":"ofxCvContourFinder.cpp","filename":"ofxCvContourFinder.cpp","absolute":"/Users/gilbertsinnott/Code/openFrameworks/addons/ofxOpenCv/src/ofxCvContourFinder.cpp","path":"/addons/ofxOpenCv/src/ofxCvContourFinder_cpp","route":"/addons/ofxOpenCv/src/ofxCvContourFinder.cpp","dir":"../addons/ofxOpenCv/src","ext":"cpp","type":"source","id":144,"parent":138,"breadcrumbs":[138,139,36],"siblings":[],"translations":{}},"document":"\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxCvContourFinder.h\"</span></span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">sort_carea_compare</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> CvSeq<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> CvSeq<span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// use opencv to calc size, then sort based on size</span>\n\t<span class=\"token keyword\">float</span> areaa <span class=\"token operator\">=</span> <span class=\"token function\">cvContourArea</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> CV_WHOLE_SEQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> areab <span class=\"token operator\">=</span> <span class=\"token function\">cvContourArea</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> CV_WHOLE_SEQ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>areaa <span class=\"token operator\">></span> areab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\nofxCvContourFinder<span class=\"token operator\">::</span><span class=\"token function\">ofxCvContourFinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _width <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    _height <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tmyMoments <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CvMoments<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CvMoments<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\nofxCvContourFinder<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofxCvContourFinder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">free</span><span class=\"token punctuation\">(</span> myMoments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxCvContourFinder<span class=\"token operator\">::</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cvSeqBlobs<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    blobs<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    nBlobs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxCvContourFinder<span class=\"token operator\">::</span><span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span> ofxCvGrayscaleImage<span class=\"token operator\">&amp;</span>  input<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t  <span class=\"token keyword\">int</span> minArea<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t  <span class=\"token keyword\">int</span> maxArea<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t  <span class=\"token keyword\">int</span> nConsidered<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t  <span class=\"token keyword\">bool</span> bFindHoles<span class=\"token punctuation\">,</span>\n                                      <span class=\"token keyword\">bool</span> bUseApproximation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// get width/height disregarding ROI</span>\n    IplImage<span class=\"token operator\">*</span> ipltemp <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getCvImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    _width <span class=\"token operator\">=</span> ipltemp<span class=\"token operator\">-</span><span class=\"token operator\">></span>width<span class=\"token punctuation\">;</span>\n    _height <span class=\"token operator\">=</span> ipltemp<span class=\"token operator\">-</span><span class=\"token operator\">></span>height<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// opencv will clober the image it detects contours on, so we want to</span>\n    <span class=\"token comment\" spellcheck=\"true\">// copy it into a copy before we detect contours.  That copy is allocated</span>\n    <span class=\"token comment\" spellcheck=\"true\">// if necessary (necessary = (a) not allocated or (b) wrong size)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// so be careful if you pass in different sized images to \"findContours\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// there is a performance penalty, but we think there is not a memory leak</span>\n    <span class=\"token comment\" spellcheck=\"true\">// to worry about better to create mutiple contour finders for different</span>\n    <span class=\"token comment\" spellcheck=\"true\">// sizes, ie, if you are finding contours in a 640x480 image but also a</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 320x240 image better to make two ofxCvContourFinder objects then to use</span>\n    <span class=\"token comment\" spellcheck=\"true\">// one, because you will get penalized less.</span>\n\n    inputCopy<span class=\"token punctuation\">.</span><span class=\"token function\">setUseTexture</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> inputCopy<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tinputCopy<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span> _width<span class=\"token punctuation\">,</span> _height <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> inputCopy<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> _width <span class=\"token operator\">||</span> inputCopy<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> _height <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// reallocate to new size</span>\n        inputCopy<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        inputCopy<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span> _width<span class=\"token punctuation\">,</span> _height <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    inputCopy<span class=\"token punctuation\">.</span><span class=\"token function\">setROI</span><span class=\"token punctuation\">(</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">getROI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    inputCopy <span class=\"token operator\">=</span> input<span class=\"token punctuation\">;</span>\n\n\tCvSeq<span class=\"token operator\">*</span> contour_list <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tcontour_storage <span class=\"token operator\">=</span> <span class=\"token function\">cvCreateMemStorage</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstorage\t<span class=\"token operator\">=</span> <span class=\"token function\">cvCreateMemStorage</span><span class=\"token punctuation\">(</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> retrieve_mode\n        <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bFindHoles<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> CV_RETR_LIST <span class=\"token operator\">:</span> CV_RETR_EXTERNAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cvFindContours</span><span class=\"token punctuation\">(</span> inputCopy<span class=\"token punctuation\">.</span><span class=\"token function\">getCvImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> contour_storage<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>contour_list<span class=\"token punctuation\">,</span>\n                    <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>CvContour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> retrieve_mode<span class=\"token punctuation\">,</span> bUseApproximation <span class=\"token operator\">?</span> CV_CHAIN_APPROX_SIMPLE <span class=\"token operator\">:</span> CV_CHAIN_APPROX_NONE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tCvSeq<span class=\"token operator\">*</span> contour_ptr <span class=\"token operator\">=</span> contour_list<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// put the contours from the linked list, into an array for sorting</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>contour_ptr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> area <span class=\"token operator\">=</span> <span class=\"token function\">cvContourArea</span><span class=\"token punctuation\">(</span>contour_ptr<span class=\"token punctuation\">,</span> CV_WHOLE_SEQ<span class=\"token punctuation\">,</span> bFindHoles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// oriented=true for holes</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bFindHoles <span class=\"token operator\">&amp;&amp;</span> area <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// areas can be non negative in the case of holes</span>\n\t\t\tarea <span class=\"token operator\">=</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>area <span class=\"token operator\">></span> minArea<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>area <span class=\"token operator\">&lt;</span> maxArea<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tcvSeqBlobs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>contour_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tcontour_ptr <span class=\"token operator\">=</span> contour_ptr<span class=\"token operator\">-</span><span class=\"token operator\">></span>h_next<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// sort the pointers based on size</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> cvSeqBlobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span> cvSeqBlobs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cvSeqBlobs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sort_carea_compare <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// now, we have cvSeqBlobs.size() contours, sorted by size in the array</span>\n    <span class=\"token comment\" spellcheck=\"true\">// cvSeqBlobs let's get the data out and into our structures that we like</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">MIN</span><span class=\"token punctuation\">(</span>nConsidered<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>cvSeqBlobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tblobs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofxCvBlob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> area <span class=\"token operator\">=</span> <span class=\"token function\">cvContourArea</span><span class=\"token punctuation\">(</span> cvSeqBlobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> CV_WHOLE_SEQ<span class=\"token punctuation\">,</span> bFindHoles <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// oriented=true for holes</span>\n\t\tCvRect rect\t<span class=\"token operator\">=</span> <span class=\"token function\">cvBoundingRect</span><span class=\"token punctuation\">(</span> cvSeqBlobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cvMoments</span><span class=\"token punctuation\">(</span> cvSeqBlobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> myMoments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tblobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>area                     <span class=\"token operator\">=</span> bFindHoles <span class=\"token operator\">?</span> <span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>area<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> area<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// only return positive areas</span>\n\t\tblobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length \t\t\t      <span class=\"token operator\">=</span> <span class=\"token function\">cvArcLength</span><span class=\"token punctuation\">(</span>cvSeqBlobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tblobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect<span class=\"token punctuation\">.</span>x           <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\tblobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect<span class=\"token punctuation\">.</span>y           <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t\tblobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect<span class=\"token punctuation\">.</span>width       <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\t\tblobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect<span class=\"token punctuation\">.</span>height      <span class=\"token operator\">=</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\t\tblobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>centroid<span class=\"token punctuation\">.</span>x \t\t\t  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>myMoments<span class=\"token operator\">-</span><span class=\"token operator\">></span>m10 <span class=\"token operator\">/</span> myMoments<span class=\"token operator\">-</span><span class=\"token operator\">></span>m00<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tblobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>centroid<span class=\"token punctuation\">.</span>y \t\t\t  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>myMoments<span class=\"token operator\">-</span><span class=\"token operator\">></span>m01 <span class=\"token operator\">/</span> myMoments<span class=\"token operator\">-</span><span class=\"token operator\">></span>m00<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bFindHoles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// for some reason, changing the orientation when looking for holes</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// yields negative areas for non holes and positive areas for holes</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// negating the value here works, even though it feels like a hack</span>\n\t\t\tblobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hole                 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>area <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// negative area denotes a hole</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tblobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>hole                 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// no holes</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// get the points for the blob:</span>\n\t\tCvPoint           pt<span class=\"token punctuation\">;</span>\n\t\tCvSeqReader       reader<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cvStartReadSeq</span><span class=\"token punctuation\">(</span> cvSeqBlobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>reader<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> cvSeqBlobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>total<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">CV_READ_SEQ_ELEM</span><span class=\"token punctuation\">(</span> pt<span class=\"token punctuation\">,</span> reader <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>pt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>pt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tblobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nPts <span class=\"token operator\">=</span> blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n    nBlobs <span class=\"token operator\">=</span> blobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Free the storage memory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Warning: do this inside this function otherwise a strange memory leak</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> contour_storage <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">cvReleaseMemStorage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>contour_storage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> storage <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">cvReleaseMemStorage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>storage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> nBlobs<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxCvContourFinder<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">float</span> scalex <span class=\"token operator\">=</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> scaley <span class=\"token operator\">=</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> _width <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> scalex <span class=\"token operator\">=</span> w<span class=\"token operator\">/</span>_width<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> scalex <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> _height <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> scaley <span class=\"token operator\">=</span> h<span class=\"token operator\">/</span>_height<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> scaley <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bAnchorIsPct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">-</span><span class=\"token operator\">=</span> anchor<span class=\"token punctuation\">.</span>x <span class=\"token operator\">*</span> w<span class=\"token punctuation\">;</span>\n        y <span class=\"token operator\">-</span><span class=\"token operator\">=</span> anchor<span class=\"token punctuation\">.</span>y <span class=\"token operator\">*</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">-</span><span class=\"token operator\">=</span> anchor<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n        y <span class=\"token operator\">-</span><span class=\"token operator\">=</span> anchor<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">ofPushStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// ---------------------------- draw the bounding rectangle</span>\n\t<span class=\"token function\">ofSetHexColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xDD00CC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofScale</span><span class=\"token punctuation\">(</span> scalex<span class=\"token punctuation\">,</span> scaley<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ofNoFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>blobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span> blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n                        blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect<span class=\"token punctuation\">.</span>height <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// ---------------------------- draw the blobs</span>\n\t<span class=\"token function\">ofSetHexColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x00FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>blobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofNoFill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofBeginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>nPts<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofVertex</span><span class=\"token punctuation\">(</span> blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pts<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">ofEndShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofPopStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxCvContourFinder<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPoint <span class=\"token operator\">&amp;</span> point<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>point<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxCvContourFinder<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> rect<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxCvContourFinder<span class=\"token operator\">::</span><span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> xPct<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yPct <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    anchor<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> xPct<span class=\"token punctuation\">;</span>\n    anchor<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> yPct<span class=\"token punctuation\">;</span>\n    bAnchorIsPct <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxCvContourFinder<span class=\"token operator\">::</span><span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    anchor<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    anchor<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    bAnchorIsPct <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxCvContourFinder<span class=\"token operator\">::</span><span class=\"token function\">resetAnchor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    anchor<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    bAnchorIsPct <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n","type":"source","static":true}}],"fetch":[]}