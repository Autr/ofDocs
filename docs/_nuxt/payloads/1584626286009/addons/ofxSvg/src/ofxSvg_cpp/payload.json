{"data":[{"page":{"entry":{"name":"ofxSvg.cpp","filename":"ofxSvg.cpp","absolute":"/Users/gilbertsinnott/Code/openFrameworks/addons/ofxSvg/src/ofxSvg.cpp","path":"/addons/ofxSvg/src/ofxSvg_cpp","route":"/addons/ofxSvg/src/ofxSvg.cpp","dir":"../addons/ofxSvg/src","ext":"cpp","type":"source","id":177,"parent":175,"breadcrumbs":[175,176,36],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxSvg.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"svgtiny.h\"</span></span>\n<span class=\"token punctuation\">}</span>\nofxSVG<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofxSVG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tpaths<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> ofxSVG<span class=\"token operator\">::</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> ofxSVG<span class=\"token operator\">::</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> height<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofxSVG<span class=\"token operator\">::</span><span class=\"token function\">getNumPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> paths<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nofPath <span class=\"token operator\">&amp;</span> ofxSVG<span class=\"token operator\">::</span><span class=\"token function\">getPathAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> paths<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofxSVG<span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tpath <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxSVG\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"load(): path does not exist: \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tofBuffer buffer <span class=\"token operator\">=</span> <span class=\"token function\">ofBufferFromFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">loadFromString</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofxSVG<span class=\"token operator\">::</span><span class=\"token function\">loadFromString</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string stringdata<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string urlstring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// goes some way to improving SVG compatibility</span>\n\t<span class=\"token function\">fixSvgString</span><span class=\"token punctuation\">(</span>stringdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> data <span class=\"token operator\">=</span> stringdata<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> stringdata<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> url <span class=\"token operator\">=</span> urlstring<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> svgtiny_diagram <span class=\"token operator\">*</span> diagram <span class=\"token operator\">=</span> <span class=\"token function\">svgtiny_create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsvgtiny_code code <span class=\"token operator\">=</span> <span class=\"token function\">svgtiny_parse</span><span class=\"token punctuation\">(</span>diagram<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>code <span class=\"token operator\">!=</span> svgtiny_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstring msg<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t <span class=\"token keyword\">case</span> svgtiny_OUT_OF_MEMORY<span class=\"token operator\">:</span>\n\t\t\t msg <span class=\"token operator\">=</span> <span class=\"token string\">\"svgtiny_OUT_OF_MEMORY\"</span><span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t <span class=\"token comment\" spellcheck=\"true\">/*case svgtiny_LIBXML_ERROR:\n\t\t\t msg = \"svgtiny_LIBXML_ERROR\";\n\t\t\t break;*/</span>\n\n\t\t <span class=\"token keyword\">case</span> svgtiny_NOT_SVG<span class=\"token operator\">:</span>\n\t\t\t msg <span class=\"token operator\">=</span> <span class=\"token string\">\"svgtiny_NOT_SVG\"</span><span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t <span class=\"token keyword\">case</span> svgtiny_SVG_ERROR<span class=\"token operator\">:</span>\n\t\t\t msg <span class=\"token operator\">=</span> <span class=\"token string\">\"svgtiny_SVG_ERROR: line \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>diagram<span class=\"token operator\">-</span><span class=\"token operator\">></span>error_line<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> diagram<span class=\"token operator\">-</span><span class=\"token operator\">></span>error_message<span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t msg <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown svgtiny_code \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxSVG\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"load(): couldn't parse \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> urlstring <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\": \"</span> <span class=\"token operator\">&lt;&lt;</span> msg<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">setupDiagram</span><span class=\"token punctuation\">(</span>diagram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">svgtiny_free</span><span class=\"token punctuation\">(</span>diagram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofxSVG<span class=\"token operator\">::</span><span class=\"token function\">fixSvgString</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> xmlstring<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\n\tofXml xml<span class=\"token punctuation\">;</span>\n\t\n\txml<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>xmlstring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// so it turns out that if the stroke width is &lt;1 it rounds it down to 0,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// and makes it disappear because svgtiny stores strokewidth as an integer!</span>\n\tofXml<span class=\"token operator\">::</span>Search strokeWidthElements <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@stroke-width]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>strokeWidthElements<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>ofXml <span class=\"token operator\">&amp;</span> element<span class=\"token operator\">:</span> strokeWidthElements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//cout &lt;&lt; element.toString() &lt;&lt; endl;</span>\n\t\t\t<span class=\"token keyword\">float</span> strokewidth <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke-width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getFloatValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstrokewidth <span class=\"token operator\">=</span> <span class=\"token function\">MAX</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>strokewidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\telement<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"stroke-width\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>strokewidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//lib svgtiny doesn't remove elements with display = none, so this code fixes that</span>\n\t\n\t<span class=\"token keyword\">bool</span> finished <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>finished<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\tofXml<span class=\"token operator\">::</span>Search invisibleElements  <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//*[@display=\\\"none\\\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>invisibleElements<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tfinished <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> ofXml<span class=\"token operator\">&amp;</span> element <span class=\"token operator\">=</span> invisibleElements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tofXml parent <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent <span class=\"token operator\">&amp;&amp;</span> element<span class=\"token punctuation\">)</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">// implement the SVG \"use\" element by expanding out those elements into</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// XML that svgtiny will parse correctly.</span>\n\tofXml<span class=\"token operator\">::</span>Search useElements <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//use\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>useElements<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>ofXml <span class=\"token operator\">&amp;</span> element<span class=\"token operator\">:</span> useElements<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// get the id attribute</span>\n\t\t\tstring id <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xlink:href\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// remove the leading \"#\" from the id</span>\n\t\t\tid<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// find the original definition of that element - TODO add defs into path?</span>\n\t\t\tstring searchstring <span class=\"token operator\">=</span><span class=\"token string\">\"//*[@id='\"</span><span class=\"token operator\">+</span>id<span class=\"token operator\">+</span><span class=\"token string\">\"']\"</span><span class=\"token punctuation\">;</span>\n\t\t\tofXml idelement <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span>searchstring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// if we found one then use it! (find first returns an empty xml on failure)</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idelement<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// make a copy of that element</span>\n\t\t\t\telement<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>idelement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// then turn the use element into a g element</span>\n\t\t\t\telement<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\txmlstring <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofxSVG<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>paths<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tpaths<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofxSVG<span class=\"token operator\">::</span><span class=\"token function\">setupDiagram</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> svgtiny_diagram <span class=\"token operator\">*</span> diagram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\twidth <span class=\"token operator\">=</span> diagram<span class=\"token operator\">-</span><span class=\"token operator\">></span>width<span class=\"token punctuation\">;</span>\n\theight <span class=\"token operator\">=</span> diagram<span class=\"token operator\">-</span><span class=\"token operator\">></span>height<span class=\"token punctuation\">;</span>\n\n\tpaths<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>diagram<span class=\"token operator\">-</span><span class=\"token operator\">></span>shape_count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diagram<span class=\"token operator\">-</span><span class=\"token operator\">></span>shape<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tpaths<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">setupShape</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>diagram<span class=\"token operator\">-</span><span class=\"token operator\">></span>shape<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>paths<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diagram<span class=\"token operator\">-</span><span class=\"token operator\">></span>shape<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxSVG\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupDiagram(): text: not implemented yet\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofxSVG<span class=\"token operator\">::</span><span class=\"token function\">setupShape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> svgtiny_shape <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">,</span> ofPath <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> p <span class=\"token operator\">=</span> shape<span class=\"token operator\">-</span><span class=\"token operator\">></span>path<span class=\"token punctuation\">;</span>\n\n\tpath<span class=\"token punctuation\">.</span><span class=\"token function\">setFilled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">-</span><span class=\"token operator\">></span>fill <span class=\"token operator\">!=</span> svgtiny_TRANSPARENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tpath<span class=\"token punctuation\">.</span><span class=\"token function\">setFilled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpath<span class=\"token punctuation\">.</span><span class=\"token function\">setFillHexColor</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">-</span><span class=\"token operator\">></span>fill<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpath<span class=\"token punctuation\">.</span><span class=\"token function\">setPolyWindingMode</span><span class=\"token punctuation\">(</span>OF_POLY_WINDING_NONZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">-</span><span class=\"token operator\">></span>stroke <span class=\"token operator\">!=</span> svgtiny_TRANSPARENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tpath<span class=\"token punctuation\">.</span><span class=\"token function\">setStrokeWidth</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">-</span><span class=\"token operator\">></span>stroke_width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpath<span class=\"token punctuation\">.</span><span class=\"token function\">setStrokeHexColor</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">-</span><span class=\"token operator\">></span>stroke<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>shape<span class=\"token operator\">-</span><span class=\"token operator\">></span>path_length<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> svgtiny_PATH_MOVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tpath<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ti <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> svgtiny_PATH_CLOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tpath<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\ti <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> svgtiny_PATH_LINE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tpath<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ti <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> svgtiny_PATH_BEZIER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tpath<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t   p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t   p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ti <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxSVG\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupShape(): SVG parse error\"</span><span class=\"token punctuation\">;</span>\n\t\t\ti <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> vector <span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofxSVG<span class=\"token operator\">::</span><span class=\"token function\">getPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> paths<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}