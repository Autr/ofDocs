{"data":[{"page":{"entry":{"name":"ofApp.cpp","filename":"ofApp.cpp","absolute":"/Users/gilbertsinnott/Code/openFrameworks/examples/strings/regularExpressionExample/src/ofApp.cpp","path":"/examples/strings/regularExpressionExample/src/ofApp_cpp","route":"/examples/strings/regularExpressionExample/src/ofApp.cpp","dir":"../examples/strings/regularExpressionExample/src","ext":"cpp","type":"source","id":1610,"parent":1608,"breadcrumbs":[1608,1605,1592,436],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofApp.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex></span></span>\n<span class=\"token comment\" spellcheck=\"true\">// This example shows what you can do with regular espressions, it does not</span>\n<span class=\"token comment\" spellcheck=\"true\">// cover the grammar of the regular expression but how they can be used.</span>\n<span class=\"token comment\" spellcheck=\"true\">// Here some links to learn more about regular expression</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://www.informit.com/articles/article.aspx?p=2079020</span>\n<span class=\"token comment\" spellcheck=\"true\">// https://solarianprogrammer.com/2011/10/20/cpp-11-regex-tutorial-part-2/</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://www.cplusplus.com/reference/regex/</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    text <span class=\"token operator\">=</span> <span class=\"token string\">\"openFrameworks is developed in a collaborative way. We use git, a distributed versioning system, which means also that people can branch, experiment, and make suggestions. If you look at the network diagram on GitHub, it's looks like some alien diagram, full of weaving branches, code pulling apart and coming together. There's a huge community, all over the world, working on the core code: fixing bugs, submitting pull requests, and shaping the tool the way they want to see it. It's a world wide project, and it's common to wake up in the USA to an inbox full of pull requests and issues emails from coders in Asia and Europe. Over 70 people have contributed to the openFrameworks core directly, and hundreds of people have forked the code or contributed in other ways.\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// Regular expression can be used:</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// To grep substrings and return them in a string</span>\n    <span class=\"token comment\" spellcheck=\"true\">// [a-z]*ing\\\\s means all verbs ending with 'ing' followed by a whitespace</span>\n    wordsWithS <span class=\"token operator\">=</span> <span class=\"token function\">grepStringInRegex</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\"[a-z]*ing\\\\s\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// To Count occurrences of a string in another string</span>\n    countedOccurrences <span class=\"token operator\">=</span> <span class=\"token function\">countOccurencesInRegex</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\"[^\\\\s]+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//To collect all the items that match certains criteria</span>\n    <span class=\"token comment\" spellcheck=\"true\">// in this case, letter containing 'r'</span>\n    matchesWithR <span class=\"token operator\">=</span> <span class=\"token function\">matchesInRegex</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">\"[a-z]+r[a-z]+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> msg <span class=\"token operator\">=</span><span class=\"token string\">\"Number of words in the text\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>countedOccurrences<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> msg1 <span class=\"token operator\">=</span><span class=\"token string\">\"Words containing 'ing'\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>msg1<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>wordsWithS<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">90</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> msg2 <span class=\"token operator\">=</span> <span class=\"token string\">\"There are \"</span><span class=\"token operator\">+</span><span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>matchesWithR<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" Words containing 'r'\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>msg2<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> s<span class=\"token operator\">:</span>matchesWithR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        y<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Regular expression can also be used parse a text file</span>\n    file<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HeadShouldersKneesAndToes.lrc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ofFile<span class=\"token operator\">::</span>ReadWrite<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> msg3 <span class=\"token operator\">=</span><span class=\"token string\">\"Let's parse a lyric file for a karaoke\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span>msg3<span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">130</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>black<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> posY <span class=\"token operator\">=</span> <span class=\"token number\">150</span><span class=\"token punctuation\">;</span>\n    string line<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            string minutes <span class=\"token operator\">=</span> <span class=\"token function\">grepStringInRegex</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token string\">\"[0-9]+:[0-9]+\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            string sentence <span class=\"token operator\">=</span> <span class=\"token function\">grepStringInRegex</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> <span class=\"token string\">\"[^0-9_:\\\\[\\\\]])\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Time:\"</span><span class=\"token operator\">+</span>minutes<span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span> posY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ofDrawBitmapString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sentence:\"</span><span class=\"token operator\">+</span>sentence<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> posY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            posY <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">keyPressed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isKeyInRegex</span><span class=\"token punctuation\">(</span>_key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"[0-9]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"You have entered a number \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isKeyInRegex</span><span class=\"token punctuation\">(</span>_key<span class=\"token punctuation\">,</span> <span class=\"token string\">\"[a-zA-Z]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"You have entered a letter\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstring ofApp<span class=\"token operator\">::</span><span class=\"token function\">grepStringInRegex</span><span class=\"token punctuation\">(</span>string _str<span class=\"token punctuation\">,</span> string _reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    smatch match<span class=\"token punctuation\">;</span>\n    regex <span class=\"token function\">regEx</span><span class=\"token punctuation\">(</span>_reg<span class=\"token punctuation\">,</span> regex_constants<span class=\"token operator\">::</span>icase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    stringstream buffer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">regex_search</span><span class=\"token punctuation\">(</span>_str<span class=\"token punctuation\">,</span>match<span class=\"token punctuation\">,</span>regEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x <span class=\"token operator\">:</span> match<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            buffer <span class=\"token operator\">&lt;&lt;</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        _str <span class=\"token operator\">=</span> match<span class=\"token punctuation\">.</span><span class=\"token function\">suffix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">countOccurencesInRegex</span><span class=\"token punctuation\">(</span>string _str<span class=\"token punctuation\">,</span> string _reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    regex <span class=\"token function\">regEx</span><span class=\"token punctuation\">(</span>_reg<span class=\"token punctuation\">,</span> regex_constants<span class=\"token operator\">::</span>icase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> wordsBegin <span class=\"token operator\">=</span> <span class=\"token function\">sregex_iterator</span><span class=\"token punctuation\">(</span>_str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> regEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> wordsEnd <span class=\"token operator\">=</span> <span class=\"token function\">sregex_iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span>wordsBegin<span class=\"token punctuation\">,</span> wordsEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">isKeyInRegex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> keyPressed<span class=\"token punctuation\">,</span> string _reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    string <span class=\"token function\">typedKey</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> keyPressed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    regex <span class=\"token function\">regEx</span><span class=\"token punctuation\">(</span>_reg<span class=\"token punctuation\">,</span> regex_constants<span class=\"token operator\">::</span>icase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">regex_match</span><span class=\"token punctuation\">(</span>typedKey<span class=\"token punctuation\">,</span> regEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">matchesInRegex</span><span class=\"token punctuation\">(</span>string _str<span class=\"token punctuation\">,</span> string _reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    regex <span class=\"token function\">regEx</span><span class=\"token punctuation\">(</span>_reg<span class=\"token punctuation\">,</span> regex_constants<span class=\"token operator\">::</span>icase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> results<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> wordsBegin <span class=\"token operator\">=</span> <span class=\"token function\">sregex_iterator</span><span class=\"token punctuation\">(</span>_str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> regEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> wordsEnd <span class=\"token operator\">=</span> <span class=\"token function\">sregex_iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>sregex_iterator i <span class=\"token operator\">=</span> wordsBegin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> wordsEnd<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        smatch m <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n        results<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}