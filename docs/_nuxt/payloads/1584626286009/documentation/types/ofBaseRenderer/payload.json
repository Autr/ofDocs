{"data":[{"page":{"entry":{"name":"ofBaseRenderer","filename":"ofBaseRenderer.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/types/ofBaseRenderer.markdown","path":"/documentation/types/ofBaseRenderer","route":"/documentation/types/ofBaseRenderer.markdown","dir":"../ofSite/documentation/types","ext":"markdown","type":"page","id":2174,"parent":2157,"breadcrumbs":[2157,1718],"siblings":[],"translations":{}},"description":{"short":"<p>The base renderer interface.</p>\n","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"True","istemplated":"False","extends":null},"methods":[{"syntax":"background(&c)","name":"background","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>c","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Immediately paint a background color to the screen.</p>\n<p>If automatic background drawing is enabled (which it is by default) this\nmethod called from ofApp::setup() will also repaint the background with\nthis color each frame.</p>\n<p><strong>Parameters:</strong></p>\n<p>c The color to paint the background with.</p>\n","desc":""},{"syntax":"background(brightness)","name":"background","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> brightness","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Immediately paint a grayscale background color to the screen.</p>\n<p>If automatic background drawing is enabled (which it is by default) this\nmethod called from ofApp::setup() will also repaint the background with\nthis color each frame.</p>\n<p><strong>Parameters:</strong></p>\n<p>brightness The grayscale value between 0 and 255 to paint the\nbackground with.</p>\n","desc":""},{"syntax":"background(hexColor, _a = 255.0f)","name":"background","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> hexColor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _a<span class=\"token operator\">=</span><span class=\"token number\">255.0f</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Immediately paint a grayscale background color to the screen.</p>\n<p>If automatic background drawing is enabled (which it is by default) this\nmethod called from ofApp::setup() will also repaint the background with\nthis color each frame.</p>\n<p><strong>Parameters:</strong></p>\n<p>hexColor The 24-bit hex representation of the color to paint the\nbackground with.</p>\n<p>_a The alpha value between 0 and 255 to apply to \\p hexColor when\nwhen painting the background.</p>\n","desc":""},{"syntax":"background(r, g, b, a = 255)","name":"background","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">255</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Immediately paint a background color to the screen.</p>\n<p><strong>Parameters:</strong></p>\n<p>r The red value between 0 and 255 to use for the background.</p>\n<p>g The green value between 0 and 255 to use for the background.</p>\n<p>b The blue value between 0 and 255 to use for the background.</p>\n<p>a The alpha value between 0 and 255 to use for the background.</p>\n","desc":""},{"syntax":"bind(&camera, &viewport)","name":"bind","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofCamera <span class=\"token operator\">&amp;</span>camera<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>viewport","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Bind \\p camera's matrices to this renderer's matrix stack.</p>\n<p>Bind's the \\p camera's modelview and projection matrices to this\nrenderer's matrix stack using \\p viewport. Should be followed with a\ncall to unbind().</p>\n<p><strong>Parameters:</strong></p>\n<p>camera The camera to bind to this renderer.</p>\n<p>viewport The viewport to use when binding \\p camera to this\nrenderer.</p>\n","desc":""},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Clear this renderer's current color and bit depths.</p>\n<p>clear() will clear the screen entirely.</p>\n","desc":""},{"syntax":"clear(brightness, a)","name":"clear","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> brightness<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Clear this renderer's color and bit depths replacing them.</p>\n<p>clear() will clear the screen entirely.</p>\n<p><strong>Parameters:</strong></p>\n<p>brightness The grayscale value between 0 and 255 to use when\nclearing the screen.</p>\n<p>a The alpha value between 0 and 255 to use when clearing the\nscreen. Defaults to 0.</p>\n","desc":""},{"syntax":"clear(r, g, b, a)","name":"clear","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Clear this renderer's color and bit depths and replace them.</p>\n<p>clear() will clear the screen entirely.</p>\n<p><strong>Parameters:</strong></p>\n<p>r The red value between 0 and 255 to use when clearing the\nscreen.</p>\n<p>g The green value between 0 and 255 to use when clearing the\nscreen.</p>\n<p>b The blue value between 0 and 255 use when clearing the screen.</p>\n<p>a The alpha value between 0 and 255 use when clearing the screen.\nDefaults to 0.</p>\n","desc":""},{"syntax":"clearAlpha()","name":"clearAlpha","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Restore the alpha color to its full opacity value.</p>\n","desc":""},{"syntax":"disableAntiAliasing()","name":"disableAntiAliasing","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Disable this renderer from using anti-aliasing.</p>\n","desc":""},{"syntax":"draw(&image, x, y, z, w, h, sx, sy, sw, sh)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofImage <span class=\"token operator\">&amp;</span>image<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sh","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw an \\p image with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>image The image to draw with this renderer.</p>\n<p>x The x coordinate to use when drawing \\p image with this\nrenderer.</p>\n<p>y The y coordinate to use to draw \\p image with this renderer.</p>\n<p>z The z coordinate to use to drawing \\p image with this renderer.</p>\n<p>w The width to use to draw the \\p image with this renderer.</p>\n<p>h The height to use to draw the \\p image with this renderer.</p>\n<p>sx The subsection x axis offset within the image texture.</p>\n<p>sy The subsection y axis offset within the image texture.</p>\n<p>sw The subsection width offset within the image texture.</p>\n<p>sh The subsection height offset within the image texture.</p>\n","desc":""},{"syntax":"draw(&image, x, y, z, w, h, sx, sy, sw, sh)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofFloatImage <span class=\"token operator\">&amp;</span>image<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sh","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw an \\p image with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>image The image to draw with this renderer.</p>\n<p>x The x coordinate to use to draw \\p image with this renderer.</p>\n<p>y The y coordinate to use to draw \\p image with this renderer.</p>\n<p>z The z coordinate to use to draw \\p image with this renderer.</p>\n<p>w The width to use to draw \\p image with this renderer.</p>\n<p>h The height to use to draw \\p image with this renderer.</p>\n<p>sx The subsection x axis offset within the image texture.</p>\n<p>sy The subsection y axis offset within the image texture.</p>\n<p>sw The subsection width offset within the image texture.</p>\n<p>sh The subsection height offset within the image texture.</p>\n","desc":""},{"syntax":"draw(&image, x, y, z, w, h, sx, sy, sw, sh)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofShortImage <span class=\"token operator\">&amp;</span>image<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sh","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw an \\p image with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>image The image to draw with this renderer.</p>\n<p>x The x coordinate to use to draw \\p image with this renderer.</p>\n<p>y The y coordinate to use to draw \\p image with this renderer.</p>\n<p>z The z coordinate to use to draw \\p image with this renderer.</p>\n<p>w The width to use when drawing the image with this renderer.</p>\n<p>h The height to use when drawing the image with this renderer.</p>\n<p>sx The subsection x axis offset within the image texture.</p>\n<p>sy The subsection y axis offset within the image texture.</p>\n<p>sw The subsection width offset within the image texture.</p>\n<p>sh The subsection height offset within the image texture.</p>\n","desc":""},{"syntax":"draw(&mesh, renderType)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMesh <span class=\"token operator\">&amp;</span>mesh<span class=\"token punctuation\">,</span> ofPolyRenderMode renderType","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a \\p mesh with this renderer using the \\p renderType.</p>\n<p>\\p renderType defines how the \\p mesh will be rendered and may be:\nOF_MESH_POINTS,\nOF_MESH_WIREFRAME,\nOF_MESH_FILL</p>\n<p><strong>Parameters:</strong></p>\n<p>mesh The mesh to draw with this renderer.</p>\n<p>renderType The render mode to use to draw \\p mesh with this\nrenderer.</p>\n<p><strong>See also</strong>: ofPolyRenderMode</p>\n","desc":""},{"syntax":"draw(&model)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofNode <span class=\"token operator\">&amp;</span>model","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a node with this renderer using ofNode::customDraw().</p>\n<p><strong>Parameters:</strong></p>\n<p>model The node to draw with this renderer.</p>\n<p><strong>See also</strong>: ofNode::customDraw()</p>\n","desc":""},{"syntax":"draw(&model, renderType)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> of3dPrimitive <span class=\"token operator\">&amp;</span>model<span class=\"token punctuation\">,</span> ofPolyRenderMode renderType","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a \\p model with this renderer using the \\p renderType.</p>\n<p>\\p renderType defines how the \\p model will be rendered and may be:\nOF_MESH_POINTS,\nOF_MESH_WIREFRAME,\nOF_MESH_FILL</p>\n<p><strong>Parameters:</strong></p>\n<p>model The model to draw with this renderer.</p>\n<p>renderType The render mode to use when drawing the \\p model\nwith this renderer.</p>\n<p><strong>See also</strong>: ofPolyRenderMode</p>\n","desc":""},{"syntax":"draw(&poly)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPolyline <span class=\"token operator\">&amp;</span>poly","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a polyline with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>poly The polyline to draw with this renderer.</p>\n","desc":""},{"syntax":"draw(&shape)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPath <span class=\"token operator\">&amp;</span>shape","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a path with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>shape The path to draw with this renderer.</p>\n","desc":""},{"syntax":"draw(&shape, x, y)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPath <span class=\"token operator\">&amp;</span>shape<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a path with this renderer at \\p x and \\p y.</p>\n<p><strong>Parameters:</strong></p>\n<p>shape The path to draw with this renderer.</p>\n<p>x The x coordinate to use to draw \\p shape.</p>\n<p>y The y coordinate to use to draw \\p shape.</p>\n","desc":""},{"syntax":"draw(&vertexData, renderType, useColors, useTextures, useNormals)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMesh <span class=\"token operator\">&amp;</span>vertexData<span class=\"token punctuation\">,</span> ofPolyRenderMode renderType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> useColors<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> useTextures<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> useNormals","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a mesh with this renderer.</p>\n<p>\\p renderType defines how the \\p mesh will be rendered and may be:\nOF_MESH_POINTS,\nOF_MESH_WIREFRAME,\nOF_MESH_FILL</p>\n<p><strong>Parameters:</strong></p>\n<p>vertexData The mesh to draw with this renderer.</p>\n<p>renderType The render mode to use to draw \\p vertexData to\nthis renderer.</p>\n<p>useColors True to use per-vertex coloring to draw the\n\\p vertexData.</p>\n<p>useTextures True to use texture coordinates to draw the \\p\nvertexData.</p>\n<p>useNormals True to use normals to draw the \\p vertexData.</p>\n<p><strong>See also</strong>: ofPolyRenderMode</p>\n","desc":""},{"syntax":"draw(&video, x, y, w, h)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofBaseVideoDraws <span class=\"token operator\">&amp;</span>video<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a \\p video with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>video The video with draw with this renderer.</p>\n<p>x The x coordinate to use to draw \\p video with this renderer.</p>\n<p>y The y coordinate to use to draw \\p video with this renderer.</p>\n<p>w The width to use to draw the video with this renderer.</p>\n<p>h The height to use to draw the video with this renderer.</p>\n","desc":""},{"syntax":"drawArrow(&start, &end, headSize)","name":"drawArrow","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> headSize","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw an arrow between two 3D points.\nstart The 3D vector to use as the first point.\nend The 3D vector to use as the second point.\n\\float headSize The size of the arrowhead.</p>\n","desc":""},{"syntax":"drawAxis(size)","name":"drawAxis","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> size","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw the coordinate system's axes with the renderer.</p>\n<p>This draws a red, green, and blue lines for the x, y, and z axes\nrespectively. This can be helpful when trying to orient other objects\nin respect to the coordinate system.</p>\n<p><strong>Parameters:</strong></p>\n<p>size The length to draw each axis line.</p>\n","desc":""},{"syntax":"drawBox(&position, size)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> size","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a cube with the specified size, starting from the specified\nposition.</p>\n<p>A cube is drawn starting from a 3D reference position, with the\nspecified size. The cube is drawn with the current color, e.g. set with\nofSetColor(). The cube is drawn filled by default; change this with\nofFill().</p>\n<p><strong>Parameters:</strong></p>\n<p>position an glm::vec3 which contains the (x,y,z) coordinates for\nthe cube's reference corner.</p>\n<p>size The size of the cube.</p>\n","desc":""},{"syntax":"drawBox(&position, width, height, depth)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> depth","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangular box using position, width, height and depth.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>position an glm::vec3 which contains the (x,y,z) coordinates for the box's reference corner.</p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n","desc":""},{"syntax":"drawBox(size)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> size","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a cube with the specified size at the origin.</p>\n<p>The cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>size The size of the cube.</p>\n","desc":""},{"syntax":"drawBox(width, height, depth)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> depth","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangular box with the specified dimensions, starting from the origin.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from the origin of the current reference frame.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n","desc":""},{"syntax":"drawBox(x, y, z, size)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> size","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a cube using x, y, z, and size.\ncoordinates.</p>\n<p>A cube is a rectangular solid bounded by six square faces of equal size.\nIt is also known as a regular hexahedron, a square parallelepiped, an\nequilateral cuboid and a right rhombohedron. It is a regular square\nprism in three orientations.</p>\n<p>It is drawn starting from a 3D reference coordinate, with the specified\nsize. The cube is drawn with the current color, e.g. set with\nofSetColor(). The cube is drawn filled by default; change this with\nofFill().</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x-coordinate of the cube's origin.</p>\n<p>y The y-coordinate of the cube's origin.</p>\n<p>z The z-coordinate of the cube's origin.</p>\n<p>size The size of the cube.</p>\n","desc":""},{"syntax":"drawBox(x, y, z, width, height, depth)","name":"drawBox","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> depth","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a rectangular box using x, y, z, width, height, and depth.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x-coordinate of the box's origin.</p>\n<p>y The y-coordinate of the box's origin.</p>\n<p>z The z-coordinate of the box's origin.</p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n","desc":""},{"syntax":"drawCircle(x, y, z, radius)","name":"drawCircle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a circle using a 3D point and a radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate of the center of the circle.</p>\n<p>y The y coordinate of the center of the circle.</p>\n<p>z The z coordinate of the center of the circle.</p>\n<p>radius The length of the radius of the circle.</p>\n","desc":""},{"syntax":"drawCone(&position, radius, height)","name":"drawCone","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a cone with this renderer using x, y, z, radius, and\nheight.</p>\n<p>Cones are drawn with x, y, and z coordinates representing the centroid\nof the cone. \\p Radius is the radius of the cone's circular\nfootprint and \\p height representing the height of the cone's.</p>\n<p><strong>Parameters:</strong></p>\n<p>position The 3D point representing this cone's position.</p>\n<p>radius The radius to use when drawing this cone's circular\nfootprint.</p>\n<p>height The height to use when drawing this cone.</p>\n","desc":""},{"syntax":"drawCone(radius, height)","name":"drawCone","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a cone at the origin using radius and height.</p>\n<p>This cone will be drawn with its position at the coordinate system's\norigin. \\p Radius is the radius of the cone's circular footprint and\n\\p height representing the height of the cone.</p>\n<p><strong>Parameters:</strong></p>\n<p>radius The radius to use when drawing this cone's circular\nfootprint.</p>\n<p>height The height to use when drawing this cone.</p>\n","desc":""},{"syntax":"drawCone(x, y, radius, height)","name":"drawCone","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a cone with this renderer using x, y, z, radius, and\nheight.</p>\n<p>Cones are drawn with x, y, and z coordinates representing the centroid\nof the cylinder. Radius is the radius of the cone's circular\nfootprint and height representing the height of the cone's.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this cone.</p>\n<p>y The y coordinate to use when drawing this cone.</p>\n<p>radius The radius to use when drawing this cone's circular\nfootprint.</p>\n<p>height The height to use when drawing this cone.</p>\n","desc":""},{"syntax":"drawCone(x, y, z, radius, height)","name":"drawCone","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a cone with this renderer using x, y, z, radius, and\nheight.</p>\n<p>Cones are drawn with x, y, and z coordinates representing the centroid\nof the cone. Radius is the radius of the cone's circular\nfootprint and height representing the height of the cone.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this cone.</p>\n<p>y The y coordinate to use when drawing this cone.</p>\n<p>z The z coordinate to use when drawing this cone.</p>\n<p>radius The radius to use when drawing this cone's circular\nfootprint.</p>\n<p>height The height to use when drawing this cone.</p>\n","desc":""},{"syntax":"drawCylinder(&position, radius, height)","name":"drawCylinder","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a cylinder with this renderer using position, radius, and\nheight.</p>\n<p>Cyliners are drawn with x, y, and z coordinates representing the\ncentroid of the cylinder. Radius is the radius of the cylinder's\ncircular footprint and height representing the height of the cylinder.</p>\n<p><strong>Parameters:</strong></p>\n<p>position The 3D point to use as a position coordinate when\ndrawing this cylinder.</p>\n<p>radius The radius to use when drawing this cylinder's circular\nfootprint.</p>\n<p>height The height to use when drawing this cylinder.</p>\n","desc":""},{"syntax":"drawCylinder(radius, height)","name":"drawCylinder","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a cylinder at the origin using radius and height.</p>\n<p>A cylinder drawn in this way will be positioned at the origin. Radius is\nthe radius of the cylinder's circular footprint and height representing\nthe height of the cylinder.</p>\n<p><strong>Parameters:</strong></p>\n<p>radius The radius to use when drawing this cylinder's circular\nfootprint.</p>\n<p>height The height to use when drawing this cylinder.</p>\n","desc":""},{"syntax":"drawCylinder(x, y, radius, height)","name":"drawCylinder","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a cylinder with this renderer using x, y, radius, and\nheight.</p>\n<p>Cyliners are drawn with x, y, and z coordinates representing the\ncentroid of the cylinder. Radius is the radius of the cylinder's\ncircular footprint and height representing the height of the cylinder.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this cylinder.</p>\n<p>y The y coordinate to use when drawing this cylinder.</p>\n<p>radius The radius to use when drawing this cylinder's circular\nfootprint.</p>\n<p>height The height to use when drawing this cylinder.</p>\n","desc":""},{"syntax":"drawCylinder(x, y, z, radius, height)","name":"drawCylinder","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a cylinder with this renderer using x, y, z, radius, and\nheight.</p>\n<p>Cyliners are drawn with x, y, and z coordinates representing the\ncentroid of the cylinder. Radius is the radius of the cylinder's\ncircular footprint and height representing the height of the cylinder.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this cylinder.</p>\n<p>y The y coordinate to use when drawing this cylinder.</p>\n<p>z The z coordinate to use when drawing this cylinder.</p>\n<p>radius The radius to use when drawing this cylinder's circular\nfootprint.</p>\n<p>height The height to use when drawing this cylinder.</p>\n","desc":""},{"syntax":"drawEllipse(x, y, z, width, height)","name":"drawEllipse","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw an ellipse using a 3D point, width, and height.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate of the center of the circle.</p>\n<p>y The y coordinate of the center of the circle.</p>\n<p>z The z coordinate of the center of the circle.</p>\n<p>width The width of the circle.</p>\n<p>height The height of the circle.</p>\n","desc":""},{"syntax":"drawGrid(stepSize, numberOfSteps, labels, x, y, z)","name":"drawGrid","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> stepSize<span class=\"token punctuation\">,</span> size_t numberOfSteps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> labels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> z","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw the coordinate system's axes as a grid with the renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>stepSize The size of each row/column in each axis grid.</p>\n<p>numberOfSteps The number of rows/columns in each axis grid.</p>\n<p>labels True to draw the name and values of the axis as a bitmap\nstring.</p>\n<p>x True to draw the x axis.</p>\n<p>y True to draw the y axis.</p>\n<p>z True to draw the z axis.</p>\n","desc":""},{"syntax":"drawGridPlane(stepSize, numberOfSteps, labels)","name":"drawGridPlane","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> stepSize<span class=\"token punctuation\">,</span> size_t numberOfSteps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> labels","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a coordinate system plane using the y and z axes.</p>\n<p><strong>Parameters:</strong></p>\n<p>stepSize The size of each row/column on the axis grid.</p>\n<p>numberOfSteps The number of rows/columns on the axis grid.</p>\n<p>labels True to draw the names and values of the axes.</p>\n","desc":""},{"syntax":"drawIcoSphere(&position, radius)","name":"drawIcoSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw an icosphere with this renderer using x, y, and radius.</p>\n<p>Icospheres are drawn with x, y, and z coordinates representing the\ncenter of the icosphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>position The 3D position point to use when drawing the icosphere.</p>\n<p>radius The radius to use when drawing this icosphere.</p>\n","desc":""},{"syntax":"drawIcoSphere(radius)","name":"drawIcoSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw an icosphere with the renderer at the origin using radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>radius The radius to use when drawing the icosphere with this\nrenderer.</p>\n","desc":""},{"syntax":"drawIcoSphere(x, y, radius)","name":"drawIcoSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw an icosphere with this renderer using x, y, and radius.</p>\n<p>Spheres are drawn with x, y, and z coordinates representing the center\nof the icosphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this icosphere.</p>\n<p>y The y coordinate to use when drawing this icosphere.</p>\n<p>radius The radius to use when drawing this icosphere.</p>\n","desc":""},{"syntax":"drawIcoSphere(x, y, z, radius)","name":"drawIcoSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw an icosphere with this renderer using x, y, and radius.</p>\n<p>Spheres are drawn with x, y, and z coordinates representing the center\nof the icosphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this icosphere.</p>\n<p>y The y coordinate to use when drawing this icosphere.</p>\n<p>z The z coordinate to use when drawing this icosphere.</p>\n<p>radius The radius to use when drawing this icosphere.</p>\n","desc":""},{"syntax":"drawLine(x1, y1, z1, x2, y2, z2)","name":"drawLine","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z2","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a line between two 3D points.</p>\n<p><strong>Parameters:</strong></p>\n<p>x1 The x coordinate of the first point.</p>\n<p>y1 The y coordinate of the first point.</p>\n<p>z1 The z coordinate of the first point.</p>\n<p>x2 The x coordinate of the second point.</p>\n<p>y2 The y coordinate of the second point.</p>\n<p>z2 The z coordinate of the second point.</p>\n","desc":""},{"syntax":"drawPlane(&position, width, height)","name":"drawPlane","returns":"void","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a plane with the renderer using a 3D point, width, and height.</p>\n<p>The number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().</p>\n<p><strong>Parameters:</strong></p>\n<p>position A 3D point to use as the position to draw the plane with\nthis renderer.</p>\n<p>width The width to use when drawing the plane with this renderer.</p>\n<p>height The height to use when drawing the plane with this\nrenderer.</p>\n","desc":""},{"syntax":"drawPlane(width, height)","name":"drawPlane","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a plane with the renderer at the origin.</p>\n<p>The number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().</p>\n<p><strong>Parameters:</strong></p>\n<p>width The width of the plane to use when drawing the plane with\nthis renderer.</p>\n<p>height The height to use when drawing the plane with this\nrenderer.</p>\n","desc":""},{"syntax":"drawPlane(x, y, width, height)","name":"drawPlane","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a plane with the renderer using x, y, width, and height.</p>\n<p>The number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing the plane with this\nrenderer.</p>\n<p>y The y coordinate to use when drawing the plane with this\nrenderer.</p>\n<p>width The width to use when drawing the plane with this renderer.</p>\n<p>height The height to use when drawing the plane with this\nrenderer.</p>\n","desc":""},{"syntax":"drawPlane(x, y, z, width, height)","name":"drawPlane","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a plane with the renderer using x, y, z, width, and height.</p>\n<p>The number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing the plane with this\nrenderer.</p>\n<p>y The y coordinate to use when drawing the plane with this\nrenderer.</p>\n<p>z The z coordinate to use when drawing the plane with this\nrenderer.</p>\n<p>width The width to use when drawing the plane with this renderer.</p>\n<p>height The height to use when drawing the plane with this\nrenderer.</p>\n","desc":""},{"syntax":"drawRectangle(x, y, z, w, h)","name":"drawRectangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a rectangle using a 3D point and a width and height.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate of the rectangle.</p>\n<p>y The y coordinate of the rectangle.</p>\n<p>z The z coordinate of the rectangle.</p>\n<p>w The width of the rectangle.</p>\n<p>h The height of the rectangle.</p>\n<p><strong>See also</strong>: ofRectMode</p>\n","desc":""},{"syntax":"drawRotationAxes(radius, stripWidth, circleRes)","name":"drawRotationAxes","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> stripWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleRes","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw the coordinate system's axes with the renderer.</p>\n<p>This draws red, green, and blue lines for the x, y, and z rotation\naxes respectively. This can be helpful when trying to orient other\nobject's rotation in respect to the coordinate system.</p>\n<p><strong>Parameters:</strong></p>\n<p>radius The radius to draw the rotation axes with.</p>\n<p>stripWidth The width of each axis line.</p>\n<p>circleRes The circle resolution to use when drawing the axes.</p>\n","desc":""},{"syntax":"drawSphere(&position, radius)","name":"drawSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a sphere with this renderer using a position point and\nradius.</p>\n<p>Spheres are drawn with x, y, and z coordinates representing the center\nof the sphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>position The 3D position point to use when drawing the sphere.</p>\n<p>radius The radius to use when drawing this sphere.</p>\n","desc":""},{"syntax":"drawSphere(radius)","name":"drawSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a sphere with the renderer at the defualt origin using\nradius.</p>\n<p><strong>Parameters:</strong></p>\n<p>radius The radius to use when drawing the sphere with this\nrenderer.</p>\n","desc":""},{"syntax":"drawSphere(x, y, radius)","name":"drawSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a sphere with this renderer using x, y, and radius.</p>\n<p>Spheres are drawn with x, y, and z coordinates representing the center\nof the sphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this sphere.</p>\n<p>y The y coordinate to use when drawing this sphere.</p>\n<p>radius The radius to use when drawing this sphere.</p>\n","desc":""},{"syntax":"drawSphere(x, y, z, radius)","name":"drawSphere","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a sphere with this renderer using x, y, z, and radius.</p>\n<p>Spheres are drawn with x, y, and z coordinates representing the center\nof the sphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this sphere.</p>\n<p>y The y coordinate to use when drawing this sphere.</p>\n<p>z The z coordinate to use when drawing this sphere.</p>\n<p>radius The radius to use when drawing this sphere.</p>\n","desc":""},{"syntax":"drawString(&font, text, x, y)","name":"drawString","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofTrueTypeFont <span class=\"token operator\">&amp;</span>font<span class=\"token punctuation\">,</span> string text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw text with this renderer using an ofTrueType font.</p>\n<p><strong>Parameters:</strong></p>\n<p>font The font to use when drawing \\p text.</p>\n<p>text The text to draw with the renderer.</p>\n<p>x The x position for the bottom of \\p text.</p>\n<p>y The y position for the left alignment of \\p text.</p>\n","desc":""},{"syntax":"drawString(text, x, y, z)","name":"drawString","returns":"void","returns_description":null,"parameters":"string text<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw text with this renderer using the current bitmap text mode.</p>\n<p>When using the OF_BITMAPMODE_SIMPLE bitmap text strings are drawn with\ntheir origin at the bottom left corner of the text. However,\nsetBitmapTextMode() can transform this default behavior with modes like:\nOF_BITMAPMODE_SIMPLE\nOF_BITMAPMODE_SCREEN\nOF_BITMAPMODE_VIEWPORT\nOF_BITMAPMODE_MODEL\nOF_BITMAPMODE_MODEL_BILLBOARD</p>\n<p><strong>Parameters:</strong></p>\n<p>text The text to draw with the renderer.</p>\n<p>x The x position for the bottom of \\p text.</p>\n<p>y The y position for the left alignment of \\p text.</p>\n<p>z The z position of the text.</p>\n","desc":""},{"syntax":"drawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)","name":"drawTriangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z3","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a triangle using three 3D points.</p>\n<p><strong>Parameters:</strong></p>\n<p>x1 The x coordinate of the first point.</p>\n<p>y1 The y coordinate of the first point.</p>\n<p>z1 The z coordinate of the first point.</p>\n<p>x2 The x coordinate of the second point.</p>\n<p>y2 The y coordinate of the second point.</p>\n<p>z2 The z coordinate of the second point.</p>\n<p>x3 The x coordinate of the third point.</p>\n<p>y3 The y coordinate of the third point.</p>\n<p>z3 The z coordinate of the third point.</p>\n","desc":""},{"syntax":"enableAntiAliasing()","name":"enableAntiAliasing","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Enable this renderer to use anti-aliasing if it is supported.</p>\n","desc":""},{"syntax":"finishRender()","name":"finishRender","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Stop using this renderer as the rendering surface.</p>\n","desc":""},{"syntax":"get3dGraphics()","name":"get3dGraphics","returns":"const of3dGraphics &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get a const reference of this renderer's 3D graphics object.</p>\n<p><strong>Returns</strong>: The 3D graphics object currently being used by this renderer.</p>\n","desc":""},{"syntax":"get3dGraphics()","name":"get3dGraphics","returns":"of3dGraphics &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get a reference with this renderer's 3D graphics object.</p>\n<p><strong>Returns</strong>: the 3D graphics object currently being used by this renderer.</p>\n","desc":""},{"syntax":"getBackgroundAuto()","name":"getBackgroundAuto","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the current auto redraw background setting for this renderer.</p>\n<p><strong>Returns</strong>: True if this renderer is set to redraw the background each\nframe.</p>\n","desc":""},{"syntax":"getBackgroundColor()","name":"getBackgroundColor","returns":"ofColor","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current background color.</p>\n<p><strong>Returns</strong>: This renderer's current background color.</p>\n","desc":""},{"syntax":"getBoxResolution()","name":"getBoxResolution","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current box resolution as a 3D vector.</p>\n<p>The returned vector's x, y, and z properties represent this renderer's\ncurrent resolution width, resolution height, and resolution depth\nrespectively.</p>\n<p><strong>Returns</strong>: This renderer's current box resolution as a 3D vector.</p>\n","desc":""},{"syntax":"getConeResolution()","name":"getConeResolution","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's cone resolution as a 3D vector.</p>\n<p>The resulting vector's x, y, and z properties correspond to the radius\nsegments, height segments, and cap segments of this renderer's cone\nresolution respectively.</p>\n<p><strong>Returns</strong>: A 3D vector representing this renderer's current cone\nresolution.</p>\n","desc":""},{"syntax":"getCoordHandedness()","name":"getCoordHandedness","returns":"ofHandednessType","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the coordinate handidness of this renderer.</p>\n<p>Possible handednesses include OF_LEFT_HANDED and OF_RIGHT_HANDED.\nIn a left handed coordinate system positive x, y and z axes point right,\nup and forward, respectively and positive rotation is clockwise about\nthe axis of rotation. In a right handed coordinate system the positive x\nand y axes point right and up, and the negative z axis points forward\nand positive rotation is counterclockwise about the axis of rotation.</p>\n<p><strong>Returns</strong>: The handedness this renderer is using.</p>\n<p><strong>See also</strong>: http://seanmiddleditch.com/matrices-handedness-pre-and-post-multiplication-row-vs-column-major-and-notations/</p>\n<p><strong>See also</strong>: https://www.evl.uic.edu/ralph/508S98/coordinates.html</p>\n","desc":""},{"syntax":"getCurrentMatrix(matrixMode_)","name":"getCurrentMatrix","returns":"glm::mat4","returns_description":null,"parameters":"ofMatrixMode matrixMode_","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current matrix for particular a matrix mode.</p>\n<p>Possible matrix modes include:\nOF_MATRIX_MODELVIEW\nOF_MATRIX_PROJECTION\nOF_MATRIX_TEXTURE</p>\n<p><strong>Parameters:</strong></p>\n<p>matrixMode_ The matrix mode to get the current matrix of.</p>\n<p><strong>Returns</strong>: The current matrix specified by \\p matrixMode_</p>\n<p><strong>See also</strong>: ofMatrixMode</p>\n","desc":""},{"syntax":"getCurrentNormalMatrix()","name":"getCurrentNormalMatrix","returns":"glm::mat4","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current normal matrix.</p>\n<p><strong>Returns</strong>: This renderer's current normal matrix.</p>\n","desc":""},{"syntax":"getCurrentOrientationMatrix()","name":"getCurrentOrientationMatrix","returns":"glm::mat4","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current orientation matrix.</p>\n<p><strong>Returns</strong>: This renderer's current orientation matrix.</p>\n","desc":""},{"syntax":"getCurrentViewMatrix()","name":"getCurrentViewMatrix","returns":"glm::mat4","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current view matrix.</p>\n<p><strong>Returns</strong>: This renderer's current view matrix.</p>\n","desc":""},{"syntax":"getCurrentViewport()","name":"getCurrentViewport","returns":"ofRectangle","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current viewport.</p>\n<p>Unlike getNativeViewport(), this method gets this renderer's current\nviewport with orientation and vertical flipping applied.</p>\n<p><strong>Returns</strong>: This renderer's viewport as a rectangle.</p>\n<p><strong>See also</strong>: getNativeViewport()</p>\n","desc":""},{"syntax":"getCylinderResolution()","name":"getCylinderResolution","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's cylinder resolution as a 3D vector.</p>\n<p>The resulting vector's x, y, and z properties correspond to the radius\nsegments, height segments, and cap segments of this renderer's cylinder\nresolution respectively.</p>\n<p><strong>Returns</strong>: A 3D vector representing this renderer's current cylinder\nresolution.</p>\n","desc":""},{"syntax":"getFillMode()","name":"getFillMode","returns":"ofFillFlag","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current fill flag.</p>\n<p>Possible fill flags include OF_OUTLINE and OF_FILLED.</p>\n<p><strong>Returns</strong>: The fill flag this render is currently using.</p>\n<p><strong>See also</strong>: ofFillFlag</p>\n","desc":""},{"syntax":"getIcoSphereResolution()","name":"getIcoSphereResolution","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current icosphere resolution.</p>\n<p><strong>Returns</strong>: This renderer's current icosphere resolution.</p>\n","desc":""},{"syntax":"getNativeViewport()","name":"getNativeViewport","returns":"ofRectangle","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current native viewport.</p>\n<p>Unlike getViewport(), this method gets this renderer's current viewport\nwithout orientation and vertical flipping applied.</p>\n<p><strong>Returns</strong>: This renderer's native viewport as a rectangle.</p>\n<p><strong>See also</strong>: getViewport()</p>\n","desc":""},{"syntax":"getPath()","name":"getPath","returns":"ofPath &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get a reference to the path used internally by this renderer.</p>\n<p><strong>Returns</strong>: A reference to the path used internally by this renderer.</p>\n","desc":""},{"syntax":"getPlaneResolution()","name":"getPlaneResolution","returns":"glm::vec2","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current plane resolution as a 2D vector.</p>\n<p>The resulting vector's x and y values corresponds to the current column\nand row resolutions of this renderer's plane resolution respectively.</p>\n<p><strong>Returns</strong>: A 2D vector representing this renderer's plane resolution in\ncolumns and rows.</p>\n","desc":""},{"syntax":"getRectMode()","name":"getRectMode","returns":"ofRectMode","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current rect mode.</p>\n<p>Possible rect modes include OF_RECTMODE_CORNER and OF_RECTMODE_CENTER.</p>\n<p><strong>Returns</strong>: The renderer's current rect mode.</p>\n<p><strong>See also</strong>: ofRectMode</p>\n","desc":""},{"syntax":"getSphereResolution()","name":"getSphereResolution","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current sphere resolution.</p>\n<p><strong>Returns</strong>: This renderer's current sphere resolution.</p>\n","desc":""},{"syntax":"getStyle()","name":"getStyle","returns":"ofStyle","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get this renderer's current style object.</p>\n<p><strong>Returns</strong>: This renderer's current style object.</p>\n","desc":""},{"syntax":"getType()","name":"getType","returns":"const string &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the string representation of the renderer type.</p>\n<p>For example, this method may return &quot;GL&quot;, &quot;ProgrammableGL&quot;, or another\ntype depending on the renderer being used.</p>\n<p><strong>Returns</strong>: The string representation of the renderer type.</p>\n","desc":""},{"syntax":"getViewportHeight()","name":"getViewportHeight","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the renderer's current viewport width.</p>\n<p><strong>Returns</strong>: The renderer's current viewport width.</p>\n","desc":""},{"syntax":"getViewportWidth()","name":"getViewportWidth","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the renderer's current viewport width.</p>\n<p><strong>Returns</strong>: The renderer's current viewport width.</p>\n","desc":""},{"syntax":"isVFlipped()","name":"isVFlipped","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns true if the renderer's current viewport is vertically\nflipped.</p>\n<p><strong>Returns</strong>: True if the renderer's current viewport is vertically flipped.</p>\n","desc":""},{"syntax":"loadIdentityMatrix()","name":"loadIdentityMatrix","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Load this renderer's identity matrix.</p>\n<p>This identity matrix is an mat4 matrix with 1s on the main\ndiagonal and 0s elsewhere.\n[\n[1, 0, 0, 0],\n[0, 1, 0, 0],\n[0, 0, 1, 0],\n[0, 0, 0, 1]\n]</p>\n<p>Matrix multiplications using this matrix as the multiplier will yield no\nchange in the multiplicand matrix.</p>\n","desc":""},{"syntax":"loadMatrix(&m)","name":"loadMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Load a matrix as this renderer's current matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>m The matrix to load into this renderer.</p>\n","desc":""},{"syntax":"loadMatrix(*m)","name":"loadMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>m","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Load m as this renderer's current matrix.</p>\n<p>\\p m can be passed to loadMatrix() in this way from raw data</p>\n<p><strong>Parameters:</strong></p>\n<p>m Float pointer to an 4x4 matrix.</p>\n","desc":""},{"syntax":"loadViewMatrix(&m)","name":"loadViewMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Load \\p m into this renderer's matrix stack as a view matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>m The view matrix to load into this renderer's matrix stack.</p>\n","desc":""},{"syntax":"matrixMode(mode)","name":"matrixMode","returns":"void","returns_description":null,"parameters":"ofMatrixMode mode","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets this renderer's current matrix mode.</p>\n<p>The possible matrix modes include:\nOF_MATRIX_MODELVIEW\nOF_MATRIX_PROJECTION\nOF_MATRIX_TEXTURE</p>\n<p><strong>Parameters:</strong></p>\n<p>mode The matrix mode this renderer's matrix should use.</p>\n","desc":""},{"syntax":"multMatrix(&m)","name":"multMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Multiply this renderer's current matrix by \\p m.</p>\n<p><strong>Parameters:</strong></p>\n<p>m The matrix to multiply this renderer's current matrix by.</p>\n","desc":""},{"syntax":"multMatrix(*m)","name":"multMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>m","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Multiply this renderer's current matrix by \\p m.</p>\n<p>\\p m can be passed to loadMatrix() in this way with raw data</p>\n<p><strong>Parameters:</strong></p>\n<p>m Float pointer to an mat4 to multiply this renderer's\ncurrent matrix by.</p>\n","desc":""},{"syntax":"multViewMatrix(&m)","name":"multViewMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Multiply this renderer's view matrix by \\p m.</p>\n<p><strong>Parameters:</strong></p>\n<p>m The matrix to multiply this renderer's view matrix by.</p>\n","desc":""},{"syntax":"popMatrix()","name":"popMatrix","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Pops this renderer's current matrix stack.</p>\n<p>popMatrix() restores the renderer's matrix to the state it was last\nsaved with with a call to pushMatrix().</p>\n","desc":""},{"syntax":"popStyle()","name":"popStyle","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Pop this renderer's current style from its internal style stack.</p>\n<p>This restores the style that was last saved with pushStyle().</p>\n","desc":""},{"syntax":"popView()","name":"popView","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Pop the current viewport from the renderer's view stack.</p>\n<p>popView() restores the renderer's viewport to the state it was last\nsaved with with a call to pushView().</p>\n<p><strong>See also</strong>: viewport()</p>\n","desc":""},{"syntax":"pushMatrix()","name":"pushMatrix","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Pushes this renderer's matrix stack down by one.</p>\n<p>pushMatrix() saves the renderer's current matrix allowing new\ntransformations and scales to effect only the new matrix created by\nthis method. Should be paired with a call to popMatrix().</p>\n","desc":""},{"syntax":"pushStyle()","name":"pushStyle","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Push this renderer's current style into its internal style stack.</p>\n<p>This creates a new style object used by this renderer internally until\npopStyle() is called.</p>\n","desc":""},{"syntax":"pushView()","name":"pushView","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Push the current viewport into the renderer's viewport stack.</p>\n<p>pushViewport() save the current viewport to the renderer's viewport\nhistory stack allowing new viewport operations to effect only the new\nviewport created by this method. Should be paired with popView.</p>\n<p><strong>See also</strong>: viewport()</p>\n","desc":""},{"syntax":"rotateDeg(degrees)","name":"rotateDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate this renderer's current matrix by \\p degrees about the z\naxis.</p>\n<p>This method is an alias of rotateZ().</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the z axis.</p>\n<p><strong>See also</strong>: rotateZ()</p>\n","desc":""},{"syntax":"rotateDeg(degrees, vecX, vecY, vecZ)","name":"rotateDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecZ","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate this renderer's current matrix by \\p degrees about a euler.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about vecX, vecY, and vecZ.</p>\n<p>vecX The x axis to rotate about.</p>\n<p>vecY The y axis to rotate about.</p>\n<p>vecZ The z axis to rotate about.</p>\n","desc":""},{"syntax":"rotateRad(degrees)","name":"rotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate this renderer's current matrix by \\p degrees about the z\naxis.</p>\n<p>This method is an alias of rotateZ().</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the z axis.</p>\n<p><strong>See also</strong>: rotateZ()</p>\n","desc":""},{"syntax":"rotateRad(degrees, vecX, vecY, vecZ)","name":"rotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vecZ","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate this renderer's current matrix by \\p degrees about a euler.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about vecX, vecY, and vecZ.</p>\n<p>vecX The x axis to rotate about.</p>\n<p>vecY The y axis to rotate about.</p>\n<p>vecZ The z axis to rotate about.</p>\n","desc":""},{"syntax":"rotateXDeg(degrees)","name":"rotateXDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate this renderer's current matrix by \\p degrees about the x\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the x axis.</p>\n","desc":""},{"syntax":"rotateXRad(degrees)","name":"rotateXRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate this renderer's current matrix by \\p degrees about the x\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the x axis.</p>\n","desc":""},{"syntax":"rotateYDeg(degrees)","name":"rotateYDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate this renderer's current matrix by \\p degrees about the y\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the y axis.</p>\n","desc":""},{"syntax":"rotateYRad(degrees)","name":"rotateYRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate this renderer's current matrix by \\p degrees about the y\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the y axis.</p>\n","desc":""},{"syntax":"rotateZDeg(degrees)","name":"rotateZDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate this renderer's current matrix by \\p degrees about the z\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the z axis.</p>\n","desc":""},{"syntax":"rotateZRad(degrees)","name":"rotateZRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate this renderer's current matrix by \\p degrees about the z\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the z axis.</p>\n","desc":""},{"syntax":"scale(xAmnt, yAmnt, zAmnt)","name":"scale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> xAmnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yAmnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> zAmnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale this renderer's current matrix by xAmnt, yAmnt, and zAmnt.</p>\n<p><strong>Parameters:</strong></p>\n<p>xAmnt The amount to scale this renderer's current matrix's x\naxis by.</p>\n<p>yAmnt The amount to scale this renderer's current matrix's y\naxis by.</p>\n<p>zAmnt The amount to scale this renderer's current matrix's z\naxis by. Defaults to 1.</p>\n","desc":""},{"syntax":"setBackgroundAuto(bManual)","name":"setBackgroundAuto","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bManual","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Enable/disable automatic redrawing of the background each frame.</p>\n<p><strong>Parameters:</strong></p>\n<p>bManual False to disable automatic background redrawing.</p>\n","desc":""},{"syntax":"setBackgroundColor(&c)","name":"setBackgroundColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>c","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this renderer's background color.</p>\n<p><strong>Parameters:</strong></p>\n<p>c The color to request this renderer to use.</p>\n","desc":""},{"syntax":"setBitmapTextMode(mode)","name":"setBitmapTextMode","returns":"void","returns_description":null,"parameters":"ofDrawBitmapMode mode","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this renderer's bitmap text mode.</p>\n<p>Possible bitmap texture modes include:\nOF_BITMAPMODE_SIMPLE\nOF_BITMAPMODE_SCREEN\nOF_BITMAPMODE_VIEWPORT\nOF_BITMAPMODE_MODEL\nOF_BITMAPMODE_MODEL_BILLBOARD</p>\n<p><strong>Parameters:</strong></p>\n<p>mode The bitmap mode to request this renderer to use.</p>\n<p><strong>See also</strong>: ofDrawBitmapMode</p>\n","desc":""},{"syntax":"setBlendMode(blendMode)","name":"setBlendMode","returns":"void","returns_description":null,"parameters":"ofBlendMode blendMode","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this renderer's current blend mode.</p>\n<p>Possible blend modes include:\nRotate this renderer's current matrix by \\p degrees about the z\naxis.</p>\n<p>This method is an alias of rotateZ().</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the z axis.</p>\n<p><strong>See also</strong>: rotateZ()\nOF_BLENDMODE_DISABLED\nOF_BLENDMODE_ALPHA\nOF_BLENDMODE_ADD\nOF_BLENDMODE_SUBTRACT\nOF_BLENDMODE_MULTIPLY\nOF_BLENDMODE_SCREEN</p>\n<p>blendMode The blend mode to request this renderer to use.</p>\n<p><strong>See also</strong>: ofBlendMode</p>\n<p><strong>See also</strong>: https://helpx.adobe.com/photoshop/using/blending-modes.html</p>\n","desc":""},{"syntax":"setBoxResolution(res)","name":"setBoxResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> res","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the resolution this renderer uses when drawing boxes.</p>\n<p><strong>Parameters:</strong></p>\n<p>res The resolution to use for box widths, heights, and depths.</p>\n","desc":""},{"syntax":"setBoxResolution(resWidth, resHeight, resDepth)","name":"setBoxResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> resWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resHeight<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resDepth","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the resolution this renderer uses when drawing boxes.</p>\n<p><strong>Parameters:</strong></p>\n<p>resWidth The width resolution this renderer uses when drawing\nboxes.</p>\n<p>resHeight The height resolution this renderer uses when drawing\nboxes.</p>\n<p>resDepth The depth resolution this renderer uses when drawing\nboxes.</p>\n","desc":""},{"syntax":"setCircleResolution(res)","name":"setCircleResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> res","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the resolution to use when drawing ellipses with this\nrenderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>res The number of points to use when drawing circles and ellipses\nwith this renderer.</p>\n","desc":""},{"syntax":"setColor(&color)","name":"setColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>color","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to use when drawing.</p>\n","desc":""},{"syntax":"setColor(&color, _a)","name":"setColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>color<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _a","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to use when drawing.</p>\n<p>_a The alpha value between 0 and 255 to use when drawing.</p>\n","desc":""},{"syntax":"setColor(gray)","name":"setColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> gray","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>gray The grayscale value to use when drawing.</p>\n","desc":""},{"syntax":"setColor(r, g, b)","name":"setColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>r The red value between 0 and 255 to use when drawing.</p>\n<p>g The green value between 0 and 255 to use when drawing.</p>\n<p>b The blue value between 0 and 255 to use when drawing.</p>\n","desc":""},{"syntax":"setColor(r, g, b, a)","name":"setColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> a","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>r The red value between 0 and 255 to use when drawing.</p>\n<p>g The green value between 0 and 255 to use when drawing.</p>\n<p>b The blue value between 0 and 255 to use when drawing.</p>\n<p>a The alpha value between 0 and 255 to use when drawing.</p>\n","desc":""},{"syntax":"setConeResolution(radiusSegments, heightSegments, capSegments = 2)","name":"setConeResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span>","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the resolution of a polygonized cone.</p>\n<p>Allows you to set the polygonization resolution of any cones you\nsubsequently draw with ofDrawCone().</p>\n<p><strong>Parameters:</strong></p>\n<p>radiusSegments The number of facets (subdivisions) around the\ncone's circular footprint.</p>\n<p>heightSegments The number of subdivisions from the cone's top to\nbottom.</p>\n<p>capSegments The number of annular (ring-shaped) subdivisions of\nthe cone's endcap.</p>\n","desc":""},{"syntax":"setCoordHandedness(handedness)","name":"setCoordHandedness","returns":"void","returns_description":null,"parameters":"ofHandednessType handedness","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the coordinate handidness of this renderer.</p>\n<p>Possible handednesses include OF_LEFT_HANDED and OF_RIGHT_HANDED.\nIn a left handed coordinate system positive x, y and z axes point right,\nup and forward, respectively and positive rotation is clockwise about\nthe axis of rotation. In a right handed coordinate system the positive x\nand y axes point right and up, and the negative z axis points forward\nand positive rotation is counterclockwise about the axis of rotation.</p>\n<p><strong>Parameters:</strong></p>\n<p>handedness The handedness to set this renderer to use.</p>\n<p><strong>See also</strong>: http://seanmiddleditch.com/matrices-handedness-pre-and-post-multiplication-row-vs-column-major-and-notations/</p>\n<p><strong>See also</strong>: https://www.evl.uic.edu/ralph/508S98/coordinates.html</p>\n","desc":""},{"syntax":"setCurveResolution(resolution)","name":"setCurveResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> resolution","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the resolution used when drawing curves with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>resolution The resolution to request this renderer to use when\ndrawing curves.</p>\n","desc":""},{"syntax":"setCylinderResolution(radiusSegments, heightSegments, capSegments = 2)","name":"setCylinderResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span>","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this renderer's cylinder resolution.</p>\n<p><strong>Parameters:</strong></p>\n<p>radiusSegments The number of facets (subdivisions) around the\nicosphere's circular footprint. A larger number yields a higher\nresolution.</p>\n<p>heightSegments The number of subdivisions from the cylinder's top\nto bottom.</p>\n<p>capSegments The number of annular (ring-shaped) subdivisions of\nthe cylinder's endcap. Defaults to 2.</p>\n","desc":""},{"syntax":"setDepthTest(depthTest)","name":"setDepthTest","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> depthTest","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Enable/disable depth testing with this renderer.</p>\n<p>When depth testing is enabled the order shapes are drawn with the\nrenderer is dependent on their distance from the camera rather than the\norder their drawing methods were called. This should be enabled when\nexpecting normal behavior when drawing 3D scenes.</p>\n<p><strong>Parameters:</strong></p>\n<p>depthTest True to enable depth testing.</p>\n","desc":""},{"syntax":"setFillMode(fill)","name":"setFillMode","returns":"void","returns_description":null,"parameters":"ofFillFlag fill","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>set this renderer's fill flag.</p>\n<p>Possible fill flags include OF_OUTLINE and OF_FILLED.</p>\n<p><strong>Parameters:</strong></p>\n<p>fill The fill flag to request this renderer to use.</p>\n<p><strong>See also</strong>: ofFillFlag</p>\n","desc":""},{"syntax":"setHexColor(hexColor)","name":"setHexColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> hexColor","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>hexColor The hexidecimal representation of the color to use when\ndrawing.</p>\n","desc":""},{"syntax":"setIcoSphereResolution(res)","name":"setIcoSphereResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> res","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the point resolution to use when drawing an icosphere with\nthis renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>res The desired icosphere resolution to use with this renderer.</p>\n","desc":""},{"syntax":"setLineSmoothing(smooth)","name":"setLineSmoothing","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> smooth","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Enable/disable line smoothing for this renderer if it's supported.</p>\n<p><strong>Parameters:</strong></p>\n<p>smooth True to enable line smoothing for this renderer if it's\nsupported.</p>\n","desc":""},{"syntax":"setLineWidth(lineWidth)","name":"setLineWidth","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> lineWidth","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the line width this renderer should use when drawing lines.</p>\n<p><strong>Parameters:</strong></p>\n<p>lineWidth The line width to request this renderer to use.</p>\n","desc":""},{"syntax":"setOrientation(orientation, vFlip)","name":"setOrientation","returns":"void","returns_description":null,"parameters":"ofOrientation orientation<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlip","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>set this renderer's orientation.</p>\n<p>Possible orientation values include:\nOF_ORIENTATION_DEFAULT\nOF_ORIENTATION_180\nOF_ORIENTATION_90_LEFT\nOF_ORIENTATION_90_RIGHT\nOF_ORIENTATION_UNKNOWN</p>\n<p><strong>Parameters:</strong></p>\n<p>orientation The orientation to use with this renderer.</p>\n<p>vFlip True if the orientation should be vertically flipped.</p>\n<p><strong>See also</strong>: ofOrientation</p>\n","desc":""},{"syntax":"setPlaneResolution(columns, rows)","name":"setPlaneResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this renderer's plane resolution using \\p column and \\p rows.</p>\n<p><strong>Parameters:</strong></p>\n<p>columns The number of columns to use when drawing planes with\nthis renderer.</p>\n<p>rows The number of rows to use when drawing planes with this\nrenderer.</p>\n","desc":""},{"syntax":"setPolyMode(mode)","name":"setPolyMode","returns":"void","returns_description":null,"parameters":"ofPolyWindingMode mode","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this renderer's poly winding mode.</p>\n<p>Possible poly winding modes include:\nOF_POLY_WINDING_ODD\nOF_POLY_WINDING_NONZERO\nOF_POLY_WINDING_POSITIVE\nOF_POLY_WINDING_NEGATIVE\nOF_POLY_WINDING_ABS_GEQ_TWO</p>\n<p><strong>Parameters:</strong></p>\n<p>mode The poly winding mode to request this renderer to use.</p>\n<p><strong>See also</strong>: ofPolyWindingMode</p>\n","desc":""},{"syntax":"setRectMode(mode)","name":"setRectMode","returns":"void","returns_description":null,"parameters":"ofRectMode mode","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this renderer's rect mode.</p>\n<p>Possible rect modes include OF_RECTMODE_CORNER and OF_RECTMODE_CENTER.</p>\n<p><strong>Parameters:</strong></p>\n<p>mode The rect mode to request this renderer to use.</p>\n<p><strong>See also</strong>: ofRectMode</p>\n","desc":""},{"syntax":"setSphereResolution(res)","name":"setSphereResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> res","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>UV Sphere\nSet the point resolution to use when drawing a sphere with this\nrenderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>res The desired sphere resolution to use with this renderer.</p>\n","desc":""},{"syntax":"setStyle(&style)","name":"setStyle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofStyle <span class=\"token operator\">&amp;</span>style","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this renderer's current style object.</p>\n<p><strong>Parameters:</strong></p>\n<p>style The style object to set this renderer to use.</p>\n","desc":""},{"syntax":"setupGraphicDefaults()","name":"setupGraphicDefaults","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>setup the default graphics settings for this renderer.</p>\n","desc":""},{"syntax":"setupScreen()","name":"setupScreen","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>setup the default screen settings for this renderer.</p>\n","desc":""},{"syntax":"setupScreenOrtho(width, height, nearDist, farDist)","name":"setupScreenOrtho","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> nearDist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> farDist","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Setup the renderer to use an orthographic matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>width The width of the desired orthographic matrix. Defaults to\n-1 setting its width according to the rendering surface's width.</p>\n<p>height The height of the desired orthographic matrix. Defaults to\n-1 setting its height according to the rendering surface's height.</p>\n<p>nearDist The near clipping distance to use with the orthographic\nmatrix. Setting this value to 0 uses the defualt near distance. Defaults\nto 0.</p>\n<p>farDist The far clipping distance to use with the orthographic\nmatrix. Setting this value to 0 uses the defualt near distance. Defaults\nto 0.</p>\n","desc":""},{"syntax":"setupScreenPerspective(width, height, fov, nearDist, farDist)","name":"setupScreenPerspective","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> fov<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> nearDist<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> farDist","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Setup the renderer to use a perspective matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>width The width of the desired perspective matrix. Defaults to -1\nsetting its width according to the rendering surface's width.</p>\n<p>height The height of the desired perspective matrix. Defaults to\nDefaults to -1 setting its width according to the rendering surface's\nwidth.</p>\n<p>fov The field of view to use with the perspective matrix.\nDefaults to 60.</p>\n<p>nearDist The near clipping distance to use with the perspective\nmatrix. Setting this value to 0 uses the default near distance. Defaults\nto 0.</p>\n<p>farDist The far clipping distance to use with the perspective\nmatrix. Setting this value to 0 uses the default near distance. Defaults\nto 0.</p>\n","desc":""},{"syntax":"startRender()","name":"startRender","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Starts using this renderer as the rendering surface.</p>\n","desc":""},{"syntax":"translate(&p)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Translate this renderer's current matrix by a point.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The 3D point to translate this renderer's current matrix by.</p>\n","desc":""},{"syntax":"translate(x, y, z)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Translate this renderer's current matrix by x, y, and z.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to translate this renderer's current matrix\nby.</p>\n<p>y The y coordinate to translate this renderer's current matrix\nby.</p>\n<p>z The z coordinate to translate this renderer's current matrix\nby. Defaults to 0.</p>\n","desc":""},{"syntax":"unbind(&camera)","name":"unbind","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofCamera <span class=\"token operator\">&amp;</span>camera","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Unbind the camera from this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>camera The camera to unbind from this renderer.</p>\n","desc":""},{"syntax":"viewport(viewport)","name":"viewport","returns":"void","returns_description":null,"parameters":"ofRectangle viewport","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this renderer's viewport using a rectangle.</p>\n<p>This method uses the ofGetWidth() and ofGetHeight() to set the width and\nheight of the viewport. It also automatically creates near and far\nclipping planes based on this width and height.</p>\n","desc":""},{"syntax":"viewport(x, y, width, height, vflip = true)","name":"viewport","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this renderer's viewport manually using x, y, width, and\nheight.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate of the viewport. Defaults to 0.</p>\n<p>y The y coordinate of the viewport. Defaults to 0.</p>\n<p>w The width of the viewport. Defaults to -1 setting its width\naccording to the rendering surface's width.</p>\n<p>h The height of the viewport. Defaults to -1 setting its height\naccording to the rendering surface's height.</p>\n","desc":""},{"syntax":"~ofBaseRenderer()","name":"~ofBaseRenderer","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofBaseRenderer</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: True</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>The base renderer interface.</p>\n<p>##Description</p>\n<p>##Methods</p>\n<p>###void background(&amp;c)</p>\n<p>&lt;!--\n<em>syntax: background(&amp;c)</em>\n<em>name: background</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofColor &amp;c</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Immediately paint a background color to the screen.</p>\n<p>If automatic background drawing is enabled (which it is by default) this\nmethod called from ofApp::setup() will also repaint the background with\nthis color each frame.</p>\n<p><strong>Parameters:</strong></p>\n<p>c The color to paint the background with.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void background(brightness)</p>\n<p>&lt;!--\n<em>syntax: background(brightness)</em>\n<em>name: background</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float brightness</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Immediately paint a grayscale background color to the screen.</p>\n<p>If automatic background drawing is enabled (which it is by default) this\nmethod called from ofApp::setup() will also repaint the background with\nthis color each frame.</p>\n<p><strong>Parameters:</strong></p>\n<p>brightness The grayscale value between 0 and 255 to paint the\nbackground with.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void background(hexColor, _a = 255.0f)</p>\n<p>&lt;!--\n_syntax: background(hexColor, <em>a = 255.0f)</em>\n<em>name: background</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: int hexColor, float <em>a=255.0f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Immediately paint a grayscale background color to the screen.</p>\n<p>If automatic background drawing is enabled (which it is by default) this\nmethod called from ofApp::setup() will also repaint the background with\nthis color each frame.</p>\n<p><strong>Parameters:</strong></p>\n<p>hexColor The 24-bit hex representation of the color to paint the\nbackground with.</p>\n<p>_a The alpha value between 0 and 255 to apply to \\p hexColor when\nwhen painting the background.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void background(r, g, b, a = 255)</p>\n<p>&lt;!--\n<em>syntax: background(r, g, b, a = 255)</em>\n<em>name: background</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int r, int g, int b, int a=255</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Immediately paint a background color to the screen.</p>\n<p><strong>Parameters:</strong></p>\n<p>r The red value between 0 and 255 to use for the background.</p>\n<p>g The green value between 0 and 255 to use for the background.</p>\n<p>b The blue value between 0 and 255 to use for the background.</p>\n<p>a The alpha value between 0 and 255 to use for the background.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void bind(&amp;camera, &amp;viewport)</p>\n<p>&lt;!--\n<em>syntax: bind(&amp;camera, &amp;viewport)</em>\n<em>name: bind</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofCamera &amp;camera, const ofRectangle &amp;viewport</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Bind \\p camera's matrices to this renderer's matrix stack.</p>\n<p>Bind's the \\p camera's modelview and projection matrices to this\nrenderer's matrix stack using \\p viewport. Should be followed with a\ncall to unbind().</p>\n<p><strong>Parameters:</strong></p>\n<p>camera The camera to bind to this renderer.</p>\n<p>viewport The viewport to use when binding \\p camera to this\nrenderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clear()</p>\n<p>&lt;!--\n<em>syntax: clear()</em>\n<em>name: clear</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clear this renderer's current color and bit depths.</p>\n<p>clear() will clear the screen entirely.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clear(brightness, a)</p>\n<p>&lt;!--\n<em>syntax: clear(brightness, a)</em>\n<em>name: clear</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float brightness, float a</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clear this renderer's color and bit depths replacing them.</p>\n<p>clear() will clear the screen entirely.</p>\n<p><strong>Parameters:</strong></p>\n<p>brightness The grayscale value between 0 and 255 to use when\nclearing the screen.</p>\n<p>a The alpha value between 0 and 255 to use when clearing the\nscreen. Defaults to 0.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clear(r, g, b, a)</p>\n<p>&lt;!--\n<em>syntax: clear(r, g, b, a)</em>\n<em>name: clear</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float r, float g, float b, float a</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clear this renderer's color and bit depths and replace them.</p>\n<p>clear() will clear the screen entirely.</p>\n<p><strong>Parameters:</strong></p>\n<p>r The red value between 0 and 255 to use when clearing the\nscreen.</p>\n<p>g The green value between 0 and 255 to use when clearing the\nscreen.</p>\n<p>b The blue value between 0 and 255 use when clearing the screen.</p>\n<p>a The alpha value between 0 and 255 use when clearing the screen.\nDefaults to 0.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearAlpha()</p>\n<p>&lt;!--\n<em>syntax: clearAlpha()</em>\n<em>name: clearAlpha</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Restore the alpha color to its full opacity value.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disableAntiAliasing()</p>\n<p>&lt;!--\n<em>syntax: disableAntiAliasing()</em>\n<em>name: disableAntiAliasing</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Disable this renderer from using anti-aliasing.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;image, x, y, z, w, h, sx, sy, sw, sh)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;image, x, y, z, w, h, sx, sy, sw, sh)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofImage &amp;image, float x, float y, float z, float w, float h, float sx, float sy, float sw, float sh</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw an \\p image with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>image The image to draw with this renderer.</p>\n<p>x The x coordinate to use when drawing \\p image with this\nrenderer.</p>\n<p>y The y coordinate to use to draw \\p image with this renderer.</p>\n<p>z The z coordinate to use to drawing \\p image with this renderer.</p>\n<p>w The width to use to draw the \\p image with this renderer.</p>\n<p>h The height to use to draw the \\p image with this renderer.</p>\n<p>sx The subsection x axis offset within the image texture.</p>\n<p>sy The subsection y axis offset within the image texture.</p>\n<p>sw The subsection width offset within the image texture.</p>\n<p>sh The subsection height offset within the image texture.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;image, x, y, z, w, h, sx, sy, sw, sh)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;image, x, y, z, w, h, sx, sy, sw, sh)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofFloatImage &amp;image, float x, float y, float z, float w, float h, float sx, float sy, float sw, float sh</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw an \\p image with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>image The image to draw with this renderer.</p>\n<p>x The x coordinate to use to draw \\p image with this renderer.</p>\n<p>y The y coordinate to use to draw \\p image with this renderer.</p>\n<p>z The z coordinate to use to draw \\p image with this renderer.</p>\n<p>w The width to use to draw \\p image with this renderer.</p>\n<p>h The height to use to draw \\p image with this renderer.</p>\n<p>sx The subsection x axis offset within the image texture.</p>\n<p>sy The subsection y axis offset within the image texture.</p>\n<p>sw The subsection width offset within the image texture.</p>\n<p>sh The subsection height offset within the image texture.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;image, x, y, z, w, h, sx, sy, sw, sh)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;image, x, y, z, w, h, sx, sy, sw, sh)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofShortImage &amp;image, float x, float y, float z, float w, float h, float sx, float sy, float sw, float sh</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw an \\p image with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>image The image to draw with this renderer.</p>\n<p>x The x coordinate to use to draw \\p image with this renderer.</p>\n<p>y The y coordinate to use to draw \\p image with this renderer.</p>\n<p>z The z coordinate to use to draw \\p image with this renderer.</p>\n<p>w The width to use when drawing the image with this renderer.</p>\n<p>h The height to use when drawing the image with this renderer.</p>\n<p>sx The subsection x axis offset within the image texture.</p>\n<p>sy The subsection y axis offset within the image texture.</p>\n<p>sw The subsection width offset within the image texture.</p>\n<p>sh The subsection height offset within the image texture.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;mesh, renderType)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;mesh, renderType)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofMesh &amp;mesh, ofPolyRenderMode renderType</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a \\p mesh with this renderer using the \\p renderType.</p>\n<p>\\p renderType defines how the \\p mesh will be rendered and may be:\nOF_MESH_POINTS,\nOF_MESH_WIREFRAME,\nOF_MESH_FILL</p>\n<p><strong>Parameters:</strong></p>\n<p>mesh The mesh to draw with this renderer.</p>\n<p>renderType The render mode to use to draw \\p mesh with this\nrenderer.</p>\n<p><strong>See also</strong>: ofPolyRenderMode</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;model)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;model)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofNode &amp;model</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a node with this renderer using ofNode::customDraw().</p>\n<p><strong>Parameters:</strong></p>\n<p>model The node to draw with this renderer.</p>\n<p><strong>See also</strong>: ofNode::customDraw()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;model, renderType)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;model, renderType)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const of3dPrimitive &amp;model, ofPolyRenderMode renderType</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a \\p model with this renderer using the \\p renderType.</p>\n<p>\\p renderType defines how the \\p model will be rendered and may be:\nOF_MESH_POINTS,\nOF_MESH_WIREFRAME,\nOF_MESH_FILL</p>\n<p><strong>Parameters:</strong></p>\n<p>model The model to draw with this renderer.</p>\n<p>renderType The render mode to use when drawing the \\p model\nwith this renderer.</p>\n<p><strong>See also</strong>: ofPolyRenderMode</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;poly)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;poly)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofPolyline &amp;poly</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a polyline with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>poly The polyline to draw with this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;shape)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;shape)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofPath &amp;shape</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a path with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>shape The path to draw with this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;shape, x, y)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;shape, x, y)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofPath &amp;shape, float x, float y</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a path with this renderer at \\p x and \\p y.</p>\n<p><strong>Parameters:</strong></p>\n<p>shape The path to draw with this renderer.</p>\n<p>x The x coordinate to use to draw \\p shape.</p>\n<p>y The y coordinate to use to draw \\p shape.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;vertexData, renderType, useColors, useTextures, useNormals)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;vertexData, renderType, useColors, useTextures, useNormals)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofMesh &amp;vertexData, ofPolyRenderMode renderType, bool useColors, bool useTextures, bool useNormals</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a mesh with this renderer.</p>\n<p>\\p renderType defines how the \\p mesh will be rendered and may be:\nOF_MESH_POINTS,\nOF_MESH_WIREFRAME,\nOF_MESH_FILL</p>\n<p><strong>Parameters:</strong></p>\n<p>vertexData The mesh to draw with this renderer.</p>\n<p>renderType The render mode to use to draw \\p vertexData to\nthis renderer.</p>\n<p>useColors True to use per-vertex coloring to draw the\n\\p vertexData.</p>\n<p>useTextures True to use texture coordinates to draw the \\p\nvertexData.</p>\n<p>useNormals True to use normals to draw the \\p vertexData.</p>\n<p><strong>See also</strong>: ofPolyRenderMode</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;video, x, y, w, h)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;video, x, y, w, h)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofBaseVideoDraws &amp;video, float x, float y, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a \\p video with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>video The video with draw with this renderer.</p>\n<p>x The x coordinate to use to draw \\p video with this renderer.</p>\n<p>y The y coordinate to use to draw \\p video with this renderer.</p>\n<p>w The width to use to draw the video with this renderer.</p>\n<p>h The height to use to draw the video with this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawArrow(&amp;start, &amp;end, headSize)</p>\n<p>&lt;!--\n<em>syntax: drawArrow(&amp;start, &amp;end, headSize)</em>\n<em>name: drawArrow</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;start, const glm::vec3 &amp;end, float headSize</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw an arrow between two 3D points.\nstart The 3D vector to use as the first point.\nend The 3D vector to use as the second point.\n\\float headSize The size of the arrowhead.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawAxis(size)</p>\n<p>&lt;!--\n<em>syntax: drawAxis(size)</em>\n<em>name: drawAxis</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float size</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw the coordinate system's axes with the renderer.</p>\n<p>This draws a red, green, and blue lines for the x, y, and z axes\nrespectively. This can be helpful when trying to orient other objects\nin respect to the coordinate system.</p>\n<p><strong>Parameters:</strong></p>\n<p>size The length to draw each axis line.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(&amp;position, size)</p>\n<p>&lt;!--\n<em>syntax: drawBox(&amp;position, size)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float size</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a cube with the specified size, starting from the specified\nposition.</p>\n<p>A cube is drawn starting from a 3D reference position, with the\nspecified size. The cube is drawn with the current color, e.g. set with\nofSetColor(). The cube is drawn filled by default; change this with\nofFill().</p>\n<p><strong>Parameters:</strong></p>\n<p>position an glm::vec3 which contains the (x,y,z) coordinates for\nthe cube's reference corner.</p>\n<p>size The size of the cube.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(&amp;position, width, height, depth)</p>\n<p>&lt;!--\n<em>syntax: drawBox(&amp;position, width, height, depth)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float width, float height, float depth</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangular box using position, width, height and depth.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>position an glm::vec3 which contains the (x,y,z) coordinates for the box's reference corner.</p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(size)</p>\n<p>&lt;!--\n<em>syntax: drawBox(size)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float size</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a cube with the specified size at the origin.</p>\n<p>The cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>size The size of the cube.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(width, height, depth)</p>\n<p>&lt;!--\n<em>syntax: drawBox(width, height, depth)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float width, float height, float depth</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangular box with the specified dimensions, starting from the origin.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from the origin of the current reference frame.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(x, y, z, size)</p>\n<p>&lt;!--\n<em>syntax: drawBox(x, y, z, size)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float size</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a cube using x, y, z, and size.\ncoordinates.</p>\n<p>A cube is a rectangular solid bounded by six square faces of equal size.\nIt is also known as a regular hexahedron, a square parallelepiped, an\nequilateral cuboid and a right rhombohedron. It is a regular square\nprism in three orientations.</p>\n<p>It is drawn starting from a 3D reference coordinate, with the specified\nsize. The cube is drawn with the current color, e.g. set with\nofSetColor(). The cube is drawn filled by default; change this with\nofFill().</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x-coordinate of the cube's origin.</p>\n<p>y The y-coordinate of the cube's origin.</p>\n<p>z The z-coordinate of the cube's origin.</p>\n<p>size The size of the cube.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBox(x, y, z, width, height, depth)</p>\n<p>&lt;!--\n<em>syntax: drawBox(x, y, z, width, height, depth)</em>\n<em>name: drawBox</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float width, float height, float depth</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a rectangular box using x, y, z, width, height, and depth.</p>\n<p>A box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x-coordinate of the box's origin.</p>\n<p>y The y-coordinate of the box's origin.</p>\n<p>z The z-coordinate of the box's origin.</p>\n<p>width The width of the box.</p>\n<p>height The height of the box.</p>\n<p>depth The depth of the box.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCircle(x, y, z, radius)</p>\n<p>&lt;!--\n<em>syntax: drawCircle(x, y, z, radius)</em>\n<em>name: drawCircle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float radius</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a circle using a 3D point and a radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate of the center of the circle.</p>\n<p>y The y coordinate of the center of the circle.</p>\n<p>z The z coordinate of the center of the circle.</p>\n<p>radius The length of the radius of the circle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCone(&amp;position, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCone(&amp;position, radius, height)</em>\n<em>name: drawCone</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a cone with this renderer using x, y, z, radius, and\nheight.</p>\n<p>Cones are drawn with x, y, and z coordinates representing the centroid\nof the cone. \\p Radius is the radius of the cone's circular\nfootprint and \\p height representing the height of the cone's.</p>\n<p><strong>Parameters:</strong></p>\n<p>position The 3D point representing this cone's position.</p>\n<p>radius The radius to use when drawing this cone's circular\nfootprint.</p>\n<p>height The height to use when drawing this cone.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCone(radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCone(radius, height)</em>\n<em>name: drawCone</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a cone at the origin using radius and height.</p>\n<p>This cone will be drawn with its position at the coordinate system's\norigin. \\p Radius is the radius of the cone's circular footprint and\n\\p height representing the height of the cone.</p>\n<p><strong>Parameters:</strong></p>\n<p>radius The radius to use when drawing this cone's circular\nfootprint.</p>\n<p>height The height to use when drawing this cone.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCone(x, y, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCone(x, y, radius, height)</em>\n<em>name: drawCone</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a cone with this renderer using x, y, z, radius, and\nheight.</p>\n<p>Cones are drawn with x, y, and z coordinates representing the centroid\nof the cylinder. Radius is the radius of the cone's circular\nfootprint and height representing the height of the cone's.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this cone.</p>\n<p>y The y coordinate to use when drawing this cone.</p>\n<p>radius The radius to use when drawing this cone's circular\nfootprint.</p>\n<p>height The height to use when drawing this cone.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCone(x, y, z, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCone(x, y, z, radius, height)</em>\n<em>name: drawCone</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a cone with this renderer using x, y, z, radius, and\nheight.</p>\n<p>Cones are drawn with x, y, and z coordinates representing the centroid\nof the cone. Radius is the radius of the cone's circular\nfootprint and height representing the height of the cone.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this cone.</p>\n<p>y The y coordinate to use when drawing this cone.</p>\n<p>z The z coordinate to use when drawing this cone.</p>\n<p>radius The radius to use when drawing this cone's circular\nfootprint.</p>\n<p>height The height to use when drawing this cone.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCylinder(&amp;position, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCylinder(&amp;position, radius, height)</em>\n<em>name: drawCylinder</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a cylinder with this renderer using position, radius, and\nheight.</p>\n<p>Cyliners are drawn with x, y, and z coordinates representing the\ncentroid of the cylinder. Radius is the radius of the cylinder's\ncircular footprint and height representing the height of the cylinder.</p>\n<p><strong>Parameters:</strong></p>\n<p>position The 3D point to use as a position coordinate when\ndrawing this cylinder.</p>\n<p>radius The radius to use when drawing this cylinder's circular\nfootprint.</p>\n<p>height The height to use when drawing this cylinder.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCylinder(radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCylinder(radius, height)</em>\n<em>name: drawCylinder</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a cylinder at the origin using radius and height.</p>\n<p>A cylinder drawn in this way will be positioned at the origin. Radius is\nthe radius of the cylinder's circular footprint and height representing\nthe height of the cylinder.</p>\n<p><strong>Parameters:</strong></p>\n<p>radius The radius to use when drawing this cylinder's circular\nfootprint.</p>\n<p>height The height to use when drawing this cylinder.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCylinder(x, y, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCylinder(x, y, radius, height)</em>\n<em>name: drawCylinder</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a cylinder with this renderer using x, y, radius, and\nheight.</p>\n<p>Cyliners are drawn with x, y, and z coordinates representing the\ncentroid of the cylinder. Radius is the radius of the cylinder's\ncircular footprint and height representing the height of the cylinder.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this cylinder.</p>\n<p>y The y coordinate to use when drawing this cylinder.</p>\n<p>radius The radius to use when drawing this cylinder's circular\nfootprint.</p>\n<p>height The height to use when drawing this cylinder.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawCylinder(x, y, z, radius, height)</p>\n<p>&lt;!--\n<em>syntax: drawCylinder(x, y, z, radius, height)</em>\n<em>name: drawCylinder</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a cylinder with this renderer using x, y, z, radius, and\nheight.</p>\n<p>Cyliners are drawn with x, y, and z coordinates representing the\ncentroid of the cylinder. Radius is the radius of the cylinder's\ncircular footprint and height representing the height of the cylinder.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this cylinder.</p>\n<p>y The y coordinate to use when drawing this cylinder.</p>\n<p>z The z coordinate to use when drawing this cylinder.</p>\n<p>radius The radius to use when drawing this cylinder's circular\nfootprint.</p>\n<p>height The height to use when drawing this cylinder.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawEllipse(x, y, z, width, height)</p>\n<p>&lt;!--\n<em>syntax: drawEllipse(x, y, z, width, height)</em>\n<em>name: drawEllipse</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float width, float height</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw an ellipse using a 3D point, width, and height.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate of the center of the circle.</p>\n<p>y The y coordinate of the center of the circle.</p>\n<p>z The z coordinate of the center of the circle.</p>\n<p>width The width of the circle.</p>\n<p>height The height of the circle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawGrid(stepSize, numberOfSteps, labels, x, y, z)</p>\n<p>&lt;!--\n<em>syntax: drawGrid(stepSize, numberOfSteps, labels, x, y, z)</em>\n<em>name: drawGrid</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float stepSize, size_t numberOfSteps, bool labels, bool x, bool y, bool z</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw the coordinate system's axes as a grid with the renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>stepSize The size of each row/column in each axis grid.</p>\n<p>numberOfSteps The number of rows/columns in each axis grid.</p>\n<p>labels True to draw the name and values of the axis as a bitmap\nstring.</p>\n<p>x True to draw the x axis.</p>\n<p>y True to draw the y axis.</p>\n<p>z True to draw the z axis.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawGridPlane(stepSize, numberOfSteps, labels)</p>\n<p>&lt;!--\n<em>syntax: drawGridPlane(stepSize, numberOfSteps, labels)</em>\n<em>name: drawGridPlane</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float stepSize, size_t numberOfSteps, bool labels</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a coordinate system plane using the y and z axes.</p>\n<p><strong>Parameters:</strong></p>\n<p>stepSize The size of each row/column on the axis grid.</p>\n<p>numberOfSteps The number of rows/columns on the axis grid.</p>\n<p>labels True to draw the names and values of the axes.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawIcoSphere(&amp;position, radius)</p>\n<p>&lt;!--\n<em>syntax: drawIcoSphere(&amp;position, radius)</em>\n<em>name: drawIcoSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw an icosphere with this renderer using x, y, and radius.</p>\n<p>Icospheres are drawn with x, y, and z coordinates representing the\ncenter of the icosphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>position The 3D position point to use when drawing the icosphere.</p>\n<p>radius The radius to use when drawing this icosphere.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawIcoSphere(radius)</p>\n<p>&lt;!--\n<em>syntax: drawIcoSphere(radius)</em>\n<em>name: drawIcoSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw an icosphere with the renderer at the origin using radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>radius The radius to use when drawing the icosphere with this\nrenderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawIcoSphere(x, y, radius)</p>\n<p>&lt;!--\n<em>syntax: drawIcoSphere(x, y, radius)</em>\n<em>name: drawIcoSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw an icosphere with this renderer using x, y, and radius.</p>\n<p>Spheres are drawn with x, y, and z coordinates representing the center\nof the icosphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this icosphere.</p>\n<p>y The y coordinate to use when drawing this icosphere.</p>\n<p>radius The radius to use when drawing this icosphere.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawIcoSphere(x, y, z, radius)</p>\n<p>&lt;!--\n<em>syntax: drawIcoSphere(x, y, z, radius)</em>\n<em>name: drawIcoSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw an icosphere with this renderer using x, y, and radius.</p>\n<p>Spheres are drawn with x, y, and z coordinates representing the center\nof the icosphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this icosphere.</p>\n<p>y The y coordinate to use when drawing this icosphere.</p>\n<p>z The z coordinate to use when drawing this icosphere.</p>\n<p>radius The radius to use when drawing this icosphere.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawLine(x1, y1, z1, x2, y2, z2)</p>\n<p>&lt;!--\n<em>syntax: drawLine(x1, y1, z1, x2, y2, z2)</em>\n<em>name: drawLine</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x1, float y1, float z1, float x2, float y2, float z2</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a line between two 3D points.</p>\n<p><strong>Parameters:</strong></p>\n<p>x1 The x coordinate of the first point.</p>\n<p>y1 The y coordinate of the first point.</p>\n<p>z1 The z coordinate of the first point.</p>\n<p>x2 The x coordinate of the second point.</p>\n<p>y2 The y coordinate of the second point.</p>\n<p>z2 The z coordinate of the second point.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawPlane(&amp;position, width, height)</p>\n<p>&lt;!--\n<em>syntax: drawPlane(&amp;position, width, height)</em>\n<em>name: drawPlane</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: glm::vec3 &amp;position, float width, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a plane with the renderer using a 3D point, width, and height.</p>\n<p>The number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().</p>\n<p><strong>Parameters:</strong></p>\n<p>position A 3D point to use as the position to draw the plane with\nthis renderer.</p>\n<p>width The width to use when drawing the plane with this renderer.</p>\n<p>height The height to use when drawing the plane with this\nrenderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawPlane(width, height)</p>\n<p>&lt;!--\n<em>syntax: drawPlane(width, height)</em>\n<em>name: drawPlane</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float width, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a plane with the renderer at the origin.</p>\n<p>The number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().</p>\n<p><strong>Parameters:</strong></p>\n<p>width The width of the plane to use when drawing the plane with\nthis renderer.</p>\n<p>height The height to use when drawing the plane with this\nrenderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawPlane(x, y, width, height)</p>\n<p>&lt;!--\n<em>syntax: drawPlane(x, y, width, height)</em>\n<em>name: drawPlane</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float width, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a plane with the renderer using x, y, width, and height.</p>\n<p>The number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing the plane with this\nrenderer.</p>\n<p>y The y coordinate to use when drawing the plane with this\nrenderer.</p>\n<p>width The width to use when drawing the plane with this renderer.</p>\n<p>height The height to use when drawing the plane with this\nrenderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawPlane(x, y, z, width, height)</p>\n<p>&lt;!--\n<em>syntax: drawPlane(x, y, z, width, height)</em>\n<em>name: drawPlane</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float width, float height</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a plane with the renderer using x, y, z, width, and height.</p>\n<p>The number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing the plane with this\nrenderer.</p>\n<p>y The y coordinate to use when drawing the plane with this\nrenderer.</p>\n<p>z The z coordinate to use when drawing the plane with this\nrenderer.</p>\n<p>width The width to use when drawing the plane with this renderer.</p>\n<p>height The height to use when drawing the plane with this\nrenderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawRectangle(x, y, z, w, h)</p>\n<p>&lt;!--\n<em>syntax: drawRectangle(x, y, z, w, h)</em>\n<em>name: drawRectangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a rectangle using a 3D point and a width and height.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate of the rectangle.</p>\n<p>y The y coordinate of the rectangle.</p>\n<p>z The z coordinate of the rectangle.</p>\n<p>w The width of the rectangle.</p>\n<p>h The height of the rectangle.</p>\n<p><strong>See also</strong>: ofRectMode</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawRotationAxes(radius, stripWidth, circleRes)</p>\n<p>&lt;!--\n<em>syntax: drawRotationAxes(radius, stripWidth, circleRes)</em>\n<em>name: drawRotationAxes</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius, float stripWidth, int circleRes</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw the coordinate system's axes with the renderer.</p>\n<p>This draws red, green, and blue lines for the x, y, and z rotation\naxes respectively. This can be helpful when trying to orient other\nobject's rotation in respect to the coordinate system.</p>\n<p><strong>Parameters:</strong></p>\n<p>radius The radius to draw the rotation axes with.</p>\n<p>stripWidth The width of each axis line.</p>\n<p>circleRes The circle resolution to use when drawing the axes.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSphere(&amp;position, radius)</p>\n<p>&lt;!--\n<em>syntax: drawSphere(&amp;position, radius)</em>\n<em>name: drawSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;position, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a sphere with this renderer using a position point and\nradius.</p>\n<p>Spheres are drawn with x, y, and z coordinates representing the center\nof the sphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>position The 3D position point to use when drawing the sphere.</p>\n<p>radius The radius to use when drawing this sphere.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSphere(radius)</p>\n<p>&lt;!--\n<em>syntax: drawSphere(radius)</em>\n<em>name: drawSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a sphere with the renderer at the defualt origin using\nradius.</p>\n<p><strong>Parameters:</strong></p>\n<p>radius The radius to use when drawing the sphere with this\nrenderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSphere(x, y, radius)</p>\n<p>&lt;!--\n<em>syntax: drawSphere(x, y, radius)</em>\n<em>name: drawSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a sphere with this renderer using x, y, and radius.</p>\n<p>Spheres are drawn with x, y, and z coordinates representing the center\nof the sphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this sphere.</p>\n<p>y The y coordinate to use when drawing this sphere.</p>\n<p>radius The radius to use when drawing this sphere.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSphere(x, y, z, radius)</p>\n<p>&lt;!--\n<em>syntax: drawSphere(x, y, z, radius)</em>\n<em>name: drawSphere</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float radius</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a sphere with this renderer using x, y, z, and radius.</p>\n<p>Spheres are drawn with x, y, and z coordinates representing the center\nof the sphere.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to use when drawing this sphere.</p>\n<p>y The y coordinate to use when drawing this sphere.</p>\n<p>z The z coordinate to use when drawing this sphere.</p>\n<p>radius The radius to use when drawing this sphere.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawString(&amp;font, text, x, y)</p>\n<p>&lt;!--\n<em>syntax: drawString(&amp;font, text, x, y)</em>\n<em>name: drawString</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofTrueTypeFont &amp;font, string text, float x, float y</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw text with this renderer using an ofTrueType font.</p>\n<p><strong>Parameters:</strong></p>\n<p>font The font to use when drawing \\p text.</p>\n<p>text The text to draw with the renderer.</p>\n<p>x The x position for the bottom of \\p text.</p>\n<p>y The y position for the left alignment of \\p text.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawString(text, x, y, z)</p>\n<p>&lt;!--\n<em>syntax: drawString(text, x, y, z)</em>\n<em>name: drawString</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string text, float x, float y, float z</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw text with this renderer using the current bitmap text mode.</p>\n<p>When using the OF_BITMAPMODE_SIMPLE bitmap text strings are drawn with\ntheir origin at the bottom left corner of the text. However,\nsetBitmapTextMode() can transform this default behavior with modes like:\nOF_BITMAPMODE_SIMPLE\nOF_BITMAPMODE_SCREEN\nOF_BITMAPMODE_VIEWPORT\nOF_BITMAPMODE_MODEL\nOF_BITMAPMODE_MODEL_BILLBOARD</p>\n<p><strong>Parameters:</strong></p>\n<p>text The text to draw with the renderer.</p>\n<p>x The x position for the bottom of \\p text.</p>\n<p>y The y position for the left alignment of \\p text.</p>\n<p>z The z position of the text.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)</p>\n<p>&lt;!--\n<em>syntax: drawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)</em>\n<em>name: drawTriangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw a triangle using three 3D points.</p>\n<p><strong>Parameters:</strong></p>\n<p>x1 The x coordinate of the first point.</p>\n<p>y1 The y coordinate of the first point.</p>\n<p>z1 The z coordinate of the first point.</p>\n<p>x2 The x coordinate of the second point.</p>\n<p>y2 The y coordinate of the second point.</p>\n<p>z2 The z coordinate of the second point.</p>\n<p>x3 The x coordinate of the third point.</p>\n<p>y3 The y coordinate of the third point.</p>\n<p>z3 The z coordinate of the third point.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void enableAntiAliasing()</p>\n<p>&lt;!--\n<em>syntax: enableAntiAliasing()</em>\n<em>name: enableAntiAliasing</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Enable this renderer to use anti-aliasing if it is supported.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void finishRender()</p>\n<p>&lt;!--\n<em>syntax: finishRender()</em>\n<em>name: finishRender</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Stop using this renderer as the rendering surface.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const of3dGraphics &amp; get3dGraphics()</p>\n<p>&lt;!--\n<em>syntax: get3dGraphics()</em>\n<em>name: get3dGraphics</em>\n<em>returns: const of3dGraphics &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a const reference of this renderer's 3D graphics object.</p>\n<p><strong>Returns</strong>: The 3D graphics object currently being used by this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###of3dGraphics &amp; get3dGraphics()</p>\n<p>&lt;!--\n<em>syntax: get3dGraphics()</em>\n<em>name: get3dGraphics</em>\n<em>returns: of3dGraphics &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a reference with this renderer's 3D graphics object.</p>\n<p><strong>Returns</strong>: the 3D graphics object currently being used by this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getBackgroundAuto()</p>\n<p>&lt;!--\n<em>syntax: getBackgroundAuto()</em>\n<em>name: getBackgroundAuto</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the current auto redraw background setting for this renderer.</p>\n<p><strong>Returns</strong>: True if this renderer is set to redraw the background each\nframe.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor getBackgroundColor()</p>\n<p>&lt;!--\n<em>syntax: getBackgroundColor()</em>\n<em>name: getBackgroundColor</em>\n<em>returns: ofColor</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current background color.</p>\n<p><strong>Returns</strong>: This renderer's current background color.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getBoxResolution()</p>\n<p>&lt;!--\n<em>syntax: getBoxResolution()</em>\n<em>name: getBoxResolution</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current box resolution as a 3D vector.</p>\n<p>The returned vector's x, y, and z properties represent this renderer's\ncurrent resolution width, resolution height, and resolution depth\nrespectively.</p>\n<p><strong>Returns</strong>: This renderer's current box resolution as a 3D vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getConeResolution()</p>\n<p>&lt;!--\n<em>syntax: getConeResolution()</em>\n<em>name: getConeResolution</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's cone resolution as a 3D vector.</p>\n<p>The resulting vector's x, y, and z properties correspond to the radius\nsegments, height segments, and cap segments of this renderer's cone\nresolution respectively.</p>\n<p><strong>Returns</strong>: A 3D vector representing this renderer's current cone\nresolution.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofHandednessType getCoordHandedness()</p>\n<p>&lt;!--\n<em>syntax: getCoordHandedness()</em>\n<em>name: getCoordHandedness</em>\n<em>returns: ofHandednessType</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the coordinate handidness of this renderer.</p>\n<p>Possible handednesses include OF_LEFT_HANDED and OF_RIGHT_HANDED.\nIn a left handed coordinate system positive x, y and z axes point right,\nup and forward, respectively and positive rotation is clockwise about\nthe axis of rotation. In a right handed coordinate system the positive x\nand y axes point right and up, and the negative z axis points forward\nand positive rotation is counterclockwise about the axis of rotation.</p>\n<p><strong>Returns</strong>: The handedness this renderer is using.</p>\n<p><strong>See also</strong>: http://seanmiddleditch.com/matrices-handedness-pre-and-post-multiplication-row-vs-column-major-and-notations/</p>\n<p><strong>See also</strong>: https://www.evl.uic.edu/ralph/508S98/coordinates.html</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 getCurrentMatrix(matrixMode_)</p>\n<p>&lt;!--\n<em>syntax: getCurrentMatrix(matrixMode</em>)_\n<em>name: getCurrentMatrix</em>\n<em>returns: glm::mat4</em>\n<em>returns_description: _\n<em>parameters: ofMatrixMode matrixMode</em></em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current matrix for particular a matrix mode.</p>\n<p>Possible matrix modes include:\nOF_MATRIX_MODELVIEW\nOF_MATRIX_PROJECTION\nOF_MATRIX_TEXTURE</p>\n<p><strong>Parameters:</strong></p>\n<p>matrixMode_ The matrix mode to get the current matrix of.</p>\n<p><strong>Returns</strong>: The current matrix specified by \\p matrixMode_</p>\n<p><strong>See also</strong>: ofMatrixMode</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 getCurrentNormalMatrix()</p>\n<p>&lt;!--\n<em>syntax: getCurrentNormalMatrix()</em>\n<em>name: getCurrentNormalMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current normal matrix.</p>\n<p><strong>Returns</strong>: This renderer's current normal matrix.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 getCurrentOrientationMatrix()</p>\n<p>&lt;!--\n<em>syntax: getCurrentOrientationMatrix()</em>\n<em>name: getCurrentOrientationMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current orientation matrix.</p>\n<p><strong>Returns</strong>: This renderer's current orientation matrix.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 getCurrentViewMatrix()</p>\n<p>&lt;!--\n<em>syntax: getCurrentViewMatrix()</em>\n<em>name: getCurrentViewMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current view matrix.</p>\n<p><strong>Returns</strong>: This renderer's current view matrix.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle getCurrentViewport()</p>\n<p>&lt;!--\n<em>syntax: getCurrentViewport()</em>\n<em>name: getCurrentViewport</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current viewport.</p>\n<p>Unlike getNativeViewport(), this method gets this renderer's current\nviewport with orientation and vertical flipping applied.</p>\n<p><strong>Returns</strong>: This renderer's viewport as a rectangle.</p>\n<p><strong>See also</strong>: getNativeViewport()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getCylinderResolution()</p>\n<p>&lt;!--\n<em>syntax: getCylinderResolution()</em>\n<em>name: getCylinderResolution</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's cylinder resolution as a 3D vector.</p>\n<p>The resulting vector's x, y, and z properties correspond to the radius\nsegments, height segments, and cap segments of this renderer's cylinder\nresolution respectively.</p>\n<p><strong>Returns</strong>: A 3D vector representing this renderer's current cylinder\nresolution.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofFillFlag getFillMode()</p>\n<p>&lt;!--\n<em>syntax: getFillMode()</em>\n<em>name: getFillMode</em>\n<em>returns: ofFillFlag</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current fill flag.</p>\n<p>Possible fill flags include OF_OUTLINE and OF_FILLED.</p>\n<p><strong>Returns</strong>: The fill flag this render is currently using.</p>\n<p><strong>See also</strong>: ofFillFlag</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getIcoSphereResolution()</p>\n<p>&lt;!--\n<em>syntax: getIcoSphereResolution()</em>\n<em>name: getIcoSphereResolution</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current icosphere resolution.</p>\n<p><strong>Returns</strong>: This renderer's current icosphere resolution.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle getNativeViewport()</p>\n<p>&lt;!--\n<em>syntax: getNativeViewport()</em>\n<em>name: getNativeViewport</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current native viewport.</p>\n<p>Unlike getViewport(), this method gets this renderer's current viewport\nwithout orientation and vertical flipping applied.</p>\n<p><strong>Returns</strong>: This renderer's native viewport as a rectangle.</p>\n<p><strong>See also</strong>: getViewport()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPath &amp; getPath()</p>\n<p>&lt;!--\n<em>syntax: getPath()</em>\n<em>name: getPath</em>\n<em>returns: ofPath &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a reference to the path used internally by this renderer.</p>\n<p><strong>Returns</strong>: A reference to the path used internally by this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec2 getPlaneResolution()</p>\n<p>&lt;!--\n<em>syntax: getPlaneResolution()</em>\n<em>name: getPlaneResolution</em>\n<em>returns: glm::vec2</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current plane resolution as a 2D vector.</p>\n<p>The resulting vector's x and y values corresponds to the current column\nand row resolutions of this renderer's plane resolution respectively.</p>\n<p><strong>Returns</strong>: A 2D vector representing this renderer's plane resolution in\ncolumns and rows.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectMode getRectMode()</p>\n<p>&lt;!--\n<em>syntax: getRectMode()</em>\n<em>name: getRectMode</em>\n<em>returns: ofRectMode</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current rect mode.</p>\n<p>Possible rect modes include OF_RECTMODE_CORNER and OF_RECTMODE_CENTER.</p>\n<p><strong>Returns</strong>: The renderer's current rect mode.</p>\n<p><strong>See also</strong>: ofRectMode</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getSphereResolution()</p>\n<p>&lt;!--\n<em>syntax: getSphereResolution()</em>\n<em>name: getSphereResolution</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current sphere resolution.</p>\n<p><strong>Returns</strong>: This renderer's current sphere resolution.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofStyle getStyle()</p>\n<p>&lt;!--\n<em>syntax: getStyle()</em>\n<em>name: getStyle</em>\n<em>returns: ofStyle</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get this renderer's current style object.</p>\n<p><strong>Returns</strong>: This renderer's current style object.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const string &amp; getType()</p>\n<p>&lt;!--\n<em>syntax: getType()</em>\n<em>name: getType</em>\n<em>returns: const string &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the string representation of the renderer type.</p>\n<p>For example, this method may return &quot;GL&quot;, &quot;ProgrammableGL&quot;, or another\ntype depending on the renderer being used.</p>\n<p><strong>Returns</strong>: The string representation of the renderer type.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getViewportHeight()</p>\n<p>&lt;!--\n<em>syntax: getViewportHeight()</em>\n<em>name: getViewportHeight</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the renderer's current viewport width.</p>\n<p><strong>Returns</strong>: The renderer's current viewport width.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getViewportWidth()</p>\n<p>&lt;!--\n<em>syntax: getViewportWidth()</em>\n<em>name: getViewportWidth</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the renderer's current viewport width.</p>\n<p><strong>Returns</strong>: The renderer's current viewport width.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isVFlipped()</p>\n<p>&lt;!--\n<em>syntax: isVFlipped()</em>\n<em>name: isVFlipped</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns true if the renderer's current viewport is vertically\nflipped.</p>\n<p><strong>Returns</strong>: True if the renderer's current viewport is vertically flipped.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void loadIdentityMatrix()</p>\n<p>&lt;!--\n<em>syntax: loadIdentityMatrix()</em>\n<em>name: loadIdentityMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Load this renderer's identity matrix.</p>\n<p>This identity matrix is an mat4 matrix with 1s on the main\ndiagonal and 0s elsewhere.\n[\n[1, 0, 0, 0],\n[0, 1, 0, 0],\n[0, 0, 1, 0],\n[0, 0, 0, 1]\n]</p>\n<p>Matrix multiplications using this matrix as the multiplier will yield no\nchange in the multiplicand matrix.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void loadMatrix(&amp;m)</p>\n<p>&lt;!--\n<em>syntax: loadMatrix(&amp;m)</em>\n<em>name: loadMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Load a matrix as this renderer's current matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>m The matrix to load into this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void loadMatrix(*m)</p>\n<p>&lt;!--\n<em>syntax: loadMatrix(*m)</em>\n<em>name: loadMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *m</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Load m as this renderer's current matrix.</p>\n<p>\\p m can be passed to loadMatrix() in this way from raw data</p>\n<p><strong>Parameters:</strong></p>\n<p>m Float pointer to an 4x4 matrix.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void loadViewMatrix(&amp;m)</p>\n<p>&lt;!--\n<em>syntax: loadViewMatrix(&amp;m)</em>\n<em>name: loadViewMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Load \\p m into this renderer's matrix stack as a view matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>m The view matrix to load into this renderer's matrix stack.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void matrixMode(mode)</p>\n<p>&lt;!--\n<em>syntax: matrixMode(mode)</em>\n<em>name: matrixMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofMatrixMode mode</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets this renderer's current matrix mode.</p>\n<p>The possible matrix modes include:\nOF_MATRIX_MODELVIEW\nOF_MATRIX_PROJECTION\nOF_MATRIX_TEXTURE</p>\n<p><strong>Parameters:</strong></p>\n<p>mode The matrix mode this renderer's matrix should use.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void multMatrix(&amp;m)</p>\n<p>&lt;!--\n<em>syntax: multMatrix(&amp;m)</em>\n<em>name: multMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Multiply this renderer's current matrix by \\p m.</p>\n<p><strong>Parameters:</strong></p>\n<p>m The matrix to multiply this renderer's current matrix by.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void multMatrix(*m)</p>\n<p>&lt;!--\n<em>syntax: multMatrix(*m)</em>\n<em>name: multMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const float *m</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Multiply this renderer's current matrix by \\p m.</p>\n<p>\\p m can be passed to loadMatrix() in this way with raw data</p>\n<p><strong>Parameters:</strong></p>\n<p>m Float pointer to an mat4 to multiply this renderer's\ncurrent matrix by.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void multViewMatrix(&amp;m)</p>\n<p>&lt;!--\n<em>syntax: multViewMatrix(&amp;m)</em>\n<em>name: multViewMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Multiply this renderer's view matrix by \\p m.</p>\n<p><strong>Parameters:</strong></p>\n<p>m The matrix to multiply this renderer's view matrix by.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void popMatrix()</p>\n<p>&lt;!--\n<em>syntax: popMatrix()</em>\n<em>name: popMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Pops this renderer's current matrix stack.</p>\n<p>popMatrix() restores the renderer's matrix to the state it was last\nsaved with with a call to pushMatrix().</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void popStyle()</p>\n<p>&lt;!--\n<em>syntax: popStyle()</em>\n<em>name: popStyle</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Pop this renderer's current style from its internal style stack.</p>\n<p>This restores the style that was last saved with pushStyle().</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void popView()</p>\n<p>&lt;!--\n<em>syntax: popView()</em>\n<em>name: popView</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Pop the current viewport from the renderer's view stack.</p>\n<p>popView() restores the renderer's viewport to the state it was last\nsaved with with a call to pushView().</p>\n<p><strong>See also</strong>: viewport()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void pushMatrix()</p>\n<p>&lt;!--\n<em>syntax: pushMatrix()</em>\n<em>name: pushMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Pushes this renderer's matrix stack down by one.</p>\n<p>pushMatrix() saves the renderer's current matrix allowing new\ntransformations and scales to effect only the new matrix created by\nthis method. Should be paired with a call to popMatrix().</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void pushStyle()</p>\n<p>&lt;!--\n<em>syntax: pushStyle()</em>\n<em>name: pushStyle</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Push this renderer's current style into its internal style stack.</p>\n<p>This creates a new style object used by this renderer internally until\npopStyle() is called.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void pushView()</p>\n<p>&lt;!--\n<em>syntax: pushView()</em>\n<em>name: pushView</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Push the current viewport into the renderer's viewport stack.</p>\n<p>pushViewport() save the current viewport to the renderer's viewport\nhistory stack allowing new viewport operations to effect only the new\nviewport created by this method. Should be paired with popView.</p>\n<p><strong>See also</strong>: viewport()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateDeg(degrees)</p>\n<p>&lt;!--\n<em>syntax: rotateDeg(degrees)</em>\n<em>name: rotateDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate this renderer's current matrix by \\p degrees about the z\naxis.</p>\n<p>This method is an alias of rotateZ().</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the z axis.</p>\n<p><strong>See also</strong>: rotateZ()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateDeg(degrees, vecX, vecY, vecZ)</p>\n<p>&lt;!--\n<em>syntax: rotateDeg(degrees, vecX, vecY, vecZ)</em>\n<em>name: rotateDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees, float vecX, float vecY, float vecZ</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate this renderer's current matrix by \\p degrees about a euler.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about vecX, vecY, and vecZ.</p>\n<p>vecX The x axis to rotate about.</p>\n<p>vecY The y axis to rotate about.</p>\n<p>vecZ The z axis to rotate about.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateRad(degrees)</p>\n<p>&lt;!--\n<em>syntax: rotateRad(degrees)</em>\n<em>name: rotateRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate this renderer's current matrix by \\p degrees about the z\naxis.</p>\n<p>This method is an alias of rotateZ().</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the z axis.</p>\n<p><strong>See also</strong>: rotateZ()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateRad(degrees, vecX, vecY, vecZ)</p>\n<p>&lt;!--\n<em>syntax: rotateRad(degrees, vecX, vecY, vecZ)</em>\n<em>name: rotateRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees, float vecX, float vecY, float vecZ</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate this renderer's current matrix by \\p degrees about a euler.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about vecX, vecY, and vecZ.</p>\n<p>vecX The x axis to rotate about.</p>\n<p>vecY The y axis to rotate about.</p>\n<p>vecZ The z axis to rotate about.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateXDeg(degrees)</p>\n<p>&lt;!--\n<em>syntax: rotateXDeg(degrees)</em>\n<em>name: rotateXDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate this renderer's current matrix by \\p degrees about the x\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the x axis.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateXRad(degrees)</p>\n<p>&lt;!--\n<em>syntax: rotateXRad(degrees)</em>\n<em>name: rotateXRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate this renderer's current matrix by \\p degrees about the x\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the x axis.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateYDeg(degrees)</p>\n<p>&lt;!--\n<em>syntax: rotateYDeg(degrees)</em>\n<em>name: rotateYDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate this renderer's current matrix by \\p degrees about the y\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the y axis.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateYRad(degrees)</p>\n<p>&lt;!--\n<em>syntax: rotateYRad(degrees)</em>\n<em>name: rotateYRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate this renderer's current matrix by \\p degrees about the y\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the y axis.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateZDeg(degrees)</p>\n<p>&lt;!--\n<em>syntax: rotateZDeg(degrees)</em>\n<em>name: rotateZDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate this renderer's current matrix by \\p degrees about the z\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the z axis.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateZRad(degrees)</p>\n<p>&lt;!--\n<em>syntax: rotateZRad(degrees)</em>\n<em>name: rotateZRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate this renderer's current matrix by \\p degrees about the z\naxis.</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the z axis.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scale(xAmnt, yAmnt, zAmnt)</p>\n<p>&lt;!--\n<em>syntax: scale(xAmnt, yAmnt, zAmnt)</em>\n<em>name: scale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float xAmnt, float yAmnt, float zAmnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale this renderer's current matrix by xAmnt, yAmnt, and zAmnt.</p>\n<p><strong>Parameters:</strong></p>\n<p>xAmnt The amount to scale this renderer's current matrix's x\naxis by.</p>\n<p>yAmnt The amount to scale this renderer's current matrix's y\naxis by.</p>\n<p>zAmnt The amount to scale this renderer's current matrix's z\naxis by. Defaults to 1.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setBackgroundAuto(bManual)</p>\n<p>&lt;!--\n<em>syntax: setBackgroundAuto(bManual)</em>\n<em>name: setBackgroundAuto</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bManual</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Enable/disable automatic redrawing of the background each frame.</p>\n<p><strong>Parameters:</strong></p>\n<p>bManual False to disable automatic background redrawing.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setBackgroundColor(&amp;c)</p>\n<p>&lt;!--\n<em>syntax: setBackgroundColor(&amp;c)</em>\n<em>name: setBackgroundColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofColor &amp;c</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this renderer's background color.</p>\n<p><strong>Parameters:</strong></p>\n<p>c The color to request this renderer to use.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setBitmapTextMode(mode)</p>\n<p>&lt;!--\n<em>syntax: setBitmapTextMode(mode)</em>\n<em>name: setBitmapTextMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofDrawBitmapMode mode</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this renderer's bitmap text mode.</p>\n<p>Possible bitmap texture modes include:\nOF_BITMAPMODE_SIMPLE\nOF_BITMAPMODE_SCREEN\nOF_BITMAPMODE_VIEWPORT\nOF_BITMAPMODE_MODEL\nOF_BITMAPMODE_MODEL_BILLBOARD</p>\n<p><strong>Parameters:</strong></p>\n<p>mode The bitmap mode to request this renderer to use.</p>\n<p><strong>See also</strong>: ofDrawBitmapMode</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setBlendMode(blendMode)</p>\n<p>&lt;!--\n<em>syntax: setBlendMode(blendMode)</em>\n<em>name: setBlendMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBlendMode blendMode</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this renderer's current blend mode.</p>\n<p>Possible blend modes include:\nRotate this renderer's current matrix by \\p degrees about the z\naxis.</p>\n<p>This method is an alias of rotateZ().</p>\n<p><strong>Parameters:</strong></p>\n<p>degrees Degrees to rotate about the z axis.</p>\n<p><strong>See also</strong>: rotateZ()\nOF_BLENDMODE_DISABLED\nOF_BLENDMODE_ALPHA\nOF_BLENDMODE_ADD\nOF_BLENDMODE_SUBTRACT\nOF_BLENDMODE_MULTIPLY\nOF_BLENDMODE_SCREEN</p>\n<p>blendMode The blend mode to request this renderer to use.</p>\n<p><strong>See also</strong>: ofBlendMode</p>\n<p><strong>See also</strong>: https://helpx.adobe.com/photoshop/using/blending-modes.html</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setBoxResolution(res)</p>\n<p>&lt;!--\n<em>syntax: setBoxResolution(res)</em>\n<em>name: setBoxResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int res</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the resolution this renderer uses when drawing boxes.</p>\n<p><strong>Parameters:</strong></p>\n<p>res The resolution to use for box widths, heights, and depths.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setBoxResolution(resWidth, resHeight, resDepth)</p>\n<p>&lt;!--\n<em>syntax: setBoxResolution(resWidth, resHeight, resDepth)</em>\n<em>name: setBoxResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int resWidth, int resHeight, int resDepth</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the resolution this renderer uses when drawing boxes.</p>\n<p><strong>Parameters:</strong></p>\n<p>resWidth The width resolution this renderer uses when drawing\nboxes.</p>\n<p>resHeight The height resolution this renderer uses when drawing\nboxes.</p>\n<p>resDepth The depth resolution this renderer uses when drawing\nboxes.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setCircleResolution(res)</p>\n<p>&lt;!--\n<em>syntax: setCircleResolution(res)</em>\n<em>name: setCircleResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int res</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the resolution to use when drawing ellipses with this\nrenderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>res The number of points to use when drawing circles and ellipses\nwith this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: setColor(&amp;color)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofColor &amp;color</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to use when drawing.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(&amp;color, _a)</p>\n<p>&lt;!--\n_syntax: setColor(&amp;color, <em>a)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: const ofColor &amp;color, int <em>a</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>color The color to use when drawing.</p>\n<p>_a The alpha value between 0 and 255 to use when drawing.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(gray)</p>\n<p>&lt;!--\n<em>syntax: setColor(gray)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int gray</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>gray The grayscale value to use when drawing.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(r, g, b)</p>\n<p>&lt;!--\n<em>syntax: setColor(r, g, b)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int r, int g, int b</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>r The red value between 0 and 255 to use when drawing.</p>\n<p>g The green value between 0 and 255 to use when drawing.</p>\n<p>b The blue value between 0 and 255 to use when drawing.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(r, g, b, a)</p>\n<p>&lt;!--\n<em>syntax: setColor(r, g, b, a)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int r, int g, int b, int a</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>r The red value between 0 and 255 to use when drawing.</p>\n<p>g The green value between 0 and 255 to use when drawing.</p>\n<p>b The blue value between 0 and 255 to use when drawing.</p>\n<p>a The alpha value between 0 and 255 to use when drawing.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setConeResolution(radiusSegments, heightSegments, capSegments = 2)</p>\n<p>&lt;!--\n<em>syntax: setConeResolution(radiusSegments, heightSegments, capSegments = 2)</em>\n<em>name: setConeResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int radiusSegments, int heightSegments, int capSegments=2</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the resolution of a polygonized cone.</p>\n<p>Allows you to set the polygonization resolution of any cones you\nsubsequently draw with ofDrawCone().</p>\n<p><strong>Parameters:</strong></p>\n<p>radiusSegments The number of facets (subdivisions) around the\ncone's circular footprint.</p>\n<p>heightSegments The number of subdivisions from the cone's top to\nbottom.</p>\n<p>capSegments The number of annular (ring-shaped) subdivisions of\nthe cone's endcap.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setCoordHandedness(handedness)</p>\n<p>&lt;!--\n<em>syntax: setCoordHandedness(handedness)</em>\n<em>name: setCoordHandedness</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofHandednessType handedness</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the coordinate handidness of this renderer.</p>\n<p>Possible handednesses include OF_LEFT_HANDED and OF_RIGHT_HANDED.\nIn a left handed coordinate system positive x, y and z axes point right,\nup and forward, respectively and positive rotation is clockwise about\nthe axis of rotation. In a right handed coordinate system the positive x\nand y axes point right and up, and the negative z axis points forward\nand positive rotation is counterclockwise about the axis of rotation.</p>\n<p><strong>Parameters:</strong></p>\n<p>handedness The handedness to set this renderer to use.</p>\n<p><strong>See also</strong>: http://seanmiddleditch.com/matrices-handedness-pre-and-post-multiplication-row-vs-column-major-and-notations/</p>\n<p><strong>See also</strong>: https://www.evl.uic.edu/ralph/508S98/coordinates.html</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setCurveResolution(resolution)</p>\n<p>&lt;!--\n<em>syntax: setCurveResolution(resolution)</em>\n<em>name: setCurveResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int resolution</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the resolution used when drawing curves with this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>resolution The resolution to request this renderer to use when\ndrawing curves.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setCylinderResolution(radiusSegments, heightSegments, capSegments = 2)</p>\n<p>&lt;!--\n<em>syntax: setCylinderResolution(radiusSegments, heightSegments, capSegments = 2)</em>\n<em>name: setCylinderResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int radiusSegments, int heightSegments, int capSegments=2</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this renderer's cylinder resolution.</p>\n<p><strong>Parameters:</strong></p>\n<p>radiusSegments The number of facets (subdivisions) around the\nicosphere's circular footprint. A larger number yields a higher\nresolution.</p>\n<p>heightSegments The number of subdivisions from the cylinder's top\nto bottom.</p>\n<p>capSegments The number of annular (ring-shaped) subdivisions of\nthe cylinder's endcap. Defaults to 2.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setDepthTest(depthTest)</p>\n<p>&lt;!--\n<em>syntax: setDepthTest(depthTest)</em>\n<em>name: setDepthTest</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool depthTest</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Enable/disable depth testing with this renderer.</p>\n<p>When depth testing is enabled the order shapes are drawn with the\nrenderer is dependent on their distance from the camera rather than the\norder their drawing methods were called. This should be enabled when\nexpecting normal behavior when drawing 3D scenes.</p>\n<p><strong>Parameters:</strong></p>\n<p>depthTest True to enable depth testing.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFillMode(fill)</p>\n<p>&lt;!--\n<em>syntax: setFillMode(fill)</em>\n<em>name: setFillMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofFillFlag fill</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>set this renderer's fill flag.</p>\n<p>Possible fill flags include OF_OUTLINE and OF_FILLED.</p>\n<p><strong>Parameters:</strong></p>\n<p>fill The fill flag to request this renderer to use.</p>\n<p><strong>See also</strong>: ofFillFlag</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setHexColor(hexColor)</p>\n<p>&lt;!--\n<em>syntax: setHexColor(hexColor)</em>\n<em>name: setHexColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int hexColor</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the global color this renderer will use when drawing.</p>\n<p>The renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.</p>\n<p><strong>Parameters:</strong></p>\n<p>hexColor The hexidecimal representation of the color to use when\ndrawing.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setIcoSphereResolution(res)</p>\n<p>&lt;!--\n<em>syntax: setIcoSphereResolution(res)</em>\n<em>name: setIcoSphereResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int res</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the point resolution to use when drawing an icosphere with\nthis renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>res The desired icosphere resolution to use with this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setLineSmoothing(smooth)</p>\n<p>&lt;!--\n<em>syntax: setLineSmoothing(smooth)</em>\n<em>name: setLineSmoothing</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool smooth</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Enable/disable line smoothing for this renderer if it's supported.</p>\n<p><strong>Parameters:</strong></p>\n<p>smooth True to enable line smoothing for this renderer if it's\nsupported.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setLineWidth(lineWidth)</p>\n<p>&lt;!--\n<em>syntax: setLineWidth(lineWidth)</em>\n<em>name: setLineWidth</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float lineWidth</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the line width this renderer should use when drawing lines.</p>\n<p><strong>Parameters:</strong></p>\n<p>lineWidth The line width to request this renderer to use.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setOrientation(orientation, vFlip)</p>\n<p>&lt;!--\n<em>syntax: setOrientation(orientation, vFlip)</em>\n<em>name: setOrientation</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofOrientation orientation, bool vFlip</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>set this renderer's orientation.</p>\n<p>Possible orientation values include:\nOF_ORIENTATION_DEFAULT\nOF_ORIENTATION_180\nOF_ORIENTATION_90_LEFT\nOF_ORIENTATION_90_RIGHT\nOF_ORIENTATION_UNKNOWN</p>\n<p><strong>Parameters:</strong></p>\n<p>orientation The orientation to use with this renderer.</p>\n<p>vFlip True if the orientation should be vertically flipped.</p>\n<p><strong>See also</strong>: ofOrientation</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPlaneResolution(columns, rows)</p>\n<p>&lt;!--\n<em>syntax: setPlaneResolution(columns, rows)</em>\n<em>name: setPlaneResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int columns, int rows</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this renderer's plane resolution using \\p column and \\p rows.</p>\n<p><strong>Parameters:</strong></p>\n<p>columns The number of columns to use when drawing planes with\nthis renderer.</p>\n<p>rows The number of rows to use when drawing planes with this\nrenderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPolyMode(mode)</p>\n<p>&lt;!--\n<em>syntax: setPolyMode(mode)</em>\n<em>name: setPolyMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofPolyWindingMode mode</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this renderer's poly winding mode.</p>\n<p>Possible poly winding modes include:\nOF_POLY_WINDING_ODD\nOF_POLY_WINDING_NONZERO\nOF_POLY_WINDING_POSITIVE\nOF_POLY_WINDING_NEGATIVE\nOF_POLY_WINDING_ABS_GEQ_TWO</p>\n<p><strong>Parameters:</strong></p>\n<p>mode The poly winding mode to request this renderer to use.</p>\n<p><strong>See also</strong>: ofPolyWindingMode</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setRectMode(mode)</p>\n<p>&lt;!--\n<em>syntax: setRectMode(mode)</em>\n<em>name: setRectMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofRectMode mode</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this renderer's rect mode.</p>\n<p>Possible rect modes include OF_RECTMODE_CORNER and OF_RECTMODE_CENTER.</p>\n<p><strong>Parameters:</strong></p>\n<p>mode The rect mode to request this renderer to use.</p>\n<p><strong>See also</strong>: ofRectMode</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setSphereResolution(res)</p>\n<p>&lt;!--\n<em>syntax: setSphereResolution(res)</em>\n<em>name: setSphereResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int res</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>UV Sphere\nSet the point resolution to use when drawing a sphere with this\nrenderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>res The desired sphere resolution to use with this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setStyle(&amp;style)</p>\n<p>&lt;!--\n<em>syntax: setStyle(&amp;style)</em>\n<em>name: setStyle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofStyle &amp;style</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this renderer's current style object.</p>\n<p><strong>Parameters:</strong></p>\n<p>style The style object to set this renderer to use.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setupGraphicDefaults()</p>\n<p>&lt;!--\n<em>syntax: setupGraphicDefaults()</em>\n<em>name: setupGraphicDefaults</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>setup the default graphics settings for this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setupScreen()</p>\n<p>&lt;!--\n<em>syntax: setupScreen()</em>\n<em>name: setupScreen</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>setup the default screen settings for this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setupScreenOrtho(width, height, nearDist, farDist)</p>\n<p>&lt;!--\n<em>syntax: setupScreenOrtho(width, height, nearDist, farDist)</em>\n<em>name: setupScreenOrtho</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float width, float height, float nearDist, float farDist</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Setup the renderer to use an orthographic matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>width The width of the desired orthographic matrix. Defaults to\n-1 setting its width according to the rendering surface's width.</p>\n<p>height The height of the desired orthographic matrix. Defaults to\n-1 setting its height according to the rendering surface's height.</p>\n<p>nearDist The near clipping distance to use with the orthographic\nmatrix. Setting this value to 0 uses the defualt near distance. Defaults\nto 0.</p>\n<p>farDist The far clipping distance to use with the orthographic\nmatrix. Setting this value to 0 uses the defualt near distance. Defaults\nto 0.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setupScreenPerspective(width, height, fov, nearDist, farDist)</p>\n<p>&lt;!--\n<em>syntax: setupScreenPerspective(width, height, fov, nearDist, farDist)</em>\n<em>name: setupScreenPerspective</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float width, float height, float fov, float nearDist, float farDist</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Setup the renderer to use a perspective matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>width The width of the desired perspective matrix. Defaults to -1\nsetting its width according to the rendering surface's width.</p>\n<p>height The height of the desired perspective matrix. Defaults to\nDefaults to -1 setting its width according to the rendering surface's\nwidth.</p>\n<p>fov The field of view to use with the perspective matrix.\nDefaults to 60.</p>\n<p>nearDist The near clipping distance to use with the perspective\nmatrix. Setting this value to 0 uses the default near distance. Defaults\nto 0.</p>\n<p>farDist The far clipping distance to use with the perspective\nmatrix. Setting this value to 0 uses the default near distance. Defaults\nto 0.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void startRender()</p>\n<p>&lt;!--\n<em>syntax: startRender()</em>\n<em>name: startRender</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Starts using this renderer as the rendering surface.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void translate(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: translate(&amp;p)</em>\n<em>name: translate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Translate this renderer's current matrix by a point.</p>\n<p><strong>Parameters:</strong></p>\n<p>p The 3D point to translate this renderer's current matrix by.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void translate(x, y, z)</p>\n<p>&lt;!--\n<em>syntax: translate(x, y, z)</em>\n<em>name: translate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Translate this renderer's current matrix by x, y, and z.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate to translate this renderer's current matrix\nby.</p>\n<p>y The y coordinate to translate this renderer's current matrix\nby.</p>\n<p>z The z coordinate to translate this renderer's current matrix\nby. Defaults to 0.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void unbind(&amp;camera)</p>\n<p>&lt;!--\n<em>syntax: unbind(&amp;camera)</em>\n<em>name: unbind</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofCamera &amp;camera</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Unbind the camera from this renderer.</p>\n<p><strong>Parameters:</strong></p>\n<p>camera The camera to unbind from this renderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void viewport(viewport)</p>\n<p>&lt;!--\n<em>syntax: viewport(viewport)</em>\n<em>name: viewport</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofRectangle viewport</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this renderer's viewport using a rectangle.</p>\n<p>This method uses the ofGetWidth() and ofGetHeight() to set the width and\nheight of the viewport. It also automatically creates near and far\nclipping planes based on this width and height.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void viewport(x, y, width, height, vflip = true)</p>\n<p>&lt;!--\n<em>syntax: viewport(x, y, width, height, vflip = true)</em>\n<em>name: viewport</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float width, float height, bool vflip=true</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this renderer's viewport manually using x, y, width, and\nheight.</p>\n<p><strong>Parameters:</strong></p>\n<p>x The x coordinate of the viewport. Defaults to 0.</p>\n<p>y The y coordinate of the viewport. Defaults to 0.</p>\n<p>w The width of the viewport. Defaults to -1 setting its width\naccording to the rendering surface's width.</p>\n<p>h The height of the viewport. Defaults to -1 setting its height\naccording to the rendering surface's height.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofBaseRenderer()</h3>\n<p>&lt;!--\n<em>syntax: ~ofBaseRenderer()</em>\n<em>name: ~ofBaseRenderer</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n","raw":"#class ofBaseRenderer\n\n\n<!--\n_visible: True_\n_advanced: True_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\nThe base renderer interface.\n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n###void background(&c)\n\n<!--\n_syntax: background(&c)_\n_name: background_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &c_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nImmediately paint a background color to the screen.\n\nIf automatic background drawing is enabled (which it is by default) this\nmethod called from ofApp::setup() will also repaint the background with\nthis color each frame.\n\n\n**Parameters:**\n\nc The color to paint the background with.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void background(brightness)\n\n<!--\n_syntax: background(brightness)_\n_name: background_\n_returns: void_\n_returns_description: _\n_parameters: float brightness_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nImmediately paint a grayscale background color to the screen.\n\nIf automatic background drawing is enabled (which it is by default) this\nmethod called from ofApp::setup() will also repaint the background with\nthis color each frame.\n\n\n**Parameters:**\n\nbrightness The grayscale value between 0 and 255 to paint the\nbackground with.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void background(hexColor, _a = 255.0f)\n\n<!--\n_syntax: background(hexColor, _a = 255.0f)_\n_name: background_\n_returns: void_\n_returns_description: _\n_parameters: int hexColor, float _a=255.0f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nImmediately paint a grayscale background color to the screen.\n\nIf automatic background drawing is enabled (which it is by default) this\nmethod called from ofApp::setup() will also repaint the background with\nthis color each frame.\n\n\n**Parameters:**\n\nhexColor The 24-bit hex representation of the color to paint the\nbackground with.\n\n_a The alpha value between 0 and 255 to apply to \\p hexColor when\nwhen painting the background.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void background(r, g, b, a = 255)\n\n<!--\n_syntax: background(r, g, b, a = 255)_\n_name: background_\n_returns: void_\n_returns_description: _\n_parameters: int r, int g, int b, int a=255_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nImmediately paint a background color to the screen.\n\n\n**Parameters:**\n\nr The red value between 0 and 255 to use for the background.\n\ng The green value between 0 and 255 to use for the background.\n\nb The blue value between 0 and 255 to use for the background.\n\na The alpha value between 0 and 255 to use for the background.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void bind(&camera, &viewport)\n\n<!--\n_syntax: bind(&camera, &viewport)_\n_name: bind_\n_returns: void_\n_returns_description: _\n_parameters: const ofCamera &camera, const ofRectangle &viewport_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBind \\p camera's matrices to this renderer's matrix stack.\n\nBind's the \\p camera's modelview and projection matrices to this\nrenderer's matrix stack using \\p viewport. Should be followed with a\ncall to unbind().\n\n\n**Parameters:**\n\ncamera The camera to bind to this renderer.\n\nviewport The viewport to use when binding \\p camera to this\nrenderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClear this renderer's current color and bit depths.\n\nclear() will clear the screen entirely.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear(brightness, a)\n\n<!--\n_syntax: clear(brightness, a)_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: float brightness, float a_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClear this renderer's color and bit depths replacing them.\n\nclear() will clear the screen entirely.\n\n\n**Parameters:**\n\nbrightness The grayscale value between 0 and 255 to use when\nclearing the screen.\n\na The alpha value between 0 and 255 to use when clearing the\nscreen. Defaults to 0.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear(r, g, b, a)\n\n<!--\n_syntax: clear(r, g, b, a)_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: float r, float g, float b, float a_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClear this renderer's color and bit depths and replace them.\n\nclear() will clear the screen entirely.\n\n\n**Parameters:**\n\nr The red value between 0 and 255 to use when clearing the\nscreen.\n\ng The green value between 0 and 255 to use when clearing the\nscreen.\n\nb The blue value between 0 and 255 use when clearing the screen.\n\na The alpha value between 0 and 255 use when clearing the screen.\nDefaults to 0.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearAlpha()\n\n<!--\n_syntax: clearAlpha()_\n_name: clearAlpha_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRestore the alpha color to its full opacity value.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disableAntiAliasing()\n\n<!--\n_syntax: disableAntiAliasing()_\n_name: disableAntiAliasing_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDisable this renderer from using anti-aliasing.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&image, x, y, z, w, h, sx, sy, sw, sh)\n\n<!--\n_syntax: draw(&image, x, y, z, w, h, sx, sy, sw, sh)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofImage &image, float x, float y, float z, float w, float h, float sx, float sy, float sw, float sh_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw an \\p image with this renderer.\n\n**Parameters:**\n\nimage The image to draw with this renderer.\n\nx The x coordinate to use when drawing \\p image with this\nrenderer.\n\ny The y coordinate to use to draw \\p image with this renderer.\n\nz The z coordinate to use to drawing \\p image with this renderer.\n\nw The width to use to draw the \\p image with this renderer.\n\nh The height to use to draw the \\p image with this renderer.\n\nsx The subsection x axis offset within the image texture.\n\nsy The subsection y axis offset within the image texture.\n\nsw The subsection width offset within the image texture.\n\nsh The subsection height offset within the image texture.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&image, x, y, z, w, h, sx, sy, sw, sh)\n\n<!--\n_syntax: draw(&image, x, y, z, w, h, sx, sy, sw, sh)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofFloatImage &image, float x, float y, float z, float w, float h, float sx, float sy, float sw, float sh_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw an \\p image with this renderer.\n\n**Parameters:**\n\nimage The image to draw with this renderer.\n\nx The x coordinate to use to draw \\p image with this renderer.\n\ny The y coordinate to use to draw \\p image with this renderer.\n\nz The z coordinate to use to draw \\p image with this renderer.\n\nw The width to use to draw \\p image with this renderer.\n\nh The height to use to draw \\p image with this renderer.\n\nsx The subsection x axis offset within the image texture.\n\nsy The subsection y axis offset within the image texture.\n\nsw The subsection width offset within the image texture.\n\nsh The subsection height offset within the image texture.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&image, x, y, z, w, h, sx, sy, sw, sh)\n\n<!--\n_syntax: draw(&image, x, y, z, w, h, sx, sy, sw, sh)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofShortImage &image, float x, float y, float z, float w, float h, float sx, float sy, float sw, float sh_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw an \\p image with this renderer.\n\n**Parameters:**\n\nimage The image to draw with this renderer.\n\nx The x coordinate to use to draw \\p image with this renderer.\n\ny The y coordinate to use to draw \\p image with this renderer.\n\nz The z coordinate to use to draw \\p image with this renderer.\n\nw The width to use when drawing the image with this renderer.\n\nh The height to use when drawing the image with this renderer.\n\nsx The subsection x axis offset within the image texture.\n\nsy The subsection y axis offset within the image texture.\n\nsw The subsection width offset within the image texture.\n\nsh The subsection height offset within the image texture.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&mesh, renderType)\n\n<!--\n_syntax: draw(&mesh, renderType)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofMesh &mesh, ofPolyRenderMode renderType_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a \\p mesh with this renderer using the \\p renderType.\n\n\\p renderType defines how the \\p mesh will be rendered and may be:\n\tOF_MESH_POINTS,\n\t\tOF_MESH_WIREFRAME,\n\t\tOF_MESH_FILL\n\n\n**Parameters:**\n\nmesh The mesh to draw with this renderer.\n\nrenderType The render mode to use to draw \\p mesh with this\nrenderer.\n\n**See also**: ofPolyRenderMode\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&model)\n\n<!--\n_syntax: draw(&model)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofNode &model_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a node with this renderer using ofNode::customDraw().\n\n**Parameters:**\n\nmodel The node to draw with this renderer.\n\n**See also**: ofNode::customDraw()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&model, renderType)\n\n<!--\n_syntax: draw(&model, renderType)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const of3dPrimitive &model, ofPolyRenderMode renderType_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a \\p model with this renderer using the \\p renderType.\n\n\\p renderType defines how the \\p model will be rendered and may be:\n\tOF_MESH_POINTS,\n\t\tOF_MESH_WIREFRAME,\n\t\tOF_MESH_FILL\n\n\n**Parameters:**\n\nmodel The model to draw with this renderer.\n\nrenderType The render mode to use when drawing the \\p model\nwith this renderer.\n\n**See also**: ofPolyRenderMode\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&poly)\n\n<!--\n_syntax: draw(&poly)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofPolyline &poly_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a polyline with this renderer.\n\n**Parameters:**\n\npoly The polyline to draw with this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&shape)\n\n<!--\n_syntax: draw(&shape)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofPath &shape_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a path with this renderer.\n\n**Parameters:**\n\nshape The path to draw with this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&shape, x, y)\n\n<!--\n_syntax: draw(&shape, x, y)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofPath &shape, float x, float y_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a path with this renderer at \\p x and \\p y.\n\n**Parameters:**\n\nshape The path to draw with this renderer.\n\nx The x coordinate to use to draw \\p shape.\n\ny The y coordinate to use to draw \\p shape.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&vertexData, renderType, useColors, useTextures, useNormals)\n\n<!--\n_syntax: draw(&vertexData, renderType, useColors, useTextures, useNormals)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofMesh &vertexData, ofPolyRenderMode renderType, bool useColors, bool useTextures, bool useNormals_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a mesh with this renderer.\n\n\\p renderType defines how the \\p mesh will be rendered and may be:\n\tOF_MESH_POINTS,\n\t\tOF_MESH_WIREFRAME,\n\t\tOF_MESH_FILL\n\n\n**Parameters:**\n\nvertexData The mesh to draw with this renderer.\n\nrenderType The render mode to use to draw \\p vertexData to\nthis renderer.\n\nuseColors True to use per-vertex coloring to draw the\n\\p vertexData.\n\nuseTextures True to use texture coordinates to draw the \\p\nvertexData.\n\nuseNormals True to use normals to draw the \\p vertexData.\n\n**See also**: ofPolyRenderMode\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&video, x, y, w, h)\n\n<!--\n_syntax: draw(&video, x, y, w, h)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofBaseVideoDraws &video, float x, float y, float w, float h_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a \\p video with this renderer.\n\n**Parameters:**\n\nvideo The video with draw with this renderer.\n\nx The x coordinate to use to draw \\p video with this renderer.\n\ny The y coordinate to use to draw \\p video with this renderer.\n\nw The width to use to draw the video with this renderer.\n\nh The height to use to draw the video with this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawArrow(&start, &end, headSize)\n\n<!--\n_syntax: drawArrow(&start, &end, headSize)_\n_name: drawArrow_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &start, const glm::vec3 &end, float headSize_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw an arrow between two 3D points.\nstart The 3D vector to use as the first point.\nend The 3D vector to use as the second point.\n\\float headSize The size of the arrowhead.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawAxis(size)\n\n<!--\n_syntax: drawAxis(size)_\n_name: drawAxis_\n_returns: void_\n_returns_description: _\n_parameters: float size_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw the coordinate system's axes with the renderer.\n\nThis draws a red, green, and blue lines for the x, y, and z axes\nrespectively. This can be helpful when trying to orient other objects\nin respect to the coordinate system.\n\n\n**Parameters:**\n\nsize The length to draw each axis line.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(&position, size)\n\n<!--\n_syntax: drawBox(&position, size)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float size_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a cube with the specified size, starting from the specified\nposition.\n\nA cube is drawn starting from a 3D reference position, with the\nspecified size. The cube is drawn with the current color, e.g. set with\nofSetColor(). The cube is drawn filled by default; change this with\nofFill().\n\n\n**Parameters:**\n\nposition an glm::vec3 which contains the (x,y,z) coordinates for\nthe cube's reference corner.\n\nsize The size of the cube.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(&position, width, height, depth)\n\n<!--\n_syntax: drawBox(&position, width, height, depth)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float width, float height, float depth_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangular box using position, width, height and depth.\n\nA box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();\n\n\n**Parameters:**\n\nposition an glm::vec3 which contains the (x,y,z) coordinates for the box's reference corner.\n\nwidth The width of the box.\n\nheight The height of the box.\n\ndepth The depth of the box.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(size)\n\n<!--\n_syntax: drawBox(size)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: float size_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a cube with the specified size at the origin.\n\nThe cube is drawn with the current color, e.g. set with ofSetColor().\nThe cube is drawn filled by default; change this with ofFill();\n\n\n**Parameters:**\n\nsize The size of the cube.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(width, height, depth)\n\n<!--\n_syntax: drawBox(width, height, depth)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height, float depth_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangular box with the specified dimensions, starting from the origin.\n\nA box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from the origin of the current reference frame.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();\n\n\n**Parameters:**\n\nwidth The width of the box.\n\nheight The height of the box.\n\ndepth The depth of the box.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(x, y, z, size)\n\n<!--\n_syntax: drawBox(x, y, z, size)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float size_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a cube using x, y, z, and size.\ncoordinates.\n\nA cube is a rectangular solid bounded by six square faces of equal size.\nIt is also known as a regular hexahedron, a square parallelepiped, an\nequilateral cuboid and a right rhombohedron. It is a regular square\nprism in three orientations.\n\nIt is drawn starting from a 3D reference coordinate, with the specified\nsize. The cube is drawn with the current color, e.g. set with\nofSetColor(). The cube is drawn filled by default; change this with\nofFill().\n\n\n**Parameters:**\n\nx The x-coordinate of the cube's origin.\n\ny The y-coordinate of the cube's origin.\n\nz The z-coordinate of the cube's origin.\n\nsize The size of the cube.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBox(x, y, z, width, height, depth)\n\n<!--\n_syntax: drawBox(x, y, z, width, height, depth)_\n_name: drawBox_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float width, float height, float depth_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a rectangular box using x, y, z, width, height, and depth.\n\nA box is a rectangular solid: an extruded rectangle.\nIt is drawn starting from a 3D reference coordinate.\nIt has a width (in x), a height (in y), and a depth (in z).\nThe box is drawn with the current color, e.g. set with ofSetColor().\nThe box is drawn filled by default; change this with ofFill();\n\n\n**Parameters:**\n\nx The x-coordinate of the box's origin.\n\ny The y-coordinate of the box's origin.\n\nz The z-coordinate of the box's origin.\n\nwidth The width of the box.\n\nheight The height of the box.\n\ndepth The depth of the box.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCircle(x, y, z, radius)\n\n<!--\n_syntax: drawCircle(x, y, z, radius)_\n_name: drawCircle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a circle using a 3D point and a radius.\n\n**Parameters:**\n\nx The x coordinate of the center of the circle.\n\ny The y coordinate of the center of the circle.\n\nz The z coordinate of the center of the circle.\n\nradius The length of the radius of the circle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCone(&position, radius, height)\n\n<!--\n_syntax: drawCone(&position, radius, height)_\n_name: drawCone_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a cone with this renderer using x, y, z, radius, and\nheight.\n\nCones are drawn with x, y, and z coordinates representing the centroid\nof the cone. \\p Radius is the radius of the cone's circular\nfootprint and \\p height representing the height of the cone's.\n\n\n**Parameters:**\n\nposition The 3D point representing this cone's position.\n\nradius The radius to use when drawing this cone's circular\nfootprint.\n\nheight The height to use when drawing this cone.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCone(radius, height)\n\n<!--\n_syntax: drawCone(radius, height)_\n_name: drawCone_\n_returns: void_\n_returns_description: _\n_parameters: float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a cone at the origin using radius and height.\n\nThis cone will be drawn with its position at the coordinate system's\norigin. \\p Radius is the radius of the cone's circular footprint and\n\\p height representing the height of the cone.\n\n\n**Parameters:**\n\nradius The radius to use when drawing this cone's circular\nfootprint.\n\nheight The height to use when drawing this cone.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCone(x, y, radius, height)\n\n<!--\n_syntax: drawCone(x, y, radius, height)_\n_name: drawCone_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a cone with this renderer using x, y, z, radius, and\nheight.\n\nCones are drawn with x, y, and z coordinates representing the centroid\nof the cylinder. Radius is the radius of the cone's circular\nfootprint and height representing the height of the cone's.\n\n\n**Parameters:**\n\nx The x coordinate to use when drawing this cone.\n\ny The y coordinate to use when drawing this cone.\n\nradius The radius to use when drawing this cone's circular\nfootprint.\n\nheight The height to use when drawing this cone.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCone(x, y, z, radius, height)\n\n<!--\n_syntax: drawCone(x, y, z, radius, height)_\n_name: drawCone_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a cone with this renderer using x, y, z, radius, and\nheight.\n\nCones are drawn with x, y, and z coordinates representing the centroid\nof the cone. Radius is the radius of the cone's circular\nfootprint and height representing the height of the cone.\n\n\n**Parameters:**\n\nx The x coordinate to use when drawing this cone.\n\ny The y coordinate to use when drawing this cone.\n\nz The z coordinate to use when drawing this cone.\n\nradius The radius to use when drawing this cone's circular\nfootprint.\n\nheight The height to use when drawing this cone.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCylinder(&position, radius, height)\n\n<!--\n_syntax: drawCylinder(&position, radius, height)_\n_name: drawCylinder_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a cylinder with this renderer using position, radius, and\nheight.\n\nCyliners are drawn with x, y, and z coordinates representing the\ncentroid of the cylinder. Radius is the radius of the cylinder's\ncircular footprint and height representing the height of the cylinder.\n\n\n**Parameters:**\n\nposition The 3D point to use as a position coordinate when\ndrawing this cylinder.\n\n\nradius The radius to use when drawing this cylinder's circular\nfootprint.\n\nheight The height to use when drawing this cylinder.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCylinder(radius, height)\n\n<!--\n_syntax: drawCylinder(radius, height)_\n_name: drawCylinder_\n_returns: void_\n_returns_description: _\n_parameters: float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a cylinder at the origin using radius and height.\n\nA cylinder drawn in this way will be positioned at the origin. Radius is\nthe radius of the cylinder's circular footprint and height representing\nthe height of the cylinder.\n\n\n**Parameters:**\n\nradius The radius to use when drawing this cylinder's circular\nfootprint.\n\nheight The height to use when drawing this cylinder.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCylinder(x, y, radius, height)\n\n<!--\n_syntax: drawCylinder(x, y, radius, height)_\n_name: drawCylinder_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a cylinder with this renderer using x, y, radius, and\nheight.\n\nCyliners are drawn with x, y, and z coordinates representing the\ncentroid of the cylinder. Radius is the radius of the cylinder's\ncircular footprint and height representing the height of the cylinder.\n\n\n**Parameters:**\n\nx The x coordinate to use when drawing this cylinder.\n\ny The y coordinate to use when drawing this cylinder.\n\nradius The radius to use when drawing this cylinder's circular\nfootprint.\n\nheight The height to use when drawing this cylinder.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCylinder(x, y, z, radius, height)\n\n<!--\n_syntax: drawCylinder(x, y, z, radius, height)_\n_name: drawCylinder_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a cylinder with this renderer using x, y, z, radius, and\nheight.\n\nCyliners are drawn with x, y, and z coordinates representing the\ncentroid of the cylinder. Radius is the radius of the cylinder's\ncircular footprint and height representing the height of the cylinder.\n\n\n**Parameters:**\n\nx The x coordinate to use when drawing this cylinder.\n\ny The y coordinate to use when drawing this cylinder.\n\nz The z coordinate to use when drawing this cylinder.\n\nradius The radius to use when drawing this cylinder's circular\nfootprint.\n\nheight The height to use when drawing this cylinder.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawEllipse(x, y, z, width, height)\n\n<!--\n_syntax: drawEllipse(x, y, z, width, height)_\n_name: drawEllipse_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float width, float height_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw an ellipse using a 3D point, width, and height.\n\n**Parameters:**\n\nx The x coordinate of the center of the circle.\n\ny The y coordinate of the center of the circle.\n\nz The z coordinate of the center of the circle.\n\nwidth The width of the circle.\n\nheight The height of the circle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawGrid(stepSize, numberOfSteps, labels, x, y, z)\n\n<!--\n_syntax: drawGrid(stepSize, numberOfSteps, labels, x, y, z)_\n_name: drawGrid_\n_returns: void_\n_returns_description: _\n_parameters: float stepSize, size_t numberOfSteps, bool labels, bool x, bool y, bool z_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw the coordinate system's axes as a grid with the renderer.\n\n**Parameters:**\n\nstepSize The size of each row/column in each axis grid.\n\nnumberOfSteps The number of rows/columns in each axis grid.\n\nlabels True to draw the name and values of the axis as a bitmap\nstring.\n\nx True to draw the x axis.\n\ny True to draw the y axis.\n\nz True to draw the z axis.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawGridPlane(stepSize, numberOfSteps, labels)\n\n<!--\n_syntax: drawGridPlane(stepSize, numberOfSteps, labels)_\n_name: drawGridPlane_\n_returns: void_\n_returns_description: _\n_parameters: float stepSize, size_t numberOfSteps, bool labels_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a coordinate system plane using the y and z axes.\n\n**Parameters:**\n\nstepSize The size of each row/column on the axis grid.\n\nnumberOfSteps The number of rows/columns on the axis grid.\n\nlabels True to draw the names and values of the axes.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawIcoSphere(&position, radius)\n\n<!--\n_syntax: drawIcoSphere(&position, radius)_\n_name: drawIcoSphere_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw an icosphere with this renderer using x, y, and radius.\n\nIcospheres are drawn with x, y, and z coordinates representing the\ncenter of the icosphere.\n\n\n**Parameters:**\n\nposition The 3D position point to use when drawing the icosphere.\n\nradius The radius to use when drawing this icosphere.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawIcoSphere(radius)\n\n<!--\n_syntax: drawIcoSphere(radius)_\n_name: drawIcoSphere_\n_returns: void_\n_returns_description: _\n_parameters: float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw an icosphere with the renderer at the origin using radius.\n\n**Parameters:**\n\nradius The radius to use when drawing the icosphere with this\nrenderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawIcoSphere(x, y, radius)\n\n<!--\n_syntax: drawIcoSphere(x, y, radius)_\n_name: drawIcoSphere_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw an icosphere with this renderer using x, y, and radius.\n\nSpheres are drawn with x, y, and z coordinates representing the center\nof the icosphere.\n\n\n**Parameters:**\n\nx The x coordinate to use when drawing this icosphere.\n\ny The y coordinate to use when drawing this icosphere.\n\nradius The radius to use when drawing this icosphere.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawIcoSphere(x, y, z, radius)\n\n<!--\n_syntax: drawIcoSphere(x, y, z, radius)_\n_name: drawIcoSphere_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw an icosphere with this renderer using x, y, and radius.\n\nSpheres are drawn with x, y, and z coordinates representing the center\nof the icosphere.\n\n\n**Parameters:**\n\nx The x coordinate to use when drawing this icosphere.\n\ny The y coordinate to use when drawing this icosphere.\n\nz The z coordinate to use when drawing this icosphere.\n\nradius The radius to use when drawing this icosphere.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawLine(x1, y1, z1, x2, y2, z2)\n\n<!--\n_syntax: drawLine(x1, y1, z1, x2, y2, z2)_\n_name: drawLine_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float z1, float x2, float y2, float z2_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a line between two 3D points.\n\n**Parameters:**\n\nx1 The x coordinate of the first point.\n\ny1 The y coordinate of the first point.\n\nz1 The z coordinate of the first point.\n\nx2 The x coordinate of the second point.\n\ny2 The y coordinate of the second point.\n\nz2 The z coordinate of the second point.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawPlane(&position, width, height)\n\n<!--\n_syntax: drawPlane(&position, width, height)_\n_name: drawPlane_\n_returns: void_\n_returns_description: _\n_parameters: glm::vec3 &position, float width, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a plane with the renderer using a 3D point, width, and height.\n\nThe number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().\n\n\n**Parameters:**\n\nposition A 3D point to use as the position to draw the plane with\nthis renderer.\n\nwidth The width to use when drawing the plane with this renderer.\n\nheight The height to use when drawing the plane with this\nrenderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawPlane(width, height)\n\n<!--\n_syntax: drawPlane(width, height)_\n_name: drawPlane_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a plane with the renderer at the origin.\n\nThe number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().\n\n\n**Parameters:**\n\nwidth The width of the plane to use when drawing the plane with\nthis renderer.\n\nheight The height to use when drawing the plane with this\nrenderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawPlane(x, y, width, height)\n\n<!--\n_syntax: drawPlane(x, y, width, height)_\n_name: drawPlane_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float width, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a plane with the renderer using x, y, width, and height.\n\nThe number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().\n\n\n**Parameters:**\n\nx The x coordinate to use when drawing the plane with this\nrenderer.\n\ny The y coordinate to use when drawing the plane with this\nrenderer.\n\nwidth The width to use when drawing the plane with this renderer.\n\nheight The height to use when drawing the plane with this\nrenderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawPlane(x, y, z, width, height)\n\n<!--\n_syntax: drawPlane(x, y, z, width, height)_\n_name: drawPlane_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float width, float height_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a plane with the renderer using x, y, z, width, and height.\n\nThe number of rows and columns this plane will have is dependent on this\nrenderer's current plane resolution set with setPlaneResolution().\n\n\n**Parameters:**\n\nx The x coordinate to use when drawing the plane with this\nrenderer.\n\ny The y coordinate to use when drawing the plane with this\nrenderer.\n\nz The z coordinate to use when drawing the plane with this\nrenderer.\n\nwidth The width to use when drawing the plane with this renderer.\n\nheight The height to use when drawing the plane with this\nrenderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawRectangle(x, y, z, w, h)\n\n<!--\n_syntax: drawRectangle(x, y, z, w, h)_\n_name: drawRectangle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a rectangle using a 3D point and a width and height.\n\n**Parameters:**\n\nx The x coordinate of the rectangle.\n\ny The y coordinate of the rectangle.\n\nz The z coordinate of the rectangle.\n\nw The width of the rectangle.\n\nh The height of the rectangle.\n\n**See also**: ofRectMode\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawRotationAxes(radius, stripWidth, circleRes)\n\n<!--\n_syntax: drawRotationAxes(radius, stripWidth, circleRes)_\n_name: drawRotationAxes_\n_returns: void_\n_returns_description: _\n_parameters: float radius, float stripWidth, int circleRes_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw the coordinate system's axes with the renderer.\n\nThis draws red, green, and blue lines for the x, y, and z rotation\naxes respectively. This can be helpful when trying to orient other\nobject's rotation in respect to the coordinate system.\n\n\n**Parameters:**\n\nradius The radius to draw the rotation axes with.\n\nstripWidth The width of each axis line.\n\ncircleRes The circle resolution to use when drawing the axes.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSphere(&position, radius)\n\n<!--\n_syntax: drawSphere(&position, radius)_\n_name: drawSphere_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &position, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a sphere with this renderer using a position point and\nradius.\n\nSpheres are drawn with x, y, and z coordinates representing the center\nof the sphere.\n\n\n**Parameters:**\n\nposition The 3D position point to use when drawing the sphere.\n\nradius The radius to use when drawing this sphere.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSphere(radius)\n\n<!--\n_syntax: drawSphere(radius)_\n_name: drawSphere_\n_returns: void_\n_returns_description: _\n_parameters: float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a sphere with the renderer at the defualt origin using\nradius.\n\n**Parameters:**\n\nradius The radius to use when drawing the sphere with this\nrenderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSphere(x, y, radius)\n\n<!--\n_syntax: drawSphere(x, y, radius)_\n_name: drawSphere_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a sphere with this renderer using x, y, and radius.\n\nSpheres are drawn with x, y, and z coordinates representing the center\nof the sphere.\n\n\n**Parameters:**\n\nx The x coordinate to use when drawing this sphere.\n\ny The y coordinate to use when drawing this sphere.\n\nradius The radius to use when drawing this sphere.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSphere(x, y, z, radius)\n\n<!--\n_syntax: drawSphere(x, y, z, radius)_\n_name: drawSphere_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a sphere with this renderer using x, y, z, and radius.\n\nSpheres are drawn with x, y, and z coordinates representing the center\nof the sphere.\n\n\n**Parameters:**\n\nx The x coordinate to use when drawing this sphere.\n\ny The y coordinate to use when drawing this sphere.\n\nz The z coordinate to use when drawing this sphere.\n\nradius The radius to use when drawing this sphere.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawString(&font, text, x, y)\n\n<!--\n_syntax: drawString(&font, text, x, y)_\n_name: drawString_\n_returns: void_\n_returns_description: _\n_parameters: const ofTrueTypeFont &font, string text, float x, float y_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw text with this renderer using an ofTrueType font.\n\n**Parameters:**\n\nfont The font to use when drawing \\p text.\n\ntext The text to draw with the renderer.\n\nx The x position for the bottom of \\p text.\n\ny The y position for the left alignment of \\p text.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawString(text, x, y, z)\n\n<!--\n_syntax: drawString(text, x, y, z)_\n_name: drawString_\n_returns: void_\n_returns_description: _\n_parameters: string text, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw text with this renderer using the current bitmap text mode.\n\nWhen using the OF_BITMAPMODE_SIMPLE bitmap text strings are drawn with\ntheir origin at the bottom left corner of the text. However,\nsetBitmapTextMode() can transform this default behavior with modes like:\n\t\tOF_BITMAPMODE_SIMPLE\n\t\tOF_BITMAPMODE_SCREEN\n\t\tOF_BITMAPMODE_VIEWPORT\n\t\tOF_BITMAPMODE_MODEL\n\t\tOF_BITMAPMODE_MODEL_BILLBOARD\n\n\n**Parameters:**\n\ntext The text to draw with the renderer.\n\nx The x position for the bottom of \\p text.\n\ny The y position for the left alignment of \\p text.\n\nz The z position of the text.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)\n\n<!--\n_syntax: drawTriangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)_\n_name: drawTriangle_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a triangle using three 3D points.\n\n**Parameters:**\n\nx1 The x coordinate of the first point.\n\ny1 The y coordinate of the first point.\n\nz1 The z coordinate of the first point.\n\nx2 The x coordinate of the second point.\n\ny2 The y coordinate of the second point.\n\nz2 The z coordinate of the second point.\n\nx3 The x coordinate of the third point.\n\ny3 The y coordinate of the third point.\n\nz3 The z coordinate of the third point.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void enableAntiAliasing()\n\n<!--\n_syntax: enableAntiAliasing()_\n_name: enableAntiAliasing_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEnable this renderer to use anti-aliasing if it is supported.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void finishRender()\n\n<!--\n_syntax: finishRender()_\n_name: finishRender_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStop using this renderer as the rendering surface.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const of3dGraphics & get3dGraphics()\n\n<!--\n_syntax: get3dGraphics()_\n_name: get3dGraphics_\n_returns: const of3dGraphics &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a const reference of this renderer's 3D graphics object.\n\n**Returns**: The 3D graphics object currently being used by this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###of3dGraphics & get3dGraphics()\n\n<!--\n_syntax: get3dGraphics()_\n_name: get3dGraphics_\n_returns: of3dGraphics &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a reference with this renderer's 3D graphics object.\n\n**Returns**: the 3D graphics object currently being used by this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getBackgroundAuto()\n\n<!--\n_syntax: getBackgroundAuto()_\n_name: getBackgroundAuto_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the current auto redraw background setting for this renderer.\n\n**Returns**: True if this renderer is set to redraw the background each\nframe.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor getBackgroundColor()\n\n<!--\n_syntax: getBackgroundColor()_\n_name: getBackgroundColor_\n_returns: ofColor_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current background color.\n\n**Returns**: This renderer's current background color.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getBoxResolution()\n\n<!--\n_syntax: getBoxResolution()_\n_name: getBoxResolution_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current box resolution as a 3D vector.\n\nThe returned vector's x, y, and z properties represent this renderer's\ncurrent resolution width, resolution height, and resolution depth\nrespectively.\n\n\n**Returns**: This renderer's current box resolution as a 3D vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getConeResolution()\n\n<!--\n_syntax: getConeResolution()_\n_name: getConeResolution_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's cone resolution as a 3D vector.\n\nThe resulting vector's x, y, and z properties correspond to the radius\nsegments, height segments, and cap segments of this renderer's cone\nresolution respectively.\n\n\n**Returns**: A 3D vector representing this renderer's current cone\nresolution.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofHandednessType getCoordHandedness()\n\n<!--\n_syntax: getCoordHandedness()_\n_name: getCoordHandedness_\n_returns: ofHandednessType_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the coordinate handidness of this renderer.\n\nPossible handednesses include OF_LEFT_HANDED and OF_RIGHT_HANDED.\nIn a left handed coordinate system positive x, y and z axes point right,\nup and forward, respectively and positive rotation is clockwise about\nthe axis of rotation. In a right handed coordinate system the positive x\nand y axes point right and up, and the negative z axis points forward\nand positive rotation is counterclockwise about the axis of rotation.\n\n\n**Returns**: The handedness this renderer is using.\n\n**See also**: http://seanmiddleditch.com/matrices-handedness-pre-and-post-multiplication-row-vs-column-major-and-notations/\n\n**See also**: https://www.evl.uic.edu/ralph/508S98/coordinates.html\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 getCurrentMatrix(matrixMode_)\n\n<!--\n_syntax: getCurrentMatrix(matrixMode_)_\n_name: getCurrentMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: ofMatrixMode matrixMode__\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current matrix for particular a matrix mode.\n\nPossible matrix modes include:\n\t\tOF_MATRIX_MODELVIEW\n\t\tOF_MATRIX_PROJECTION\n\t\tOF_MATRIX_TEXTURE\n\n\n**Parameters:**\n\nmatrixMode_ The matrix mode to get the current matrix of.\n\n**Returns**: The current matrix specified by \\p matrixMode_\n\n**See also**: ofMatrixMode\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 getCurrentNormalMatrix()\n\n<!--\n_syntax: getCurrentNormalMatrix()_\n_name: getCurrentNormalMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current normal matrix.\n\n**Returns**: This renderer's current normal matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 getCurrentOrientationMatrix()\n\n<!--\n_syntax: getCurrentOrientationMatrix()_\n_name: getCurrentOrientationMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current orientation matrix.\n\n**Returns**: This renderer's current orientation matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 getCurrentViewMatrix()\n\n<!--\n_syntax: getCurrentViewMatrix()_\n_name: getCurrentViewMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current view matrix.\n\n**Returns**: This renderer's current view matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle getCurrentViewport()\n\n<!--\n_syntax: getCurrentViewport()_\n_name: getCurrentViewport_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current viewport.\n\nUnlike getNativeViewport(), this method gets this renderer's current\nviewport with orientation and vertical flipping applied.\n\n\n**Returns**: This renderer's viewport as a rectangle.\n\n**See also**: getNativeViewport()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getCylinderResolution()\n\n<!--\n_syntax: getCylinderResolution()_\n_name: getCylinderResolution_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's cylinder resolution as a 3D vector.\n\nThe resulting vector's x, y, and z properties correspond to the radius\nsegments, height segments, and cap segments of this renderer's cylinder\nresolution respectively.\n\n\n**Returns**: A 3D vector representing this renderer's current cylinder\nresolution.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFillFlag getFillMode()\n\n<!--\n_syntax: getFillMode()_\n_name: getFillMode_\n_returns: ofFillFlag_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current fill flag.\n\nPossible fill flags include OF_OUTLINE and OF_FILLED.\n\n\n**Returns**: The fill flag this render is currently using.\n\n**See also**: ofFillFlag\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getIcoSphereResolution()\n\n<!--\n_syntax: getIcoSphereResolution()_\n_name: getIcoSphereResolution_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current icosphere resolution.\n\n**Returns**: This renderer's current icosphere resolution.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle getNativeViewport()\n\n<!--\n_syntax: getNativeViewport()_\n_name: getNativeViewport_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current native viewport.\n\nUnlike getViewport(), this method gets this renderer's current viewport\nwithout orientation and vertical flipping applied.\n\n\n**Returns**: This renderer's native viewport as a rectangle.\n\n**See also**: getViewport()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPath & getPath()\n\n<!--\n_syntax: getPath()_\n_name: getPath_\n_returns: ofPath &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a reference to the path used internally by this renderer.\n\n**Returns**: A reference to the path used internally by this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 getPlaneResolution()\n\n<!--\n_syntax: getPlaneResolution()_\n_name: getPlaneResolution_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current plane resolution as a 2D vector.\n\nThe resulting vector's x and y values corresponds to the current column\nand row resolutions of this renderer's plane resolution respectively.\n\n\n**Returns**: A 2D vector representing this renderer's plane resolution in\ncolumns and rows.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectMode getRectMode()\n\n<!--\n_syntax: getRectMode()_\n_name: getRectMode_\n_returns: ofRectMode_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current rect mode.\n\nPossible rect modes include OF_RECTMODE_CORNER and OF_RECTMODE_CENTER.\n\n\n**Returns**: The renderer's current rect mode.\n\n**See also**: ofRectMode\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getSphereResolution()\n\n<!--\n_syntax: getSphereResolution()_\n_name: getSphereResolution_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current sphere resolution.\n\n**Returns**: This renderer's current sphere resolution.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofStyle getStyle()\n\n<!--\n_syntax: getStyle()_\n_name: getStyle_\n_returns: ofStyle_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet this renderer's current style object.\n\n**Returns**: This renderer's current style object.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const string & getType()\n\n<!--\n_syntax: getType()_\n_name: getType_\n_returns: const string &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the string representation of the renderer type.\n\nFor example, this method may return \"GL\", \"ProgrammableGL\", or another\ntype depending on the renderer being used.\n\n\n**Returns**: The string representation of the renderer type.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getViewportHeight()\n\n<!--\n_syntax: getViewportHeight()_\n_name: getViewportHeight_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the renderer's current viewport width.\n\n**Returns**: The renderer's current viewport width.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getViewportWidth()\n\n<!--\n_syntax: getViewportWidth()_\n_name: getViewportWidth_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the renderer's current viewport width.\n\n**Returns**: The renderer's current viewport width.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isVFlipped()\n\n<!--\n_syntax: isVFlipped()_\n_name: isVFlipped_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if the renderer's current viewport is vertically\nflipped.\n\n**Returns**: True if the renderer's current viewport is vertically flipped.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void loadIdentityMatrix()\n\n<!--\n_syntax: loadIdentityMatrix()_\n_name: loadIdentityMatrix_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLoad this renderer's identity matrix.\n\nThis identity matrix is an mat4 matrix with 1s on the main\ndiagonal and 0s elsewhere.\n[\n\t\t[1, 0, 0, 0],\n\t\t[0, 1, 0, 0],\n\t\t[0, 0, 1, 0],\n\t\t[0, 0, 0, 1]\n\t]\n\nMatrix multiplications using this matrix as the multiplier will yield no\nchange in the multiplicand matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void loadMatrix(&m)\n\n<!--\n_syntax: loadMatrix(&m)_\n_name: loadMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const glm::mat4 &m_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLoad a matrix as this renderer's current matrix.\n\n**Parameters:**\n\nm The matrix to load into this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void loadMatrix(*m)\n\n<!--\n_syntax: loadMatrix(*m)_\n_name: loadMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const float *m_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLoad m as this renderer's current matrix.\n\n\\p m can be passed to loadMatrix() in this way from raw data\n\n\n**Parameters:**\n\nm Float pointer to an 4x4 matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void loadViewMatrix(&m)\n\n<!--\n_syntax: loadViewMatrix(&m)_\n_name: loadViewMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const glm::mat4 &m_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLoad \\p m into this renderer's matrix stack as a view matrix.\n\n**Parameters:**\n\nm The view matrix to load into this renderer's matrix stack.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void matrixMode(mode)\n\n<!--\n_syntax: matrixMode(mode)_\n_name: matrixMode_\n_returns: void_\n_returns_description: _\n_parameters: ofMatrixMode mode_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets this renderer's current matrix mode.\n\nThe possible matrix modes include:\n\t\tOF_MATRIX_MODELVIEW\n\t\tOF_MATRIX_PROJECTION\n\t\tOF_MATRIX_TEXTURE\n\n\n**Parameters:**\n\nmode The matrix mode this renderer's matrix should use.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void multMatrix(&m)\n\n<!--\n_syntax: multMatrix(&m)_\n_name: multMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const glm::mat4 &m_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiply this renderer's current matrix by \\p m.\n\n**Parameters:**\n\nm The matrix to multiply this renderer's current matrix by.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void multMatrix(*m)\n\n<!--\n_syntax: multMatrix(*m)_\n_name: multMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const float *m_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiply this renderer's current matrix by \\p m.\n\n\\p m can be passed to loadMatrix() in this way with raw data\n\n\n**Parameters:**\n\nm Float pointer to an mat4 to multiply this renderer's\ncurrent matrix by.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void multViewMatrix(&m)\n\n<!--\n_syntax: multViewMatrix(&m)_\n_name: multViewMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const glm::mat4 &m_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiply this renderer's view matrix by \\p m.\n\n**Parameters:**\n\nm The matrix to multiply this renderer's view matrix by.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void popMatrix()\n\n<!--\n_syntax: popMatrix()_\n_name: popMatrix_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPops this renderer's current matrix stack.\n\npopMatrix() restores the renderer's matrix to the state it was last\nsaved with with a call to pushMatrix().\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void popStyle()\n\n<!--\n_syntax: popStyle()_\n_name: popStyle_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPop this renderer's current style from its internal style stack.\n\nThis restores the style that was last saved with pushStyle().\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void popView()\n\n<!--\n_syntax: popView()_\n_name: popView_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPop the current viewport from the renderer's view stack.\n\npopView() restores the renderer's viewport to the state it was last\nsaved with with a call to pushView().\n\n\n**See also**: viewport()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void pushMatrix()\n\n<!--\n_syntax: pushMatrix()_\n_name: pushMatrix_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPushes this renderer's matrix stack down by one.\n\npushMatrix() saves the renderer's current matrix allowing new\ntransformations and scales to effect only the new matrix created by\nthis method. Should be paired with a call to popMatrix().\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void pushStyle()\n\n<!--\n_syntax: pushStyle()_\n_name: pushStyle_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPush this renderer's current style into its internal style stack.\n\nThis creates a new style object used by this renderer internally until\npopStyle() is called.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void pushView()\n\n<!--\n_syntax: pushView()_\n_name: pushView_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPush the current viewport into the renderer's viewport stack.\n\npushViewport() save the current viewport to the renderer's viewport\nhistory stack allowing new viewport operations to effect only the new\nviewport created by this method. Should be paired with popView.\n\n\n**See also**: viewport()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateDeg(degrees)\n\n<!--\n_syntax: rotateDeg(degrees)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate this renderer's current matrix by \\p degrees about the z\naxis.\n\nThis method is an alias of rotateZ().\n\n\n**Parameters:**\n\ndegrees Degrees to rotate about the z axis.\n\n**See also**: rotateZ()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateDeg(degrees, vecX, vecY, vecZ)\n\n<!--\n_syntax: rotateDeg(degrees, vecX, vecY, vecZ)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, float vecX, float vecY, float vecZ_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate this renderer's current matrix by \\p degrees about a euler.\n\n**Parameters:**\n\ndegrees Degrees to rotate about vecX, vecY, and vecZ.\n\nvecX The x axis to rotate about.\n\nvecY The y axis to rotate about.\n\nvecZ The z axis to rotate about.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateRad(degrees)\n\n<!--\n_syntax: rotateRad(degrees)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate this renderer's current matrix by \\p degrees about the z\naxis.\n\nThis method is an alias of rotateZ().\n\n\n**Parameters:**\n\ndegrees Degrees to rotate about the z axis.\n\n**See also**: rotateZ()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateRad(degrees, vecX, vecY, vecZ)\n\n<!--\n_syntax: rotateRad(degrees, vecX, vecY, vecZ)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, float vecX, float vecY, float vecZ_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate this renderer's current matrix by \\p degrees about a euler.\n\n**Parameters:**\n\ndegrees Degrees to rotate about vecX, vecY, and vecZ.\n\nvecX The x axis to rotate about.\n\nvecY The y axis to rotate about.\n\nvecZ The z axis to rotate about.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateXDeg(degrees)\n\n<!--\n_syntax: rotateXDeg(degrees)_\n_name: rotateXDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate this renderer's current matrix by \\p degrees about the x\naxis.\n\n**Parameters:**\n\ndegrees Degrees to rotate about the x axis.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateXRad(degrees)\n\n<!--\n_syntax: rotateXRad(degrees)_\n_name: rotateXRad_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate this renderer's current matrix by \\p degrees about the x\naxis.\n\n**Parameters:**\n\ndegrees Degrees to rotate about the x axis.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateYDeg(degrees)\n\n<!--\n_syntax: rotateYDeg(degrees)_\n_name: rotateYDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate this renderer's current matrix by \\p degrees about the y\naxis.\n\n**Parameters:**\n\ndegrees Degrees to rotate about the y axis.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateYRad(degrees)\n\n<!--\n_syntax: rotateYRad(degrees)_\n_name: rotateYRad_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate this renderer's current matrix by \\p degrees about the y\naxis.\n\n**Parameters:**\n\ndegrees Degrees to rotate about the y axis.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateZDeg(degrees)\n\n<!--\n_syntax: rotateZDeg(degrees)_\n_name: rotateZDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate this renderer's current matrix by \\p degrees about the z\naxis.\n\n**Parameters:**\n\ndegrees Degrees to rotate about the z axis.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateZRad(degrees)\n\n<!--\n_syntax: rotateZRad(degrees)_\n_name: rotateZRad_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate this renderer's current matrix by \\p degrees about the z\naxis.\n\n**Parameters:**\n\ndegrees Degrees to rotate about the z axis.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scale(xAmnt, yAmnt, zAmnt)\n\n<!--\n_syntax: scale(xAmnt, yAmnt, zAmnt)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: float xAmnt, float yAmnt, float zAmnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale this renderer's current matrix by xAmnt, yAmnt, and zAmnt.\n\n**Parameters:**\n\nxAmnt The amount to scale this renderer's current matrix's x\naxis by.\n\nyAmnt The amount to scale this renderer's current matrix's y\naxis by.\n\nzAmnt The amount to scale this renderer's current matrix's z\naxis by. Defaults to 1.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setBackgroundAuto(bManual)\n\n<!--\n_syntax: setBackgroundAuto(bManual)_\n_name: setBackgroundAuto_\n_returns: void_\n_returns_description: _\n_parameters: bool bManual_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEnable/disable automatic redrawing of the background each frame.\n\n**Parameters:**\n\nbManual False to disable automatic background redrawing.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setBackgroundColor(&c)\n\n<!--\n_syntax: setBackgroundColor(&c)_\n_name: setBackgroundColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &c_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this renderer's background color.\n\n**Parameters:**\n\nc The color to request this renderer to use.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setBitmapTextMode(mode)\n\n<!--\n_syntax: setBitmapTextMode(mode)_\n_name: setBitmapTextMode_\n_returns: void_\n_returns_description: _\n_parameters: ofDrawBitmapMode mode_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this renderer's bitmap text mode.\n\nPossible bitmap texture modes include:\n\t\tOF_BITMAPMODE_SIMPLE\n\t\tOF_BITMAPMODE_SCREEN\n\t\tOF_BITMAPMODE_VIEWPORT\n\t\tOF_BITMAPMODE_MODEL\n\t\tOF_BITMAPMODE_MODEL_BILLBOARD\n\n\n**Parameters:**\n\nmode The bitmap mode to request this renderer to use.\n\n**See also**: ofDrawBitmapMode\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setBlendMode(blendMode)\n\n<!--\n_syntax: setBlendMode(blendMode)_\n_name: setBlendMode_\n_returns: void_\n_returns_description: _\n_parameters: ofBlendMode blendMode_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this renderer's current blend mode.\n\nPossible blend modes include:\nRotate this renderer's current matrix by \\p degrees about the z\naxis.\n\nThis method is an alias of rotateZ().\n\n\n**Parameters:**\n\ndegrees Degrees to rotate about the z axis.\n\n**See also**: rotateZ()\n\t\tOF_BLENDMODE_DISABLED\n\t\tOF_BLENDMODE_ALPHA\n\t\tOF_BLENDMODE_ADD\n\t\tOF_BLENDMODE_SUBTRACT\n\t\tOF_BLENDMODE_MULTIPLY\n\t\tOF_BLENDMODE_SCREEN\n\n\nblendMode The blend mode to request this renderer to use.\n\n**See also**: ofBlendMode\n\n**See also**: https://helpx.adobe.com/photoshop/using/blending-modes.html\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setBoxResolution(res)\n\n<!--\n_syntax: setBoxResolution(res)_\n_name: setBoxResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the resolution this renderer uses when drawing boxes.\n\n**Parameters:**\n\nres The resolution to use for box widths, heights, and depths.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setBoxResolution(resWidth, resHeight, resDepth)\n\n<!--\n_syntax: setBoxResolution(resWidth, resHeight, resDepth)_\n_name: setBoxResolution_\n_returns: void_\n_returns_description: _\n_parameters: int resWidth, int resHeight, int resDepth_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the resolution this renderer uses when drawing boxes.\n\n**Parameters:**\n\nresWidth The width resolution this renderer uses when drawing\nboxes.\n\nresHeight The height resolution this renderer uses when drawing\nboxes.\n\nresDepth The depth resolution this renderer uses when drawing\nboxes.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCircleResolution(res)\n\n<!--\n_syntax: setCircleResolution(res)_\n_name: setCircleResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the resolution to use when drawing ellipses with this\nrenderer.\n\n**Parameters:**\n\nres The number of points to use when drawing circles and ellipses\nwith this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(&color)\n\n<!--\n_syntax: setColor(&color)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &color_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the global color this renderer will use when drawing.\n\nThe renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.\n\n\n**Parameters:**\n\ncolor The color to use when drawing.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(&color, _a)\n\n<!--\n_syntax: setColor(&color, _a)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &color, int _a_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the global color this renderer will use when drawing.\n\nThe renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.\n\n\n**Parameters:**\n\ncolor The color to use when drawing.\n\n_a The alpha value between 0 and 255 to use when drawing.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(gray)\n\n<!--\n_syntax: setColor(gray)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: int gray_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the global color this renderer will use when drawing.\n\nThe renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.\n\n\n**Parameters:**\n\ngray The grayscale value to use when drawing.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(r, g, b)\n\n<!--\n_syntax: setColor(r, g, b)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: int r, int g, int b_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the global color this renderer will use when drawing.\n\nThe renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.\n\n\n**Parameters:**\n\nr The red value between 0 and 255 to use when drawing.\n\ng The green value between 0 and 255 to use when drawing.\n\nb The blue value between 0 and 255 to use when drawing.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(r, g, b, a)\n\n<!--\n_syntax: setColor(r, g, b, a)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: int r, int g, int b, int a_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the global color this renderer will use when drawing.\n\nThe renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.\n\n\n**Parameters:**\n\nr The red value between 0 and 255 to use when drawing.\n\ng The green value between 0 and 255 to use when drawing.\n\nb The blue value between 0 and 255 to use when drawing.\n\na The alpha value between 0 and 255 to use when drawing.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setConeResolution(radiusSegments, heightSegments, capSegments = 2)\n\n<!--\n_syntax: setConeResolution(radiusSegments, heightSegments, capSegments = 2)_\n_name: setConeResolution_\n_returns: void_\n_returns_description: _\n_parameters: int radiusSegments, int heightSegments, int capSegments=2_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the resolution of a polygonized cone.\n\nAllows you to set the polygonization resolution of any cones you\nsubsequently draw with ofDrawCone().\n\n\n**Parameters:**\n\nradiusSegments The number of facets (subdivisions) around the\ncone's circular footprint.\n\nheightSegments The number of subdivisions from the cone's top to\nbottom.\n\ncapSegments The number of annular (ring-shaped) subdivisions of\nthe cone's endcap.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCoordHandedness(handedness)\n\n<!--\n_syntax: setCoordHandedness(handedness)_\n_name: setCoordHandedness_\n_returns: void_\n_returns_description: _\n_parameters: ofHandednessType handedness_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the coordinate handidness of this renderer.\n\nPossible handednesses include OF_LEFT_HANDED and OF_RIGHT_HANDED.\nIn a left handed coordinate system positive x, y and z axes point right,\nup and forward, respectively and positive rotation is clockwise about\nthe axis of rotation. In a right handed coordinate system the positive x\nand y axes point right and up, and the negative z axis points forward\nand positive rotation is counterclockwise about the axis of rotation.\n\n\n**Parameters:**\n\nhandedness The handedness to set this renderer to use.\n\n**See also**: http://seanmiddleditch.com/matrices-handedness-pre-and-post-multiplication-row-vs-column-major-and-notations/\n\n**See also**: https://www.evl.uic.edu/ralph/508S98/coordinates.html\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCurveResolution(resolution)\n\n<!--\n_syntax: setCurveResolution(resolution)_\n_name: setCurveResolution_\n_returns: void_\n_returns_description: _\n_parameters: int resolution_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the resolution used when drawing curves with this renderer.\n\n**Parameters:**\n\nresolution The resolution to request this renderer to use when\ndrawing curves.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCylinderResolution(radiusSegments, heightSegments, capSegments = 2)\n\n<!--\n_syntax: setCylinderResolution(radiusSegments, heightSegments, capSegments = 2)_\n_name: setCylinderResolution_\n_returns: void_\n_returns_description: _\n_parameters: int radiusSegments, int heightSegments, int capSegments=2_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this renderer's cylinder resolution.\n\n**Parameters:**\n\nradiusSegments The number of facets (subdivisions) around the\nicosphere's circular footprint. A larger number yields a higher\nresolution.\n\nheightSegments The number of subdivisions from the cylinder's top\nto bottom.\n\ncapSegments The number of annular (ring-shaped) subdivisions of\nthe cylinder's endcap. Defaults to 2.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setDepthTest(depthTest)\n\n<!--\n_syntax: setDepthTest(depthTest)_\n_name: setDepthTest_\n_returns: void_\n_returns_description: _\n_parameters: bool depthTest_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEnable/disable depth testing with this renderer.\n\nWhen depth testing is enabled the order shapes are drawn with the\nrenderer is dependent on their distance from the camera rather than the\norder their drawing methods were called. This should be enabled when\nexpecting normal behavior when drawing 3D scenes.\n\n\n**Parameters:**\n\ndepthTest True to enable depth testing.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFillMode(fill)\n\n<!--\n_syntax: setFillMode(fill)_\n_name: setFillMode_\n_returns: void_\n_returns_description: _\n_parameters: ofFillFlag fill_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nset this renderer's fill flag.\n\nPossible fill flags include OF_OUTLINE and OF_FILLED.\n\n\n**Parameters:**\n\nfill The fill flag to request this renderer to use.\n\n**See also**: ofFillFlag\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHexColor(hexColor)\n\n<!--\n_syntax: setHexColor(hexColor)_\n_name: setHexColor_\n_returns: void_\n_returns_description: _\n_parameters: int hexColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the global color this renderer will use when drawing.\n\nThe renderer will continue using a color set by setColor() until another\ncall to setColor() changes the drawing color.\n\n\n**Parameters:**\n\nhexColor The hexidecimal representation of the color to use when\ndrawing.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setIcoSphereResolution(res)\n\n<!--\n_syntax: setIcoSphereResolution(res)_\n_name: setIcoSphereResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the point resolution to use when drawing an icosphere with\nthis renderer.\n\n**Parameters:**\n\nres The desired icosphere resolution to use with this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setLineSmoothing(smooth)\n\n<!--\n_syntax: setLineSmoothing(smooth)_\n_name: setLineSmoothing_\n_returns: void_\n_returns_description: _\n_parameters: bool smooth_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEnable/disable line smoothing for this renderer if it's supported.\n\n**Parameters:**\n\nsmooth True to enable line smoothing for this renderer if it's\nsupported.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setLineWidth(lineWidth)\n\n<!--\n_syntax: setLineWidth(lineWidth)_\n_name: setLineWidth_\n_returns: void_\n_returns_description: _\n_parameters: float lineWidth_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the line width this renderer should use when drawing lines.\n\n**Parameters:**\n\nlineWidth The line width to request this renderer to use.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setOrientation(orientation, vFlip)\n\n<!--\n_syntax: setOrientation(orientation, vFlip)_\n_name: setOrientation_\n_returns: void_\n_returns_description: _\n_parameters: ofOrientation orientation, bool vFlip_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nset this renderer's orientation.\n\nPossible orientation values include:\n\tOF_ORIENTATION_DEFAULT\n\t\tOF_ORIENTATION_180\n\t\tOF_ORIENTATION_90_LEFT\n\t\tOF_ORIENTATION_90_RIGHT\n\t\tOF_ORIENTATION_UNKNOWN\n\n\n**Parameters:**\n\norientation The orientation to use with this renderer.\n\nvFlip True if the orientation should be vertically flipped.\n\n**See also**: ofOrientation\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPlaneResolution(columns, rows)\n\n<!--\n_syntax: setPlaneResolution(columns, rows)_\n_name: setPlaneResolution_\n_returns: void_\n_returns_description: _\n_parameters: int columns, int rows_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this renderer's plane resolution using \\p column and \\p rows.\n\n**Parameters:**\n\ncolumns The number of columns to use when drawing planes with\nthis renderer.\n\nrows The number of rows to use when drawing planes with this\nrenderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPolyMode(mode)\n\n<!--\n_syntax: setPolyMode(mode)_\n_name: setPolyMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPolyWindingMode mode_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this renderer's poly winding mode.\n\nPossible poly winding modes include:\n\t\tOF_POLY_WINDING_ODD\n\t\tOF_POLY_WINDING_NONZERO\n\t\tOF_POLY_WINDING_POSITIVE\n\t\tOF_POLY_WINDING_NEGATIVE\n\t\tOF_POLY_WINDING_ABS_GEQ_TWO\n\n\n**Parameters:**\n\nmode The poly winding mode to request this renderer to use.\n\n**See also**: ofPolyWindingMode\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRectMode(mode)\n\n<!--\n_syntax: setRectMode(mode)_\n_name: setRectMode_\n_returns: void_\n_returns_description: _\n_parameters: ofRectMode mode_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this renderer's rect mode.\n\nPossible rect modes include OF_RECTMODE_CORNER and OF_RECTMODE_CENTER.\n\n\n**Parameters:**\n\nmode The rect mode to request this renderer to use.\n\n**See also**: ofRectMode\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setSphereResolution(res)\n\n<!--\n_syntax: setSphereResolution(res)_\n_name: setSphereResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nUV Sphere\nSet the point resolution to use when drawing a sphere with this\nrenderer.\n\n**Parameters:**\n\nres The desired sphere resolution to use with this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setStyle(&style)\n\n<!--\n_syntax: setStyle(&style)_\n_name: setStyle_\n_returns: void_\n_returns_description: _\n_parameters: const ofStyle &style_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this renderer's current style object.\n\n**Parameters:**\n\nstyle The style object to set this renderer to use.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setupGraphicDefaults()\n\n<!--\n_syntax: setupGraphicDefaults()_\n_name: setupGraphicDefaults_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nsetup the default graphics settings for this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setupScreen()\n\n<!--\n_syntax: setupScreen()_\n_name: setupScreen_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nsetup the default screen settings for this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setupScreenOrtho(width, height, nearDist, farDist)\n\n<!--\n_syntax: setupScreenOrtho(width, height, nearDist, farDist)_\n_name: setupScreenOrtho_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height, float nearDist, float farDist_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSetup the renderer to use an orthographic matrix.\n\n**Parameters:**\n\nwidth The width of the desired orthographic matrix. Defaults to\n-1 setting its width according to the rendering surface's width.\n\nheight The height of the desired orthographic matrix. Defaults to\n-1 setting its height according to the rendering surface's height.\n\nnearDist The near clipping distance to use with the orthographic\nmatrix. Setting this value to 0 uses the defualt near distance. Defaults\nto 0.\n\nfarDist The far clipping distance to use with the orthographic\nmatrix. Setting this value to 0 uses the defualt near distance. Defaults\nto 0.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setupScreenPerspective(width, height, fov, nearDist, farDist)\n\n<!--\n_syntax: setupScreenPerspective(width, height, fov, nearDist, farDist)_\n_name: setupScreenPerspective_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height, float fov, float nearDist, float farDist_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSetup the renderer to use a perspective matrix.\n\n**Parameters:**\n\nwidth The width of the desired perspective matrix. Defaults to -1\nsetting its width according to the rendering surface's width.\n\nheight The height of the desired perspective matrix. Defaults to\nDefaults to -1 setting its width according to the rendering surface's\nwidth.\n\nfov The field of view to use with the perspective matrix.\nDefaults to 60.\n\nnearDist The near clipping distance to use with the perspective\nmatrix. Setting this value to 0 uses the default near distance. Defaults\nto 0.\n\nfarDist The far clipping distance to use with the perspective\nmatrix. Setting this value to 0 uses the default near distance. Defaults\nto 0.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void startRender()\n\n<!--\n_syntax: startRender()_\n_name: startRender_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStarts using this renderer as the rendering surface.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(&p)\n\n<!--\n_syntax: translate(&p)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTranslate this renderer's current matrix by a point.\n\n**Parameters:**\n\np The 3D point to translate this renderer's current matrix by.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(x, y, z)\n\n<!--\n_syntax: translate(x, y, z)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTranslate this renderer's current matrix by x, y, and z.\n\n**Parameters:**\n\nx The x coordinate to translate this renderer's current matrix\nby.\n\ny The y coordinate to translate this renderer's current matrix\nby.\n\nz The z coordinate to translate this renderer's current matrix\nby. Defaults to 0.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void unbind(&camera)\n\n<!--\n_syntax: unbind(&camera)_\n_name: unbind_\n_returns: void_\n_returns_description: _\n_parameters: const ofCamera &camera_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nUnbind the camera from this renderer.\n\n**Parameters:**\n\ncamera The camera to unbind from this renderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void viewport(viewport)\n\n<!--\n_syntax: viewport(viewport)_\n_name: viewport_\n_returns: void_\n_returns_description: _\n_parameters: ofRectangle viewport_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this renderer's viewport using a rectangle.\n\nThis method uses the ofGetWidth() and ofGetHeight() to set the width and\nheight of the viewport. It also automatically creates near and far\nclipping planes based on this width and height.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void viewport(x, y, width, height, vflip = true)\n\n<!--\n_syntax: viewport(x, y, width, height, vflip = true)_\n_name: viewport_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float width, float height, bool vflip=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this renderer's viewport manually using x, y, width, and\nheight.\n\n**Parameters:**\n\nx The x coordinate of the viewport. Defaults to 0.\n\ny The y coordinate of the viewport. Defaults to 0.\n\nw The width of the viewport. Defaults to -1 setting its width\naccording to the rendering surface's width.\n\nh The height of the viewport. Defaults to -1 setting its height\naccording to the rendering surface's height.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofBaseRenderer()\n\n<!--\n_syntax: ~ofBaseRenderer()_\n_name: ~ofBaseRenderer_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n","type":"page","static":true}}],"fetch":[]}