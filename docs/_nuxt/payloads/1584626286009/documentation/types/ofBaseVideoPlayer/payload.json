{"data":[{"page":{"entry":{"name":"ofBaseVideoPlayer","filename":"ofBaseVideoPlayer.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/types/ofBaseVideoPlayer.markdown","path":"/documentation/types/ofBaseVideoPlayer","route":"/documentation/types/ofBaseVideoPlayer.markdown","dir":"../ofSite/documentation/types","ext":"markdown","type":"page","id":2185,"parent":2157,"breadcrumbs":[2157,1718],"siblings":[],"translations":{}},"description":{"short":"<p>A base class representing a video player.</p>\n","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"True","istemplated":"False","extends":"ofBaseVideo"},"methods":[{"syntax":"firstFrame()","name":"firstFrame","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the playhead position to the first frame.</p>\n<p>This is functionally equivalent to setFrame(0) or setPosition(0.0).</p>\n","desc":""},{"syntax":"getCurrentFrame()","name":"getCurrentFrame","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the current playhead position as a frame number.</p>\n<p><strong>Returns</strong>: The current playhead position as a frame number.</p>\n","desc":""},{"syntax":"getDuration()","name":"getDuration","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the duration of the loaded video in seconds.</p>\n<p><strong>Returns</strong>: The duration of the loaded video in seconds.</p>\n","desc":""},{"syntax":"getHeight()","name":"getHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the height in pixels of the loaded video.</p>\n<p><strong>Returns</strong>: The height in pixels of the loaded video or 0 if none is loaded.</p>\n","desc":""},{"syntax":"getIsMovieDone()","name":"getIsMovieDone","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns true if the loaded video has finished playing.</p>\n<p><strong>Returns</strong>: True if the loaded video has finished playing.</p>\n","desc":""},{"syntax":"getLoopState()","name":"getLoopState","returns":"ofLoopType","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the current loop state of the video.</p>\n<p><strong>See also</strong>: ::ofLoopType</p>\n","desc":""},{"syntax":"getPosition()","name":"getPosition","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the current playhead position of the loaded video.</p>\n<p>This value is a normalized floating point value between 0.0 and 1.0 that\nrepresents the position of the playhead. 0.0 maps to the first frame of\nthe loaded video and 1.0 maps to the last frame of the loaded video.</p>\n<p><strong>Returns</strong>: A value between 0.0 and 1.0 representing playhead position.</p>\n","desc":""},{"syntax":"getSpeed()","name":"getSpeed","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the playback speed of the video player.</p>\n<p>When the loop state is OF_LOOP_NONE or OF_LOOP_NORMAL, positive speed\nwill scale a forward playback rate while a negative speed will scale a\na backward playback rate. When the loop state is OF_LOOP_PALINDROME,\nthe direction of playback will change each loop, but the playback rate\nwill still be scaled by the absolute value of the speed.</p>\n<p><strong>Returns</strong>: The playback speed of the video player.</p>\n","desc":""},{"syntax":"getTexturePtr()","name":"getTexturePtr","returns":"ofTexture *","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get a pointer to the video texture used internally if it exists.</p>\n<p>If the video player implementation supports direct-to-texture rendering,\nthis method will return a pointer to the internal texture. If\ndirect-to-texture rendering is not supported, nullptr is returned.</p>\n<p><strong>Returns</strong>: A valid pointer to the internal texture, otherwise a nullptr.</p>\n","desc":""},{"syntax":"getTotalNumFrames()","name":"getTotalNumFrames","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the total number of frames in the currently loaded video.</p>\n<p><strong>Returns</strong>: The total number of frames in the currently loaded video.</p>\n","desc":""},{"syntax":"getWidth()","name":"getWidth","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the width in pixels of the loaded video.</p>\n<p><strong>Returns</strong>: The width in pixels of the loaded video or 0 if none is loaded.</p>\n","desc":""},{"syntax":"isInitialized()","name":"isInitialized","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns true if a video is loaded.</p>\n<p>This is helpful when loading a video with loadAsync(). This is also\nan alias of isLoaded().</p>\n<p><strong>See also</strong>: loadAsync()</p>\n<p><strong>Returns</strong>: True if a video is loaded.</p>\n","desc":""},{"syntax":"isLoaded()","name":"isLoaded","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns true if a video is loaded.</p>\n<p>This is helpful when loading a video with loadAsync(). This is also an\nalias of isInitialized().</p>\n<p><strong>See also</strong>: loadAsync()</p>\n<p><strong>Returns</strong>: True if a video is loaded.</p>\n","desc":""},{"syntax":"isPaused()","name":"isPaused","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns true if the video is paused.</p>\n<p><strong>Returns</strong>: True if the video is paused.</p>\n","desc":""},{"syntax":"isPlaying()","name":"isPlaying","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns true if the loaded video is playing.</p>\n<p><strong>Returns</strong>: True if the loaded video is playing.</p>\n","desc":""},{"syntax":"load(name)","name":"load","returns":"bool","returns_description":null,"parameters":"string name","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Load a video resource by name.</p>\n<p>The list of supported video types and sources (e.g. rtsp:// sources) is\nimplementation dependent.</p>\n<p><strong>Parameters:</strong></p>\n<p>name The name of the video resource to load.</p>\n<p><strong>Returns</strong>: True if the video was loaded successfully.</p>\n<p><strong>See also</strong>: loadAsync()</p>\n","desc":""},{"syntax":"loadAsync(name)","name":"loadAsync","returns":"void","returns_description":null,"parameters":"string name","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Asynchronously load a video resource by name.</p>\n<p>The list of supported video types and sources (e.g. rtsp:// sources) is\nimplementation dependent.</p>\n<p>When this method is used to load a video resouce, users can determine\nwhen the video is loaded by calling isLoaded().</p>\n<p><strong>Parameters:</strong></p>\n<p>name The name of the video resource to load.</p>\n<p><strong>See also</strong>: isLoaded()</p>\n","desc":""},{"syntax":"nextFrame()","name":"nextFrame","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Advance the playhead forward one frame.</p>\n<p>This allows the user to advance through the video manually one frame at\na time without calling play().</p>\n","desc":""},{"syntax":"play()","name":"play","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Play the video from the current playhead position.</p>\n<p><strong>See also</strong>: getPosition()</p>\n<p><strong>See also</strong>: setPostion()</p>\n","desc":""},{"syntax":"previousFrame()","name":"previousFrame","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Advance the playhead backward one frame.</p>\n<p>This allows the user to advance backward through the video manually one\nframe at a time without calling play().</p>\n","desc":""},{"syntax":"setFrame(frame)","name":"setFrame","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> frame","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the current frame by frame number.</p>\n<p>Similar to setPosition(), but accepts a frame number instead of\na normalized floating point value. Frame count begins with the first\nframe as 0 and the last frame as getTotalNumFrames() - 1.</p>\n<p><strong>Parameters:</strong></p>\n<p>frame The frame number to set the new playhead to.</p>\n","desc":""},{"syntax":"setLoopState(state)","name":"setLoopState","returns":"void","returns_description":null,"parameters":"ofLoopType state","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the video loop state.</p>\n<p><strong>Parameters:</strong></p>\n<p>state The loop state of the video.</p>\n<p><strong>See also</strong>: ::ofLoopType</p>\n","desc":""},{"syntax":"setPaused(bPause)","name":"setPaused","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bPause","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the paused state of the video.</p>\n<p><strong>Parameters:</strong></p>\n<p>bPause True to pause the video, false to play.</p>\n","desc":""},{"syntax":"setPosition(pct)","name":"setPosition","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> pct","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the position of the playhead.</p>\n<p>This value is a normalized floating point value between 0.0 and 1.0 that\nrepresents the position of the playhead. 0.0 maps to the first frame of\nthe loaded video and 1.0 maps to the last frame of the loaded video.</p>\n<p><strong>Parameters:</strong></p>\n<p>pct A value between 0.0 and 1.0 representing playhead position.</p>\n","desc":""},{"syntax":"setSpeed(speed)","name":"setSpeed","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> speed","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the video playback speed.</p>\n<p>When the loop state is OF_LOOP_NONE or OF_LOOP_NORMAL, positive speed\nwill scale a forward playback rate while a negative speed will scale a\na backward playback rate. When the loop state is OF_LOOP_PALINDROME,\nthe direction of playback will change each loop, but the playback rate\nwill still be scaled by the absolute value of the speed.</p>\n<p>To play a video forward at normal speed, set the loop state to\nOF_LOOP_NONE or OF_LOOP_NORMAL and a speed of 1.0. To double the\nplayback rate, set the speed to 2.0. To play a video backward, set the\nspeed to a negative number. A speed 0.25 will play the video at 1/4 the\nthe normal rate and a rate of 0.0 will effectively stop playback.</p>\n<p><strong>Parameters:</strong></p>\n<p>speed The desired playback speed of the video.</p>\n","desc":""},{"syntax":"setVolume(volume)","name":"setVolume","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> volume","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the volume of the video player.</p>\n<p>This value is a normalized floating point value between 0.0 and 1.0 that\nrepresents the video player volume. 0.0 maps to silence and 1.0 maps to\nmaximum volume.</p>\n<p><strong>Parameters:</strong></p>\n<p>volume A value between 0.0 and 1.0 representing volume.</p>\n","desc":""},{"syntax":"stop()","name":"stop","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Pause and reset the playhead position to the first frame.</p>\n","desc":""},{"syntax":"~ofBaseVideoPlayer()","name":"~ofBaseVideoPlayer","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Destroys the ofBaseVideoPlayer.</p>\n","desc":""},{}],"document":"<p>#class ofBaseVideoPlayer</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: True</em>\n<em>istemplated: False</em>\n<em>extends: ofBaseVideo</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>A base class representing a video player.</p>\n<p>##Description</p>\n<p>##Methods</p>\n<p>###void firstFrame()</p>\n<p>&lt;!--\n<em>syntax: firstFrame()</em>\n<em>name: firstFrame</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the playhead position to the first frame.</p>\n<p>This is functionally equivalent to setFrame(0) or setPosition(0.0).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getCurrentFrame()</p>\n<p>&lt;!--\n<em>syntax: getCurrentFrame()</em>\n<em>name: getCurrentFrame</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the current playhead position as a frame number.</p>\n<p><strong>Returns</strong>: The current playhead position as a frame number.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getDuration()</p>\n<p>&lt;!--\n<em>syntax: getDuration()</em>\n<em>name: getDuration</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the duration of the loaded video in seconds.</p>\n<p><strong>Returns</strong>: The duration of the loaded video in seconds.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHeight()</p>\n<p>&lt;!--\n<em>syntax: getHeight()</em>\n<em>name: getHeight</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the height in pixels of the loaded video.</p>\n<p><strong>Returns</strong>: The height in pixels of the loaded video or 0 if none is loaded.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool getIsMovieDone()</p>\n<p>&lt;!--\n<em>syntax: getIsMovieDone()</em>\n<em>name: getIsMovieDone</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns true if the loaded video has finished playing.</p>\n<p><strong>Returns</strong>: True if the loaded video has finished playing.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofLoopType getLoopState()</p>\n<p>&lt;!--\n<em>syntax: getLoopState()</em>\n<em>name: getLoopState</em>\n<em>returns: ofLoopType</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the current loop state of the video.</p>\n<p><strong>See also</strong>: ::ofLoopType</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getPosition()</p>\n<p>&lt;!--\n<em>syntax: getPosition()</em>\n<em>name: getPosition</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the current playhead position of the loaded video.</p>\n<p>This value is a normalized floating point value between 0.0 and 1.0 that\nrepresents the position of the playhead. 0.0 maps to the first frame of\nthe loaded video and 1.0 maps to the last frame of the loaded video.</p>\n<p><strong>Returns</strong>: A value between 0.0 and 1.0 representing playhead position.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getSpeed()</p>\n<p>&lt;!--\n<em>syntax: getSpeed()</em>\n<em>name: getSpeed</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the playback speed of the video player.</p>\n<p>When the loop state is OF_LOOP_NONE or OF_LOOP_NORMAL, positive speed\nwill scale a forward playback rate while a negative speed will scale a\na backward playback rate. When the loop state is OF_LOOP_PALINDROME,\nthe direction of playback will change each loop, but the playback rate\nwill still be scaled by the absolute value of the speed.</p>\n<p><strong>Returns</strong>: The playback speed of the video player.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofTexture * getTexturePtr()</p>\n<p>&lt;!--\n<em>syntax: getTexturePtr()</em>\n<em>name: getTexturePtr</em>\n<em>returns: ofTexture *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a pointer to the video texture used internally if it exists.</p>\n<p>If the video player implementation supports direct-to-texture rendering,\nthis method will return a pointer to the internal texture. If\ndirect-to-texture rendering is not supported, nullptr is returned.</p>\n<p><strong>Returns</strong>: A valid pointer to the internal texture, otherwise a nullptr.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getTotalNumFrames()</p>\n<p>&lt;!--\n<em>syntax: getTotalNumFrames()</em>\n<em>name: getTotalNumFrames</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the total number of frames in the currently loaded video.</p>\n<p><strong>Returns</strong>: The total number of frames in the currently loaded video.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getWidth()</p>\n<p>&lt;!--\n<em>syntax: getWidth()</em>\n<em>name: getWidth</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the width in pixels of the loaded video.</p>\n<p><strong>Returns</strong>: The width in pixels of the loaded video or 0 if none is loaded.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isInitialized()</p>\n<p>&lt;!--\n<em>syntax: isInitialized()</em>\n<em>name: isInitialized</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns true if a video is loaded.</p>\n<p>This is helpful when loading a video with loadAsync(). This is also\nan alias of isLoaded().</p>\n<p><strong>See also</strong>: loadAsync()</p>\n<p><strong>Returns</strong>: True if a video is loaded.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isLoaded()</p>\n<p>&lt;!--\n<em>syntax: isLoaded()</em>\n<em>name: isLoaded</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns true if a video is loaded.</p>\n<p>This is helpful when loading a video with loadAsync(). This is also an\nalias of isInitialized().</p>\n<p><strong>See also</strong>: loadAsync()</p>\n<p><strong>Returns</strong>: True if a video is loaded.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isPaused()</p>\n<p>&lt;!--\n<em>syntax: isPaused()</em>\n<em>name: isPaused</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns true if the video is paused.</p>\n<p><strong>Returns</strong>: True if the video is paused.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isPlaying()</p>\n<p>&lt;!--\n<em>syntax: isPlaying()</em>\n<em>name: isPlaying</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns true if the loaded video is playing.</p>\n<p><strong>Returns</strong>: True if the loaded video is playing.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool load(name)</p>\n<p>&lt;!--\n<em>syntax: load(name)</em>\n<em>name: load</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: string name</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Load a video resource by name.</p>\n<p>The list of supported video types and sources (e.g. rtsp:// sources) is\nimplementation dependent.</p>\n<p><strong>Parameters:</strong></p>\n<p>name The name of the video resource to load.</p>\n<p><strong>Returns</strong>: True if the video was loaded successfully.</p>\n<p><strong>See also</strong>: loadAsync()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void loadAsync(name)</p>\n<p>&lt;!--\n<em>syntax: loadAsync(name)</em>\n<em>name: loadAsync</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: string name</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Asynchronously load a video resource by name.</p>\n<p>The list of supported video types and sources (e.g. rtsp:// sources) is\nimplementation dependent.</p>\n<p>When this method is used to load a video resouce, users can determine\nwhen the video is loaded by calling isLoaded().</p>\n<p><strong>Parameters:</strong></p>\n<p>name The name of the video resource to load.</p>\n<p><strong>See also</strong>: isLoaded()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void nextFrame()</p>\n<p>&lt;!--\n<em>syntax: nextFrame()</em>\n<em>name: nextFrame</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Advance the playhead forward one frame.</p>\n<p>This allows the user to advance through the video manually one frame at\na time without calling play().</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void play()</p>\n<p>&lt;!--\n<em>syntax: play()</em>\n<em>name: play</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Play the video from the current playhead position.</p>\n<p><strong>See also</strong>: getPosition()</p>\n<p><strong>See also</strong>: setPostion()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void previousFrame()</p>\n<p>&lt;!--\n<em>syntax: previousFrame()</em>\n<em>name: previousFrame</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Advance the playhead backward one frame.</p>\n<p>This allows the user to advance backward through the video manually one\nframe at a time without calling play().</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFrame(frame)</p>\n<p>&lt;!--\n<em>syntax: setFrame(frame)</em>\n<em>name: setFrame</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int frame</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the current frame by frame number.</p>\n<p>Similar to setPosition(), but accepts a frame number instead of\na normalized floating point value. Frame count begins with the first\nframe as 0 and the last frame as getTotalNumFrames() - 1.</p>\n<p><strong>Parameters:</strong></p>\n<p>frame The frame number to set the new playhead to.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setLoopState(state)</p>\n<p>&lt;!--\n<em>syntax: setLoopState(state)</em>\n<em>name: setLoopState</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofLoopType state</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the video loop state.</p>\n<p><strong>Parameters:</strong></p>\n<p>state The loop state of the video.</p>\n<p><strong>See also</strong>: ::ofLoopType</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPaused(bPause)</p>\n<p>&lt;!--\n<em>syntax: setPaused(bPause)</em>\n<em>name: setPaused</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bPause</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the paused state of the video.</p>\n<p><strong>Parameters:</strong></p>\n<p>bPause True to pause the video, false to play.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPosition(pct)</p>\n<p>&lt;!--\n<em>syntax: setPosition(pct)</em>\n<em>name: setPosition</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float pct</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the position of the playhead.</p>\n<p>This value is a normalized floating point value between 0.0 and 1.0 that\nrepresents the position of the playhead. 0.0 maps to the first frame of\nthe loaded video and 1.0 maps to the last frame of the loaded video.</p>\n<p><strong>Parameters:</strong></p>\n<p>pct A value between 0.0 and 1.0 representing playhead position.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setSpeed(speed)</p>\n<p>&lt;!--\n<em>syntax: setSpeed(speed)</em>\n<em>name: setSpeed</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float speed</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the video playback speed.</p>\n<p>When the loop state is OF_LOOP_NONE or OF_LOOP_NORMAL, positive speed\nwill scale a forward playback rate while a negative speed will scale a\na backward playback rate. When the loop state is OF_LOOP_PALINDROME,\nthe direction of playback will change each loop, but the playback rate\nwill still be scaled by the absolute value of the speed.</p>\n<p>To play a video forward at normal speed, set the loop state to\nOF_LOOP_NONE or OF_LOOP_NORMAL and a speed of 1.0. To double the\nplayback rate, set the speed to 2.0. To play a video backward, set the\nspeed to a negative number. A speed 0.25 will play the video at 1/4 the\nthe normal rate and a rate of 0.0 will effectively stop playback.</p>\n<p><strong>Parameters:</strong></p>\n<p>speed The desired playback speed of the video.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVolume(volume)</p>\n<p>&lt;!--\n<em>syntax: setVolume(volume)</em>\n<em>name: setVolume</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float volume</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the volume of the video player.</p>\n<p>This value is a normalized floating point value between 0.0 and 1.0 that\nrepresents the video player volume. 0.0 maps to silence and 1.0 maps to\nmaximum volume.</p>\n<p><strong>Parameters:</strong></p>\n<p>volume A value between 0.0 and 1.0 representing volume.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void stop()</p>\n<p>&lt;!--\n<em>syntax: stop()</em>\n<em>name: stop</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Pause and reset the playhead position to the first frame.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofBaseVideoPlayer()</h3>\n<p>&lt;!--\n<em>syntax: ~ofBaseVideoPlayer()</em>\n<em>name: ~ofBaseVideoPlayer</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Destroys the ofBaseVideoPlayer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n","raw":"#class ofBaseVideoPlayer\n\n\n<!--\n_visible: True_\n_advanced: True_\n_istemplated: False_\n_extends: ofBaseVideo_\n-->\n\n##InlineDescription\n\nA base class representing a video player.\n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n###void firstFrame()\n\n<!--\n_syntax: firstFrame()_\n_name: firstFrame_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the playhead position to the first frame.\n\nThis is functionally equivalent to setFrame(0) or setPosition(0.0).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getCurrentFrame()\n\n<!--\n_syntax: getCurrentFrame()_\n_name: getCurrentFrame_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the current playhead position as a frame number.\n\n**Returns**: The current playhead position as a frame number.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getDuration()\n\n<!--\n_syntax: getDuration()_\n_name: getDuration_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the duration of the loaded video in seconds.\n\n**Returns**: The duration of the loaded video in seconds.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHeight()\n\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the height in pixels of the loaded video.\n\n**Returns**: The height in pixels of the loaded video or 0 if none is loaded.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getIsMovieDone()\n\n<!--\n_syntax: getIsMovieDone()_\n_name: getIsMovieDone_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if the loaded video has finished playing.\n\n**Returns**: True if the loaded video has finished playing.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofLoopType getLoopState()\n\n<!--\n_syntax: getLoopState()_\n_name: getLoopState_\n_returns: ofLoopType_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the current loop state of the video.\n\n**See also**: ::ofLoopType\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getPosition()\n\n<!--\n_syntax: getPosition()_\n_name: getPosition_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the current playhead position of the loaded video.\n\nThis value is a normalized floating point value between 0.0 and 1.0 that\nrepresents the position of the playhead. 0.0 maps to the first frame of\nthe loaded video and 1.0 maps to the last frame of the loaded video.\n\n\n**Returns**: A value between 0.0 and 1.0 representing playhead position.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getSpeed()\n\n<!--\n_syntax: getSpeed()_\n_name: getSpeed_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the playback speed of the video player.\n\nWhen the loop state is OF_LOOP_NONE or OF_LOOP_NORMAL, positive speed\nwill scale a forward playback rate while a negative speed will scale a\na backward playback rate. When the loop state is OF_LOOP_PALINDROME,\nthe direction of playback will change each loop, but the playback rate\nwill still be scaled by the absolute value of the speed.\n\n\n**Returns**: The playback speed of the video player.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTexture * getTexturePtr()\n\n<!--\n_syntax: getTexturePtr()_\n_name: getTexturePtr_\n_returns: ofTexture *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a pointer to the video texture used internally if it exists.\n\nIf the video player implementation supports direct-to-texture rendering,\nthis method will return a pointer to the internal texture. If\ndirect-to-texture rendering is not supported, nullptr is returned.\n\n\n**Returns**: A valid pointer to the internal texture, otherwise a nullptr.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getTotalNumFrames()\n\n<!--\n_syntax: getTotalNumFrames()_\n_name: getTotalNumFrames_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the total number of frames in the currently loaded video.\n\n**Returns**: The total number of frames in the currently loaded video.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getWidth()\n\n<!--\n_syntax: getWidth()_\n_name: getWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the width in pixels of the loaded video.\n\n**Returns**: The width in pixels of the loaded video or 0 if none is loaded.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isInitialized()\n\n<!--\n_syntax: isInitialized()_\n_name: isInitialized_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if a video is loaded.\n\nThis is helpful when loading a video with loadAsync(). This is also\nan alias of isLoaded().\n\n\n**See also**: loadAsync()\n\n**Returns**: True if a video is loaded.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isLoaded()\n\n<!--\n_syntax: isLoaded()_\n_name: isLoaded_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if a video is loaded.\n\nThis is helpful when loading a video with loadAsync(). This is also an\nalias of isInitialized().\n\n\n**See also**: loadAsync()\n\n**Returns**: True if a video is loaded.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isPaused()\n\n<!--\n_syntax: isPaused()_\n_name: isPaused_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if the video is paused.\n\n**Returns**: True if the video is paused.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isPlaying()\n\n<!--\n_syntax: isPlaying()_\n_name: isPlaying_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if the loaded video is playing.\n\n**Returns**: True if the loaded video is playing.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool load(name)\n\n<!--\n_syntax: load(name)_\n_name: load_\n_returns: bool_\n_returns_description: _\n_parameters: string name_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLoad a video resource by name.\n\nThe list of supported video types and sources (e.g. rtsp:// sources) is\nimplementation dependent.\n\n\n**Parameters:**\n\nname The name of the video resource to load.\n\n**Returns**: True if the video was loaded successfully.\n\n**See also**: loadAsync()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void loadAsync(name)\n\n<!--\n_syntax: loadAsync(name)_\n_name: loadAsync_\n_returns: void_\n_returns_description: _\n_parameters: string name_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAsynchronously load a video resource by name.\n\nThe list of supported video types and sources (e.g. rtsp:// sources) is\nimplementation dependent.\n\nWhen this method is used to load a video resouce, users can determine\nwhen the video is loaded by calling isLoaded().\n\n\n**Parameters:**\n\nname The name of the video resource to load.\n\n**See also**: isLoaded()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void nextFrame()\n\n<!--\n_syntax: nextFrame()_\n_name: nextFrame_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdvance the playhead forward one frame.\n\nThis allows the user to advance through the video manually one frame at\na time without calling play().\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void play()\n\n<!--\n_syntax: play()_\n_name: play_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPlay the video from the current playhead position.\n\n**See also**: getPosition()\n\n**See also**: setPostion()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void previousFrame()\n\n<!--\n_syntax: previousFrame()_\n_name: previousFrame_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdvance the playhead backward one frame.\n\nThis allows the user to advance backward through the video manually one\nframe at a time without calling play().\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFrame(frame)\n\n<!--\n_syntax: setFrame(frame)_\n_name: setFrame_\n_returns: void_\n_returns_description: _\n_parameters: int frame_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the current frame by frame number.\n\nSimilar to setPosition(), but accepts a frame number instead of\na normalized floating point value. Frame count begins with the first\nframe as 0 and the last frame as getTotalNumFrames() - 1.\n\n\n**Parameters:**\n\nframe The frame number to set the new playhead to.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setLoopState(state)\n\n<!--\n_syntax: setLoopState(state)_\n_name: setLoopState_\n_returns: void_\n_returns_description: _\n_parameters: ofLoopType state_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the video loop state.\n\n**Parameters:**\n\nstate The loop state of the video.\n\n**See also**: ::ofLoopType\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPaused(bPause)\n\n<!--\n_syntax: setPaused(bPause)_\n_name: setPaused_\n_returns: void_\n_returns_description: _\n_parameters: bool bPause_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the paused state of the video.\n\n**Parameters:**\n\nbPause True to pause the video, false to play.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPosition(pct)\n\n<!--\n_syntax: setPosition(pct)_\n_name: setPosition_\n_returns: void_\n_returns_description: _\n_parameters: float pct_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the position of the playhead.\n\nThis value is a normalized floating point value between 0.0 and 1.0 that\nrepresents the position of the playhead. 0.0 maps to the first frame of\nthe loaded video and 1.0 maps to the last frame of the loaded video.\n\n\n**Parameters:**\n\npct A value between 0.0 and 1.0 representing playhead position.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setSpeed(speed)\n\n<!--\n_syntax: setSpeed(speed)_\n_name: setSpeed_\n_returns: void_\n_returns_description: _\n_parameters: float speed_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the video playback speed.\n\nWhen the loop state is OF_LOOP_NONE or OF_LOOP_NORMAL, positive speed\nwill scale a forward playback rate while a negative speed will scale a\na backward playback rate. When the loop state is OF_LOOP_PALINDROME,\nthe direction of playback will change each loop, but the playback rate\nwill still be scaled by the absolute value of the speed.\n\nTo play a video forward at normal speed, set the loop state to\nOF_LOOP_NONE or OF_LOOP_NORMAL and a speed of 1.0. To double the\nplayback rate, set the speed to 2.0. To play a video backward, set the\nspeed to a negative number. A speed 0.25 will play the video at 1/4 the\nthe normal rate and a rate of 0.0 will effectively stop playback.\n\n\n**Parameters:**\n\nspeed The desired playback speed of the video.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVolume(volume)\n\n<!--\n_syntax: setVolume(volume)_\n_name: setVolume_\n_returns: void_\n_returns_description: _\n_parameters: float volume_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the volume of the video player.\n\nThis value is a normalized floating point value between 0.0 and 1.0 that\nrepresents the video player volume. 0.0 maps to silence and 1.0 maps to\nmaximum volume.\n\n\n**Parameters:**\n\nvolume A value between 0.0 and 1.0 representing volume.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void stop()\n\n<!--\n_syntax: stop()_\n_name: stop_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPause and reset the playhead position to the first frame.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofBaseVideoPlayer()\n\n<!--\n_syntax: ~ofBaseVideoPlayer()_\n_name: ~ofBaseVideoPlayer_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDestroys the ofBaseVideoPlayer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n","type":"page","static":true}}],"fetch":[]}