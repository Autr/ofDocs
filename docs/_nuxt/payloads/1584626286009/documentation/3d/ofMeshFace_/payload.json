{"data":[{"page":{"entry":{"name":"ofMeshFace_","filename":"ofMeshFace_.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/3d/ofMeshFace_.markdown","path":"/documentation/3d/ofMeshFace_","route":"/documentation/3d/ofMeshFace_.markdown","dir":"../ofSite/documentation/3d","ext":"markdown","type":"page","id":1737,"parent":1717,"breadcrumbs":[1717,1718],"siblings":[],"translations":{}},"description":{"short":null,"full":"<p>An ofMeshFace is a face on one of the ofPrimitive instances. In the ofPrimitive a face consists of 3 points connected together, like in the following image:</p>\n<p>You can get a vector of ofMeshFace instances from any ofPrimitive like so:</p>\n<pre><code>\nvector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace</code></pre>\n"},"config":{"visible":"True","advanced":"False","istemplated":"True","extends":null},"methods":[{"syntax":"calculateFaceNormal()","name":"calculateFaceNormal","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getColor(index)","name":"getColor","returns":"const C &","returns_description":null,"parameters":"ofIndexType index","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getFaceNormal()","name":"getFaceNormal","returns":"const N &","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getNormal(index)","name":"getNormal","returns":"const N &","returns_description":null,"parameters":"ofIndexType index","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTexCoord(index)","name":"getTexCoord","returns":"const T &","returns_description":null,"parameters":"ofIndexType index","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getVertex(index)","name":"getVertex","returns":"const V &","returns_description":null,"parameters":"ofIndexType index","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"hasColors()","name":"hasColors","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"hasNormals()","name":"hasNormals","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"hasTexcoords()","name":"hasTexcoords","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofMeshFace_()","name":"ofMeshFace_","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setColor(index, &color)","name":"setColor","returns":"void","returns_description":null,"parameters":"ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> C <span class=\"token operator\">&amp;</span>color","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setHasColors(bColors)","name":"setHasColors","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bColors","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setHasNormals(bNormals)","name":"setHasNormals","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bNormals","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setHasTexcoords(bTexcoords)","name":"setHasTexcoords","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bTexcoords","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setNormal(index, &n)","name":"setNormal","returns":"void","returns_description":null,"parameters":"ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> N <span class=\"token operator\">&amp;</span>n","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setTexCoord(index, &tCoord)","name":"setTexCoord","returns":"void","returns_description":null,"parameters":"ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>tCoord","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setVertex(index, &v)","name":"setVertex","returns":"void","returns_description":null,"parameters":"ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> V <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"bFaceNormalDirty","type":"bool","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bHasColors","type":"bool","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bHasNormals","type":"bool","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bHasTexcoords","type":"bool","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"colors","type":"C [3]","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"faceNormal","type":"N","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"normals","type":"N [3]","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"texCoords","type":"T [3]","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"vertices","type":"V [3]","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofMeshFace_</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: True</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>An ofMeshFace_ is a face on one of the ofPrimitive instances.\nIn the ofPrimitive a face consists of 3 points connected together.</p>\n<p>You can get a vector of ofMeshFace_ instances from any ofPrimitive like so:</p>\n<pre><code>\nvector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace_<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> triangles <span class=\"token operator\">=</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUniqueFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>They're very handy for manipulating individual vertices or doing strange/fun\nthings with intersection and boundary testing, among many many other things.</p>\n<p>this is always a triangle</p>\n<p>##Description</p>\n<p>An ofMeshFace is a face on one of the ofPrimitive instances. In the ofPrimitive a face consists of 3 points connected together, like in the following image:</p>\n<p>You can get a vector of ofMeshFace instances from any ofPrimitive like so:</p>\n<pre><code>\nvector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> triangles <span class=\"token operator\">=</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUniqueFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>They're very handy for manipulating individual vertices or doing strange/fun things with intersection and boundary testing, among many many other things.</p>\n<p>##Methods</p>\n<p>###void calculateFaceNormal()</p>\n<p>&lt;!--\n<em>syntax: calculateFaceNormal()</em>\n<em>name: calculateFaceNormal</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const C &amp; getColor(index)</p>\n<p>&lt;!--\n<em>syntax: getColor(index)</em>\n<em>name: getColor</em>\n<em>returns: const C &amp;</em>\n_returns_description: _\n<em>parameters: ofIndexType index</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const N &amp; getFaceNormal()</p>\n<p>&lt;!--\n<em>syntax: getFaceNormal()</em>\n<em>name: getFaceNormal</em>\n<em>returns: const N &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const N &amp; getNormal(index)</p>\n<p>&lt;!--\n<em>syntax: getNormal(index)</em>\n<em>name: getNormal</em>\n<em>returns: const N &amp;</em>\n_returns_description: _\n<em>parameters: ofIndexType index</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const T &amp; getTexCoord(index)</p>\n<p>&lt;!--\n<em>syntax: getTexCoord(index)</em>\n<em>name: getTexCoord</em>\n<em>returns: const T &amp;</em>\n_returns_description: _\n<em>parameters: ofIndexType index</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const V &amp; getVertex(index)</p>\n<p>&lt;!--\n<em>syntax: getVertex(index)</em>\n<em>name: getVertex</em>\n<em>returns: const V &amp;</em>\n_returns_description: _\n<em>parameters: ofIndexType index</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool hasColors()</p>\n<p>&lt;!--\n<em>syntax: hasColors()</em>\n<em>name: hasColors</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool hasNormals()</p>\n<p>&lt;!--\n<em>syntax: hasNormals()</em>\n<em>name: hasNormals</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool hasTexcoords()</p>\n<p>&lt;!--\n<em>syntax: hasTexcoords()</em>\n<em>name: hasTexcoords</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofMeshFace_()</h3>\n<p>&lt;!--\n<em>syntax: ofMeshFace</em>()_\n<em>name: ofMeshFace</em>_\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(index, &amp;color)</p>\n<p>&lt;!--\n<em>syntax: setColor(index, &amp;color)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index, const C &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setHasColors(bColors)</p>\n<p>&lt;!--\n<em>syntax: setHasColors(bColors)</em>\n<em>name: setHasColors</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bColors</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setHasNormals(bNormals)</p>\n<p>&lt;!--\n<em>syntax: setHasNormals(bNormals)</em>\n<em>name: setHasNormals</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bNormals</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setHasTexcoords(bTexcoords)</p>\n<p>&lt;!--\n<em>syntax: setHasTexcoords(bTexcoords)</em>\n<em>name: setHasTexcoords</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bTexcoords</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setNormal(index, &amp;n)</p>\n<p>&lt;!--\n<em>syntax: setNormal(index, &amp;n)</em>\n<em>name: setNormal</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index, const N &amp;n</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setTexCoord(index, &amp;tCoord)</p>\n<p>&lt;!--\n<em>syntax: setTexCoord(index, &amp;tCoord)</em>\n<em>name: setTexCoord</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index, const T &amp;tCoord</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVertex(index, &amp;v)</p>\n<p>&lt;!--\n<em>syntax: setVertex(index, &amp;v)</em>\n<em>name: setVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index, const V &amp;v</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###bool bFaceNormalDirty</p>\n<p>&lt;!--\n<em>name: bFaceNormalDirty</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bHasColors</p>\n<p>&lt;!--\n<em>name: bHasColors</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bHasNormals</p>\n<p>&lt;!--\n<em>name: bHasNormals</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bHasTexcoords</p>\n<p>&lt;!--\n<em>name: bHasTexcoords</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###C [3] colors</p>\n<p>&lt;!--\n<em>name: colors</em>\n<em>type: C [3]</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###N faceNormal</p>\n<p>&lt;!--\n<em>name: faceNormal</em>\n<em>type: N</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###N [3] normals</p>\n<p>&lt;!--\n<em>name: normals</em>\n<em>type: N [3]</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###T [3] texCoords</p>\n<p>&lt;!--\n<em>name: texCoords</em>\n<em>type: T [3]</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###V [3] vertices</p>\n<p>&lt;!--\n<em>name: vertices</em>\n<em>type: V [3]</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofMeshFace_\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: True_\n_extends: _\n-->\n\n##InlineDescription\n\nAn ofMeshFace_ is a face on one of the ofPrimitive instances.\nIn the ofPrimitive a face consists of 3 points connected together.\n\nYou can get a vector of ofMeshFace_ instances from any ofPrimitive like so:\n\n~~~~{.cpp}\n\nvector<ofMeshFace_> triangles = box.getMesh().getUniqueFaces();\n\n~~~~\n\nThey're very handy for manipulating individual vertices or doing strange/fun\nthings with intersection and boundary testing, among many many other things.\n\nthis is always a triangle\n\n\n\n\n\n##Description\n\nAn ofMeshFace is a face on one of the ofPrimitive instances. In the ofPrimitive a face consists of 3 points connected together, like in the following image:\n\nYou can get a vector of ofMeshFace instances from any ofPrimitive like so:\n\n~~~~{.cpp}\n\nvector<ofMeshFace> triangles = box.getMesh().getUniqueFaces();\n\n~~~~\n\nThey're very handy for manipulating individual vertices or doing strange/fun things with intersection and boundary testing, among many many other things.\n\n\n\n\n\n##Methods\n\n\n\n###void calculateFaceNormal()\n\n<!--\n_syntax: calculateFaceNormal()_\n_name: calculateFaceNormal_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const C & getColor(index)\n\n<!--\n_syntax: getColor(index)_\n_name: getColor_\n_returns: const C &_\n_returns_description: _\n_parameters: ofIndexType index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const N & getFaceNormal()\n\n<!--\n_syntax: getFaceNormal()_\n_name: getFaceNormal_\n_returns: const N &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const N & getNormal(index)\n\n<!--\n_syntax: getNormal(index)_\n_name: getNormal_\n_returns: const N &_\n_returns_description: _\n_parameters: ofIndexType index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const T & getTexCoord(index)\n\n<!--\n_syntax: getTexCoord(index)_\n_name: getTexCoord_\n_returns: const T &_\n_returns_description: _\n_parameters: ofIndexType index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const V & getVertex(index)\n\n<!--\n_syntax: getVertex(index)_\n_name: getVertex_\n_returns: const V &_\n_returns_description: _\n_parameters: ofIndexType index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasColors()\n\n<!--\n_syntax: hasColors()_\n_name: hasColors_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasNormals()\n\n<!--\n_syntax: hasNormals()_\n_name: hasNormals_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasTexcoords()\n\n<!--\n_syntax: hasTexcoords()_\n_name: hasTexcoords_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofMeshFace_()\n\n<!--\n_syntax: ofMeshFace_()_\n_name: ofMeshFace__\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(index, &color)\n\n<!--\n_syntax: setColor(index, &color)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index, const C &color_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHasColors(bColors)\n\n<!--\n_syntax: setHasColors(bColors)_\n_name: setHasColors_\n_returns: void_\n_returns_description: _\n_parameters: bool bColors_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHasNormals(bNormals)\n\n<!--\n_syntax: setHasNormals(bNormals)_\n_name: setHasNormals_\n_returns: void_\n_returns_description: _\n_parameters: bool bNormals_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHasTexcoords(bTexcoords)\n\n<!--\n_syntax: setHasTexcoords(bTexcoords)_\n_name: setHasTexcoords_\n_returns: void_\n_returns_description: _\n_parameters: bool bTexcoords_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setNormal(index, &n)\n\n<!--\n_syntax: setNormal(index, &n)_\n_name: setNormal_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index, const N &n_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setTexCoord(index, &tCoord)\n\n<!--\n_syntax: setTexCoord(index, &tCoord)_\n_name: setTexCoord_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index, const T &tCoord_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVertex(index, &v)\n\n<!--\n_syntax: setVertex(index, &v)_\n_name: setVertex_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index, const V &v_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bFaceNormalDirty\n\n<!--\n_name: bFaceNormalDirty_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bHasColors\n\n<!--\n_name: bHasColors_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bHasNormals\n\n<!--\n_name: bHasNormals_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bHasTexcoords\n\n<!--\n_name: bHasTexcoords_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###C [3] colors\n\n<!--\n_name: colors_\n_type: C [3]_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###N faceNormal\n\n<!--\n_name: faceNormal_\n_type: N_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###N [3] normals\n\n<!--\n_name: normals_\n_type: N [3]_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T [3] texCoords\n\n<!--\n_name: texCoords_\n_type: T [3]_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###V [3] vertices\n\n<!--\n_name: vertices_\n_type: V [3]_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}