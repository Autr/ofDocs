{"data":[{"page":{"entry":{"name":"gtx_simd_vec4_functions","filename":"gtx_simd_vec4_functions.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/glm/gtx_simd_vec4_functions.markdown","path":"/documentation/glm/gtx_simd_vec4_functions","route":"/documentation/glm/gtx_simd_vec4_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":2065,"parent":1985,"breadcrumbs":[1985,1718],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"glm::abs(&x)","name":"glm::abs","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::ceil(&x)","name":"glm::ceil","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a value equal to the nearest integer\nthat is greater than or equal to x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::clamp(&x, &minVal, &maxVal)","name":"glm::clamp","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>minVal<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>maxVal","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns min(max(x, minVal), maxVal) for each component in x\nusing the floating-point values minVal and maxVal.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::clamp(&x, &minVal, &maxVal)","name":"glm::clamp","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>minVal<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>maxVal","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"glm::cross(&x, &y)","name":"glm::cross","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the cross product of x and y.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::distance(&p0, &p1)","name":"glm::distance","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>p1","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the distance betwwen p0 and p1, i.e., length(p0 - p1).</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::distance4(&p0, &p1)","name":"glm::distance4","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>p0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>p1","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the distance betwwen p0 and p1, i.e., length(p0 - p1).</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::dot4(&x, &y)","name":"glm::dot4","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the dot product of x and y, i.e., result = x * y.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::fastInversesqrt(&x)","name":"glm::fastInversesqrt","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the reciprocal of the positive square root of x.\nFaster than inversesqrt but less accurate.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::fastLength(&x)","name":"glm::fastLength","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the length of x, i.e., sqrt(x * x).\nLess accurate but much faster than simdLength.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::fastLength4(&x)","name":"glm::fastLength4","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the length of x, i.e., sqrt(x * x).\nLess accurate but much faster than simdLength4.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::fastNormalize(&x)","name":"glm::fastNormalize","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a vector in the same direction as x but with length of 1.\nLess accurate but much faster than simdNormalize.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::fastSqrt(&x)","name":"glm::fastSqrt","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the positive square root of x\nLess accurate but much faster than sqrt.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::floor(&x)","name":"glm::floor","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a value equal to the nearest integer that is less then or equal to x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::fma(&a, &b, &c)","name":"glm::fma","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>c","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Computes and returns a * b + c.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::fract(&x)","name":"glm::fract","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return x - floor(x).</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::inversesqrt(&x)","name":"glm::inversesqrt","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the reciprocal of the positive square root of x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::length(&x)","name":"glm::length","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the length of x, i.e., sqrt(x * x).</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::length4(&x)","name":"glm::length4","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the length of x, i.e., sqrt(x * x).</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::max(&x, &y)","name":"glm::max","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns y if x &lt; y; otherwise, it returns x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::max(&x, &y)","name":"glm::max","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"glm::min(&x, &y)","name":"glm::min","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns y if y &lt; x; otherwise, it returns x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::min(&x, &y)","name":"glm::min","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"glm::mix(&x, &y, &a)","name":"glm::mix","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>a","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return If genTypeU is a floating scalar or vector:\nReturns x * (1.0 - a) + y * a, i.e., the linear blend of\nx and y using the floating-point value a.\nThe value for a is not restricted to the range [0, 1].</p>\n<p>\\return If genTypeU is a boolean scalar or vector:\nSelects which vector each returned component comes\nfrom. For a component of a that is false, the\ncorresponding component of x is returned. For a\ncomponent of a that is true, the corresponding\ncomponent of y is returned. Components of x and y that\nare not selected are allowed to be invalid floating point\nvalues and will have no effect on the results. Thus, this\nprovides different functionality than\ngenType mix(genType x, genType y, genType(a))\nwhere a is a Boolean vector.</p>\n<p>From GLSL 1.30.08 specification, section 8.3</p>\n<p>\\param[in]  x Floating point scalar or vector.\n\\param[in]  y Floating point scalar or vector.\n\\param[in]  a Floating point or boolean scalar or vector.</p>\n<p>\\todo Test when 'a' is a boolean.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::mod(&x, &y)","name":"glm::mod","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Modulus. Returns x - y * floor(x / y)\nfor each component in x using the floating point value y.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::mod(&x, &y)","name":"glm::mod","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Modulus. Returns x - y * floor(x / y)\nfor each component in x using the floating point value y.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::niceLength(&x)","name":"glm::niceLength","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the length of x, i.e., sqrt(x * x).\nSlightly more accurate but much slower than simdLength.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::niceLength4(&x)","name":"glm::niceLength4","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the length of x, i.e., sqrt(x * x).\nSlightly more accurate but much slower than simdLength4.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::niceSqrt(&x)","name":"glm::niceSqrt","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the positive square root of x with the nicest quality but very slow.\nSlightly more accurate but much slower than simdSqrt.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::normalize(&x)","name":"glm::normalize","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a vector in the same direction as x but with length of 1.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::reflect(&I, &N)","name":"glm::reflect","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>I<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>N","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>For the incident vector I and surface orientation N,\nreturns the reflection direction : result = I - 2.0 * dot(N, I) * N.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::refract(&I, &N, &eta)","name":"glm::refract","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>I<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>eta","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>For the incident vector I and surface normal N,\nand the ratio of indices of refraction eta,\nreturn the refraction vector.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::round(&x)","name":"glm::round","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a value equal to the nearest integer to x.\nThe fraction 0.5 will round in a direction chosen by the\nimplementation, presumably the direction that is fastest.\nThis includes the possibility that round(x) returns the\nsame value as roundEven(x) for all values of x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::sign(&x)","name":"glm::sign","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::simdDot(&x, &y)","name":"glm::simdDot","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the dot product of x and y, i.e., result = x * y.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::simdFaceforward(&N, &I, &Nref)","name":"glm::simdFaceforward","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>N<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>I<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>Nref","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>If dot(Nref, I) &lt; 0.0, return N, otherwise, return -N.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::smoothstep(&edge0, &edge1, &x)","name":"glm::smoothstep","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>edge0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>edge1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"glm::smoothstep(&edge0, &edge1, &x)","name":"glm::smoothstep","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>edge0<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>edge1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"glm::sqrt(&x)","name":"glm::sqrt","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the positive square root of x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::step(&edge, &x)","name":"glm::step","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>edge<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns 0.0 if x &lt; edge, otherwise it returns 1.0.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::step(&edge, &x)","name":"glm::step","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>edge<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"glm::trunc(&x)","name":"glm::trunc","returns":"detail::fvec4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a value equal to the nearest integer to x\nwhose absolute value is not larger than the absolute value of x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{"syntax":"glm::vec4_cast(&x)","name":"glm::vec4_cast","returns":"glm::vec4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fvec4SIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a simdVec4 to a vec4.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::abs(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::abs(&amp;x)</em>\n<em>name: glm::abs</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns x if x &gt;= 0; otherwise, it returns -x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::ceil(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::ceil(&amp;x)</em>\n<em>name: glm::ceil</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a value equal to the nearest integer\nthat is greater than or equal to x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::clamp(&amp;x, &amp;minVal, &amp;maxVal)</p>\n<p>&lt;!--\n<em>syntax: glm::clamp(&amp;x, &amp;minVal, &amp;maxVal)</em>\n<em>name: glm::clamp</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const detail::fvec4SIMD &amp;minVal, const detail::fvec4SIMD &amp;maxVal</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns min(max(x, minVal), maxVal) for each component in x\nusing the floating-point values minVal and maxVal.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::clamp(&amp;x, &amp;minVal, &amp;maxVal)</p>\n<p>&lt;!--\n<em>syntax: glm::clamp(&amp;x, &amp;minVal, &amp;maxVal)</em>\n<em>name: glm::clamp</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const float &amp;minVal, const float &amp;maxVal</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::cross(&amp;x, &amp;y)</p>\n<p>&lt;!--\n<em>syntax: glm::cross(&amp;x, &amp;y)</em>\n<em>name: glm::cross</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const detail::fvec4SIMD &amp;y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the cross product of x and y.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::distance(&amp;p0, &amp;p1)</p>\n<p>&lt;!--\n<em>syntax: glm::distance(&amp;p0, &amp;p1)</em>\n<em>name: glm::distance</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;p0, const detail::fvec4SIMD &amp;p1</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the distance betwwen p0 and p1, i.e., length(p0 - p1).</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::distance4(&amp;p0, &amp;p1)</p>\n<p>&lt;!--\n<em>syntax: glm::distance4(&amp;p0, &amp;p1)</em>\n<em>name: glm::distance4</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;p0, const detail::fvec4SIMD &amp;p1</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the distance betwwen p0 and p1, i.e., length(p0 - p1).</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::dot4(&amp;x, &amp;y)</p>\n<p>&lt;!--\n<em>syntax: glm::dot4(&amp;x, &amp;y)</em>\n<em>name: glm::dot4</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const detail::fvec4SIMD &amp;y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the dot product of x and y, i.e., result = x * y.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::fastInversesqrt(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::fastInversesqrt(&amp;x)</em>\n<em>name: glm::fastInversesqrt</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the reciprocal of the positive square root of x.\nFaster than inversesqrt but less accurate.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::fastLength(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::fastLength(&amp;x)</em>\n<em>name: glm::fastLength</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the length of x, i.e., sqrt(x * x).\nLess accurate but much faster than simdLength.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::fastLength4(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::fastLength4(&amp;x)</em>\n<em>name: glm::fastLength4</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the length of x, i.e., sqrt(x * x).\nLess accurate but much faster than simdLength4.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::fastNormalize(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::fastNormalize(&amp;x)</em>\n<em>name: glm::fastNormalize</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a vector in the same direction as x but with length of 1.\nLess accurate but much faster than simdNormalize.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::fastSqrt(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::fastSqrt(&amp;x)</em>\n<em>name: glm::fastSqrt</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the positive square root of x\nLess accurate but much faster than sqrt.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::floor(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::floor(&amp;x)</em>\n<em>name: glm::floor</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a value equal to the nearest integer that is less then or equal to x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::fma(&amp;a, &amp;b, &amp;c)</p>\n<p>&lt;!--\n<em>syntax: glm::fma(&amp;a, &amp;b, &amp;c)</em>\n<em>name: glm::fma</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;a, const detail::fvec4SIMD &amp;b, const detail::fvec4SIMD &amp;c</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Computes and returns a * b + c.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::fract(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::fract(&amp;x)</em>\n<em>name: glm::fract</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return x - floor(x).</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::inversesqrt(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::inversesqrt(&amp;x)</em>\n<em>name: glm::inversesqrt</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the reciprocal of the positive square root of x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::length(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::length(&amp;x)</em>\n<em>name: glm::length</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the length of x, i.e., sqrt(x * x).</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::length4(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::length4(&amp;x)</em>\n<em>name: glm::length4</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the length of x, i.e., sqrt(x * x).</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::max(&amp;x, &amp;y)</p>\n<p>&lt;!--\n<em>syntax: glm::max(&amp;x, &amp;y)</em>\n<em>name: glm::max</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const detail::fvec4SIMD &amp;y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns y if x &lt; y; otherwise, it returns x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::max(&amp;x, &amp;y)</p>\n<p>&lt;!--\n<em>syntax: glm::max(&amp;x, &amp;y)</em>\n<em>name: glm::max</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const float &amp;y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::min(&amp;x, &amp;y)</p>\n<p>&lt;!--\n<em>syntax: glm::min(&amp;x, &amp;y)</em>\n<em>name: glm::min</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const detail::fvec4SIMD &amp;y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns y if y &lt; x; otherwise, it returns x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::min(&amp;x, &amp;y)</p>\n<p>&lt;!--\n<em>syntax: glm::min(&amp;x, &amp;y)</em>\n<em>name: glm::min</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const float &amp;y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::mix(&amp;x, &amp;y, &amp;a)</p>\n<p>&lt;!--\n<em>syntax: glm::mix(&amp;x, &amp;y, &amp;a)</em>\n<em>name: glm::mix</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const detail::fvec4SIMD &amp;y, const detail::fvec4SIMD &amp;a</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return If genTypeU is a floating scalar or vector:\nReturns x * (1.0 - a) + y * a, i.e., the linear blend of\nx and y using the floating-point value a.\nThe value for a is not restricted to the range [0, 1].</p>\n<p>\\return If genTypeU is a boolean scalar or vector:\nSelects which vector each returned component comes\nfrom. For a component of a that is false, the\ncorresponding component of x is returned. For a\ncomponent of a that is true, the corresponding\ncomponent of y is returned. Components of x and y that\nare not selected are allowed to be invalid floating point\nvalues and will have no effect on the results. Thus, this\nprovides different functionality than\ngenType mix(genType x, genType y, genType(a))\nwhere a is a Boolean vector.</p>\n<p>From GLSL 1.30.08 specification, section 8.3</p>\n<p>\\param[in]  x Floating point scalar or vector.\n\\param[in]  y Floating point scalar or vector.\n\\param[in]  a Floating point or boolean scalar or vector.</p>\n<p>\\todo Test when 'a' is a boolean.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::mod(&amp;x, &amp;y)</p>\n<p>&lt;!--\n<em>syntax: glm::mod(&amp;x, &amp;y)</em>\n<em>name: glm::mod</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const detail::fvec4SIMD &amp;y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Modulus. Returns x - y * floor(x / y)\nfor each component in x using the floating point value y.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::mod(&amp;x, &amp;y)</p>\n<p>&lt;!--\n<em>syntax: glm::mod(&amp;x, &amp;y)</em>\n<em>name: glm::mod</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const float &amp;y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Modulus. Returns x - y * floor(x / y)\nfor each component in x using the floating point value y.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::niceLength(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::niceLength(&amp;x)</em>\n<em>name: glm::niceLength</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the length of x, i.e., sqrt(x * x).\nSlightly more accurate but much slower than simdLength.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::niceLength4(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::niceLength4(&amp;x)</em>\n<em>name: glm::niceLength4</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the length of x, i.e., sqrt(x * x).\nSlightly more accurate but much slower than simdLength4.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::niceSqrt(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::niceSqrt(&amp;x)</em>\n<em>name: glm::niceSqrt</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the positive square root of x with the nicest quality but very slow.\nSlightly more accurate but much slower than simdSqrt.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::normalize(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::normalize(&amp;x)</em>\n<em>name: glm::normalize</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a vector in the same direction as x but with length of 1.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::reflect(&amp;I, &amp;N)</p>\n<p>&lt;!--\n<em>syntax: glm::reflect(&amp;I, &amp;N)</em>\n<em>name: glm::reflect</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;I, const detail::fvec4SIMD &amp;N</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>For the incident vector I and surface orientation N,\nreturns the reflection direction : result = I - 2.0 * dot(N, I) * N.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::refract(&amp;I, &amp;N, &amp;eta)</p>\n<p>&lt;!--\n<em>syntax: glm::refract(&amp;I, &amp;N, &amp;eta)</em>\n<em>name: glm::refract</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;I, const detail::fvec4SIMD &amp;N, const float &amp;eta</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>For the incident vector I and surface normal N,\nand the ratio of indices of refraction eta,\nreturn the refraction vector.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::round(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::round(&amp;x)</em>\n<em>name: glm::round</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a value equal to the nearest integer to x.\nThe fraction 0.5 will round in a direction chosen by the\nimplementation, presumably the direction that is fastest.\nThis includes the possibility that round(x) returns the\nsame value as roundEven(x) for all values of x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::sign(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::sign(&amp;x)</em>\n<em>name: glm::sign</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns 1.0 if x &gt; 0, 0.0 if x = 0, or -1.0 if x &lt; 0.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::simdDot(&amp;x, &amp;y)</p>\n<p>&lt;!--\n<em>syntax: glm::simdDot(&amp;x, &amp;y)</em>\n<em>name: glm::simdDot</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x, const detail::fvec4SIMD &amp;y</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the dot product of x and y, i.e., result = x * y.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::simdFaceforward(&amp;N, &amp;I, &amp;Nref)</p>\n<p>&lt;!--\n<em>syntax: glm::simdFaceforward(&amp;N, &amp;I, &amp;Nref)</em>\n<em>name: glm::simdFaceforward</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;N, const detail::fvec4SIMD &amp;I, const detail::fvec4SIMD &amp;Nref</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>If dot(Nref, I) &lt; 0.0, return N, otherwise, return -N.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::smoothstep(&amp;edge0, &amp;edge1, &amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::smoothstep(&amp;edge0, &amp;edge1, &amp;x)</em>\n<em>name: glm::smoothstep</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;edge0, const detail::fvec4SIMD &amp;edge1, const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns 0.0 if x &lt;= edge0 and 1.0 if x &gt;= edge1 and\nperforms smooth Hermite interpolation between 0 and 1\nwhen edge0 &lt; x &lt; edge1. This is useful in cases where\nyou would want a threshold function with a smooth\ntransition. This is equivalent to:\ngenType t;\nt = clamp ((x - edge0) / (edge1 - edge0), 0, 1);\nreturn t * t * (3 - 2 * t);\nResults are undefined if edge0 &gt;= edge1.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::smoothstep(&amp;edge0, &amp;edge1, &amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::smoothstep(&amp;edge0, &amp;edge1, &amp;x)</em>\n<em>name: glm::smoothstep</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const float &amp;edge0, const float &amp;edge1, const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::sqrt(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::sqrt(&amp;x)</em>\n<em>name: glm::sqrt</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the positive square root of x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::step(&amp;edge, &amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::step(&amp;edge, &amp;x)</em>\n<em>name: glm::step</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;edge, const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns 0.0 if x &lt; edge, otherwise it returns 1.0.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::step(&amp;edge, &amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::step(&amp;edge, &amp;x)</em>\n<em>name: glm::step</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const float &amp;edge, const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fvec4SIMD glm::trunc(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::trunc(&amp;x)</em>\n<em>name: glm::trunc</em>\n<em>returns: detail::fvec4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a value equal to the nearest integer to x\nwhose absolute value is not larger than the absolute value of x.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec4 glm::vec4_cast(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::vec4_cast(&amp;x)</em>\n<em>name: glm::vec4_cast</em>\n<em>returns: glm::vec4</em>\n_returns_description: _\n<em>parameters: const detail::fvec4SIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert a simdVec4 to a vec4.</p>\n<p><strong>See also</strong>: gtx_simd_vec4</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::abs(&x)\n\n<!--\n_syntax: glm::abs(&x)_\n_name: glm::abs_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns x if x >= 0; otherwise, it returns -x.\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::ceil(&x)\n\n<!--\n_syntax: glm::ceil(&x)_\n_name: glm::ceil_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns a value equal to the nearest integer\n that is greater than or equal to x.\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::clamp(&x, &minVal, &maxVal)\n\n<!--\n_syntax: glm::clamp(&x, &minVal, &maxVal)_\n_name: glm::clamp_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const detail::fvec4SIMD &minVal, const detail::fvec4SIMD &maxVal_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns min(max(x, minVal), maxVal) for each component in x\n using the floating-point values minVal and maxVal.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::clamp(&x, &minVal, &maxVal)\n\n<!--\n_syntax: glm::clamp(&x, &minVal, &maxVal)_\n_name: glm::clamp_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const float &minVal, const float &maxVal_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::cross(&x, &y)\n\n<!--\n_syntax: glm::cross(&x, &y)_\n_name: glm::cross_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const detail::fvec4SIMD &y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the cross product of x and y.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::distance(&p0, &p1)\n\n<!--\n_syntax: glm::distance(&p0, &p1)_\n_name: glm::distance_\n_returns: float_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &p0, const detail::fvec4SIMD &p1_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the distance betwwen p0 and p1, i.e., length(p0 - p1).\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::distance4(&p0, &p1)\n\n<!--\n_syntax: glm::distance4(&p0, &p1)_\n_name: glm::distance4_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &p0, const detail::fvec4SIMD &p1_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the distance betwwen p0 and p1, i.e., length(p0 - p1).\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::dot4(&x, &y)\n\n<!--\n_syntax: glm::dot4(&x, &y)_\n_name: glm::dot4_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const detail::fvec4SIMD &y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the dot product of x and y, i.e., result = x * y.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::fastInversesqrt(&x)\n\n<!--\n_syntax: glm::fastInversesqrt(&x)_\n_name: glm::fastInversesqrt_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the reciprocal of the positive square root of x.\n Faster than inversesqrt but less accurate.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::fastLength(&x)\n\n<!--\n_syntax: glm::fastLength(&x)_\n_name: glm::fastLength_\n_returns: float_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the length of x, i.e., sqrt(x * x).\n Less accurate but much faster than simdLength.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::fastLength4(&x)\n\n<!--\n_syntax: glm::fastLength4(&x)_\n_name: glm::fastLength4_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the length of x, i.e., sqrt(x * x).\n Less accurate but much faster than simdLength4.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::fastNormalize(&x)\n\n<!--\n_syntax: glm::fastNormalize(&x)_\n_name: glm::fastNormalize_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns a vector in the same direction as x but with length of 1.\n Less accurate but much faster than simdNormalize.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::fastSqrt(&x)\n\n<!--\n_syntax: glm::fastSqrt(&x)_\n_name: glm::fastSqrt_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the positive square root of x\n Less accurate but much faster than sqrt.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::floor(&x)\n\n<!--\n_syntax: glm::floor(&x)_\n_name: glm::floor_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns a value equal to the nearest integer that is less then or equal to x.\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::fma(&a, &b, &c)\n\n<!--\n_syntax: glm::fma(&a, &b, &c)_\n_name: glm::fma_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &a, const detail::fvec4SIMD &b, const detail::fvec4SIMD &c_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Computes and returns a * b + c.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::fract(&x)\n\n<!--\n_syntax: glm::fract(&x)_\n_name: glm::fract_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Return x - floor(x).\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::inversesqrt(&x)\n\n<!--\n_syntax: glm::inversesqrt(&x)_\n_name: glm::inversesqrt_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the reciprocal of the positive square root of x.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::length(&x)\n\n<!--\n_syntax: glm::length(&x)_\n_name: glm::length_\n_returns: float_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the length of x, i.e., sqrt(x * x).\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::length4(&x)\n\n<!--\n_syntax: glm::length4(&x)_\n_name: glm::length4_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the length of x, i.e., sqrt(x * x).\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::max(&x, &y)\n\n<!--\n_syntax: glm::max(&x, &y)_\n_name: glm::max_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const detail::fvec4SIMD &y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns y if x < y; otherwise, it returns x.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::max(&x, &y)\n\n<!--\n_syntax: glm::max(&x, &y)_\n_name: glm::max_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const float &y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::min(&x, &y)\n\n<!--\n_syntax: glm::min(&x, &y)_\n_name: glm::min_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const detail::fvec4SIMD &y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns y if y < x; otherwise, it returns x.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::min(&x, &y)\n\n<!--\n_syntax: glm::min(&x, &y)_\n_name: glm::min_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const float &y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::mix(&x, &y, &a)\n\n<!--\n_syntax: glm::mix(&x, &y, &a)_\n_name: glm::mix_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const detail::fvec4SIMD &y, const detail::fvec4SIMD &a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n \\return If genTypeU is a floating scalar or vector:\n Returns x * (1.0 - a) + y * a, i.e., the linear blend of\n x and y using the floating-point value a.\n The value for a is not restricted to the range [0, 1].\n\n \\return If genTypeU is a boolean scalar or vector:\n Selects which vector each returned component comes\n from. For a component of a that is false, the\n corresponding component of x is returned. For a\n component of a that is true, the corresponding\n component of y is returned. Components of x and y that\n are not selected are allowed to be invalid floating point\n values and will have no effect on the results. Thus, this\n provides different functionality than\n genType mix(genType x, genType y, genType(a))\n where a is a Boolean vector.\n\n From GLSL 1.30.08 specification, section 8.3\n\n \\param[in]  x Floating point scalar or vector.\n \\param[in]  y Floating point scalar or vector.\n \\param[in]  a Floating point or boolean scalar or vector.\n\n\\todo Test when 'a' is a boolean.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::mod(&x, &y)\n\n<!--\n_syntax: glm::mod(&x, &y)_\n_name: glm::mod_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const detail::fvec4SIMD &y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Modulus. Returns x - y * floor(x / y)\n for each component in x using the floating point value y.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::mod(&x, &y)\n\n<!--\n_syntax: glm::mod(&x, &y)_\n_name: glm::mod_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const float &y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Modulus. Returns x - y * floor(x / y)\n for each component in x using the floating point value y.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::niceLength(&x)\n\n<!--\n_syntax: glm::niceLength(&x)_\n_name: glm::niceLength_\n_returns: float_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the length of x, i.e., sqrt(x * x).\n Slightly more accurate but much slower than simdLength.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::niceLength4(&x)\n\n<!--\n_syntax: glm::niceLength4(&x)_\n_name: glm::niceLength4_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the length of x, i.e., sqrt(x * x).\n Slightly more accurate but much slower than simdLength4.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::niceSqrt(&x)\n\n<!--\n_syntax: glm::niceSqrt(&x)_\n_name: glm::niceSqrt_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the positive square root of x with the nicest quality but very slow.\n Slightly more accurate but much slower than simdSqrt.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::normalize(&x)\n\n<!--\n_syntax: glm::normalize(&x)_\n_name: glm::normalize_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns a vector in the same direction as x but with length of 1.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::reflect(&I, &N)\n\n<!--\n_syntax: glm::reflect(&I, &N)_\n_name: glm::reflect_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &I, const detail::fvec4SIMD &N_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n For the incident vector I and surface orientation N,\n returns the reflection direction : result = I - 2.0 * dot(N, I) * N.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::refract(&I, &N, &eta)\n\n<!--\n_syntax: glm::refract(&I, &N, &eta)_\n_name: glm::refract_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &I, const detail::fvec4SIMD &N, const float &eta_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n For the incident vector I and surface normal N,\n and the ratio of indices of refraction eta,\n return the refraction vector.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::round(&x)\n\n<!--\n_syntax: glm::round(&x)_\n_name: glm::round_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns a value equal to the nearest integer to x.\n The fraction 0.5 will round in a direction chosen by the\n implementation, presumably the direction that is fastest.\n This includes the possibility that round(x) returns the\n same value as roundEven(x) for all values of x.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::sign(&x)\n\n<!--\n_syntax: glm::sign(&x)_\n_name: glm::sign_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns 1.0 if x > 0, 0.0 if x = 0, or -1.0 if x < 0.\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::simdDot(&x, &y)\n\n<!--\n_syntax: glm::simdDot(&x, &y)_\n_name: glm::simdDot_\n_returns: float_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x, const detail::fvec4SIMD &y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the dot product of x and y, i.e., result = x * y.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::simdFaceforward(&N, &I, &Nref)\n\n<!--\n_syntax: glm::simdFaceforward(&N, &I, &Nref)_\n_name: glm::simdFaceforward_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &N, const detail::fvec4SIMD &I, const detail::fvec4SIMD &Nref_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n If dot(Nref, I) < 0.0, return N, otherwise, return -N.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::smoothstep(&edge0, &edge1, &x)\n\n<!--\n_syntax: glm::smoothstep(&edge0, &edge1, &x)_\n_name: glm::smoothstep_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &edge0, const detail::fvec4SIMD &edge1, const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns 0.0 if x <= edge0 and 1.0 if x >= edge1 and\n performs smooth Hermite interpolation between 0 and 1\n when edge0 < x < edge1. This is useful in cases where\n you would want a threshold function with a smooth\n transition. This is equivalent to:\n genType t;\n t = clamp ((x - edge0) / (edge1 - edge0), 0, 1);\n return t * t * (3 - 2 * t);\n Results are undefined if edge0 >= edge1.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::smoothstep(&edge0, &edge1, &x)\n\n<!--\n_syntax: glm::smoothstep(&edge0, &edge1, &x)_\n_name: glm::smoothstep_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const float &edge0, const float &edge1, const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::sqrt(&x)\n\n<!--\n_syntax: glm::sqrt(&x)_\n_name: glm::sqrt_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns the positive square root of x.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::step(&edge, &x)\n\n<!--\n_syntax: glm::step(&edge, &x)_\n_name: glm::step_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &edge, const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns 0.0 if x < edge, otherwise it returns 1.0.\n\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::step(&edge, &x)\n\n<!--\n_syntax: glm::step(&edge, &x)_\n_name: glm::step_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const float &edge, const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fvec4SIMD glm::trunc(&x)\n\n<!--\n_syntax: glm::trunc(&x)_\n_name: glm::trunc_\n_returns: detail::fvec4SIMD_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Returns a value equal to the nearest integer to x\n whose absolute value is not larger than the absolute value of x.\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec4 glm::vec4_cast(&x)\n\n<!--\n_syntax: glm::vec4_cast(&x)_\n_name: glm::vec4_cast_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: const detail::fvec4SIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Convert a simdVec4 to a vec4.\n\n**See also**: gtx_simd_vec4\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}