{"data":[{"page":{"entry":{"name":"ofVec4f","filename":"ofVec4f.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/math/ofVec4f.markdown","path":"/documentation/math/ofVec4f","route":"/documentation/math/ofVec4f.markdown","dir":"../ofSite/documentation/math","ext":"markdown","type":"page","id":2135,"parent":2123,"breadcrumbs":[2123,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"average(*points, num)","name":"average","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">*</span>points<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets this vector to be the average (center of gravity or centroid) of a given array of 'ofVec4f's.</p>\n<p><strong>Parameters:</strong></p>\n<p>points The array of 'ofVec4f's used in the average calculation.</p>\n<p>num The number of ofVec4f objects in the array.</p>\n","desc":""},{"syntax":"distance(&pnt)","name":"distance","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Treats this vector and 'pnt' as points in 4D space and calculates the distance between them.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector used in the distance calculation with the current vector.</p>\n<p><strong>Returns</strong>: The distance between the two vectors in 4D space.</p>\n","desc":""},{"syntax":"dot(&vec)","name":"dot","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculates and returns the dot product of this vector with 'vec'.</p>\n<p>Dot product (less commonly known as Euclidean inner product) expresses the angular\nrelationship between two vectors. In other words it is a measure of how parallel two vectors\nare. If they are completely perpendicular the dot product is 0; if they are completely parallel\ntheir dot product is either 1 if they are pointing in the same direction, or -1 if they are pointing\nin opposite directions.</p>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector used in the dot product calculation with this vector.</p>\n<p><strong>Returns</strong>: The dot product of this vector with 'vec'.</p>\n","desc":""},{"syntax":"getInterpolated(&pnt, p)","name":"getInterpolated","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Performs a linear interpolation of this vector towards 'pnt'.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector the interpolation will be performed on.</p>\n<p>p The amount to move towards 'pnt'; 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.</p>\n<p><strong>Returns</strong>: The interpolation as an ofVec4f.</p>\n","desc":""},{"syntax":"getLimited(max)","name":"getLimited","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> max","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a copy of this vector with its length (magnitude) restricted to a maximum of 'max' units by scaling down if necessary.</p>\n<p><strong>Parameters:</strong></p>\n<p>max The maximum length of the new vector.</p>\n<p><strong>Returns</strong>: A copy of the current vector that is at most 'max' units long.</p>\n","desc":""},{"syntax":"getMiddle(&pnt)","name":"getMiddle","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculates and returns the midpoint (as a vector) between this vector and 'pnt'.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector used in the midpoint calculation with this vector.</p>\n<p><strong>Returns</strong>: The midpoint between this vector and 'pnt' as an ofVec4f.</p>\n","desc":""},{"syntax":"getNormalized()","name":"getNormalized","returns":"ofVec4f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a normalized copy of this vector.</p>\n<p>Normalization means to scale the vector so that its length (magnitude) is exactly 1,\nat which stage all that is left is the direction. A normalized vector is usually called\na unit vector, and can be used to represent a pure direction (heading).</p>\n<p><strong>Returns</strong>: The normalized copy of the current vector.</p>\n","desc":""},{"syntax":"getPtr()","name":"getPtr","returns":"float *","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Access components\n{</p>\n","desc":""},{"syntax":"getPtr()","name":"getPtr","returns":"const float *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getScaled(length)","name":"getScaled","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new ofVec4f that is the result of scaling this vector up or down so that it has the requested length.</p>\n<p><strong>Parameters:</strong></p>\n<p>length The desired length of the new ofVec4f object.</p>\n<p><strong>Returns</strong>: The result of scaling the this vector up or down.</p>\n","desc":""},{"syntax":"interpolate(&pnt, p)","name":"interpolate","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Performs a linear interpolation of this vector towards 'pnt'. This modifies the current vector to the interpolated value.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector the interpolation will be performed on.</p>\n<p>p The amount to move towards 'pnt'; 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.</p>\n","desc":""},{"syntax":"length()","name":"length","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the length (magnitude) of this vector.</p>\n<p><strong>Returns</strong>: The magnitude of the current vector.</p>\n","desc":""},{"syntax":"lengthSquared()","name":"lengthSquared","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"limit(max)","name":"limit","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> max","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Restrict the length (magnitude) of this vector to a maximum of 'max' units by scaling down if necessary.</p>\n<p><strong>Parameters:</strong></p>\n<p>max The maximum length of the current vector.</p>\n","desc":""},{"syntax":"match(&vec, tolerance = 0.0001f)","name":"match","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.0001f</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"middle(&pnt)","name":"middle","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculates and returns the midpoint (as a vector) between this vector and 'pnt'. This modifies the current vector to the midpoint value.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector used in the midpoint calculation with this vector.</p>\n<p><strong>Returns</strong>: The midpoint between this vector and 'pnt' as an ofVec4f.</p>\n","desc":""},{"syntax":"normalize()","name":"normalize","returns":"ofVec4f &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Normalizes the vector. This changes the current vector to its normalized value.</p>\n<p>Normalization means to scale the vector so that its length (magnitude) is exactly 1,\nat which stage all that is left is the direction. A normalized vector is usually called\na unit vector, and can be used to represent a pure direction (heading).</p>\n","desc":""},{"syntax":"ofVec4f(&vec)","name":"ofVec4f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVec4f(&vec)","name":"ofVec4f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVec4f(&vec)","name":"ofVec4f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVec4f(&vec)","name":"ofVec4f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVec4f(&vec)","name":"ofVec4f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVec4f()","name":"ofVec4f","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Construct a 4D vector\n{</p>\n","desc":""},{"syntax":"ofVec4f(_scalar)","name":"ofVec4f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> _scalar","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVec4f(_x, _y, _z, _w)","name":"ofVec4f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _w","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"one()","name":"one","returns":"ofVec4f","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator!=(&vec)","name":"operator!=","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator*(&vec)","name":"operator*","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator*(f)","name":"operator*","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator*=(&vec)","name":"operator*=","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator*=(f)","name":"operator*=","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator+(&vec)","name":"operator+","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Operators\n{</p>\n","desc":""},{"syntax":"operator+(f)","name":"operator+","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator+=(&vec)","name":"operator+=","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator+=(f)","name":"operator+=","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator-(&vec)","name":"operator-","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator-()","name":"operator-","returns":"ofVec4f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator-(f)","name":"operator-","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator-=(&vec)","name":"operator-=","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator-=(f)","name":"operator-=","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator/(&vec)","name":"operator/","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator/(f)","name":"operator/","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator/=(&vec)","name":"operator/=","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator/=(f)","name":"operator/=","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator==(&vec)","name":"operator==","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Comparison\n{</p>\n","desc":""},{"syntax":"operator[](n)","name":"operator[]","returns":"float &","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> n","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator[](n)","name":"operator[]","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> n","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"scale(length)","name":"scale","returns":"ofVec4f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scales this vector up or down so that it has the requested length.</p>\n<p><strong>Parameters:</strong></p>\n<p>length The desired length of the vector.</p>\n","desc":""},{"syntax":"set(&vec)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(_scalar)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> _scalar","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(_x, _y, _z, _w)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _w","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"squareDistance(&pnt)","name":"squareDistance","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"zero()","name":"zero","returns":"ofVec4f","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"name":"DIM","type":"const int","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\cond INTERNAL</p>\n","desc":""},{"name":"w","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"x","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\endcond</p>\n","desc":""},{"name":"y","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"z","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofVec4f</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>##Methods</p>\n<p>###ofVec4f &amp; average(*points, num)</p>\n<p>&lt;!--\n<em>syntax: average(*points, num)</em>\n<em>name: average</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec4f *points, int num</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets this vector to be the average (center of gravity or centroid) of a given array of 'ofVec4f's.</p>\n<p><strong>Parameters:</strong></p>\n<p>points The array of 'ofVec4f's used in the average calculation.</p>\n<p>num The number of ofVec4f objects in the array.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float distance(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: distance(&amp;pnt)</em>\n<em>name: distance</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Treats this vector and 'pnt' as points in 4D space and calculates the distance between them.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector used in the distance calculation with the current vector.</p>\n<p><strong>Returns</strong>: The distance between the two vectors in 4D space.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float dot(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: dot(&amp;vec)</em>\n<em>name: dot</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculates and returns the dot product of this vector with 'vec'.</p>\n<p>Dot product (less commonly known as Euclidean inner product) expresses the angular\nrelationship between two vectors. In other words it is a measure of how parallel two vectors\nare. If they are completely perpendicular the dot product is 0; if they are completely parallel\ntheir dot product is either 1 if they are pointing in the same direction, or -1 if they are pointing\nin opposite directions.</p>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector used in the dot product calculation with this vector.</p>\n<p><strong>Returns</strong>: The dot product of this vector with 'vec'.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f getInterpolated(&amp;pnt, p)</p>\n<p>&lt;!--\n<em>syntax: getInterpolated(&amp;pnt, p)</em>\n<em>name: getInterpolated</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;pnt, float p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Performs a linear interpolation of this vector towards 'pnt'.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector the interpolation will be performed on.</p>\n<p>p The amount to move towards 'pnt'; 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.</p>\n<p><strong>Returns</strong>: The interpolation as an ofVec4f.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f getLimited(max)</p>\n<p>&lt;!--\n<em>syntax: getLimited(max)</em>\n<em>name: getLimited</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: float max</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a copy of this vector with its length (magnitude) restricted to a maximum of 'max' units by scaling down if necessary.</p>\n<p><strong>Parameters:</strong></p>\n<p>max The maximum length of the new vector.</p>\n<p><strong>Returns</strong>: A copy of the current vector that is at most 'max' units long.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f getMiddle(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: getMiddle(&amp;pnt)</em>\n<em>name: getMiddle</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculates and returns the midpoint (as a vector) between this vector and 'pnt'.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector used in the midpoint calculation with this vector.</p>\n<p><strong>Returns</strong>: The midpoint between this vector and 'pnt' as an ofVec4f.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f getNormalized()</p>\n<p>&lt;!--\n<em>syntax: getNormalized()</em>\n<em>name: getNormalized</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a normalized copy of this vector.</p>\n<p>Normalization means to scale the vector so that its length (magnitude) is exactly 1,\nat which stage all that is left is the direction. A normalized vector is usually called\na unit vector, and can be used to represent a pure direction (heading).</p>\n<p><strong>Returns</strong>: The normalized copy of the current vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float * getPtr()</p>\n<p>&lt;!--\n<em>syntax: getPtr()</em>\n<em>name: getPtr</em>\n<em>returns: float *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Access components\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const float * getPtr()</p>\n<p>&lt;!--\n<em>syntax: getPtr()</em>\n<em>name: getPtr</em>\n<em>returns: const float *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f getScaled(length)</p>\n<p>&lt;!--\n<em>syntax: getScaled(length)</em>\n<em>name: getScaled</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: const float length</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new ofVec4f that is the result of scaling this vector up or down so that it has the requested length.</p>\n<p><strong>Parameters:</strong></p>\n<p>length The desired length of the new ofVec4f object.</p>\n<p><strong>Returns</strong>: The result of scaling the this vector up or down.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; interpolate(&amp;pnt, p)</p>\n<p>&lt;!--\n<em>syntax: interpolate(&amp;pnt, p)</em>\n<em>name: interpolate</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;pnt, float p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Performs a linear interpolation of this vector towards 'pnt'. This modifies the current vector to the interpolated value.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector the interpolation will be performed on.</p>\n<p>p The amount to move towards 'pnt'; 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float length()</p>\n<p>&lt;!--\n<em>syntax: length()</em>\n<em>name: length</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the length (magnitude) of this vector.</p>\n<p><strong>Returns</strong>: The magnitude of the current vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float lengthSquared()</p>\n<p>&lt;!--\n<em>syntax: lengthSquared()</em>\n<em>name: lengthSquared</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; limit(max)</p>\n<p>&lt;!--\n<em>syntax: limit(max)</em>\n<em>name: limit</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: float max</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Restrict the length (magnitude) of this vector to a maximum of 'max' units by scaling down if necessary.</p>\n<p><strong>Parameters:</strong></p>\n<p>max The maximum length of the current vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool match(&amp;vec, tolerance = 0.0001f)</p>\n<p>&lt;!--\n<em>syntax: match(&amp;vec, tolerance = 0.0001f)</em>\n<em>name: match</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec, float tolerance=0.0001f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; middle(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: middle(&amp;pnt)</em>\n<em>name: middle</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculates and returns the midpoint (as a vector) between this vector and 'pnt'. This modifies the current vector to the midpoint value.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector used in the midpoint calculation with this vector.</p>\n<p><strong>Returns</strong>: The midpoint between this vector and 'pnt' as an ofVec4f.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; normalize()</p>\n<p>&lt;!--\n<em>syntax: normalize()</em>\n<em>name: normalize</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Normalizes the vector. This changes the current vector to its normalized value.</p>\n<p>Normalization means to scale the vector so that its length (magnitude) is exactly 1,\nat which stage all that is left is the direction. A normalized vector is usually called\na unit vector, and can be used to represent a pure direction (heading).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec4f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec4f(&amp;vec)</em>\n<em>name: ofVec4f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec4f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec4f(&amp;vec)</em>\n<em>name: ofVec4f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec4f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec4f(&amp;vec)</em>\n<em>name: ofVec4f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec4f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec4f(&amp;vec)</em>\n<em>name: ofVec4f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec4f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec4f(&amp;vec)</em>\n<em>name: ofVec4f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec4 &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec4f()</h3>\n<p>&lt;!--\n<em>syntax: ofVec4f()</em>\n<em>name: ofVec4f</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Construct a 4D vector\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec4f(_scalar)</h3>\n<p>&lt;!--\n_syntax: ofVec4f(<em>scalar)</em>\n<em>name: ofVec4f</em>\n_returns: _\n_returns_description: _\n_parameters: float <em>scalar</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec4f(_x, _y, _z, _w)</h3>\n<p>&lt;!--\n_syntax: ofVec4f(_x, _y, _z, <em>w)</em>\n<em>name: ofVec4f</em>\n_returns: _\n_returns_description: _\n_parameters: float _x, float _y, float _z, float <em>w</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f one()</p>\n<p>&lt;!--\n<em>syntax: one()</em>\n<em>name: one</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator!=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator!=(&amp;vec)</em>\n<em>name: operator!=</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f operator*(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator*(&amp;vec)</em>\n<em>name: operator*</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f operator*(f)</p>\n<p>&lt;!--\n<em>syntax: operator*(f)</em>\n<em>name: operator*</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; operator*=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator*=(&amp;vec)</em>\n<em>name: operator*=</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; operator*=(f)</p>\n<p>&lt;!--\n<em>syntax: operator*=(f)</em>\n<em>name: operator*=</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f operator+(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator+(&amp;vec)</em>\n<em>name: operator+</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Operators\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f operator+(f)</p>\n<p>&lt;!--\n<em>syntax: operator+(f)</em>\n<em>name: operator+</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; operator+=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator+=(&amp;vec)</em>\n<em>name: operator+=</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; operator+=(f)</p>\n<p>&lt;!--\n<em>syntax: operator+=(f)</em>\n<em>name: operator+=</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f operator-(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator-(&amp;vec)</em>\n<em>name: operator-</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f operator-()</p>\n<p>&lt;!--\n<em>syntax: operator-()</em>\n<em>name: operator-</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f operator-(f)</p>\n<p>&lt;!--\n<em>syntax: operator-(f)</em>\n<em>name: operator-</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; operator-=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator-=(&amp;vec)</em>\n<em>name: operator-=</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; operator-=(f)</p>\n<p>&lt;!--\n<em>syntax: operator-=(f)</em>\n<em>name: operator-=</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f operator/(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator/(&amp;vec)</em>\n<em>name: operator/</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f operator/(f)</p>\n<p>&lt;!--\n<em>syntax: operator/(f)</em>\n<em>name: operator/</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; operator/=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator/=(&amp;vec)</em>\n<em>name: operator/=</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; operator/=(f)</p>\n<p>&lt;!--\n<em>syntax: operator/=(f)</em>\n<em>name: operator/=</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator==(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator==(&amp;vec)</em>\n<em>name: operator==</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Comparison\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float &amp; operator<a href=\"n\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"n\"></a></em>\n<em>name: operator[]</em>\n<em>returns: float &amp;</em>\n_returns_description: _\n<em>parameters: int n</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float operator<a href=\"n\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"n\"></a></em>\n<em>name: operator[]</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: int n</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f &amp; scale(length)</p>\n<p>&lt;!--\n<em>syntax: scale(length)</em>\n<em>name: scale</em>\n<em>returns: ofVec4f &amp;</em>\n_returns_description: _\n<em>parameters: const float length</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scales this vector up or down so that it has the requested length.</p>\n<p><strong>Parameters:</strong></p>\n<p>length The desired length of the vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: set(&amp;vec)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(_scalar)</p>\n<p>&lt;!--\n_syntax: set(<em>scalar)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: float <em>scalar</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(_x, _y, _z, _w)</p>\n<p>&lt;!--\n_syntax: set(_x, _y, _z, <em>w)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: float _x, float _y, float _z, float <em>w</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float squareDistance(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: squareDistance(&amp;pnt)</em>\n<em>name: squareDistance</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec4f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec4f zero()</p>\n<p>&lt;!--\n<em>syntax: zero()</em>\n<em>name: zero</em>\n<em>returns: ofVec4f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###const int DIM</p>\n<p>&lt;!--\n<em>name: DIM</em>\n<em>type: const int</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\cond INTERNAL</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float w</p>\n<p>&lt;!--\n<em>name: w</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float x</p>\n<p>&lt;!--\n<em>name: x</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\endcond</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float y</p>\n<p>&lt;!--\n<em>name: y</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float z</p>\n<p>&lt;!--\n<em>name: z</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofVec4f\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n###ofVec4f & average(*points, num)\n\n<!--\n_syntax: average(*points, num)_\n_name: average_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const ofVec4f *points, int num_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets this vector to be the average (center of gravity or centroid) of a given array of 'ofVec4f's.\n\n\n**Parameters:**\n\npoints The array of 'ofVec4f's used in the average calculation.\n\nnum The number of ofVec4f objects in the array.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float distance(&pnt)\n\n<!--\n_syntax: distance(&pnt)_\n_name: distance_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec4f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTreats this vector and 'pnt' as points in 4D space and calculates the distance between them.\n\n\n**Parameters:**\n\npnt The vector used in the distance calculation with the current vector.\n\n**Returns**: The distance between the two vectors in 4D space.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float dot(&vec)\n\n<!--\n_syntax: dot(&vec)_\n_name: dot_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculates and returns the dot product of this vector with 'vec'.\n\nDot product (less commonly known as Euclidean inner product) expresses the angular\nrelationship between two vectors. In other words it is a measure of how parallel two vectors\nare. If they are completely perpendicular the dot product is 0; if they are completely parallel\ntheir dot product is either 1 if they are pointing in the same direction, or -1 if they are pointing\nin opposite directions.\n\n\n**Parameters:**\n\nvec The vector used in the dot product calculation with this vector.\n\n**Returns**: The dot product of this vector with 'vec'.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f getInterpolated(&pnt, p)\n\n<!--\n_syntax: getInterpolated(&pnt, p)_\n_name: getInterpolated_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &pnt, float p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPerforms a linear interpolation of this vector towards 'pnt'.\n\n\n**Parameters:**\n\npnt The vector the interpolation will be performed on.\n\np The amount to move towards 'pnt'; 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.\n\n**Returns**: The interpolation as an ofVec4f.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f getLimited(max)\n\n<!--\n_syntax: getLimited(max)_\n_name: getLimited_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a copy of this vector with its length (magnitude) restricted to a maximum of 'max' units by scaling down if necessary.\n\n\n**Parameters:**\n\nmax The maximum length of the new vector.\n\n**Returns**: A copy of the current vector that is at most 'max' units long.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f getMiddle(&pnt)\n\n<!--\n_syntax: getMiddle(&pnt)_\n_name: getMiddle_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculates and returns the midpoint (as a vector) between this vector and 'pnt'.\n\n\n**Parameters:**\n\npnt The vector used in the midpoint calculation with this vector.\n\n**Returns**: The midpoint between this vector and 'pnt' as an ofVec4f.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f getNormalized()\n\n<!--\n_syntax: getNormalized()_\n_name: getNormalized_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a normalized copy of this vector.\n\nNormalization means to scale the vector so that its length (magnitude) is exactly 1,\nat which stage all that is left is the direction. A normalized vector is usually called\na unit vector, and can be used to represent a pure direction (heading).\n\n\n**Returns**: The normalized copy of the current vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float * getPtr()\n\n<!--\n_syntax: getPtr()_\n_name: getPtr_\n_returns: float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Access components\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const float * getPtr()\n\n<!--\n_syntax: getPtr()_\n_name: getPtr_\n_returns: const float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f getScaled(length)\n\n<!--\n_syntax: getScaled(length)_\n_name: getScaled_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const float length_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new ofVec4f that is the result of scaling this vector up or down so that it has the requested length.\n\n\n**Parameters:**\n\nlength The desired length of the new ofVec4f object.\n\n**Returns**: The result of scaling the this vector up or down.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & interpolate(&pnt, p)\n\n<!--\n_syntax: interpolate(&pnt, p)_\n_name: interpolate_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const ofVec4f &pnt, float p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPerforms a linear interpolation of this vector towards 'pnt'. This modifies the current vector to the interpolated value.\n\n\n**Parameters:**\n\npnt The vector the interpolation will be performed on.\n\np The amount to move towards 'pnt'; 'p' is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to 'pnt', but you can also have 'p' greater than 1 overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float length()\n\n<!--\n_syntax: length()_\n_name: length_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the length (magnitude) of this vector.\n\n\n**Returns**: The magnitude of the current vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float lengthSquared()\n\n<!--\n_syntax: lengthSquared()_\n_name: lengthSquared_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & limit(max)\n\n<!--\n_syntax: limit(max)_\n_name: limit_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRestrict the length (magnitude) of this vector to a maximum of 'max' units by scaling down if necessary.\n\n\n**Parameters:**\n\nmax The maximum length of the current vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool match(&vec, tolerance = 0.0001f)\n\n<!--\n_syntax: match(&vec, tolerance = 0.0001f)_\n_name: match_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec4f &vec, float tolerance=0.0001f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & middle(&pnt)\n\n<!--\n_syntax: middle(&pnt)_\n_name: middle_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const ofVec4f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculates and returns the midpoint (as a vector) between this vector and 'pnt'. This modifies the current vector to the midpoint value.\n\n\n**Parameters:**\n\npnt The vector used in the midpoint calculation with this vector.\n\n**Returns**: The midpoint between this vector and 'pnt' as an ofVec4f.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & normalize()\n\n<!--\n_syntax: normalize()_\n_name: normalize_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nNormalizes the vector. This changes the current vector to its normalized value.\n\nNormalization means to scale the vector so that its length (magnitude) is exactly 1,\nat which stage all that is left is the direction. A normalized vector is usually called\na unit vector, and can be used to represent a pure direction (heading).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec4f(&vec)\n\n<!--\n_syntax: ofVec4f(&vec)_\n_name: ofVec4f_\n_returns: _\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec4f(&vec)\n\n<!--\n_syntax: ofVec4f(&vec)_\n_name: ofVec4f_\n_returns: _\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec4f(&vec)\n\n<!--\n_syntax: ofVec4f(&vec)_\n_name: ofVec4f_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec2 &vec_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec4f(&vec)\n\n<!--\n_syntax: ofVec4f(&vec)_\n_name: ofVec4f_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec3 &vec_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec4f(&vec)\n\n<!--\n_syntax: ofVec4f(&vec)_\n_name: ofVec4f_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec4 &vec_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec4f()\n\n<!--\n_syntax: ofVec4f()_\n_name: ofVec4f_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Construct a 4D vector\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec4f(_scalar)\n\n<!--\n_syntax: ofVec4f(_scalar)_\n_name: ofVec4f_\n_returns: _\n_returns_description: _\n_parameters: float _scalar_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec4f(_x, _y, _z, _w)\n\n<!--\n_syntax: ofVec4f(_x, _y, _z, _w)_\n_name: ofVec4f_\n_returns: _\n_returns_description: _\n_parameters: float _x, float _y, float _z, float _w_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f one()\n\n<!--\n_syntax: one()_\n_name: one_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator!=(&vec)\n\n<!--\n_syntax: operator!=(&vec)_\n_name: operator!=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f operator*(&vec)\n\n<!--\n_syntax: operator*(&vec)_\n_name: operator*_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f operator*(f)\n\n<!--\n_syntax: operator*(f)_\n_name: operator*_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & operator*=(&vec)\n\n<!--\n_syntax: operator*=(&vec)_\n_name: operator*=_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & operator*=(f)\n\n<!--\n_syntax: operator*=(f)_\n_name: operator*=_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f operator+(&vec)\n\n<!--\n_syntax: operator+(&vec)_\n_name: operator+_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Operators\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f operator+(f)\n\n<!--\n_syntax: operator+(f)_\n_name: operator+_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & operator+=(&vec)\n\n<!--\n_syntax: operator+=(&vec)_\n_name: operator+=_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & operator+=(f)\n\n<!--\n_syntax: operator+=(f)_\n_name: operator+=_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f operator-(&vec)\n\n<!--\n_syntax: operator-(&vec)_\n_name: operator-_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f operator-()\n\n<!--\n_syntax: operator-()_\n_name: operator-_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f operator-(f)\n\n<!--\n_syntax: operator-(f)_\n_name: operator-_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & operator-=(&vec)\n\n<!--\n_syntax: operator-=(&vec)_\n_name: operator-=_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & operator-=(f)\n\n<!--\n_syntax: operator-=(f)_\n_name: operator-=_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f operator/(&vec)\n\n<!--\n_syntax: operator/(&vec)_\n_name: operator/_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f operator/(f)\n\n<!--\n_syntax: operator/(f)_\n_name: operator/_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & operator/=(&vec)\n\n<!--\n_syntax: operator/=(&vec)_\n_name: operator/=_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & operator/=(f)\n\n<!--\n_syntax: operator/=(f)_\n_name: operator/=_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator==(&vec)\n\n<!--\n_syntax: operator==(&vec)_\n_name: operator==_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Comparison\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float & operator[](n)\n\n<!--\n_syntax: operator[](n)_\n_name: operator[]_\n_returns: float &_\n_returns_description: _\n_parameters: int n_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float operator[](n)\n\n<!--\n_syntax: operator[](n)_\n_name: operator[]_\n_returns: float_\n_returns_description: _\n_parameters: int n_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f & scale(length)\n\n<!--\n_syntax: scale(length)_\n_name: scale_\n_returns: ofVec4f &_\n_returns_description: _\n_parameters: const float length_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScales this vector up or down so that it has the requested length.\n\n\n**Parameters:**\n\nlength The desired length of the vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&vec)\n\n<!--\n_syntax: set(&vec)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(_scalar)\n\n<!--\n_syntax: set(_scalar)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float _scalar_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(_x, _y, _z, _w)\n\n<!--\n_syntax: set(_x, _y, _z, _w)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float _x, float _y, float _z, float _w_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float squareDistance(&pnt)\n\n<!--\n_syntax: squareDistance(&pnt)_\n_name: squareDistance_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec4f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f zero()\n\n<!--\n_syntax: zero()_\n_name: zero_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###const int DIM\n\n<!--\n_name: DIM_\n_type: const int_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\cond INTERNAL\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float w\n\n<!--\n_name: w_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float x\n\n<!--\n_name: x_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\endcond\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float y\n\n<!--\n_name: y_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float z\n\n<!--\n_name: z_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}