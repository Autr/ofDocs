{"data":[{"page":{"entry":{"name":"ofxCvBlob","filename":"ofxCvBlob.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/addons/ofxOpenCv/ofxCvBlob.markdown","path":"/documentation/addons/ofxOpenCv/ofxCvBlob","route":"/documentation/addons/ofxOpenCv/ofxCvBlob.markdown","dir":"../ofSite/documentation/addons/ofxOpenCv","ext":"markdown","type":"page","id":1849,"parent":1834,"breadcrumbs":[1834,1743,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>ofxCvBlob represents an area identified by the OpenCV plug-in as being a contiguous object in the scene. It's most often stored within a contrountFind instance and populated by a call to findContours().</p>\n<p>In the image below you can see two blobs detected in the grayscale image:</p>\n<p><img src=\"blobs.png\" alt=\"blobs\" title=\"Blobs in image\"></p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"draw(x, y)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This method draws the blob to the screen with the upper-left corner located at the point specified by the x and y values.</p>\n"},{"syntax":"ofxCvBlob()","name":"ofxCvBlob","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Constructor.</p>\n"},{"name":"area","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":"<p>Returns the area of the blob.</p>\n"},{"name":"boundingRect","type":"ofRectangle","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":"<p>an ofRectangle instance that can be drawn to the screen and that shows the height and width of the blob. This can be helpful to determine large regions of interest, or it can lead to some inaccurate results depending on the shape of your object. For instance, a squarish shape will be well represented by a rectangle, whereas a long thin shape with an angle in the middle will not.</p>\n"},{"name":"centroid","type":"ofPoint","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":"<p>This is an ofPoint instance with its x and y positions set at the center of the boundaries of the blob.</p>\n"},{"name":"hole","type":"bool","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":"<p>This is a Boolean value that indicates whether the blob contains a whole. This is also dependent on whether the call to findContours() in ofxContourFinder has the findHoles parameter set to true.</p>\n"},{"name":"length","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":"<p>Returns the perimeter of the blob.</p>\n"},{"name":"nPts","type":"int","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":"<p>This is an int that represents the number of points that are contained within the contour.</p>\n"},{"short":"","desc":"<p>This is a vector of ofPoint objects that represent the contour of the blob. This is different from the bounding rectangle. It's listing the different points around the edge of the blob. The bounding rectangle is a rectangle around the extreme points of the blob.</p>\n"},{}],"document":"<p>#class ofxCvBlob</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>ofxCvBlob represents an area identified by the OpenCV plug-in as being a contiguous object in the scene. It's most often stored within a contrountFind instance and populated by a call to findContours().</p>\n<p>In the image below you can see two blobs detected in the grayscale image:</p>\n<p><img src=\"blobs.png\" alt=\"blobs\" title=\"Blobs in image\"></p>\n<p>##Methods</p>\n<p>###void draw(x, y)</p>\n<p>&lt;!--\n<em>syntax: draw(x, y)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This method draws the blob to the screen with the upper-left corner located at the point specified by the x and y values.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofxCvBlob()</h3>\n<p>&lt;!--\n<em>syntax: ofxCvBlob()</em>\n<em>name: ofxCvBlob</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Constructor.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###float area</p>\n<p>&lt;!--\n<em>name: area</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the area of the blob.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle boundingRect</p>\n<p>&lt;!--\n<em>name: boundingRect</em>\n<em>type: ofRectangle</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>an ofRectangle instance that can be drawn to the screen and that shows the height and width of the blob. This can be helpful to determine large regions of interest, or it can lead to some inaccurate results depending on the shape of your object. For instance, a squarish shape will be well represented by a rectangle, whereas a long thin shape with an angle in the middle will not.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPoint centroid</p>\n<p>&lt;!--\n<em>name: centroid</em>\n<em>type: ofPoint</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is an ofPoint instance with its x and y positions set at the center of the boundaries of the blob.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool hole</p>\n<p>&lt;!--\n<em>name: hole</em>\n<em>type: bool</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is a Boolean value that indicates whether the blob contains a whole. This is also dependent on whether the call to findContours() in ofxContourFinder has the findHoles parameter set to true.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float length</p>\n<p>&lt;!--\n<em>name: length</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the perimeter of the blob.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int nPts</p>\n<p>&lt;!--\n<em>name: nPts</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is an int that represents the number of points that are contained within the contour.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; ofPoint &gt; pts</p>\n<p>&lt;!--\n<em>name: pts</em>\n<em>type: vector&lt; ofPoint &gt;</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This is a vector of ofPoint objects that represent the contour of the blob. This is different from the bounding rectangle. It's listing the different points around the edge of the blob. The bounding rectangle is a rectangle around the extreme points of the blob.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofxCvBlob\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nofxCvBlob represents an area identified by the OpenCV plug-in as being a contiguous object in the scene. It's most often stored within a contrountFind instance and populated by a call to findContours().\n\nIn the image below you can see two blobs detected in the grayscale image:\n\n![blobs](blobs.png \"Blobs in image\")\n\n\n\n\n\n##Methods\n\n\n\n###void draw(x, y)\n\n<!--\n_syntax: draw(x, y)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis method draws the blob to the screen with the upper-left corner located at the point specified by the x and y values.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvBlob()\n\n<!--\n_syntax: ofxCvBlob()_\n_name: ofxCvBlob_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConstructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###float area\n\n<!--\n_name: area_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the area of the blob.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle boundingRect\n\n<!--\n_name: boundingRect_\n_type: ofRectangle_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nan ofRectangle instance that can be drawn to the screen and that shows the height and width of the blob. This can be helpful to determine large regions of interest, or it can lead to some inaccurate results depending on the shape of your object. For instance, a squarish shape will be well represented by a rectangle, whereas a long thin shape with an angle in the middle will not.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPoint centroid\n\n<!--\n_name: centroid_\n_type: ofPoint_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is an ofPoint instance with its x and y positions set at the center of the boundaries of the blob.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hole\n\n<!--\n_name: hole_\n_type: bool_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is a Boolean value that indicates whether the blob contains a whole. This is also dependent on whether the call to findContours() in ofxContourFinder has the findHoles parameter set to true.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float length\n\n<!--\n_name: length_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the perimeter of the blob.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int nPts\n\n<!--\n_name: nPts_\n_type: int_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is an int that represents the number of points that are contained within the contour.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofPoint > pts\n\n<!--\n_name: pts_\n_type: vector< ofPoint >_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis is a vector of ofPoint objects that represent the contour of the blob. This is different from the bounding rectangle. It's listing the different points around the edge of the blob. The bounding rectangle is a rectangle around the extreme points of the blob.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}