{"data":[{"page":{"entry":{"name":"ofxCvFloatImage","filename":"ofxCvFloatImage.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/addons/ofxOpenCv/ofxCvFloatImage.markdown","path":"/documentation/addons/ofxOpenCv/ofxCvFloatImage","route":"/documentation/addons/ofxOpenCv/ofxCvFloatImage.markdown","dir":"../ofSite/documentation/addons/ofxOpenCv","ext":"markdown","type":"page","id":1852,"parent":1834,"breadcrumbs":[1834,1743,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>ofxCvFloatImage is an image class that represents the values of each color of each pixel as float values, on a scale of 0.0 - 1.0. They are a more precise but heavier (i.e. requiring more memory) way representing the data in an image. Keep in mind though that most of the image operations in OpenCV expect a grayscale image, which you can construct using the ofxCvGrayscaleImage. If you're loading image data from another image you might want to check what image scale is being used with the image to ensure that you don't get your scales wrong.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"ofxCvImage"},"methods":[{"syntax":"addWeighted(&mom, f)","name":"addWeighted","returns":"void","returns_description":null,"parameters":"ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies the pixel data of an ofxCvGrayscaleImage into the pixel data of the ofxCvShortImage.</p>\n"},{"syntax":"allocatePixels(w, h)","name":"allocatePixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"allocateTexture()","name":"allocateTexture","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Remove all pixel data from the ofxCvFloatImage instance.</p>\n"},{"syntax":"contrastStretch()","name":"contrastStretch","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This increases the contrast of the image remapping the brightest points in the image to 255 and the darkest points in the image to 0.</p>\n"},{"syntax":"convertFloatToGray(*floatImg, *grayImg)","name":"convertFloatToGray","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>floatImg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>grayImg","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"convertGrayToFloat(*grayImg, *floatImg)","name":"convertGrayToFloat","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>grayImg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>floatImg","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"convertToRange(min, max)","name":"convertToRange","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Maps the pixels of an image to the min and max range passed in.</p>\n<pre><code>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">convertToRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super low contrast</span>\n\n</code></pre>\n<p><img src=\"convertToRangeColor.png\" alt=\"Image convert to range\" title=\"Converting the range of an image\"></p>\n"},{"syntax":"flagImageChanged()","name":"flagImageChanged","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Flag whether the image pixel data has changed so that the ofTexture can be updated.</p>\n"},{"syntax":"getCv8BitsImage()","name":"getCv8BitsImage","returns":"int *","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getCv8BitsRoiImage()","name":"getCv8BitsRoiImage","returns":"int *","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getFloatPixelsRef()","name":"getFloatPixelsRef","returns":"ofFloatPixels &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns a ofFloatPixels that contains the pixels of the image.</p>\n"},{"syntax":"getNativeScaleMax()","name":"getNativeScaleMax","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If you've set the native scale max and min using setNativeScale() this returns the maximum value.</p>\n"},{"syntax":"getNativeScaleMin()","name":"getNativeScaleMin","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If you've set the native scale max and min using setNativeScale() this returns the minimum value.</p>\n"},{"syntax":"getPixelsAsFloats()","name":"getPixelsAsFloats","returns":"float *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns a pointer to an array of floating point numbers that represent the pixels of the image.</p>\n"},{"syntax":"getRoiFloatPixelsRef()","name":"getRoiFloatPixelsRef","returns":"ofFloatPixels &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns a ofFloatPixels that contains the pixels within the ROI the image.</p>\n"},{"syntax":"getRoiPixelsAsFloats()","name":"getRoiPixelsAsFloats","returns":"float *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns a pointer to an array of floating point numbers that represent the pixels of the ROI of the image.</p>\n"},{"syntax":"init()","name":"init","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofxCvFloatImage()","name":"ofxCvFloatImage","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Constructor.</p>\n"},{"syntax":"ofxCvFloatImage(&mom)","name":"ofxCvFloatImage","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvFloatImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy constructor.</p>\n"},{"syntax":"operator&=(&mom)","name":"operator&=","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Binary &amp; (Logical AND http://en.wikipedia.org/wiki/Bitwise_operation) the pixel data of the right hand side image from the current image:</p>\n<pre><code>cvPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \ncvPuppy <span class=\"token operator\">=</span> puppyImg<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// copy pixels from a loaded image</span>\n    \nandPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \nandPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make the AND image red</span>\nandPuppy <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">=</span> cvPuppy<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will &amp;amp; all the bits </span>\n</code></pre>\n<p><img src=\"ANDoperation.png\" alt=\"puppy AND\" title=\"Using the &amp;= operation\"></p>\n"},{"syntax":"operator*=(scalar)","name":"operator*=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> scalar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Multiplies the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">*</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvFloatImage instances</span>\n</code></pre>\n"},{"syntax":"operator*=(&mom)","name":"operator*=","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Multiplies the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">*</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvFloatImage instances</span>\n</code></pre>\n"},{"syntax":"operator/=(scalar)","name":"operator/=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> scalar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Divides each pixel of the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">/</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvFloatImage instances</span>\n</code></pre>\n"},{"syntax":"operator=(*_pixels)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy the data from an array of unsigned char numbers into the ofxCvFloatImage instance. The dimensions of the array are assumed to match the dimensions of the image. The values will be converted to a 0.0 - 1.0 scale.</p>\n"},{"syntax":"operator=(*_pixels)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>_pixels","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy the data from an array of floating point numbers into the ofxCvFloatImage instance. The dimensions of the array are assumed to match the dimensions of the image.</p>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy the data from an ofxCvGrayscaleImage image into the ofxCvFloatImage instance.</p>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvColorImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy the data from an ofxCvColor image into the ofxCvFloatImage instance.</p>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvFloatImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy the data from an ofxCvFloatImage image into the ofxCvFloatImage instance.</p>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvShortImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator=(*mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>mom","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"resize(w, h)","name":"resize","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Resizes the image to the w.h passed in.</p>\n"},{"syntax":"scaleIntoMe(&mom, interpolationMethod)","name":"scaleIntoMe","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> interpolationMethod","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Scales the image passed in to be the size of the current image,</p>\n<pre><code>\nofxCvImage first<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofxCvImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">scaleIntoMe</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// first is now 320,240</span>\n\n</code></pre>\n"},{"syntax":"set(value)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. the values are 0.0 to 1.0.</p>\n"},{"syntax":"setFromPixels(*_pixels, w, h)","name":"setFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in a ofxCvGrayscaleImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image. The array is assumed to contain color values.</p>\n"},{"syntax":"setFromPixels(*_pixels, w, h)","name":"setFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This allows you to set the ROI on the image from an array of pixels. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n"},{"syntax":"setNativeScale(_scaleMin, _scaleMax)","name":"setNativeScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> _scaleMin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _scaleMax","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Allows you to set the native scale of your images, for instance, if your images contain values ranging from 0.0 to 255.0 (unlikely, but possible) then you would want to set them to ensure that all image operations complete correctly.</p>\n"},{"syntax":"setRoiFromPixels(*_pixels, w, h)","name":"setRoiFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This allows you to set the ROI on the image from an array of pixels. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n"},{"syntax":"setRoiFromPixels(*_pixels, w, h)","name":"setRoiFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This allows you to set the ROI on the image from an ofPixels instance. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n"},{"name":"bFloatPixelsDirty","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"cvGrayscaleImage","type":"IplImage *","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"floatPixels","type":"ofFloatPixels","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"scaleMax","type":"float","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"scaleMin","type":"float","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofxCvFloatImage</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n<em>extends: ofxCvImage</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>ofxCvFloatImage is an image class that represents the values of each color of each pixel as float values, on a scale of 0.0 - 1.0. They are a more precise but heavier (i.e. requiring more memory) way representing the data in an image. Keep in mind though that most of the image operations in OpenCV expect a grayscale image, which you can construct using the ofxCvGrayscaleImage. If you're loading image data from another image you might want to check what image scale is being used with the image to ensure that you don't get your scales wrong.</p>\n<p>##Methods</p>\n<p>###void addWeighted(&amp;mom, f)</p>\n<p>&lt;!--\n<em>syntax: addWeighted(&amp;mom, f)</em>\n<em>name: addWeighted</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvGrayscaleImage &amp;mom, float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies the pixel data of an ofxCvGrayscaleImage into the pixel data of the ofxCvShortImage.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void allocatePixels(w, h)</p>\n<p>&lt;!--\n<em>syntax: allocatePixels(w, h)</em>\n<em>name: allocatePixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int w, int h</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void allocateTexture()</p>\n<p>&lt;!--\n<em>syntax: allocateTexture()</em>\n<em>name: allocateTexture</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clear()</p>\n<p>&lt;!--\n<em>syntax: clear()</em>\n<em>name: clear</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Remove all pixel data from the ofxCvFloatImage instance.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void contrastStretch()</p>\n<p>&lt;!--\n<em>syntax: contrastStretch()</em>\n<em>name: contrastStretch</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This increases the contrast of the image remapping the brightest points in the image to 255 and the darkest points in the image to 0.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void convertFloatToGray(*floatImg, *grayImg)</p>\n<p>&lt;!--\n<em>syntax: convertFloatToGray(*floatImg, *grayImg)</em>\n<em>name: convertFloatToGray</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int *floatImg, int *grayImg</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void convertGrayToFloat(*grayImg, *floatImg)</p>\n<p>&lt;!--\n<em>syntax: convertGrayToFloat(*grayImg, *floatImg)</em>\n<em>name: convertGrayToFloat</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int *grayImg, int *floatImg</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void convertToRange(min, max)</p>\n<p>&lt;!--\n<em>syntax: convertToRange(min, max)</em>\n<em>name: convertToRange</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float min, float max</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Maps the pixels of an image to the min and max range passed in.</p>\n<pre><code>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">convertToRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super low contrast</span>\n\n</code></pre>\n<p><img src=\"convertToRangeColor.png\" alt=\"Image convert to range\" title=\"Converting the range of an image\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void flagImageChanged()</p>\n<p>&lt;!--\n<em>syntax: flagImageChanged()</em>\n<em>name: flagImageChanged</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Flag whether the image pixel data has changed so that the ofTexture can be updated.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int * getCv8BitsImage()</p>\n<p>&lt;!--\n<em>syntax: getCv8BitsImage()</em>\n<em>name: getCv8BitsImage</em>\n<em>returns: int *</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int * getCv8BitsRoiImage()</p>\n<p>&lt;!--\n<em>syntax: getCv8BitsRoiImage()</em>\n<em>name: getCv8BitsRoiImage</em>\n<em>returns: int *</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofFloatPixels &amp; getFloatPixelsRef()</p>\n<p>&lt;!--\n<em>syntax: getFloatPixelsRef()</em>\n<em>name: getFloatPixelsRef</em>\n<em>returns: ofFloatPixels &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns a ofFloatPixels that contains the pixels of the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getNativeScaleMax()</p>\n<p>&lt;!--\n<em>syntax: getNativeScaleMax()</em>\n<em>name: getNativeScaleMax</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If you've set the native scale max and min using setNativeScale() this returns the maximum value.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getNativeScaleMin()</p>\n<p>&lt;!--\n<em>syntax: getNativeScaleMin()</em>\n<em>name: getNativeScaleMin</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If you've set the native scale max and min using setNativeScale() this returns the minimum value.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float * getPixelsAsFloats()</p>\n<p>&lt;!--\n<em>syntax: getPixelsAsFloats()</em>\n<em>name: getPixelsAsFloats</em>\n<em>returns: float *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns a pointer to an array of floating point numbers that represent the pixels of the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofFloatPixels &amp; getRoiFloatPixelsRef()</p>\n<p>&lt;!--\n<em>syntax: getRoiFloatPixelsRef()</em>\n<em>name: getRoiFloatPixelsRef</em>\n<em>returns: ofFloatPixels &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns a ofFloatPixels that contains the pixels within the ROI the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float * getRoiPixelsAsFloats()</p>\n<p>&lt;!--\n<em>syntax: getRoiPixelsAsFloats()</em>\n<em>name: getRoiPixelsAsFloats</em>\n<em>returns: float *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns a pointer to an array of floating point numbers that represent the pixels of the ROI of the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void init()</p>\n<p>&lt;!--\n<em>syntax: init()</em>\n<em>name: init</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofxCvFloatImage()</h3>\n<p>&lt;!--\n<em>syntax: ofxCvFloatImage()</em>\n<em>name: ofxCvFloatImage</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Constructor.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofxCvFloatImage(&amp;mom)</h3>\n<p>&lt;!--\n<em>syntax: ofxCvFloatImage(&amp;mom)</em>\n<em>name: ofxCvFloatImage</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofxCvFloatImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy constructor.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator&amp;=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator&amp;=(&amp;mom)</em>\n<em>name: operator&amp;=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Binary &amp; (Logical AND http://en.wikipedia.org/wiki/Bitwise_operation) the pixel data of the right hand side image from the current image:</p>\n<pre><code>cvPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \ncvPuppy <span class=\"token operator\">=</span> puppyImg<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// copy pixels from a loaded image</span>\n    \nandPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \nandPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make the AND image red</span>\nandPuppy <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">=</span> cvPuppy<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will &amp;amp; all the bits </span>\n</code></pre>\n<p><img src=\"ANDoperation.png\" alt=\"puppy AND\" title=\"Using the &amp;= operation\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator*=(scalar)</p>\n<p>&lt;!--\n<em>syntax: operator*=(scalar)</em>\n<em>name: operator*=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float scalar</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Multiplies the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">*</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvFloatImage instances</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator*=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator*=(&amp;mom)</em>\n<em>name: operator*=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Multiplies the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">*</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvFloatImage instances</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator/=(scalar)</p>\n<p>&lt;!--\n<em>syntax: operator/=(scalar)</em>\n<em>name: operator/=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float scalar</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Divides each pixel of the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">/</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvFloatImage instances</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(*_pixels)</p>\n<p>&lt;!--\n_syntax: operator=(*<em>pixels)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: unsigned char *<em>pixels</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy the data from an array of unsigned char numbers into the ofxCvFloatImage instance. The dimensions of the array are assumed to match the dimensions of the image. The values will be converted to a 0.0 - 1.0 scale.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(*_pixels)</p>\n<p>&lt;!--\n_syntax: operator=(*<em>pixels)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: float *<em>pixels</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy the data from an array of floating point numbers into the ofxCvFloatImage instance. The dimensions of the array are assumed to match the dimensions of the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofxCvGrayscaleImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy the data from an ofxCvGrayscaleImage image into the ofxCvFloatImage instance.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofxCvColorImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy the data from an ofxCvColor image into the ofxCvFloatImage instance.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofxCvFloatImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy the data from an ofxCvFloatImage image into the ofxCvFloatImage instance.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofxCvShortImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(*mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(*mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const int *mom</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resize(w, h)</p>\n<p>&lt;!--\n<em>syntax: resize(w, h)</em>\n<em>name: resize</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Resizes the image to the w.h passed in.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleIntoMe(&amp;mom, interpolationMethod)</p>\n<p>&lt;!--\n<em>syntax: scaleIntoMe(&amp;mom, interpolationMethod)</em>\n<em>name: scaleIntoMe</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvImage &amp;mom, int interpolationMethod</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Scales the image passed in to be the size of the current image,</p>\n<pre><code>\nofxCvImage first<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofxCvImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">scaleIntoMe</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// first is now 320,240</span>\n\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(value)</p>\n<p>&lt;!--\n<em>syntax: set(value)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. the values are 0.0 to 1.0.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromPixels(*_pixels, w, h)</p>\n<p>&lt;!--\n_syntax: setFromPixels(*<em>pixels, w, h)</em>\n<em>name: setFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: const unsigned char *<em>pixels, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in a ofxCvGrayscaleImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image. The array is assumed to contain color values.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromPixels(*_pixels, w, h)</p>\n<p>&lt;!--\n_syntax: setFromPixels(*<em>pixels, w, h)</em>\n<em>name: setFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: float *<em>pixels, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This allows you to set the ROI on the image from an array of pixels. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setNativeScale(_scaleMin, _scaleMax)</p>\n<p>&lt;!--\n_syntax: setNativeScale(_scaleMin, <em>scaleMax)</em>\n<em>name: setNativeScale</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: float _scaleMin, float <em>scaleMax</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Allows you to set the native scale of your images, for instance, if your images contain values ranging from 0.0 to 255.0 (unlikely, but possible) then you would want to set them to ensure that all image operations complete correctly.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setRoiFromPixels(*_pixels, w, h)</p>\n<p>&lt;!--\n_syntax: setRoiFromPixels(*<em>pixels, w, h)</em>\n<em>name: setRoiFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: const unsigned char *<em>pixels, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This allows you to set the ROI on the image from an array of pixels. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setRoiFromPixels(*_pixels, w, h)</p>\n<p>&lt;!--\n_syntax: setRoiFromPixels(*<em>pixels, w, h)</em>\n<em>name: setRoiFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: float *<em>pixels, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This allows you to set the ROI on the image from an ofPixels instance. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###bool bFloatPixelsDirty</p>\n<p>&lt;!--\n<em>name: bFloatPixelsDirty</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###IplImage * cvGrayscaleImage</p>\n<p>&lt;!--\n<em>name: cvGrayscaleImage</em>\n<em>type: IplImage *</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofFloatPixels floatPixels</p>\n<p>&lt;!--\n<em>name: floatPixels</em>\n<em>type: ofFloatPixels</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float scaleMax</p>\n<p>&lt;!--\n<em>name: scaleMax</em>\n<em>type: float</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float scaleMin</p>\n<p>&lt;!--\n<em>name: scaleMin</em>\n<em>type: float</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofxCvFloatImage\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: ofxCvImage_\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nofxCvFloatImage is an image class that represents the values of each color of each pixel as float values, on a scale of 0.0 - 1.0. They are a more precise but heavier (i.e. requiring more memory) way representing the data in an image. Keep in mind though that most of the image operations in OpenCV expect a grayscale image, which you can construct using the ofxCvGrayscaleImage. If you're loading image data from another image you might want to check what image scale is being used with the image to ensure that you don't get your scales wrong.\n\n\n\n\n\n##Methods\n\n\n\n###void addWeighted(&mom, f)\n\n<!--\n_syntax: addWeighted(&mom, f)_\n_name: addWeighted_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvGrayscaleImage &mom, float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies the pixel data of an ofxCvGrayscaleImage into the pixel data of the ofxCvShortImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void allocatePixels(w, h)\n\n<!--\n_syntax: allocatePixels(w, h)_\n_name: allocatePixels_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void allocateTexture()\n\n<!--\n_syntax: allocateTexture()_\n_name: allocateTexture_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRemove all pixel data from the ofxCvFloatImage instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void contrastStretch()\n\n<!--\n_syntax: contrastStretch()_\n_name: contrastStretch_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis increases the contrast of the image remapping the brightest points in the image to 255 and the darkest points in the image to 0.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertFloatToGray(*floatImg, *grayImg)\n\n<!--\n_syntax: convertFloatToGray(*floatImg, *grayImg)_\n_name: convertFloatToGray_\n_returns: void_\n_returns_description: _\n_parameters: int *floatImg, int *grayImg_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertGrayToFloat(*grayImg, *floatImg)\n\n<!--\n_syntax: convertGrayToFloat(*grayImg, *floatImg)_\n_name: convertGrayToFloat_\n_returns: void_\n_returns_description: _\n_parameters: int *grayImg, int *floatImg_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertToRange(min, max)\n\n<!--\n_syntax: convertToRange(min, max)_\n_name: convertToRange_\n_returns: void_\n_returns_description: _\n_parameters: float min, float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMaps the pixels of an image to the min and max range passed in.\n\n~~~~{.cpp}\n\nsecond.convertToRange(100, 140); // super low contrast\n\n~~~~\n\n![Image convert to range](convertToRangeColor.png \"Converting the range of an image\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void flagImageChanged()\n\n<!--\n_syntax: flagImageChanged()_\n_name: flagImageChanged_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nFlag whether the image pixel data has changed so that the ofTexture can be updated.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getCv8BitsImage()\n\n<!--\n_syntax: getCv8BitsImage()_\n_name: getCv8BitsImage_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getCv8BitsRoiImage()\n\n<!--\n_syntax: getCv8BitsRoiImage()_\n_name: getCv8BitsRoiImage_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFloatPixels & getFloatPixelsRef()\n\n<!--\n_syntax: getFloatPixelsRef()_\n_name: getFloatPixelsRef_\n_returns: ofFloatPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns a ofFloatPixels that contains the pixels of the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getNativeScaleMax()\n\n<!--\n_syntax: getNativeScaleMax()_\n_name: getNativeScaleMax_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf you've set the native scale max and min using setNativeScale() this returns the maximum value.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getNativeScaleMin()\n\n<!--\n_syntax: getNativeScaleMin()_\n_name: getNativeScaleMin_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf you've set the native scale max and min using setNativeScale() this returns the minimum value.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float * getPixelsAsFloats()\n\n<!--\n_syntax: getPixelsAsFloats()_\n_name: getPixelsAsFloats_\n_returns: float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns a pointer to an array of floating point numbers that represent the pixels of the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFloatPixels & getRoiFloatPixelsRef()\n\n<!--\n_syntax: getRoiFloatPixelsRef()_\n_name: getRoiFloatPixelsRef_\n_returns: ofFloatPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns a ofFloatPixels that contains the pixels within the ROI the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float * getRoiPixelsAsFloats()\n\n<!--\n_syntax: getRoiPixelsAsFloats()_\n_name: getRoiPixelsAsFloats_\n_returns: float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns a pointer to an array of floating point numbers that represent the pixels of the ROI of the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void init()\n\n<!--\n_syntax: init()_\n_name: init_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvFloatImage()\n\n<!--\n_syntax: ofxCvFloatImage()_\n_name: ofxCvFloatImage_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConstructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvFloatImage(&mom)\n\n<!--\n_syntax: ofxCvFloatImage(&mom)_\n_name: ofxCvFloatImage_\n_returns: _\n_returns_description: _\n_parameters: const ofxCvFloatImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy constructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator&=(&mom)\n\n<!--\n_syntax: operator&=(&mom)_\n_name: operator&=_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nBinary & (Logical AND http://en.wikipedia.org/wiki/Bitwise_operation) the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\ncvPuppy.allocate( 320, 240 );    \ncvPuppy = puppyImg.getPixels(); // copy pixels from a loaded image\n    \nandPuppy.allocate( 320, 240 );\n    \nandPuppy.set(255, 0, 0); // make the AND image red\nandPuppy &= cvPuppy; // will & all the bits \n~~~~\n\n![puppy AND](ANDoperation.png \"Using the &= operation\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator*=(scalar)\n\n<!--\n_syntax: operator*=(scalar)_\n_name: operator*=_\n_returns: void_\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMultiplies the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\nfirst *= second; // both are ofxCvFloatImage instances\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator*=(&mom)\n\n<!--\n_syntax: operator*=(&mom)_\n_name: operator*=_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMultiplies the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\nfirst *= second; // both are ofxCvFloatImage instances\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator/=(scalar)\n\n<!--\n_syntax: operator/=(scalar)_\n_name: operator/=_\n_returns: void_\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDivides each pixel of the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\nfirst /= second; // both are ofxCvFloatImage instances\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(*_pixels)\n\n<!--\n_syntax: operator=(*_pixels)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: unsigned char *_pixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy the data from an array of unsigned char numbers into the ofxCvFloatImage instance. The dimensions of the array are assumed to match the dimensions of the image. The values will be converted to a 0.0 - 1.0 scale.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(*_pixels)\n\n<!--\n_syntax: operator=(*_pixels)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: float *_pixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy the data from an array of floating point numbers into the ofxCvFloatImage instance. The dimensions of the array are assumed to match the dimensions of the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy the data from an ofxCvGrayscaleImage image into the ofxCvFloatImage instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvColorImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy the data from an ofxCvColor image into the ofxCvFloatImage instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvFloatImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy the data from an ofxCvFloatImage image into the ofxCvFloatImage instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvShortImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(*mom)\n\n<!--\n_syntax: operator=(*mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const int *mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resize(w, h)\n\n<!--\n_syntax: resize(w, h)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nResizes the image to the w.h passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleIntoMe(&mom, interpolationMethod)\n\n<!--\n_syntax: scaleIntoMe(&mom, interpolationMethod)_\n_name: scaleIntoMe_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom, int interpolationMethod_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nScales the image passed in to be the size of the current image, \n\n~~~~{.cpp}\n\nofxCvImage first;\nfirst.allocate(640, 480);\nofxCvImage second;\nsecond.allocate(320, 240);\n\nsecond.scaleIntoMe(first); // first is now 320,240\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(value)\n\n<!--\n_syntax: set(value)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. the values are 0.0 to 1.0.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setFromPixels(*_pixels, w, h)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in a ofxCvGrayscaleImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image. The array is assumed to contain color values.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setFromPixels(*_pixels, w, h)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: float *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis allows you to set the ROI on the image from an array of pixels. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setNativeScale(_scaleMin, _scaleMax)\n\n<!--\n_syntax: setNativeScale(_scaleMin, _scaleMax)_\n_name: setNativeScale_\n_returns: void_\n_returns_description: _\n_parameters: float _scaleMin, float _scaleMax_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAllows you to set the native scale of your images, for instance, if your images contain values ranging from 0.0 to 255.0 (unlikely, but possible) then you would want to set them to ensure that all image operations complete correctly.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRoiFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setRoiFromPixels(*_pixels, w, h)_\n_name: setRoiFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis allows you to set the ROI on the image from an array of pixels. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRoiFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setRoiFromPixels(*_pixels, w, h)_\n_name: setRoiFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: float *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis allows you to set the ROI on the image from an ofPixels instance. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bFloatPixelsDirty\n\n<!--\n_name: bFloatPixelsDirty_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###IplImage * cvGrayscaleImage\n\n<!--\n_name: cvGrayscaleImage_\n_type: IplImage *_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFloatPixels floatPixels\n\n<!--\n_name: floatPixels_\n_type: ofFloatPixels_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float scaleMax\n\n<!--\n_name: scaleMax_\n_type: float_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float scaleMin\n\n<!--\n_name: scaleMin_\n_type: float_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}