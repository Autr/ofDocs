{"data":[{"page":{"entry":{"name":"ofImage_","filename":"ofImage_.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/graphics/ofImage_.markdown","path":"/documentation/graphics/ofImage_","route":"/documentation/graphics/ofImage_.markdown","dir":"../ofSite/documentation/graphics","ext":"markdown","type":"page","id":2088,"parent":2075,"breadcrumbs":[2075,1718],"siblings":[],"translations":{}},"description":{"short":"<p>A class representing an image using memory and gpu based pixels.\n\\tparam PixelType The data type used to represent a single pixel value.</p>\n","full":"<p>The ofImage is a useful object for loading, saving and drawing images in openFrameworks. ofImage is a convenient class that lets you both draw images to the screen and manipulate their pixel data. The ofImage allows you to load an image from disk, manipulate the pixels, and create an OpenGL texture that you can display and manipulate on the graphics card. Loading a file into the ofImage allocates an ofPixels object and creates the ofTexture to display the pixels.</p>\n<p>ofImage uses a library called &quot;freeImage&quot; under the hood.</p>\n<h1></h1>\n"},"config":{},"methods":[{"syntax":"allocate(w, h, type)","name":"allocate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> ofImageType type","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This allocates space in the ofImage, both the ofPixels and the\nofTexture that the ofImage contains.</p>\n<p>You don't need to call this before loading an image, but for when you\nwant to allocate. space ahead of when you are going to use the image.</p>\n<p>The types of images can be <code>OF_IMAGE_COLOR</code>, <code>OF_IMAGE_COLOR_ALPHA</code>\nor <code>OF_IMAGE_GRAYSCALE</code>.</p>\n<p>You need to call update() to update the texture after updating\nthe pixels manually.</p>\n<p><strong>Parameters:</strong></p>\n<p>w Width of image to allocate.</p>\n<p>h Height of image to allocate.</p>\n<p>type The ofImageType.</p>\n","desc":"<p>This allocates space in the ofImage, both the ofPixels and the ofTexture that the ofImage contains.</p>\n<pre><code>img<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">,</span> OF_IMAGE_COLOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">18</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make some op-art</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>It allocates an image of width (w) and height (h). The type can be of three types: OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA. You don't need to call this before loading an image, but for when you want to allocate space ahead of when you are going to use the image.</p>\n"},{"syntax":"bind(textureLocation = 0)","name":"bind","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> textureLocation<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Binds the oftexture instance that the ofImage contains so that\nit can be used for advanced drawing.</p>\n","desc":"<p>This binds the ofTexture instance that the ofImage contains so that it can be used for advanced drawing</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> OF_IMAGE_COLOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">18</span><span class=\"token punctuation\">.</span>f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>OF_PRIMITIVE_TRIANGLE_STRIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">410</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">410</span><span class=\"token punctuation\">,</span> <span class=\"token number\">410</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">410</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofBackground</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// background white</span>\n\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"short":"<p>\\cond INTERNAL</p>\n","desc":""},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This clears the texture and pixels contained within the ofImage.</p>\n","desc":"<p>This clears the texture and pixels contained within the ofImage.</p>\n"},{"short":"","desc":"<p>This allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.</p>\n<pre><code>ofImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"crop(x, y, w, h)","name":"crop","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This crops the image to the w,h passed in from the x,y position.</p>\n<p>This does an in place crop and <strong>allocates memory</strong>.</p>\n<p><strong>Parameters:</strong></p>\n<p>x x position of upper-left corner of region to crop.</p>\n<p>y y position of upper-left corner of region to crop.</p>\n<p>w Width of region to crop.</p>\n<p>h Height of region to crop.</p>\n","desc":"<p>This crops the image to the w,h passed in from the x,y position.</p>\n"},{"short":"<p>Replaces region in caller image specified by w,h,x,y with pixels from otherImage.</p>\n<p>The w,h are measured from the x,y, so passing 100, 100, 300, 300 will grab\na 300x300 pixel block of data starting from 100, 100.</p>\n<p><strong>Parameters:</strong></p>\n<p>otherImage Image to crop from.</p>\n<p>x x position of upper-left corner of region to crop.</p>\n<p>y y position of upper-left corner of region to crop.</p>\n<p>w Width of region to crop.</p>\n<p>h Height of region to crop.</p>\n","desc":"<p>This crops another image into the image the cropFrom is being called on to the w,h passed in from the x,y position. The w,h are measured from the x,y, so passing 100, 100, 300, 300 will grab a 300x300 pixel block of data starting from 100, 100.</p>\n<pre><code>ofImage img1<span class=\"token punctuation\">,</span> img2<span class=\"token punctuation\">;</span>\nimg1<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>anImage<span class=\"token punctuation\">.</span>png<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg2<span class=\"token punctuation\">.</span><span class=\"token function\">cropFrom</span><span class=\"token punctuation\">(</span>img1<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"draw(&pos)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>pos","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"draw(&pos, w, h)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"draw(x, y)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw the image at it's normal size.</p>\n<p><strong>Parameters:</strong></p>\n<p>x Draw position on the x axis.</p>\n<p>y Draw position on the y axis.</p>\n","desc":"<p>Draws the ofImage into the x,y location using the default height and width of the image.</p>\n"},{"syntax":"draw(x, y, w, h)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw the image at a given size.</p>\n<p><strong>Parameters:</strong></p>\n<p>x Draw position on the x axis.</p>\n<p>y Draw position on the y axis.</p>\n<p>w Draw width.</p>\n<p>h Draw height.</p>\n","desc":"<p>Draws the ofImage into the x,y location and with the width and height, with any attendant scaling that may occur from fitting the ofImage into the width and height.</p>\n"},{"syntax":"draw(x, y, z)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw the texture at it's normal size with depth.</p>\n<p><strong>Parameters:</strong></p>\n<p>x Draw position on the x axis.</p>\n<p>y Draw position on the y axis.</p>\n<p>z Draw position on the z axis.</p>\n","desc":"<p>Draws the ofImage into the x,y,z location with the default height and width. You should ensure that you turn on depth sorting using glEnable(GL_DEPTH) before trying to draw multiple objects into z-space.</p>\n"},{"syntax":"draw(x, y, z, w, h)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw the image at a given size with depth.</p>\n<p><strong>Parameters:</strong></p>\n<p>x Draw position on the x axis.</p>\n<p>y Draw position on the y axis.</p>\n<p>z Draw position on the z axis.</p>\n<p>w Draw width.</p>\n<p>h Draw height.</p>\n","desc":"<p>Draws the ofImage into the x,y,z location and with the width and height, with any attendant scaling that may occur from fitting the ofImage into the width and height. You should ensure that you turn on depth sorting using glEnable(GL_DEPTH) before trying to draw multiple objects into z-space.</p>\n"},{"syntax":"drawSubsection(x, y, w, h, sx, sy)","name":"drawSubsection","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a subsection of the image.</p>\n<p>This functions like a clipping mask. Does not altering any pixel\ndata.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position to draw cropped image at.</p>\n<p>y Y position to draw cropped image at.</p>\n<p>w Width of subsection to draw.</p>\n<p>h Height of subsection to draw.</p>\n<p>sx X position in image to begin cropping from.</p>\n<p>sy Y position in image to begin cropping from.</p>\n","desc":"<p>Draws a subsection of the image (functions like a clipping mask) without altering any pixel data. (x,y) are the position to draw the cropped image at, (w,h) is the size of the subsection to draw and the size to crop (these can be different using the function below with sw,sh) and (sx,sy) are the source pixel positions in the image to begin cropping from.</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// crop the image from the mouse position to 100x100 pixels and draw it at 0,0</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>An example showing how to use drawSubsection can be found in of_release</p>\n"},{"syntax":"drawSubsection(x, y, w, h, sx, sy, sw, sh)","name":"drawSubsection","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sh","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a subsection of the image.</p>\n<p>This functions like a clipping mask. Does not altering any pixel\ndata.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position to draw cropped image at.</p>\n<p>y Y position to draw cropped image at.</p>\n<p>w Width of subsection to draw.</p>\n<p>h Height of subsection to draw.</p>\n<p>sx X position in image to begin cropping from.</p>\n<p>sy Y position in image to begin cropping from.</p>\n<p>sw Source width of cropped area.</p>\n<p>sh Source height of cropped area.</p>\n","desc":"<p>(sw,sh) indicate the source width and height of the cropped area and the (w,h) indicate the size to draw the cropped area at.</p>\n"},{"syntax":"drawSubsection(x, y, z, w, h, sx, sy)","name":"drawSubsection","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a subsection of the image.</p>\n<p>This functions like a clipping mask. Does not altering any pixel\ndata.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position to draw cropped image at.</p>\n<p>y Y position to draw cropped image at.</p>\n<p>z Z position to draw cropped image at.</p>\n<p>w Width of subsection to draw.</p>\n<p>h Height of subsection to draw.</p>\n<p>sx X position in image to begin cropping from.</p>\n<p>sy Y position in image to begin cropping from.</p>\n","desc":""},{"syntax":"drawSubsection(x, y, z, w, h, sx, sy, sw, sh)","name":"drawSubsection","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sh","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a subsection of the image.</p>\n<p>This functions like a clipping mask. Does not altering any pixel\ndata.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position to draw cropped image at.</p>\n<p>y Y position to draw cropped image at.</p>\n<p>z Z position to draw cropped image at.</p>\n<p>w Width of subsection to draw.</p>\n<p>h Height of subsection to draw.</p>\n<p>sx X position in image to begin cropping from.</p>\n<p>sy Y position in image to begin cropping from.</p>\n<p>sw Source width of cropped area.</p>\n<p>sh Source height of cropped area.</p>\n","desc":""},{"short":"<p>This returns the ofColor representing the pixels at the index\npassed in.</p>\n<p><strong>Parameters:</strong></p>\n<p>index index into pixel data</p>\n<p><strong>Returns</strong>: The ofColor representing the pixels at the index position passed in.</p>\n","desc":""},{"short":"<p>This returns the ofColor representing the pixels at the x and y\nposition passed in.</p>\n<p><strong>Parameters:</strong></p>\n<p>x x position of pixel</p>\n<p>y y position of pixel</p>\n<p><strong>Returns</strong>: The ofColor representing the pixels at the x and y position passed in.</p>\n","desc":"<p>This returns the ofColor representing the pixels at the x and y position passed in.</p>\n"},{"syntax":"getHeight()","name":"getHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get height of image as a float.</p>\n<p><strong>Returns</strong>: Height of image as float.</p>\n","desc":"<p>Returns the height of the image in pixels.</p>\n"},{"syntax":"getImageType()","name":"getImageType","returns":"ofImageType","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"<p>Returns a raw pointer to the pixel data.</p>\n<p>This function will give you access to a continuous block of pixels.\nyou can grab the data and do what you like with it. If you have a\ngrayscale image, you will have (width<em>height)  number of pixels. Color\nimages will have (width</em>height<em>3) number of pixels (interlaced R,G,B),\nand coloralpha images will have (width</em>height*4) number of pixels\n(interlaced R,G,B,A).</p>\n<p><strong>Warning</strong>: This is a raw pointer. It's up to you to get this right.</p>\n<p><strong>Returns</strong>: A raw pointer to the pixel data.</p>\n","desc":"<p>This returns a raw pointer to the pixel data.</p>\n<p>This function will give you access to a continuous block of pixels. you can grab the data and do what you like with it. If you have a grayscale image, you will have (width<em>height) number of pixels. Color images will have (width</em>height<em>3) number of pixels (interlaced R,G,B), and coloralpha images will have (width</em>height*4) number of pixels (interlaced R,G,B,A).</p>\n"},{"short":"","desc":""},{"syntax":"getTexture()","name":"getTexture","returns":"ofTexture &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a reference to the texture that the ofImage contains.</p>\n<p>You can use this to directly manipulate the texture itself, but keep in\nmind that if you manipulate the texture directly, there is no simple way\nto copy the data from the texture back to the pixels and keep the ofImage in sync.</p>\n<p><strong>Returns</strong>: A reference to the texture that the ofImage contains.</p>\n","desc":""},{"syntax":"getTexture()","name":"getTexture","returns":"const ofTexture &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a const reference to the texture that the ofImage contains.</p>\n<p><strong>Returns</strong>: A const reference to the texture that the ofImage contains.</p>\n","desc":""},{"syntax":"getWidth()","name":"getWidth","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get width of image as a float.</p>\n<p><strong>Returns</strong>: Width of image as float.</p>\n","desc":"<p>Returns the width of the image in pixels.</p>\n"},{"syntax":"grabScreen(x, y, w, h)","name":"grabScreen","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Grabs pixels from the opengl window specified by the region\n(x, y, w, h) and turns them into an image.</p>\n<p>It resizes or allocates the ofImage if it's necessary.</p>\n<p><strong>Warning</strong>: Uses glReadPixels() which can be slow.</p>\n<p><strong>Parameters:</strong></p>\n<p>x x position of upper-left corner of region.</p>\n<p>y y position of upper-left corner of region.</p>\n<p>w Width of region.</p>\n<p>h Height of region.</p>\n","desc":"<p>Grabs pixels from the opengl window specified by the region (x, y, w, h) and turns them into an image. It resizes or allocates the ofImage if it's necessary.</p>\n"},{"syntax":"isAllocated()","name":"isAllocated","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Whether the image has been allocated either by a call to\nallocate or by loading pixel data into the image.</p>\n<p><strong>Returns</strong>: true if the image has been allocated.</p>\n","desc":"<p>Returns whether the image has been allocated either by a call to allocate or by loading pixel data into the image.</p>\n"},{"syntax":"isUsingTexture()","name":"isUsingTexture","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns whether the ofImage has a texture or not.</p>\n<p>If the ofImage doesn't have a texture, nothing will be drawn to the screen.</p>\n<p><strong>Returns</strong>: true if the ofImage is using a texture.</p>\n","desc":"<p>Returns whether the ofImage has a texture or not. If not, nothing will be drawn to the screen if the draw() method is called.</p>\n"},{"syntax":"load(&buffer, &settings)","name":"load","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Loads an image from an ofBuffer instance created by, for\ninstance, ofFile::readToBuffer().</p>\n<p>This actually loads the image data into an ofPixels object and then\ninto the texture.</p>\n","desc":""},{"syntax":"load(&fileName, &settings)","name":"load","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>fileName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Loads an image given by fileName.</p>\n<p><strong>Parameters:</strong></p>\n<p>fileName Program looks for image given by fileName, relative to\nthe data folder.</p>\n<p>settings Load options</p>\n<p><strong>Returns</strong>: true if image loaded correctly.</p>\n","desc":""},{"syntax":"mirror(vertical, horizontal)","name":"mirror","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> vertical<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> horizontal","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This reflects the pixels of the image across the vertical and/or horizontal axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>vertical Set to true to reflect image across vertical axis.</p>\n<p>horizontal Set to true to reflect image across horizontal axis.</p>\n","desc":"<p>This reflects the pixels of the image across the vertical and/or horizontal axis.</p>\n"},{"short":"","desc":"<p>This creates an ofImage from an ofFile instance.</p>\n"},{"syntax":"ofImage_(&fileName, &settings)","name":"ofImage_","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>fileName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofImageLoadSettings <span class=\"token operator\">&amp;</span>settings","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This creates an ofImage from a file which can be a local string or a URL, allocating space for the pixels, and copying the pixels into the texture that the ofImage instance contains.</p>\n<pre><code>ofImage <span class=\"token function\">img</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>openframeworks<span class=\"token punctuation\">.</span>cc<span class=\"token operator\">/</span>wp<span class=\"token operator\">-</span>content<span class=\"token operator\">/</span>themes<span class=\"token operator\">/</span>ofw<span class=\"token operator\">/</span>images<span class=\"token operator\">/</span>ofw<span class=\"token operator\">-</span>logo<span class=\"token punctuation\">.</span>gif<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>or</p>\n<pre><code>ofImage <span class=\"token function\">img</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>anImage<span class=\"token punctuation\">.</span>png<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// assumes this is in bin/data</span>\n</code></pre>\n"},{"short":"","desc":"<p>The copy constructor. Pass in another image and it copies it. This allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.</p>\n<pre><code>image1<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>face<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofImage <span class=\"token function\">image2</span><span class=\"token punctuation\">(</span>image1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>image1 and image2 are now identical.</p>\n"},{"short":"","desc":"<p>This allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.</p>\n"},{"short":"","desc":"<p>This creates an ofImage from an ofPixels object, allocating space for the pixels, and copying the pixels into the texture that the ofImage instance contains.</p>\n"},{"syntax":"ofImage_()","name":"ofImage_","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Image Construction\n{</p>\n","desc":"<p>This creates an ofImage but doesn't allocate any memory for it, so you can't use the image immediately after creating it.</p>\n"},{"short":"","desc":""},{"short":"","desc":"<p>This allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.</p>\n<p>Makes the current ofImage a copy of another ofImage. Same as clone().</p>\n<pre><code>\nimage2<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>face<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimage1 <span class=\"token operator\">=</span> image2<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>image1 and image2 are now identical.</p>\n"},{"short":"<p>}</p>\n","desc":"<p>This allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.</p>\n"},{"short":"<p>}\n\\name Operators\n{</p>\n","desc":"<p>Allows you to set an image to pixels. This resizes the image to the size of the ofPixels and reallocates all the of the data within the image.</p>\n"},{"syntax":"resetAnchor()","name":"resetAnchor","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Removes anchor positioning.</p>\n<p>Resets the anchor to (0, 0) so the image will be drawn from its\nupper left hand corner.</p>\n","desc":"<p>This removes any anchor positioning, meaning that the ofImage will be draw with the upper left hand corner at the point passed into draw().</p>\n"},{"syntax":"resize(newWidth, newHeight)","name":"resize","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> newWidth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> newHeight","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Resizes the image to a new size (w, h); Can be used to scale up\nor down an image.</p>\n<p><strong>Parameters:</strong></p>\n<p>newWidth New width of image.</p>\n<p>newHeight New height of image.</p>\n","desc":"<p>Resizes the image to a new size (w, h); Can be used to scale up or down an image.</p>\n"},{"short":"","desc":""},{"syntax":"rotate90(rotation)","name":"rotate90","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> rotation","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates the image by a multiple of 90 degrees.</p>\n<p><strong>Parameters:</strong></p>\n<p>rotation Amount to rotate in multiples of 90. For instance, if you pass\nin 2, then the image will be rotated 180 degrees.</p>\n","desc":"<p>Rotates the image by a multiple of 90 degrees, for instance, if you pass in 2, then the image will be rotated 180 degrees.</p>\n"},{"syntax":"save(&buffer, imageFormat = OF_IMAGE_FORMAT_PNG, compressionLevel = OF_IMAGE_QUALITY_BEST)","name":"save","returns":"bool","returns_description":null,"parameters":"ofBuffer <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">,</span> ofImageFormat imageFormat<span class=\"token operator\">=</span>OF_IMAGE_FORMAT_PNG<span class=\"token punctuation\">,</span> ofImageQualityType compressionLevel<span class=\"token operator\">=</span>OF_IMAGE_QUALITY_BEST","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This saves the image to the ofBuffer passed with the image\nquality specified by compressionLevel.</p>\n<p><strong>Parameters:</strong></p>\n<p>buffer ofBuffer to save image to.</p>\n<p>compressionLevel The ofImageQualityType.</p>\n","desc":""},{"syntax":"save(&fileName, compressionLevel = OF_IMAGE_QUALITY_BEST)","name":"save","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>fileName<span class=\"token punctuation\">,</span> ofImageQualityType compressionLevel<span class=\"token operator\">=</span>OF_IMAGE_QUALITY_BEST","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Saves the image to the file path in fileName with the image\nquality specified by compressionLevel.</p>\n<p><strong>Parameters:</strong></p>\n<p>fileName Saves image to this path, relative to the data folder.</p>\n<p>compressionLevel The ofImageQualityType.</p>\n","desc":""},{"syntax":"setAnchorPercent(xPct, yPct)","name":"setAnchorPercent","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> xPct<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yPct","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Change the drawing anchor from top-left corner to a position\nspecified by xPct and yPct.</p>\n<p>Changes the drawing position specified by draw() from the normal top-\nleft corner of the image to a position specified by xPct and yPct in\nrelation to the dimensions of the image. This can be useful  for\naligning and centering images as well as rotating an image around its\ncenter. Note: range of  xPct and yPct is 0.0 to 1.0. For xPct, 1.0\nrepresents the width of the image. For yPct, 1.0 represents  the\nheight of the image. These values are not capped.</p>\n<p><strong>Parameters:</strong></p>\n<p>xPct X position of the new anchor, specified as a percent of the width of the image.</p>\n<p>yPct Y position of the new anchor, specified as a percent of the height of the image.</p>\n","desc":"<p>Changes the drawing position specified by draw() from the normal top-left corner of the image to a position specified by xPct and yPct in relation to the dimensions of the image. This can be useful for aligning and centering images as well as rotating an image around its center.</p>\n<p>Note: range of xPct and yPct is 0.0 to 1.0. For xPct, 1.0 represents the width of the image. For yPct, 1.0 represents the height of the image. These values are not capped.</p>\n<p>For example to draw an image so that its center is at 100, 100:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To rotate an image around its center at 100, 100:</p>\n<pre><code><span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofRotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To align the right side of an image with the right edge of the window:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"setAnchorPoint(x, y)","name":"setAnchorPoint","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Changes drawing position from top-left corner to position specified by x,y.</p>\n<p>Changes the drawing position specified by draw() from the normal top-\nleft corner of the image to a  position specified by x and y, measured\nin pixels. This can be useful for aligning and centering  images as\nwell as rotating an image around its center.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position of the new anchor.</p>\n<p>y Y position of the new anchor.</p>\n","desc":"<p>Changes the drawing position specified by draw() from the normal top-left corner of the image to a position specified by x and y, measured in pixels. This can be useful for aligning and centering images as well as rotating an image around its center.</p>\n<p>Note: see also setAnchorPercent() if you want to specify the anchor as a percentage of the image size.</p>\n<p>For example to draw an image so that its center is at 100, 100:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> myImage<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To rotate an image around its center at 100, 100:</p>\n<pre><code><span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofRotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> myImage<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To align the right side of an image with the right edge of the window:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"short":"<p>Sets all pixels to a color.</p>\n<p><strong>Parameters:</strong></p>\n<p>color Color to set pixel to.</p>\n","desc":""},{"short":"<p>Sets the pixel at the given pixel buffer index</p>\n<p><strong>Parameters:</strong></p>\n<p>index Index of pixel to set.</p>\n<p>color Color to set pixel to.</p>\n","desc":""},{"short":"<p>Sets the pixel at the x,y position passed in.</p>\n<p>The ofColor type needs to match the ofImage type, i.e. ofFloatImage\nrequires that you use ofFloatPixels.</p>\n<p><strong>Parameters:</strong></p>\n<p>x x position of pixel.</p>\n<p>y y position of pixel.</p>\n<p>color Color to set pixel to.</p>\n","desc":"<p>This sets the pixel at the x,y position passed in. The ofColor type needs to match the ofImage type, i.e. ofFloatImage requires that you use ofFloatPixels.</p>\n"},{"syntax":"setCompression(compression)","name":"setCompression","returns":"void","returns_description":null,"parameters":"ofTexCompression compression","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This sets the compression level used when creating mipmaps for\nthe ofTexture contained by the ofImage.</p>\n<p><strong>Parameters:</strong></p>\n<p>compression The ofTexCompression to set.</p>\n","desc":"<p>This sets the compression level used when creating mipmaps for the ofTexture contained by the ofImage. This is quite different than the ofImageQualityType image quality parameter used in saveImage(). The different texture compression levels are:\nOF_COMPRESS_NONE,\nOF_COMPRESS_SRGB,\nOF_COMPRESS_ARB</p>\n"},{"short":"<p>Set the pixels of the image from an ofPixels instance.</p>\n<p>Set the pixels of the image from an ofPixels instance, for an\nofFloatImage these need to be ofFloatPixels, for an ofImage these need\nto be unsigned chars.</p>\n","desc":"<p>Set the pixels of the image from an ofPixels instance, for an ofFloatImage these need to be ofFloatPixels, for an ofImage these need to be unsigned chars. The w and h values are important so that the correct dimensions are set in the image. This assumes that you're setting the pixels from 0,0 or the upper left hand corner of the image.\nThe bOrderIsRGB flag allows you pass in pixel data that is BGR by setting bOrderIsRGB=false.</p>\n"},{"syntax":"setFromPixels(*pixels, w, h, type, bOrderIsRGB = true)","name":"setFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span>pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> ofImageType type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bOrderIsRGB<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the pixels of the image from an array of values.</p>\n<p>Set the pixels of the image from an array of values, for an\nofFloatImage these need to be floats, for an ofImage  these need to be\nunsigned chars. The w and h values are important so that the correct\ndimensions are set in the  image. This assumes that you're setting the\npixels from 0,0 or the upper left hand corner of the image. The\nbOrderIsRGB flag allows you pass in pixel data that is BGR by setting\nbOrderIsRGB=false.</p>\n<p><strong>Parameters:</strong></p>\n<p>pixels Array of pixel values.</p>\n<p>w Width of image being passed in.</p>\n<p>h Height of image being passed in.</p>\n<p>type The image type can be OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, or OF_IMAGE_COLOR_ALPHA.</p>\n<p>bOrderIsRGB Pass in pixel data that is BGR by setting bOrderIsRGB=false.</p>\n","desc":"<p>Set the pixels of the image from an array of values, for an ofFloatImage these need to be floats, for an ofImage these need to be unsigned chars. The w and h values are important so that the correct dimensions are set in the image. This assumes that you're setting the pixels from 0,0 or the upper left hand corner of the image.\nThe bOrderIsRGB flag allows you pass in pixel data that is BGR by setting bOrderIsRGB=false.</p>\n<p>Copies in the pixel data from  the 'pixels' array. Specify the corresponding width and height of the image you are passing in with 'w' and 'h'. The image type can be OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, or OF_IMAGE_COLOR_ALPHA.</p>\n<p>Note: that your array has to be at least as big as [ width * height * bytes per pixel ].</p>\n<p>If you have a grayscale image, you will have (width<em>height) number of pixels. Color images will have (width</em>height<em>3) number of pixels (interlaced R,G,B), and coloralpha images will have (width</em>height*4) number of pixels (interlaced R,G,B,A).</p>\n<p>Note: You do not need to call allocate() before calling setFromPixels() as setFromPixels() re-allocates itself if needed.</p>\n"},{"syntax":"setImageType(type)","name":"setImageType","returns":"void","returns_description":null,"parameters":"ofImageType type","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set type of image to one of the following: OF_IMAGE_GRAYSCALE,\nOF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA</p>\n<p>This does cause the image to be reallocated and the texture to be\nupdated, so it can be an expensive operation  if done frequently.\nConverting down, for example from color to grayscale, loses\ninformation and is a destructive change.</p>\n<p><strong>Parameters:</strong></p>\n<p>type The type of image, one of the following:\n<code>OF_IMAGE_GRAYSCALE</code>, <code>OF_IMAGE_COLOR</code>, <code>OF_IMAGE_COLOR_ALPHA</code></p>\n","desc":"<p>Set the type of image to one of the following: OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA. This does cause the image to be reallocated and the texture to be updated, so it can be an expensive operation if done frequently. Converting down, for example from color to grayscale, loses information and is a destructive change.</p>\n<p>For example, you can load in a color image, and convert it to grayscale:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>somethingColor<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">setImageType</span><span class=\"token punctuation\">(</span>OF_IMAGE_GRAYSCALE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// now I am grayscale;</span>\n</code></pre>\n"},{"syntax":"setUseTexture(bUse)","name":"setUseTexture","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bUse","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Turns on or off the allocation and use of a texture.</p>\n<p><strong>Parameters:</strong></p>\n<p>bUse Allocate and use a texture or not.</p>\n","desc":"<p>If you set the ofImage to not use a texture it will contain the pixels of the image but cannot be drawn to the screen without copying its data into an ofTexture instance.</p>\n<p>This turns on or off the allocation and use of a texture. any time you change the image (loading, resizing, converting the type), ofImage will upload data to an opengl texture. It may not be necessary, though, and it could be that you need to save memory on the graphics card, or that you don't need to draw this image on the screen. You can call this even before you load an image in to OF:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setUseTexture</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>blah<span class=\"token punctuation\">.</span>gif<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Since in the majority of cases, ofImages will be loaded in and drawn onscreen, the default is set to use a texture.</p>\n"},{"syntax":"unbind(textureLocation = 0)","name":"unbind","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> textureLocation<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Unbinds the ofTexture instance that the ofImage contains.</p>\n<p>Call this after you call bind().</p>\n","desc":"<p>This unbinds the ofTexture instance that the ofImage contains. Call this after you call bind().</p>\n"},{"syntax":"unloadTexture()","name":"unloadTexture","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"update()","name":"update","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Call to ensure that changes to pixels are reflected in the ofTexture of the image.</p>\n<p>Many of the ofImage methods call this after they change the pixels,\nbut if you directly manipulate  the pixels of the ofImage, then you\nshould make sure to call update() before trying to draw the  texture\nof the image to the screen.</p>\n","desc":"<p>This method should be called after you update the pixels of the image and want to ensure that the changes to the pixels are reflected in the ofTexture of the image. Many of the ofImage methods call this after they change the pixels, but if you directly manipulate the pixels of the ofImage, then you should make sure to call update() before trying to draw the texture of the image to the screen.</p>\n"},{"syntax":"~ofImage_()","name":"~ofImage_","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"bUseTexture","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bpp","type":"int","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; Bits per image pixel.</p>\n","desc":"<p>Bytes per pixels of the image. This will be 3 for OF_IMAGE_COLOR with unsigned char pixels and 12 for an OF_COLOR_IMAGE with float pixels.</p>\n"},{"name":"height","type":"int","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; Image Height in pixels.</p>\n","desc":"<p>Height of the image in pixels.</p>\n"},{"name":"pixels","type":"ofPixels","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"tex","type":"ofTexture","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"type","type":"int","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; Image type.</p>\n","desc":"<p>Returns the type of image, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA, or OF_IMAGE_GRAYSCALE</p>\n"},{"name":"width","type":"int","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; Image width in pixels.</p>\n","desc":"<p>Width of the image in pixels.</p>\n"},{}],"document":"<p>#class ofImage_</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: True</em>\n<em>extends: ofBaseImage</em>&lt;PixelType&gt;_\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>A class representing an image using memory and gpu based pixels.\n\\tparam PixelType The data type used to represent a single pixel value.</p>\n<p>##Description</p>\n<p>The ofImage is a useful object for loading, saving and drawing images in openFrameworks. ofImage is a convenient class that lets you both draw images to the screen and manipulate their pixel data. The ofImage allows you to load an image from disk, manipulate the pixels, and create an OpenGL texture that you can display and manipulate on the graphics card. Loading a file into the ofImage allocates an ofPixels object and creates the ofTexture to display the pixels.</p>\n<p>ofImage uses a library called &quot;freeImage&quot; under the hood.</p>\n<p>##Methods</p>\n<p>###void allocate(w, h, type)</p>\n<p>&lt;!--\n<em>syntax: allocate(w, h, type)</em>\n<em>name: allocate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int w, int h, ofImageType type</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This allocates space in the ofImage, both the ofPixels and the\nofTexture that the ofImage contains.</p>\n<p>You don't need to call this before loading an image, but for when you\nwant to allocate. space ahead of when you are going to use the image.</p>\n<p>The types of images can be <code>OF_IMAGE_COLOR</code>, <code>OF_IMAGE_COLOR_ALPHA</code>\nor <code>OF_IMAGE_GRAYSCALE</code>.</p>\n<p>You need to call update() to update the texture after updating\nthe pixels manually.</p>\n<p><strong>Parameters:</strong></p>\n<p>w Width of image to allocate.</p>\n<p>h Height of image to allocate.</p>\n<p>type The ofImageType.</p>\n<p>_description: _</p>\n<p>This allocates space in the ofImage, both the ofPixels and the ofTexture that the ofImage contains.</p>\n<pre><code>img<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">,</span> OF_IMAGE_COLOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">18</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make some op-art</span>\n    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>It allocates an image of width (w) and height (h). The type can be of three types: OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA. You don't need to call this before loading an image, but for when you want to allocate space ahead of when you are going to use the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void bind(textureLocation = 0)</p>\n<p>&lt;!--\n<em>syntax: bind(textureLocation = 0)</em>\n<em>name: bind</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int textureLocation=0</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Binds the oftexture instance that the ofImage contains so that\nit can be used for advanced drawing.</p>\n<p>_description: _</p>\n<p>This binds the ofTexture instance that the ofImage contains so that it can be used for advanced drawing</p>\n<pre><code><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> OF_IMAGE_COLOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        img<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">18</span><span class=\"token punctuation\">.</span>f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>OF_PRIMITIVE_TRIANGLE_STRIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">410</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">410</span><span class=\"token punctuation\">,</span> <span class=\"token number\">410</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">410</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofBackground</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// background white</span>\n\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    img<span class=\"token punctuation\">.</span><span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void changeTypeOfPixels(&amp;pix, type)</p>\n<p>&lt;!--\n<em>syntax: changeTypeOfPixels(&amp;pix, type)</em>\n<em>name: changeTypeOfPixels</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;pix, ofImageType type</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\cond INTERNAL</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clear()</p>\n<p>&lt;!--\n<em>syntax: clear()</em>\n<em>name: clear</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This clears the texture and pixels contained within the ofImage.</p>\n<p>_description: _</p>\n<p>This clears the texture and pixels contained within the ofImage.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clone(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: clone(&amp;mom)</em>\n<em>name: clone</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: const ofImage</em>&lt; SrcType &gt; &amp;mom</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.</p>\n<pre><code>ofImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void crop(x, y, w, h)</p>\n<p>&lt;!--\n<em>syntax: crop(x, y, w, h)</em>\n<em>name: crop</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int x, int y, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This crops the image to the w,h passed in from the x,y position.</p>\n<p>This does an in place crop and <strong>allocates memory</strong>.</p>\n<p><strong>Parameters:</strong></p>\n<p>x x position of upper-left corner of region to crop.</p>\n<p>y y position of upper-left corner of region to crop.</p>\n<p>w Width of region to crop.</p>\n<p>h Height of region to crop.</p>\n<p>_description: _</p>\n<p>This crops the image to the w,h passed in from the x,y position.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void cropFrom(&amp;otherImage, x, y, w, h)</p>\n<p>&lt;!--\n<em>syntax: cropFrom(&amp;otherImage, x, y, w, h)</em>\n<em>name: cropFrom</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: const ofImage</em>&lt; PixelType &gt; &amp;otherImage, int x, int y, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Replaces region in caller image specified by w,h,x,y with pixels from otherImage.</p>\n<p>The w,h are measured from the x,y, so passing 100, 100, 300, 300 will grab\na 300x300 pixel block of data starting from 100, 100.</p>\n<p><strong>Parameters:</strong></p>\n<p>otherImage Image to crop from.</p>\n<p>x x position of upper-left corner of region to crop.</p>\n<p>y y position of upper-left corner of region to crop.</p>\n<p>w Width of region to crop.</p>\n<p>h Height of region to crop.</p>\n<p>_description: _</p>\n<p>This crops another image into the image the cropFrom is being called on to the w,h passed in from the x,y position. The w,h are measured from the x,y, so passing 100, 100, 300, 300 will grab a 300x300 pixel block of data starting from 100, 100.</p>\n<pre><code>ofImage img1<span class=\"token punctuation\">,</span> img2<span class=\"token punctuation\">;</span>\nimg1<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>anImage<span class=\"token punctuation\">.</span>png<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimg2<span class=\"token punctuation\">.</span><span class=\"token function\">cropFrom</span><span class=\"token punctuation\">(</span>img1<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;pos)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;pos)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;pos</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;pos, w, h)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;pos, w, h)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;pos, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(x, y)</p>\n<p>&lt;!--\n<em>syntax: draw(x, y)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw the image at it's normal size.</p>\n<p><strong>Parameters:</strong></p>\n<p>x Draw position on the x axis.</p>\n<p>y Draw position on the y axis.</p>\n<p>_description: _</p>\n<p>Draws the ofImage into the x,y location using the default height and width of the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(x, y, w, h)</p>\n<p>&lt;!--\n<em>syntax: draw(x, y, w, h)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw the image at a given size.</p>\n<p><strong>Parameters:</strong></p>\n<p>x Draw position on the x axis.</p>\n<p>y Draw position on the y axis.</p>\n<p>w Draw width.</p>\n<p>h Draw height.</p>\n<p>_description: _</p>\n<p>Draws the ofImage into the x,y location and with the width and height, with any attendant scaling that may occur from fitting the ofImage into the width and height.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(x, y, z)</p>\n<p>&lt;!--\n<em>syntax: draw(x, y, z)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw the texture at it's normal size with depth.</p>\n<p><strong>Parameters:</strong></p>\n<p>x Draw position on the x axis.</p>\n<p>y Draw position on the y axis.</p>\n<p>z Draw position on the z axis.</p>\n<p>_description: _</p>\n<p>Draws the ofImage into the x,y,z location with the default height and width. You should ensure that you turn on depth sorting using glEnable(GL_DEPTH) before trying to draw multiple objects into z-space.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(x, y, z, w, h)</p>\n<p>&lt;!--\n<em>syntax: draw(x, y, z, w, h)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw the image at a given size with depth.</p>\n<p><strong>Parameters:</strong></p>\n<p>x Draw position on the x axis.</p>\n<p>y Draw position on the y axis.</p>\n<p>z Draw position on the z axis.</p>\n<p>w Draw width.</p>\n<p>h Draw height.</p>\n<p>_description: _</p>\n<p>Draws the ofImage into the x,y,z location and with the width and height, with any attendant scaling that may occur from fitting the ofImage into the width and height. You should ensure that you turn on depth sorting using glEnable(GL_DEPTH) before trying to draw multiple objects into z-space.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSubsection(x, y, w, h, sx, sy)</p>\n<p>&lt;!--\n<em>syntax: drawSubsection(x, y, w, h, sx, sy)</em>\n<em>name: drawSubsection</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float w, float h, float sx, float sy</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a subsection of the image.</p>\n<p>This functions like a clipping mask. Does not altering any pixel\ndata.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position to draw cropped image at.</p>\n<p>y Y position to draw cropped image at.</p>\n<p>w Width of subsection to draw.</p>\n<p>h Height of subsection to draw.</p>\n<p>sx X position in image to begin cropping from.</p>\n<p>sy Y position in image to begin cropping from.</p>\n<p>_description: _</p>\n<p>Draws a subsection of the image (functions like a clipping mask) without altering any pixel data. (x,y) are the position to draw the cropped image at, (w,h) is the size of the subsection to draw and the size to crop (these can be different using the function below with sw,sh) and (sx,sy) are the source pixel positions in the image to begin cropping from.</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// crop the image from the mouse position to 100x100 pixels and draw it at 0,0</span>\nimg<span class=\"token punctuation\">.</span><span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>An example showing how to use drawSubsection can be found in of_release &gt; examples &gt; graphics &gt; imageSubsectionExample</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSubsection(x, y, w, h, sx, sy, sw, sh)</p>\n<p>&lt;!--\n<em>syntax: drawSubsection(x, y, w, h, sx, sy, sw, sh)</em>\n<em>name: drawSubsection</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float w, float h, float sx, float sy, float sw, float sh</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a subsection of the image.</p>\n<p>This functions like a clipping mask. Does not altering any pixel\ndata.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position to draw cropped image at.</p>\n<p>y Y position to draw cropped image at.</p>\n<p>w Width of subsection to draw.</p>\n<p>h Height of subsection to draw.</p>\n<p>sx X position in image to begin cropping from.</p>\n<p>sy Y position in image to begin cropping from.</p>\n<p>sw Source width of cropped area.</p>\n<p>sh Source height of cropped area.</p>\n<p>_description: _</p>\n<p>(sw,sh) indicate the source width and height of the cropped area and the (w,h) indicate the size to draw the cropped area at.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSubsection(x, y, z, w, h, sx, sy)</p>\n<p>&lt;!--\n<em>syntax: drawSubsection(x, y, z, w, h, sx, sy)</em>\n<em>name: drawSubsection</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float w, float h, float sx, float sy</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a subsection of the image.</p>\n<p>This functions like a clipping mask. Does not altering any pixel\ndata.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position to draw cropped image at.</p>\n<p>y Y position to draw cropped image at.</p>\n<p>z Z position to draw cropped image at.</p>\n<p>w Width of subsection to draw.</p>\n<p>h Height of subsection to draw.</p>\n<p>sx X position in image to begin cropping from.</p>\n<p>sy Y position in image to begin cropping from.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawSubsection(x, y, z, w, h, sx, sy, sw, sh)</p>\n<p>&lt;!--\n<em>syntax: drawSubsection(x, y, z, w, h, sx, sy, sw, sh)</em>\n<em>name: drawSubsection</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z, float w, float h, float sx, float sy, float sw, float sh</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draws a subsection of the image.</p>\n<p>This functions like a clipping mask. Does not altering any pixel\ndata.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position to draw cropped image at.</p>\n<p>y Y position to draw cropped image at.</p>\n<p>z Z position to draw cropped image at.</p>\n<p>w Width of subsection to draw.</p>\n<p>h Height of subsection to draw.</p>\n<p>sx X position in image to begin cropping from.</p>\n<p>sy Y position in image to begin cropping from.</p>\n<p>sw Source width of cropped area.</p>\n<p>sh Source height of cropped area.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; getColor(index)</p>\n<p>&lt;!--\n<em>syntax: getColor(index)</em>\n<em>name: getColor</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: int index</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This returns the ofColor representing the pixels at the index\npassed in.</p>\n<p><strong>Parameters:</strong></p>\n<p>index index into pixel data</p>\n<p><strong>Returns</strong>: The ofColor representing the pixels at the index position passed in.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofColor_&lt; PixelType &gt; getColor(x, y)</p>\n<p>&lt;!--\n<em>syntax: getColor(x, y)</em>\n<em>name: getColor</em>\n<em>returns: ofColor</em>&lt; PixelType &gt;_\n_returns_description: _\n<em>parameters: int x, int y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This returns the ofColor representing the pixels at the x and y\nposition passed in.</p>\n<p><strong>Parameters:</strong></p>\n<p>x x position of pixel</p>\n<p>y y position of pixel</p>\n<p><strong>Returns</strong>: The ofColor representing the pixels at the x and y position passed in.</p>\n<p>_description: _</p>\n<p>This returns the ofColor representing the pixels at the x and y position passed in.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHeight()</p>\n<p>&lt;!--\n<em>syntax: getHeight()</em>\n<em>name: getHeight</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get height of image as a float.</p>\n<p><strong>Returns</strong>: Height of image as float.</p>\n<p>_description: _</p>\n<p>Returns the height of the image in pixels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofImageType getImageType()</p>\n<p>&lt;!--\n<em>syntax: getImageType()</em>\n<em>name: getImageType</em>\n<em>returns: ofImageType</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels_&lt; PixelType &gt; &amp; getPixels()</p>\n<p>&lt;!--\n<em>syntax: getPixels()</em>\n<em>name: getPixels</em>\n<em>returns: ofPixels</em>&lt; PixelType &gt; &amp;_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a raw pointer to the pixel data.</p>\n<p>This function will give you access to a continuous block of pixels.\nyou can grab the data and do what you like with it. If you have a\ngrayscale image, you will have (width<em>height)  number of pixels. Color\nimages will have (width</em>height<em>3) number of pixels (interlaced R,G,B),\nand coloralpha images will have (width</em>height*4) number of pixels\n(interlaced R,G,B,A).</p>\n<p><strong>Warning</strong>: This is a raw pointer. It's up to you to get this right.</p>\n<p><strong>Returns</strong>: A raw pointer to the pixel data.</p>\n<p>_description: _</p>\n<p>This returns a raw pointer to the pixel data.</p>\n<p>This function will give you access to a continuous block of pixels. you can grab the data and do what you like with it. If you have a grayscale image, you will have (width<em>height) number of pixels. Color images will have (width</em>height<em>3) number of pixels (interlaced R,G,B), and coloralpha images will have (width</em>height*4) number of pixels (interlaced R,G,B,A).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofPixels_&lt; PixelType &gt; &amp; getPixels()</p>\n<p>&lt;!--\n<em>syntax: getPixels()</em>\n<em>name: getPixels</em>\n<em>returns: const ofPixels</em>&lt; PixelType &gt; &amp;_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofTexture &amp; getTexture()</p>\n<p>&lt;!--\n<em>syntax: getTexture()</em>\n<em>name: getTexture</em>\n<em>returns: ofTexture &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a reference to the texture that the ofImage contains.</p>\n<p>You can use this to directly manipulate the texture itself, but keep in\nmind that if you manipulate the texture directly, there is no simple way\nto copy the data from the texture back to the pixels and keep the ofImage in sync.</p>\n<p><strong>Returns</strong>: A reference to the texture that the ofImage contains.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofTexture &amp; getTexture()</p>\n<p>&lt;!--\n<em>syntax: getTexture()</em>\n<em>name: getTexture</em>\n<em>returns: const ofTexture &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a const reference to the texture that the ofImage contains.</p>\n<p><strong>Returns</strong>: A const reference to the texture that the ofImage contains.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getWidth()</p>\n<p>&lt;!--\n<em>syntax: getWidth()</em>\n<em>name: getWidth</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get width of image as a float.</p>\n<p><strong>Returns</strong>: Width of image as float.</p>\n<p>_description: _</p>\n<p>Returns the width of the image in pixels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void grabScreen(x, y, w, h)</p>\n<p>&lt;!--\n<em>syntax: grabScreen(x, y, w, h)</em>\n<em>name: grabScreen</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int x, int y, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Grabs pixels from the opengl window specified by the region\n(x, y, w, h) and turns them into an image.</p>\n<p>It resizes or allocates the ofImage if it's necessary.</p>\n<p><strong>Warning</strong>: Uses glReadPixels() which can be slow.</p>\n<p><strong>Parameters:</strong></p>\n<p>x x position of upper-left corner of region.</p>\n<p>y y position of upper-left corner of region.</p>\n<p>w Width of region.</p>\n<p>h Height of region.</p>\n<p>_description: _</p>\n<p>Grabs pixels from the opengl window specified by the region (x, y, w, h) and turns them into an image. It resizes or allocates the ofImage if it's necessary.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isAllocated()</p>\n<p>&lt;!--\n<em>syntax: isAllocated()</em>\n<em>name: isAllocated</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Whether the image has been allocated either by a call to\nallocate or by loading pixel data into the image.</p>\n<p><strong>Returns</strong>: true if the image has been allocated.</p>\n<p>_description: _</p>\n<p>Returns whether the image has been allocated either by a call to allocate or by loading pixel data into the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isUsingTexture()</p>\n<p>&lt;!--\n<em>syntax: isUsingTexture()</em>\n<em>name: isUsingTexture</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns whether the ofImage has a texture or not.</p>\n<p>If the ofImage doesn't have a texture, nothing will be drawn to the screen.</p>\n<p><strong>Returns</strong>: true if the ofImage is using a texture.</p>\n<p>_description: _</p>\n<p>Returns whether the ofImage has a texture or not. If not, nothing will be drawn to the screen if the draw() method is called.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool load(&amp;buffer, &amp;settings)</p>\n<p>&lt;!--\n<em>syntax: load(&amp;buffer, &amp;settings)</em>\n<em>name: load</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofBuffer &amp;buffer, const ofImageLoadSettings &amp;settings</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Loads an image from an ofBuffer instance created by, for\ninstance, ofFile::readToBuffer().</p>\n<p>This actually loads the image data into an ofPixels object and then\ninto the texture.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool load(&amp;fileName, &amp;settings)</p>\n<p>&lt;!--\n<em>syntax: load(&amp;fileName, &amp;settings)</em>\n<em>name: load</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;fileName, const ofImageLoadSettings &amp;settings</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Loads an image given by fileName.</p>\n<p><strong>Parameters:</strong></p>\n<p>fileName Program looks for image given by fileName, relative to\nthe data folder.</p>\n<p>settings Load options</p>\n<p><strong>Returns</strong>: true if image loaded correctly.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void mirror(vertical, horizontal)</p>\n<p>&lt;!--\n<em>syntax: mirror(vertical, horizontal)</em>\n<em>name: mirror</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool vertical, bool horizontal</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This reflects the pixels of the image across the vertical and/or horizontal axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>vertical Set to true to reflect image across vertical axis.</p>\n<p>horizontal Set to true to reflect image across horizontal axis.</p>\n<p>_description: _</p>\n<p>This reflects the pixels of the image across the vertical and/or horizontal axis.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofImage_(&amp;&amp;mom)</h3>\n<p>&lt;!--\n<em>syntax: ofImage</em>(&amp;&amp;mom)_\n<em>name: ofImage</em>_\n_returns: _\n<em>returns_description: _\n<em>parameters: ofImage</em>&lt; PixelType &gt; &amp;&amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This creates an ofImage from an ofFile instance.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofImage_(&amp;fileName, &amp;settings)</h3>\n<p>&lt;!--\n<em>syntax: ofImage</em>(&amp;fileName, &amp;settings)_\n<em>name: ofImage</em>_\n_returns: _\n_returns_description: _\n<em>parameters: const filesystem::path &amp;fileName, const ofImageLoadSettings &amp;settings</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This creates an ofImage from a file which can be a local string or a URL, allocating space for the pixels, and copying the pixels into the texture that the ofImage instance contains.</p>\n<pre><code>ofImage <span class=\"token function\">img</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>www<span class=\"token punctuation\">.</span>openframeworks<span class=\"token punctuation\">.</span>cc<span class=\"token operator\">/</span>wp<span class=\"token operator\">-</span>content<span class=\"token operator\">/</span>themes<span class=\"token operator\">/</span>ofw<span class=\"token operator\">/</span>images<span class=\"token operator\">/</span>ofw<span class=\"token operator\">-</span>logo<span class=\"token punctuation\">.</span>gif<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>or</p>\n<pre><code>ofImage <span class=\"token function\">img</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>anImage<span class=\"token punctuation\">.</span>png<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// assumes this is in bin/data</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofImage_(&amp;mom)</h3>\n<p>&lt;!--\n<em>syntax: ofImage</em>(&amp;mom)_\n<em>name: ofImage</em>_\n_returns: _\n<em>returns_description: _\n<em>parameters: const ofImage</em>&lt; PixelType &gt; &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>The copy constructor. Pass in another image and it copies it. This allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.</p>\n<pre><code>image1<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>face<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofImage <span class=\"token function\">image2</span><span class=\"token punctuation\">(</span>image1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>image1 and image2 are now identical.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofImage_(&amp;mom)</h3>\n<p>&lt;!--\n<em>syntax: ofImage</em>(&amp;mom)_\n<em>name: ofImage</em>_\n_returns: _\n<em>returns_description: _\n<em>parameters: const ofImage</em>&lt; SrcType &gt; &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofImage_(&amp;pix)</h3>\n<p>&lt;!--\n<em>syntax: ofImage</em>(&amp;pix)_\n<em>name: ofImage</em>_\n_returns: _\n<em>returns_description: _\n<em>parameters: const ofPixels</em>&lt; PixelType &gt; &amp;pix</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This creates an ofImage from an ofPixels object, allocating space for the pixels, and copying the pixels into the texture that the ofImage instance contains.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofImage_()</h3>\n<p>&lt;!--\n<em>syntax: ofImage</em>()_\n<em>name: ofImage</em>_\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\name Image Construction\n{</p>\n<p>_description: _</p>\n<p>This creates an ofImage but doesn't allocate any memory for it, so you can't use the image immediately after creating it.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofImage_&lt; PixelType &gt; &amp; operator=(&amp;&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: ofImage</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: ofImage</em>&lt; PixelType &gt; &amp;&amp;mom</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofImage_&lt; PixelType &gt; &amp; operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: ofImage</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: const ofImage</em>&lt; PixelType &gt; &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.</p>\n<p>Makes the current ofImage a copy of another ofImage. Same as clone().</p>\n<pre><code>\nimage2<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>face<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nimage1 <span class=\"token operator\">=</span> image2<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>image1 and image2 are now identical.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofImage_&lt; PixelType &gt; &amp; operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: ofImage</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: const ofImage</em>&lt; SrcType &gt; &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}</p>\n<p>_description: _</p>\n<p>This allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofImage_&lt; PixelType &gt; &amp; operator=(&amp;pixels)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;pixels)</em>\n<em>name: operator=</em>\n<em>returns: ofImage</em>&lt; PixelType &gt; &amp;_\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;pixels</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}\n\\name Operators\n{</p>\n<p>_description: _</p>\n<p>Allows you to set an image to pixels. This resizes the image to the size of the ofPixels and reallocates all the of the data within the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resetAnchor()</p>\n<p>&lt;!--\n<em>syntax: resetAnchor()</em>\n<em>name: resetAnchor</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Removes anchor positioning.</p>\n<p>Resets the anchor to (0, 0) so the image will be drawn from its\nupper left hand corner.</p>\n<p>_description: _</p>\n<p>This removes any anchor positioning, meaning that the ofImage will be draw with the upper left hand corner at the point passed into draw().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resize(newWidth, newHeight)</p>\n<p>&lt;!--\n<em>syntax: resize(newWidth, newHeight)</em>\n<em>name: resize</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int newWidth, int newHeight</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Resizes the image to a new size (w, h); Can be used to scale up\nor down an image.</p>\n<p><strong>Parameters:</strong></p>\n<p>newWidth New width of image.</p>\n<p>newHeight New height of image.</p>\n<p>_description: _</p>\n<p>Resizes the image to a new size (w, h); Can be used to scale up or down an image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resizePixels(&amp;pix, newWidth, newHeight)</p>\n<p>&lt;!--\n<em>syntax: resizePixels(&amp;pix, newWidth, newHeight)</em>\n<em>name: resizePixels</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: ofPixels</em>&lt; PixelType &gt; &amp;pix, int newWidth, int newHeight</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotate90(rotation)</p>\n<p>&lt;!--\n<em>syntax: rotate90(rotation)</em>\n<em>name: rotate90</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int rotation</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotates the image by a multiple of 90 degrees.</p>\n<p><strong>Parameters:</strong></p>\n<p>rotation Amount to rotate in multiples of 90. For instance, if you pass\nin 2, then the image will be rotated 180 degrees.</p>\n<p>_description: _</p>\n<p>Rotates the image by a multiple of 90 degrees, for instance, if you pass in 2, then the image will be rotated 180 degrees.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool save(&amp;buffer, imageFormat = OF_IMAGE_FORMAT_PNG, compressionLevel = OF_IMAGE_QUALITY_BEST)</p>\n<p>&lt;!--\n<em>syntax: save(&amp;buffer, imageFormat = OF_IMAGE_FORMAT_PNG, compressionLevel = OF_IMAGE_QUALITY_BEST)</em>\n<em>name: save</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: ofBuffer &amp;buffer, ofImageFormat imageFormat=OF_IMAGE_FORMAT_PNG, ofImageQualityType compressionLevel=OF_IMAGE_QUALITY_BEST</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This saves the image to the ofBuffer passed with the image\nquality specified by compressionLevel.</p>\n<p><strong>Parameters:</strong></p>\n<p>buffer ofBuffer to save image to.</p>\n<p>compressionLevel The ofImageQualityType.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool save(&amp;fileName, compressionLevel = OF_IMAGE_QUALITY_BEST)</p>\n<p>&lt;!--\n<em>syntax: save(&amp;fileName, compressionLevel = OF_IMAGE_QUALITY_BEST)</em>\n<em>name: save</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;fileName, ofImageQualityType compressionLevel=OF_IMAGE_QUALITY_BEST</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Saves the image to the file path in fileName with the image\nquality specified by compressionLevel.</p>\n<p><strong>Parameters:</strong></p>\n<p>fileName Saves image to this path, relative to the data folder.</p>\n<p>compressionLevel The ofImageQualityType.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setAnchorPercent(xPct, yPct)</p>\n<p>&lt;!--\n<em>syntax: setAnchorPercent(xPct, yPct)</em>\n<em>name: setAnchorPercent</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float xPct, float yPct</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Change the drawing anchor from top-left corner to a position\nspecified by xPct and yPct.</p>\n<p>Changes the drawing position specified by draw() from the normal top-\nleft corner of the image to a position specified by xPct and yPct in\nrelation to the dimensions of the image. This can be useful  for\naligning and centering images as well as rotating an image around its\ncenter. Note: range of  xPct and yPct is 0.0 to 1.0. For xPct, 1.0\nrepresents the width of the image. For yPct, 1.0 represents  the\nheight of the image. These values are not capped.</p>\n<p><strong>Parameters:</strong></p>\n<p>xPct X position of the new anchor, specified as a percent of the width of the image.</p>\n<p>yPct Y position of the new anchor, specified as a percent of the height of the image.</p>\n<p>_description: _</p>\n<p>Changes the drawing position specified by draw() from the normal top-left corner of the image to a position specified by xPct and yPct in relation to the dimensions of the image. This can be useful for aligning and centering images as well as rotating an image around its center.</p>\n<p>Note: range of xPct and yPct is 0.0 to 1.0. For xPct, 1.0 represents the width of the image. For yPct, 1.0 represents the height of the image. These values are not capped.</p>\n<p>For example to draw an image so that its center is at 100, 100:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To rotate an image around its center at 100, 100:</p>\n<pre><code><span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofRotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To align the right side of an image with the right edge of the window:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setAnchorPoint(x, y)</p>\n<p>&lt;!--\n<em>syntax: setAnchorPoint(x, y)</em>\n<em>name: setAnchorPoint</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Changes drawing position from top-left corner to position specified by x,y.</p>\n<p>Changes the drawing position specified by draw() from the normal top-\nleft corner of the image to a  position specified by x and y, measured\nin pixels. This can be useful for aligning and centering  images as\nwell as rotating an image around its center.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position of the new anchor.</p>\n<p>y Y position of the new anchor.</p>\n<p>_description: _</p>\n<p>Changes the drawing position specified by draw() from the normal top-left corner of the image to a position specified by x and y, measured in pixels. This can be useful for aligning and centering images as well as rotating an image around its center.</p>\n<p>Note: see also setAnchorPercent() if you want to specify the anchor as a percentage of the image size.</p>\n<p>For example to draw an image so that its center is at 100, 100:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> myImage<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To rotate an image around its center at 100, 100:</p>\n<pre><code><span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ofRotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> myImage<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  myImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To align the right side of an image with the right edge of the window:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(&amp;color)</p>\n<p>&lt;!--\n<em>syntax: setColor(&amp;color)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets all pixels to a color.</p>\n<p><strong>Parameters:</strong></p>\n<p>color Color to set pixel to.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(index, &amp;color)</p>\n<p>&lt;!--\n<em>syntax: setColor(index, &amp;color)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: int index, const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the pixel at the given pixel buffer index</p>\n<p><strong>Parameters:</strong></p>\n<p>index Index of pixel to set.</p>\n<p>color Color to set pixel to.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(x, y, &amp;color)</p>\n<p>&lt;!--\n<em>syntax: setColor(x, y, &amp;color)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: int x, int y, const ofColor</em>&lt; PixelType &gt; &amp;color</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the pixel at the x,y position passed in.</p>\n<p>The ofColor type needs to match the ofImage type, i.e. ofFloatImage\nrequires that you use ofFloatPixels.</p>\n<p><strong>Parameters:</strong></p>\n<p>x x position of pixel.</p>\n<p>y y position of pixel.</p>\n<p>color Color to set pixel to.</p>\n<p>_description: _</p>\n<p>This sets the pixel at the x,y position passed in. The ofColor type needs to match the ofImage type, i.e. ofFloatImage requires that you use ofFloatPixels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setCompression(compression)</p>\n<p>&lt;!--\n<em>syntax: setCompression(compression)</em>\n<em>name: setCompression</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofTexCompression compression</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This sets the compression level used when creating mipmaps for\nthe ofTexture contained by the ofImage.</p>\n<p><strong>Parameters:</strong></p>\n<p>compression The ofTexCompression to set.</p>\n<p>_description: _</p>\n<p>This sets the compression level used when creating mipmaps for the ofTexture contained by the ofImage. This is quite different than the ofImageQualityType image quality parameter used in saveImage(). The different texture compression levels are:\nOF_COMPRESS_NONE,\nOF_COMPRESS_SRGB,\nOF_COMPRESS_ARB</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromPixels(&amp;pixels)</p>\n<p>&lt;!--\n<em>syntax: setFromPixels(&amp;pixels)</em>\n<em>name: setFromPixels</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: const ofPixels</em>&lt; PixelType &gt; &amp;pixels</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the pixels of the image from an ofPixels instance.</p>\n<p>Set the pixels of the image from an ofPixels instance, for an\nofFloatImage these need to be ofFloatPixels, for an ofImage these need\nto be unsigned chars.</p>\n<p>_description: _</p>\n<p>Set the pixels of the image from an ofPixels instance, for an ofFloatImage these need to be ofFloatPixels, for an ofImage these need to be unsigned chars. The w and h values are important so that the correct dimensions are set in the image. This assumes that you're setting the pixels from 0,0 or the upper left hand corner of the image.\nThe bOrderIsRGB flag allows you pass in pixel data that is BGR by setting bOrderIsRGB=false.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromPixels(*pixels, w, h, type, bOrderIsRGB = true)</p>\n<p>&lt;!--\n<em>syntax: setFromPixels(*pixels, w, h, type, bOrderIsRGB = true)</em>\n<em>name: setFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const PixelType *pixels, int w, int h, ofImageType type, bool bOrderIsRGB=true</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the pixels of the image from an array of values.</p>\n<p>Set the pixels of the image from an array of values, for an\nofFloatImage these need to be floats, for an ofImage  these need to be\nunsigned chars. The w and h values are important so that the correct\ndimensions are set in the  image. This assumes that you're setting the\npixels from 0,0 or the upper left hand corner of the image. The\nbOrderIsRGB flag allows you pass in pixel data that is BGR by setting\nbOrderIsRGB=false.</p>\n<p><strong>Parameters:</strong></p>\n<p>pixels Array of pixel values.</p>\n<p>w Width of image being passed in.</p>\n<p>h Height of image being passed in.</p>\n<p>type The image type can be OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, or OF_IMAGE_COLOR_ALPHA.</p>\n<p>bOrderIsRGB Pass in pixel data that is BGR by setting bOrderIsRGB=false.</p>\n<p>_description: _</p>\n<p>Set the pixels of the image from an array of values, for an ofFloatImage these need to be floats, for an ofImage these need to be unsigned chars. The w and h values are important so that the correct dimensions are set in the image. This assumes that you're setting the pixels from 0,0 or the upper left hand corner of the image.\nThe bOrderIsRGB flag allows you pass in pixel data that is BGR by setting bOrderIsRGB=false.</p>\n<p>Copies in the pixel data from  the 'pixels' array. Specify the corresponding width and height of the image you are passing in with 'w' and 'h'. The image type can be OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, or OF_IMAGE_COLOR_ALPHA.</p>\n<p>Note: that your array has to be at least as big as [ width * height * bytes per pixel ].</p>\n<p>If you have a grayscale image, you will have (width<em>height) number of pixels. Color images will have (width</em>height<em>3) number of pixels (interlaced R,G,B), and coloralpha images will have (width</em>height*4) number of pixels (interlaced R,G,B,A).</p>\n<p>Note: You do not need to call allocate() before calling setFromPixels() as setFromPixels() re-allocates itself if needed.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setImageType(type)</p>\n<p>&lt;!--\n<em>syntax: setImageType(type)</em>\n<em>name: setImageType</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofImageType type</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set type of image to one of the following: OF_IMAGE_GRAYSCALE,\nOF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA</p>\n<p>This does cause the image to be reallocated and the texture to be\nupdated, so it can be an expensive operation  if done frequently.\nConverting down, for example from color to grayscale, loses\ninformation and is a destructive change.</p>\n<p><strong>Parameters:</strong></p>\n<p>type The type of image, one of the following:\n<code>OF_IMAGE_GRAYSCALE</code>, <code>OF_IMAGE_COLOR</code>, <code>OF_IMAGE_COLOR_ALPHA</code></p>\n<p>_description: _</p>\n<p>Set the type of image to one of the following: OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA. This does cause the image to be reallocated and the texture to be updated, so it can be an expensive operation if done frequently. Converting down, for example from color to grayscale, loses information and is a destructive change.</p>\n<p>For example, you can load in a color image, and convert it to grayscale:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>somethingColor<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">setImageType</span><span class=\"token punctuation\">(</span>OF_IMAGE_GRAYSCALE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// now I am grayscale;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setUseTexture(bUse)</p>\n<p>&lt;!--\n<em>syntax: setUseTexture(bUse)</em>\n<em>name: setUseTexture</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bUse</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Turns on or off the allocation and use of a texture.</p>\n<p><strong>Parameters:</strong></p>\n<p>bUse Allocate and use a texture or not.</p>\n<p>_description: _</p>\n<p>If you set the ofImage to not use a texture it will contain the pixels of the image but cannot be drawn to the screen without copying its data into an ofTexture instance.</p>\n<p>This turns on or off the allocation and use of a texture. any time you change the image (loading, resizing, converting the type), ofImage will upload data to an opengl texture. It may not be necessary, though, and it could be that you need to save memory on the graphics card, or that you don't need to draw this image on the screen. You can call this even before you load an image in to OF:</p>\n<pre><code>myImage<span class=\"token punctuation\">.</span><span class=\"token function\">setUseTexture</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyImage<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>blah<span class=\"token punctuation\">.</span>gif<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Since in the majority of cases, ofImages will be loaded in and drawn onscreen, the default is set to use a texture.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void unbind(textureLocation = 0)</p>\n<p>&lt;!--\n<em>syntax: unbind(textureLocation = 0)</em>\n<em>name: unbind</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int textureLocation=0</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Unbinds the ofTexture instance that the ofImage contains.</p>\n<p>Call this after you call bind().</p>\n<p>_description: _</p>\n<p>This unbinds the ofTexture instance that the ofImage contains. Call this after you call bind().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void unloadTexture()</p>\n<p>&lt;!--\n<em>syntax: unloadTexture()</em>\n<em>name: unloadTexture</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void update()</p>\n<p>&lt;!--\n<em>syntax: update()</em>\n<em>name: update</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Call to ensure that changes to pixels are reflected in the ofTexture of the image.</p>\n<p>Many of the ofImage methods call this after they change the pixels,\nbut if you directly manipulate  the pixels of the ofImage, then you\nshould make sure to call update() before trying to draw the  texture\nof the image to the screen.</p>\n<p>_description: _</p>\n<p>This method should be called after you update the pixels of the image and want to ensure that the changes to the pixels are reflected in the ofTexture of the image. Many of the ofImage methods call this after they change the pixels, but if you directly manipulate the pixels of the ofImage, then you should make sure to call update() before trying to draw the texture of the image to the screen.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofImage_()</h3>\n<p>&lt;!--\n<em>syntax: ~ofImage</em>()_\n<em>name: ~ofImage</em>_\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###bool bUseTexture</p>\n<p>&lt;!--\n<em>name: bUseTexture</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int bpp</p>\n<p>&lt;!--\n<em>name: bpp</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; Bits per image pixel.</p>\n<p>_description: _</p>\n<p>Bytes per pixels of the image. This will be 3 for OF_IMAGE_COLOR with unsigned char pixels and 12 for an OF_COLOR_IMAGE with float pixels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int height</p>\n<p>&lt;!--\n<em>name: height</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; Image Height in pixels.</p>\n<p>_description: _</p>\n<p>Height of the image in pixels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels pixels</p>\n<p>&lt;!--\n<em>name: pixels</em>\n<em>type: ofPixels</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofTexture tex</p>\n<p>&lt;!--\n<em>name: tex</em>\n<em>type: ofTexture</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int type</p>\n<p>&lt;!--\n<em>name: type</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; Image type.</p>\n<p>_description: _</p>\n<p>Returns the type of image, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA, or OF_IMAGE_GRAYSCALE</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int width</p>\n<p>&lt;!--\n<em>name: width</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; Image width in pixels.</p>\n<p>_description: _</p>\n<p>Width of the image in pixels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofImage_\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: True_\n_extends: ofBaseImage_<PixelType>_\n-->\n\n##InlineDescription\n\nA class representing an image using memory and gpu based pixels.\n\\tparam PixelType The data type used to represent a single pixel value.\n\n\n\n\n\n##Description\n\nThe ofImage is a useful object for loading, saving and drawing images in openFrameworks. ofImage is a convenient class that lets you both draw images to the screen and manipulate their pixel data. The ofImage allows you to load an image from disk, manipulate the pixels, and create an OpenGL texture that you can display and manipulate on the graphics card. Loading a file into the ofImage allocates an ofPixels object and creates the ofTexture to display the pixels.\n\nofImage uses a library called \"freeImage\" under the hood.\n\n\n\n\n\n##Methods\n\n\n\n###void allocate(w, h, type)\n\n<!--\n_syntax: allocate(w, h, type)_\n_name: allocate_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h, ofImageType type_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis allocates space in the ofImage, both the ofPixels and the\nofTexture that the ofImage contains.\n\nYou don't need to call this before loading an image, but for when you\nwant to allocate. space ahead of when you are going to use the image.\n\nThe types of images can be `OF_IMAGE_COLOR`, `OF_IMAGE_COLOR_ALPHA`\nor `OF_IMAGE_GRAYSCALE`.\n\nYou need to call update() to update the texture after updating\nthe pixels manually.\n\n\n**Parameters:**\n\nw Width of image to allocate.\n\nh Height of image to allocate.\n\ntype The ofImageType.\n\n\n\n\n\n_description: _\n\nThis allocates space in the ofImage, both the ofPixels and the ofTexture that the ofImage contains.\n~~~~{.cpp}\nimg.allocate(640, 480, OF_IMAGE_COLOR);\nint i = 0;\nwhile ( i < img.getPixels().size() ) {\n    img.getPixels()[i] = abs(sin( float(i) / 18.f)) * 255.f; // make some op-art\n    i++;\n}\nimg.update();\n~~~~\n\nIt allocates an image of width (w) and height (h). The type can be of three types: OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA. You don't need to call this before loading an image, but for when you want to allocate space ahead of when you are going to use the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void bind(textureLocation = 0)\n\n<!--\n_syntax: bind(textureLocation = 0)_\n_name: bind_\n_returns: void_\n_returns_description: _\n_parameters: int textureLocation=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBinds the oftexture instance that the ofImage contains so that\nit can be used for advanced drawing.\n\n\n\n\n\n_description: _\n\nThis binds the ofTexture instance that the ofImage contains so that it can be used for advanced drawing\n~~~~{.cpp}\nvoid ofApp::setup() {\n    img.allocate(256, 256, OF_IMAGE_COLOR);\n    int i = 0;\n    while ( i < img.getPixels().size() ) {\n        img.getPixels()[i] = abs(sin( float(i) / 18.f )) * 255.f;\n        i++;\n    }\n    img.update();\n\n    mesh.setMode(OF_PRIMITIVE_TRIANGLE_STRIP);\n\n    mesh.addVertex(ofVec2f(10, 10));\n    mesh.addVertex(ofVec2f(410, 10));\n    mesh.addVertex(ofVec2f(410, 410));\n    mesh.addVertex(ofVec2f(10, 410));\n    mesh.addVertex(ofVec2f(10, 10));\n\n    mesh.addTexCoord(ofVec2f(0, 0));\n    mesh.addTexCoord(ofVec2f(256, 0));\n    mesh.addTexCoord(ofVec2f(256, 256));\n    mesh.addTexCoord(ofVec2f(0, 256));\n    mesh.addTexCoord(ofVec2f(0, 0));\n}\nvoid ofApp::draw(){\n\n    ofBackground(255, 255, 255); // background white\n\n    img.bind();\n    mesh.draw();\n    img.unbind();\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void changeTypeOfPixels(&pix, type)\n\n<!--\n_syntax: changeTypeOfPixels(&pix, type)_\n_name: changeTypeOfPixels_\n_returns: void_\n_returns_description: _\n_parameters: ofPixels_< PixelType > &pix, ofImageType type_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\cond INTERNAL\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis clears the texture and pixels contained within the ofImage.\n\n\n\n\n\n_description: _\n\nThis clears the texture and pixels contained within the ofImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clone(&mom)\n\n<!--\n_syntax: clone(&mom)_\n_name: clone_\n_returns: void_\n_returns_description: _\n_parameters: const ofImage_< SrcType > &mom_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.\n~~~~{.cpp}\nofImage second;\nsecond.clone(first);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void crop(x, y, w, h)\n\n<!--\n_syntax: crop(x, y, w, h)_\n_name: crop_\n_returns: void_\n_returns_description: _\n_parameters: int x, int y, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis crops the image to the w,h passed in from the x,y position.\n\nThis does an in place crop and **allocates memory**.\n\n\n**Parameters:**\n\nx x position of upper-left corner of region to crop.\n\ny y position of upper-left corner of region to crop.\n\nw Width of region to crop.\n\nh Height of region to crop.\n\n\n\n\n\n_description: _\n\nThis crops the image to the w,h passed in from the x,y position.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void cropFrom(&otherImage, x, y, w, h)\n\n<!--\n_syntax: cropFrom(&otherImage, x, y, w, h)_\n_name: cropFrom_\n_returns: void_\n_returns_description: _\n_parameters: const ofImage_< PixelType > &otherImage, int x, int y, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReplaces region in caller image specified by w,h,x,y with pixels from otherImage.\n\nThe w,h are measured from the x,y, so passing 100, 100, 300, 300 will grab\na 300x300 pixel block of data starting from 100, 100.\n\n\n**Parameters:**\n\notherImage Image to crop from.\n\nx x position of upper-left corner of region to crop.\n\ny y position of upper-left corner of region to crop.\n\nw Width of region to crop.\n\nh Height of region to crop.\n\n\n\n\n\n_description: _\n\nThis crops another image into the image the cropFrom is being called on to the w,h passed in from the x,y position. The w,h are measured from the x,y, so passing 100, 100, 300, 300 will grab a 300x300 pixel block of data starting from 100, 100.\n~~~~{.cpp}\nofImage img1, img2;\nimg1.loadImage(\"anImage.png\");\nimg2.cropFrom(img1, 100, 100, 300, 300);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&pos)\n\n<!--\n_syntax: draw(&pos)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &pos_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&pos, w, h)\n\n<!--\n_syntax: draw(&pos, w, h)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &pos, float w, float h_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(x, y)\n\n<!--\n_syntax: draw(x, y)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw the image at it's normal size.\n\n\n**Parameters:**\n\nx Draw position on the x axis.\n\ny Draw position on the y axis.\n\n\n\n\n\n_description: _\n\nDraws the ofImage into the x,y location using the default height and width of the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(x, y, w, h)\n\n<!--\n_syntax: draw(x, y, w, h)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw the image at a given size.\n\n\n**Parameters:**\n\nx Draw position on the x axis.\n\ny Draw position on the y axis.\n\nw Draw width.\n\nh Draw height.\n\n\n\n\n\n_description: _\n\nDraws the ofImage into the x,y location and with the width and height, with any attendant scaling that may occur from fitting the ofImage into the width and height.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(x, y, z)\n\n<!--\n_syntax: draw(x, y, z)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw the texture at it's normal size with depth.\n\n\n**Parameters:**\n\nx Draw position on the x axis.\n\ny Draw position on the y axis.\n\nz Draw position on the z axis.\n\n\n\n\n\n_description: _\n\nDraws the ofImage into the x,y,z location with the default height and width. You should ensure that you turn on depth sorting using glEnable(GL_DEPTH) before trying to draw multiple objects into z-space.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(x, y, z, w, h)\n\n<!--\n_syntax: draw(x, y, z, w, h)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw the image at a given size with depth.\n\n\n**Parameters:**\n\nx Draw position on the x axis.\n\ny Draw position on the y axis.\n\nz Draw position on the z axis.\n\nw Draw width.\n\nh Draw height.\n\n\n\n\n\n_description: _\n\nDraws the ofImage into the x,y,z location and with the width and height, with any attendant scaling that may occur from fitting the ofImage into the width and height. You should ensure that you turn on depth sorting using glEnable(GL_DEPTH) before trying to draw multiple objects into z-space.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSubsection(x, y, w, h, sx, sy)\n\n<!--\n_syntax: drawSubsection(x, y, w, h, sx, sy)_\n_name: drawSubsection_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float w, float h, float sx, float sy_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a subsection of the image.\n\nThis functions like a clipping mask. Does not altering any pixel\ndata.\n\n\n**Parameters:**\n\nx X position to draw cropped image at.\n\ny Y position to draw cropped image at.\n\nw Width of subsection to draw.\n\nh Height of subsection to draw.\n\nsx X position in image to begin cropping from.\n\nsy Y position in image to begin cropping from.\n\n\n\n\n\n_description: _\n\nDraws a subsection of the image (functions like a clipping mask) without altering any pixel data. (x,y) are the position to draw the cropped image at, (w,h) is the size of the subsection to draw and the size to crop (these can be different using the function below with sw,sh) and (sx,sy) are the source pixel positions in the image to begin cropping from.\n\n~~~~{.cpp}\n// crop the image from the mouse position to 100x100 pixels and draw it at 0,0\nimg.drawSubsection(0, 0, 100, 100, mouseX, mouseY);\n~~~~\n\nAn example showing how to use drawSubsection can be found in of_release > examples > graphics > imageSubsectionExample\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSubsection(x, y, w, h, sx, sy, sw, sh)\n\n<!--\n_syntax: drawSubsection(x, y, w, h, sx, sy, sw, sh)_\n_name: drawSubsection_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float w, float h, float sx, float sy, float sw, float sh_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a subsection of the image.\n\nThis functions like a clipping mask. Does not altering any pixel\ndata.\n\n\n**Parameters:**\n\nx X position to draw cropped image at.\n\ny Y position to draw cropped image at.\n\nw Width of subsection to draw.\n\nh Height of subsection to draw.\n\nsx X position in image to begin cropping from.\n\nsy Y position in image to begin cropping from.\n\nsw Source width of cropped area.\n\nsh Source height of cropped area.\n\n\n\n\n\n_description: _\n\n(sw,sh) indicate the source width and height of the cropped area and the (w,h) indicate the size to draw the cropped area at.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSubsection(x, y, z, w, h, sx, sy)\n\n<!--\n_syntax: drawSubsection(x, y, z, w, h, sx, sy)_\n_name: drawSubsection_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w, float h, float sx, float sy_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a subsection of the image.\n\nThis functions like a clipping mask. Does not altering any pixel\ndata.\n\n\n**Parameters:**\n\nx X position to draw cropped image at.\n\ny Y position to draw cropped image at.\n\nz Z position to draw cropped image at.\n\nw Width of subsection to draw.\n\nh Height of subsection to draw.\n\nsx X position in image to begin cropping from.\n\nsy Y position in image to begin cropping from.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawSubsection(x, y, z, w, h, sx, sy, sw, sh)\n\n<!--\n_syntax: drawSubsection(x, y, z, w, h, sx, sy, sw, sh)_\n_name: drawSubsection_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w, float h, float sx, float sy, float sw, float sh_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a subsection of the image.\n\nThis functions like a clipping mask. Does not altering any pixel\ndata.\n\n\n**Parameters:**\n\nx X position to draw cropped image at.\n\ny Y position to draw cropped image at.\n\nz Z position to draw cropped image at.\n\nw Width of subsection to draw.\n\nh Height of subsection to draw.\n\nsx X position in image to begin cropping from.\n\nsy Y position in image to begin cropping from.\n\nsw Source width of cropped area.\n\nsh Source height of cropped area.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > getColor(index)\n\n<!--\n_syntax: getColor(index)_\n_name: getColor_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis returns the ofColor representing the pixels at the index\npassed in.\n\n**Parameters:**\n\nindex index into pixel data\n\n**Returns**: The ofColor representing the pixels at the index position passed in.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor_< PixelType > getColor(x, y)\n\n<!--\n_syntax: getColor(x, y)_\n_name: getColor_\n_returns: ofColor_< PixelType >_\n_returns_description: _\n_parameters: int x, int y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis returns the ofColor representing the pixels at the x and y\nposition passed in.\n\n**Parameters:**\n\nx x position of pixel\n\ny y position of pixel\n\n**Returns**: The ofColor representing the pixels at the x and y position passed in.\n\n\n\n\n\n_description: _\n\nThis returns the ofColor representing the pixels at the x and y position passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHeight()\n\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet height of image as a float.\n\n**Returns**: Height of image as float.\n\n\n\n\n\n_description: _\n\nReturns the height of the image in pixels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofImageType getImageType()\n\n<!--\n_syntax: getImageType()_\n_name: getImageType_\n_returns: ofImageType_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels_< PixelType > & getPixels()\n\n<!--\n_syntax: getPixels()_\n_name: getPixels_\n_returns: ofPixels_< PixelType > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a raw pointer to the pixel data.\n\nThis function will give you access to a continuous block of pixels.\nyou can grab the data and do what you like with it. If you have a\ngrayscale image, you will have (width*height)  number of pixels. Color\nimages will have (width*height*3) number of pixels (interlaced R,G,B),\nand coloralpha images will have (width*height*4) number of pixels\n(interlaced R,G,B,A).\n\n\n**Warning**: This is a raw pointer. It's up to you to get this right.\n\n\n**Returns**: A raw pointer to the pixel data.\n\n\n\n\n\n_description: _\n\nThis returns a raw pointer to the pixel data.\n\nThis function will give you access to a continuous block of pixels. you can grab the data and do what you like with it. If you have a grayscale image, you will have (width*height) number of pixels. Color images will have (width*height*3) number of pixels (interlaced R,G,B), and coloralpha images will have (width*height*4) number of pixels (interlaced R,G,B,A).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofPixels_< PixelType > & getPixels()\n\n<!--\n_syntax: getPixels()_\n_name: getPixels_\n_returns: const ofPixels_< PixelType > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTexture & getTexture()\n\n<!--\n_syntax: getTexture()_\n_name: getTexture_\n_returns: ofTexture &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a reference to the texture that the ofImage contains.\n\nYou can use this to directly manipulate the texture itself, but keep in\nmind that if you manipulate the texture directly, there is no simple way\nto copy the data from the texture back to the pixels and keep the ofImage in sync.\n\n\n**Returns**: A reference to the texture that the ofImage contains.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofTexture & getTexture()\n\n<!--\n_syntax: getTexture()_\n_name: getTexture_\n_returns: const ofTexture &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a const reference to the texture that the ofImage contains.\n\n**Returns**: A const reference to the texture that the ofImage contains.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getWidth()\n\n<!--\n_syntax: getWidth()_\n_name: getWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet width of image as a float.\n\n**Returns**: Width of image as float.\n\n\n\n\n\n_description: _\n\nReturns the width of the image in pixels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void grabScreen(x, y, w, h)\n\n<!--\n_syntax: grabScreen(x, y, w, h)_\n_name: grabScreen_\n_returns: void_\n_returns_description: _\n_parameters: int x, int y, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGrabs pixels from the opengl window specified by the region\n(x, y, w, h) and turns them into an image.\n\nIt resizes or allocates the ofImage if it's necessary.\n\n\n**Warning**: Uses glReadPixels() which can be slow.\n\n\n**Parameters:**\n\nx x position of upper-left corner of region.\n\ny y position of upper-left corner of region.\n\nw Width of region.\n\nh Height of region.\n\n\n\n\n\n_description: _\n\nGrabs pixels from the opengl window specified by the region (x, y, w, h) and turns them into an image. It resizes or allocates the ofImage if it's necessary.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isAllocated()\n\n<!--\n_syntax: isAllocated()_\n_name: isAllocated_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nWhether the image has been allocated either by a call to\nallocate or by loading pixel data into the image.\n\n**Returns**: true if the image has been allocated.\n\n\n\n\n\n_description: _\n\nReturns whether the image has been allocated either by a call to allocate or by loading pixel data into the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isUsingTexture()\n\n<!--\n_syntax: isUsingTexture()_\n_name: isUsingTexture_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns whether the ofImage has a texture or not.\n\nIf the ofImage doesn't have a texture, nothing will be drawn to the screen.\n\n**Returns**: true if the ofImage is using a texture.\n\n\n\n\n\n_description: _\n\nReturns whether the ofImage has a texture or not. If not, nothing will be drawn to the screen if the draw() method is called.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool load(&buffer, &settings)\n\n<!--\n_syntax: load(&buffer, &settings)_\n_name: load_\n_returns: bool_\n_returns_description: _\n_parameters: const ofBuffer &buffer, const ofImageLoadSettings &settings_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLoads an image from an ofBuffer instance created by, for\ninstance, ofFile::readToBuffer().\n\nThis actually loads the image data into an ofPixels object and then\ninto the texture.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool load(&fileName, &settings)\n\n<!--\n_syntax: load(&fileName, &settings)_\n_name: load_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &fileName, const ofImageLoadSettings &settings_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLoads an image given by fileName.\n\n**Parameters:**\n\nfileName Program looks for image given by fileName, relative to\nthe data folder.\n\nsettings Load options\n\n**Returns**: true if image loaded correctly.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void mirror(vertical, horizontal)\n\n<!--\n_syntax: mirror(vertical, horizontal)_\n_name: mirror_\n_returns: void_\n_returns_description: _\n_parameters: bool vertical, bool horizontal_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis reflects the pixels of the image across the vertical and/or horizontal axis.\n\n**Parameters:**\n\nvertical Set to true to reflect image across vertical axis.\n\nhorizontal Set to true to reflect image across horizontal axis.\n\n\n\n\n\n_description: _\n\nThis reflects the pixels of the image across the vertical and/or horizontal axis.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofImage_(&&mom)\n\n<!--\n_syntax: ofImage_(&&mom)_\n_name: ofImage__\n_returns: _\n_returns_description: _\n_parameters: ofImage_< PixelType > &&mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis creates an ofImage from an ofFile instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofImage_(&fileName, &settings)\n\n<!--\n_syntax: ofImage_(&fileName, &settings)_\n_name: ofImage__\n_returns: _\n_returns_description: _\n_parameters: const filesystem::path &fileName, const ofImageLoadSettings &settings_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis creates an ofImage from a file which can be a local string or a URL, allocating space for the pixels, and copying the pixels into the texture that the ofImage instance contains.\n~~~~{.cpp}\nofImage img(\"http://www.openframeworks.cc/wp-content/themes/ofw/images/ofw-logo.gif\");\n~~~~\nor\n~~~~{.cpp}\nofImage img(\"anImage.png\"); // assumes this is in bin/data\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofImage_(&mom)\n\n<!--\n_syntax: ofImage_(&mom)_\n_name: ofImage__\n_returns: _\n_returns_description: _\n_parameters: const ofImage_< PixelType > &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThe copy constructor. Pass in another image and it copies it. This allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.\n\n~~~~{.cpp}\nimage1.loadImage(\"face.jpg\");\nofImage image2(image1);\n~~~~\n\nimage1 and image2 are now identical.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofImage_(&mom)\n\n<!--\n_syntax: ofImage_(&mom)_\n_name: ofImage__\n_returns: _\n_returns_description: _\n_parameters: const ofImage_< SrcType > &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofImage_(&pix)\n\n<!--\n_syntax: ofImage_(&pix)_\n_name: ofImage__\n_returns: _\n_returns_description: _\n_parameters: const ofPixels_< PixelType > &pix_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis creates an ofImage from an ofPixels object, allocating space for the pixels, and copying the pixels into the texture that the ofImage instance contains.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofImage_()\n\n<!--\n_syntax: ofImage_()_\n_name: ofImage__\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Image Construction\n\\{\n\n\n\n\n\n_description: _\n\nThis creates an ofImage but doesn't allocate any memory for it, so you can't use the image immediately after creating it.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofImage_< PixelType > & operator=(&&mom)\n\n<!--\n_syntax: operator=(&&mom)_\n_name: operator=_\n_returns: ofImage_< PixelType > &_\n_returns_description: _\n_parameters: ofImage_< PixelType > &&mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofImage_< PixelType > & operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: ofImage_< PixelType > &_\n_returns_description: _\n_parameters: const ofImage_< PixelType > &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.\n\nMakes the current ofImage a copy of another ofImage. Same as clone().\n\n~~~~{.cpp}\n\nimage2.loadImage(\"face.jpg\");\nimage1 = image2;\n~~~~\n\nimage1 and image2 are now identical.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofImage_< PixelType > & operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: ofImage_< PixelType > &_\n_returns_description: _\n_parameters: const ofImage_< SrcType > &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\n\n\n\n\n_description: _\n\nThis allows you to create an ofImage from another ofImage instance, copying all the pixels and the texture data while creating a new textureID.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofImage_< PixelType > & operator=(&pixels)\n\n<!--\n_syntax: operator=(&pixels)_\n_name: operator=_\n_returns: ofImage_< PixelType > &_\n_returns_description: _\n_parameters: ofPixels_< PixelType > &pixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\\name Operators\n\\{\n\n\n\n\n\n_description: _\n\nAllows you to set an image to pixels. This resizes the image to the size of the ofPixels and reallocates all the of the data within the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resetAnchor()\n\n<!--\n_syntax: resetAnchor()_\n_name: resetAnchor_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemoves anchor positioning.\n\nResets the anchor to (0, 0) so the image will be drawn from its\nupper left hand corner.\n\n\n\n\n\n_description: _\n\nThis removes any anchor positioning, meaning that the ofImage will be draw with the upper left hand corner at the point passed into draw().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resize(newWidth, newHeight)\n\n<!--\n_syntax: resize(newWidth, newHeight)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: int newWidth, int newHeight_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nResizes the image to a new size (w, h); Can be used to scale up\nor down an image.\n\n\n**Parameters:**\n\nnewWidth New width of image.\n\nnewHeight New height of image.\n\n\n\n\n\n_description: _\n\nResizes the image to a new size (w, h); Can be used to scale up or down an image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resizePixels(&pix, newWidth, newHeight)\n\n<!--\n_syntax: resizePixels(&pix, newWidth, newHeight)_\n_name: resizePixels_\n_returns: void_\n_returns_description: _\n_parameters: ofPixels_< PixelType > &pix, int newWidth, int newHeight_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotate90(rotation)\n\n<!--\n_syntax: rotate90(rotation)_\n_name: rotate90_\n_returns: void_\n_returns_description: _\n_parameters: int rotation_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates the image by a multiple of 90 degrees.\n\n**Parameters:**\n\nrotation Amount to rotate in multiples of 90. For instance, if you pass\nin 2, then the image will be rotated 180 degrees.\n\n\n\n\n\n_description: _\n\nRotates the image by a multiple of 90 degrees, for instance, if you pass in 2, then the image will be rotated 180 degrees.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool save(&buffer, imageFormat = OF_IMAGE_FORMAT_PNG, compressionLevel = OF_IMAGE_QUALITY_BEST)\n\n<!--\n_syntax: save(&buffer, imageFormat = OF_IMAGE_FORMAT_PNG, compressionLevel = OF_IMAGE_QUALITY_BEST)_\n_name: save_\n_returns: bool_\n_returns_description: _\n_parameters: ofBuffer &buffer, ofImageFormat imageFormat=OF_IMAGE_FORMAT_PNG, ofImageQualityType compressionLevel=OF_IMAGE_QUALITY_BEST_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis saves the image to the ofBuffer passed with the image\nquality specified by compressionLevel.\n\n\n**Parameters:**\n\nbuffer ofBuffer to save image to.\n\ncompressionLevel The ofImageQualityType.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool save(&fileName, compressionLevel = OF_IMAGE_QUALITY_BEST)\n\n<!--\n_syntax: save(&fileName, compressionLevel = OF_IMAGE_QUALITY_BEST)_\n_name: save_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &fileName, ofImageQualityType compressionLevel=OF_IMAGE_QUALITY_BEST_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSaves the image to the file path in fileName with the image\nquality specified by compressionLevel.\n\n\n**Parameters:**\n\nfileName Saves image to this path, relative to the data folder.\n\ncompressionLevel The ofImageQualityType.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAnchorPercent(xPct, yPct)\n\n<!--\n_syntax: setAnchorPercent(xPct, yPct)_\n_name: setAnchorPercent_\n_returns: void_\n_returns_description: _\n_parameters: float xPct, float yPct_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nChange the drawing anchor from top-left corner to a position\nspecified by xPct and yPct.\n\nChanges the drawing position specified by draw() from the normal top-\nleft corner of the image to a position specified by xPct and yPct in\nrelation to the dimensions of the image. This can be useful  for\naligning and centering images as well as rotating an image around its\ncenter. Note: range of  xPct and yPct is 0.0 to 1.0. For xPct, 1.0\nrepresents the width of the image. For yPct, 1.0 represents  the\nheight of the image. These values are not capped.\n\n\n**Parameters:**\n\nxPct X position of the new anchor, specified as a percent of the width of the image.\n\nyPct Y position of the new anchor, specified as a percent of the height of the image.\n\n\n\n\n\n_description: _\n\nChanges the drawing position specified by draw() from the normal top-left corner of the image to a position specified by xPct and yPct in relation to the dimensions of the image. This can be useful for aligning and centering images as well as rotating an image around its center.\n\nNote: range of xPct and yPct is 0.0 to 1.0. For xPct, 1.0 represents the width of the image. For yPct, 1.0 represents the height of the image. These values are not capped.\n\nFor example to draw an image so that its center is at 100, 100:\n~~~~{.cpp}\nmyImage.setAnchorPercent(0.5, 0.5);\nmyImage.draw(100, 100);\n~~~~\n\nTo rotate an image around its center at 100, 100:\n~~~~{.cpp}\nofPushMatrix();\n  ofTranslate(100, 100, 0);\n  ofRotate(45);\n  myImage.setAnchorPercent(0.5, 0.5);\n  myImage.draw(0, 0);\nofPopMatrix();\n~~~~\n\nTo align the right side of an image with the right edge of the window:\n~~~~{.cpp}\nmyImage.setAnchorPercent(1.0, 0.0);\nmyImage.draw(ofGetWidth(), 0);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAnchorPoint(x, y)\n\n<!--\n_syntax: setAnchorPoint(x, y)_\n_name: setAnchorPoint_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nChanges drawing position from top-left corner to position specified by x,y.\n\nChanges the drawing position specified by draw() from the normal top-\nleft corner of the image to a  position specified by x and y, measured\nin pixels. This can be useful for aligning and centering  images as\nwell as rotating an image around its center.\n\n\n**Parameters:**\n\nx X position of the new anchor.\n\ny Y position of the new anchor.\n\n\n\n\n\n_description: _\n\nChanges the drawing position specified by draw() from the normal top-left corner of the image to a position specified by x and y, measured in pixels. This can be useful for aligning and centering images as well as rotating an image around its center.\n\nNote: see also setAnchorPercent() if you want to specify the anchor as a percentage of the image size.\n\nFor example to draw an image so that its center is at 100, 100:\n~~~~{.cpp}\nmyImage.setAnchorPoint(myImage.getWidth()/2, myImage.getHeight()/2);\nmyImage.draw(100, 100);\n~~~~\n\nTo rotate an image around its center at 100, 100:\n~~~~{.cpp}\nofPushMatrix();\n  ofTranslate(100, 100, 0);\n  ofRotate(45);\n  myImage.setAnchorPoint(myImage.getWidth()/2, myImage.getHeight()/2);\n  myImage.draw(0, 0);\nofPopMatrix();\n~~~~\n\nTo align the right side of an image with the right edge of the window:\n~~~~{.cpp}\nmyImage.setAnchorPoint(myImage.getWidth(), 0.0);\nmyImage.draw(ofGetWidth(), 0);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(&color)\n\n<!--\n_syntax: setColor(&color)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets all pixels to a color.\n\n**Parameters:**\n\ncolor Color to set pixel to.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(index, &color)\n\n<!--\n_syntax: setColor(index, &color)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: int index, const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the pixel at the given pixel buffer index\n\n\n**Parameters:**\n\nindex Index of pixel to set.\n\ncolor Color to set pixel to.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(x, y, &color)\n\n<!--\n_syntax: setColor(x, y, &color)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: int x, int y, const ofColor_< PixelType > &color_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the pixel at the x,y position passed in.\n\nThe ofColor type needs to match the ofImage type, i.e. ofFloatImage\nrequires that you use ofFloatPixels.\n\n\n**Parameters:**\n\nx x position of pixel.\n\ny y position of pixel.\n\ncolor Color to set pixel to.\n\n\n\n\n\n_description: _\n\nThis sets the pixel at the x,y position passed in. The ofColor type needs to match the ofImage type, i.e. ofFloatImage requires that you use ofFloatPixels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCompression(compression)\n\n<!--\n_syntax: setCompression(compression)_\n_name: setCompression_\n_returns: void_\n_returns_description: _\n_parameters: ofTexCompression compression_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis sets the compression level used when creating mipmaps for\nthe ofTexture contained by the ofImage.\n\n**Parameters:**\n\ncompression The ofTexCompression to set.\n\n\n\n\n\n_description: _\n\nThis sets the compression level used when creating mipmaps for the ofTexture contained by the ofImage. This is quite different than the ofImageQualityType image quality parameter used in saveImage(). The different texture compression levels are:\n    OF_COMPRESS_NONE,\n    OF_COMPRESS_SRGB,\n    OF_COMPRESS_ARB\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(&pixels)\n\n<!--\n_syntax: setFromPixels(&pixels)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const ofPixels_< PixelType > &pixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the pixels of the image from an ofPixels instance.\n\nSet the pixels of the image from an ofPixels instance, for an\nofFloatImage these need to be ofFloatPixels, for an ofImage these need\nto be unsigned chars.\n\n\n\n\n\n_description: _\n\nSet the pixels of the image from an ofPixels instance, for an ofFloatImage these need to be ofFloatPixels, for an ofImage these need to be unsigned chars. The w and h values are important so that the correct dimensions are set in the image. This assumes that you're setting the pixels from 0,0 or the upper left hand corner of the image.\nThe bOrderIsRGB flag allows you pass in pixel data that is BGR by setting bOrderIsRGB=false.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(*pixels, w, h, type, bOrderIsRGB = true)\n\n<!--\n_syntax: setFromPixels(*pixels, w, h, type, bOrderIsRGB = true)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const PixelType *pixels, int w, int h, ofImageType type, bool bOrderIsRGB=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the pixels of the image from an array of values.\n\nSet the pixels of the image from an array of values, for an\nofFloatImage these need to be floats, for an ofImage  these need to be\nunsigned chars. The w and h values are important so that the correct\ndimensions are set in the  image. This assumes that you're setting the\npixels from 0,0 or the upper left hand corner of the image. The\nbOrderIsRGB flag allows you pass in pixel data that is BGR by setting\nbOrderIsRGB=false.\n\n\n**Parameters:**\n\npixels Array of pixel values.\n\nw Width of image being passed in.\n\nh Height of image being passed in.\n\ntype The image type can be OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, or OF_IMAGE_COLOR_ALPHA.\n\nbOrderIsRGB Pass in pixel data that is BGR by setting bOrderIsRGB=false.\n\n\n\n\n\n_description: _\n\nSet the pixels of the image from an array of values, for an ofFloatImage these need to be floats, for an ofImage these need to be unsigned chars. The w and h values are important so that the correct dimensions are set in the image. This assumes that you're setting the pixels from 0,0 or the upper left hand corner of the image.\nThe bOrderIsRGB flag allows you pass in pixel data that is BGR by setting bOrderIsRGB=false.\n\nCopies in the pixel data from  the 'pixels' array. Specify the corresponding width and height of the image you are passing in with 'w' and 'h'. The image type can be OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, or OF_IMAGE_COLOR_ALPHA.\n\nNote: that your array has to be at least as big as [ width * height * bytes per pixel ].\n\nIf you have a grayscale image, you will have (width*height) number of pixels. Color images will have (width*height*3) number of pixels (interlaced R,G,B), and coloralpha images will have (width*height*4) number of pixels (interlaced R,G,B,A).\n\nNote: You do not need to call allocate() before calling setFromPixels() as setFromPixels() re-allocates itself if needed.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setImageType(type)\n\n<!--\n_syntax: setImageType(type)_\n_name: setImageType_\n_returns: void_\n_returns_description: _\n_parameters: ofImageType type_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet type of image to one of the following: OF_IMAGE_GRAYSCALE,\nOF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA\n\nThis does cause the image to be reallocated and the texture to be\nupdated, so it can be an expensive operation  if done frequently.\nConverting down, for example from color to grayscale, loses\ninformation and is a destructive change.\n\n\n**Parameters:**\n\ntype The type of image, one of the following:\n`OF_IMAGE_GRAYSCALE`, `OF_IMAGE_COLOR`, `OF_IMAGE_COLOR_ALPHA`\n\n\n\n\n\n_description: _\n\nSet the type of image to one of the following: OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA. This does cause the image to be reallocated and the texture to be updated, so it can be an expensive operation if done frequently. Converting down, for example from color to grayscale, loses information and is a destructive change.\n\nFor example, you can load in a color image, and convert it to grayscale:\n~~~~{.cpp}\nmyImage.loadImage(\"somethingColor.jpg\");\nmyImage.setImageType(OF_IMAGE_GRAYSCALE);   // now I am grayscale;\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setUseTexture(bUse)\n\n<!--\n_syntax: setUseTexture(bUse)_\n_name: setUseTexture_\n_returns: void_\n_returns_description: _\n_parameters: bool bUse_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTurns on or off the allocation and use of a texture.\n\n\n**Parameters:**\n\nbUse Allocate and use a texture or not.\n\n\n\n\n\n_description: _\n\nIf you set the ofImage to not use a texture it will contain the pixels of the image but cannot be drawn to the screen without copying its data into an ofTexture instance.\n\nThis turns on or off the allocation and use of a texture. any time you change the image (loading, resizing, converting the type), ofImage will upload data to an opengl texture. It may not be necessary, though, and it could be that you need to save memory on the graphics card, or that you don't need to draw this image on the screen. You can call this even before you load an image in to OF:\n\n~~~~{.cpp}\nmyImage.setUseTexture(false);\nmyImage.loadImage(\"blah.gif\");\n~~~~\n\nSince in the majority of cases, ofImages will be loaded in and drawn onscreen, the default is set to use a texture.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void unbind(textureLocation = 0)\n\n<!--\n_syntax: unbind(textureLocation = 0)_\n_name: unbind_\n_returns: void_\n_returns_description: _\n_parameters: int textureLocation=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nUnbinds the ofTexture instance that the ofImage contains.\n\nCall this after you call bind().\n\n\n\n\n\n_description: _\n\nThis unbinds the ofTexture instance that the ofImage contains. Call this after you call bind().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void unloadTexture()\n\n<!--\n_syntax: unloadTexture()_\n_name: unloadTexture_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void update()\n\n<!--\n_syntax: update()_\n_name: update_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCall to ensure that changes to pixels are reflected in the ofTexture of the image.\n\nMany of the ofImage methods call this after they change the pixels,\nbut if you directly manipulate  the pixels of the ofImage, then you\nshould make sure to call update() before trying to draw the  texture\nof the image to the screen.\n\n\n\n\n\n_description: _\n\nThis method should be called after you update the pixels of the image and want to ensure that the changes to the pixels are reflected in the ofTexture of the image. Many of the ofImage methods call this after they change the pixels, but if you directly manipulate the pixels of the ofImage, then you should make sure to call update() before trying to draw the texture of the image to the screen.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofImage_()\n\n<!--\n_syntax: ~ofImage_()_\n_name: ~ofImage__\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bUseTexture\n\n<!--\n_name: bUseTexture_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int bpp\n\n<!--\n_name: bpp_\n_type: int_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< Bits per image pixel.\n\n\n\n\n\n_description: _\n\nBytes per pixels of the image. This will be 3 for OF_IMAGE_COLOR with unsigned char pixels and 12 for an OF_COLOR_IMAGE with float pixels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int height\n\n<!--\n_name: height_\n_type: int_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< Image Height in pixels.\n\n\n\n\n\n_description: _\n\nHeight of the image in pixels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels pixels\n\n<!--\n_name: pixels_\n_type: ofPixels_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTexture tex\n\n<!--\n_name: tex_\n_type: ofTexture_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int type\n\n<!--\n_name: type_\n_type: int_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< Image type.\n\n\n\n\n\n_description: _\n\nReturns the type of image, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA, or OF_IMAGE_GRAYSCALE\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int width\n\n<!--\n_name: width_\n_type: int_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< Image width in pixels.\n\n\n\n\n\n_description: _\n\nWidth of the image in pixels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}