{"data":[{"page":{"entry":{"name":"ofSoundStream.h","filename":"ofSoundStream.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/sound/ofSoundStream.h","path":"/openframeworks/sound/ofSoundStream_h","route":"/openframeworks/sound/ofSoundStream.h","dir":"../libs/openFrameworks/sound","ext":"h","type":"source","id":314,"parent":300,"breadcrumbs":[300,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofBaseApp.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofSoundBaseTypes.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;climits></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;functional></span></span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofSoundStreamSettings</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">///// \\brief Sets up and starts a global ofSoundStream.</span>\n<span class=\"token comment\" spellcheck=\"true\">/////</span>\n<span class=\"token comment\" spellcheck=\"true\">///// This will set up a sound stream with a default sample rate of 44100, a</span>\n<span class=\"token comment\" spellcheck=\"true\">///// buffer size of 256 samples, and a queue of 4 buffers.</span>\n<span class=\"token comment\" spellcheck=\"true\">/////</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param nOutputChannels number of requested output channels (i.e. 2 for stereo).</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param nInputChannels number of requested input channels.</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param appPtr pointer to the app which will own the sound stream (optional).</span>\n<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use an ofSoundStreamSettings object instead of directly passing the parameters\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ofSoundStreamSetup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nOutputChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nInputChannels<span class=\"token punctuation\">,</span> ofBaseApp <span class=\"token operator\">*</span> appPtr <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">///// \\brief Sets up and starts a global ofSoundStream.</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param nOutputChannels number of requested output channels (i.e. 2 for stereo).</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param nInputChannels number of requested input channels.</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param sampleRate requested sample rate (44100 is typical).</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param bufferSize requested buffer size (256 is typical). Smaller values</span>\n<span class=\"token comment\" spellcheck=\"true\">/////        will be more responsive, but less stable.</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param nBuffers number of buffers to queue. Less buffers will be more responsive, but less stable.</span>\n<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use an ofSoundStreamSettings object instead of directly passing the parameters\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ofSoundStreamSetup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nOutputChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nInputChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sampleRate<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bufferSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nBuffers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">///// \\brief Sets up and starts a global ofSoundStream.</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param nOutputChannels number of requested output channels (i.e. 2 for stereo).</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param nInputChannels number of requested input channels.</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param appPtr pointer to the app which will own the sound stream (optional).</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param sampleRate requested sample rate (44100 is typical).</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param bufferSize requested buffer size (256 is typical). Smaller values</span>\n<span class=\"token comment\" spellcheck=\"true\">/////        will be more responsive, but less stable.</span>\n<span class=\"token comment\" spellcheck=\"true\">///// \\param nBuffers number of buffers to queue. Less buffers will be more</span>\n<span class=\"token comment\" spellcheck=\"true\">/////        responsive, but less stable.</span>\n<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use an ofSoundStreamSettings object instead of directly passing the parameters\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ofSoundStreamSetup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nOutputChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nInputChannels<span class=\"token punctuation\">,</span> ofBaseApp <span class=\"token operator\">*</span> appPtr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sampleRate<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bufferSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nBuffers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSoundStreamSetup</span><span class=\"token punctuation\">(</span>ofSoundStreamSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Stops the sound stream (audioIn() / audioOut() will stop being called)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSoundStreamStop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Starts the sound stream (audioIn() / audioOut() will start being called)</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSoundStreamStart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Stops the sound stream and also cleans up the stream's resources</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSoundStreamClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Prints a list of all available audio devices</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\return all sound devices found on the system</span>\nstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofSoundDevice<span class=\"token operator\">></span> <span class=\"token function\">ofSoundStreamListDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofSoundStream</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gives access to audio input and output devices</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofSoundStream controls access to your computer's audio input and output</span>\n<span class=\"token comment\" spellcheck=\"true\">/// devices. For example, you could use an ofSoundStream to get live input from</span>\n<span class=\"token comment\" spellcheck=\"true\">/// a microphone, or generate sound in realtime for your computer's speakers.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A typical openFrameworks app will use just one ofSoundStream, and you might</span>\n<span class=\"token comment\" spellcheck=\"true\">/// not even need to use this class directly at all if you don't need to query</span>\n<span class=\"token comment\" spellcheck=\"true\">/// things like the sample rate or buffer size. In order to start receiving or</span>\n<span class=\"token comment\" spellcheck=\"true\">/// generating audio, your ofApp should implement either ofBaseApp::audioIn() or</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofBaseApp::audioOut() respectively, and then call ofSoundStreamSetup(). You</span>\n<span class=\"token comment\" spellcheck=\"true\">/// can find examples of this in either the audioInputExample or the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// audioOutputExample.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Starting a stream with 0 input or output channels will prevent audioIn() or</span>\n<span class=\"token comment\" spellcheck=\"true\">/// audioOut() from being called, respectively.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Some platforms (iOS, for example) will expose additional platform-specific</span>\n<span class=\"token comment\" spellcheck=\"true\">/// sound stream functionality. See the platform-specific examples for demos.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning Be aware that audioIn() and audioOut() will be called on a different</span>\n<span class=\"token comment\" spellcheck=\"true\">/// thread from your app's update() / draw() thread.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofSoundStream</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofSoundStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setSoundStream</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseSoundStream<span class=\"token operator\">></span> soundStreamPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseSoundStream<span class=\"token operator\">></span> <span class=\"token function\">getSoundStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Prints a list of available audio devices to the console</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">printDeviceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Retrieves a list of available audio devices</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofSoundDevice<span class=\"token operator\">></span> <span class=\"token function\">getDeviceList</span><span class=\"token punctuation\">(</span>ofSoundDevice<span class=\"token operator\">::</span>Api api <span class=\"token operator\">=</span> ofSoundDevice<span class=\"token operator\">::</span>Api<span class=\"token operator\">::</span>DEFAULT<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get all devices which match the arguments (name can be a partial match)</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofSoundDevice<span class=\"token operator\">></span> <span class=\"token function\">getMatchingDevices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> inChannels <span class=\"token operator\">=</span> UINT_MAX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> outChannels <span class=\"token operator\">=</span> UINT_MAX<span class=\"token punctuation\">,</span> ofSoundDevice<span class=\"token operator\">::</span>Api api <span class=\"token operator\">=</span> ofSoundDevice<span class=\"token operator\">::</span>Api<span class=\"token operator\">::</span>DEFAULT<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief sets the device represented by the stream, see ofSoundStream::getDeviceList().</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use an ofSoundStreamSettings object instead of directly passing the parameters\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setDeviceID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> deviceID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief sets the device represented by the stream, see ofSoundStream::getDeviceList().</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use an ofSoundStreamSettings object instead of directly passing the parameters\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setDevice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofSoundDevice<span class=\"token operator\">&amp;</span> device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofSoundStreamSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\brief Sets up and starts the stream.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\param app pointer to the app which will own the sound stream.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\param outChannels number of requested output channels (i.e. 2 for stereo).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\param inChannels number of requested input channels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\param sampleRate requested sample rate (44100 is typical).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\param bufferSize requested buffer size (256 is typical). Smaller</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/////        values will be more responsive, but less stable.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\param nBuffers number of buffers to queue. Less buffers will be more</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/////        responsive, but less stable.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\return true on success</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use an ofSoundStreamSettings object instead of directly passing the parameters\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>ofBaseApp <span class=\"token operator\">*</span> app<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> outChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sampleRate<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bufferSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nBuffers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\brief Sets up and starts the stream.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\param outChannels number of requested output channels (i.e. 2 for stereo).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\param inChannels number of requested input channels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\param sampleRate requested sample rate (44100 is typical).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\param bufferSize requested buffer size (256 is typical). Smaller values</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/////        will be more responsive, but less stable.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\param nBuffers number of buffers to queue. Less buffers will be more</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/////        responsive, but less stable.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///// \\return true on success</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use an ofSoundStreamSettings object instead of directly passing the parameters\"</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> outChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> inChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> sampleRate<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bufferSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nBuffers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets the object which will have audioIn() called when the device receives audio.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setInput</span><span class=\"token punctuation\">(</span>ofBaseSoundInput <span class=\"token operator\">*</span> soundInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets the object which will have audioIn() called when the device receives audio.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setInput</span><span class=\"token punctuation\">(</span>ofBaseSoundInput <span class=\"token operator\">&amp;</span>soundInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets the object which will have audioOut() called when the device requests audio.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span>ofBaseSoundOutput <span class=\"token operator\">*</span> soundOutput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets the object which will have audioOut() called when the device requests audio.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setOutput</span><span class=\"token punctuation\">(</span>ofBaseSoundOutput <span class=\"token operator\">&amp;</span>soundOutput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Starts a stream (note that setup() will start the stream on its own).</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Stops the stream.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief stops the stream and cleans up its resources.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Queries the number of \"ticks\" passed since the stream started.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is a representation of how many buffers have passed through the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// stream since it started. This can be converted to seconds with the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// following formula:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    secondsOfPlayback = (tickCount * bufferSize) / sampleRate</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return number of buffers passed through the stream since it started.</span>\n\tuint64_t <span class=\"token function\">getTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Queries the stream's number of input channels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return the number of input channels (e.g. 2 for stereo).</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getNumInputChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Queries the stream's number of output channels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return the number of output channels (e.g. 2 for stereo).</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getNumOutputChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Queries the stream's sample rate</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return the current sample rate of the stream</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note The returned sample rate may differ from the requested sample rate.</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getSampleRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Queries the stream's buffer size.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return the current buffer size of the stream.</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Retrieves a list of available audio devices and prints device descriptions to the console</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use printDeviceList instead\"</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofSoundDevice<span class=\"token operator\">></span> <span class=\"token function\">listDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseSoundStream<span class=\"token operator\">></span> soundStream<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> tmpDeviceId <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n","type":"source","static":true}}],"fetch":[]}