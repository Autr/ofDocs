{"data":[{"page":{"entry":{"name":"ofSoundBuffer.cpp","filename":"ofSoundBuffer.cpp","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/sound/ofSoundBuffer.cpp","path":"/openframeworks/sound/ofSoundBuffer_cpp","route":"/openframeworks/sound/ofSoundBuffer.cpp","dir":"../libs/openFrameworks/sound","ext":"cpp","type":"source","id":309,"parent":300,"breadcrumbs":[300,195],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">/*\n * ofSoundBuffer.cpp\n *\n *  Created on: 25/07/2012\n *      Author: arturo\n */</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofSoundBuffer.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofSoundUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;limits></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/trigonometric.hpp\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> !defined(TARGET_ANDROID) &amp;&amp; !defined(TARGET_IPHONE) &amp;&amp; !defined(TARGET_LINUX_ARM)</span>\nofSoundBuffer<span class=\"token operator\">::</span>InterpolationAlgorithm ofSoundBuffer<span class=\"token operator\">::</span>defaultAlgorithm <span class=\"token operator\">=</span> ofSoundBuffer<span class=\"token operator\">::</span>Hermite<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\nofSoundBuffer<span class=\"token operator\">::</span>InterpolationAlgorithm ofSoundBuffer<span class=\"token operator\">::</span>defaultAlgorithm <span class=\"token operator\">=</span> ofSoundBuffer<span class=\"token operator\">::</span>Linear<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\nofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">ofSoundBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">channels</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">samplerate</span><span class=\"token punctuation\">(</span><span class=\"token number\">44100</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">tickCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">soundStreamDeviceID</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\nofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">ofSoundBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> <span class=\"token operator\">*</span> shortBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numFrames<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> sampleRate<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">tickCount</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">soundStreamDeviceID</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span>shortBuffer<span class=\"token punctuation\">,</span> numFrames<span class=\"token punctuation\">,</span> numChannels<span class=\"token punctuation\">,</span> sampleRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">checkSizeAndChannelsConsistency</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"constructor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">short</span> <span class=\"token operator\">*</span> shortBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numFrames<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _sampleRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>channels <span class=\"token operator\">=</span> numChannels<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">setSampleRate</span><span class=\"token punctuation\">(</span>_sampleRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>numFrames <span class=\"token operator\">*</span> numChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tbuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> shortBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>numeric_limits<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">checkSizeAndChannelsConsistency</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"copyFrom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> floatBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numFrames<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> _sampleRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>channels <span class=\"token operator\">=</span> numChannels<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">setSampleRate</span><span class=\"token punctuation\">(</span>_sampleRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>floatBuffer<span class=\"token punctuation\">,</span> floatBuffer <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>numFrames <span class=\"token operator\">*</span> numChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">checkSizeAndChannelsConsistency</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"copyFrom\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> shortBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> sampleRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shortBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>shortBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>numChannels<span class=\"token punctuation\">,</span>numChannels<span class=\"token punctuation\">,</span>sampleRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> floatBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numChannels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> sampleRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>floatBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>floatBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>numChannels<span class=\"token punctuation\">,</span>numChannels<span class=\"token punctuation\">,</span>sampleRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">toShortPCM</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> dst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tdst<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tdst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>numeric_limits<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">toShortPCM</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> <span class=\"token operator\">*</span> dst<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tdst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>numeric_limits<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">getBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">getBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nuint64_t ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">getDurationMS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">uint64_t</span><span class=\"token punctuation\">(</span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">uint64_t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">uint64_t</span><span class=\"token punctuation\">(</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nuint64_t ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">getDurationMicros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">uint64_t</span><span class=\"token punctuation\">(</span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">uint64_t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">uint64_t</span><span class=\"token punctuation\">(</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nuint64_t ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">getDurationNanos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">uint64_t</span><span class=\"token punctuation\">(</span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token function\">uint64_t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token function\">uint64_t</span><span class=\"token punctuation\">(</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">setNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>channels <span class=\"token operator\">=</span> channels<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">checkSizeAndChannelsConsistency</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setNumChannels\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">setSampleRate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tsamplerate <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>size_t numSamples<span class=\"token punctuation\">,</span> size_t numChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>numSamples<span class=\"token operator\">*</span>numChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tchannels <span class=\"token operator\">=</span> numChannels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t samples<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>samples<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">checkSizeAndChannelsConsistency</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize(samples,val)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">checkSizeAndChannelsConsistency</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"set\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">checkSizeAndChannelsConsistency</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> _function <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>string function <span class=\"token operator\">=</span> _function<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> function<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tfunction <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>channels<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSoundBuffer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> function <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"channel count \"</span> <span class=\"token operator\">&lt;&lt;</span> channels <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not consistent with sample count \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" (non-zero remainder)\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">getSample</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t frameIndex<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>frameIndex <span class=\"token operator\">*</span> channels<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> channel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">getSample</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t frameIndex<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t channel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> buffer<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>frameIndex <span class=\"token operator\">*</span> channels<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> channel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>ofSoundBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>channels<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>samplerate<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>tickCount<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>tickCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>soundStreamDeviceID<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>soundStreamDeviceID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>buffer<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofSoundBuffer ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofSoundBuffer ret <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\tret <span class=\"token operator\">*</span><span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofSoundBuffer <span class=\"token operator\">&amp;</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tbuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">stereoPan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels<span class=\"token operator\">!=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSoundBuffer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"stereoPan called on a buffer with \"</span> <span class=\"token operator\">&lt;&lt;</span> channels <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" channels, only works with 2 channels\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> bufferPtr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span>bufferPtr<span class=\"token operator\">++</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">*</span>bufferPtr<span class=\"token operator\">++</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span>ofSoundBuffer <span class=\"token operator\">&amp;</span> soundBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t nFrames<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t outChannels<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>size_t fromFrame<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> loop<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tsoundBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>nFrames<span class=\"token operator\">*</span>outChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsoundBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setNumChannels</span><span class=\"token punctuation\">(</span>outChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsoundBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setSampleRate</span><span class=\"token punctuation\">(</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsoundBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setTickCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsoundBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setDeviceID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getDeviceID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>soundBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nFrames<span class=\"token punctuation\">,</span> outChannels<span class=\"token punctuation\">,</span> fromFrame<span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span>ofSoundBuffer <span class=\"token operator\">&amp;</span> outBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t fromFrame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> loop<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\toutBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setTickCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getTickCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\toutBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setDeviceID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getDeviceID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>outBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> outBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> outBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fromFrame<span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">addTo</span><span class=\"token punctuation\">(</span>ofSoundBuffer <span class=\"token operator\">&amp;</span> soundBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t nFrames<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t outChannels<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>size_t fromFrame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> loop<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tsoundBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>nFrames<span class=\"token operator\">*</span>outChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsoundBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setNumChannels</span><span class=\"token punctuation\">(</span>outChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsoundBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setSampleRate</span><span class=\"token punctuation\">(</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">addTo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>soundBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nFrames<span class=\"token punctuation\">,</span> outChannels<span class=\"token punctuation\">,</span> fromFrame<span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">addTo</span><span class=\"token punctuation\">(</span>ofSoundBuffer <span class=\"token operator\">&amp;</span> outBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t fromFrame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> loop<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">addTo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>outBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> outBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> outBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fromFrame<span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> outBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t nFrames<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t outChannels<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t fromFrame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> loop<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// figure out how many frames we can copy before we need to stop or loop</span>\n\tstd<span class=\"token operator\">::</span>size_t nFramesToCopy <span class=\"token operator\">=</span> nFrames<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fromFrame <span class=\"token operator\">+</span> nFrames<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tnFramesToCopy <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> fromFrame<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\t\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> buffPtr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">[</span>fromFrame <span class=\"token operator\">*</span> channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// if channels count matches we can just memcpy</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels <span class=\"token operator\">==</span> outChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>outBuffer<span class=\"token punctuation\">,</span> buffPtr<span class=\"token punctuation\">,</span> nFramesToCopy <span class=\"token operator\">*</span> channels <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toutBuffer <span class=\"token operator\">+</span><span class=\"token operator\">=</span> nFramesToCopy <span class=\"token operator\">*</span> outChannels<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels <span class=\"token operator\">></span> outChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// otherwise, if we have more channels than the output is requesting,</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// we copy the first outChannels channels</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nFramesToCopy<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> outChannels<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token operator\">*</span>outBuffer<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>buffPtr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// and skip the rest</span>\n\t\t\tbuffPtr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> channels <span class=\"token operator\">-</span> outChannels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// we have fewer channels than output is requesting. so replicate as many channels as possible then loop.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// if we have 2 channels and output wants 5, data is copied from our channels in the following in order:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// 1 2 1 2 1</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nFramesToCopy<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> outChannels<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token operator\">*</span>outBuffer<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> buffPtr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">%</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tbuffPtr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> channels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// do we have anything left?</span>\n\t<span class=\"token keyword\">int</span> framesRemaining <span class=\"token operator\">=</span> nFrames <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>nFramesToCopy<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>framesRemaining <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>loop <span class=\"token operator\">||</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// fill with 0s</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> framesRemaining <span class=\"token operator\">*</span> outChannels<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\toutBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// loop</span>\n\t\t\t<span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span>outBuffer<span class=\"token punctuation\">,</span> framesRemaining<span class=\"token punctuation\">,</span> outChannels<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">addTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> outBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t nFrames<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t outChannels<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t fromFrame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> loop<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// figure out how many frames we can copy before we need to stop or loop</span>\n\tstd<span class=\"token operator\">::</span>size_t nFramesToCopy <span class=\"token operator\">=</span> nFrames<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>fromFrame <span class=\"token operator\">+</span> nFrames<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tnFramesToCopy <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> fromFrame<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> buffPtr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">[</span>fromFrame <span class=\"token operator\">*</span> channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// if channels count matches it is easy</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels <span class=\"token operator\">==</span> outChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>nFramesToCopy <span class=\"token operator\">*</span> outChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\toutBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> buffPtr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\toutBuffer <span class=\"token operator\">+</span><span class=\"token operator\">=</span> nFramesToCopy <span class=\"token operator\">*</span> outChannels<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels <span class=\"token operator\">></span> outChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// otherwise, if we have more channels than the output is requesting,</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// we copy the first outChannels channels</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nFramesToCopy<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> outChannels<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token operator\">*</span>outBuffer<span class=\"token operator\">++</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token operator\">*</span>buffPtr<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// and skip the rest</span>\n\t\t\tbuffPtr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> channels <span class=\"token operator\">-</span> outChannels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// we have fewer channels than output is requesting. so replicate as many channels as possible then loop.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// if we have 2 channels and output wants 5, data is copied from our channels in the following in order:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// 1 2 1 2 1</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nFramesToCopy<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> outChannels<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token operator\">*</span>outBuffer<span class=\"token operator\">++</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> buffPtr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">%</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tbuffPtr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> channels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// do we have anything left?</span>\n\t<span class=\"token keyword\">int</span> framesRemaining <span class=\"token operator\">=</span> nFrames <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>nFramesToCopy<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>framesRemaining <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// loop</span>\n\t\t<span class=\"token function\">addTo</span><span class=\"token punctuation\">(</span>outBuffer<span class=\"token punctuation\">,</span> framesRemaining<span class=\"token punctuation\">,</span> outChannels<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>ofSoundBuffer <span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"can't append sound buffers with different num channels\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>other<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>other<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">prepareBufferForResampling</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofSoundBuffer <span class=\"token operator\">&amp;</span>in<span class=\"token punctuation\">,</span> ofSoundBuffer <span class=\"token operator\">&amp;</span>out<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numFrames<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>size_t totalOutBufferSize <span class=\"token operator\">=</span> numFrames <span class=\"token operator\">*</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>totalOutBufferSize <span class=\"token operator\">&lt;</span> out<span class=\"token punctuation\">.</span><span class=\"token function\">getBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">max_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>totalOutBufferSize<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSoundUtils\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"resampling would create a buffer size of \"</span> <span class=\"token operator\">&lt;&lt;</span> totalOutBufferSize <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" (too large for std::vector)\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tout<span class=\"token punctuation\">.</span><span class=\"token function\">setNumChannels</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tout<span class=\"token punctuation\">.</span><span class=\"token function\">setSampleRate</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">getSampleRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// based on maximilian optimized for performance.</span>\n<span class=\"token comment\" spellcheck=\"true\">// might lose 1 or 2 samples when it reaches the end of the buffer</span>\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">linearResampleTo</span><span class=\"token punctuation\">(</span>ofSoundBuffer <span class=\"token operator\">&amp;</span>outBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t fromFrame<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numFrames<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> speed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> loop<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\n\tstd<span class=\"token operator\">::</span>size_t inChannels <span class=\"token operator\">=</span> <span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t inFrames <span class=\"token operator\">=</span> <span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> bufferReady <span class=\"token operator\">=</span> <span class=\"token function\">prepareBufferForResampling</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> outBuffer<span class=\"token punctuation\">,</span> numFrames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bufferReady<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\toutBuffer <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tstd<span class=\"token operator\">::</span>size_t start <span class=\"token operator\">=</span> fromFrame<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t end <span class=\"token operator\">=</span> start<span class=\"token operator\">*</span>inChannels <span class=\"token operator\">+</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>numFrames<span class=\"token operator\">*</span>inChannels<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>speed<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> position <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t intPosition <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> increment <span class=\"token operator\">=</span> speed<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t copySize <span class=\"token operator\">=</span> inChannels<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t to<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">&lt;</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>inChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tto <span class=\"token operator\">=</span> numFrames<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fromFrame<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">></span>inFrames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tto <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tto <span class=\"token operator\">=</span> <span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>inFrames<span class=\"token number\">-2</span><span class=\"token operator\">-</span>fromFrame<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">float</span> remainder <span class=\"token operator\">=</span> position <span class=\"token operator\">-</span> intPosition<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> resBufferPtr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>outBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>to<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tintPosition <span class=\"token operator\">*</span><span class=\"token operator\">=</span> inChannels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>inChannels<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\ta <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tb <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>inChannels<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">*</span>resBufferPtr<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofLerp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>remainder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tposition <span class=\"token operator\">+</span><span class=\"token operator\">=</span> increment<span class=\"token punctuation\">;</span>\n\t\tintPosition <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n\t\tremainder <span class=\"token operator\">=</span> position <span class=\"token operator\">-</span> intPosition<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">>=</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>inChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tto <span class=\"token operator\">=</span> numFrames<span class=\"token operator\">-</span>to<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tintPosition <span class=\"token operator\">%</span><span class=\"token operator\">=</span> inFrames<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>to<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tintPosition <span class=\"token operator\">*</span><span class=\"token operator\">=</span> inChannels<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>inChannels<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\ta <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tb <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>inChannels<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token operator\">*</span>resBufferPtr<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofLerp</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>remainder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tposition <span class=\"token operator\">+</span><span class=\"token operator\">=</span> increment<span class=\"token punctuation\">;</span>\n\t\t\t\tintPosition <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>resBufferPtr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>to<span class=\"token operator\">*</span>copySize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// based on maximilian optimized for performance.</span>\n<span class=\"token comment\" spellcheck=\"true\">// might lose 1 to 3 samples when it reaches the end of the buffer</span>\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">hermiteResampleTo</span><span class=\"token punctuation\">(</span>ofSoundBuffer <span class=\"token operator\">&amp;</span>outBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t fromFrame<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numFrames<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> speed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> loop<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\n\tstd<span class=\"token operator\">::</span>size_t inChannels <span class=\"token operator\">=</span> <span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t inFrames <span class=\"token operator\">=</span> <span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> bufferReady <span class=\"token operator\">=</span> <span class=\"token function\">prepareBufferForResampling</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> outBuffer<span class=\"token punctuation\">,</span> numFrames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bufferReady<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\toutBuffer <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tstd<span class=\"token operator\">::</span>size_t start <span class=\"token operator\">=</span> fromFrame<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t end <span class=\"token operator\">=</span> start<span class=\"token operator\">*</span>inChannels <span class=\"token operator\">+</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>numFrames<span class=\"token operator\">*</span>inChannels<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>speed<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">double</span> position <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t intPosition <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> remainder <span class=\"token operator\">=</span> position <span class=\"token operator\">-</span> intPosition<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> increment <span class=\"token operator\">=</span> speed<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t copySize <span class=\"token operator\">=</span> inChannels<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t to<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">&lt;</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>inChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tto <span class=\"token operator\">=</span> numFrames<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fromFrame<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token operator\">></span>inFrames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tto <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tto <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">(</span>inFrames<span class=\"token number\">-3</span><span class=\"token operator\">-</span>fromFrame<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>speed<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> resBufferPtr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>outBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t from <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>intPosition<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tintPosition <span class=\"token operator\">*</span><span class=\"token operator\">=</span> inChannels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>inChannels<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\ta<span class=\"token operator\">=</span>loop<span class=\"token operator\">?</span>buffer<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\tb<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tc<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span>inChannels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\td<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span>inChannels<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">*</span>resBufferPtr<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofInterpolateHermite</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> remainder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tposition <span class=\"token operator\">+</span><span class=\"token operator\">=</span> increment<span class=\"token punctuation\">;</span>\n\t\tintPosition <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n\t\tremainder <span class=\"token operator\">=</span> position <span class=\"token operator\">-</span> intPosition<span class=\"token punctuation\">;</span>\n\t\tfrom<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i<span class=\"token operator\">=</span>from<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>to<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tintPosition <span class=\"token operator\">*</span><span class=\"token operator\">=</span> inChannels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>inChannels<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\ta<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token operator\">-</span>inChannels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tb<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tc<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span>inChannels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\td<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span>inChannels<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">*</span>resBufferPtr<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofInterpolateHermite</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> remainder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tposition <span class=\"token operator\">+</span><span class=\"token operator\">=</span> increment<span class=\"token punctuation\">;</span>\n\t\tintPosition <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n\t\tremainder <span class=\"token operator\">=</span> position <span class=\"token operator\">-</span> intPosition<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>end<span class=\"token operator\">>=</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>inChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tto <span class=\"token operator\">=</span> numFrames<span class=\"token operator\">-</span>to<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tintPosition <span class=\"token operator\">%</span><span class=\"token operator\">=</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>to<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>inChannels<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\ta<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token operator\">-</span>inChannels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tb<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tc<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span>inChannels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\td<span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>intPosition<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span>inChannels<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token operator\">*</span>resBufferPtr<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofInterpolateHermite</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">,</span> remainder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tposition <span class=\"token operator\">+</span><span class=\"token operator\">=</span> increment<span class=\"token punctuation\">;</span>\n\t\t\t\tintPosition <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>\n\t\t\t\tremainder <span class=\"token operator\">=</span> position <span class=\"token operator\">-</span> intPosition<span class=\"token punctuation\">;</span>\n\t\t\t\tintPosition <span class=\"token operator\">*</span><span class=\"token operator\">=</span> inChannels<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>resBufferPtr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>to<span class=\"token operator\">*</span>copySize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">resampleTo</span><span class=\"token punctuation\">(</span>ofSoundBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t fromFrame<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t numFrames<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> speed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> loop<span class=\"token punctuation\">,</span> InterpolationAlgorithm algorithm<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> Linear<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">linearResampleTo</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> fromFrame<span class=\"token punctuation\">,</span> numFrames<span class=\"token punctuation\">,</span> speed<span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> Hermite<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">hermiteResampleTo</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> fromFrame<span class=\"token punctuation\">,</span> numFrames<span class=\"token punctuation\">,</span> speed<span class=\"token punctuation\">,</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">resample</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> speed<span class=\"token punctuation\">,</span> InterpolationAlgorithm algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofSoundBuffer resampled<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">resampleTo</span><span class=\"token punctuation\">(</span>resampled<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ceilf</span><span class=\"token punctuation\">(</span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> speed<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> algorithm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> resampled<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span>ofSoundBuffer <span class=\"token operator\">&amp;</span> targetBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t sourceChannel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSoundBuffer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getChannel requested on empty buffer\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sourceChannel <span class=\"token operator\">>=</span> channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSoundBuffer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getChannel requested channel \"</span> <span class=\"token operator\">&lt;&lt;</span> sourceChannel <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" but we only have \"</span> <span class=\"token operator\">&lt;&lt;</span> channels <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" channels. clamping channel to \"</span> <span class=\"token operator\">&lt;&lt;</span> channels<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n\t\tsourceChannel <span class=\"token operator\">=</span> channels<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\ttargetBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttargetBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setSampleRate</span><span class=\"token punctuation\">(</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span>targetBuffer<span class=\"token punctuation\">,</span> <span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// fetch samples from only one channel</span>\n\t\ttargetBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> bufferPtr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>buffer<span class=\"token punctuation\">[</span>sourceChannel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> targetBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\ttargetBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>bufferPtr<span class=\"token punctuation\">;</span>\n\t\t\tbufferPtr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> channels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofSoundBuffer <span class=\"token operator\">&amp;</span> inBuffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t targetChannel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// resize ourself to match inBuffer</span>\n\t<span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>inBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// copy from inBuffer to targetChannel</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> bufferPtr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>buffer<span class=\"token punctuation\">[</span>targetChannel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> inBufferPtr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>inBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span>bufferPtr <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>inBufferPtr<span class=\"token punctuation\">;</span>\n\t\tbufferPtr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> channels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// inBuffer.getNumChannels() is probably 1 but let's be safe</span>\n\t\tinBufferPtr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> inBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">getRMSAmplitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">double</span> acc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tacc <span class=\"token operator\">+</span><span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>acc <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">getRMSAmplitudeChannel</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t channel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channel <span class=\"token operator\">></span> channels <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">double</span> acc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> sample <span class=\"token operator\">=</span> <span class=\"token function\">getSample</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tacc <span class=\"token operator\">+</span><span class=\"token operator\">=</span> sample <span class=\"token operator\">*</span> sample<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>acc <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token function\">getNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> maxAmplitude <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tmaxAmplitude <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxAmplitude<span class=\"token punctuation\">,</span> <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">float</span> normalizationFactor <span class=\"token operator\">=</span> level<span class=\"token operator\">/</span>maxAmplitude<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> normalizationFactor<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">trimSilence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> threshold<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> trimStart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> trimEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSoundBuffer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"attempted to trim empty buffer\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstd<span class=\"token operator\">::</span>size_t firstNonSilence <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>size_t lastNonSilence <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>trimStart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tfirstNonSilence <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>trimEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> lastNonSilence<span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> firstNonSilence<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> threshold<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tlastNonSilence <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tfirstNonSilence <span class=\"token operator\">-</span><span class=\"token operator\">=</span> firstNonSilence <span class=\"token operator\">%</span> <span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlastNonSilence  <span class=\"token operator\">-</span><span class=\"token operator\">=</span> lastNonSilence  <span class=\"token operator\">%</span> <span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>trimEnd<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> lastNonSilence<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>trimStart<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> firstNonSilence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">checkSizeAndChannelsConsistency</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"trimSilence\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">fillWithNoise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> amplitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>amplitude<span class=\"token punctuation\">,</span> amplitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> ofSoundBuffer<span class=\"token operator\">::</span><span class=\"token function\">fillWithTone</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> pitchHz<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> phase <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> step <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span>two_pi<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>pitchHz<span class=\"token operator\">/</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>size_t base <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">&lt;</span>channels<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\tbuffer<span class=\"token punctuation\">[</span>base<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">sinf</span><span class=\"token punctuation\">(</span>phase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tphase <span class=\"token operator\">+</span><span class=\"token operator\">=</span> step<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> phase<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>ofSoundBuffer <span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> ofSoundBuffer <span class=\"token operator\">&amp;</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tsrc<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n","type":"source","static":true}}],"fetch":[]}