{"data":[{"page":{"entry":{"name":"ofTrueTypeFont.cpp","filename":"ofTrueTypeFont.cpp","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/graphics/ofTrueTypeFont.cpp","path":"/openframeworks/graphics/ofTrueTypeFont_cpp","route":"/openframeworks/graphics/ofTrueTypeFont.cpp","dir":"../libs/openFrameworks/graphics","ext":"cpp","type":"source","id":282,"parent":259,"breadcrumbs":[259,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofTrueTypeFont.h\"</span></span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ft2build.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LINUX</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fontconfig/fontconfig.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> FT_FREETYPE_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> FT_GLYPH_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> FT_OUTLINE_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> FT_TRIGONOMETRY_H</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;numeric></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGraphics.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"utf8.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Space <span class=\"token punctuation\">{</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>IdeographicSpace <span class=\"token punctuation\">{</span><span class=\"token number\">0x3000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3000</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Latin <span class=\"token punctuation\">{</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x007F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Latin1Supplement <span class=\"token punctuation\">{</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x00FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>LatinA <span class=\"token punctuation\">{</span><span class=\"token number\">0x0100</span><span class=\"token punctuation\">,</span><span class=\"token number\">0x017F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Greek <span class=\"token punctuation\">{</span><span class=\"token number\">0x0370</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Cyrillic <span class=\"token punctuation\">{</span><span class=\"token number\">0x0400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x04FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Arabic <span class=\"token punctuation\">{</span><span class=\"token number\">0x0600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x077F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>ArabicSupplement <span class=\"token punctuation\">{</span><span class=\"token number\">0x0750</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x077F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>ArabicExtendedA <span class=\"token punctuation\">{</span><span class=\"token number\">0x08A0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x08FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Devanagari <span class=\"token punctuation\">{</span><span class=\"token number\">0x0900</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x097F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>HangulJamo <span class=\"token punctuation\">{</span><span class=\"token number\">0x1100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x11FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>VedicExtensions <span class=\"token punctuation\">{</span><span class=\"token number\">0x1CD0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1CFF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>LatinExtendedAdditional <span class=\"token punctuation\">{</span><span class=\"token number\">0x1E00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1EFF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>GreekExtended <span class=\"token punctuation\">{</span><span class=\"token number\">0x1F00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1FFF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>GeneralPunctuation <span class=\"token punctuation\">{</span><span class=\"token number\">0x2000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x206F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>SuperAndSubScripts <span class=\"token punctuation\">{</span><span class=\"token number\">0x2070</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x209F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>CurrencySymbols <span class=\"token punctuation\">{</span><span class=\"token number\">0x20A0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20CF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>LetterLikeSymbols <span class=\"token punctuation\">{</span><span class=\"token number\">0x2100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x214F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>NumberForms <span class=\"token punctuation\">{</span><span class=\"token number\">0x2150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x218F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Arrows <span class=\"token punctuation\">{</span><span class=\"token number\">0x2190</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x21FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>MathOperators <span class=\"token punctuation\">{</span><span class=\"token number\">0x2200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x22FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>MiscTechnical <span class=\"token punctuation\">{</span><span class=\"token number\">0x2300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x23FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>BoxDrawing <span class=\"token punctuation\">{</span><span class=\"token number\">0x2500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x257F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>BlockElement <span class=\"token punctuation\">{</span><span class=\"token number\">0x2580</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x259F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>GeometricShapes <span class=\"token punctuation\">{</span><span class=\"token number\">0x25A0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x25FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>MiscSymbols <span class=\"token punctuation\">{</span><span class=\"token number\">0x2600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x26FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Dingbats <span class=\"token punctuation\">{</span><span class=\"token number\">0x2700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x27BF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Hiragana <span class=\"token punctuation\">{</span><span class=\"token number\">0x3040</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x309F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Katakana <span class=\"token punctuation\">{</span><span class=\"token number\">0x30A0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x30FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>HangulCompatJamo <span class=\"token punctuation\">{</span><span class=\"token number\">0x3130</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x318F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>KatakanaPhoneticExtensions <span class=\"token punctuation\">{</span><span class=\"token number\">0x31F0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x31FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>CJKLettersAndMonths <span class=\"token punctuation\">{</span><span class=\"token number\">0x3200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x32FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>CJKUnified <span class=\"token punctuation\">{</span><span class=\"token number\">0x4E00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9FD5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>DevanagariExtended <span class=\"token punctuation\">{</span><span class=\"token number\">0xA8E0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA8FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>HangulExtendedA <span class=\"token punctuation\">{</span><span class=\"token number\">0xA960</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA97F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>HangulSyllables <span class=\"token punctuation\">{</span><span class=\"token number\">0xAC00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD7AF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>HangulExtendedB <span class=\"token punctuation\">{</span><span class=\"token number\">0xD7B0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD7FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>AlphabeticPresentationForms <span class=\"token punctuation\">{</span><span class=\"token number\">0xFB00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFB4F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>ArabicPresFormsA <span class=\"token punctuation\">{</span><span class=\"token number\">0xFB50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFDFF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>ArabicPresFormsB <span class=\"token punctuation\">{</span><span class=\"token number\">0xFE70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFEFF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>KatakanaHalfAndFullwidthForms <span class=\"token punctuation\">{</span><span class=\"token number\">0xFF00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFFEF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>KanaSupplement <span class=\"token punctuation\">{</span><span class=\"token number\">0x1B000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1B0FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>RumiNumericalSymbols <span class=\"token punctuation\">{</span><span class=\"token number\">0x10E60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x10E7F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>ArabicMath <span class=\"token punctuation\">{</span><span class=\"token number\">0x1EE00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1EEFF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>MiscSymbolsAndPictographs <span class=\"token punctuation\">{</span><span class=\"token number\">0x1F300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1F5FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Emoticons <span class=\"token punctuation\">{</span><span class=\"token number\">0x1F601</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1F64F</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>TransportAndMap <span class=\"token punctuation\">{</span><span class=\"token number\">0x1F680</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1F6FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>EnclosedCharacters <span class=\"token punctuation\">{</span><span class=\"token number\">0x24C2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1F251</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>Uncategorized <span class=\"token punctuation\">{</span><span class=\"token number\">0x00A9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1F5FF</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>AdditionalEmoticons <span class=\"token punctuation\">{</span><span class=\"token number\">0x1F600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1F636</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>AdditionalTransportAndMap <span class=\"token punctuation\">{</span><span class=\"token number\">0x1F681</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1F6C5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range ofUnicode<span class=\"token operator\">::</span>OtherAdditionalSymbols <span class=\"token punctuation\">{</span><span class=\"token number\">0x1F30D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1F567</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> ofAlphabet<span class=\"token operator\">::</span>Emoji <span class=\"token punctuation\">{</span>\n\tofUnicode<span class=\"token operator\">::</span>Space<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>Emoticons<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>Dingbats<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>Uncategorized<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>TransportAndMap<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>EnclosedCharacters<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>OtherAdditionalSymbols<span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> ofAlphabet<span class=\"token operator\">::</span>Japanese <span class=\"token punctuation\">{</span>\n\tofUnicode<span class=\"token operator\">::</span>Space<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>IdeographicSpace<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>Hiragana<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>Katakana<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>KatakanaPhoneticExtensions<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>CJKLettersAndMonths<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>CJKUnified\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> ofAlphabet<span class=\"token operator\">::</span>Chinese <span class=\"token punctuation\">{</span>\n\tofUnicode<span class=\"token operator\">::</span>Space<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>IdeographicSpace<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>CJKLettersAndMonths<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>CJKUnified\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> ofAlphabet<span class=\"token operator\">::</span>Korean <span class=\"token punctuation\">{</span>\n\tofUnicode<span class=\"token operator\">::</span>Space<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>IdeographicSpace<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>HangulJamo<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>HangulCompatJamo<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>HangulExtendedA<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>HangulExtendedB<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>HangulSyllables\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> ofAlphabet<span class=\"token operator\">::</span>Arabic <span class=\"token punctuation\">{</span>\n\tofUnicode<span class=\"token operator\">::</span>Space<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>Arabic<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>ArabicExtendedA<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>ArabicMath<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>ArabicPresFormsA<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>ArabicPresFormsB\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> ofAlphabet<span class=\"token operator\">::</span>Devanagari <span class=\"token punctuation\">{</span>\n\tofUnicode<span class=\"token operator\">::</span>Devanagari<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>DevanagariExtended<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>VedicExtensions\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> ofAlphabet<span class=\"token operator\">::</span>Latin <span class=\"token punctuation\">{</span>\n\tofUnicode<span class=\"token operator\">::</span>Latin1Supplement<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>LatinExtendedAdditional<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>Latin<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>LatinA<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> ofAlphabet<span class=\"token operator\">::</span>Greek <span class=\"token punctuation\">{</span>\n\tofUnicode<span class=\"token operator\">::</span>Space<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>Greek<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>GreekExtended\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> ofAlphabet<span class=\"token operator\">::</span>Cyrillic <span class=\"token punctuation\">{</span>\n\tofUnicode<span class=\"token operator\">::</span>Space<span class=\"token punctuation\">,</span>\n\tofUnicode<span class=\"token operator\">::</span>Cyrillic\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> ofTrueTypeFont<span class=\"token operator\">::</span>glyphProps ofTrueTypeFont<span class=\"token operator\">::</span>invalidProps<span class=\"token punctuation\">{</span>\n\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.0f</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> size_t TAB_WIDTH <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// Number of spaces per tab</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> printVectorInfo <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> ttfGlobalDpi <span class=\"token operator\">=</span> <span class=\"token number\">96</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> librariesInitialized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> FT_Library library<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofTrueTypeShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LINUX</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// This crashes if gtk was called at any time cause pango leaks</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// its fc related objects: https://github.com/openframeworks/openFrameworks/issues/5061</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//FcFini();</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> ofPath <span class=\"token function\">makeContoursForCharacter</span><span class=\"token punctuation\">(</span>FT_Face face<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofPath charOutlines<span class=\"token punctuation\">;</span>\n\tcharOutlines<span class=\"token punctuation\">.</span><span class=\"token function\">setUseShapeColor</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcharOutlines<span class=\"token punctuation\">.</span><span class=\"token function\">setPolyWindingMode</span><span class=\"token punctuation\">(</span>OF_POLY_WINDING_NONZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> moveTo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> FT_Vector<span class=\"token operator\">*</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofPath <span class=\"token operator\">*</span> charOutlines <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcharOutlines<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>to<span class=\"token operator\">-</span><span class=\"token operator\">></span>x<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>to<span class=\"token operator\">-</span><span class=\"token operator\">></span>y<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> lineTo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> FT_Vector<span class=\"token operator\">*</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofPath <span class=\"token operator\">*</span> charOutlines <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcharOutlines<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span>to<span class=\"token operator\">-</span><span class=\"token operator\">></span>x<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>to<span class=\"token operator\">-</span><span class=\"token operator\">></span>y<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> conicTo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> FT_Vector<span class=\"token operator\">*</span>cp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FT_Vector<span class=\"token operator\">*</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofPath <span class=\"token operator\">*</span> charOutlines <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> lastP <span class=\"token operator\">=</span> charOutlines<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">;</span>\n\t\tcharOutlines<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">quadBezierTo</span><span class=\"token punctuation\">(</span>lastP<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>cp<span class=\"token operator\">-</span><span class=\"token operator\">></span>x<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>cp<span class=\"token operator\">-</span><span class=\"token operator\">></span>y<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>to<span class=\"token operator\">-</span><span class=\"token operator\">></span>x<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>to<span class=\"token operator\">-</span><span class=\"token operator\">></span>y<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> cubicTo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> FT_Vector<span class=\"token operator\">*</span>cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FT_Vector<span class=\"token operator\">*</span>cp2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> FT_Vector<span class=\"token operator\">*</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofPath <span class=\"token operator\">*</span> charOutlines <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcharOutlines<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>cp1<span class=\"token operator\">-</span><span class=\"token operator\">></span>x<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>cp1<span class=\"token operator\">-</span><span class=\"token operator\">></span>y<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>cp2<span class=\"token operator\">-</span><span class=\"token operator\">></span>x<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>cp2<span class=\"token operator\">-</span><span class=\"token operator\">></span>y<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>to<span class=\"token operator\">-</span><span class=\"token operator\">></span>x<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>to<span class=\"token operator\">-</span><span class=\"token operator\">></span>y<span class=\"token operator\">/</span><span class=\"token number\">64</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tFT_Outline_Funcs funcs<span class=\"token punctuation\">{</span>\n\t\tmoveTo<span class=\"token punctuation\">,</span>\n\t\tlineTo<span class=\"token punctuation\">,</span>\n\t\tconicTo<span class=\"token punctuation\">,</span>\n\t\tcubicTo<span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">FT_Outline_Decompose</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>outline<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>funcs<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>charOutlines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcharOutlines<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> charOutlines<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_OSX</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">osxFontPathByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> fontname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tCFStringRef targetName <span class=\"token operator\">=</span> <span class=\"token function\">CFStringCreateWithCString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> fontname<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> kCFStringEncodingUTF8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tCTFontDescriptorRef targetDescriptor <span class=\"token operator\">=</span> <span class=\"token function\">CTFontDescriptorCreateWithNameAndSize</span><span class=\"token punctuation\">(</span>targetName<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tCFURLRef targetURL <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CFURLRef<span class=\"token punctuation\">)</span> <span class=\"token function\">CTFontDescriptorCopyAttribute</span><span class=\"token punctuation\">(</span>targetDescriptor<span class=\"token punctuation\">,</span> kCTFontURLAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring fontPath <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>targetURL<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tUInt8 buffer<span class=\"token punctuation\">[</span>PATH_MAX<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">CFURLGetFileSystemRepresentation</span><span class=\"token punctuation\">(</span>targetURL<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> PATH_MAX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfontPath <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>targetURL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>targetName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>targetDescriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> fontPath<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n<span class=\"token comment\" spellcheck=\"true\">// font font face -> file name name mapping</span>\n<span class=\"token keyword\">static</span> map<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> fonts_table<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// read font linking information from registry, and store in std::map</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">initWindows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tLONG l_ret<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">wchar_t</span> <span class=\"token operator\">*</span>Fonts <span class=\"token operator\">=</span> L<span class=\"token string\">\"SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Fonts\"</span><span class=\"token punctuation\">;</span>\n\n\tHKEY key_ft<span class=\"token punctuation\">;</span>\n\tl_ret <span class=\"token operator\">=</span> <span class=\"token function\">RegOpenKeyExW</span><span class=\"token punctuation\">(</span>HKEY_LOCAL_MACHINE<span class=\"token punctuation\">,</span> Fonts<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> KEY_QUERY_VALUE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>key_ft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l_ret <span class=\"token operator\">!=</span> ERROR_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"initWindows(): couldn't find fonts registery key\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tDWORD value_count<span class=\"token punctuation\">;</span>\n\tDWORD max_data_len<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">wchar_t</span> value_name<span class=\"token punctuation\">[</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tBYTE <span class=\"token operator\">*</span>value_data<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get font_file_name -> font_face mapping from the \"Fonts\" registry key</span>\n\n\tl_ret <span class=\"token operator\">=</span> <span class=\"token function\">RegQueryInfoKeyW</span><span class=\"token punctuation\">(</span>key_ft<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>value_count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>max_data_len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l_ret <span class=\"token operator\">!=</span> ERROR_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"initWindows(): couldn't query registery for fonts\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// no font installed</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value_count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"initWindows(): couldn't find any fonts in registery\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// max_data_len is in BYTE</span>\n\tvalue_data <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>BYTE <span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">HeapAlloc</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetProcessHeap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> HEAP_GENERATE_EXCEPTIONS<span class=\"token punctuation\">,</span> max_data_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value_data <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">char</span> value_name_char<span class=\"token punctuation\">[</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> value_data_char<span class=\"token punctuation\">[</span><span class=\"token number\">2048</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/*char ppidl[2048];\n\tchar fontsPath[2048];\n\tSHGetKnownFolderIDList(FOLDERID_Fonts, 0, nullptr, &amp;ppidl);\n\tSHGetPathFromIDList(ppidl,&amp;fontsPath);*/</span>\n\tstd<span class=\"token operator\">::</span>string fontsDir <span class=\"token operator\">=</span> <span class=\"token function\">getenv</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"windir\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfontsDir <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"\\\\Fonts\\\\\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>DWORD i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> value_count<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t\tDWORD name_len <span class=\"token operator\">=</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">;</span>\n\t\t\tDWORD data_len <span class=\"token operator\">=</span> max_data_len<span class=\"token punctuation\">;</span>\n\n\t\t\tl_ret <span class=\"token operator\">=</span> <span class=\"token function\">RegEnumValueW</span><span class=\"token punctuation\">(</span>key_ft<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> value_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>name_len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> value_data<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l_ret <span class=\"token operator\">!=</span> ERROR_SUCCESS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t <span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"initWindows(): couldn't read registry key for font type\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token function\">wcstombs</span><span class=\"token punctuation\">(</span>value_name_char<span class=\"token punctuation\">,</span>value_name<span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">wcstombs</span><span class=\"token punctuation\">(</span>value_data_char<span class=\"token punctuation\">,</span><span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">wchar_t</span> <span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>value_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2048</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstd<span class=\"token operator\">::</span>string curr_face <span class=\"token operator\">=</span> value_name_char<span class=\"token punctuation\">;</span>\n\t\t\tstd<span class=\"token operator\">::</span>string font_file <span class=\"token operator\">=</span> value_data_char<span class=\"token punctuation\">;</span>\n\t\t\tcurr_face <span class=\"token operator\">=</span> curr_face<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr_face<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'('</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tfonts_table<span class=\"token punctuation\">[</span>curr_face<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fontsDir <span class=\"token operator\">+</span> font_file<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token function\">HeapFree</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetProcessHeap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> value_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tl_ret <span class=\"token operator\">=</span> <span class=\"token function\">RegCloseKey</span><span class=\"token punctuation\">(</span>key_ft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">winFontPathByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> fontname <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fonts_table<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>fontname<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>fonts_table<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> fonts_table<span class=\"token punctuation\">[</span>fontname<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> fonts_table<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">!=</span>fonts_table<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofToLower</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">-</span><span class=\"token operator\">></span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ofToLower</span><span class=\"token punctuation\">(</span>fontname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> it<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LINUX</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">linuxFontPathByName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> fontname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>string filename<span class=\"token punctuation\">;</span>\n\tFcPattern <span class=\"token operator\">*</span> pattern <span class=\"token operator\">=</span> <span class=\"token function\">FcNameParse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> FcChar8<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>fontname<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tFcBool ret <span class=\"token operator\">=</span> <span class=\"token function\">FcConfigSubstitute</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>pattern<span class=\"token punctuation\">,</span>FcMatchPattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"linuxFontPathByName(): couldn't find font file or system font with name \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fontname <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">FcDefaultSubstitute</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tFcResult result<span class=\"token punctuation\">;</span>\n\tFcPattern <span class=\"token operator\">*</span> fontMatch<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\tfontMatch <span class=\"token operator\">=</span> <span class=\"token function\">FcFontMatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>pattern<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fontMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"linuxFontPathByName(): couldn't match font file or system font with name \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fontname <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">FcPatternDestroy</span><span class=\"token punctuation\">(</span>fontMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">FcPatternDestroy</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tFcChar8\t<span class=\"token operator\">*</span>file<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FcPatternGetString</span> <span class=\"token punctuation\">(</span>fontMatch<span class=\"token punctuation\">,</span> FC_FILE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>file<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> FcResultMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tfilename <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>file<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"linuxFontPathByName(): couldn't find font match for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fontname <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">FcPatternDestroy</span><span class=\"token punctuation\">(</span>fontMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">FcPatternDestroy</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">FcPatternDestroy</span><span class=\"token punctuation\">(</span>fontMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FcPatternDestroy</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> filename<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">loadFontFace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _fontname<span class=\"token punctuation\">,</span> FT_Face <span class=\"token operator\">&amp;</span> face<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path fontname <span class=\"token operator\">=</span> _fontname<span class=\"token punctuation\">;</span>\n\tfilename <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>_fontname<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofFile <span class=\"token function\">fontFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> fontID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fontFile<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LINUX</span>\n        filename <span class=\"token operator\">=</span> <span class=\"token function\">linuxFontPathByName</span><span class=\"token punctuation\">(</span>fontname<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_OSX)</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fontname<span class=\"token operator\">==</span>OF_TTF_SANS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfontname <span class=\"token operator\">=</span> <span class=\"token string\">\"Helvetica Neue\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> MAC_OS_X_VERSION_10_13 &amp;&amp; MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_13</span>\n\t\t\t\tfontID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t\t\tfontID <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fontname<span class=\"token operator\">==</span>OF_TTF_SERIF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfontname <span class=\"token operator\">=</span> <span class=\"token string\">\"Times New Roman\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fontname<span class=\"token operator\">==</span>OF_TTF_MONO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfontname <span class=\"token operator\">=</span> <span class=\"token string\">\"Menlo Regular\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n        filename <span class=\"token operator\">=</span> <span class=\"token function\">osxFontPathByName</span><span class=\"token punctuation\">(</span>fontname<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_WIN32)</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fontname<span class=\"token operator\">==</span>OF_TTF_SANS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfontname <span class=\"token operator\">=</span> <span class=\"token string\">\"Arial\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fontname<span class=\"token operator\">==</span>OF_TTF_SERIF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfontname <span class=\"token operator\">=</span> <span class=\"token string\">\"Times New Roman\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fontname<span class=\"token operator\">==</span>OF_TTF_MONO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfontname <span class=\"token operator\">=</span> <span class=\"token string\">\"Courier New\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n        filename <span class=\"token operator\">=</span> <span class=\"token function\">winFontPathByName</span><span class=\"token punctuation\">(</span>fontname<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>filename <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadFontFace(): couldn't find font \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fontname <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadFontFace(): \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fontname <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" not a file in data loading system font from \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> filename <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tFT_Error err<span class=\"token punctuation\">;</span>\n    err <span class=\"token operator\">=</span> <span class=\"token function\">FT_New_Face</span><span class=\"token punctuation\">(</span> library<span class=\"token punctuation\">,</span> filename<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> fontID<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>face <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// simple error table in lieu of full table (see fterrors.h)</span>\n\t\tstring errorString <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown freetype\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> errorString <span class=\"token operator\">=</span> <span class=\"token string\">\"INVALID FILENAME\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadFontFace(): couldn't create new face for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fontname <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\": FT_Error \"</span> <span class=\"token operator\">&lt;&lt;</span> err <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> errorString<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">setGlobalDpi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newDpi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tttfGlobalDpi <span class=\"token operator\">=</span> newDpi<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxAndroidUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">initLibraries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>librariesInitialized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tFT_Error err<span class=\"token punctuation\">;</span>\n\t\terr <span class=\"token operator\">=</span> <span class=\"token function\">FT_Init_FreeType</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>library <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadFont(): couldn't initialize Freetype lib: FT_Error \"</span> <span class=\"token operator\">&lt;&lt;</span> err<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LINUX</span>\n\t\tFcBool result <span class=\"token operator\">=</span> <span class=\"token function\">FcInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token function\">initWindows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\tlibrariesInitialized <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------</span>\nofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">ofTrueTypeFont</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">settings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbLoadedOk\t\t<span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tletterSpacing <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tspaceSize <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tfontUnitScale <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>OF_PRIMITIVE_TRIANGLES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tascenderHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tdescenderHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tlineHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------</span>\nofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofTrueTypeFont</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>unloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>reloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------</span>\nofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">ofTrueTypeFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTrueTypeFont<span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">settings</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>unloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>reloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\tbLoadedOk <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>bLoadedOk<span class=\"token punctuation\">;</span>\n\n\tcharOutlines <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>charOutlines<span class=\"token punctuation\">;</span>\n\tcharOutlinesNonVFlipped <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>charOutlinesNonVFlipped<span class=\"token punctuation\">;</span>\n\tcharOutlinesContour <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>charOutlinesContour<span class=\"token punctuation\">;</span>\n\tcharOutlinesNonVFlippedContour <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>charOutlinesNonVFlippedContour<span class=\"token punctuation\">;</span>\n\n\tlineHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>lineHeight<span class=\"token punctuation\">;</span>\n\tascenderHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>ascenderHeight<span class=\"token punctuation\">;</span>\n\tdescenderHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>descenderHeight<span class=\"token punctuation\">;</span>\n\tglyphBBox <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>glyphBBox<span class=\"token punctuation\">;</span>\n\tletterSpacing <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>letterSpacing<span class=\"token punctuation\">;</span>\n\tspaceSize <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>spaceSize<span class=\"token punctuation\">;</span>\n\tfontUnitScale <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>fontUnitScale<span class=\"token punctuation\">;</span>\n\n\tcps <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>cps<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// properties for each character</span>\n\tsettings <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">;</span>\n\tglyphIndexMap <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>glyphIndexMap<span class=\"token punctuation\">;</span>\n\ttexAtlas <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>texAtlas<span class=\"token punctuation\">;</span>\n\tface <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>face<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------</span>\nofTrueTypeFont <span class=\"token operator\">&amp;</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTrueTypeFont<span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>unloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>reloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\tsettings <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">;</span>\n\tbLoadedOk <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>bLoadedOk<span class=\"token punctuation\">;</span>\n\n\tcharOutlines <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>charOutlines<span class=\"token punctuation\">;</span>\n\tcharOutlinesNonVFlipped <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>charOutlinesNonVFlipped<span class=\"token punctuation\">;</span>\n\tcharOutlinesContour <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>charOutlinesContour<span class=\"token punctuation\">;</span>\n\tcharOutlinesNonVFlippedContour <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>charOutlinesNonVFlippedContour<span class=\"token punctuation\">;</span>\n\n\tlineHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>lineHeight<span class=\"token punctuation\">;</span>\n\tascenderHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>ascenderHeight<span class=\"token punctuation\">;</span>\n\tdescenderHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>descenderHeight<span class=\"token punctuation\">;</span>\n\tglyphBBox <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>glyphBBox<span class=\"token punctuation\">;</span>\n\tletterSpacing <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>letterSpacing<span class=\"token punctuation\">;</span>\n\tspaceSize <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>spaceSize<span class=\"token punctuation\">;</span>\n\tfontUnitScale <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>fontUnitScale<span class=\"token punctuation\">;</span>\n\n\tcps <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>cps<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// properties for each character</span>\n\tsettings <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">;</span>\n\tglyphIndexMap <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>glyphIndexMap<span class=\"token punctuation\">;</span>\n\ttexAtlas <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>texAtlas<span class=\"token punctuation\">;</span>\n\tface <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>face<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------</span>\nofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">ofTrueTypeFont</span><span class=\"token punctuation\">(</span>ofTrueTypeFont<span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">settings</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>unloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>reloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\tbLoadedOk <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>bLoadedOk<span class=\"token punctuation\">;</span>\n\n\tcharOutlines <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>charOutlines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcharOutlinesNonVFlipped <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>charOutlinesNonVFlipped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcharOutlinesContour <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>charOutlinesContour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcharOutlinesNonVFlippedContour <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>charOutlinesNonVFlippedContour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tlineHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>lineHeight<span class=\"token punctuation\">;</span>\n\tascenderHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>ascenderHeight<span class=\"token punctuation\">;</span>\n\tdescenderHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>descenderHeight<span class=\"token punctuation\">;</span>\n\tglyphBBox <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>glyphBBox<span class=\"token punctuation\">;</span>\n\tletterSpacing <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>letterSpacing<span class=\"token punctuation\">;</span>\n\tspaceSize <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>spaceSize<span class=\"token punctuation\">;</span>\n\tfontUnitScale <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>fontUnitScale<span class=\"token punctuation\">;</span>\n\n\tcps <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>cps<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// properties for each character</span>\n\tsettings <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">;</span>\n\tglyphIndexMap <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>glyphIndexMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttexAtlas <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>texAtlas<span class=\"token punctuation\">;</span>\n\tface <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>face<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------</span>\nofTrueTypeFont <span class=\"token operator\">&amp;</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofTrueTypeFont<span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>unloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>reloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\tbLoadedOk <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>bLoadedOk<span class=\"token punctuation\">;</span>\n\n\tcharOutlines <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>charOutlines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcharOutlinesNonVFlipped <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>charOutlinesNonVFlipped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcharOutlinesContour <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>charOutlinesContour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcharOutlinesNonVFlippedContour <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>charOutlinesNonVFlippedContour<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tlineHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>lineHeight<span class=\"token punctuation\">;</span>\n\tascenderHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>ascenderHeight<span class=\"token punctuation\">;</span>\n\tdescenderHeight <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>descenderHeight<span class=\"token punctuation\">;</span>\n\tglyphBBox <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>glyphBBox<span class=\"token punctuation\">;</span>\n\tletterSpacing <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>letterSpacing<span class=\"token punctuation\">;</span>\n\tspaceSize <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>spaceSize<span class=\"token punctuation\">;</span>\n\tfontUnitScale <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>fontUnitScale<span class=\"token punctuation\">;</span>\n\n\tcps <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>cps<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// properties for each character</span>\n\tsettings <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>settings<span class=\"token punctuation\">;</span>\n\tglyphIndexMap <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>glyphIndexMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttexAtlas <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>texAtlas<span class=\"token punctuation\">;</span>\n\tface <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>face<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">unloadTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoadedOk<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\ttexAtlas<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">reloadTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoadedOk<span class=\"token punctuation\">)</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">loadFont</span><span class=\"token punctuation\">(</span>string filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fontSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bAntiAliased<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFullCharacterSet<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> makeContours<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> simplifyAmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dpi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> fontSize<span class=\"token punctuation\">,</span> bAntiAliased<span class=\"token punctuation\">,</span> bFullCharacterSet<span class=\"token punctuation\">,</span> makeContours<span class=\"token punctuation\">,</span> simplifyAmt<span class=\"token punctuation\">,</span> dpi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\nofTrueTypeFont<span class=\"token operator\">::</span>glyph ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">loadGlyph</span><span class=\"token punctuation\">(</span>uint32_t utf8<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tglyph aGlyph<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> err <span class=\"token operator\">=</span> <span class=\"token function\">FT_Load_Glyph</span><span class=\"token punctuation\">(</span> face<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FT_Get_Char_Index</span><span class=\"token punctuation\">(</span> face<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> utf8 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>antialiased <span class=\"token operator\">?</span>  FT_LOAD_FORCE_AUTOHINT <span class=\"token operator\">:</span> FT_LOAD_DEFAULT <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadFont(): FT_Load_Glyph failed for utf8 code \"</span> <span class=\"token operator\">&lt;&lt;</span> utf8 <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": FT_Error \"</span> <span class=\"token operator\">&lt;&lt;</span> err<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> aGlyph<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>antialiased<span class=\"token punctuation\">)</span> <span class=\"token function\">FT_Render_Glyph</span><span class=\"token punctuation\">(</span>face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token punctuation\">,</span> FT_RENDER_MODE_NORMAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token function\">FT_Render_Glyph</span><span class=\"token punctuation\">(</span>face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token punctuation\">,</span> FT_RENDER_MODE_MONO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// -------------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// info about the character:</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>glyph\t\t<span class=\"token operator\">=</span> utf8<span class=\"token punctuation\">;</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>height \t<span class=\"token operator\">=</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>metrics<span class=\"token punctuation\">.</span>height<span class=\"token operator\">>></span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>width \t\t<span class=\"token operator\">=</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>metrics<span class=\"token punctuation\">.</span>width<span class=\"token operator\">>></span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>bearingX\t<span class=\"token operator\">=</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>metrics<span class=\"token punctuation\">.</span>horiBearingX<span class=\"token operator\">>></span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>bearingY\t<span class=\"token operator\">=</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>metrics<span class=\"token punctuation\">.</span>horiBearingY<span class=\"token operator\">>></span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>xmin\t\t<span class=\"token operator\">=</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>bitmap_left<span class=\"token punctuation\">;</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>xmax\t\t<span class=\"token operator\">=</span> aGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>xmin <span class=\"token operator\">+</span> aGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>ymin\t\t<span class=\"token operator\">=</span> <span class=\"token operator\">-</span>face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>bitmap_top<span class=\"token punctuation\">;</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>ymax\t\t<span class=\"token operator\">=</span> aGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>ymin <span class=\"token operator\">+</span> aGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>advance\t<span class=\"token operator\">=</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>metrics<span class=\"token punctuation\">.</span>horiAdvance<span class=\"token operator\">>></span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>tW\t\t\t<span class=\"token operator\">=</span> aGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\taGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>tH\t\t\t<span class=\"token operator\">=</span> aGlyph<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n\tFT_Bitmap<span class=\"token operator\">&amp;</span> bitmap<span class=\"token operator\">=</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>glyph<span class=\"token operator\">-</span><span class=\"token operator\">></span>bitmap<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> width  <span class=\"token operator\">=</span> bitmap<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> bitmap<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> height<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> aGlyph<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Allocate Memory For The Texture Data.</span>\n\taGlyph<span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> OF_PIXELS_GRAY_ALPHA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//-------------------------------- clear data:</span>\n\taGlyph<span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// every luminance pixel = 255</span>\n\taGlyph<span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>antialiased <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofPixels bitmapPixels<span class=\"token punctuation\">;</span>\n\t\tbitmapPixels<span class=\"token punctuation\">.</span><span class=\"token function\">setFromExternalPixels</span><span class=\"token punctuation\">(</span>bitmap<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">,</span>bitmap<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>bitmap<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">,</span>OF_PIXELS_GRAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\taGlyph<span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bitmapPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// true type packs monochrome info in a</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// 1-bit format, hella funky</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// here we unpack it:</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src <span class=\"token operator\">=</span>  bitmap<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span>bitmap<span class=\"token punctuation\">.</span>rows<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> b<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>bptr <span class=\"token operator\">=</span>  src<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> bitmap<span class=\"token punctuation\">.</span>width <span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\taGlyph<span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span>j<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k<span class=\"token operator\">%</span><span class=\"token number\">8</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>bptr<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\taGlyph<span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">+</span>j<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token operator\">&amp;</span><span class=\"token number\">0x80</span> <span class=\"token operator\">?</span> <span class=\"token number\">255</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\tb <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tsrc <span class=\"token operator\">+</span><span class=\"token operator\">=</span> bitmap<span class=\"token punctuation\">.</span>pitch<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> aGlyph<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fontSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> antialiased<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> fullCharacterSet<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> makeContours<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> simplifyAmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dpi<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofTrueTypeFontSettings <span class=\"token function\">settings</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span>fontSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsettings<span class=\"token punctuation\">.</span>antialiased <span class=\"token operator\">=</span> antialiased<span class=\"token punctuation\">;</span>\n\tsettings<span class=\"token punctuation\">.</span>contours <span class=\"token operator\">=</span> makeContours<span class=\"token punctuation\">;</span>\n\tsettings<span class=\"token punctuation\">.</span>simplifyAmt <span class=\"token operator\">=</span> simplifyAmt<span class=\"token punctuation\">;</span>\n\tsettings<span class=\"token punctuation\">.</span>dpi <span class=\"token operator\">=</span> dpi<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fullCharacterSet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tsettings<span class=\"token punctuation\">.</span>ranges <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>ofUnicode<span class=\"token operator\">::</span>Latin1Supplement<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tsettings<span class=\"token punctuation\">.</span>ranges <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>ofUnicode<span class=\"token operator\">::</span>Latin<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTrueTypeFontSettings <span class=\"token operator\">&amp;</span> _settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID)</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>unloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofTrueTypeFont<span class=\"token operator\">::</span>reloadTextures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token function\">initLibraries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsettings <span class=\"token operator\">=</span> _settings<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> settings<span class=\"token punctuation\">.</span>dpi <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tsettings<span class=\"token punctuation\">.</span>dpi <span class=\"token operator\">=</span> ttfGlobalDpi<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tbLoadedOk <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//--------------- load the library and typeface</span>\n\tFT_Face loadFace<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">loadFontFace</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>fontName<span class=\"token punctuation\">,</span> loadFace<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>fontName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tface <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">struct</span> FT_FaceRec_<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>loadFace<span class=\"token punctuation\">,</span>FT_Done_Face<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>ranges<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tsettings<span class=\"token punctuation\">.</span>ranges<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>ofUnicode<span class=\"token operator\">::</span>Latin1Supplement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">int</span> border <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token function\">FT_Set_Char_Size</span><span class=\"token punctuation\">(</span> face<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>dpi<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>dpi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfontUnitScale <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">*</span> settings<span class=\"token punctuation\">.</span>dpi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">72</span> <span class=\"token operator\">*</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>units_per_EM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tlineHeight <span class=\"token operator\">=</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>height <span class=\"token operator\">*</span> fontUnitScale<span class=\"token punctuation\">;</span>\n\tascenderHeight <span class=\"token operator\">=</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>ascender <span class=\"token operator\">*</span> fontUnitScale<span class=\"token punctuation\">;</span>\n\tdescenderHeight <span class=\"token operator\">=</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>descender <span class=\"token operator\">*</span> fontUnitScale<span class=\"token punctuation\">;</span>\n\tglyphBBox<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>face<span class=\"token operator\">-</span><span class=\"token operator\">></span>bbox<span class=\"token punctuation\">.</span>xMin <span class=\"token operator\">*</span> fontUnitScale<span class=\"token punctuation\">,</span>\n\t\t\t\t   face<span class=\"token operator\">-</span><span class=\"token operator\">></span>bbox<span class=\"token punctuation\">.</span>yMin <span class=\"token operator\">*</span> fontUnitScale<span class=\"token punctuation\">,</span>\n\t\t\t\t  <span class=\"token punctuation\">(</span>face<span class=\"token operator\">-</span><span class=\"token operator\">></span>bbox<span class=\"token punctuation\">.</span>xMax <span class=\"token operator\">-</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>bbox<span class=\"token punctuation\">.</span>xMin<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> fontUnitScale<span class=\"token punctuation\">,</span>\n\t\t\t\t  <span class=\"token punctuation\">(</span>face<span class=\"token operator\">-</span><span class=\"token operator\">></span>bbox<span class=\"token punctuation\">.</span>yMax <span class=\"token operator\">-</span> face<span class=\"token operator\">-</span><span class=\"token operator\">></span>bbox<span class=\"token punctuation\">.</span>yMin<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> fontUnitScale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//--------------- initialize character info and textures</span>\n\t<span class=\"token keyword\">auto</span> nGlyphs <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>ranges<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>ranges<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0u</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>uint32_t acc<span class=\"token punctuation\">,</span> ofUnicode<span class=\"token operator\">::</span>range range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> acc <span class=\"token operator\">+</span> range<span class=\"token punctuation\">.</span><span class=\"token function\">getNumGlyphs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcps<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>nGlyphs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>contours<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tcharOutlines<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>nGlyphs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcharOutlinesNonVFlipped<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>nGlyphs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcharOutlinesContour<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>nGlyphs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcharOutlinesNonVFlippedContour<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>nGlyphs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tcharOutlines<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tvector<span class=\"token operator\">&lt;</span>ofTrueTypeFont<span class=\"token operator\">::</span>glyph<span class=\"token operator\">></span> all_glyphs<span class=\"token punctuation\">;</span>\n\n\tuint32_t areaSum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//--------------------- load each char -----------------------</span>\n\t<span class=\"token keyword\">auto</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0u</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> range<span class=\"token operator\">:</span> settings<span class=\"token punctuation\">.</span>ranges<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>uint32_t g <span class=\"token operator\">=</span> range<span class=\"token punctuation\">.</span>begin<span class=\"token punctuation\">;</span> g <span class=\"token operator\">&lt;=</span> range<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span> g<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tall_glyphs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">loadGlyph</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tall_glyphs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>characterIndex\t<span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\tglyphIndexMap<span class=\"token punctuation\">[</span>g<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t\tcps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> all_glyphs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n\t\t\tareaSum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tW<span class=\"token operator\">+</span>border<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>cps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tH<span class=\"token operator\">+</span>border<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>contours<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>printVectorInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tstd<span class=\"token operator\">::</span>string str<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">ofUTF8Append</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>  <span class=\"token string\">\"character \"</span> <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">//int character = i + NUM_CHARACTER_TO_START;</span>\n\t\t\t\tcharOutlines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">makeContoursForCharacter</span><span class=\"token punctuation\">(</span> face<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcharOutlinesContour<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> charOutlines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcharOutlinesContour<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFilled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcharOutlinesContour<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStrokeWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\tcharOutlinesNonVFlipped<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> charOutlines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcharOutlinesNonVFlipped<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cps<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcharOutlinesNonVFlipped<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcharOutlinesNonVFlippedContour<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> charOutlines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcharOutlinesNonVFlippedContour<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setFilled</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tcharOutlinesNonVFlippedContour<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">setStrokeWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>simplifyAmt<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tcharOutlines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>simplifyAmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tcharOutlinesNonVFlipped<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>simplifyAmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tcharOutlinesContour<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>simplifyAmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tcharOutlinesNonVFlippedContour<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>simplifyAmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tvector<span class=\"token operator\">&lt;</span>ofTrueTypeFont<span class=\"token operator\">::</span>glyphProps<span class=\"token operator\">></span> sortedCopy <span class=\"token operator\">=</span> cps<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>sortedCopy<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>sortedCopy<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTrueTypeFont<span class=\"token operator\">::</span>glyphProps <span class=\"token operator\">&amp;</span> c1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofTrueTypeFont<span class=\"token operator\">::</span>glyphProps <span class=\"token operator\">&amp;</span> c2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">.</span>tH <span class=\"token operator\">==</span> c2<span class=\"token punctuation\">.</span>tH<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> c1<span class=\"token punctuation\">.</span>tW <span class=\"token operator\">></span> c2<span class=\"token punctuation\">.</span>tW<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> c1<span class=\"token punctuation\">.</span>tH <span class=\"token operator\">></span> c2<span class=\"token punctuation\">.</span>tH<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// pack in a texture, algorithm to calculate min w/h from</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// http://upcommons.upc.edu/pfc/bitstream/2099.1/7720/1/TesiMasterJonas.pdf</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//ofLogNotice(\"ofTrueTypeFont\") &lt;&lt; \"loadFont(): areaSum: \" &lt;&lt; areaSum</span>\n\n\t<span class=\"token keyword\">bool</span> packed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> alpha <span class=\"token operator\">=</span> <span class=\"token function\">logf</span><span class=\"token punctuation\">(</span>areaSum<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">1.44269f</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> h<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>packed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tw <span class=\"token operator\">=</span> <span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>alpha<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// there doesn't seem to be a round in cmath for windows.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//w = pow(2,round(alpha/2.f));</span>\n\t\th <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//pow(2,round(alpha - round(alpha/2.f)));</span>\n\t\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> maxRowHeight <span class=\"token operator\">=</span> sortedCopy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tH <span class=\"token operator\">+</span> border<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\tpacked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> glyph<span class=\"token operator\">:</span> sortedCopy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>glyph<span class=\"token punctuation\">.</span>tW <span class=\"token operator\">+</span> border<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">></span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\ty <span class=\"token operator\">+</span><span class=\"token operator\">=</span> maxRowHeight<span class=\"token punctuation\">;</span>\n\t\t\t\tmaxRowHeight <span class=\"token operator\">=</span> glyph<span class=\"token punctuation\">.</span>tH <span class=\"token operator\">+</span> border<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> maxRowHeight <span class=\"token operator\">></span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\talpha<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tpacked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tx<span class=\"token operator\">+</span><span class=\"token operator\">=</span> glyph<span class=\"token punctuation\">.</span>tW <span class=\"token operator\">+</span> border<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\n\n\tofPixels atlasPixelsLuminanceAlpha<span class=\"token punctuation\">;</span>\n\tatlasPixelsLuminanceAlpha<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>OF_PIXELS_GRAY_ALPHA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tatlasPixelsLuminanceAlpha<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tatlasPixelsLuminanceAlpha<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> y<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> maxRowHeight <span class=\"token operator\">=</span> sortedCopy<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tH <span class=\"token operator\">+</span> border<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> glyph<span class=\"token operator\">:</span> sortedCopy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofPixels <span class=\"token operator\">&amp;</span> charPixels <span class=\"token operator\">=</span> all_glyphs<span class=\"token punctuation\">[</span>glyph<span class=\"token punctuation\">.</span>characterIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>glyph<span class=\"token punctuation\">.</span>tW <span class=\"token operator\">+</span> border<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">></span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\ty <span class=\"token operator\">+</span><span class=\"token operator\">=</span> maxRowHeight<span class=\"token punctuation\">;</span>\n\t\t\tmaxRowHeight <span class=\"token operator\">=</span> glyph<span class=\"token punctuation\">.</span>tH <span class=\"token operator\">+</span> border<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tcps<span class=\"token punctuation\">[</span>glyph<span class=\"token punctuation\">.</span>characterIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>t1\t\t<span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> border<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcps<span class=\"token punctuation\">[</span>glyph<span class=\"token punctuation\">.</span>characterIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v1\t\t<span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">+</span> border<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcps<span class=\"token punctuation\">[</span>glyph<span class=\"token punctuation\">.</span>characterIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>t2\t\t<span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>cps<span class=\"token punctuation\">[</span>glyph<span class=\"token punctuation\">.</span>characterIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tW <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> border<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcps<span class=\"token punctuation\">[</span>glyph<span class=\"token punctuation\">.</span>characterIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>v2\t\t<span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>cps<span class=\"token punctuation\">[</span>glyph<span class=\"token punctuation\">.</span>characterIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>tH <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> border<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcharPixels<span class=\"token punctuation\">.</span><span class=\"token function\">pasteInto</span><span class=\"token punctuation\">(</span>atlasPixelsLuminanceAlpha<span class=\"token punctuation\">,</span>x<span class=\"token operator\">+</span>border<span class=\"token punctuation\">,</span>y<span class=\"token operator\">+</span>border<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tx<span class=\"token operator\">+</span><span class=\"token operator\">=</span> glyph<span class=\"token punctuation\">.</span>tW <span class=\"token operator\">+</span> border<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> maxSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glGetIntegerv</span><span class=\"token punctuation\">(</span>GL_MAX_TEXTURE_SIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>maxSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>w <span class=\"token operator\">></span> maxSize <span class=\"token operator\">||</span> h <span class=\"token operator\">></span> maxSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTruetypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Trying to allocate texture of \"</span> <span class=\"token operator\">&lt;&lt;</span> w <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"x\"</span> <span class=\"token operator\">&lt;&lt;</span> h <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" which is bigger than supported in current platform: \"</span> <span class=\"token operator\">&lt;&lt;</span> maxSize<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\ttexAtlas<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>atlasPixelsLuminanceAlpha<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttexAtlas<span class=\"token punctuation\">.</span><span class=\"token function\">setRGToRGBASwizzles</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>antialiased <span class=\"token operator\">&amp;&amp;</span> settings<span class=\"token punctuation\">.</span>fontSize<span class=\"token operator\">></span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\ttexAtlas<span class=\"token punctuation\">.</span><span class=\"token function\">setTextureMinMagFilter</span><span class=\"token punctuation\">(</span>GL_LINEAR<span class=\"token punctuation\">,</span>GL_LINEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\ttexAtlas<span class=\"token punctuation\">.</span><span class=\"token function\">setTextureMinMagFilter</span><span class=\"token punctuation\">(</span>GL_NEAREST<span class=\"token punctuation\">,</span>GL_NEAREST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ttexAtlas<span class=\"token punctuation\">.</span><span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span>atlasPixelsLuminanceAlpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbLoadedOk <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> bLoadedOk<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">isAntiAliased</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> settings<span class=\"token punctuation\">.</span>antialiased<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">hasFullCharacterSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> settings<span class=\"token punctuation\">.</span>fontSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">setLineHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> _newLineHeight<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tlineHeight <span class=\"token operator\">=</span> _newLineHeight<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getLineHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> lineHeight<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getAscenderHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ascenderHeight<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getDescenderHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> descenderHeight<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getGlyphBBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> glyphBBox<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">setLetterSpacing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> _newletterSpacing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tletterSpacing <span class=\"token operator\">=</span> _newletterSpacing<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getLetterSpacing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> letterSpacing<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">setSpaceSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> _newspaceSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tspaceSize <span class=\"token operator\">=</span> _newspaceSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getSpaceSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> spaceSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------------</span>\nofPath ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getCharacterAsPoints</span><span class=\"token punctuation\">(</span>uint32_t character<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> filled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> settings<span class=\"token punctuation\">.</span>contours <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getCharacterAsPoints(): contours not created, call loadFont() with makeContours set to true\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValidGlyph</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vflip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>filled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> charOutlines<span class=\"token punctuation\">[</span><span class=\"token function\">indexForGlyph</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> charOutlinesContour<span class=\"token punctuation\">[</span><span class=\"token function\">indexForGlyph</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>filled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> charOutlinesNonVFlipped<span class=\"token punctuation\">[</span><span class=\"token function\">indexForGlyph</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> charOutlinesNonVFlippedContour<span class=\"token punctuation\">[</span><span class=\"token function\">indexForGlyph</span><span class=\"token punctuation\">(</span>character<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">drawChar</span><span class=\"token punctuation\">(</span>uint32_t c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlipped<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isValidGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//ofLogError(\"ofTrueTypeFont\") &lt;&lt; \"drawChar(): char \" &lt;&lt; c + NUM_CHARACTER_TO_START &lt;&lt; \" not allocated: line \" &lt;&lt; __LINE__ &lt;&lt; \" in \" &lt;&lt; __FILE__;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token keyword\">long</span> xmin<span class=\"token punctuation\">,</span> ymin<span class=\"token punctuation\">,</span> xmax<span class=\"token punctuation\">,</span> ymax<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> t1<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> t2<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> props <span class=\"token operator\">=</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tt1\t\t<span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>t1<span class=\"token punctuation\">;</span>\n\tt2\t\t<span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>t2<span class=\"token punctuation\">;</span>\n\tv2\t\t<span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>v2<span class=\"token punctuation\">;</span>\n\tv1\t\t<span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">;</span>\n\n\txmin\t\t<span class=\"token operator\">=</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>xmin<span class=\"token operator\">+</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tymin\t\t<span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>ymin<span class=\"token punctuation\">;</span>\n\txmax\t\t<span class=\"token operator\">=</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">.</span>xmax<span class=\"token operator\">+</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tymax\t\t<span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>ymax<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vFlipped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t   ymin <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t   ymax <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tymin <span class=\"token operator\">+</span><span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\tymax <span class=\"token operator\">+</span><span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\n\tofIndexType firstIndex <span class=\"token operator\">=</span> stringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">getVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>xmin<span class=\"token punctuation\">,</span>ymin<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>xmax<span class=\"token punctuation\">,</span>ymin<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>xmax<span class=\"token punctuation\">,</span>ymax<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>xmin<span class=\"token punctuation\">,</span>ymax<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span>t2<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addTexCoord</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span>t1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>firstIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>firstIndex<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>firstIndex<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>firstIndex<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>firstIndex<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>firstIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getKerning</span><span class=\"token punctuation\">(</span>uint32_t leftC<span class=\"token punctuation\">,</span> uint32_t rightC<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FT_HAS_KERNING</span><span class=\"token punctuation\">(</span> face <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tFT_Vector kerning<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">FT_Get_Kerning</span><span class=\"token punctuation\">(</span>face<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FT_Get_Char_Index</span><span class=\"token punctuation\">(</span>face<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> leftC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">FT_Get_Char_Index</span><span class=\"token punctuation\">(</span>face<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> rightC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FT_KERNING_UNFITTED<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>kerning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> kerning<span class=\"token punctuation\">.</span>x <span class=\"token operator\">>></span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">iterateString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlipped<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec2<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tglm<span class=\"token operator\">::</span>vec2 <span class=\"token function\">pos</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> newLineDirection\t\t<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vFlipped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// this would align multiline texts to the last line when vflip is disabled</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//int lines = ofStringTimesInString(c,\"\\n\");</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//Y = lines*lineHeight;</span>\n\t\tnewLineDirection <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> directionX <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>direction <span class=\"token operator\">==</span> OF_TTF_LEFT_TO_RIGHT<span class=\"token operator\">?</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\tuint32_t prevC <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> c<span class=\"token operator\">:</span> <span class=\"token function\">ofUTF8Iterator</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tpos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span><span class=\"token operator\">=</span> lineHeight<span class=\"token operator\">*</span>newLineDirection<span class=\"token punctuation\">;</span>\n\t\t\t\tpos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x <span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//reset X Pos back to zero</span>\n\t\t\t\tprevC <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>direction <span class=\"token operator\">==</span> OF_TTF_LEFT_TO_RIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tpos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> spaceSize <span class=\"token operator\">*</span> TAB_WIDTH <span class=\"token operator\">*</span> directionX<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tpos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> spaceSize <span class=\"token operator\">*</span> TAB_WIDTH <span class=\"token operator\">*</span> directionX<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tprevC <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> spaceSize <span class=\"token operator\">*</span> directionX<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                prevC <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isValidGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> props <span class=\"token operator\">=</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prevC<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>direction <span class=\"token operator\">==</span> OF_TTF_LEFT_TO_RIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tpos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">getKerning</span><span class=\"token punctuation\">(</span>prevC<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tpos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">getKerning</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> prevC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>direction <span class=\"token operator\">==</span> OF_TTF_LEFT_TO_RIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tpos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>advance  <span class=\"token operator\">*</span> directionX<span class=\"token punctuation\">;</span>\n\t\t\t\t\tpos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>letterSpacing <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> directionX<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tpos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>advance  <span class=\"token operator\">*</span> directionX<span class=\"token punctuation\">;</span>\n\t\t\t\t\tpos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>letterSpacing <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> directionX<span class=\"token punctuation\">;</span>\n\t\t\t\t    <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\tprevC <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">setDirection</span><span class=\"token punctuation\">(</span>ofTrueTypeFontDirection direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tsettings<span class=\"token punctuation\">.</span>direction <span class=\"token operator\">=</span> direction<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\nvector<span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">></span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getStringAsPoints</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>  str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> filled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">></span> shapes<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoadedOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getStringAsPoints(): font not allocated: line \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__LINE__</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" in \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> shapes<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">iterateString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>vflip<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>uint32_t c<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec2 pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tshapes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCharacterAsPoints</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>vflip<span class=\"token punctuation\">,</span>filled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tshapes<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token punctuation\">{</span>pos<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> shapes<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">isValidGlyph</span><span class=\"token punctuation\">(</span>uint32_t glyph<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//return glyphIndexMap.find(glyph) != glyphIndexMap.end();</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">any_of</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>ranges<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>ranges<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>ofUnicode<span class=\"token operator\">::</span>range range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> glyph <span class=\"token operator\">>=</span> range<span class=\"token punctuation\">.</span>begin <span class=\"token operator\">&amp;&amp;</span> glyph <span class=\"token operator\">&lt;=</span> range<span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nsize_t ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">indexForGlyph</span><span class=\"token punctuation\">(</span>uint32_t glyph<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> glyphIndexMap<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>glyph<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ofTrueTypeFont<span class=\"token operator\">::</span>glyphProps <span class=\"token operator\">&amp;</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span>uint32_t glyph<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isValidGlyph</span><span class=\"token punctuation\">(</span>glyph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> cps<span class=\"token punctuation\">[</span><span class=\"token function\">indexForGlyph</span><span class=\"token punctuation\">(</span>glyph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> invalidProps<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">drawCharAsShape</span><span class=\"token punctuation\">(</span>uint32_t c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlipped<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> filled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vFlipped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>filled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tcharOutlines<span class=\"token punctuation\">[</span><span class=\"token function\">indexForGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tcharOutlinesContour<span class=\"token punctuation\">[</span><span class=\"token function\">indexForGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>filled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tcharOutlinesNonVFlipped<span class=\"token punctuation\">[</span><span class=\"token function\">indexForGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tcharOutlinesNonVFlippedContour<span class=\"token punctuation\">[</span><span class=\"token function\">indexForGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">stringWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tofRectangle rect <span class=\"token operator\">=</span> <span class=\"token function\">getStringBoundingBox</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\nofRectangle ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getStringBoundingBox</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofRectangle</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">float</span> minX <span class=\"token operator\">=</span>  std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> minY <span class=\"token operator\">=</span>  std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> maxX <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> maxY <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Calculate bounding box by iterating over glyph properties</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Meaning of props can be deduced from illustration at top of:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// https://www.freetype.org/freetype2/docs/tutorial/step2.html</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">// We deliberately not generate a mesh and iterate over its</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// vertices, as this would not correctly return spacing for</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// blank characters.</span>\n\n\t<span class=\"token function\">iterateString</span><span class=\"token punctuation\">(</span> c<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> vflip<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span> uint32_t c<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec2 pos <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span>  props <span class=\"token operator\">=</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> c <span class=\"token operator\">==</span> <span class=\"token string\">'\\t'</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            props<span class=\"token punctuation\">.</span>advance <span class=\"token operator\">=</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> spaceSize <span class=\"token operator\">*</span> TAB_WIDTH<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tmaxX <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span> maxX<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>xmin <span class=\"token operator\">+</span> props<span class=\"token punctuation\">.</span>width  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tminX <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span> minX<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> vflip <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tminY <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span> minY<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span> props<span class=\"token punctuation\">.</span>ymax <span class=\"token operator\">-</span> props<span class=\"token punctuation\">.</span>ymin <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmaxY <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span> maxY<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span> props<span class=\"token punctuation\">.</span>bearingY <span class=\"token operator\">-</span> props<span class=\"token punctuation\">.</span>height <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tminY <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span> minY<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span> props<span class=\"token punctuation\">.</span>ymax<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmaxY <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span> maxY<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span> props<span class=\"token punctuation\">.</span>ymin <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">float</span> width <span class=\"token operator\">=</span> maxX <span class=\"token operator\">-</span> minX<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> height <span class=\"token operator\">=</span> maxY <span class=\"token operator\">-</span> minY<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofRectangle</span><span class=\"token punctuation\">(</span>minX<span class=\"token punctuation\">,</span> minY<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">stringHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tofRectangle rect <span class=\"token operator\">=</span> <span class=\"token function\">getStringBoundingBox</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">createStringMesh</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">iterateString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>vflip<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>uint32_t c<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec2 pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">drawChar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> vflip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">const</span> ofMesh <span class=\"token operator\">&amp;</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getStringMesh</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlipped<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tstringQuads<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">createStringMesh</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>vFlipped<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> stringQuads<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getFontTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> texAtlas<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\nglm<span class=\"token operator\">::</span>vec2 ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getFirstGlyphPosForTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> c <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">ofUTF8Iterator</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>direction <span class=\"token operator\">==</span> OF_TTF_LEFT_TO_RIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">auto</span> g <span class=\"token operator\">=</span> <span class=\"token function\">loadGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>xmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getLineHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>ymin <span class=\"token operator\">+</span> <span class=\"token function\">getDescenderHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> lineWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">iterateString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> vflip<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>uint32_t c<span class=\"token punctuation\">,</span> ofVec2f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">auto</span> g <span class=\"token operator\">=</span> <span class=\"token function\">loadGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span>lineWidth <span class=\"token operator\">+</span><span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>advance <span class=\"token operator\">+</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> spaceSize <span class=\"token operator\">*</span> TAB_WIDTH<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>lineWidth <span class=\"token operator\">+</span><span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>advance <span class=\"token operator\">+</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> spaceSize<span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isValidGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>lineWidth <span class=\"token operator\">+</span><span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>advance <span class=\"token operator\">+</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>letterSpacing <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\twidth <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> lineWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\tlineWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">auto</span> g <span class=\"token operator\">=</span> <span class=\"token function\">loadGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>width <span class=\"token operator\">-</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>xmin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getLineHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>ymin <span class=\"token operator\">+</span> <span class=\"token function\">getDescenderHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\nofTexture ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getStringTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>glyph<span class=\"token operator\">></span> glyphs<span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">></span> glyphPositions<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> height <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> lineWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">iterateString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> vflip<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>uint32_t c<span class=\"token punctuation\">,</span> ofVec2f pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">auto</span> g <span class=\"token operator\">=</span> <span class=\"token function\">loadGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">auto</span> temp <span class=\"token operator\">=</span> <span class=\"token function\">loadGlyph</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    glyphs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                    glyphs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                 \n\t\t\t\t<span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>xmin<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t\t\t\tglyphPositions<span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">)</span>lineWidth <span class=\"token operator\">+</span><span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>advance <span class=\"token operator\">+</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> spaceSize <span class=\"token operator\">*</span> TAB_WIDTH<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>lineWidth <span class=\"token operator\">+</span><span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>advance <span class=\"token operator\">+</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> spaceSize<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isValidGlyph</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>lineWidth <span class=\"token operator\">+</span><span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>advance <span class=\"token operator\">+</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>advance <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>letterSpacing <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                \n                width <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> lineWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                y <span class=\"token operator\">+</span><span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>ymax<span class=\"token punctuation\">;</span>\n\t\t\t\theight <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">,</span> y <span class=\"token operator\">+</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLineHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\tlineWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofTexture tex<span class=\"token punctuation\">;</span>\n\tofPixels totalPixels<span class=\"token punctuation\">;</span>\n\ttotalPixels<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> OF_PIXELS_GRAY_ALPHA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//-------------------------------- clear data:</span>\n\ttotalPixels<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// every luminance pixel = 255</span>\n\ttotalPixels<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsize_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> g<span class=\"token operator\">:</span> glyphs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>direction <span class=\"token operator\">==</span> OF_TTF_LEFT_TO_RIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tg<span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">blendInto</span><span class=\"token punctuation\">(</span>totalPixels<span class=\"token punctuation\">,</span> glyphPositions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> glyphPositions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token function\">getLineHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>ymin <span class=\"token operator\">+</span> <span class=\"token function\">getDescenderHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tg<span class=\"token punctuation\">.</span>pixels<span class=\"token punctuation\">.</span><span class=\"token function\">blendInto</span><span class=\"token punctuation\">(</span>totalPixels<span class=\"token punctuation\">,</span> width<span class=\"token operator\">-</span>glyphPositions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> glyphPositions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> <span class=\"token function\">getLineHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> g<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>ymin <span class=\"token operator\">+</span> <span class=\"token function\">getDescenderHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span>glyphPositions<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\ttex<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>totalPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>  c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoadedOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"drawString(): font not allocated\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">ofGetCurrentRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">drawStringAsShapes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoadedOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"drawStringAsShapes(): font not allocated: line \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__LINE__</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" in \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//----------------------- error checking</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>settings<span class=\"token punctuation\">.</span>contours<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofTrueTypeFont\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"drawStringAsShapes(): contours not created for this font, call loadFont() with makeContours set to true\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">iterateString</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>uint32_t c<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec2 pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">drawCharAsShape</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token function\">ofIsVFlipped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>bFill<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>size_t ofTrueTypeFont<span class=\"token operator\">::</span><span class=\"token function\">getNumCharacters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> cps<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}