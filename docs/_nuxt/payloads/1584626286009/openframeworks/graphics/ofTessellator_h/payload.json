{"data":[{"page":{"entry":{"name":"ofTessellator.h","filename":"ofTessellator.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/graphics/ofTessellator.h","path":"/openframeworks/graphics/ofTessellator_h","route":"/openframeworks/graphics/ofTessellator.h","dir":"../libs/openFrameworks/graphics","ext":"h","type":"source","id":281,"parent":259,"breadcrumbs":[259,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGraphicsBaseTypes.h\"</span></span>\n\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> TESStesselator TESStesselator<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> TESSalloc TESSalloc<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofTessellator exists for one purpose: to turn ofPolylines into ofMeshes so</span>\n<span class=\"token comment\" spellcheck=\"true\">/// that they can be more efficiently displayed using OpenGL. The ofPath class</span>\n<span class=\"token comment\" spellcheck=\"true\">/// uses tessellation to turn its paths into openGL-ready shapes under the hood,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// so if you're interested in just having ofPolyline instances converted to</span>\n<span class=\"token comment\" spellcheck=\"true\">/// meshes, it's handled for you by ofPath. If you're interested in using the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// tessellation multiple polylines at a time, then you'll find what you need in</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the ofTessellator. Many shapes can't be drawn by OpenGL without tessellation,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// but by breaking them into triangles or quads, they can be drawn easily.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// An example: The fairly simple shape shown on the left needs to be broken</span>\n<span class=\"token comment\" spellcheck=\"true\">/// into triangles to be displayed, an example of how this might be done is</span>\n<span class=\"token comment\" spellcheck=\"true\">/// shown on the right.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ![tessellation](graphics/tessellation.jpg)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofTessellator</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\t\n\t<span class=\"token function\">ofTessellator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">ofTessellator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Copy constructor to copy properties from one tessellator to another. </span>\n\t<span class=\"token function\">ofTessellator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTessellator <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Operator overloading to copy properties from one tessellator to another. </span>\n\tofTessellator <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTessellator <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Tessellates a vector of ofPolyline instances into a single</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofMesh instance using the winding mode set in ofPolyWindingMode.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">tessellateToMesh</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> ofMesh <span class=\"token operator\">&amp;</span> dstmesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D<span class=\"token operator\">=</span><span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Tessellates a ofPolyline instance into a single ofMesh instance</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// using the winding mode set in ofPolyWindingMode.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">tessellateToMesh</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofPolyline<span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span>  ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> ofMesh<span class=\"token operator\">&amp;</span> dstmesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D<span class=\"token operator\">=</span><span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Tessellates a vector of ofPolyline instances into vector of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofPolyline instances using the winding mode set in ofPolyWindingMode.\t</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">tessellateToPolylines</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> dstpoly<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D<span class=\"token operator\">=</span><span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Tessellate multiple polylines into a single polyline.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">tessellateToPolylines</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofPolyline <span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> dstpoly<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D<span class=\"token operator\">=</span><span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">performTessellation</span><span class=\"token punctuation\">(</span> ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> ofMesh<span class=\"token operator\">&amp;</span> dstmesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">performTessellation</span><span class=\"token punctuation\">(</span>ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> dstpoly<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tTESStesselator <span class=\"token operator\">*</span> cacheTess<span class=\"token punctuation\">;</span>\n\tTESSalloc tessAllocator<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n","type":"source","static":true}}],"fetch":[]}