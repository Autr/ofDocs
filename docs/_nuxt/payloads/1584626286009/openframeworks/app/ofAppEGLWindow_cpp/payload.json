{"data":[{"page":{"entry":{"name":"ofAppEGLWindow.cpp","filename":"ofAppEGLWindow.cpp","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/app/ofAppEGLWindow.cpp","path":"/openframeworks/app/ofAppEGLWindow_cpp","route":"/openframeworks/app/ofAppEGLWindow.cpp","dir":"../libs/openFrameworks/app","ext":"cpp","type":"source","id":209,"parent":207,"breadcrumbs":[207,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofAppEGLWindow.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGraphics.h\"</span> </span><span class=\"token comment\" spellcheck=\"true\">// used in runAppViaInfiniteLoop()</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofAppRunner.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofFileUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGLProgrammableRenderer.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGLRenderer.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVectorMath.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;assert.h></span></span>\n<span class=\"token comment\" spellcheck=\"true\">// x11</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;X11/Xutil.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;EGL/egl.h></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">// include includes for both native and X11 possibilities</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;libudev.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdbool.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span> </span><span class=\"token comment\" spellcheck=\"true\">// sprintf</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>  </span><span class=\"token comment\" spellcheck=\"true\">// malloc</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;math.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span>  </span><span class=\"token comment\" spellcheck=\"true\">// open fcntl</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span> </span><span class=\"token comment\" spellcheck=\"true\">// read close</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/joystick.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"linux/kd.h\"</span>\t</span><span class=\"token comment\" spellcheck=\"true\">// keyboard stuff...</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"termios.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"sys/ioctl.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span> </span><span class=\"token comment\" spellcheck=\"true\">// strlen</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// native events</span>\n<span class=\"token keyword\">struct</span> udev<span class=\"token operator\">*</span> udev<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> udev_monitor<span class=\"token operator\">*</span> mon<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> udev_fd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> device<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> device inputDevices<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// minimal map</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> lowercase_map<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'5'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'6'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'7'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'='</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'['</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">']'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'j'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">';'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'\\''</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'v'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">','</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'.'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'\\r'</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// minimal keyboard map</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> uppercase_map<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'!'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'@'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'#'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'$'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'%'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'^'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'('</span><span class=\"token punctuation\">,</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'_'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\t'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Q'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'W'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'E'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'T'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'I'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'O'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'P'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'{'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'}'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token string\">'A'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'S'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'D'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'F'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'G'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'H'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'J'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'K'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">':'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'\"'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'\\\\'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Z'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'X'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'V'</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">'B'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'N'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'>'</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'?'</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>   <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">'\\r'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// keep track of a few things ...</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">bool</span> shiftPressed<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> capsLocked<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> KeyboardState<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> KeyboardState kb<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> termios tc<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> termios ots<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> mouseButtonState<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> MouseState<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// TODO, make this match the upcoming additions to ofWindow</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MOUSE_BUTTON_LEFT_MASK\t\t1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MOUSE_BUTTON_MIDDLE_MASK 1 &lt;&lt; 1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MOUSE_BUTTON_RIGHT_MASK  2 &lt;&lt; 1</span>\n\n<span class=\"token keyword\">static</span> MouseState mb<span class=\"token punctuation\">;</span>\nofAppEGLWindow<span class=\"token operator\">*</span> ofAppEGLWindow<span class=\"token operator\">::</span>instance <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">string_ends_with</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>suffix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>str <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>suffix<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tsize_t lenstr <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsize_t lensuffix <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>suffix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lensuffix <span class=\"token operator\">></span> lenstr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> lenstr <span class=\"token operator\">-</span> lensuffix<span class=\"token punctuation\">,</span> suffix<span class=\"token punctuation\">,</span> lensuffix<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">string_begins_with</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>str <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>prefix<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tsize_t lenstr <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsize_t lenprefix <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lenprefix <span class=\"token operator\">></span> lenstr<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> lenprefix<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// native</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MOUSE_CURSOR_RUN_LENGTH_DECODE(image_buf, rle_data, size, bpp) do \\\n\t\t{ unsigned int __bpp; unsigned char *__ip; const unsigned char *__il, *__rd; \\\n\t\t__bpp = (bpp); __ip = (image_buf); __il = __ip + (size) * __bpp; \\\n\t\t__rd = (rle_data); \\\n\t\twhile (__ip &lt; __il) { unsigned int __l = *(__rd++); \\\n\t\tif (__l &amp; 128) { __l = __l - 128; \\\n\t\tdo { memcpy (__ip, __rd, 4); __ip += 4; } while (--__l); __rd += 4; \\\n\t\t} else { __l *= 4; memcpy (__ip, __rd, __l); \\\n\t\t__ip += __l; __rd += __l; } } \\\n\t\t} while (0)</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> bpp<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 2:RGB16, 3:RGB, 4:RGBA */</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> rle_pixel_data<span class=\"token punctuation\">[</span><span class=\"token number\">382</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> mouse_cursor_data <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token string\">\"\\1\\0\\0\\0\\377\\213\\377\\377\\377\\0\\202\\0\\0\\0\\377\\212\\377\\377\\377\\0\\3\\0\\0\\0\\377\"</span>\n\t\t<span class=\"token string\">\"\\377\\377\\377\\377\\0\\0\\0\\377\\211\\377\\377\\377\\0\\1\\0\\0\\0\\377\\202\\377\\377\\377\"</span>\n\t\t<span class=\"token string\">\"\\377\\1\\0\\0\\0\\377\\210\\377\\377\\377\\0\\1\\0\\0\\0\\377\\203\\377\\377\\377\\377\\1\\0\\0\"</span>\n\t\t<span class=\"token string\">\"\\0\\377\\207\\377\\377\\377\\0\\1\\0\\0\\0\\377\\204\\377\\377\\377\\377\\1\\0\\0\\0\\377\\206\"</span>\n\t\t<span class=\"token string\">\"\\377\\377\\377\\0\\1\\0\\0\\0\\377\\205\\377\\377\\377\\377\\1\\0\\0\\0\\377\\205\\377\\377\\377\"</span>\n\t\t<span class=\"token string\">\"\\0\\1\\0\\0\\0\\377\\206\\377\\377\\377\\377\\1\\0\\0\\0\\377\\204\\377\\377\\377\\0\\1\\0\\0\\0\"</span>\n\t\t<span class=\"token string\">\"\\377\\207\\377\\377\\377\\377\\1\\0\\0\\0\\377\\203\\377\\377\\377\\0\\1\\0\\0\\0\\377\\210\\377\"</span>\n\t\t<span class=\"token string\">\"\\377\\377\\377\\1\\0\\0\\0\\377\\202\\377\\377\\377\\0\\1\\0\\0\\0\\377\\211\\377\\377\\377\\377\"</span>\n\t\t<span class=\"token string\">\"\\3\\0\\0\\0\\377\\377\\377\\377\\0\\0\\0\\0\\377\\212\\377\\377\\377\\377\\202\\0\\0\\0\\377\\206\"</span>\n\t\t<span class=\"token string\">\"\\377\\377\\377\\377\\206\\0\\0\\0\\377\\203\\377\\377\\377\\377\\1\\0\\0\\0\\377\\202\\377\\377\"</span>\n\t\t<span class=\"token string\">\"\\377\\377\\1\\0\\0\\0\\377\\204\\377\\377\\377\\0\\1\\0\\0\\0\\377\\202\\377\\377\\377\\377\\3\"</span>\n\t\t<span class=\"token string\">\"\\0\\0\\0\\377\\377\\377\\377\\0\\0\\0\\0\\377\\202\\377\\377\\377\\377\\1\\0\\0\\0\\377\\203\\377\"</span>\n\t\t<span class=\"token string\">\"\\377\\377\\0\\3\\0\\0\\0\\377\\377\\377\\377\\377\\0\\0\\0\\377\\202\\377\\377\\377\\0\\1\\0\\0\"</span>\n\t\t<span class=\"token string\">\"\\0\\377\\202\\377\\377\\377\\377\\1\\0\\0\\0\\377\\203\\377\\377\\377\\0\\202\\0\\0\\0\\377\\204\"</span>\n\t\t<span class=\"token string\">\"\\377\\377\\377\\0\\1\\0\\0\\0\\377\\202\\377\\377\\377\\377\\1\\0\\0\\0\\377\\210\\377\\377\\377\"</span>\n\t\t<span class=\"token string\">\"\\0\\1\\0\\0\\0\\377\\202\\377\\377\\377\\377\\1\\0\\0\\0\\377\\211\\377\\377\\377\\0\\202\\0\\0\"</span>\n\t\t<span class=\"token string\">\"\\0\\377\\203\\377\\377\\377\\0\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// from http://cantuna.googlecode.com/svn-history/r16/trunk/src/screen.cpp</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> CASE_STR(x,y) case x: str = y; break</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>EGLint err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstring str<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_SUCCESS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"no error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_NOT_INITIALIZED<span class=\"token punctuation\">,</span> <span class=\"token string\">\"EGL not, or could not be, initialized\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_ACCESS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"access violation\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_ALLOC<span class=\"token punctuation\">,</span> <span class=\"token string\">\"could not allocate resources\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_ATTRIBUTE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid attribute\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_CONTEXT<span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid context specified\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_CONFIG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"invald frame buffer configuration specified\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_CURRENT_SURFACE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"current window, pbuffer or pixmap surface is no longer valid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_DISPLAY<span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid display specified\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_SURFACE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid surface specified\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_MATCH<span class=\"token punctuation\">,</span> <span class=\"token string\">\"bad argument match\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_PARAMETER<span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid paramater\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_NATIVE_PIXMAP<span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid NativePixmap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_BAD_NATIVE_WINDOW<span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid NativeWindow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">CASE_STR</span><span class=\"token punctuation\">(</span>EGL_CONTEXT_LOST<span class=\"token punctuation\">,</span> <span class=\"token string\">\"APM event caused context loss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"unknown error \"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// X11 events</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;X11/XKBlib.h></span></span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI</span>\n<span class=\"token comment\" spellcheck=\"true\">// TODO: remove these when they enter system headers</span>\n<span class=\"token comment\" spellcheck=\"true\">// From : https://github.com/raspberrypi/userland/blob/master/interface/vmcs_host/vc_vchi_dispmanx.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> ELEMENT_CHANGE_LAYER</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ELEMENT_CHANGE_LAYER\t\t  (1&lt;&lt;0)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> ELEMENT_CHANGE_OPACITY</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ELEMENT_CHANGE_OPACITY\t\t(1&lt;&lt;1)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> ELEMENT_CHANGE_DEST_RECT</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ELEMENT_CHANGE_DEST_RECT\t  (1&lt;&lt;2)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> ELEMENT_CHANGE_SRC_RECT</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ELEMENT_CHANGE_SRC_RECT\t   (1&lt;&lt;3)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> ELEMENT_CHANGE_MASK_RESOURCE</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ELEMENT_CHANGE_MASK_RESOURCE  (1&lt;&lt;4)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> ELEMENT_CHANGE_TRANSFORM</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ELEMENT_CHANGE_TRANSFORM\t  (1&lt;&lt;5)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------</span>\nofAppEGLWindowSettings<span class=\"token operator\">::</span><span class=\"token function\">ofAppEGLWindowSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">ofGLESWindowSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\teglWindowPreference <span class=\"token operator\">=</span> OF_APP_WINDOW_AUTO<span class=\"token punctuation\">;</span>\n\teglWindowOpacity <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// these are usually set as default, but set them here just to be sure</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_RED_SIZE<span class=\"token punctuation\">]</span>\t <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for red</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_GREEN_SIZE<span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for green</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_BLUE_SIZE<span class=\"token punctuation\">]</span>\t<span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for blue</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_ALPHA_SIZE<span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for alpha</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_LUMINANCE_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> EGL_DONT_CARE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for alpha</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_DEPTH_SIZE<span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 24 bits for depth</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_STENCIL_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for stencil</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_SAMPLES<span class=\"token punctuation\">]</span>\t  <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\tinitialClearColor <span class=\"token operator\">=</span> <span class=\"token function\">ofColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.15</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.15</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.15</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tscreenNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 0 = LCD on the raspberry pi */</span>\n\tlayer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofAppEGLWindowSettings<span class=\"token operator\">::</span><span class=\"token function\">ofAppEGLWindowSettings</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofGLESWindowSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">ofGLESWindowSettings</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\teglWindowPreference <span class=\"token operator\">=</span> OF_APP_WINDOW_AUTO<span class=\"token punctuation\">;</span>\n\teglWindowOpacity <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// these are usually set as default, but set them here just to be sure</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_RED_SIZE<span class=\"token punctuation\">]</span>\t <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for red</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_GREEN_SIZE<span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for green</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_BLUE_SIZE<span class=\"token punctuation\">]</span>\t<span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for blue</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_ALPHA_SIZE<span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for alpha</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_LUMINANCE_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> EGL_DONT_CARE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for alpha</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_DEPTH_SIZE<span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 24 bits for depth</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_STENCIL_SIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 8 bits for stencil</span>\n\tframeBufferAttributes<span class=\"token punctuation\">[</span>EGL_SAMPLES<span class=\"token punctuation\">]</span>\t  <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\tinitialClearColor <span class=\"token operator\">=</span> <span class=\"token function\">ofColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.15</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.15</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.15</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tscreenNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* 0 = LCD on the raspberry pi */</span>\n\tlayer <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">ofAppEGLWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tkeyboardDetected <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tmouseDetected <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tthreadTimeout <span class=\"token operator\">=</span> ofThread<span class=\"token operator\">::</span>INFINITE_JOIN_TIMEOUT<span class=\"token punctuation\">;</span>\n\tbNewScreenMode <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tbuttonInUse <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tbEnableSetupScreen <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tbShowCursor <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tnFramesSinceWindowResized <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tmouseScaleX <span class=\"token operator\">=</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\tmouseScaleY <span class=\"token operator\">=</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\tisUsingX11 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tisWindowInited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tisSurfaceInited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tx11Display <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tx11Screen <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tx11ScreenNum <span class=\"token operator\">=</span> <span class=\"token number\">0l</span><span class=\"token punctuation\">;</span>\n\tglesVersion <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">!=</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"trying to create more than one instance\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tinstance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofAppEGLWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nEGLDisplay ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getEglDisplay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> eglDisplay<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nEGLSurface ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getEglSurface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> eglSurface<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nEGLContext ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getEglContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> eglContext<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nDisplay<span class=\"token operator\">*</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getX11Display</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x11Display<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nWindow ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getX11Window</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x11Window<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nEGLConfig ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getEglConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> eglConfig<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nEGLint ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getEglVersionMajor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> eglVersionMajor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nEGLint ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getEglVersionMinor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> eglVersionMinor<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">initNative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n\t<span class=\"token function\">initRPiNative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">exitNative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n\t<span class=\"token function\">exitRPiNative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nEGLNativeWindowType ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getNativeWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isWindowInited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getNativeDisplay(): window not initialized, returning NULL\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>EGLNativeWindowType<span class=\"token punctuation\">)</span>x11Window<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>EGLNativeWindowType<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>dispman_native_window<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getNativeWindow(): no native window type for this system, perhaps try X11?\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nEGLNativeDisplayType ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getNativeDisplay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isWindowInited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getNativeDisplay(): window not initialized, returning NULL\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>EGLNativeDisplayType<span class=\"token punctuation\">)</span>x11Display<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>EGLNativeDisplayType<span class=\"token punctuation\">)</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getNativeDisplay(): no native window type for this system, perhaps try X11?\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofGLESWindowSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> Settings <span class=\"token operator\">*</span> glSettings <span class=\"token operator\">=</span> <span class=\"token keyword\">dynamic_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> Settings<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>glSettings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>glSettings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token function\">Settings</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofAppEGLWindowSettings <span class=\"token operator\">&amp;</span> _settings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tsettings <span class=\"token operator\">=</span> _settings<span class=\"token punctuation\">;</span>\n\twindowMode <span class=\"token operator\">=</span> OF_WINDOW<span class=\"token punctuation\">;</span>\n\tbNewScreenMode <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\tnFramesSinceWindowResized <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tbuttonInUse\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tbEnableSetupScreen <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\teglDisplayString <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\torientation <span class=\"token operator\">=</span> OF_ORIENTATION_DEFAULT<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//TODO: 2.0f is an arbitrary factor that makes mouse speed ok at 1024x768,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// to be totally correct we might need to take into account screen size</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// and add acceleration</span>\n\tmouseScaleX <span class=\"token operator\">=</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\tmouseScaleY <span class=\"token operator\">=</span> <span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\n\tisUsingX11 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tisWindowInited  <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tisSurfaceInited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\teglDisplay <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\teglSurface <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\teglContext <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\teglConfig  <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\teglVersionMajor <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\teglVersionMinor <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tglesVersion <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// X11 check</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// char * pDisplay;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// pDisplay = getenv (\"DISPLAY\");</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// bool bIsX11Available = (pDisplay != NULL);</span>\n\n\t<span class=\"token keyword\">bool</span> bIsX11Available <span class=\"token operator\">=</span> <span class=\"token function\">getenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DISPLAY\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>eglWindowPreference <span class=\"token operator\">==</span> OF_APP_WINDOW_AUTO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bIsX11Available<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tisUsingX11 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tisUsingX11 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>eglWindowPreference <span class=\"token operator\">==</span> OF_APP_WINDOW_NATIVE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tisUsingX11 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>eglWindowPreference <span class=\"token operator\">==</span> OF_APP_WINDOW_X11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tisUsingX11 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bIsX11Available<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tisUsingX11 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"init(): X11 window requested, but X11 is not available\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">////////////////</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// TODO remove the following ifdef once x11 is accelerated on RPI</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tisUsingX11 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"init(): X11 not availble on RPI yet, using a native window instead\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token comment\" spellcheck=\"true\">////////////////</span>\n\n\t<span class=\"token function\">initNative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tglesVersion <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>glesVersion<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// we set this here, and if we need to make a fullscreen</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// app, we do it during the first loop.</span>\n\twindowMode <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>windowMode<span class=\"token punctuation\">;</span>\n\tbShowCursor <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\tnonFullscreenWindowRect<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>settings<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>settings<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tnonFullscreenWindowRect<span class=\"token punctuation\">.</span><span class=\"token function\">standardize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofRectangle startRect <span class=\"token operator\">=</span> nonFullscreenWindowRect<span class=\"token punctuation\">;</span>\n\tbNewScreenMode <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>windowMode <span class=\"token operator\">==</span> OF_GAME_MODE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupOpenGL(): OF_GAME_MODE not supported, using OF_WINDOW\"</span><span class=\"token punctuation\">;</span>\n\t\tstartRect <span class=\"token operator\">=</span> nonFullscreenWindowRect<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>windowMode <span class=\"token operator\">==</span> OF_FULLSCREEN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstartRect <span class=\"token operator\">=</span> <span class=\"token function\">getScreenRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tisWindowInited <span class=\"token operator\">=</span> <span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span>startRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tisSurfaceInited <span class=\"token operator\">=</span> <span class=\"token function\">createSurface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isWindowInited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupOpenGL(): screen creation failed, window not inited\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">setupPeripherals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tnFramesSinceWindowResized <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>glesVersion<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tcurrentRenderer <span class=\"token operator\">=</span> make_shared<span class=\"token operator\">&lt;</span>ofGLProgrammableRenderer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tcurrentRenderer <span class=\"token operator\">=</span> make_shared<span class=\"token operator\">&lt;</span>ofGLRenderer<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">makeCurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>currentRenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>ofGLProgrammableRenderer<span class=\"token operator\">::</span>TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofGLProgrammableRenderer<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>currentRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>glesVersion<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofGLRenderer<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>currentRenderer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setupPeripherals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// roll our own cursor!</span>\n\t\tmouseCursor<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>mouse_cursor_data<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>mouse_cursor_data<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span>OF_IMAGE_COLOR_ALPHA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">MOUSE_CURSOR_RUN_LENGTH_DECODE</span><span class=\"token punctuation\">(</span>mouseCursor<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>mouse_cursor_data<span class=\"token punctuation\">.</span>rle_pixel_data<span class=\"token punctuation\">,</span>mouse_cursor_data<span class=\"token punctuation\">.</span>width<span class=\"token operator\">*</span>mouse_cursor_data<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span>mouse_cursor_data<span class=\"token punctuation\">.</span>bpp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmouseCursor<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupPeripherals(): peripheral setup complete\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">setupNativeEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupPeripherals(): native event setup complete\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupPeripherals(): peripherals not supported on X11\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">createSurface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\tEGLNativeWindowType nativeWindow <span class=\"token operator\">=</span> <span class=\"token function\">getNativeWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tEGLNativeDisplayType display <span class=\"token operator\">=</span> <span class=\"token function\">getNativeDisplay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): setting up EGL Display\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// get an EGL eglDisplay connection</span>\n\n\tisSurfaceInited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\tEGLint result<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>display<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\teglDisplay <span class=\"token operator\">=</span> <span class=\"token function\">eglGetDisplay</span><span class=\"token punctuation\">(</span>EGL_DEFAULT_DISPLAY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\teglDisplay <span class=\"token operator\">=</span> <span class=\"token function\">eglGetDisplay</span><span class=\"token punctuation\">(</span>display<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>eglDisplay <span class=\"token operator\">==</span> EGL_NO_DISPLAY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): eglGetDisplay returned: \"</span> <span class=\"token operator\">&lt;&lt;</span> eglDisplay<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): EGL Display correctly set \"</span> <span class=\"token operator\">&lt;&lt;</span> eglDisplay<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// initialize the EGL eglDisplay connection</span>\n\tresult <span class=\"token operator\">=</span> <span class=\"token function\">eglInitialize</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token operator\">&amp;</span>eglVersionMajor<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token operator\">&amp;</span>eglVersionMinor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> EGL_BAD_DISPLAY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//  eglDisplay is not an EGL connection</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): eglInitialize returned EGL_BAD_DISPLAY\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> EGL_NOT_INITIALIZED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// eglDisplay cannot be intitialized</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): eglInitialize returned EGL_NOT_INITIALIZED\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> EGL_FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// eglinitialize was not initialiezd</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): eglInitialize returned EGL_FALSE\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// result == EGL_TRUE</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// success!</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tEGLint glesVersion<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> glesVersionForContext<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetCurrentRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): current renderer type: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofGetCurrentRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): no current renderer selected\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>glesVersion<span class=\"token operator\">==</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tglesVersion <span class=\"token operator\">=</span> EGL_OPENGL_ES2_BIT<span class=\"token punctuation\">;</span>\n\t\tglesVersionForContext <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): GLES2 renderer detected\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tglesVersion <span class=\"token operator\">=</span> EGL_OPENGL_ES_BIT<span class=\"token punctuation\">;</span>\n\t\tglesVersionForContext <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): default renderer detected\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tofEGLAttributeListIterator iter<span class=\"token punctuation\">,</span> iterEnd<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// each attribute has 2 values, and we need one extra for the EGL_NONE terminator</span>\n\tEGLint attribute_list_framebuffer_config<span class=\"token punctuation\">[</span>settings<span class=\"token punctuation\">.</span>frameBufferAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\titer <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>frameBufferAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\titerEnd <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>frameBufferAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> iterEnd<span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tattribute_list_framebuffer_config<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>first<span class=\"token punctuation\">;</span>\n\t\tattribute_list_framebuffer_config<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tattribute_list_framebuffer_config<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> EGL_RENDERABLE_TYPE<span class=\"token punctuation\">;</span>\n\tattribute_list_framebuffer_config<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> glesVersion<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//openGL ES version</span>\n\tattribute_list_framebuffer_config<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> EGL_NONE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// add the terminator</span>\n\n\tEGLint num_configs<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get an appropriate EGL frame buffer configuration</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// http://www.khronos.org/registry/egl/sdk/docs/man/xhtml/eglChooseConfig.html</span>\n\tresult <span class=\"token operator\">=</span> <span class=\"token function\">eglChooseConfig</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span>\n\t\t\tattribute_list_framebuffer_config<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token operator\">&amp;</span>eglConfig<span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// we only want the first one.  if we want more,</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// we need to pass in an array.</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// we are optimistic and don't give it more chances</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// to find a good configuration</span>\n\t\t\t<span class=\"token operator\">&amp;</span>num_configs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> EGL_FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tEGLint error <span class=\"token operator\">=</span> <span class=\"token function\">eglGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): error finding valid configuration based on settings: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num_configs <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> eglConfig <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): no matching configs were found, num_configs: \"</span> <span class=\"token operator\">&lt;&lt;</span> num_configs<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">// each attribute has 2 values, and we need one extra for the EGL_NONE terminator</span>\n\tEGLint attribute_list_window_surface<span class=\"token punctuation\">[</span>settings<span class=\"token punctuation\">.</span>windowSurfaceAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\titer <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>windowSurfaceAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\titerEnd <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>windowSurfaceAttributes<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\ti <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> iterEnd<span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tattribute_list_window_surface<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>first<span class=\"token punctuation\">;</span>\n\t\tattribute_list_window_surface<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tattribute_list_window_surface<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> EGL_NONE<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// add the terminator</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// create a surface</span>\n\teglSurface <span class=\"token operator\">=</span> <span class=\"token function\">eglCreateWindowSurface</span><span class=\"token punctuation\">(</span> eglDisplay<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// our display handle</span>\n\t\t\teglConfig<span class=\"token punctuation\">,</span>\t<span class=\"token comment\" spellcheck=\"true\">// our first config</span>\n\t\t\tnativeWindow<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// our native window</span>\n\t\t\tattribute_list_window_surface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// surface attribute list</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>eglSurface <span class=\"token operator\">==</span> EGL_NO_SURFACE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tEGLint error <span class=\"token operator\">=</span> <span class=\"token function\">eglGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> EGL_BAD_MATCH<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): error creating surface: EGL_BAD_MATCH \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): check window and EGLConfig attributes to determine compatibility, \"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): or verify that the EGLConfig supports rendering to a window\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> EGL_BAD_CONFIG<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): error creating surface: EGL_BAD_CONFIG \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): verify that provided EGLConfig is valid\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> EGL_BAD_NATIVE_WINDOW<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): error creating surface: EGL_BAD_NATIVE_WINDOW \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): verify that provided EGLNativeWindow is valid\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> EGL_BAD_ALLOC<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): error creating surface: EGL_BAD_ALLOC \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): not enough resources available\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): error creating surface: &lt;&lt; \"</span> <span class=\"token operator\">&lt;&lt;</span> error <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): surface created correctly\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get an appropriate EGL frame buffer configuration</span>\n\tresult <span class=\"token operator\">=</span> <span class=\"token function\">eglBindAPI</span><span class=\"token punctuation\">(</span>EGL_OPENGL_ES_API<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> EGL_FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): error binding API: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span><span class=\"token function\">eglGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): API bound correctly\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// create an EGL rendering eglContext</span>\n\tEGLint attribute_list_surface_context<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\tEGL_CONTEXT_CLIENT_VERSION<span class=\"token punctuation\">,</span> glesVersionForContext<span class=\"token punctuation\">,</span>\n\t\t\tEGL_NONE\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\teglContext <span class=\"token operator\">=</span> <span class=\"token function\">eglCreateContext</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span>\n\t\t\teglConfig<span class=\"token punctuation\">,</span>\n\t\t\tEGL_NO_CONTEXT<span class=\"token punctuation\">,</span>\n\t\t\tattribute_list_surface_context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>eglContext <span class=\"token operator\">==</span> EGL_NO_CONTEXT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tEGLint error <span class=\"token operator\">=</span> <span class=\"token function\">eglGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>error <span class=\"token operator\">==</span> EGL_BAD_CONFIG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): error creating context: EGL_BAD_CONFIG \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): error creating context: \"</span> <span class=\"token operator\">&lt;&lt;</span> error <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// connect the eglContext to the eglSurface</span>\n\tresult <span class=\"token operator\">=</span> <span class=\"token function\">eglMakeCurrent</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span>\n\t\t\teglSurface<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// draw surface</span>\n\t\t\teglSurface<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// read surface</span>\n\t\t\teglContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>eglContext <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tEGLint error <span class=\"token operator\">=</span> <span class=\"token function\">eglGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): couldn't making current surface: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Set background color and clear buffers</span>\n\t<span class=\"token function\">glClearColor</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>initialClearColor<span class=\"token punctuation\">.</span>r <span class=\"token operator\">/</span> <span class=\"token number\">255.0f</span><span class=\"token punctuation\">,</span>\n\t\t\tsettings<span class=\"token punctuation\">.</span>initialClearColor<span class=\"token punctuation\">.</span>g <span class=\"token operator\">/</span> <span class=\"token number\">255.0f</span><span class=\"token punctuation\">,</span>\n\t\t\tsettings<span class=\"token punctuation\">.</span>initialClearColor<span class=\"token punctuation\">.</span>b <span class=\"token operator\">/</span> <span class=\"token number\">255.0f</span><span class=\"token punctuation\">,</span>\n\t\t\tsettings<span class=\"token punctuation\">.</span>initialClearColor<span class=\"token punctuation\">.</span>a <span class=\"token operator\">/</span> <span class=\"token number\">255.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glClear</span><span class=\"token punctuation\">(</span> GL_COLOR_BUFFER_BIT <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glClear</span><span class=\"token punctuation\">(</span> GL_DEPTH_BUFFER_BIT <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): -----EGL-----\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): EGL_VERSION_MAJOR = \"</span> <span class=\"token operator\">&lt;&lt;</span> eglVersionMajor<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): EGL_VERSION_MINOR = \"</span> <span class=\"token operator\">&lt;&lt;</span> eglVersionMinor<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): EGL_CLIENT_APIS = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglQueryString</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span> EGL_CLIENT_APIS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): EGL_VENDOR = \"</span>  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglQueryString</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span> EGL_VENDOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): EGL_VERSION = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglQueryString</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span> EGL_VERSION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): EGL_EXTENSIONS = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglQueryString</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span> EGL_EXTENSIONS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): GL_RENDERER = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">glGetString</span><span class=\"token punctuation\">(</span>GL_RENDERER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): GL_VERSION  = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">glGetString</span><span class=\"token punctuation\">(</span>GL_VERSION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): GL_VENDOR   = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">glGetString</span><span class=\"token punctuation\">(</span>GL_VENDOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createSurface(): -------------\"</span><span class=\"token punctuation\">;</span>\n\n\tisSurfaceInited <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">destroySurface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isSurfaceInited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destroySurface(): destroying EGL surface\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">eglSwapBuffers</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span> eglSurface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">eglMakeCurrent</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span> EGL_NO_SURFACE<span class=\"token punctuation\">,</span> EGL_NO_SURFACE<span class=\"token punctuation\">,</span> EGL_NO_CONTEXT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">eglDestroySurface</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span> eglSurface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">eglDestroyContext</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span> eglContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">eglTerminate</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tisSurfaceInited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t\teglDisplay <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\teglSurface <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\teglContext <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\teglConfig  <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\teglVersionMinor <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\teglVersionMinor <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destroySurface(): attempted to destroy uninitialized window\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">destroyWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isWindowInited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// TODO: double check</span>\n\t\t\t<span class=\"token function\">XDestroyWindow</span><span class=\"token punctuation\">(</span>x11Display<span class=\"token punctuation\">,</span>x11Window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// or XCloseWindow?</span>\n\t\t\t<span class=\"token function\">XFree</span><span class=\"token punctuation\">(</span>x11Screen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n\t\t\tdispman_update <span class=\"token operator\">=</span> <span class=\"token function\">vc_dispmanx_update_start</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dispman_element <span class=\"token operator\">!=</span> DISPMANX_NO_HANDLE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">vc_dispmanx_element_remove</span><span class=\"token punctuation\">(</span>dispman_update<span class=\"token punctuation\">,</span> dispman_element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tdispman_element <span class=\"token operator\">=</span> DISPMANX_NO_HANDLE<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token function\">vc_dispmanx_update_submit_sync</span><span class=\"token punctuation\">(</span>dispman_update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dispman_display <span class=\"token operator\">!=</span> DISPMANX_NO_HANDLE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">vc_dispmanx_display_close</span><span class=\"token punctuation\">(</span>dispman_display<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tdispman_display <span class=\"token operator\">=</span> DISPMANX_NO_HANDLE<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destroyWindow(): no native window type for this system, perhaps try X11?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destroyWindow(): destroying (uninited) native window (not implemented yet)\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">destroyNativeEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// we got a terminate ... so clean up.</span>\n\t<span class=\"token function\">destroySurface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">destroyWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">exitNative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">notifyExit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">makeCurrent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">eglMakeCurrent</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span>\n\t\t\teglSurface<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// draw surface</span>\n\t\t\teglSurface<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// read surface</span>\n\t\t\teglContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">swapBuffers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tEGLBoolean success <span class=\"token operator\">=</span> <span class=\"token function\">eglSwapBuffers</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span> eglSurface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tGLint error <span class=\"token operator\">=</span> <span class=\"token function\">eglGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"display(): eglSwapBuffers failed: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">startRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">renderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">startRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">finishRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">renderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">finishRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tcoreEvents<span class=\"token punctuation\">.</span><span class=\"token function\">notifyUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// take care of any requests for a new screen mode</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>windowMode <span class=\"token operator\">!=</span> OF_GAME_MODE <span class=\"token operator\">&amp;&amp;</span> bNewScreenMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> windowMode <span class=\"token operator\">==</span> OF_FULLSCREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setWindowRect</span><span class=\"token punctuation\">(</span><span class=\"token function\">getScreenRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> windowMode <span class=\"token operator\">==</span> OF_WINDOW <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setWindowRect</span><span class=\"token punctuation\">(</span>nonFullscreenWindowRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tbNewScreenMode <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tcurrentRenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">startRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bEnableSetupScreen <span class=\"token punctuation\">)</span> currentRenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setupScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcoreEvents<span class=\"token punctuation\">.</span><span class=\"token function\">notifyDraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bShowCursor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tGLboolean bIsDepthTestEnabled <span class=\"token operator\">=</span> GL_FALSE<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glGetBooleanv</span><span class=\"token punctuation\">(</span>GL_DEPTH_TEST<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>bIsDepthTestEnabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bIsDepthTestEnabled <span class=\"token operator\">==</span> GL_TRUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">glDisable</span><span class=\"token punctuation\">(</span>GL_DEPTH_TEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">bool</span> isUsingNormalizedTexCoords <span class=\"token operator\">=</span> <span class=\"token function\">ofGetUsingNormalizedTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isUsingNormalizedTexCoords<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofDisableNormalizedTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tcurrentRenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">pushStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcurrentRenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setBlendMode</span><span class=\"token punctuation\">(</span>OF_BLENDMODE_ADD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcurrentRenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmouseCursor<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetMouseX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ofGetMouseY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tcurrentRenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">popStyle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bIsDepthTestEnabled <span class=\"token operator\">==</span> GL_TRUE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">glEnable</span><span class=\"token punctuation\">(</span>GL_DEPTH_TEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isUsingNormalizedTexCoords<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofEnableNormalizedTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\tcurrentRenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">finishRender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tEGLBoolean success <span class=\"token operator\">=</span> <span class=\"token function\">eglSwapBuffers</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span> eglSurface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tGLint error <span class=\"token operator\">=</span> <span class=\"token function\">eglGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"display(): eglSwapBuffers failed: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">eglErrorString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tnFramesSinceWindowResized<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nofCoreEvents <span class=\"token operator\">&amp;</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> coreEvents<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nshared_ptr<span class=\"token operator\">&lt;</span>ofBaseRenderer<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">renderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> currentRenderer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setupNativeEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setupNativeUDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">setupNativeInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">startThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">destroyNativeEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">destroyNativeUDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">destroyNativeInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">waitForThread</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> threadTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setWindowRect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle<span class=\"token operator\">&amp;</span> requestedWindowRect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isWindowInited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowRect(): window not inited\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tofRectangle newRect <span class=\"token operator\">=</span> requestedWindowRect<span class=\"token punctuation\">.</span><span class=\"token function\">getStandardized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newRect <span class=\"token operator\">!=</span> currentWindowRect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tofRectangle oldWindowRect <span class=\"token operator\">=</span> currentWindowRect<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">XMoveResizeWindow</span><span class=\"token punctuation\">(</span>x11Display<span class=\"token punctuation\">,</span>\n\t\t\t\t\tx11Window<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> BadValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowRect(): XMoveResizeWindow returned BadValue\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> BadWindow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowRect(): XMoveResizeWindow returned BadWindow\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// all is good</span>\n\t\t\t\tcurrentWindowRect <span class=\"token operator\">=</span> newRect<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n\n\t\t\tVC_RECT_T dst_rect<span class=\"token punctuation\">;</span>\n\t\t\tdst_rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\t\tdst_rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t\t\tdst_rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\t\t\tdst_rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n\t\t\tVC_RECT_T src_rect<span class=\"token punctuation\">;</span>\n\t\t\tsrc_rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\tsrc_rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\tsrc_rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\t\t\tsrc_rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n\t\t\tDISPMANX_UPDATE_HANDLE_T dispman_update <span class=\"token operator\">=</span> <span class=\"token function\">vc_dispmanx_update_start</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token function\">vc_dispmanx_element_change_attributes</span><span class=\"token punctuation\">(</span>dispman_update<span class=\"token punctuation\">,</span>\n\t\t\t\t\tdispman_element<span class=\"token punctuation\">,</span>\n\t\t\t\t\tELEMENT_CHANGE_SRC_RECT<span class=\"token operator\">|</span>ELEMENT_CHANGE_DEST_RECT<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// we do both when resizing</span>\n\t\t\t\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// layer (we aren't changing it here)</span>\n\t\t\t\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// opactiy (we aren't changing it here)</span>\n\t\t\t\t\t<span class=\"token operator\">&amp;</span>dst_rect<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token operator\">&amp;</span>src_rect<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// mask (we aren't changing it here)</span>\n\t\t\t\t\t<span class=\"token punctuation\">(</span>DISPMANX_TRANSFORM_T<span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t\t\t<span class=\"token function\">vc_dispmanx_update_submit_sync</span><span class=\"token punctuation\">(</span>dispman_update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// next time swapBuffers is called, it will be resized based on this eglwindow size data</span>\n\t\t\tdispman_native_window<span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> dispman_element<span class=\"token punctuation\">;</span>\n\t\t\tdispman_native_window<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\t\t\tdispman_native_window<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>newRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// don't forget!</span>\n\n\t\t\tcurrentWindowRect <span class=\"token operator\">=</span> newRect<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createEGLWindow(): no native window type for this system, perhaps try X11?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>oldWindowRect<span class=\"token punctuation\">.</span>width  <span class=\"token operator\">!=</span> currentWindowRect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">||</span> oldWindowRect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">!=</span> currentWindowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tcoreEvents<span class=\"token punctuation\">.</span><span class=\"token function\">notifyWindowResized</span><span class=\"token punctuation\">(</span>currentWindowRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>\tcurrentWindowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tnFramesSinceWindowResized <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle<span class=\"token operator\">&amp;</span> requestedWindowRect<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">createX11NativeWindow</span><span class=\"token punctuation\">(</span>requestedWindowRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">createRPiNativeWindow</span><span class=\"token punctuation\">(</span>requestedWindowRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"createEGLWindow(): no native window type for this system, perhaps try X11?\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> currentWindowRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getWindowHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> currentWindowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">pollEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">-</span><span class=\"token operator\">></span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tXEvent event<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">::</span><span class=\"token function\">XCheckWindowEvent</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">-</span><span class=\"token operator\">></span>x11Display<span class=\"token punctuation\">,</span> instance<span class=\"token operator\">-</span><span class=\"token operator\">></span>x11Window<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">handleX11Event</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">::</span><span class=\"token function\">XCheckTypedEvent</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">-</span><span class=\"token operator\">></span>x11Display<span class=\"token punctuation\">,</span> ClientMessage<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">handleX11Event</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tqueue<span class=\"token operator\">&lt;</span>ofMouseEventArgs<span class=\"token operator\">></span> mouseEventsCopy<span class=\"token punctuation\">;</span>\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmouseEventsCopy <span class=\"token operator\">=</span> instance<span class=\"token operator\">-</span><span class=\"token operator\">></span>mouseEvents<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token operator\">-</span><span class=\"token operator\">></span>mouseEvents<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>mouseEvents<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mouseEventsCopy<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>coreEvents<span class=\"token punctuation\">.</span><span class=\"token function\">notifyMouseEvent</span><span class=\"token punctuation\">(</span>mouseEventsCopy<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmouseEventsCopy<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// KEYBOARD EVENTS</span>\n\t\tqueue<span class=\"token operator\">&lt;</span>ofKeyEventArgs<span class=\"token operator\">></span> keyEventsCopy<span class=\"token punctuation\">;</span>\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tkeyEventsCopy <span class=\"token operator\">=</span> instance<span class=\"token operator\">-</span><span class=\"token operator\">></span>keyEvents<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>instance<span class=\"token operator\">-</span><span class=\"token operator\">></span>keyEvents<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>keyEvents<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>keyEventsCopy<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>coreEvents<span class=\"token punctuation\">.</span><span class=\"token function\">notifyKeyEvent</span><span class=\"token punctuation\">(</span>keyEventsCopy<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tkeyEventsCopy<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">hideCursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbShowCursor <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">showCursor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbShowCursor <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setWindowTitle</span><span class=\"token punctuation\">(</span>string title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowTitle(): not implemented\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nglm<span class=\"token operator\">::</span>vec2 ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getWindowSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>currentWindowRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> currentWindowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nglm<span class=\"token operator\">::</span>vec2 ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getWindowPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec2</span><span class=\"token punctuation\">(</span>currentWindowRect<span class=\"token punctuation\">.</span><span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nglm<span class=\"token operator\">::</span>vec2 ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getScreenSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> screenWidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> screenHeight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// TODO, there must be a way to get screensize if the window is not inited</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isWindowInited <span class=\"token operator\">&amp;&amp;</span> x11Screen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tscreenWidth  <span class=\"token operator\">=</span> <span class=\"token function\">XWidthOfScreen</span><span class=\"token punctuation\">(</span>x11Screen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tscreenHeight <span class=\"token operator\">=</span> <span class=\"token function\">XHeightOfScreen</span><span class=\"token punctuation\">(</span>x11Screen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getScreenSize(): tried to get display size but failed, x11Screen is not inited\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n\t\t<span class=\"token keyword\">int</span> success <span class=\"token operator\">=</span> <span class=\"token function\">graphics_get_display_size</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>screenNum<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>screenWidth<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>screenHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>success <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getScreenSize(): tried to get display size but failed\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getScreenSize(): no native window type for this system, perhaps try X11?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>screenWidth<span class=\"token punctuation\">,</span> screenHeight<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> orientation <span class=\"token operator\">==</span> OF_ORIENTATION_DEFAULT <span class=\"token operator\">||</span> orientation <span class=\"token operator\">==</span> OF_ORIENTATION_180 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> currentWindowRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> currentWindowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> orientation <span class=\"token operator\">==</span> OF_ORIENTATION_DEFAULT <span class=\"token operator\">||</span> orientation <span class=\"token operator\">==</span> OF_ORIENTATION_180 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> currentWindowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> currentWindowRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setOrientation</span><span class=\"token punctuation\">(</span>ofOrientation orientationIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\torientation <span class=\"token operator\">=</span> orientationIn<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nofOrientation ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getOrientation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> orientation<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">doesHWOrientation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setWindowPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isWindowInited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowPosition(): window not inited\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">XMoveWindow</span><span class=\"token punctuation\">(</span>x11Display<span class=\"token punctuation\">,</span>\n\t\t\t\tx11Window<span class=\"token punctuation\">,</span>\n\t\t\t\tx<span class=\"token punctuation\">,</span>\n\t\t\t\ty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> BadValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowPosition(): XMoveWindow returned BadValue\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> BadWindow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowPosition(): XMoveWindow returned BadWindow\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tcurrentWindowRect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\t\tcurrentWindowRect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\t\t\tnonFullscreenWindowRect <span class=\"token operator\">=</span> currentWindowRect<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// keep it in bounds</span>\n\t\t<span class=\"token keyword\">auto</span> screenSize <span class=\"token operator\">=</span> <span class=\"token function\">getScreenSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tx <span class=\"token operator\">=</span> <span class=\"token function\">ofClamp</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> screenSize<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> currentWindowRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">=</span> <span class=\"token function\">ofClamp</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> screenSize<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> currentWindowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tVC_RECT_T dst_rect<span class=\"token punctuation\">;</span>\n\t\tdst_rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>x<span class=\"token punctuation\">;</span>\n\t\tdst_rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>y<span class=\"token punctuation\">;</span>\n\t\tdst_rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>currentWindowRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\t\tdst_rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>currentWindowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n\t\tdispman_update <span class=\"token operator\">=</span> <span class=\"token function\">vc_dispmanx_update_start</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">vc_dispmanx_element_change_attributes</span><span class=\"token punctuation\">(</span>dispman_update<span class=\"token punctuation\">,</span>\n\t\t\t\tdispman_native_window<span class=\"token punctuation\">.</span>element<span class=\"token punctuation\">,</span>\n\t\t\t\tELEMENT_CHANGE_DEST_RECT<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token operator\">&amp;</span>dst_rect<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">(</span>DISPMANX_TRANSFORM_T<span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token function\">vc_dispmanx_update_submit_sync</span><span class=\"token punctuation\">(</span>dispman_update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ncurrentWindowRect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\ncurrentWindowRect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\nnonFullscreenWindowRect <span class=\"token operator\">=</span> currentWindowRect<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowPosition(): no native window type for this system, perhaps try X11?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setWindowShape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isWindowInited<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowPosition(): window not inited\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isUsingX11<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">XResizeWindow</span><span class=\"token punctuation\">(</span>x11Display<span class=\"token punctuation\">,</span>\n\t\t\t\tx11Window<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>w<span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> BadValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowPosition(): XMoveWindow returned BadValue\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> BadWindow<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowPosition(): XMoveWindow returned BadWindow\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tcurrentWindowRect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> w<span class=\"token punctuation\">;</span>\n\t\t\tcurrentWindowRect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n\t\t\tnonFullscreenWindowRect <span class=\"token operator\">=</span> currentWindowRect<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n\t\t<span class=\"token function\">setWindowRect</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofRectangle</span><span class=\"token punctuation\">(</span>currentWindowRect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>currentWindowRect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnonFullscreenWindowRect <span class=\"token operator\">=</span> currentWindowRect<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setWindowPosition(): no native window type for this system, perhaps try X11?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nofWindowMode ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getWindowMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> windowMode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">toggleFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> windowMode <span class=\"token operator\">==</span> OF_GAME_MODE<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> windowMode <span class=\"token operator\">==</span> OF_WINDOW <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setFullscreen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> fullscreen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> windowMode <span class=\"token operator\">==</span> OF_GAME_MODE<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fullscreen <span class=\"token operator\">&amp;&amp;</span> windowMode <span class=\"token operator\">!=</span> OF_FULLSCREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tbNewScreenMode <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\twindowMode <span class=\"token operator\">=</span> OF_FULLSCREEN<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fullscreen <span class=\"token operator\">&amp;&amp;</span> windowMode <span class=\"token operator\">!=</span> OF_WINDOW<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbNewScreenMode <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\twindowMode <span class=\"token operator\">=</span> OF_WINDOW<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">enableSetupScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbEnableSetupScreen <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">disableSetupScreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbEnableSetupScreen <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nofRectangle ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">getScreenRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> screenSize <span class=\"token operator\">=</span> <span class=\"token function\">getScreenSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofRectangle</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>screenSize<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>screenSize<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setVerticalSync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> enabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">eglSwapInterval</span><span class=\"token punctuation\">(</span>eglDisplay<span class=\"token punctuation\">,</span> enabled <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">threadedFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// TODO: a way to setup mouse and keyboard if</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// they are not plugged in upon start</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// This can be done with our udev device callbacks</span>\n\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isThreadRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">readNativeUDevEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">readNativeInputEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// sleep briefly</span>\n\t\t<span class=\"token function\">ofSleepMillis</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// PLATFORM SPECIFIC RPI</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setupNativeUDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\tudev <span class=\"token operator\">=</span> <span class=\"token function\">udev_new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// create new udev object</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>udev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupNativeUDev(): couldn't create udev object\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupNativeUDev(): created udev object\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// setup udev to monitor for input devices</span>\n\t\tmon <span class=\"token operator\">=</span> <span class=\"token function\">udev_monitor_new_from_netlink</span><span class=\"token punctuation\">(</span>udev<span class=\"token punctuation\">,</span> <span class=\"token string\">\"udev\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// just listen for input devices</span>\n\t\t<span class=\"token function\">udev_monitor_filter_add_match_subsystem_devtype</span><span class=\"token punctuation\">(</span>mon<span class=\"token punctuation\">,</span> <span class=\"token string\">\"input\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">udev_monitor_enable_receiving</span><span class=\"token punctuation\">(</span>mon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// get the file descriptor for the mon (used w/ select);</span>\n\t\tudev_fd <span class=\"token operator\">=</span> <span class=\"token function\">udev_monitor_get_fd</span><span class=\"token punctuation\">(</span>mon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>udev_fd <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupNativeUDev(): did not create udev object, udev_fd &lt; 0\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">destroyNativeUDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">udev_unref</span><span class=\"token punctuation\">(</span>udev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// clean up</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">setupNativeInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> udev_enumerate <span class=\"token operator\">*</span>enumerate<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> udev_list_entry <span class=\"token operator\">*</span>devices<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>entry<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> udev_device <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> isMouse<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupNativeInput()\"</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/* Create a list of the devices in the 'input' subsystem. */</span>\n\tenumerate <span class=\"token operator\">=</span> <span class=\"token function\">udev_enumerate_new</span><span class=\"token punctuation\">(</span>udev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">udev_enumerate_add_match_subsystem</span><span class=\"token punctuation\">(</span>enumerate<span class=\"token punctuation\">,</span> <span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">udev_enumerate_scan_devices</span><span class=\"token punctuation\">(</span>enumerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tdevices <span class=\"token operator\">=</span> <span class=\"token function\">udev_enumerate_get_list_entry</span><span class=\"token punctuation\">(</span>enumerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">udev_list_entry_foreach</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">,</span> devices<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/* Get the filename of the /sys entry for the device\n\t\t\tand create a udev_device object (dev) representing it */</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> name <span class=\"token operator\">=</span> <span class=\"token function\">udev_list_entry_get_name</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tdev <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_new_from_syspath</span><span class=\"token punctuation\">(</span>udev<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> sysname <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_sysname</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> devnode <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_devnode</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> devpath <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_devpath</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> devtype <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_devtype</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdev_t devnum <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_devnum</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> driver <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_driver</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> prop_keyboard <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_property_value</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ID_INPUT_KEYBOARD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> prop_mouse <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_property_value</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ID_INPUT_MOUSE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Got device\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - node: \"</span> <span class=\"token operator\">&lt;&lt;</span> devnode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - sysname: \"</span> <span class=\"token operator\">&lt;&lt;</span> sysname<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - devpath: \"</span> <span class=\"token operator\">&lt;&lt;</span> devpath<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - devtype: \"</span> <span class=\"token operator\">&lt;&lt;</span> devtype<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - driver: \"</span> <span class=\"token operator\">&lt;&lt;</span> driver<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - devnum: \"</span> <span class=\"token operator\">&lt;&lt;</span> devnum<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - ID_INPUT_KEYBOARD: \"</span> <span class=\"token operator\">&lt;&lt;</span> prop_keyboard<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - ID_INPUT_MOUSE: \"</span> <span class=\"token operator\">&lt;&lt;</span> prop_mouse<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prop_mouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tisMouse <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tisMouse <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>devnode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>prop_keyboard <span class=\"token operator\">||</span> prop_mouse<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">string_begins_with</span><span class=\"token punctuation\">(</span>sysname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">addInput</span><span class=\"token punctuation\">(</span>devnode<span class=\"token punctuation\">,</span> isMouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prop_keyboard<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tkeyboardDetected <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prop_mouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tmouseDetected <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">udev_device_unref</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/* Free the enumerator object */</span>\n\t<span class=\"token function\">udev_enumerate_unref</span><span class=\"token punctuation\">(</span>enumerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mouseDetected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupNativeInput(): did not open mouse\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>keyboardDetected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupKeyboard(): did not open keyboard\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// save current terminal settings</span>\n\t<span class=\"token function\">tcgetattr</span> <span class=\"token punctuation\">(</span>STDIN_FILENO<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tots <span class=\"token operator\">=</span> tc<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// disable echo on our temporary settings</span>\n\ttc<span class=\"token punctuation\">.</span>c_lflag <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span>ECHO<span class=\"token punctuation\">;</span>\n\ttc<span class=\"token punctuation\">.</span>c_lflag <span class=\"token operator\">|</span><span class=\"token operator\">=</span> ECHONL<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">tcsetattr</span><span class=\"token punctuation\">(</span>STDIN_FILENO<span class=\"token punctuation\">,</span> TCSAFLUSH<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tmb<span class=\"token punctuation\">.</span>mouseButtonState <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\tkb<span class=\"token punctuation\">.</span>shiftPressed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tkb<span class=\"token punctuation\">.</span>capsLocked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">printInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">addInput</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> isMouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">removeInput</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> O_RDONLY <span class=\"token operator\">|</span> O_NONBLOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">char</span> deviceNameBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Unknown Device\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token function\">EVIOCGNAME</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>deviceNameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> deviceNameBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"addInput(): input device name = \"</span> <span class=\"token operator\">&lt;&lt;</span> deviceNameBuffer<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isMouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">struct</span> input_absinfo mabsx<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token function\">EVIOCGABS</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mabsx<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ioctl GABS failed\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tmouseAbsXMin <span class=\"token operator\">=</span> mabsx<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">;</span>\n\t\t\t\tmouseAbsXMax <span class=\"token operator\">=</span> mabsx<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mouse x axis min, max: \"</span> <span class=\"token operator\">&lt;&lt;</span> mouseAbsXMin <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> mouseAbsXMax<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// Do that for the y axis. EVIOCGABS(1): 1 stands for y axis.</span>\n\t\t\t<span class=\"token keyword\">struct</span> input_absinfo mabsy<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token function\">EVIOCGABS</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>mabsy<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ioctl GABS failed\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\tmouseAbsYMin <span class=\"token operator\">=</span> mabsy<span class=\"token punctuation\">.</span>minimum<span class=\"token punctuation\">;</span>\n\t\t\t\tmouseAbsYMax <span class=\"token operator\">=</span> mabsy<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mouse y axis min, max: \"</span> <span class=\"token operator\">&lt;&lt;</span> mouseAbsYMin <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> mouseAbsYMax<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tinputDevices<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fd<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">removeInput</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\tdevice<span class=\"token operator\">::</span>iterator iter <span class=\"token operator\">=</span> inputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> inputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tinputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">printInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- Input Device List ---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>device<span class=\"token operator\">::</span>iterator iter <span class=\"token operator\">=</span> inputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> inputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">&lt;&lt;</span> iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>first<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">destroyNativeInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"destroyNativeInput()\"</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>device<span class=\"token operator\">::</span>iterator iter <span class=\"token operator\">=</span> inputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> inputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>second <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tinputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">tcsetattr</span> <span class=\"token punctuation\">(</span>STDIN_FILENO<span class=\"token punctuation\">,</span> TCSAFLUSH<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ots<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">processInput</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// http://www.diegm.uniud.it/loghi/CE2/kbd.pdf</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// http://cgit.freedesktop.org/~whot/evtest/plain/evtest.c</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// https://strcpy.net/b/archives/2010/11/17/abusing_the_linux_input_subsystem/index.html</span>\n\t<span class=\"token keyword\">static</span> ofKeyEventArgs keyEvent<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> ofMouseEventArgs mouseEvent<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> input_event ev<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> key <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> pushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> pushMouseEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> axisValuePending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> nBytesRead <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ev<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> input_event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>nBytesRead <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// ofLogNotice(\"Input event \") &lt;&lt; \"dev: \" &lt;&lt; node &lt;&lt; \" ,type: \" &lt;&lt; ev.type &lt;&lt; \" ,code: \" &lt;&lt; ev.code &lt;&lt; \" ,value: \" &lt;&lt; ev.value &lt;&lt; \" ,pending: \" &lt;&lt; axisValuePending;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> EV_KEY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> BTN_LEFT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// release</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> OF_MOUSE_BUTTON_LEFT<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Released<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmb<span class=\"token punctuation\">.</span>mouseButtonState <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span>MOUSE_BUTTON_LEFT_MASK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tpushMouseEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// press</span>\n\t\t\t\t\tmb<span class=\"token punctuation\">.</span>mouseButtonState <span class=\"token operator\">|</span><span class=\"token operator\">=</span> MOUSE_BUTTON_LEFT_MASK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Pressed<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> OF_MOUSE_BUTTON_LEFT<span class=\"token punctuation\">;</span>\n\t\t\t\t\tpushMouseEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> BTN_MIDDLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// release</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> OF_MOUSE_BUTTON_MIDDLE<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Released<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmb<span class=\"token punctuation\">.</span>mouseButtonState <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span>MOUSE_BUTTON_MIDDLE_MASK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tpushMouseEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// press</span>\n\t\t\t\t\tmb<span class=\"token punctuation\">.</span>mouseButtonState <span class=\"token operator\">|</span><span class=\"token operator\">=</span> MOUSE_BUTTON_MIDDLE_MASK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Pressed<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> OF_MOUSE_BUTTON_MIDDLE<span class=\"token punctuation\">;</span>\n\t\t\t\t\tpushMouseEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>code <span class=\"token operator\">==</span> BTN_RIGHT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// release</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> OF_MOUSE_BUTTON_RIGHT<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Released<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmb<span class=\"token punctuation\">.</span>mouseButtonState <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span>MOUSE_BUTTON_RIGHT_MASK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tpushMouseEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// press</span>\n\t\t\t\t\tmb<span class=\"token punctuation\">.</span>mouseButtonState <span class=\"token operator\">|</span><span class=\"token operator\">=</span> MOUSE_BUTTON_RIGHT_MASK<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Pressed<span class=\"token punctuation\">;</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> OF_MOUSE_BUTTON_RIGHT<span class=\"token punctuation\">;</span>\n\t\t\t\t\tpushMouseEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// key released</span>\n\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofKeyEventArgs<span class=\"token operator\">::</span>Released<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// key pressed</span>\n\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofKeyEventArgs<span class=\"token operator\">::</span>Pressed<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// key repeated</span>\n\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofKeyEventArgs<span class=\"token operator\">::</span>Pressed<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// unknown ev.value</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_RIGHTSHIFT<span class=\"token operator\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_LEFTSHIFT<span class=\"token operator\">:</span>\n\t\t\t\t\t\tkb<span class=\"token punctuation\">.</span>shiftPressed <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_RIGHTCTRL<span class=\"token operator\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_LEFTCTRL<span class=\"token operator\">:</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_CAPSLOCK<span class=\"token operator\">:</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>kb<span class=\"token punctuation\">.</span>capsLocked<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\tkb<span class=\"token punctuation\">.</span>capsLocked <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\tkb<span class=\"token punctuation\">.</span>capsLocked <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_ESC<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_ESC<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_BACKSPACE<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_BACKSPACE<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_DELETE<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_DEL<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F1<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F1<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F2<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F2<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F3<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F3<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F4<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F4<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F5<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F5<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F6<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F6<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F7<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F7<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F8<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F8<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F9<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F9<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F10<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F10<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F11<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F11<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_F12<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_F12<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_LEFT<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_LEFT<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_UP<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_UP<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_RIGHT<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_RIGHT<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_DOWN<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_DOWN<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_PAGEUP<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_PAGE_UP<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_PAGEDOWN<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_PAGE_DOWN<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_HOME<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_HOME<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_END<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_END<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_INSERT<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_INSERT<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_ENTER<span class=\"token operator\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">case</span> KEY_KPENTER<span class=\"token operator\">:</span>\n\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_RETURN<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// VERY RUDIMENTARY KEY MAPPING WITH MAPS ABOVE</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>code <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>lowercase_map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>kb<span class=\"token punctuation\">.</span>shiftPressed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\tkey <span class=\"token operator\">=</span> uppercase_map<span class=\"token punctuation\">[</span>ev<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>kb<span class=\"token punctuation\">.</span>capsLocked<span class=\"token punctuation\">)</span> keyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token function\">tolower</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t\tkey <span class=\"token operator\">=</span> lowercase_map<span class=\"token punctuation\">[</span>ev<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>kb<span class=\"token punctuation\">.</span>capsLocked<span class=\"token punctuation\">)</span> key <span class=\"token operator\">=</span> <span class=\"token function\">toupper</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"readKeyboardEvents(): input_event.code is outside of our small range\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\t\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> EV_REL <span class=\"token operator\">||</span> ev<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> EV_ABS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> axis <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> amount <span class=\"token operator\">=</span> ev<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>axis<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> EV_REL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span><span class=\"token operator\">=</span> amount <span class=\"token operator\">*</span> mouseScaleX<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> amount <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>currentWindowRect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>mouseAbsXMax<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token function\">ofClamp</span><span class=\"token punctuation\">(</span>mouseEvent<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> currentWindowRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\taxisValuePending <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> EV_REL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span><span class=\"token operator\">=</span> amount <span class=\"token operator\">*</span> mouseScaleY<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> amount <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>currentWindowRect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>mouseAbsYMax<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token function\">ofClamp</span><span class=\"token punctuation\">(</span>mouseEvent<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> currentWindowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\taxisValuePending <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"readMouseEvents(): unknown mouse axis (perhaps it's the scroll wheel?)\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> EV_MSC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ev<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> EV_SYN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// EV_SYN Used as markers to separate events. Events may be</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// separated in time or in space, such as with the multitouch protocol.</span>\n\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// EV_SYN events are sent when axis value (one or a pair) are changed</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>axisValuePending<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// ofLog() &lt;&lt; \"EV_SYN pending end : \" &lt;&lt; iter->second;</span>\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// TODO, this state doesn't make as much sense when the mouse is not dragging</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mb<span class=\"token punctuation\">.</span>mouseButtonState <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// dragging (what if dragging w/ more than one button?)</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Dragged<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// just moving</span>\n\t\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Moved<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\tmouseEvent<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> mb<span class=\"token punctuation\">.</span>mouseButtonState<span class=\"token punctuation\">;</span>\n\n\t\t\t\tpushMouseEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\taxisValuePending <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//ofLogVerbose(\"ofAppEGLWindow\") &lt;&lt; \"readMouseEvents(): EV_SYN\";</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pushKeyEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tkeyEvents<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>keyEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tpushKeyEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pushMouseEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// lock the thread for a moment while we copy the data</span>\n\t\t\t<span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tmouseEvents<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>mouseEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tpushMouseEvent <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tnBytesRead <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ev<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> input_event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">readNativeUDevEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// look for devices being attatched / detatched</span>\n\tfd_set fds<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> timeval tv<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> udev_device <span class=\"token operator\">*</span>dev<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> is_mouse <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>udev_fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\ttv<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\tret <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>udev_fd<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fds<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/* Check if our file descriptor has received data. */</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">FD_ISSET</span><span class=\"token punctuation\">(</span>udev_fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/* Make the call to receive the device.\n\t\t   select() ensured that this will not block. */</span>\n\t\tdev <span class=\"token operator\">=</span> <span class=\"token function\">udev_monitor_receive_device</span><span class=\"token punctuation\">(</span>mon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> devnode <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_devnode</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> devpath <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_devpath</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> sysname <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_sysname</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> subsystem <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_subsystem</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> devtype <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_devtype</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tdev_t devnum <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_devnum</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> driver <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_driver</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> action <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_action</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> prop_keyboard <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_property_value</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ID_INPUT_KEYBOARD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> prop_mouse <span class=\"token operator\">=</span> <span class=\"token function\">udev_device_get_property_value</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ID_INPUT_MOUSE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"readNativeUDevEvents\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"udev monitor receive devixe\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - node: \"</span> <span class=\"token operator\">&lt;&lt;</span> devnode<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - devpath: \"</span> <span class=\"token operator\">&lt;&lt;</span> devpath<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - sysname: \"</span> <span class=\"token operator\">&lt;&lt;</span> sysname<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - subsystem: \"</span> <span class=\"token operator\">&lt;&lt;</span> subsystem<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - devtype: \"</span> <span class=\"token operator\">&lt;&lt;</span> devtype<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - devnum: \"</span> <span class=\"token operator\">&lt;&lt;</span> devnum<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - driver: \"</span> <span class=\"token operator\">&lt;&lt;</span> driver<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - action: \"</span> <span class=\"token operator\">&lt;&lt;</span> action<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - ID_INPUT_KEYBOARD: \"</span> <span class=\"token operator\">&lt;&lt;</span> prop_keyboard<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - ID_INPUT_MOUSE: \"</span> <span class=\"token operator\">&lt;&lt;</span> prop_mouse<span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>prop_mouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tis_mouse <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>devnode <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>prop_keyboard <span class=\"token operator\">||</span> prop_mouse<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">string_begins_with</span><span class=\"token punctuation\">(</span>sysname<span class=\"token punctuation\">,</span> <span class=\"token string\">\"event\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"add\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">addInput</span><span class=\"token punctuation\">(</span>devnode<span class=\"token punctuation\">,</span> is_mouse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">,</span> <span class=\"token string\">\"remove\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">removeInput</span><span class=\"token punctuation\">(</span>devnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\t\t\t\n\t\t\t<span class=\"token function\">udev_device_unref</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"readNativeUDevEvents(): device returned by receive_device() is NULL\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">readNativeInputEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>device<span class=\"token operator\">::</span>iterator iter <span class=\"token operator\">=</span> inputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> inputDevices<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">processInput</span><span class=\"token punctuation\">(</span>iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">,</span> iter<span class=\"token operator\">-</span><span class=\"token operator\">></span>first<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RASPBERRY_PI_LEGACY</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">initRPiNative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">bcm_host_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dispman_native_window<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>EGL_DISPMANX_WINDOW_T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdispman_element <span class=\"token operator\">=</span> DISPMANX_NO_HANDLE<span class=\"token punctuation\">;</span>\n\tdispman_display <span class=\"token operator\">=</span> DISPMANX_NO_HANDLE<span class=\"token punctuation\">;</span>\n\tdispman_update  <span class=\"token operator\">=</span> DISPMANX_NO_HANDLE<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dispman_clamp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DISPMANX_CLAMP_T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdispman_transform <span class=\"token operator\">=</span> DISPMANX_NO_ROTATE<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dispman_alpha<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>VC_DISPMANX_ALPHA_T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// zero dispman_alpha</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">exitRPiNative</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">bcm_host_deinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">createRPiNativeWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle<span class=\"token operator\">&amp;</span> requestedWindowRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tofRectangle screenRect <span class=\"token operator\">=</span> <span class=\"token function\">getScreenRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// make sure our requested window rectangle does not exceed the native</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// screen size, or start outside of it.</span>\n\tofRectangle windowRect <span class=\"token operator\">=</span> screenRect<span class=\"token punctuation\">.</span><span class=\"token function\">getIntersection</span><span class=\"token punctuation\">(</span>requestedWindowRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupRPiNativeWindow(): screenRect: \"</span> <span class=\"token operator\">&lt;&lt;</span> screenRect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"x\"</span> <span class=\"token operator\">&lt;&lt;</span> screenRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupRPiNativeWindow(): windowRect: \"</span> <span class=\"token operator\">&lt;&lt;</span> windowRect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"x\"</span> <span class=\"token operator\">&lt;&lt;</span> windowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//////////////////////////</span>\n\tVC_RECT_T dst_rect<span class=\"token punctuation\">;</span>\n\n\tdst_rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>windowRect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\tdst_rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>windowRect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tdst_rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>windowRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\tdst_rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>windowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n\tVC_RECT_T src_rect<span class=\"token punctuation\">;</span>\n\n\tsrc_rect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tsrc_rect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tsrc_rect<span class=\"token punctuation\">.</span>width  <span class=\"token operator\">=</span> dst_rect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\tsrc_rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> dst_rect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dispman_alpha<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>VC_DISPMANX_ALPHA_T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// zero dispman_alpha</span>\n\tdispman_alpha<span class=\"token punctuation\">.</span>flags <span class=\"token operator\">=</span> DISPMANX_FLAGS_ALPHA_FIXED_ALL_PIXELS<span class=\"token punctuation\">;</span>\n\tdispman_alpha<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token function\">ofClamp</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>eglWindowOpacity<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdispman_alpha<span class=\"token punctuation\">.</span>mask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dispman_clamp<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DISPMANX_CLAMP_T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// there are other values for dispman_transform, but they do not seem to have an effect</span>\n\tdispman_transform <span class=\"token operator\">=</span> DISPMANX_NO_ROTATE<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get the zero display</span>\n\tdispman_display <span class=\"token operator\">=</span> <span class=\"token function\">vc_dispmanx_display_open</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>screenNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// begin the display manager interaction</span>\n\tdispman_update  <span class=\"token operator\">=</span> <span class=\"token function\">vc_dispmanx_update_start</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// add a \"display manager element\" with our parameters so</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// that it can fill in the structures.  we will pass this</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// filled dispman_element to our native window, which will</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// be used to construct the EGL surface, etc.</span>\n\tdispman_element <span class=\"token operator\">=</span> <span class=\"token function\">vc_dispmanx_element_add</span> <span class=\"token punctuation\">(</span> dispman_update<span class=\"token punctuation\">,</span>\n\t\t\tdispman_display<span class=\"token punctuation\">,</span>\n\t\t\tsettings<span class=\"token punctuation\">.</span>layer<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// layer</span>\n\t\t\t<span class=\"token operator\">&amp;</span>dst_rect<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// dst rect</span>\n\t\t\t<span class=\"token punctuation\">(</span>DISPMANX_RESOURCE_HANDLE_T<span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// src</span>\n\t\t\t<span class=\"token operator\">&amp;</span>src_rect<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// src rect</span>\n\t\t\tDISPMANX_PROTECTION_NONE<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// ?</span>\n\t\t\t<span class=\"token operator\">&amp;</span>dispman_alpha<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// alpha</span>\n\t\t\t<span class=\"token operator\">&amp;</span>dispman_clamp<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// clamp</span>\n\t\t\tdispman_transform <span class=\"token comment\" spellcheck=\"true\">// transform</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dispman_element <span class=\"token operator\">==</span> DISPMANX_NO_HANDLE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupRPiNativeWindow(): dispman_element == DISPMANX_NO_HANDLE\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dispman_element <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span><span class=\"token punctuation\">)</span>DISPMANX_INVALID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupRPiNativeWindow(): dispman_element == DISPMANX_INVALID\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// set dispman_native_window to zero</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>dispman_native_window<span class=\"token punctuation\">,</span> <span class=\"token number\">0x0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>EGL_DISPMANX_WINDOW_T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdispman_native_window<span class=\"token punctuation\">.</span>element <span class=\"token operator\">=</span> dispman_element<span class=\"token punctuation\">;</span>\n\tdispman_native_window<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>windowRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\tdispman_native_window<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>int32_t<span class=\"token punctuation\">)</span>windowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// set background to black (not required)</span>\n\t<span class=\"token function\">vc_dispmanx_display_set_background</span><span class=\"token punctuation\">(</span>dispman_update<span class=\"token punctuation\">,</span> dispman_display<span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// finished with display manager update, so sync</span>\n\t<span class=\"token function\">vc_dispmanx_update_submit_sync</span><span class=\"token punctuation\">(</span> dispman_update <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tcurrentWindowRect <span class=\"token operator\">=</span> windowRect<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// X11 BELOW</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">createX11NativeWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle<span class=\"token operator\">&amp;</span> requestedWindowRect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// X11 variables</span>\n\tx11Window <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tx11Display <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tx11ScreenNum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// TODO: settings.screenNum?</span>\n\tx11Screen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tXVisualInfo<span class=\"token operator\">*</span> x11Visual <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// TODO does this need to be deleted?</span>\n\tColormap x11Colormap <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/*\n\tStep 0 - Create a NativeWindowType that we can use it for OpenGL ES output\n\t */</span>\n\tWindow sRootWindow<span class=\"token punctuation\">;</span>\n\tXSetWindowAttributes sWA<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> ui32Mask<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i32Depth<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//ofRectangle screenRect = getScreenRect();</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// make sure our requested window rectangle does not exceed the native</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// screen size, or start outside of it.</span>\n\tofRectangle windowRect <span class=\"token operator\">=</span> requestedWindowRect<span class=\"token punctuation\">.</span><span class=\"token function\">getStandardized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//screenRect.getIntersection(requestedWindowRect);</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Initializes the display and screen</span>\n\tx11Display <span class=\"token operator\">=</span> <span class=\"token function\">XOpenDisplay</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>x11Display<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"unable to open X display\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tx11ScreenNum <span class=\"token operator\">=</span> <span class=\"token function\">XDefaultScreen</span><span class=\"token punctuation\">(</span> x11Display <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tx11Screen <span class=\"token operator\">=</span> <span class=\"token function\">XDefaultScreenOfDisplay</span><span class=\"token punctuation\">(</span>x11Display<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Gets the window parameters</span>\n\tsRootWindow <span class=\"token operator\">=</span> <span class=\"token function\">RootWindow</span><span class=\"token punctuation\">(</span>x11Display<span class=\"token punctuation\">,</span> x11ScreenNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ti32Depth <span class=\"token operator\">=</span> <span class=\"token function\">DefaultDepth</span><span class=\"token punctuation\">(</span>x11Display<span class=\"token punctuation\">,</span> x11ScreenNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tx11Visual <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">XVisualInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">XMatchVisualInfo</span><span class=\"token punctuation\">(</span> x11Display<span class=\"token punctuation\">,</span>\n\t\t\tx11ScreenNum<span class=\"token punctuation\">,</span>\n\t\t\ti32Depth<span class=\"token punctuation\">,</span>\n\t\t\tTrueColor<span class=\"token punctuation\">,</span>\n\t\t\tx11Visual<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>x11Visual<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofAppEGLWindow\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"unable to acquire XVisualInfo\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tx11Colormap <span class=\"token operator\">=</span> <span class=\"token function\">XCreateColormap</span><span class=\"token punctuation\">(</span> x11Display<span class=\"token punctuation\">,</span> sRootWindow<span class=\"token punctuation\">,</span> x11Visual<span class=\"token operator\">-</span><span class=\"token operator\">></span>visual<span class=\"token punctuation\">,</span> AllocNone <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">delete</span> x11Visual<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// set the colormap window attribuet</span>\n\tsWA<span class=\"token punctuation\">.</span>colormap <span class=\"token operator\">=</span> x11Colormap<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Add to these for handling other events</span>\n\tsWA<span class=\"token punctuation\">.</span>event_mask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tsWA<span class=\"token punctuation\">.</span>event_mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> StructureNotifyMask<span class=\"token punctuation\">;</span>\n\tsWA<span class=\"token punctuation\">.</span>event_mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> ExposureMask<span class=\"token punctuation\">;</span>\n\tsWA<span class=\"token punctuation\">.</span>event_mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> ButtonPressMask<span class=\"token punctuation\">;</span>\n\tsWA<span class=\"token punctuation\">.</span>event_mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> ButtonReleaseMask<span class=\"token punctuation\">;</span>\n\tsWA<span class=\"token punctuation\">.</span>event_mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> PointerMotionMask<span class=\"token punctuation\">;</span>\n\tsWA<span class=\"token punctuation\">.</span>event_mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> KeyPressMask<span class=\"token punctuation\">;</span>\n\tsWA<span class=\"token punctuation\">.</span>event_mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> KeyReleaseMask<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// setup background pixel attributes</span>\n\tui32Mask <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tui32Mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> CWBackPixel<span class=\"token punctuation\">;</span>\n\tui32Mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> CWBorderPixel<span class=\"token punctuation\">;</span>\n\tui32Mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> CWEventMask<span class=\"token punctuation\">;</span>\n\tui32Mask <span class=\"token operator\">|</span><span class=\"token operator\">=</span> CWColormap<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Creates the X11 window</span>\n\tx11Window <span class=\"token operator\">=</span> <span class=\"token function\">XCreateWindow</span><span class=\"token punctuation\">(</span>x11Display<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// Specifies the connection to the X server.</span>\n\t\t\tsRootWindow<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// Specifies the parent window.</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>windowRect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>windowRect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// Specify the x and y coordinates,</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// which are the top-left outside corner</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// of the window's borders and are relative</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// to the inside of the parent window's borders.</span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>windowRect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>windowRect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// Specify the width and height, which are the</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// created window's inside dimensions and do</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// not include the created window's borders.</span>\n\t\t\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// Specifies the width of the created</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// window's border in pixels.</span>\n\t\t\tCopyFromParent<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// Specifies the window's depth.</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// A depth of CopyFromParent means</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// the depth is taken from the parent.</span>\n\t\t\tInputOutput<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// Specifies the created window's class.</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// You can pass InputOutput, InputOnly,</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// or CopyFromParent. A class of CopyFromParent</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// means the class is taken from the parent.</span>\n\t\t\tCopyFromParent<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// Specifies the visual type.</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// A visual of CopyFromParent means the visual type</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// is taken from the parent.</span>\n\t\t\tui32Mask<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// Specifies which window attributes are</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// defined in the attributes argument. This mask is</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// the bitwise inclusive OR of the valid attribute</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// mask bits. If valuemask is zero, the attributes</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// are ignored and are not referenced.</span>\n\t\t\t<span class=\"token operator\">&amp;</span>sWA <span class=\"token comment\" spellcheck=\"true\">//Specifies the background pixel value of the window.</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">XMapWindow</span><span class=\"token punctuation\">(</span>x11Display<span class=\"token punctuation\">,</span> x11Window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">XFlush</span><span class=\"token punctuation\">(</span>x11Display<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// check success?</span>\n\tcurrentWindowRect <span class=\"token operator\">=</span> windowRect<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> KeySym <span class=\"token function\">KeyCodeToKeySym</span><span class=\"token punctuation\">(</span>Display <span class=\"token operator\">*</span> display<span class=\"token punctuation\">,</span> KeyCode keycode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> event_mask<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tKeySym keysym <span class=\"token operator\">=</span> NoSymbol<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//Get the map</span>\n\tXkbDescPtr keyboard_map <span class=\"token operator\">=</span> <span class=\"token function\">XkbGetMap</span><span class=\"token punctuation\">(</span>display<span class=\"token punctuation\">,</span> XkbAllClientInfoMask<span class=\"token punctuation\">,</span> XkbUseCoreKbd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyboard_map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//What is diff between XkbKeyGroupInfo and XkbKeyNumGroups?</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> info <span class=\"token operator\">=</span> <span class=\"token function\">XkbKeyGroupInfo</span><span class=\"token punctuation\">(</span>keyboard_map<span class=\"token punctuation\">,</span> keycode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> num_groups <span class=\"token operator\">=</span> <span class=\"token function\">XkbKeyNumGroups</span><span class=\"token punctuation\">(</span>keyboard_map<span class=\"token punctuation\">,</span> keycode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//Get the group</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> group <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token function\">XkbOutOfRangeGroupAction</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> XkbRedirectIntoRange<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* If the RedirectIntoRange flag is set, the four least significant\n\t\t\t * bits of the groups wrap control specify the index of a group to\n\t\t\t * which all illegal groups correspond. If the specified group is\n\t\t\t * also out of range, all illegal groups map to Group1.\n\t\t\t */</span>\n\t\t\tgroup <span class=\"token operator\">=</span> <span class=\"token function\">XkbOutOfRangeGroupInfo</span><span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>group <span class=\"token operator\">>=</span> num_groups<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tgroup <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">case</span> XkbClampIntoRange<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* If the ClampIntoRange flag is set, out-of-range groups correspond\n\t\t\t * to the nearest legal group. Effective groups larger than the\n\t\t\t * highest supported group are mapped to the highest supported group;\n\t\t\t * effective groups less than Group1 are mapped to Group1 . For\n\t\t\t * example, a key with two groups of symbols uses Group2 type and\n\t\t\t * symbols if the global effective group is either Group3 or Group4.\n\t\t\t */</span>\n\t\t\tgroup <span class=\"token operator\">=</span> num_groups <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">case</span> XkbWrapIntoRange<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">/* If neither flag is set, group is wrapped into range using integer\n\t\t\t * modulus. For example, a key with two groups of symbols for which\n\t\t\t * groups wrap uses Group1 symbols if the global effective group is\n\t\t\t * Group3 or Group2 symbols if the global effective group is Group4.\n\t\t\t */</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num_groups <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tgroup <span class=\"token operator\">%</span><span class=\"token operator\">=</span> num_groups<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tXkbKeyTypePtr key_type <span class=\"token operator\">=</span> <span class=\"token function\">XkbKeyKeyType</span><span class=\"token punctuation\">(</span>keyboard_map<span class=\"token punctuation\">,</span> keycode<span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> active_mods <span class=\"token operator\">=</span> event_mask <span class=\"token operator\">&amp;</span> key_type<span class=\"token operator\">-</span><span class=\"token operator\">></span>mods<span class=\"token punctuation\">.</span>mask<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> level <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> key_type<span class=\"token operator\">-</span><span class=\"token operator\">></span>map_count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key_type<span class=\"token operator\">-</span><span class=\"token operator\">></span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>active <span class=\"token operator\">&amp;&amp;</span> key_type<span class=\"token operator\">-</span><span class=\"token operator\">></span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>mods<span class=\"token punctuation\">.</span>mask <span class=\"token operator\">==</span> active_mods<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tlevel <span class=\"token operator\">=</span> key_type<span class=\"token operator\">-</span><span class=\"token operator\">></span>map<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>level<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tkeysym <span class=\"token operator\">=</span> <span class=\"token function\">XkbKeySymEntry</span><span class=\"token punctuation\">(</span>keyboard_map<span class=\"token punctuation\">,</span> keycode<span class=\"token punctuation\">,</span> level<span class=\"token punctuation\">,</span> group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">XkbFreeClientMap</span><span class=\"token punctuation\">(</span>keyboard_map<span class=\"token punctuation\">,</span> XkbAllClientInfoMask<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> keysym<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofAppEGLWindow<span class=\"token operator\">::</span><span class=\"token function\">handleX11Event</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> XEvent<span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofMouseEventArgs mouseEvent<span class=\"token punctuation\">;</span>\n\tofKeyEventArgs keyEvent<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> KeyPress<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">case</span> KeyRelease<span class=\"token operator\">:</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tKeySym key <span class=\"token operator\">=</span> <span class=\"token function\">KeyCodeToKeySym</span><span class=\"token punctuation\">(</span>instance<span class=\"token operator\">-</span><span class=\"token operator\">></span>x11Display<span class=\"token punctuation\">,</span>event<span class=\"token punctuation\">.</span>xkey<span class=\"token punctuation\">.</span>keycode<span class=\"token punctuation\">,</span>event<span class=\"token punctuation\">.</span>xkey<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> KeyPress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tkeyEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofKeyEventArgs<span class=\"token operator\">::</span>Pressed<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key <span class=\"token operator\">==</span> <span class=\"token number\">65307</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tkeyEvent<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> OF_KEY_ESC<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> KeyRelease<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tkeyEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofKeyEventArgs<span class=\"token operator\">::</span>Released<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>coreEvents<span class=\"token punctuation\">.</span><span class=\"token function\">notifyKeyEvent</span><span class=\"token punctuation\">(</span>keyEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ButtonPress<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">case</span> ButtonRelease<span class=\"token operator\">:</span>\n\t\tmouseEvent<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>xbutton<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmouseEvent<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>xbutton<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmouseEvent<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>xbutton<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>type <span class=\"token operator\">==</span> ButtonPress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Pressed<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Released<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>coreEvents<span class=\"token punctuation\">.</span><span class=\"token function\">notifyMouseEvent</span><span class=\"token punctuation\">(</span>mouseEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> MotionNotify<span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//cout &lt;&lt; \"motion notify\" &lt;&lt; endl;</span>\n\t\tmouseEvent<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>xmotion<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmouseEvent<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>xmotion<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmouseEvent<span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>xbutton<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetMousePressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Dragged<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tmouseEvent<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> ofMouseEventArgs<span class=\"token operator\">::</span>Moved<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>coreEvents<span class=\"token punctuation\">.</span><span class=\"token function\">notifyMouseEvent</span><span class=\"token punctuation\">(</span>mouseEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ConfigureNotify<span class=\"token operator\">:</span>\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>currentWindowRect<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>xconfigure<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>currentWindowRect<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>xconfigure<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>currentWindowRect<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>xconfigure<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">;</span>\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>currentWindowRect<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>xconfigure<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">;</span>\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>nonFullscreenWindowRect <span class=\"token operator\">=</span> instance<span class=\"token operator\">-</span><span class=\"token operator\">></span>currentWindowRect<span class=\"token punctuation\">;</span>\n\t\tinstance<span class=\"token operator\">-</span><span class=\"token operator\">></span>coreEvents<span class=\"token punctuation\">.</span><span class=\"token function\">notifyWindowResized</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>xconfigure<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span>event<span class=\"token punctuation\">.</span>xconfigure<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/*case ClientMessage:{\n\t\tif (event.xclient.message_type == wmProtocols_ &amp;&amp;\n\t\tevent.xclient.format == 32 &amp;&amp;\n\t\tevent.xclient.data.l[0] == (long) wmDeleteWindow_)\n\t\t{\n\t\tif (listener())\n\t\t{\n\t\t  if (listener()->onClose(wrapper() ? *wrapper() : *(WindowInterface*)this))\n\t\t\tisShuttingDown_ = true;\n\t\t}\n\t\telse\n\t\t{\n\t\t  isShuttingDown_ = true;\n\t\t}\n\t\t}\n\t\tbreak;\n\t  }*/</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}