{"data":[{"page":{"entry":{"name":"ofEventUtils.h","filename":"ofEventUtils.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/events/ofEventUtils.h","path":"/openframeworks/events/ofEventUtils_h","route":"/openframeworks/events/ofEventUtils.h","dir":"../libs/openFrameworks/events","ext":"h","type":"source","id":234,"parent":230,"breadcrumbs":[230,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofEvent.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// register any method of any class to an event.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the method must provide one of the following</span>\n<span class=\"token comment\" spellcheck=\"true\">/// signatures:</span>\n<span class=\"token comment\" spellcheck=\"true\">///     void method(ArgumentsType &amp; args)</span>\n<span class=\"token comment\" spellcheck=\"true\">///     void method(const void * sender, ArgumentsType &amp;args)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ie:</span>\n<span class=\"token comment\" spellcheck=\"true\">///     ofAddListener(addon.newIntEvent, this, &amp;Class::method)</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// unregister any method of any class to an event.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the method must provide one the following</span>\n<span class=\"token comment\" spellcheck=\"true\">/// signatures:</span>\n<span class=\"token comment\" spellcheck=\"true\">///     void method(ArgumentsType &amp; args)</span>\n<span class=\"token comment\" spellcheck=\"true\">///     void method(const void * sender, ArgumentsType &amp;args)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ie:</span>\n<span class=\"token comment\" spellcheck=\"true\">///     ofAddListener(addon.newIntEvent, this, &amp;Class::method)</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">ListenerClass</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ListenerClass  <span class=\"token operator\">*</span> listener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span>ListenerClass<span class=\"token operator\">::</span><span class=\"token operator\">*</span>listenerMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">,</span> listenerMethod<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ArgumentsType<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>listenerFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> prio<span class=\"token operator\">=</span>OF_EVENT_ORDER_AFTER_APP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>listenerFunction<span class=\"token punctuation\">,</span> prio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// notifies an event so all the registered listeners</span>\n<span class=\"token comment\" spellcheck=\"true\">/// get called</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ie:</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tofNotifyEvent(addon.newIntEvent, intArgument, this)</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// or in case there's no sender:</span>\n<span class=\"token comment\" spellcheck=\"true\">///\tofNotifyEvent(addon.newIntEvent, intArgument)</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// @returns: true in case any listener attended the event</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> SenderType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ArgumentsType <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">,</span> SenderType <span class=\"token operator\">*</span> sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> ArgumentsType <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token punctuation\">,</span> <span class=\"token keyword\">typename</span> SenderType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ArgumentsType <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">,</span> SenderType <span class=\"token operator\">*</span> sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">EventType</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">typename</span> ArgumentsType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EventType <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ArgumentsType <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SenderType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">,</span> SenderType <span class=\"token operator\">*</span> sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>ofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n","type":"source","static":true}}],"fetch":[]}