{"data":[{"page":{"entry":{"name":"ofTimer.h","filename":"ofTimer.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/utils/ofTimer.h","path":"/openframeworks/utils/ofTimer_h","route":"/openframeworks/utils/ofTimer.h","dir":"../libs/openFrameworks/utils","ext":"h","type":"source","id":347,"parent":329,"breadcrumbs":[329,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofTimer</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Constructs the default ofTimer().</span>\n\t<span class=\"token function\">ofTimer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief  Reset the starting instant of the periodic event to now.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets the frequency in \\p nanoseconds that events happen.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The timer will begin calculating the events beginning the moment</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the function is called.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param nanoseconds The number of nanoseconds between events.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setPeriodicEvent</span><span class=\"token punctuation\">(</span>uint64_t nanoseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sleep this thread until the next periodic event.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">waitNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">calculateNextPeriod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span>nanoseconds nanosPerPeriod<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_WIN32)</span>\n\tLARGE_INTEGER nextWakeTime<span class=\"token punctuation\">;</span>\n\tHANDLE hTimer<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\tofTime nextWakeTime<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n","type":"source","static":true}}],"fetch":[]}