{"data":[{"page":{"entry":{"name":"ofFileUtils.h","filename":"ofFileUtils.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/utils/ofFileUtils.h","path":"/openframeworks/utils/ofFileUtils_h","route":"/openframeworks/utils/ofFileUtils.h","dir":"../libs/openFrameworks/utils","ext":"h","type":"source","id":332,"parent":329,"breadcrumbs":[329,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fstream></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> OF_USING_STD_FS</span>\n<span class=\"token macro property\">#\t<span class=\"token directive keyword\">if</span> __cplusplus &lt; 201703L</span>\n<span class=\"token macro property\">#\t\t<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;experimental/filesystem></span></span>\n\t\t<span class=\"token keyword\">namespace</span> std <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">namespace</span> filesystem <span class=\"token operator\">=</span> experimental<span class=\"token operator\">::</span>filesystem<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#\t<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#\t\t<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;filesystem></span></span>\n<span class=\"token macro property\">#\t<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#\t<span class=\"token directive keyword\">if</span> !_MSC_VER</span>\n<span class=\"token macro property\">#\t\t<span class=\"token directive keyword\">define</span> BOOST_NO_CXX11_SCOPED_ENUMS</span>\n<span class=\"token macro property\">#\t\t<span class=\"token directive keyword\">define</span> BOOST_NO_SCOPED_ENUMS</span>\n<span class=\"token macro property\">#\t<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#\t<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;boost/filesystem.hpp></span></span>\n\t<span class=\"token keyword\">namespace</span> std <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">namespace</span> filesystem <span class=\"token operator\">=</span> boost<span class=\"token operator\">::</span>filesystem<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// ofBuffer</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofBuffer</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A buffer of data which can be accessed as simple bytes or text.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBuffer</span><span class=\"token punctuation\">{</span>\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create a buffer and set its contents from a raw byte pointer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param buffer pointer to the raw byte buffer to copy data from</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param size the number of bytes to read</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning buffer *must* not be NULL</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning size *must* be &lt;= the number of bytes allocated in buffer</span>\n    <span class=\"token function\">ofBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create a buffer and set its contents from an input stream.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param ioBlockSize the number of bytes to read from the stream in chunks</span>\n\t<span class=\"token function\">ofBuffer</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream <span class=\"token operator\">&amp;</span> stream<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t ioBlockSize <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Set the contents of the buffer from a raw byte pointer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning buffer *must* not be NULL</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning size *must* be &lt;= the number of bytes allocated in buffer</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param buffer pointer to the raw byte buffer to copy data from</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param size the number of bytes to read</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Set contents of the buffer from a string.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param text string to copy data from</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Set contents of the buffer from an input stream.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param stream input stream to copy data from</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param ioBlockSize the number of bytes to read from the stream in chunks</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream <span class=\"token operator\">&amp;</span> stream<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t ioBlockSize <span class=\"token operator\">=</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Set all bytes in the buffer to a given value.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mem byte value to set</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Append bytes to the end of buffer from a string.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param buffer string to copy bytes from</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Append bytes to the end of the buffer from a raw byte pointer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning buffer *must* not be NULL</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning size *must* be &lt;= the number of bytes allocated in buffer</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param buffer pointer to the raw byte buffer to copy data from</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param size the number of bytes to read</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Request that the buffer capacity be at least enough to contain a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// specified number of bytes.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param size number of bytes to reserve space for</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">reserve</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Write contents of the buffer to an output stream.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">writeTo</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream <span class=\"token operator\">&amp;</span> stream<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Remove all bytes from the buffer, leaving a size of 0.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Request that the buffer capacity be at least enough to contain a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// specified number of bytes.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param size number of bytes to reserve space for</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Resize the buffer to contain a specified number of bytes.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// If size is &lt; the current buffer size, the contents are reduced to size</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// bytes &amp; remaining bytes are removed. If size is > the current buffer</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// size, the buffer's size is increased to size_ bytes.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param size number of bytes to resize the buffer to</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Access the buffer's contents using a raw byte pointer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Do not access bytes at indices beyond size()!</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns pointer to internal raw bytes</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// access the buffer's contents using a const raw byte pointer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Do not access bytes at indices beyond size()!</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns const pointer to internal raw bytes</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getData instead\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">getBinaryBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getData instead\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token function\">getBinaryBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// get the contents of the buffer as a string.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns buffer contents as a string</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use buffer as a string via cast.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns buffer contents as a string</span>\n\t<span class=\"token keyword\">operator</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// set contents of the buffer from a string</span>\n\tofBuffer <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check the buffer's size.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the size of the buffer's content in bytes</span>\n\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"use a lines iterator instead\"</span><span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>string <span class=\"token function\">getNextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"use a lines iterator instead\"</span><span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>string <span class=\"token function\">getFirstLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"use a lines iterator instead\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> <span class=\"token function\">isLastLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"use a lines iterator instead\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token function\">resetLineReader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>ostream <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream <span class=\"token operator\">&amp;</span> ostr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>istream <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream <span class=\"token operator\">&amp;</span> istr<span class=\"token punctuation\">,</span> ofBuffer <span class=\"token operator\">&amp;</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// A line of text in the buffer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token keyword\">struct</span> Line<span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> std<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>forward_iterator_tag<span class=\"token punctuation\">,</span>Line<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator _begin<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator _end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> <span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Increment to the next line.</span>\n\t\tLine<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Increment to a number of lines.</span>\n\t\tLine <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t <span class=\"token comment\" spellcheck=\"true\">/// Is this line empty? (aka an empty string \"\")</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tstd<span class=\"token operator\">::</span>string line<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator _current<span class=\"token punctuation\">,</span> _begin<span class=\"token punctuation\">,</span> _end<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// A line of text in the buffer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token keyword\">struct</span> RLine<span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> std<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>forward_iterator_tag<span class=\"token punctuation\">,</span>Line<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">RLine</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator _begin<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator _end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> <span class=\"token function\">asString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Increment to the next line.</span>\n\t\tRLine<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Increment to a number of lines.</span>\n\t\tRLine <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>RLine <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>RLine <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\t <span class=\"token comment\" spellcheck=\"true\">/// Is this line empty? (aka an empty string \"\")</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tstd<span class=\"token operator\">::</span>string line<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator _current<span class=\"token punctuation\">,</span> _rbegin<span class=\"token punctuation\">,</span> _rend<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// A series of text lines in the buffer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token keyword\">struct</span> Lines<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">Lines</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator begin<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Get the first line in the buffer.</span>\n\t\tLine <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Get the last line in the buffer.</span>\n\t\tLine <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tRLine <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tRLine <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator _begin<span class=\"token punctuation\">,</span> _end<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// A series of text lines in the buffer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token keyword\">struct</span> RLines<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">RLines</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator rbegin<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator rend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Get the first line in the buffer.</span>\n\t\tRLine <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Get the last line in the buffer.</span>\n\t\tRLine <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator _rbegin<span class=\"token punctuation\">,</span> _rend<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Access the contents of the buffer as a series of text lines.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// If the buffer loads a text file with lines separated by an endline</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// char '\\n', you can access each line individually using Line structs.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns buffer text lines</span>\n\tLines <span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Access the contents of the buffer as a series of text lines in reverse</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// order</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// If the buffer loads a text file with lines separated by an endline</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// char '\\n' or '\\r\\n', you can access each line individually using Line structs.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns buffer text lines</span>\n\tRLines <span class=\"token function\">getReverseLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> \tbuffer<span class=\"token punctuation\">;</span>\n\tLine\t\t\tcurrentLine<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Read the contents of a file at path into a buffer.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Opens as a text file by default.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param path file to open</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param binary set to false if you are reading a text file &amp; want lines</span>\n<span class=\"token comment\" spellcheck=\"true\">/// split at endline characters automatically</span>\nofBuffer <span class=\"token function\">ofBufferFromFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Write the contents of a buffer to a file at path.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Saves as a text file by default.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param path file to open</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param buffer data source to write from</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param binary set to false if you are writing a text file &amp; want lines</span>\n<span class=\"token comment\" spellcheck=\"true\">/// split at endline characters automatically</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofBufferToFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofBuffer<span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofFilePath</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Static class for working with file path strings.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofFilePath</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the extension of a filename, ie. \"duck.jpg\" -> \"jpg\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param filename file path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns filename extension only</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getFileExt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Remove extension from a filename, ie. \"duck.jpg\" ->\"duck\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param filename file path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns filename without extension</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">removeExt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Prepend path with a slash, ie. \"images\" -> \"/images\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns slah + path</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">addLeadingSlash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Append path with a slash, ie. \"images\" -> \"images/\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns path + slash</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">addTrailingSlash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Remove a path's trailing slash (if found),</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. \"images/\" -> \"images\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns path minus trailing slash</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">removeTrailingSlash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Cleaned up a directory path by adding a trailing slash if needed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// For Windows-style path strings using \"\\\", a \"\\\" will be added.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// For Unix-style path strings using \"/\", a \"/\" will be added.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns cleaned path + trailing slash (if needed)</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getPathForDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the absolute, full path for a given path,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. \"images\" -> \"/Users/mickey/of/apps/myApps/Donald/bin/data/images\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data folder and want the direct path without relative</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \"../../\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns absolute path</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if a path is an absolute (aka a full path),</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. \"images\" -> false,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \"/Users/mickey/of/apps/myApps/Donald/bin/data/images\" -> true.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the path is an absolute path</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">isAbsolute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the filename of a given path by stripping the parent</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directories ie. \"images/duck.jpg\" -> \"duck.jpg\", assumes the path is in</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the data folder.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param filePath file path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data folder and want the direct path without relative</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \"../../\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns filename</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get a file name without its extension,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. \"images/duck.jpg\" -> \"duck\" and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \"images/some/folder\" -> \"folder\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param filePath file path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns basename</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getBaseName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the enclosing parent directory of a path,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. \"images/duck.jpg\" -> \"images\", assumes the path is in the data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param filePath file path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data folder and want the direct path without relative</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \"../../\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\\returns enclosing directory</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create the enclosing parent directory of a path, ie.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \"images\" is the enclosing directory of \"duck.jpg\" = \"images/duck.jpg\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Assumes the path is in the data folder &amp; automatically creates nested</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directories as required.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRecursive set to false to override automatically nested</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory creation</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data folder and want the direct path without relative</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \"../../\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the enclosing directory was created</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">createEnclosingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRecursive <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the full path to the app's current working directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This may be the app's parent directory or the location the app was</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// launched from (aka on the commandline).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning This location *may* change if you or a library calls the cd()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// std C function.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns current working directory</span>\n\t<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getCurrentWorkingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create a single path by joining path1 &amp; path2 using a slash,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. \"/hello/world\" + \"foo/bar\" -> \"/hello/world/foo/bar\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path1 left half of the path to join</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path2 right half of the path to join</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns joined path</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the full path to the application's executable file.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Mac: the binary within the application's .app bundle Contents/MacOS dir</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Windows: the .exe</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Linux: the binary file itself</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns current executable path</span>\n\t<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getCurrentExePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the full path to the application's parent directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Windows &amp; Linux: the application's parent directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Mac: the Contents/MacOS folder within the application's .app bundle</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns current executable directory</span>\n\t<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getCurrentExeDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the absolute path to the user's home directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Mac OSX: /Users/&lt;username></span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Windows: &lt;root>\\Users\\&lt;username></span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Linux: /home/&lt;username></span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns home directory path</span>\n\t<span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getUserHomeDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Make one path relative to another,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. the relative path of \"images/felines/lions\" to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \"images/felines/tigers\" is \"../tigers\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param from starting path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param to destination path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns relative path</span>\n    <span class=\"token keyword\">static</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">makeRelative</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofFile</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// path to a file or directory</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// inherits from an fstream so you can read/write using the stream operators</span>\n<span class=\"token comment\" spellcheck=\"true\">/// once a file path has been opened</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofFile</span><span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> std<span class=\"token operator\">::</span>fstream<span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// file access mode</span>\n\t<span class=\"token keyword\">enum</span> Mode<span class=\"token punctuation\">{</span>\n\t\tReference<span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">//&lt;</span>\n\t\tReadOnly<span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">//&lt; read only from the file, do not write</span>\n\t\tWriteOnly<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//&lt; write only to the file, do not read</span>\n\t\tReadWrite<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//&lt; read from and write to the file</span>\n\t\tAppend     <span class=\"token comment\" spellcheck=\"true\">//&lt; append data to the end of the file, do not overwrite</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create an ofFile instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Does not refer to a specific file until you either open a file or create</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// a file or directory path.</span>\n\t<span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create a new ofFile instance and attempt to open the path as a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// file.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Opens as a binary file with read only access by default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path file path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mode file access mode depending on how you plan to use the file</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (read only, read write, etc)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param binary set to false if you are working with a text file &amp; want</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// lines split at endline characters automatically</span>\n\t<span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> Mode mode<span class=\"token operator\">=</span>ReadOnly<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create a new file path using the same path &amp; settings of another</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// file.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mom ofFile instance source</span>\n\t<span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Copy the path and settings of an ofFile into this instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mom ofFile instance source</span>\n\tofFile <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token operator\">~</span><span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Open the path as a file.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Opens as a text file with read only access by default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path file path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mode file access mode depending on how you plan to use the file</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (read only, read write, etc)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param binary set to false if you are reading a text file &amp; want lines</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// split at endline characters automatically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the path was opened</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> Mode mode<span class=\"token operator\">=</span>ReadOnly<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Open the path as a file.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Opens as a text file with read only access by default from the current working directory without internally calling ofToDataPath.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path file path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mode file access mode depending on how you plan to use the file</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (read only, read write, etc)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param binary set to false if you are reading a text file &amp; want lines</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// split at endline characters automatically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the path was opened</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> Mode mode<span class=\"token operator\">=</span>ReadOnly<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Reopen the current file path with a different access mode.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mode file access mode depending on how you plan to use the file</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (read only, read write, etc)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param binary set to false if you are reading a text file &amp; want lines</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// split at endline characters automatically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the file was reopened with the new access mode(s).</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">changeMode</span><span class=\"token punctuation\">(</span>Mode mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Close a currently open file.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create a file at the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Creates as a write only binary file by default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the file was created</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create a file at a given path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Creates as a write only binary file by default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path file path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the file was created</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if a file exists at the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the file exists</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns current path</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the current path without its extension,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. \"duck.jpg\" ->\"duck\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns current path file extension</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getExtension</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the filename of the current path by stripping the parent</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directories, ie. \"images/duck.jpg\"  -> \"duck.jpg\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns current path filename</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\biref Get the current path without its last component,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. \"images/duck.jpg\" -> \"images\" and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \"images/some/folder\" -> \"images/some\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns current path basename</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getBaseName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the enclosing parent directory of a path,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. \"images/duck.jpg\" -> \"images\", assumes the path is in the data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns current path's enclosing directory</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\biref Get the absolute, full path of the file,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. \"images\" -> \"/Users/mickey/of/apps/myApps/Donald/bin/data/images\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns current path as an absolute path</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is readable.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if readable</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">canRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is writable.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if writable</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">canWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is executable.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if executable</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">canExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is a file and not a directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if a file</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is a system link to another file or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if a system link</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is a directory and not a file.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if a directory</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is a device file.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Works on Mac &amp; Linux which can represent devices as files, however</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// always returns false on Windows.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if a device file</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isDevice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is hidden.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Works on Mac &amp; Linux which denote hidden files by prepending a period</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to the filename -> \".hello\", however always returns false on Windows.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if hidden</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Set the writable flag of the current path.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setWriteable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> writeable<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use ofFile::setWriteable(!flag).\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Set the readable flag of the current path.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setReadable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> readable<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Set the executable flag of the current path.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setExecutable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> executable<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Copy the current file or directory path to a new path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Copies relative to the data path &amp; does *not* overwrite by default</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// does not change the current path &amp; assumes the new path is in the data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// folder.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path destination file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data folder</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param overwrite set to true if you want to overwrite the file or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory at the new path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the copy was successful</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Move the current file or directory path to a new path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Moves relative to the data path &amp; does *not* overwrite by default</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// does not change the current path &amp; assumes the new path is in the data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// folder.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path destination file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data folder</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param overwrite set to true if you want to overwrite the file or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory at the new path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the copy was successful</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Rename the current file or directory path to a new path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Renames relative to the data path &amp; does *not* overwrite by default</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// does not change the current path &amp; assumes the new path is in the data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// folder.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path destination file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data folder</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param overwrite set to true if you want to overwrite the file or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory at the new path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the copy was successful</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">renameTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Removes the file or directory at the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Does not remove non-empty directories by default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Be careful! This deletes a file or folder. :)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param recursive set to true to remove a non-empty directory and its</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// contents</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the path was removed successfully</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> recursive<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// get the size of the file at the current file path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns size in bytes</span>\n\tuint64_t <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// this allows to compare files by their paths, also provides sorting</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// and use as key in stl containers</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> file<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// stream operations</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//------------------</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// since this class inherits from fstream it can be used as a r/w stream:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// http://www.cplusplus.com/reference/iostream/fstream/</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Read the contents of a file at the current path into a buffer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns buffer with file contents</span>\n\tofBuffer <span class=\"token function\">readToBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Write the contents of a buffer into a file at the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param buffer source byte buffer</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if buffer's contents written successfully</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">writeFromBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Read the entire contents of the currently opened file into an</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// output stream.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is basically an easy to use equivalent to rdbuf():</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. ofLogNotice() &lt;&lt; file.getFileBuffer();</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     write_file &lt;&lt; file.getFileBuffer();</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return output stream</span>\n\tstd<span class=\"token operator\">::</span>filebuf <span class=\"token operator\">*</span> <span class=\"token function\">getFileBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">operator</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> myFile<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> myFile<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//-------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//static helpers</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//-------</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Copy source path to destination path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Copies relative to the data path &amp; does *not* overwrite by default</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// assumes the source &amp; destination path is in the data directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pathSrc source file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pathDst destination file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param overwrite set to true if you want to overwrite the file or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory at the new path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the copy was successful</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">copyFromTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> pathSrc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> pathDst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">bool</span> overwrite <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Move source path to destination path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Moves relative to the data path &amp; does *not* overwrite by default</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// assumes the source &amp; destination path is in the data directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pathSrc source file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pathDst destination file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data folder</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param overwrite set to true if you want to overwrite the file or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory at the new path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning be careful with slashes here, appending a slash when moving a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// folder may cause mad headaches in OSX</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the move was successful</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">moveFromTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> pathSrc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> pathDst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if a file or directory exists at a given path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param fPath file path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data folder and want the direct path without relative</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \"../../\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if a file or directory exists</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">doesFileExist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> fPath<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Remove a file or directory at a given path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data folder and want the direct path without relative</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \"../../\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the path was removed successfully</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">removeFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isWriteMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">openStream</span><span class=\"token punctuation\">(</span>Mode _mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFile <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path myFile<span class=\"token punctuation\">;</span>\n\tMode mode<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> binary<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofDirectory</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Path to a directory. Can be used to query file and directory</span>\n<span class=\"token comment\" spellcheck=\"true\">/// contents.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofDirectory</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create an ofDirectory instance</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Does not refer to a specific directory until you either open or create</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// a directory path.</span>\n\t<span class=\"token function\">ofDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create an ofDirectory instance and attempt to open the path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path directory path</span>\n\t<span class=\"token function\">ofDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Open a directory path, clears the current file list.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path directory path</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Open a directory path relative to the current working directory without calling ofToDataPath internally, clears the current file list.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path directory path</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">openFromCWD</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Close the currently open path.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create a directory at the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRecursive set to true to automatically create nested directories</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// as required</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> recursive <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if a directory exists at the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if exists</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns current path</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the absolute, full path of the directory,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ie. \"images\" -> \"/Users/mickey/of/apps/myApps/Donald/bin/data/images\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return current path as an absolute path</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is readable.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if readable</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">canRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is writeable.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if writable</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">canWrite</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is executable.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if executable</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">canExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is indeed a directory and not a file.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if a directory</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if the current path is hidden.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Works on Mac &amp; Linux which denote hidden directories by prepending</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// a period -> \".hello\", however always returns false on Windows.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if hidden</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Set the writable flag of the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param writable set to true to make path writable</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setWriteable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> writeable<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use ofDirectory::setWriteable(!flag).\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Set the readable flag of the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param readable set to true to make path readable</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setReadable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> readable<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Set the executable flag of the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param executable set to true to make path executable</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setExecutable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> executable<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Show hidden files &amp; directories when listing files?</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Mac &amp; Linux denote hidden directories by prepending a period</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// -> \".hello\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param showHidden set to true to show hidden files</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setShowHidden</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> showHidden<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Copy the current file or directory path to a new path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Copies relative to the data path &amp; does *not* overwrite by default</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// does not change the current path &amp; assumes the new path is in the data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path destination file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param overwrite set to true if you want to overwrite the file or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory at the new path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the copy was successful</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Move the current file or directory path to a new path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Moves relative to the data path &amp; does *not* overwrite by default</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// does not change the current path &amp; assumes the new path is in the data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path destination file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param overwrite set to true if you want to overwrite the file or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory at the new path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the copy was successful</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Rename the current file or directory path to a new path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Renames relative to the data path &amp; does *not* overwrite by default</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// does not change the current path &amp; assumes the new path is in the data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path destination file or directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data folder</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param overwrite set to true if you want to overwrite the file or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory at the new path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the copy was successful</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">renameTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Removes the file or directory at the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Does not remove non-empty directories by default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Be careful! This deletes a file or folder. :)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param recursive set to true to remove a non-empty directory and its</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// contents</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the path was removed successfully</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> recursive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//-------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// dirList operations</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//-------------------</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Allow a file extension when listing the contents the current</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Setting an allowed extension enables a whitelist mode which only lists</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// extensions which have been explicitly allowed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param extension file type extension ie. \"jpg\", \"png\", \"txt\", etc</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">allowExt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> extension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Open and read the contents of a directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Uses allowed extension whitelist to ignore unwanted file types if</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// allowExt() has been called.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param path directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns number of paths found</span>\n\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Open and read the contents of the current directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Uses allowed extension whitelist to ignore unwanted file types if</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// allowExt() has been called.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns number of paths found</span>\n\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the current path</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getOriginalDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the filename at a given position in the directory contents</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// list, ie. \"duck.jpg\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Call listDir() before using this function or the directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// contents list will be empty.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\throws Throws an out of bounds exception if position >= the number of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// listed directory contents.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param position array index in the directory contents list</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns file or directory name</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t position<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the full path of the file or directory at a given position in</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the directory contents list.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Call listDir() before using this function or the directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// contents list will be empty.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\throws Throws an out of bounds exception if position >= the number of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// listed directory contents.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param position array index in the directory contents list</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns file or directory name including the current path</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t position<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Open an ofFile instance using the path a given position in the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directory contents list.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Opens as a binary file with readonly access by default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Call listDir() before using this function or the directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// contents list will be empty.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\throw Throws an out of bounds exception if position >= the number of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// listed directory contents.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param position array index in the directory contents list</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mode file access mode depending on how you plan to use the file</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (read only, read write, etc)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param binary set to false if you are working with a text file &amp; want</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// lines split at endline characters automatically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns ofFile instance</span>\n\tofFile <span class=\"token function\">getFile</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t position<span class=\"token punctuation\">,</span> ofFile<span class=\"token operator\">::</span>Mode mode<span class=\"token operator\">=</span>ofFile<span class=\"token operator\">::</span>Reference<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get files and directories in the directory contents list.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Directory contents are automatically listed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns vector of files in the directory</span>\n\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofFile<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Access directory contents via th array operator.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Call listDir() before using this function or the directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// contents list will be empty.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\throw Throws an out of bounds exception if position >= the number of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// listed directory contents.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param position array index in the directory contents list</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns opened ofFile instance</span>\n\tofFile <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t position<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check whether hidden files &amp; directories are included when</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// listing files.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Mac &amp; Linux denote hidden directories by prepending a period</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// -> \".hello\".</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if hidden files are shown</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getShowHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Closes the directory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is for backwards compatibility with ofxDirList.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Sort the directory contents list alphabetically.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Call listDir() before using this function or there will be</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// nothing to sort.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Sort the directory contents list by date.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Call listDir() before using this function or there will be</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// nothing to sort.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sortByDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get a sorted ofDirectory instance using the current path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns sorted ofDirectory instance</span>\n\tofDirectory <span class=\"token function\">getSorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Get the number of paths in the current directory list.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Call listDir() before using this function or it will return 0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// since the directory list will be empty.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns number of paths</span>\n\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use size() instead.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token function\">numFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// this allows to compare directories by their paths, also provides sorting</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// and use as key in stl containers</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span> dir<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">operator</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> myDir<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">operator</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span><span class=\"token function\">path</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> myDir<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//-------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// static helpers</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//-------</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create a directory at a given path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Creates relative to the data path by default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param dirPath directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRecursive set to true to automatically create nested directories</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// as required</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if directory was created successfully</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">createDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> dirPath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> recursive <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if a directory at a given path is empty.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Assumes directory path is relative to the data path by default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param dirPath directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the directory is empty aka contains no files or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// directories</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">isDirectoryEmpty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> dirPath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check if a directory exists at a given path.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Assumes directory path is relative to the data path by default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param dirPath directory path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the directory exists</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">doesDirectoryExist</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> dirPath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// remove a directory at a given path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param deleteIfNotEmpty set to true if you want to recursively delete</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the directory *and* its contents</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bRelativeToData set to false if you are working with paths that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are *not* in the data directory</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the path was removed successfully</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">removeDirectory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> deleteIfNotEmpty<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">bool</span> bRelativeToData <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofFile<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofFile<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofFile<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofFile<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path myDir<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string originalDirectory<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> extensions<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span>ofFile<span class=\"token operator\">></span> files<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> showHidden<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source","static":true}}],"fetch":[]}