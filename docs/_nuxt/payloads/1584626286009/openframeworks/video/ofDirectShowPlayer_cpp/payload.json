{"data":[{"page":{"entry":{"name":"ofDirectShowPlayer.cpp","filename":"ofDirectShowPlayer.cpp","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/video/ofDirectShowPlayer.cpp","path":"/openframeworks/video/ofDirectShowPlayer_cpp","route":"/openframeworks/video/ofDirectShowPlayer.cpp","dir":"../libs/openFrameworks/video","ext":"cpp","type":"source","id":360,"parent":354,"breadcrumbs":[354,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofDirectShowPlayer.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofPixels.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMath.h\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// DirectShow includes and helper methods </span>\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;dshow.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> include_alias( \"dxtrans.h\", \"qedit.h\" )</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __IDxtCompositor_INTERFACE_DEFINED__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __IDxtAlphaSetter_INTERFACE_DEFINED__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __IDxtJpeg_INTERFACE_DEFINED__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> __IDxtKey_INTERFACE_DEFINED__</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;aviriff.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//for threading</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;process.h></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Due to a missing qedit.h in recent Platform SDKs, we've replicated the relevant contents here</span>\n<span class=\"token comment\" spellcheck=\"true\">// #include &lt;qedit.h></span>\n<span class=\"token function\">MIDL_INTERFACE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0579154A-2B53-4994-B0D0-E773148EFF85\"</span><span class=\"token punctuation\">)</span>\nISampleGrabberCB <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> IUnknown\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> HRESULT STDMETHODCALLTYPE <span class=\"token function\">SampleCB</span><span class=\"token punctuation\">(</span> \n        <span class=\"token keyword\">double</span> SampleTime<span class=\"token punctuation\">,</span>\n        IMediaSample <span class=\"token operator\">*</span>pSample<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> HRESULT STDMETHODCALLTYPE <span class=\"token function\">BufferCB</span><span class=\"token punctuation\">(</span> \n        <span class=\"token keyword\">double</span> SampleTime<span class=\"token punctuation\">,</span>\n        BYTE <span class=\"token operator\">*</span>pBuffer<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">long</span> BufferLen<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">MIDL_INTERFACE</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6B652FFF-11FE-4fce-92AD-0266B5D7C78F\"</span><span class=\"token punctuation\">)</span>\nISampleGrabber <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> IUnknown\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> HRESULT STDMETHODCALLTYPE <span class=\"token function\">SetOneShot</span><span class=\"token punctuation\">(</span> \n        BOOL OneShot<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> HRESULT STDMETHODCALLTYPE <span class=\"token function\">SetMediaType</span><span class=\"token punctuation\">(</span> \n        <span class=\"token keyword\">const</span> AM_MEDIA_TYPE <span class=\"token operator\">*</span>pType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> HRESULT STDMETHODCALLTYPE <span class=\"token function\">GetConnectedMediaType</span><span class=\"token punctuation\">(</span> \n        AM_MEDIA_TYPE <span class=\"token operator\">*</span>pType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> HRESULT STDMETHODCALLTYPE <span class=\"token function\">SetBufferSamples</span><span class=\"token punctuation\">(</span> \n        BOOL BufferThem<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> HRESULT STDMETHODCALLTYPE <span class=\"token function\">GetCurrentBuffer</span><span class=\"token punctuation\">(</span> \n        <span class=\"token comment\" spellcheck=\"true\">/* [out][in] */</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>pBufferSize<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\" spellcheck=\"true\">/* [out] */</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>pBuffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> HRESULT STDMETHODCALLTYPE <span class=\"token function\">GetCurrentSample</span><span class=\"token punctuation\">(</span> \n        <span class=\"token comment\" spellcheck=\"true\">/* [retval][out] */</span> IMediaSample <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppSample<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">virtual</span> HRESULT STDMETHODCALLTYPE <span class=\"token function\">SetCallback</span><span class=\"token punctuation\">(</span> \n        ISampleGrabberCB <span class=\"token operator\">*</span>pCallback<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">long</span> WhichMethodToCallback<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nEXTERN_C <span class=\"token keyword\">const</span> CLSID CLSID_SampleGrabber<span class=\"token punctuation\">;</span>\nEXTERN_C <span class=\"token keyword\">const</span> IID IID_ISampleGrabber<span class=\"token punctuation\">;</span>\nEXTERN_C <span class=\"token keyword\">const</span> CLSID CLSID_NullRenderer<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// GetUnconnectedPin   </span>\n<span class=\"token comment\" spellcheck=\"true\">//    Finds an unconnected pin on a filter in the desired direction   </span>\nHRESULT <span class=\"token function\">GetUnconnectedPin</span><span class=\"token punctuation\">(</span>   \n                          IBaseFilter <span class=\"token operator\">*</span>pFilter<span class=\"token punctuation\">,</span>   <span class=\"token comment\" spellcheck=\"true\">// Pointer to the filter.   </span>\n                          PIN_DIRECTION PinDir<span class=\"token punctuation\">,</span>   <span class=\"token comment\" spellcheck=\"true\">// Direction of the pin to find.   </span>\n                          IPin <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppPin<span class=\"token punctuation\">)</span>           <span class=\"token comment\" spellcheck=\"true\">// Receives a pointer to the pin.   </span>\n<span class=\"token punctuation\">{</span>   \n    <span class=\"token operator\">*</span>ppPin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   \n    IEnumPins <span class=\"token operator\">*</span>pEnum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   \n    IPin <span class=\"token operator\">*</span>pPin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   \n    HRESULT hr <span class=\"token operator\">=</span> pFilter<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">EnumPins</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pEnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">{</span>   \n        <span class=\"token keyword\">return</span> hr<span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>   \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pEnum<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pPin<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> S_OK<span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">{</span>   \n        PIN_DIRECTION ThisPinDir<span class=\"token punctuation\">;</span>   \n        pPin<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">QueryDirection</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ThisPinDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ThisPinDir <span class=\"token operator\">==</span> PinDir<span class=\"token punctuation\">)</span>   \n        <span class=\"token punctuation\">{</span>   \n            IPin <span class=\"token operator\">*</span>pTmp <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   \n            hr <span class=\"token operator\">=</span> pPin<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">ConnectedTo</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pTmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SUCCEEDED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\">// Already connected, not the pin we want.   </span>\n            <span class=\"token punctuation\">{</span>   \n                pTmp<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n            <span class=\"token punctuation\">}</span>   \n            <span class=\"token keyword\">else</span>  <span class=\"token comment\" spellcheck=\"true\">// Unconnected, this is the pin we want.   </span>\n            <span class=\"token punctuation\">{</span>   \n                pEnum<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n                <span class=\"token operator\">*</span>ppPin <span class=\"token operator\">=</span> pPin<span class=\"token punctuation\">;</span>   \n                <span class=\"token keyword\">return</span> S_OK<span class=\"token punctuation\">;</span>   \n            <span class=\"token punctuation\">}</span>   \n        <span class=\"token punctuation\">}</span>   \n        pPin<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>   \n    pEnum<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token comment\" spellcheck=\"true\">// Did not find a matching pin.   </span>\n    <span class=\"token keyword\">return</span> E_FAIL<span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">}</span>   \n \n<span class=\"token comment\" spellcheck=\"true\">// Disconnect any connections to the filter.   </span>\nHRESULT <span class=\"token function\">DisconnectPins</span><span class=\"token punctuation\">(</span>IBaseFilter <span class=\"token operator\">*</span>pFilter<span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">{</span>   \n    IEnumPins <span class=\"token operator\">*</span>pEnum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   \n    IPin <span class=\"token operator\">*</span>pPin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   \n    HRESULT hr <span class=\"token operator\">=</span> pFilter<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">EnumPins</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>pEnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">{</span>   \n        <span class=\"token keyword\">return</span> hr<span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>   \n \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pEnum<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pPin<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> S_OK<span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">{</span>   \n        pPin<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n        pPin<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>   \n    pEnum<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n \n    <span class=\"token comment\" spellcheck=\"true\">// Did not find a matching pin.   </span>\n    <span class=\"token keyword\">return</span> S_OK<span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">}</span>   \n \n<span class=\"token comment\" spellcheck=\"true\">// ConnectFilters   </span>\n<span class=\"token comment\" spellcheck=\"true\">//    Connects a pin of an upstream filter to the pDest downstream filter   </span>\nHRESULT <span class=\"token function\">ConnectFilters</span><span class=\"token punctuation\">(</span>   \n                       IGraphBuilder <span class=\"token operator\">*</span>pGraph<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// Filter Graph Manager.   </span>\n                       IPin <span class=\"token operator\">*</span>pOut<span class=\"token punctuation\">,</span>            <span class=\"token comment\" spellcheck=\"true\">// Output pin on the upstream filter.   </span>\n                       IBaseFilter <span class=\"token operator\">*</span>pDest<span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\">// Downstream filter.   </span>\n<span class=\"token punctuation\">{</span>   \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pGraph <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>pOut <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>pDest <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">{</span>   \n        <span class=\"token keyword\">return</span> E_POINTER<span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>   \n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> debug   </span>\n    PIN_DIRECTION PinDir<span class=\"token punctuation\">;</span>   \n    pOut<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">QueryDirection</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>PinDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token function\">_ASSERTE</span><span class=\"token punctuation\">(</span>PinDir <span class=\"token operator\">==</span> PINDIR_OUTPUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span>   </span>\n \n    <span class=\"token comment\" spellcheck=\"true\">// Find an input pin on the downstream filter.   </span>\n    IPin <span class=\"token operator\">*</span>pIn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   \n    HRESULT hr <span class=\"token operator\">=</span> <span class=\"token function\">GetUnconnectedPin</span><span class=\"token punctuation\">(</span>pDest<span class=\"token punctuation\">,</span> PINDIR_INPUT<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">{</span>   \n        <span class=\"token keyword\">return</span> hr<span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>   \n    <span class=\"token comment\" spellcheck=\"true\">// Try to connect them.   </span>\n    hr <span class=\"token operator\">=</span> pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>pOut<span class=\"token punctuation\">,</span> pIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    pIn<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token keyword\">return</span> hr<span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">}</span>   \n \n \n \n<span class=\"token comment\" spellcheck=\"true\">// ConnectFilters   </span>\n<span class=\"token comment\" spellcheck=\"true\">//    Connects two filters   </span>\nHRESULT <span class=\"token function\">ConnectFilters</span><span class=\"token punctuation\">(</span>   \n                       IGraphBuilder <span class=\"token operator\">*</span>pGraph<span class=\"token punctuation\">,</span>    \n                       IBaseFilter <span class=\"token operator\">*</span>pSrc<span class=\"token punctuation\">,</span>    \n                       IBaseFilter <span class=\"token operator\">*</span>pDest<span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">{</span>   \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pGraph <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>pSrc <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>pDest <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">{</span>   \n        <span class=\"token keyword\">return</span> E_POINTER<span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>   \n \n    <span class=\"token comment\" spellcheck=\"true\">// Find an output pin on the first filter.   </span>\n    IPin <span class=\"token operator\">*</span>pOut <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   \n    HRESULT hr <span class=\"token operator\">=</span> <span class=\"token function\">GetUnconnectedPin</span><span class=\"token punctuation\">(</span>pSrc<span class=\"token punctuation\">,</span> PINDIR_OUTPUT<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    \n    <span class=\"token punctuation\">{</span>   \n        <span class=\"token keyword\">return</span> hr<span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>   \n    hr <span class=\"token operator\">=</span> <span class=\"token function\">ConnectFilters</span><span class=\"token punctuation\">(</span>pGraph<span class=\"token punctuation\">,</span> pOut<span class=\"token punctuation\">,</span> pDest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    pOut<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token keyword\">return</span> hr<span class=\"token punctuation\">;</span>   \n<span class=\"token punctuation\">}</span>   \n \n<span class=\"token comment\" spellcheck=\"true\">// LocalFreeMediaType   </span>\n<span class=\"token comment\" spellcheck=\"true\">//    Free the format buffer in the media type   </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LocalFreeMediaType</span><span class=\"token punctuation\">(</span>AM_MEDIA_TYPE<span class=\"token operator\">&amp;</span> mt<span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">{</span>   \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">.</span>cbFormat <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">{</span>   \n        <span class=\"token function\">CoTaskMemFree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>PVOID<span class=\"token punctuation\">)</span>mt<span class=\"token punctuation\">.</span>pbFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n        mt<span class=\"token punctuation\">.</span>cbFormat <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   \n        mt<span class=\"token punctuation\">.</span>pbFormat <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>   \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mt<span class=\"token punctuation\">.</span>pUnk <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">{</span>   \n        <span class=\"token comment\" spellcheck=\"true\">// Unecessary because pUnk should not be used, but safest.   </span>\n        mt<span class=\"token punctuation\">.</span>pUnk<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n        mt<span class=\"token punctuation\">.</span>pUnk <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>   \n<span class=\"token punctuation\">}</span>   \n \n<span class=\"token comment\" spellcheck=\"true\">// LocalDeleteMediaType   </span>\n<span class=\"token comment\" spellcheck=\"true\">//    Free the format buffer in the media type,    </span>\n<span class=\"token comment\" spellcheck=\"true\">//    then delete the MediaType ptr itself   </span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">LocalDeleteMediaType</span><span class=\"token punctuation\">(</span>AM_MEDIA_TYPE <span class=\"token operator\">*</span>pmt<span class=\"token punctuation\">)</span>   \n<span class=\"token punctuation\">{</span>   \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pmt <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>   \n    <span class=\"token punctuation\">{</span>   \n        <span class=\"token function\">LocalFreeMediaType</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// See FreeMediaType for the implementation.   </span>\n        <span class=\"token function\">CoTaskMemFree</span><span class=\"token punctuation\">(</span>pmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n    <span class=\"token punctuation\">}</span>   \n<span class=\"token punctuation\">}</span>\n\n\nHRESULT <span class=\"token function\">SaveGraphFile</span><span class=\"token punctuation\">(</span>IGraphBuilder <span class=\"token operator\">*</span>pGraph<span class=\"token punctuation\">,</span> WCHAR <span class=\"token operator\">*</span>wszPath<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> WCHAR wszStreamName<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> L<span class=\"token string\">\"ActiveMovieGraph\"</span><span class=\"token punctuation\">;</span> \n    HRESULT hr<span class=\"token punctuation\">;</span>\n    \n    IStorage <span class=\"token operator\">*</span>pStorage <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    hr <span class=\"token operator\">=</span> <span class=\"token function\">StgCreateDocfile</span><span class=\"token punctuation\">(</span>\n        wszPath<span class=\"token punctuation\">,</span>\n        STGM_CREATE <span class=\"token operator\">|</span> STGM_TRANSACTED <span class=\"token operator\">|</span> STGM_READWRITE <span class=\"token operator\">|</span> STGM_SHARE_EXCLUSIVE<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pStorage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> hr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    IStream <span class=\"token operator\">*</span>pStream<span class=\"token punctuation\">;</span>\n    hr <span class=\"token operator\">=</span> pStorage<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">CreateStream</span><span class=\"token punctuation\">(</span>\n        wszStreamName<span class=\"token punctuation\">,</span>\n        STGM_WRITE <span class=\"token operator\">|</span> STGM_CREATE <span class=\"token operator\">|</span> STGM_SHARE_EXCLUSIVE<span class=\"token punctuation\">,</span>\n        <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n        pStorage<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n        <span class=\"token keyword\">return</span> hr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    IPersistStream <span class=\"token operator\">*</span>pPersist <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span>IID_IPersistStream<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>pPersist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    hr <span class=\"token operator\">=</span> pPersist<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Save</span><span class=\"token punctuation\">(</span>pStream<span class=\"token punctuation\">,</span> TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pStream<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pPersist<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SUCCEEDED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n        hr <span class=\"token operator\">=</span> pStorage<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span>STGC_DEFAULT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    pStorage<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> hr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// DirectShowVideo - contains a simple directshow video player implementation</span>\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n\n<span class=\"token keyword\">namespace</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> comRefCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">retainCom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> comRefCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//printf(\"com is initialized!\\n\");</span>\n            <span class=\"token function\">CoInitializeEx</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> COINIT_APARTMENTTHREADED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        comRefCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">releaseCom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        comRefCount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> comRefCount <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//printf(\"com is uninitialized!\\n\");</span>\n            <span class=\"token function\">CoUninitialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">releaseSample</span><span class=\"token punctuation\">(</span>IMediaSample <span class=\"token operator\">*</span> sample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        sample<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DirectShowVideo</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ISampleGrabberCB<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n    <span class=\"token function\">DirectShowVideo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">retainCom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">clearValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">InitializeCriticalSection</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>critSection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token operator\">~</span><span class=\"token function\">DirectShowVideo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tmiddleSample<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbackSample<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">releaseCom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token function\">DeleteCriticalSection</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>critSection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//printf(\"tearDown\\n\"); </span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_pControl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pControl<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_pEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pEvent<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_pSeek<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pSeek<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_pAudio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pAudio<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_pBasicVideo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pBasicVideo<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_pGrabber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pGrabber<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_pGrabberF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pGrabberF<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_pGraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_pNullRenderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pNullRenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> m_pSourceFile <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pSourceFile<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> m_pPosition <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pPosition<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">clearValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">clearValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        hr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n        m_pGraph <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        m_pControl <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> \n        m_pEvent <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> \n        m_pSeek <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> \n        m_pAudio <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> \n        m_pGrabber <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        m_pGrabberF <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        m_pBasicVideo <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        m_pNullRenderer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        m_pSourceFile <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        m_pPosition <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n        timeNow <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n        lPositionInSecs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n        lDurationInNanoSecs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n        lTotalDuration <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n        rtNew <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n        lPosition <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n        lvolume <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        evCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n        width <span class=\"token operator\">=</span> height <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n        bVideoOpened <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    \n        bLoop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        bPaused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        bPlaying <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        bEndReached <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n        bNewPixels <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        bFrameNew <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        curMovieFrame <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n        frameCount <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        movieRate <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span> \n        averageTimePerFrame <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token operator\">/</span><span class=\"token number\">30.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------</span>\n    <span class=\"token function\">STDMETHODIMP_</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span> <span class=\"token function\">AddRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">STDMETHODIMP_</span><span class=\"token punctuation\">(</span>ULONG<span class=\"token punctuation\">)</span> <span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------</span>\n    STDMETHODIMP <span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span>REFIID riid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppvObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">*</span>ppvObject <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ISampleGrabberCB<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> S_OK<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------</span>\n    STDMETHODIMP <span class=\"token function\">SampleCB</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> Time<span class=\"token punctuation\">,</span> IMediaSample <span class=\"token operator\">*</span>pSample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        BYTE <span class=\"token operator\">*</span> ptrBuffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> \n        HRESULT hr <span class=\"token operator\">=</span> pSample<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">GetPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptrBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hr <span class=\"token operator\">==</span> S_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">long</span> latestBufferLength <span class=\"token operator\">=</span> pSample<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">GetActualDataLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>latestBufferLength <span class=\"token operator\">==</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">EnterCriticalSection</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>critSection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tpSample<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">AddRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                backSample <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>IMediaSample<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>IMediaSample<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>pSample<span class=\"token punctuation\">,</span> releaseSample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                bNewPixels <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">//this is just so we know if there is a new frame</span>\n                frameCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token function\">LeaveCriticalSection</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>critSection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ERROR: SampleCB() - buffer sizes do not match %d %d\\n\"</span><span class=\"token punctuation\">,</span> latestBufferLength<span class=\"token punctuation\">,</span> pixels<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> S_OK<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//This method is meant to have more overhead</span>\n    STDMETHODIMP <span class=\"token function\">BufferCB</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> Time<span class=\"token punctuation\">,</span> BYTE <span class=\"token operator\">*</span>pBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> BufferLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> E_NOTIMPL<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">loadMovie</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string path<span class=\"token punctuation\">,</span> ofPixelFormat format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>pixelFormat <span class=\"token operator\">=</span> format<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// Create the Filter Graph Manager and query for interfaces.</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//printf(\"step 1\\n\"); </span>\n        hr <span class=\"token operator\">=</span> <span class=\"token function\">CoCreateInstance</span><span class=\"token punctuation\">(</span>CLSID_FilterGraph<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> CLSCTX_INPROC_SERVER<span class=\"token punctuation\">,</span>IID_IGraphBuilder<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_pGraph<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//printf(\"step 2\\n\"); </span>\n        hr <span class=\"token operator\">=</span> m_pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span>IID_IMediaSeeking<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_pSeek<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        hr <span class=\"token operator\">=</span> m_pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span>IID_IMediaPosition<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>LPVOID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_pPosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        hr <span class=\"token operator\">=</span> m_pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span>IID_IBasicAudio<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_pAudio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// Use IGraphBuilder::QueryInterface (inherited from IUnknown) to get the IMediaControl interface.</span>\n        <span class=\"token comment\" spellcheck=\"true\">//printf(\"step 4\\n\"); </span>\n        hr <span class=\"token operator\">=</span> m_pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span>IID_IMediaControl<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_pControl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>  \n    \n        <span class=\"token comment\" spellcheck=\"true\">// And get the Media Event interface, too.</span>\n        <span class=\"token comment\" spellcheck=\"true\">//printf(\"step 5\\n\"); </span>\n        hr <span class=\"token operator\">=</span> m_pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span>IID_IMediaEvent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_pEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n\n        <span class=\"token comment\" spellcheck=\"true\">//SAMPLE GRABBER (ALLOWS US TO GRAB THE BUFFER)//</span>\n        <span class=\"token comment\" spellcheck=\"true\">// Create the Sample Grabber.</span>\n        hr <span class=\"token operator\">=</span> <span class=\"token function\">CoCreateInstance</span><span class=\"token punctuation\">(</span>CLSID_SampleGrabber<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> CLSCTX_INPROC_SERVER<span class=\"token punctuation\">,</span>IID_IBaseFilter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_pGrabberF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> \n\n        hr <span class=\"token operator\">=</span> m_pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">AddFilter</span><span class=\"token punctuation\">(</span>m_pGrabberF<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Sample Grabber\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        hr <span class=\"token operator\">=</span> m_pGrabberF<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">QueryInterface</span><span class=\"token punctuation\">(</span>IID_ISampleGrabber<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>m_pGrabber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        hr <span class=\"token operator\">=</span> m_pGrabber<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">SetCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//MEDIA CONVERSION</span>\n        <span class=\"token comment\" spellcheck=\"true\">//Get video properties from the stream's mediatype and apply to the grabber (otherwise we don't get an RGB image)</span>\n        AM_MEDIA_TYPE mt<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mt<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>AM_MEDIA_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        mt<span class=\"token punctuation\">.</span>majortype    <span class=\"token operator\">=</span> MEDIATYPE_Video<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_RGB<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_BGR<span class=\"token operator\">:</span>\n\t\t\tmt<span class=\"token punctuation\">.</span>subtype <span class=\"token operator\">=</span> MEDIASUBTYPE_RGB24<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_BGRA<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_RGBA<span class=\"token operator\">:</span>\n\t\t\tmt<span class=\"token punctuation\">.</span>subtype <span class=\"token operator\">=</span> MEDIASUBTYPE_RGB32<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DirectShowPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Trying to set unsupported format this is an internal bug, using default RGB\"</span><span class=\"token punctuation\">;</span>\n\t\t\tmt<span class=\"token punctuation\">.</span>subtype <span class=\"token operator\">=</span> MEDIASUBTYPE_RGB24<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n        mt<span class=\"token punctuation\">.</span>formattype   <span class=\"token operator\">=</span> FORMAT_VideoInfo<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//printf(\"step 5.5\\n\"); </span>\n        hr <span class=\"token operator\">=</span> m_pGrabber<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">SetMediaType</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//printf(\"step 6\\n\"); </span>\n        std<span class=\"token operator\">::</span>wstring filePathW <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">wstring</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//this is the easier way to connect the graph, but we have to remove the video window manually</span>\n        hr <span class=\"token operator\">=</span> m_pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">RenderFile</span><span class=\"token punctuation\">(</span>filePathW<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//this is the more manual way to do it - its a pain though because the audio won't be connected by default</span>\n        <span class=\"token comment\" spellcheck=\"true\">/*hr = m_pGraph->AddSourceFilter(filePathW.c_str(), L\"Source\", &amp;m_pSourceFile); \n        if (FAILED(hr)){\n            printf(\"unable to AddSourceFilter\\n\");\n            tearDown(); \n            return false;\n        }*/</span>\n        <span class=\"token comment\" spellcheck=\"true\">//hr = ConnectFilters(m_pGraph, m_pSourceFile, m_pGrabberF);</span>\n        <span class=\"token comment\" spellcheck=\"true\">//if (FAILED(hr)){</span>\n        <span class=\"token comment\" spellcheck=\"true\">//  printf(\"unable to ConnectFilters(m_pGraph, m_pSourceFile, m_pGrabberF)\\n\");</span>\n        <span class=\"token comment\" spellcheck=\"true\">//  tearDown(); </span>\n        <span class=\"token comment\" spellcheck=\"true\">//  return false;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//printf(\"step 7\\n\"); </span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SUCCEEDED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//Set Params - One Shot should be false unless you want to capture just one buffer</span>\n            hr <span class=\"token operator\">=</span> m_pGrabber<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">SetOneShot</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unable to set one shot\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token comment\" spellcheck=\"true\">//apparently setting to TRUE causes a small memory leak</span>\n            hr <span class=\"token operator\">=</span> m_pGrabber<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">SetBufferSamples</span><span class=\"token punctuation\">(</span>FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unable to set buffer samples\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//NULL RENDERER//</span>\n            <span class=\"token comment\" spellcheck=\"true\">//used to give the video stream somewhere to go to.</span>\n            hr <span class=\"token operator\">=</span> <span class=\"token function\">CoCreateInstance</span><span class=\"token punctuation\">(</span>CLSID_NullRenderer<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> CLSCTX_INPROC_SERVER<span class=\"token punctuation\">,</span> IID_IBaseFilter<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m_pNullRenderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"null renderer error\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>       \n\n            hr <span class=\"token operator\">=</span> m_pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">AddFilter</span><span class=\"token punctuation\">(</span>m_pNullRenderer<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"Render\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unable to add null renderer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            \n            <span class=\"token comment\" spellcheck=\"true\">//hr = ConnectFilters(m_pGraph, m_pGrabberF, m_pNullRenderer);</span>\n            <span class=\"token comment\" spellcheck=\"true\">//if (FAILED(hr)){</span>\n            <span class=\"token comment\" spellcheck=\"true\">//  printf(\"unable to ConnectFilters(m_pGraph, m_pGrabberF, m_pNullRenderer)\\n\");</span>\n            <span class=\"token comment\" spellcheck=\"true\">//  tearDown(); </span>\n            <span class=\"token comment\" spellcheck=\"true\">//  return false;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//}</span>\n    \n            AM_MEDIA_TYPE mt<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mt<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>AM_MEDIA_TYPE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\n            hr <span class=\"token operator\">=</span> m_pGrabber<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">GetConnectedMediaType</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unable to call GetConnectedMediaType\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            VIDEOINFOHEADER <span class=\"token operator\">*</span> infoheader <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>VIDEOINFOHEADER<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>mt<span class=\"token punctuation\">.</span>pbFormat<span class=\"token punctuation\">;</span>\n            width <span class=\"token operator\">=</span> infoheader<span class=\"token operator\">-</span><span class=\"token operator\">></span>bmiHeader<span class=\"token punctuation\">.</span>biWidth<span class=\"token punctuation\">;</span>\n            height <span class=\"token operator\">=</span> infoheader<span class=\"token operator\">-</span><span class=\"token operator\">></span>bmiHeader<span class=\"token punctuation\">.</span>biHeight<span class=\"token punctuation\">;</span>\n            averageTimePerFrame <span class=\"token operator\">=</span> infoheader<span class=\"token operator\">-</span><span class=\"token operator\">></span>AvgTimePerFrame <span class=\"token operator\">/</span> <span class=\"token number\">10000000.0</span><span class=\"token punctuation\">;</span>\n\t\t\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//printf(\"video dimensions are %i %i\\n\", width, height); </span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//we need to manually change the output from the renderer window to the null renderer</span>\n            IBaseFilter <span class=\"token operator\">*</span> m_pVideoRenderer<span class=\"token punctuation\">;</span>\n            IPin<span class=\"token operator\">*</span> pinIn <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            IPin<span class=\"token operator\">*</span> pinOut <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            hr <span class=\"token operator\">=</span> m_pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">FindFilterByName</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Video Renderer\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m_pVideoRenderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to find the video renderer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//we disconnect the video renderer window by finding the output pin of the sample grabber</span>\n            hr <span class=\"token operator\">=</span> m_pGrabberF<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">FindPin</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"Out\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pinOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to find the sample grabber output pin\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            hr <span class=\"token operator\">=</span> pinOut<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to disconnect grabber output pin\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//SaveGraphFile(m_pGraph, L\"test1.grf\");</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//we have to remove it as well otherwise the graph builder will reconnect it</span>\n            hr <span class=\"token operator\">=</span> m_pGraph<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">RemoveFilter</span><span class=\"token punctuation\">(</span>m_pVideoRenderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>            \n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to remove the default renderer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                m_pVideoRenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//now connect the null renderer to the grabber output, if we don't do this not frames will be captured</span>\n            hr <span class=\"token operator\">=</span> m_pNullRenderer<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">FindPin</span><span class=\"token punctuation\">(</span>L<span class=\"token string\">\"In\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pinIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>            \n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to find the input pin of the null renderer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            hr <span class=\"token operator\">=</span> pinOut<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>pinIn<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>            \n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"failed to connect the null renderer\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">//printf(\"step 8\\n\"); </span>\n            <span class=\"token comment\" spellcheck=\"true\">// Run the graph.</span>\n        \n            <span class=\"token comment\" spellcheck=\"true\">//SaveGraphFile(m_pGraph, L\"test2.grf\");</span>\n            hr <span class=\"token operator\">=</span> m_pControl<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token comment\" spellcheck=\"true\">//SaveGraphFile(m_pGraph, L\"test3.grf\");</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// Now pause the graph.</span>\n            hr <span class=\"token operator\">=</span> m_pControl<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">updatePlayState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">FAILED</span><span class=\"token punctuation\">(</span>hr<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> width <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> height <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error occured while playing or pausing or opening the file\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">tearDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error occured while playing or pausing or opening the file\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n\n        bVideoOpened <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">long</span> eventCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> _WIN64</span>\n            <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ptrParam1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> ptrParam2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n            <span class=\"token keyword\">long</span> ptrParam1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">long</span> ptrParam2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n            <span class=\"token keyword\">long</span> timeoutMs <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> curMovieFrame <span class=\"token operator\">!=</span> frameCount <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                bFrameNew <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                bFrameNew <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n            curMovieFrame <span class=\"token operator\">=</span> frameCount<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>S_OK <span class=\"token operator\">==</span> m_pEvent<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">GetEvent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>eventCode<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptrParam1<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptrParam2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eventCode <span class=\"token operator\">==</span> EC_COMPLETE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                        <span class=\"token comment\" spellcheck=\"true\">//printf(\"Restarting!\\n\");</span>\n                        <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                        bEndReached <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> \n                        <span class=\"token comment\" spellcheck=\"true\">//printf(\"movie end reached!\\n\");</span>\n                        <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">updatePlayState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\" spellcheck=\"true\">//printf(\"Event code: %#04x\\n Params: %d, %d\\n\", eventCode, ptrParam1, ptrParam2);</span>\n                m_pEvent<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">FreeEventParams</span><span class=\"token punctuation\">(</span>eventCode<span class=\"token punctuation\">,</span> ptrParam1<span class=\"token punctuation\">,</span> ptrParam2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> bVideoOpened<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//volume has to be log corrected/converted</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setVolume</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> volPct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>   \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> volPct <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> volPct <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> volPct <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> volPct <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span> \n\n            <span class=\"token keyword\">long</span> vol <span class=\"token operator\">=</span> <span class=\"token function\">log10</span><span class=\"token punctuation\">(</span>volPct<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">4000.0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vol <span class=\"token operator\">&lt;</span> <span class=\"token operator\">-</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                vol <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            m_pAudio<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">put_Volume</span><span class=\"token punctuation\">(</span>vol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">float</span> volPct <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">long</span> vol <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            m_pAudio<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get_Volume</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>vol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            volPct <span class=\"token operator\">=</span> <span class=\"token function\">powf</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>vol<span class=\"token operator\">/</span><span class=\"token number\">4000.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> volPct<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getDurationInSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> lDurationInNanoSecs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            m_pSeek<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">GetDuration</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lDurationInNanoSecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> timeInSeconds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>lDurationInNanoSecs<span class=\"token operator\">/</span><span class=\"token number\">10000000.0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> timeInSeconds<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getCurrentTimeInSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> lCurrentTimeInNanoSecs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            m_pSeek<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">GetCurrentPosition</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lCurrentTimeInNanoSecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">double</span> timeInSeconds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>lCurrentTimeInNanoSecs<span class=\"token operator\">/</span><span class=\"token number\">10000000.0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> timeInSeconds<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pct <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.0</span> <span class=\"token punctuation\">)</span> pct <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pct <span class=\"token operator\">></span> <span class=\"token number\">1.0</span> <span class=\"token punctuation\">)</span> pct <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span> \n            \n            <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> lDurationInNanoSecs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            m_pSeek<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">GetDuration</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lDurationInNanoSecs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            rtNew <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>lDurationInNanoSecs <span class=\"token operator\">*</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             \n            hr <span class=\"token operator\">=</span> m_pSeek<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">SetPositions</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rtNew<span class=\"token punctuation\">,</span> AM_SEEKING_AbsolutePositioning<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>AM_SEEKING_NoPositioning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">float</span> timeDur <span class=\"token operator\">=</span> <span class=\"token function\">getDurationInSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> timeDur <span class=\"token operator\">></span> <span class=\"token number\">0.0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">getCurrentTimeInSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> timeDur<span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setSpeed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pPosition<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">put_Rate</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            m_pPosition<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get_Rate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>movieRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">double</span> <span class=\"token function\">getSpeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> movieRate<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">needsRBSwap</span><span class=\"token punctuation\">(</span>ofPixelFormat srcFormat<span class=\"token punctuation\">,</span> ofPixelFormat dstFormat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span>\n\t\t\t<span class=\"token punctuation\">(</span>srcFormat <span class=\"token operator\">==</span> OF_PIXELS_BGR <span class=\"token operator\">||</span> srcFormat <span class=\"token operator\">==</span> OF_PIXELS_BGRA<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>dstFormat <span class=\"token operator\">==</span> OF_PIXELS_RGB <span class=\"token operator\">||</span> dstFormat <span class=\"token operator\">==</span> OF_PIXELS_RGBA<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\t\t\t<span class=\"token punctuation\">(</span>srcFormat <span class=\"token operator\">==</span> OF_PIXELS_RGB <span class=\"token operator\">||</span> srcFormat <span class=\"token operator\">==</span> OF_PIXELS_RGBA<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>dstFormat <span class=\"token operator\">==</span> OF_PIXELS_BGR <span class=\"token operator\">||</span> dstFormat <span class=\"token operator\">==</span> OF_PIXELS_BGRA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">processPixels</span><span class=\"token punctuation\">(</span>ofPixels <span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> ofPixels <span class=\"token operator\">&amp;</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> format <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">needsRBSwap</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OF_PIXELS_BGR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tdst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> OF_PIXELS_RGB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">auto</span> dstLine <span class=\"token operator\">=</span> dst<span class=\"token punctuation\">.</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">auto</span> srcLine <span class=\"token operator\">=</span> <span class=\"token operator\">--</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">auto</span> endLine <span class=\"token operator\">=</span> dst<span class=\"token punctuation\">.</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> dstLine <span class=\"token operator\">!=</span> endLine<span class=\"token punctuation\">;</span> dstLine<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> srcLine<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">auto</span> dstPixel <span class=\"token operator\">=</span> dstLine<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">auto</span> srcPixel <span class=\"token operator\">=</span> srcLine<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">auto</span> endPixel <span class=\"token operator\">=</span> dstLine<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> dstPixel <span class=\"token operator\">!=</span> endPixel<span class=\"token punctuation\">;</span> dstPixel<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> srcPixel<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tdstPixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> srcPixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tdstPixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> srcPixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tdstPixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> srcPixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OF_PIXELS_BGRA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tdst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> OF_PIXELS_RGBA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">auto</span> dstLine <span class=\"token operator\">=</span> dst<span class=\"token punctuation\">.</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">auto</span> srcLine <span class=\"token operator\">=</span> <span class=\"token operator\">--</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">auto</span> endLine <span class=\"token operator\">=</span> dst<span class=\"token punctuation\">.</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> dstLine <span class=\"token operator\">!=</span> endLine<span class=\"token punctuation\">;</span> dstLine<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> srcLine<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">auto</span> dstPixel <span class=\"token operator\">=</span> dstLine<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">auto</span> srcPixel <span class=\"token operator\">=</span> srcLine<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">auto</span> endPixel <span class=\"token operator\">=</span> dstLine<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> dstPixel <span class=\"token operator\">!=</span> endPixel<span class=\"token punctuation\">;</span> dstPixel<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> srcPixel<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tdstPixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> srcPixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tdstPixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> srcPixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tdstPixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> srcPixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tsrc<span class=\"token punctuation\">.</span><span class=\"token function\">mirrorTo</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            m_pControl<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            bEndReached <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">updatePlayState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isPlaying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n            m_pControl<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">updatePlayState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setPaused</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bPaused<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bPaused <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                m_pControl<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Pause</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                m_pControl<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">updatePlayState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">updatePlayState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            FILTER_STATE fs<span class=\"token punctuation\">;</span>\n            hr <span class=\"token operator\">=</span> m_pControl<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">GetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">4000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>OAFilterState<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>fs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hr<span class=\"token operator\">==</span>S_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> fs <span class=\"token operator\">==</span> State_Running <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    bPlaying <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> \n                    bPaused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> fs <span class=\"token operator\">==</span> State_Paused <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    bPlaying <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    bPaused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> fs <span class=\"token operator\">==</span> State_Stopped <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    bPlaying <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                    bPaused <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isPlaying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> bPlaying<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> bPaused<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isLooping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> bLoop<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setLoop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> loop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        bLoop <span class=\"token operator\">=</span> loop<span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isMovieDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> bEndReached<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> height<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isFrameNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> bFrameNew<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">nextFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//we have to do it like this as the frame based approach is not very accurate</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">isPlaying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> curFrame <span class=\"token operator\">=</span> <span class=\"token function\">getCurrentFrameNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> curFrameF <span class=\"token operator\">=</span> curFrame<span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">setAproximateFrameF</span><span class=\"token punctuation\">(</span> curFrameF <span class=\"token operator\">+</span> <span class=\"token number\">0.3</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">getCurrentFrameNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> curFrame <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">preFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">//we have to do it like this as the frame based approach is not very accurate</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">isPlaying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">isPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> curFrame <span class=\"token operator\">=</span> <span class=\"token function\">getCurrentFrameNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> curFrameF <span class=\"token operator\">=</span> curFrame<span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">setAproximateFrameF</span><span class=\"token punctuation\">(</span> curFrameF <span class=\"token operator\">-</span> <span class=\"token number\">0.3</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">getCurrentFrameNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> curFrame <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setAproximateFrameF</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> frameF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">float</span> pct <span class=\"token operator\">=</span> frameF <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">getAproximateNoFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pct <span class=\"token operator\">></span> <span class=\"token number\">1.0</span> <span class=\"token punctuation\">)</span> pct <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pct <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.0</span> <span class=\"token punctuation\">)</span> pct <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setAproximateFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">float</span> pct <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>frame <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">getAproximateNoFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pct <span class=\"token operator\">></span> <span class=\"token number\">1.0</span> <span class=\"token punctuation\">)</span> pct <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> pct <span class=\"token operator\">&lt;</span> <span class=\"token number\">0.0</span> <span class=\"token punctuation\">)</span> pct <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> \n            <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getCurrentFrameNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token function\">getAproximateNoFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getAproximateNoFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> bVideoOpened <span class=\"token operator\">&amp;&amp;</span> averageTimePerFrame <span class=\"token operator\">></span> <span class=\"token number\">0.0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getDurationInSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> averageTimePerFrame<span class=\"token punctuation\">;</span> \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    ofPixels <span class=\"token operator\">&amp;</span> <span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bVideoOpened <span class=\"token operator\">&amp;&amp;</span> bNewPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">EnterCriticalSection</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>critSection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstd<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>backSample<span class=\"token punctuation\">,</span> middleSample<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tbNewPixels <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">LeaveCriticalSection</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>critSection<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tBYTE <span class=\"token operator\">*</span> ptrBuffer <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t\tHRESULT hr <span class=\"token operator\">=</span> middleSample<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">GetPointer</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptrBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tofPixels srcBuffer<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> OF_PIXELS_RGB<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">case</span> OF_PIXELS_BGR<span class=\"token operator\">:</span>\n\t\t\t\tsrcBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setFromExternalPixels</span><span class=\"token punctuation\">(</span>ptrBuffer<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> OF_PIXELS_BGR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OF_PIXELS_RGBA<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">case</span> OF_PIXELS_BGRA<span class=\"token operator\">:</span>\n\t\t\t\tsrcBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">setFromExternalPixels</span><span class=\"token punctuation\">(</span>ptrBuffer<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> OF_PIXELS_BGRA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n            <span class=\"token function\">processPixels</span><span class=\"token punctuation\">(</span>srcBuffer<span class=\"token punctuation\">,</span> pixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//this is the non-callback approach</span>\n    <span class=\"token comment\" spellcheck=\"true\">//void getPixels(unsigned char * dstBuffer){</span>\n    <span class=\"token comment\" spellcheck=\"true\">//      </span>\n    <span class=\"token comment\" spellcheck=\"true\">//  if(bVideoOpened &amp;&amp; isFrameNew()){</span>\n    <span class=\"token comment\" spellcheck=\"true\">//      long bufferSize = videoSize; </span>\n    <span class=\"token comment\" spellcheck=\"true\">//      HRESULT hr = m_pGrabber->GetCurrentBuffer(&amp;bufferSize, (long *)rawBuffer);</span>\n    <span class=\"token comment\" spellcheck=\"true\">//      </span>\n    <span class=\"token comment\" spellcheck=\"true\">//      if(hr==S_OK){</span>\n    <span class=\"token comment\" spellcheck=\"true\">//          if (videoSize == bufferSize){</span>\n    <span class=\"token comment\" spellcheck=\"true\">//              processPixels(rawBuffer, dstBuffer, width, height, true, true);</span>\n    <span class=\"token comment\" spellcheck=\"true\">//          }else{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//              printf(\"ERROR: GetPixels() - bufferSizes do not match!\\n\");</span>\n    <span class=\"token comment\" spellcheck=\"true\">//          }</span>\n    <span class=\"token comment\" spellcheck=\"true\">//      }else{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//          printf(\"ERROR: GetPixels() - Unable to get pixels for device  bufferSize = %i \\n\", bufferSize);</span>\n    <span class=\"token comment\" spellcheck=\"true\">//      }</span>\n    <span class=\"token comment\" spellcheck=\"true\">//  }</span>\n    <span class=\"token comment\" spellcheck=\"true\">//}</span>\n\n    <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n    HRESULT hr<span class=\"token punctuation\">;</span>                         <span class=\"token comment\" spellcheck=\"true\">// COM return value</span>\n    IGraphBuilder <span class=\"token operator\">*</span>m_pGraph<span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">// Graph Builder interface</span>\n    IMediaControl <span class=\"token operator\">*</span>m_pControl<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// Media Control interface</span>\n    IMediaEvent   <span class=\"token operator\">*</span>m_pEvent<span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">// Media Event interface</span>\n    IMediaSeeking <span class=\"token operator\">*</span>m_pSeek<span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// Media Seeking interface</span>\n    IMediaPosition <span class=\"token operator\">*</span> m_pPosition<span class=\"token punctuation\">;</span> \n    IBasicAudio   <span class=\"token operator\">*</span>m_pAudio<span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">// Audio Settings interface </span>\n    ISampleGrabber <span class=\"token operator\">*</span> m_pGrabber<span class=\"token punctuation\">;</span>\n    IBaseFilter <span class=\"token operator\">*</span> m_pSourceFile<span class=\"token punctuation\">;</span>\n    IBaseFilter <span class=\"token operator\">*</span> m_pGrabberF<span class=\"token punctuation\">;</span> \n    IBasicVideo <span class=\"token operator\">*</span> m_pBasicVideo<span class=\"token punctuation\">;</span>\n    IBaseFilter <span class=\"token operator\">*</span> m_pNullRenderer<span class=\"token punctuation\">;</span>\n\n    REFERENCE_TIME timeNow<span class=\"token punctuation\">;</span>             <span class=\"token comment\" spellcheck=\"true\">// Used for FF &amp; REW of movie, current time</span>\n    LONGLONG lPositionInSecs<span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// Time in  seconds</span>\n    LONGLONG lDurationInNanoSecs<span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// Duration in nanoseconds</span>\n    LONGLONG lTotalDuration<span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">// Total duration</span>\n    REFERENCE_TIME rtNew<span class=\"token punctuation\">;</span>               <span class=\"token comment\" spellcheck=\"true\">// Reference time of movie </span>\n    <span class=\"token keyword\">long</span> lPosition<span class=\"token punctuation\">;</span>                 <span class=\"token comment\" spellcheck=\"true\">// Desired position of movie used in FF &amp; REW</span>\n    <span class=\"token keyword\">long</span> lvolume<span class=\"token punctuation\">;</span>                   <span class=\"token comment\" spellcheck=\"true\">// The volume level in 1/100ths dB Valid values range from -10,000 (silence) to 0 (full volume), 0 = 0 dB -10000 = -100 dB </span>\n    <span class=\"token keyword\">long</span> evCode<span class=\"token punctuation\">;</span>                    <span class=\"token comment\" spellcheck=\"true\">// event variable, used to in file to complete wait.</span>\n\n    <span class=\"token keyword\">long</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">double</span> averageTimePerFrame<span class=\"token punctuation\">;</span> \n\n    <span class=\"token keyword\">bool</span> bFrameNew<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> bNewPixels<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> bVideoOpened<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> bPlaying<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">bool</span> bPaused<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> bLoop<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">bool</span> bEndReached<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> movieRate<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> curMovieFrame<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> frameCount<span class=\"token punctuation\">;</span>\n\n    CRITICAL_SECTION critSection<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>IMediaSample<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>IMediaSample<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span> backSample<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>IMediaSample<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>IMediaSample<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span> middleSample<span class=\"token punctuation\">;</span>\n\tofPixels pixels<span class=\"token punctuation\">;</span>\n\tofPixelFormat pixelFormat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// OF SPECIFIC IMPLEMENTATION BELOW </span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------------------------------------------------------------------------------------------------</span>\n\nofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">ofDirectShowPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>OF_PIXELS_RGB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\nofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">ofDirectShowPlayer</span><span class=\"token punctuation\">(</span>ofDirectShowPlayer <span class=\"token operator\">&amp;&amp;</span> other<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">player</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\nofDirectShowPlayer <span class=\"token operator\">&amp;</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofDirectShowPlayer<span class=\"token operator\">&amp;&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>other <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tplayer <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>player<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpixelFormat <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    path <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    player<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">DirectShowVideo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> loadOk <span class=\"token operator\">=</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">loadMovie</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>loadOk <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectShowPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" Cannot load video of this file type.  Make sure you have codecs installed on your system.  OF recommends the free K-Lite Codec pack. \"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> loadOk<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tplayer<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>       \n    \n<span class=\"token keyword\">bool</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">isFrameNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isFrameNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ofPixels <span class=\"token operator\">&amp;</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofPixels <span class=\"token operator\">&amp;</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">bool</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">isPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">isPlaying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isPlaying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>   \n\n<span class=\"token keyword\">bool</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">setPixelFormat</span><span class=\"token punctuation\">(</span>ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> OF_PIXELS_RGB<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">case</span> OF_PIXELS_BGR<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">case</span> OF_PIXELS_BGRA<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">case</span> OF_PIXELS_RGBA<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>pixelFormat <span class=\"token operator\">=</span> pixelFormat<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nofPixelFormat ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>pixelFormat<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n        \n<span class=\"token comment\" spellcheck=\"true\">//should implement!</span>\n<span class=\"token keyword\">float</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getSpeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getSpeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getDuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getDurationInSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">bool</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getIsMovieDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isMovieDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">setPaused</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bPause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setPaused</span><span class=\"token punctuation\">(</span>bPause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span>pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">setVolume</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> volume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setVolume</span><span class=\"token punctuation\">(</span>volume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">setLoopState</span><span class=\"token punctuation\">(</span>ofLoopType state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> state <span class=\"token operator\">==</span> OF_LOOP_NONE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setLoop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> state <span class=\"token operator\">==</span> OF_LOOP_NORMAL <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setLoop</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofDirectShowPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" cannot set loop of type palindrome \"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">setSpeed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setSpeed</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n    \n<span class=\"token keyword\">int</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getCurrentFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getCurrentFrameNo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getTotalNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getAproximateNoFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\nofLoopType ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">getLoopState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLooping</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> OF_LOOP_NORMAL<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> OF_LOOP_NONE<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">setFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        frame <span class=\"token operator\">=</span> <span class=\"token function\">ofClamp</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getTotalNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">return</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setAproximateFrame</span><span class=\"token punctuation\">(</span>frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>  <span class=\"token comment\" spellcheck=\"true\">// frame 0 = first frame...</span>\n    \n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">firstFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">nextFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nextFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDirectShowPlayer<span class=\"token operator\">::</span><span class=\"token function\">previousFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> player <span class=\"token operator\">&amp;&amp;</span> player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        player<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">preFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}