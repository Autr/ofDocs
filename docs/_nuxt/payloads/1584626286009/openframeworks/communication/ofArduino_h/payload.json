{"data":[{"page":{"entry":{"name":"ofArduino.h","filename":"ofArduino.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/communication/ofArduino.h","path":"/openframeworks/communication/ofArduino_h","route":"/openframeworks/communication/ofArduino.h","dir":"../libs/openFrameworks/communication","ext":"h","type":"source","id":227,"parent":225,"breadcrumbs":[225,195],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">/*\n * Copyright 2007-2008 (c) Erik Sjodin, eriksjodin.net\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;list></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofEvents.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofSerial.h\"</span></span>\n\n <span class=\"token comment\" spellcheck=\"true\">/* Version numbers for the protocol.  The protocol is still changing, so these\n * version numbers are important.  This number can be queried so that host\n * software can test whether it will be compatible with the currently\n * installed firmware. */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FIRMATA_MAJOR_VERSION\t2 </span><span class=\"token comment\" spellcheck=\"true\">// for non-compatible changes</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FIRMATA_MINOR_VERSION\t5 </span><span class=\"token comment\" spellcheck=\"true\">// for backwards compatible changes</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FIRMATA_BUGFIX_VERSION\t0 </span><span class=\"token comment\" spellcheck=\"true\">// for bugfix releases</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FIRMATA_MAX_DATA_BYTES\t64 </span><span class=\"token comment\" spellcheck=\"true\">// max number of data bytes in incoming messages</span>\n\n <span class=\"token comment\" spellcheck=\"true\">// message command bytes (128-255/0x80-0xFF)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> DIGITAL_MESSAGE\t\t\t0x90 </span><span class=\"token comment\" spellcheck=\"true\">// send data for a digital port (collection of 8 pins)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ANALOG_MESSAGE\t\t\t0xE0 </span><span class=\"token comment\" spellcheck=\"true\">// send data for an analog pin (or PWM)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> REPORT_ANALOG\t\t\t0xC0 </span><span class=\"token comment\" spellcheck=\"true\">// enable analog input by pin #</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> REPORT_DIGITAL\t\t\t0xD0 </span><span class=\"token comment\" spellcheck=\"true\">// enable digital input by port pair</span>\n <span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SET_PIN_MODE\t\t\t0xF4 </span><span class=\"token comment\" spellcheck=\"true\">// set a pin to INPUT/OUTPUT/PWM/etc</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SET_DIGITAL_PIN_VALUE   0xF5 </span><span class=\"token comment\" spellcheck=\"true\">// set value of an individual digital pin</span>\n <span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> REPORT_VERSION\t\t\t0xF9 </span><span class=\"token comment\" spellcheck=\"true\">// report protocol version</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SYSTEM_RESET\t\t\t0xFF </span><span class=\"token comment\" spellcheck=\"true\">// reset from MIDI</span>\n <span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> START_SYSEX\t\t\t\t0xF0 </span><span class=\"token comment\" spellcheck=\"true\">// start a MIDI Sysex message</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> END_SYSEX\t\t\t\t0xF7 </span><span class=\"token comment\" spellcheck=\"true\">// end a MIDI Sysex message</span>\n\n <span class=\"token comment\" spellcheck=\"true\">// extended command set using sysex (0-127/0x00-0x7F)</span>\n <span class=\"token comment\" spellcheck=\"true\">/* 0x00-0x0F reserved for user-defined commands */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERIAL_MESSAGE          0x60 </span><span class=\"token comment\" spellcheck=\"true\">// communicate with serial devices, including other boards</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENCODER_DATA            0x61 </span><span class=\"token comment\" spellcheck=\"true\">// reply with encoders current positions</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERVO_CONFIG            0x70 </span><span class=\"token comment\" spellcheck=\"true\">// set max angle, minPulse, maxPulse, freq</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STRING_DATA             0x71 </span><span class=\"token comment\" spellcheck=\"true\">// a string message with 14-bits per char</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STEPPER_DATA            0x72 </span><span class=\"token comment\" spellcheck=\"true\">// control a stepper motor</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_DATA            0x73 </span><span class=\"token comment\" spellcheck=\"true\">// send an OneWire read/write/reset/select/skip/search request</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SHIFT_DATA              0x75 </span><span class=\"token comment\" spellcheck=\"true\">// a bitstream to/from a shift register</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_REQUEST             0x76 </span><span class=\"token comment\" spellcheck=\"true\">// send an I2C read/write request</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_REPLY               0x77 </span><span class=\"token comment\" spellcheck=\"true\">// a reply to an I2C read request</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_CONFIG              0x78 </span><span class=\"token comment\" spellcheck=\"true\">// config I2C settings such as delay times and power pins</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> EXTENDED_ANALOG         0x6F </span><span class=\"token comment\" spellcheck=\"true\">// analog write (PWM, Servo, etc) to any pin</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PIN_STATE_QUERY         0x6D </span><span class=\"token comment\" spellcheck=\"true\">// ask for a pin's current mode and value</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PIN_STATE_RESPONSE      0x6E </span><span class=\"token comment\" spellcheck=\"true\">// reply with pin's current mode and value</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> CAPABILITY_QUERY        0x6B </span><span class=\"token comment\" spellcheck=\"true\">// ask for supported modes and resolution of all pins</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> CAPABILITY_RESPONSE     0x6C </span><span class=\"token comment\" spellcheck=\"true\">// reply with supported modes and resolution</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ANALOG_MAPPING_QUERY    0x69 </span><span class=\"token comment\" spellcheck=\"true\">// ask for mapping of analog to pin numbers</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ANALOG_MAPPING_RESPONSE 0x6A </span><span class=\"token comment\" spellcheck=\"true\">// reply with mapping info</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> REPORT_FIRMWARE         0x79 </span><span class=\"token comment\" spellcheck=\"true\">// report name and version of the firmware</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SAMPLING_INTERVAL       0x7A </span><span class=\"token comment\" spellcheck=\"true\">// set the poll rate of the main loop</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SCHEDULER_DATA          0x7B </span><span class=\"token comment\" spellcheck=\"true\">// send a createtask/deletetask/addtotask/schedule/querytasks/querytask request to the scheduler</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SYSEX_NON_REALTIME      0x7E </span><span class=\"token comment\" spellcheck=\"true\">// MIDI Reserved for non-realtime messages</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SYSEX_REALTIME          0x7F </span><span class=\"token comment\" spellcheck=\"true\">// MIDI Reserved for realtime messages</span>\n\n <span class=\"token comment\" spellcheck=\"true\">// pin modes</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_INPUT\t\t\t\t0x00 </span><span class=\"token comment\" spellcheck=\"true\">// defined in Arduino.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_OUTPUT\t\t\t\t0x01 </span><span class=\"token comment\" spellcheck=\"true\">// defined in Arduino.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_ANALOG\t\t\t\t0x02 </span><span class=\"token comment\" spellcheck=\"true\">// analog pin in analogInput mode</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_PWM\t\t\t\t\t0x03 </span><span class=\"token comment\" spellcheck=\"true\">// digital pin in PWM output mode</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_SERVO\t\t\t\t0x04 </span><span class=\"token comment\" spellcheck=\"true\">// digital pin in Servo output mode</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_SHIFT\t\t\t\t0x05 </span><span class=\"token comment\" spellcheck=\"true\">// shiftIn/shiftOut mode</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_I2C\t\t\t\t\t0x06 </span><span class=\"token comment\" spellcheck=\"true\">// pin included in I2C setup</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_ONEWIRE\t\t\t\t0x07 </span><span class=\"token comment\" spellcheck=\"true\">// pin configured for 1-wire</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_STEPPER\t\t\t\t0x08 </span><span class=\"token comment\" spellcheck=\"true\">// pin configured for stepper motor</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_ENCODER\t\t\t\t0x09 </span><span class=\"token comment\" spellcheck=\"true\">// pin configured for rotary encoders</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_SERIAL              0x0A </span><span class=\"token comment\" spellcheck=\"true\">// pin configured for serial communication</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_INPUT_PULLUP        0x0B </span><span class=\"token comment\" spellcheck=\"true\">// enable internal pull-up resistor for pin</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_IGNORE\t\t\t\t0x7F </span><span class=\"token comment\" spellcheck=\"true\">// pin configured to be ignored by digitalWrite and capabilityResponse</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> TOTAL_PIN_MODES\t\t\t13</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//Stepper Subcommands</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MAX_STEPPERS\t\t\t6 </span><span class=\"token comment\" spellcheck=\"true\">// arbitrary value... may need to adjust</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STEPPER_CONFIG\t\t\t0</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STEPPER_STEP\t\t\t1</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//Onewire Subcommands:</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_SEARCH_REQUEST\t\t\t0x40</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_CONFIG_REQUEST\t\t\t0x41</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_SEARCH_REPLY\t\t\t0x42</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_READ_REPLY\t\t\t\t0x43</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_SEARCH_ALARMS_REQUEST\t0x44</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_SEARCH_ALARMS_REPLY\t\t0x45</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_RESET_REQUEST_BIT\t\t0x01</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_SKIP_REQUEST_BIT\t\t0x02</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_SELECT_REQUEST_BIT\t\t0x04</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_READ_REQUEST_BIT\t\t0x08</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_DELAY_REQUEST_BIT\t\t0x10</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_WRITE_REQUEST_BIT\t\t0x20</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_WITHDATA_REQUEST_BITS\t0x3C</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//default value for power:</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ONEWIRE_POWER 1</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//I2C Subcommands</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_WRITE\t\t\t\t\t\tB00000000</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_READ\t\t\t\t\t\tB00001000</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_READ_CONTINUOUSLY\t\t\tB00010000</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_STOP_READING\t\t\t\tB00011000</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_READ_WRITE_MODE_MASK\t\tB00011000</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_10BIT_ADDRESS_MODE_MASK\t\tB00100000</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_END_TX_MASK\t\t\t\t\tB01000000</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_STOP_TX\t\t\t\t\t\t1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_RESTART_TX\t\t\t\t\t0</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_MAX_QUERIES\t\t\t\t\t8</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> I2C_REGISTER_NOT_SPECIFIED\t\t-1</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//Encoder Subcommands</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MAX_ENCODERS\t\t\t\t\t5 </span><span class=\"token comment\" spellcheck=\"true\">// arbitrary value, may need to adjust</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENCODER_ATTACH\t\t\t\t\t0x00</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENCODER_REPORT_POSITION\t\t\t0x01</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENCODER_REPORT_POSITIONS\t\t0x02</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENCODER_RESET_POSITION\t\t\t0x03</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENCODER_REPORT_AUTO\t\t\t\t0x04</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENCODER_DETACH\t\t\t\t\t0x05</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENCODER_DIRECTION_MASK\t\t\t0x40 </span><span class=\"token comment\" spellcheck=\"true\">// B01000000</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENCODER_CHANNEL_MASK\t\t\t0x3F </span><span class=\"token comment\" spellcheck=\"true\">// B00111111</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//Serial Subcommands</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERIAL_CONFIG\t\t\t\t\t0x10</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERIAL_WRITE\t\t\t\t\t0x20</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERIAL_READ\t\t\t\t\t\t0x30</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERIAL_REPLY\t\t\t\t\t0x40</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERIAL_CLOSE\t\t\t\t\t0x50</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERIAL_FLUSH\t\t\t\t\t0x60</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SERIAL_LISTEN\t\t\t\t\t0x70</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// OF specific settings</span>\n<span class=\"token comment\" spellcheck=\"true\">//these are given by the capability query</span>\n<span class=\"token comment\" spellcheck=\"true\">//#define ARD_TOTAL_DIGITAL_PINS        70 // total number of pins currently supported</span>\n<span class=\"token comment\" spellcheck=\"true\">//#define ARD_TOTAL_ANALOG_PINS         6</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_TOTAL_PORTS\t\t\t\t\t15 </span><span class=\"token comment\" spellcheck=\"true\">// total number of ports for the board</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_HIGH\t\t\t\t\t\t1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_LOW\t\t\t\t\t\t\t0</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_ON\t\t\t\t\t\t\t1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ARD_OFF\t\t\t\t\t\t\t0</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_ARDUINO_DELAY_LENGTH\t\t\t4.0</span>\n\n<span class=\"token keyword\">struct</span> supportedPinTypes <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">bool</span>\tinputSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\toutputSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\tanalogSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\tpwmSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\tservoSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\ti2cSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\tserialSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\tonewireSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\tstepperSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\tencoderSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> Firmata_Pin_Modes <span class=\"token punctuation\">{</span>\n\tMODE_INPUT<span class=\"token punctuation\">,</span>\n\tMODE_OUTPUT<span class=\"token punctuation\">,</span>\n\tMODE_INPUT_PULLUP<span class=\"token punctuation\">,</span>\n\tMODE_ANALOG<span class=\"token punctuation\">,</span>\n\tMODE_PWM<span class=\"token punctuation\">,</span>\n\tMODE_SERVO<span class=\"token punctuation\">,</span>\n\tMODE_I2C<span class=\"token punctuation\">,</span>\n\tMODE_SERIAL<span class=\"token punctuation\">,</span>\n\tMODE_ONEWIRE<span class=\"token punctuation\">,</span>\n\tMODE_STEPPER<span class=\"token punctuation\">,</span>\n\tMODE_ENCODER\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> Firmata_Stepper_Interface <span class=\"token punctuation\">{</span>\n\tFIRMATA_STEPPER_DRIVER <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\tFIRMATA_STEPPER_TWO_WIRE <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\tFIRMATA_STEPPER_FOUR_WIRE <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> Firmata_Stepper_Direction <span class=\"token punctuation\">{</span>\n\tFIRMATA_STEPPER_CCW <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\tFIRMATA_STEPPER_CW <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">enum</span> Firmata_I2C_Modes <span class=\"token punctuation\">{</span>\n\tFIRMATA_I2C_WRITE <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>\n\tFIRMATA_I2C_READ <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\tFIRMATA_I2C_CONTINUOUS_READ <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\tFIRMATA_I2C_STOP_READING <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> Firmata_I2C_Data <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span>\t\taddress<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>\t\treg<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string\tdata<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> Firmata_Encoder_Data <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span>\t\tID<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\tdirection<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>\t\tposition<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> Firmata_Stepper_Data <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span>\t\tid<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>\t\ttype<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>\t\tdata<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> Firmata_Serial_Modes <span class=\"token punctuation\">{</span>\n\tFIRMATA_SERIAL_READ_CONTINUOUS <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>\n\tFIRMATA_SERIAL_STOP_READING <span class=\"token operator\">=</span> <span class=\"token number\">0x01</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// ids for hardware and software serial ports on the board</span>\n<span class=\"token keyword\">enum</span> Firmata_Serial_Ports <span class=\"token punctuation\">{</span>\n\tHW_SERIAL0 <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>\n\tHW_SERIAL1 <span class=\"token operator\">=</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span>\n\tHW_SERIAL2 <span class=\"token operator\">=</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span>\n\tHW_SERIAL3 <span class=\"token operator\">=</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span>\n\tSW_SERIAL0 <span class=\"token operator\">=</span> <span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span>\n\tSW_SERIAL1 <span class=\"token operator\">=</span> <span class=\"token number\">0x09</span><span class=\"token punctuation\">,</span>\n\tSW_SERIAL2 <span class=\"token operator\">=</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span>\n\tSW_SERIAL3 <span class=\"token operator\">=</span> <span class=\"token number\">0x11</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> Firmata_Serial_Data <span class=\"token punctuation\">{</span>\n\tFirmata_Serial_Ports\tportID<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string\t\t\tdata<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief This is a way to control an Arduino that has had the firmata library</span>\n<span class=\"token comment\" spellcheck=\"true\">/// loaded onto it, from OF.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// To load firmata onto your Arduino, run the Arduino IDE, open the Examples ></span>\n<span class=\"token comment\" spellcheck=\"true\">/// Firmata > StandardFirmata sketch, and upload it to the Arduino board.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Once the ofArduino instance returns true from isArduinoReady() you can set</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the mode of the different digital pins using sendDigitalPinMode()</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This sets pin 9 to input so that it can read a button press</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///     sendDigitalPinMode(9, ARD_INPUT)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This sets pin 9 to be a PWM out pin. Note that this only works on pins</span>\n<span class=\"token comment\" spellcheck=\"true\">/// that are PWM enabled.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">///     sendDigitalPinMode(9, ARD_PWM)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofArduino</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Constructor and Destructor</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token function\">ofArduino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofArduino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Connect</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Opens a serial port connection to the arduino</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param device The name of the device.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// You can get the name from the Arduino IDE</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param baud The baud rate the connection uses</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> device<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baud <span class=\"token operator\">=</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns true if a succesfull connection has been established</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and the Arduino has reported a firmware</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isArduinoReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Closes the serial port connection.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Does not turn the Arduino off.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Update</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Polls data from the serial port, this has to be called periodically</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Setup</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Setting a pins mode to ARD_INPUT turns on reporting for the port the pin is on</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin Pin on arduino (2-13)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mode `ARD_INPUT`, `ARD_OUTPUT`, `ARD_PWM`</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note Analog pins 0-5 can be used as digitial pins 16-21 but if the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mode of _one_ of these pins is set to `ARD_INPUT` then _all_ analog pin</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// reporting will be turned off</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendDigitalPinMode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendAnalogPinReporting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setUseDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bDelay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setDigitalHistoryLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setAnalogHistoryLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setStringHistoryLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setSysExHistoryLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nSysEx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Senders</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendDigital</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> force <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendPwm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> force <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendSysEx</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> command<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isAttached</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Send a string to the Arduino</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note Firmata can not handle strings longer than 12 characters.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendString</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendProtocolVersionRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendFirmwareVersionRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendPinCofigurationRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendPinCapabilityRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendAnalogMappingRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendPinStateQuery</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This will cause your Arduino to reset and boot into the program again.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendReset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sends the `FIRMATA_START_SYSEX` command</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendSysExBegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sends the `FIRMATA_END_SYSEX` command</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendSysExEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sends a byte without wrapping it in a firmata message.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Data has to be in the 0-127 range. Values > 127 will be interpreted as</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// commands.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Send value as two 7 bit bytes.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Sends a value as two 7-bit bytes without wrapping it in a firmata</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// message.  Values in the range 0 - 16384 will be sent as two bytes</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// within the 0-127 data range.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param value The value to send.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Getters</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the last set PWM value (0-255) for the given pin</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The pins mode has to be ARD_PWM</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// On the Arduino Uno the following pins are supported: 3, 5, 6, 9, 10 and 11</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note Pin 16-21 can also be used if analog inputs 0-5 are used as digital pins</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getPwm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the last received value (if the pin mode is ARD_INPUT)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// or the last set value (if the pin mode is ARD_OUTPUT) for the given</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// pin</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Returns whether the pin is reading high or low, 1 or 0. You can test</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// against this with an if() statement which is handy:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     if(arduino.getDigital(pin)){</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         // do something on high</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     } else {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         // do something on low</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note Pin 16-21 can also be used if analog inputs 0-5 are used as digital pins</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getDigital</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the analog in value that the pin is currently reading.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// because the Arduino has a 10 bit ADC you get between 0 and 1023 for</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// possible values.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin The pin number (0-5)</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getAnalog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the last received SysEx message.</span>\n\tstd<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token function\">getSysEx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the last received string.</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the major firmware version.</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getMajorFirmwareVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the minor firmware version.</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getMinorFirmwareVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the name of the firmware.</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getFirmwareName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a pointer to the digital data history list for the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// given pin</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note Pin 16-21 can also be used if analog inputs 0-5 are used as</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// digital pins</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin The pin number (2-13)</span>\n\tstd<span class=\"token operator\">::</span>list <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span> <span class=\"token function\">getDigitalHistory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a pointer to the analog data history list for the given pin.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin The Arduino Uno pin: 0-5</span>\n\tstd<span class=\"token operator\">::</span>list <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span> <span class=\"token function\">getAnalogHistory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a pointer to the SysEx history.</span>\n\tstd<span class=\"token operator\">::</span>list <span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">*</span> <span class=\"token function\">getSysExHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a pointer to the string history.</span>\n\tstd<span class=\"token operator\">::</span>list <span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> <span class=\"token operator\">*</span> <span class=\"token function\">getStringHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the pin mode of the given pin</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns `ARD_INPUT`, `ARD_OUTPUT`, `ARD_PWM`, `ARD_SERVO`, `ARD_ANALOG`</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getDigitalPinMode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns `ARD_ON` or `ARD_OFF`</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getAnalogPinReporting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Useful for parsing SysEx messages</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getValueFromTwo7bitBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> lsb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> msb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getInvertedValueFromTwo7bitBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> lsb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> msb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Events</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Triggered when a digital pin changes value, the pin that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// changed is passed as an argument.</span>\n\tofEvent <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> EDigitalPinChanged<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Triggered when an analog pin changes value, the pin that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// changed is passed as an argument.</span>\n\tofEvent <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> EAnalogPinChanged<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Triggered when a SysEx message that isn't in the extended</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// command set is received, the SysEx message is passed as an argument</span>\n\tofEvent <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> ESysExReceived<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Triggered when a firmware version is received, the major version</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// is passed as an argument.</span>\n\tofEvent <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> EFirmwareVersionReceived<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Triggered when the firmware version is received upon connect,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the major firmware version is passed as an argument. From this point</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// it's safe to send to the Arduino.</span>\n\tofEvent <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> EInitialized<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Triggered when a string is received, the string is passed as an</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// argument</span>\n\tofEvent <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> EStringReceived<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief triggered when a stepper has finished rotating. Returns which </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// stepper has complted its rotation</span>\n\tofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> Firmata_Stepper_Data<span class=\"token operator\">></span> EStepperDataReceived<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief triggered when the I2C bus returns data after a read request</span>\n\tofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> Firmata_I2C_Data<span class=\"token operator\">></span> EI2CDataRecieved<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief triggered when the encoder returns data after a read request</span>\n\tofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>Firmata_Encoder_Data<span class=\"token operator\">></span> <span class=\"token operator\">></span> EEncoderDataReceived<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief triggered when a Serial message is received. Returns which </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// port and its data</span>\n\tofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> Firmata_Serial_Data<span class=\"token operator\">></span> ESerialDataReceived<span class=\"token punctuation\">;</span>\n\n\tofEvent<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Firmata_Pin_Modes<span class=\"token operator\">></span> <span class=\"token operator\">></span> EPinStateResponseReceived<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Servos</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Send a value to a servo.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// A servo has to be atached to the pin prior</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin 9 or 10</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param value The value to send</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendServo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> force <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param angle parameter DEPRECATED as of Firmata 2.2</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendServoAttach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minPulse <span class=\"token operator\">=</span> <span class=\"token number\">544</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxPulse <span class=\"token operator\">=</span> <span class=\"token number\">2400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Detaches a servo on a pin</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note sendServoDetach DEPRECATED as of Firmata 2.2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//void sendServoDetach(int pin);</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the last set servo value for a pin if the pin has a servo attached.</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getServo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Stepper</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// -- stepper</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendStepper2Wire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dirPin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stepPin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stepsPerRev <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the pins has to have a stepper attached</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendStepper4Wire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin4<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stepsPerRev <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the pins has to have a stepper attached</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendStepperMove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> stepperID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> steps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> acceleration <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> deceleration <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// set the steps to move</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name I2C</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sends a I2C config request</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///  Must be called before an I2C Read or Write</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param {number} delay in microseconds to set for I2C Read</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendI2CConfig</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isI2CConfigured</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Asks the arduino to send an I2C request to a device</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param {number} slaveAddress The address of the I2C device</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param {Array} bytes The bytes to send to the device</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendI2CWriteRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendI2CWriteRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendI2CWriteRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendI2CWriteRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Asks the arduino to request bytes from an I2C device</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param {number} slaveAddress The address of the I2C device</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param {number} numBytes The number of bytes to receive.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param {function} callback A function to call when we have received the bytes.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendI2CReadRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Initialize a continuous I2C read.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param {number} address    The address of the I2C device</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param {number} register   Optionally set the register to read from.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param {number} numBytes   The number of bytes to receive.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendI2ContinuousReadRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name OneWire</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Configure the passed pin as the controller in a 1-wire bus.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Pass as enableParasiticPower true if you want the data pin to power the bus.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param enableParasiticPower</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendOneWireConfig</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> enableParasiticPower<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Searches for 1-wire devices on the bus.  </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendOneWireSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Searches for 1-wire devices on the bus in an alarmed state.  </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendOneWireAlarmsSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendOneWireSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Reads data from a device on the bus.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// N.b. ConfigurableFirmata will issue the 1-wire select command internally.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param device</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param numBytesToRead</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param callback</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendOneWireRead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> devices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytesToRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Resets all devices on the bus.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendOneWireReset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Writes data to the bus to be received by the passed device.  </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The device should be obtained from a previous call to sendOneWireSearch. ConfigurableFirmata will issue the 1-wire select command internally.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param device</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param data</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendOneWireWrite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> devices<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Tells firmata to not do anything for the passed amount of ms.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// For when you need to give a device attached to the bus time to do a calculation.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendOneWireDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sends the passed data to the passed device on the bus, reads the specified number of bytes.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ConfigurableFirmata will issue the 1-wire select command internally.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pin</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param device</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param numBytesToRead</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param callback</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendOneWireWriteAndRead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> devices<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytesToRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendOneWireRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> subcommand<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> devices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytesToRead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> correlationId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> delay<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> dataToWrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Encoder</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">attachEncoder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pinA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pinB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">getEncoderPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> encoderNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">getAllEncoderPositions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">resetEncoderPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> encoderNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">enableEncoderReporting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">disableEncoderReporting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">detachEncoder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> encoderNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Serial</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Asks the Arduino to configure a hardware or serial port.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param portID The serial port to use (HW_SERIAL1, HW_SERIAL2, HW_SERIAL3, SW_SERIAL0, SW_SERIAL1, SW_SERIAL2, SW_SERIAL3)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param baud  The baud rate of the serial port</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param rxPin [SW Serial only] The RX pin of the SoftwareSerial instance</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param txPin [SW Serial only] The TX pin of the SoftwareSerial instance</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendSerialConfig</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rxPin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> txPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Write an array of bytes to the specified serial port.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param portId The serial port to write to.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bytes An array of bytes to write to the serial port.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param numOfBytes length of the array of bytes.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">serialWrite</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief  Start continuous reading of the specified serial port.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The port is checked for data each iteration of the main Arduino loop.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param portId The serial port to start reading continuously.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param  maxBytesToRead [Optional] The maximum number of bytes to read per iteration.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note If there are less bytes in the buffer, the lesser number of bytes will be returned. A value of 0 indicates that all available bytes in the buffer should be read.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">serialRead</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxBytesToRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Stop continuous reading of the specified serial port.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This does not close the port, it stops reading it but keeps the port open.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param portId The serial port to stop reading.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">serialStop</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief  Close the specified serial port.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param portId The serial port to close.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">serialClose</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Flush the specified serial port.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// For hardware serial, this waits for the transmission of outgoing serial data to complete.For software serial, this removed any buffered incoming serial data.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param portId The serial port to listen on.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">serialFlush</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief For SoftwareSerial only. Only a single SoftwareSerial instance can read data at a time.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Call this method to set this port to be the reading port in the case there are multiple SoftwareSerial instances.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param portId The serial port to flush.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">serialListen</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\tstd<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> supportedPinTypes<span class=\"token operator\">></span> <span class=\"token function\">getPinCapabilities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> pinCapabilities<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getTotalPins</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _totalDigitalPins<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getNumAnalogPins</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _totalAnalogPins<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">mutable</span> <span class=\"token keyword\">bool</span> _initialized<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///\\&lt; \\brief Indicate that pins are initialized.</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">initPins</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">mutable</span> <span class=\"token keyword\">int</span> _totalDigitalPins<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///\\&lt; \\brief Indicate the total number of digital pins of the board in use.</span>\n\t<span class=\"token keyword\">mutable</span> <span class=\"token keyword\">int</span> _totalAnalogPins<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendDigitalPinReporting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sendDigitalPortReporting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">purge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> inputData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">processDigitalPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">processSysExData</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofSerial _port<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _portStatus<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// --- history variables</span>\n\t<span class=\"token keyword\">int</span> _analogHistoryLength<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _digitalHistoryLength<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _stringHistoryLength<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _sysExHistoryLength<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// --- data processing variables</span>\n\t<span class=\"token keyword\">int</span> _waitForData<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _executeMultiByteCommand<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; \\brief Indicate Firmata command to execute.</span>\n\t<span class=\"token keyword\">int</span> _multiByteChannel<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; \\brief Indicates which pin the data came from.</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// --- data holders</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> _storedInputData<span class=\"token punctuation\">[</span>FIRMATA_MAX_DATA_BYTES<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> _sysExData<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _majorFirmwareVersion<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> _minorFirmwareVersion<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>string _firmwareName<span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>list <span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> _sysExHistory<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// maintains a history of received sysEx messages (excluding SysEx messages in the extended command set)</span>\n\n\tstd<span class=\"token operator\">::</span>list <span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">></span> _stringHistory<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// maintains a history of received strings</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//we dont know the number of pintypes until we do a configuration request so just a placeholder for now</span>\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>list <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> _analogHistory<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// a history of received data for each analog pin</span>\n\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>list <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> _digitalHistory<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// a history of received data for each digital pin</span>\n\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> _digitalPinMode<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// the modes for all digital pins</span>\n\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> _digitalPinValue<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// the last set values (DIGITAL/PWM) on all digital pins</span>\n\n\t<span class=\"token keyword\">mutable</span> <span class=\"token keyword\">int</span> _digitalPortValue<span class=\"token punctuation\">[</span>ARD_TOTAL_PORTS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// the last set values on all ports</span>\n\n\t<span class=\"token keyword\">mutable</span> <span class=\"token keyword\">int</span> _digitalPortReporting<span class=\"token punctuation\">[</span>ARD_TOTAL_PORTS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// whether pin reporting is enabled / disabled</span>\n\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> _digitalPinReporting<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// whether pin reporting is enabled / disabled</span>\n\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> _analogPinReporting<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// whether pin reporting is enabled / disabled</span>\n\n\t<span class=\"token keyword\">bool</span> bUseDelay<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">mutable</span> <span class=\"token keyword\">bool</span> connected<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; \\brief This yields true if a serial connection to Arduino exists.</span>\n\n\t<span class=\"token keyword\">float</span> connectTime<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; \\brief This represents the (running) time of establishing a serial connection.</span>\n\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> _servoValue<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// the last set servo values</span>\n\n\t<span class=\"token keyword\">bool</span> _i2cConfigured<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> _numSteppers<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> _numEncoders<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> _encoderID<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> _firstAnalogPin<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> firmataInputSupported<span class=\"token punctuation\">,</span>\n\t\tfirmataOutputSupported<span class=\"token punctuation\">,</span>\n\t\tfirmataAnalogSupported<span class=\"token punctuation\">,</span>\n\t\tfirmataPwmSupported<span class=\"token punctuation\">,</span>\n\t\tfirmataServoSupported<span class=\"token punctuation\">,</span>\n\t\tfirmataI2cSupported<span class=\"token punctuation\">,</span>\n\t\tfirmataOnewireSupported<span class=\"token punctuation\">,</span>\n\t\tfirmataStepperSupported<span class=\"token punctuation\">,</span>\n\t\tfirmataEncoderSupported<span class=\"token punctuation\">,</span>\n\t\tfirmataSerialSupported<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> supportedPinTypes<span class=\"token operator\">></span> pinCapabilities<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> analogPinMap<span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isAnalogPin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">convertAnalogPinToDigital</span><span class=\"token punctuation\">(</span>size_t pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">convertDigitalPinToAnalog</span><span class=\"token punctuation\">(</span>size_t pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> ofArduino ofStandardFirmata<span class=\"token punctuation\">;</span>\n\n","type":"source","static":true}}],"fetch":[]}