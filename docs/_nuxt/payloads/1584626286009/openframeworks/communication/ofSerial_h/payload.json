{"data":[{"page":{"entry":{"name":"ofSerial.h","filename":"ofSerial.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/communication/ofSerial.h","path":"/openframeworks/communication/ofSerial_h","route":"/openframeworks/communication/ofSerial.h","dir":"../libs/openFrameworks/communication","ext":"h","type":"source","id":229,"parent":225,"breadcrumbs":[225,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;climits></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBuffer</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX ) || defined( TARGET_LINUX ) || defined (TARGET_ANDROID)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;termios.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winbase.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;tchar.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;devpropdef.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;setupapi.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regstr.h></span></span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MAX_SERIAL_PORTS 256</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winioctl.h></span></span>\n\t<span class=\"token comment\" spellcheck=\"true\">/*#ifndef _MSC_VER\n\t\t#define INITGUID\n\t\t#include &lt;initguid.h> // needed for dev-c++ &amp; DEFINE_GUID\n\t#endif*/</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">// serial error codes</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_SERIAL_NO_DATA \t-2</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_SERIAL_ERROR\t\t-1</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Describes a Serial device, including ID, name and path.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofSerialDeviceInfo</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofSerial</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct an ofSerialDeviceInfo with parameters.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param devicePathIn The path to the device.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param deviceNameIn The name of the device.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\param deviceIDIn The ID of the device.</span>\n\t\t<span class=\"token function\">ofSerialDeviceInfo</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string devicePathIn<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string deviceNameIn<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> deviceIDIn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tdevicePath <span class=\"token operator\">=</span> devicePathIn<span class=\"token punctuation\">;</span>\n\t\t\tdeviceName <span class=\"token operator\">=</span> deviceNameIn<span class=\"token punctuation\">;</span>\n\t\t\tdeviceID <span class=\"token operator\">=</span> deviceIDIn<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct an undefined serial device.</span>\n\t\t<span class=\"token function\">ofSerialDeviceInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tdeviceName <span class=\"token operator\">=</span> <span class=\"token string\">\"device undefined\"</span><span class=\"token punctuation\">;</span>\n\t\t\tdeviceID   <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gets the path to the device</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Example: `/dev/tty.cu/usbdevice-a440`.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the device path.</span>\n\t\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getDevicePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> devicePath<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gets the name of the device</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Example: `usbdevice-a440` or `COM4`.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the device name.</span>\n\t\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getDeviceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> deviceName<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gets the ID of the device</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Example: `0`,`1`,`2`,`3` etc.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the device ID.</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">getDeviceID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> deviceID<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The device path (e.g /dev/tty.cu/usbdevice-a440).</span>\n\t\tstd<span class=\"token operator\">::</span>string devicePath<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The device name (e.g. usbdevice-a440 / COM4).</span>\n\t\tstd<span class=\"token operator\">::</span>string deviceName<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The device ID (e.g. 0, 1, 2, 3, etc).</span>\n\t\t<span class=\"token keyword\">int</span> deviceID<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief ofSerial provides a cross platform system for interfacing with the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// serial port. You can choose the port and baud rate, and then read and send</span>\n<span class=\"token comment\" spellcheck=\"true\">/// data. Please note that the port must be set manually in the code, so you</span>\n<span class=\"token comment\" spellcheck=\"true\">/// should be clear what port your device is on. For example, Arduino users should</span>\n<span class=\"token comment\" spellcheck=\"true\">/// check the arduino app to see what port their device is on. Alternatively the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofSerial class can attempt to communicate with the first available device it</span>\n<span class=\"token comment\" spellcheck=\"true\">/// finds.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// To start up a serial connection to another device you do the following:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// serial.listDevices();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// vector &lt;ofSerialDeviceInfo> deviceList = serial.getDeviceList();</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // Open the first device and talk to it at 57600 baud</span>\n<span class=\"token comment\" spellcheck=\"true\">/// serial.setup(0, 57600);</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofSerial</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Constructor and Destructor</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Initializes the serial connection, but doesn't actually open the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// connection to any devices. You'll need to use the setup() method</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// before doing that.</span>\n\t<span class=\"token function\">ofSerial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofSerial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name List Devices</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This lists all the available serial devices to the console or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// standard output.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// On OSX and Linux this will return all the devices listed in /dev tty</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and cu, so you might want to compare it against a list of devices that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// you're expecting if you want to use it to dynamically connect to a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// device.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">listDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Prints out the available serial devices.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// On OSX and Linux it might list something like this:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// device 0 - cu.modem</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// device 1 - cu.USA19H181P1.1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// And on Windows, like:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// device 0 - COM2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// device 1 - COM4</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use listDevices() instead\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">enumerateDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a vector of ofSerialDeviceInfo instances with the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// devicePath, deviceName, deviceID set.</span>\n\tstd<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span>ofSerialDeviceInfo<span class=\"token operator\">></span> <span class=\"token function\">getDeviceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Serial Connection</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Attempts to setup the first available device at a baud rate of 9600.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofSerial mySerial;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if( mySerial.setup() ){</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t ofLog(\"serial is setup!\");</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Opens the serial port, with the given name and baud rate.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// On OSX and Linux, it might look like:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofSerial mySerial;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mySerial.setup(\"/dev/cu.USA19H181P1.1\", 57600);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// On Windows, like:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofSerial mySerial;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mySerial.setup(\"COM4\", 57600);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string portName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baudrate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Opens the serial port based on the order in which is listed and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// sets the baud rate.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The code bellow would open the first serial device found by the system:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofSerial mySerial;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mySerial.setup(0, 9600);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> deviceNumber<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baudrate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Closes the connection to the serial device.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Read Data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The available method is useful when you want to know how many bytes</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are available in the serial port. For instance, if you only want to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// read when there are 8 bytes waiting for you, you would do:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if(device.available() > 8) {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t device.readBytes(buffer, 8);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is useful when you know how long a complete message from a device</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// is going to be.</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Reads 'length' bytes from the connected serial device.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// In some cases it may read less than 'length' bytes, so for reliable</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// reading of >1 bytes of data the return value must be checked against the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// number of bytes requested, and if fewer bytes than requested were read</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// then the call must be tried again.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This function should only be called when Serial.available() is reporting</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// >0 bytes available.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// An example of how to reliably read 8 bytes:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // we want to read 8 bytes</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// int bytesRequired = 8;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// unsigned char bytes[bytesRequired];</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// int bytesRemaining = bytesRequired;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // loop until we've read everything</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// while ( bytesRemaining > 0 ){</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t // check for data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t if ( serial.available() > 0 ){</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t // try to read - note offset into the bytes[] array, this is so</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t // that we don't overwrite the bytes we already have</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t int bytesArrayOffset = bytesRequired - bytesRemaining;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t int result = serial.readBytes( &amp;bytes[bytesArrayOffset], bytesRemaining );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t // check for error code</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t if ( result == OF_SERIAL_ERROR ){</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t // something bad happened</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t ofLog( OF_LOG_ERROR, \"unrecoverable error reading from serial\" );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t break;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t } else if ( result == OF_SERIAL_NO_DATA ){</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t // nothing was read, try again</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t } else {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t // we read some data!</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t bytesRemaining -= result;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Be aware that the type of your buffer can only be unsigned char. If you're</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// trying to receieve ints or signed chars over a serial connection you'll</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// need to do some bit manipulation to correctly interpret that values.</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span>ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Reads and returns a single byte from the requested device.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofSerial mySerial;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mySerial.setup(0, 57600);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// int myByte = mySerial.readByte();</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if ( myByte == OF_SERIAL_NO_DATA ){</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t printf(\"no data was read\");</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// } else if ( myByte == OF_SERIAL_ERROR ){</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t printf(\"an error occurred\");</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// } else {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t printf(\"myByte is %d\", myByte);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The single byte as integer. If there is no data it will return</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// `OF_SERIAL_NO_DATA`, and on error it returns `OF_SERIAL_ERROR`</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Write Data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This writes bytes into the serial buffer from the buffer pointer passed in</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// unsigned char buf[3] = {'o', 'f', '!'};</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// device.writeBytes(&amp;buf[0], 3);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Writes a single byte to the connected serial device.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Check the return value to be sure the data was written.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofSerial mySerial;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mySerial.setup(0, 57600);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// unsigned char myByte = 225;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// bool byteWasWritten = mySerial.writeByte(myByte);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if ( !byteWasWritten )</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t ofLog(OF_LOG_ERROR, \"Byte was not written to serial port\");</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> singleByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> singleByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Clear Data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Clears data from one or both of the serial buffers.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Any data in the cleared buffers is discarded.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param flushIn If true then it clears the incoming data buffer</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param flushOut If true then it clears the outgoing data buffer.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flushIn <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> flushOut <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Drain is only available on OSX and Linux and is very similar to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// flush(), but blocks until all the data has been written to or read</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// from the serial port.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enumerate all devices attached to a serial port.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This method tries to collect basic information about all devices</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// attached to a serial port.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\see ofSerial::listDevices()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\see enumerateWin32Ports()</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">buildDeviceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>string deviceType<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">///\\&lt; \\brief Name of the device on the other end of the serial connection.</span>\n\tstd<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span>ofSerialDeviceInfo<span class=\"token operator\">></span> devices<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">///\\&lt; This vector stores information about all serial devices found.</span>\n\t<span class=\"token keyword\">bool</span> bHaveEnumeratedDevices<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">///\\&lt; \\brief Indicate having enumerated devices (serial ports) available.</span>\n\t<span class=\"token keyword\">bool</span> bInited<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">///\\&lt; \\brief Indicate the successful initialization of the serial connection.</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enumerate all serial ports on Microsoft Windows.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This method tries to collect basic information about all devices</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// attached to a serial port on Microsoft Windows platforms.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\see ofSerial::listDevices()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\see ofSerial::buildDeviceList()</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">enumerateWin32Ports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tCOMMTIMEOUTS oldTimeout<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///\\&lt; \\brief The old serial connection timeout.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// This is needed to restore settings on Microsoft Windows</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// platforms upon closing the serial connection.</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> portNamesShort<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///\\&lt; \\brief Short names of COM ports on Microsoft Windows.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Short names only identify/name the COM port. The length</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// of the array is limited to MAX_SERIAL_PORTS.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///\\see ofSerial::portNamesFriendly</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> portNamesFriendly<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///\\&lt; \\brief Friendly names of COM ports on Microsoft Windows.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// The friendly names often describe/name the device attached to</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// a particular serial port. The length of the array is limited</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// to MAX_SERIAL_PORTS.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///\\see ofSerial::portNamesShort</span>\n\tHANDLE hComm<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///\\&lt; This is the handler for the serial port on Microsoft Windows.</span>\n\t<span class=\"token keyword\">int</span> nPorts<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">///\\&lt; \\brief Number of serial devices (ports) on Microsoft Windows.</span>\n\t<span class=\"token keyword\">bool</span> bPortsEnumerated<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">///\\&lt; \\brief Indicate that all serial ports (on Microsoft Windows) have been enumerated.</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; \\brief File descriptor for the serial port.</span>\n\t<span class=\"token keyword\">struct</span> termios oldoptions<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">///&lt; \\brief This is the set of (current) terminal attributes to be reused when changing a subset of options.</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// this serial code contains small portions of the following code-examples:</span>\n<span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://todbot.com/arduino/host/arduino-serial/arduino-serial.c</span>\n<span class=\"token comment\" spellcheck=\"true\">// web.mac.com/miked13/iWeb/Arduino/Serial%20Write_files/main.cpp</span>\n<span class=\"token comment\" spellcheck=\"true\">// www.racer.nl/docs/libraries/qlib/qserial.htm</span>\n<span class=\"token comment\" spellcheck=\"true\">// ---------------------------------------------------</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// to do:</span>\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// a) support blocking / non-blocking</span>\n<span class=\"token comment\" spellcheck=\"true\">// b) support numChars available type functions</span>\n<span class=\"token comment\" spellcheck=\"true\">// c) can we reduce the number of includes here?</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// useful :</span>\n<span class=\"token comment\" spellcheck=\"true\">//\t http://en.wikibooks.org/wiki/Serial_Programming:Unix/termios</span>\n<span class=\"token comment\" spellcheck=\"true\">//\t http://www.keyspan.com/downloads-files/developer/win/USBSerial/html/DevDocsUSBSerial.html</span>\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// (also useful, might be this serial example - worth checking out:</span>\n<span class=\"token comment\" spellcheck=\"true\">// http://web.mit.edu/kvogt/Public/osrc/src/</span>\n<span class=\"token comment\" spellcheck=\"true\">// if has evolved ways of dealing with blocking</span>\n<span class=\"token comment\" spellcheck=\"true\">// and non-blocking instances)</span>\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------</span>\n","type":"source","static":true}}],"fetch":[]}