{"data":[{"page":{"entry":{"name":"ofSerial.cpp","filename":"ofSerial.cpp","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/communication/ofSerial.cpp","path":"/openframeworks/communication/ofSerial_cpp","route":"/openframeworks/communication/ofSerial.cpp","dir":"../libs/openFrameworks/communication","ext":"cpp","type":"source","id":228,"parent":225,"breadcrumbs":[225,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofSerial.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX ) || defined( TARGET_LINUX )</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;getopt.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;dirent.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstring></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LINUX</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;linux/serial.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// needed for serial bus enumeration:</span>\n<span class=\"token comment\" spellcheck=\"true\">// 4d36e978-e325-11ce-bfc1-08002be10318}</span>\n<span class=\"token function\">DEFINE_GUID</span> <span class=\"token punctuation\">(</span>GUID_SERENUM_BUS_ENUMERATOR<span class=\"token punctuation\">,</span> <span class=\"token number\">0x4D36E978</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE325</span><span class=\"token punctuation\">,</span>\n<span class=\"token number\">0x11CE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xBF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">void</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">enumerateWin32Ports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bPortsEnumerated <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tHDEVINFO hDevInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\tSP_DEVINFO_DATA DeviceInterfaceData<span class=\"token punctuation\">;</span>\n\tDWORD dataType<span class=\"token punctuation\">,</span> actualSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Reset Port List</span>\n\tnPorts <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Search device set</span>\n\thDevInfo <span class=\"token operator\">=</span> <span class=\"token function\">SetupDiGetClassDevs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> _GUID <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>GUID_SERENUM_BUS_ENUMERATOR<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> DIGCF_PRESENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hDevInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> dataBuf<span class=\"token punctuation\">[</span>MAX_PATH <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ZeroMemory</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>DeviceInterfaceData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DeviceInterfaceData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tDeviceInterfaceData<span class=\"token punctuation\">.</span>cbSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DeviceInterfaceData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">SetupDiEnumDeviceInfo</span><span class=\"token punctuation\">(</span>hDevInfo<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>DeviceInterfaceData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// SetupDiEnumDeviceInfo failed</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">SetupDiGetDeviceRegistryPropertyA</span><span class=\"token punctuation\">(</span>hDevInfo<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t <span class=\"token operator\">&amp;</span>DeviceInterfaceData<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t SPDRP_FRIENDLYNAME<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t <span class=\"token operator\">&amp;</span>dataType<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t dataBuf<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dataBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t <span class=\"token operator\">&amp;</span>actualSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\t\t <span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>portNamesFriendly<span class=\"token punctuation\">[</span>nPorts<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s\"</span><span class=\"token punctuation\">,</span> dataBuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t portNamesShort<span class=\"token punctuation\">[</span>nPorts<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t\t <span class=\"token comment\" spellcheck=\"true\">// turn blahblahblah(COM4) into COM4</span>\n\n\t\t\t <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> begin <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> end <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t\t begin <span class=\"token operator\">=</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>dataBuf<span class=\"token punctuation\">,</span> <span class=\"token string\">\"COM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t end <span class=\"token operator\">=</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t <span class=\"token operator\">*</span>end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// get rid of the )...</span>\n\t\t\t\t\t <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>portNamesShort<span class=\"token punctuation\">[</span>nPorts<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> begin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t <span class=\"token punctuation\">}</span>\n\t\t\t\t <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nPorts<span class=\"token operator\">++</span> <span class=\"token operator\">></span> MAX_SERIAL_PORTS<span class=\"token punctuation\">)</span>\n\t\t\t\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">SetupDiDestroyDeviceInfoList</span><span class=\"token punctuation\">(</span>hDevInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tbPortsEnumerated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span>  </span><span class=\"token comment\" spellcheck=\"true\">// TARGET_WIN32</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\nofSerial<span class=\"token operator\">::</span><span class=\"token function\">ofSerial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\n\t\tnPorts <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tbPortsEnumerated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t\tportNamesShort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span>MAX_SERIAL_PORTS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tportNamesFriendly <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">[</span>MAX_SERIAL_PORTS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX_SERIAL_PORTS<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tportNamesShort<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\tportNamesFriendly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>MAX_PATH<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\n\tfd <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\tbHaveEnumeratedDevices <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tbInited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\nofSerial<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofSerial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\n\t\tnPorts <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tbPortsEnumerated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> MAX_SERIAL_PORTS<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> portNamesShort<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> portNamesFriendly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> portNamesShort<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> portNamesFriendly<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\tbInited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX )</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">isDeviceArduino</span><span class=\"token punctuation\">(</span> ofSerialDeviceInfo <span class=\"token operator\">&amp;</span> A <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//TODO - this should be ofStringInString</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">getDeviceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"usbserial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span>\n\t\t\t<span class=\"token operator\">||</span> <span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">.</span><span class=\"token function\">getDeviceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"usbmodem\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">buildDeviceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tdeviceType <span class=\"token operator\">=</span> <span class=\"token string\">\"serial\"</span><span class=\"token punctuation\">;</span>\n\tdevices<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvector <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> prefixMatch<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_OSX</span>\n\n\t\tprefixMatch<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cu.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tprefixMatch<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tty.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LINUX</span>\n\n\t\tprefixMatch<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttyACM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tprefixMatch<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttyS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tprefixMatch<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ttyUSB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tprefixMatch<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rfc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX ) || defined( TARGET_LINUX )</span>\n\t\tofDirectory <span class=\"token function\">dir</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> deviceCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> entry<span class=\"token operator\">:</span> dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span>string deviceName <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">.</span><span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//we go through the prefixes</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> prefix<span class=\"token operator\">:</span> prefixMatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">//if the device name is longer than the prefix</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>deviceName<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> prefix<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">//do they match ?</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>deviceName<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> prefix<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tdevices<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofSerialDeviceInfo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/dev/\"</span><span class=\"token operator\">+</span>deviceName<span class=\"token punctuation\">,</span> deviceName<span class=\"token punctuation\">,</span> deviceCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\tdeviceCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\n\t\t<span class=\"token function\">enumerateWin32Ports</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"found \"</span> <span class=\"token operator\">&lt;&lt;</span> nPorts <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" devices\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nPorts<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//NOTE: we give the short port name for both as that is what the user should pass and the short name is more friendly</span>\n\t\t\tdevices<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofSerialDeviceInfo</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>portNamesShort<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>portNamesFriendly<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX )</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//here we sort the device to have the aruino ones first.</span>\n\t\t<span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>devices<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> devices<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> isDeviceArduino<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//we are reordering the device ids. too!</span>\n\t\t<span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> device<span class=\"token operator\">:</span> devices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tdevice<span class=\"token punctuation\">.</span>deviceID <span class=\"token operator\">=</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\tbHaveEnumeratedDevices <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">listDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">buildDeviceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> device<span class=\"token operator\">:</span> devices<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">&lt;&lt;</span> device<span class=\"token punctuation\">.</span><span class=\"token function\">getDeviceID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] = \"</span><span class=\"token operator\">&lt;&lt;</span> device<span class=\"token punctuation\">.</span><span class=\"token function\">getDeviceName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\nvector <span class=\"token operator\">&lt;</span>ofSerialDeviceInfo<span class=\"token operator\">></span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">getDeviceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">buildDeviceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> devices<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">enumerateDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">listDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bInited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">SetCommTimeouts</span><span class=\"token punctuation\">(</span>hComm<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>oldTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">CloseHandle</span><span class=\"token punctuation\">(</span>hComm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\thComm <span class=\"token operator\">=</span> INVALID_HANDLE_VALUE<span class=\"token punctuation\">;</span>\n\t\t\tbInited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bInited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">tcsetattr</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> TCSANOW<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>oldoptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tbInited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// [CHECK] -- anything else need to be reset?</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// the first one, at 9600 is a good choice...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> deviceNumber<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">buildDeviceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>deviceNumber <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>devices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>devices<span class=\"token punctuation\">[</span>deviceNumber<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>devicePath<span class=\"token punctuation\">,</span> baud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"couldn't find device \"</span> <span class=\"token operator\">&lt;&lt;</span> deviceNumber <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", only \"</span> <span class=\"token operator\">&lt;&lt;</span> devices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" devices found\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>string portName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbInited <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX ) || defined( TARGET_LINUX )</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//lets account for the name being passed in instead of the device path</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>portName<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> portName<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">\"/dev/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tportName <span class=\"token operator\">=</span> <span class=\"token string\">\"/dev/\"</span> <span class=\"token operator\">+</span> portName<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"opening \"</span> <span class=\"token operator\">&lt;&lt;</span> portName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" @ \"</span> <span class=\"token operator\">&lt;&lt;</span> baud <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" bps\"</span><span class=\"token punctuation\">;</span>\n\t\tfd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span>portName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> O_RDWR <span class=\"token operator\">|</span> O_NOCTTY <span class=\"token operator\">|</span> O_NONBLOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"unable to open \"</span> <span class=\"token operator\">&lt;&lt;</span> portName<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">struct</span> termios options<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">tcgetattr</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>oldoptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toptions <span class=\"token operator\">=</span> oldoptions<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>baud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> <span class=\"token number\">300</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B300<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B300<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">1200</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B1200<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B1200<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">2400</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B2400<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B2400<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">4800</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B4800<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B4800<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">9600</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B9600<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B9600<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">14400</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B14400<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B14400<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">19200</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B19200<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B19200<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">28800</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B28800<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B28800<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">38400</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B38400<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B38400<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">57600</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B57600<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B57600<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">115200</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B115200<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B115200<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">230400</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B230400<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B230400<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">case</span> <span class=\"token number\">12000000</span><span class=\"token operator\">:</span> \n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> <span class=\"token number\">12000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> <span class=\"token number\">12000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t   <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">cfsetispeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B9600<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">cfsetospeed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">,</span> B9600<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setup(): cannot set \"</span> <span class=\"token operator\">&lt;&lt;</span> baud <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" bps, setting to 9600\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\toptions<span class=\"token punctuation\">.</span>c_cflag <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CLOCAL <span class=\"token operator\">|</span> CREAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toptions<span class=\"token punctuation\">.</span>c_cflag <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span>PARENB<span class=\"token punctuation\">;</span>\n\t\toptions<span class=\"token punctuation\">.</span>c_cflag <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span>CSTOPB<span class=\"token punctuation\">;</span>\n\t\toptions<span class=\"token punctuation\">.</span>c_cflag <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span>CSIZE<span class=\"token punctuation\">;</span>\n\t\toptions<span class=\"token punctuation\">.</span>c_iflag <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tcflag_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>INLCR <span class=\"token operator\">|</span> IGNCR <span class=\"token operator\">|</span> ICRNL <span class=\"token operator\">|</span> IGNBRK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toptions<span class=\"token punctuation\">.</span>c_oflag <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tcflag_t<span class=\"token punctuation\">)</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>OPOST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toptions<span class=\"token punctuation\">.</span>c_cflag <span class=\"token operator\">|</span><span class=\"token operator\">=</span> CS8<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_LINUX )</span>\n\t\t\toptions<span class=\"token punctuation\">.</span>c_cflag <span class=\"token operator\">|</span><span class=\"token operator\">=</span> CRTSCTS<span class=\"token punctuation\">;</span>\n\t\t\toptions<span class=\"token punctuation\">.</span>c_lflag <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>ICANON <span class=\"token operator\">|</span> ECHO <span class=\"token operator\">|</span> ISIG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token function\">tcsetattr</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> TCSANOW<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_LINUX</span>\n\t\t\t<span class=\"token keyword\">struct</span> serial_struct kernel_serial_settings<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> TIOCGSERIAL<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>kernel_serial_settings<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tkernel_serial_settings<span class=\"token punctuation\">.</span>flags <span class=\"token operator\">|</span><span class=\"token operator\">=</span> ASYNC_LOW_LATENCY<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> TIOCSSERIAL<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>kernel_serial_settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\tbInited <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"opened \"</span> <span class=\"token operator\">&lt;&lt;</span> portName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" sucessfully @ \"</span> <span class=\"token operator\">&lt;&lt;</span> baud <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" bps\"</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined( TARGET_WIN32 )</span>\n\n\t\t<span class=\"token keyword\">char</span> pn<span class=\"token punctuation\">[</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>portName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">sscanf</span><span class=\"token punctuation\">(</span>portName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"COM%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// Microsoft KB115831 a.k.a if COM > COM9 you have to use a different</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// syntax</span>\n\t\t\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>pn<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\\\\\\\.\\\\COM%d\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">strncpy</span><span class=\"token punctuation\">(</span>pn<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>portName<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>portName<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// open the serial port:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// \"COM4\", etc...</span>\n\n\t\thComm <span class=\"token operator\">=</span> <span class=\"token function\">CreateFileA</span><span class=\"token punctuation\">(</span>pn<span class=\"token punctuation\">,</span> GENERIC_READ<span class=\"token operator\">|</span>GENERIC_WRITE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\tOPEN_EXISTING<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hComm <span class=\"token operator\">==</span> INVALID_HANDLE_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setup(): unable to open \"</span> <span class=\"token operator\">&lt;&lt;</span> portName<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// now try the settings:</span>\n\t\tCOMMCONFIG cfg<span class=\"token punctuation\">;</span>\n\t\tDWORD cfgSize<span class=\"token punctuation\">;</span>\n\t\tWCHAR buf<span class=\"token punctuation\">[</span><span class=\"token number\">80</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\tcfgSize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">GetCommConfig</span><span class=\"token punctuation\">(</span>hComm<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cfg<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cfgSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> bps <span class=\"token operator\">=</span> baud<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">swprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> L<span class=\"token string\">\"baud=%d parity=N data=8 stop=1\"</span><span class=\"token punctuation\">,</span> bps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">BuildCommDCBW</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cfg<span class=\"token punctuation\">.</span>dcb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setup(): unable to build comm dcb, (\"</span> <span class=\"token operator\">&lt;&lt;</span> buf <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\")\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Set baudrate and bits etc.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Note that BuildCommDCB() clears XON/XOFF and hardware control by default</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">SetCommState</span><span class=\"token punctuation\">(</span>hComm<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cfg<span class=\"token punctuation\">.</span>dcb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setup(): couldn't set comm state: \"</span> <span class=\"token operator\">&lt;&lt;</span> cfg<span class=\"token punctuation\">.</span>dcb<span class=\"token punctuation\">.</span>BaudRate <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" bps, xio \"</span> <span class=\"token operator\">&lt;&lt;</span> cfg<span class=\"token punctuation\">.</span>dcb<span class=\"token punctuation\">.</span>fInX <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">&lt;&lt;</span> cfg<span class=\"token punctuation\">.</span>dcb<span class=\"token punctuation\">.</span>fOutX<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//ofLogNotice(\"ofSerial\") &lt;&lt; \"bps=\" &lt;&lt; cfg.dcb.BaudRate &lt;&lt; \", xio=\" &lt;&lt; cfg.dcb.fInX &lt;&lt; \"/\" &lt;&lt; cfg.dcb.fOutX;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Set communication timeouts (NT)</span>\n\t\tCOMMTIMEOUTS tOut<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">GetCommTimeouts</span><span class=\"token punctuation\">(</span>hComm<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>oldTimeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttOut <span class=\"token operator\">=</span> oldTimeout<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Make timeout so that:</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// - return immediately with buffered characters</span>\n\t\ttOut<span class=\"token punctuation\">.</span>ReadIntervalTimeout <span class=\"token operator\">=</span> MAXDWORD<span class=\"token punctuation\">;</span>\n\t\ttOut<span class=\"token punctuation\">.</span>ReadTotalTimeoutMultiplier <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\ttOut<span class=\"token punctuation\">.</span>ReadTotalTimeoutConstant <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">SetCommTimeouts</span><span class=\"token punctuation\">(</span>hComm<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tbInited <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"not implemented in this platform\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">long</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bInited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"writeBytes(): serial not inited\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX ) || defined( TARGET_LINUX )</span>\n\t\tsize_t written<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tfd_set wfds<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">struct</span> timeval tv<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>written <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> n <span class=\"token operator\">=</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buffer <span class=\"token operator\">+</span> written<span class=\"token punctuation\">,</span> length <span class=\"token operator\">-</span> written<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>errno <span class=\"token operator\">==</span> EAGAIN <span class=\"token operator\">||</span> errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//printf(\"Write, n = %d\\n\", n);</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\twritten <span class=\"token operator\">+</span><span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\ttv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t\t\ttv<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>wfds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wfds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tn <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>fd<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wfds<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> errno <span class=\"token operator\">==</span> EINTR<span class=\"token punctuation\">)</span> n <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> written<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_WIN32)</span>\n\n\t\tDWORD written<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">WriteFile</span><span class=\"token punctuation\">(</span>hComm<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>written<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t <span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"writeBytes(): couldn't write to port\"</span><span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>  <span class=\"token string\">\"wrote \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> written <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" bytes\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>written<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">long</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> singleByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>singleByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">long</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">long</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bInited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"readBytes(): serial not inited\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX ) || defined( TARGET_LINUX )</span>\n\n\t\t<span class=\"token keyword\">auto</span> nRead <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nRead <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> errno <span class=\"token operator\">==</span> EAGAIN <span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token keyword\">return</span> OF_SERIAL_NO_DATA<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"readBytes(): couldn't read from port: \"</span> <span class=\"token operator\">&lt;&lt;</span> errno <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> nRead<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined( TARGET_WIN32 )</span>\n\n\t\tDWORD nRead <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>hComm<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>nRead<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"readBytes(): couldn't read from port\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>nRead<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"not defined in this platform\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">long</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">long</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span>ofBuffer <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> size_t length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> singleByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bInited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"writeByte(): serial not inited\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>singleByte<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bInited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"readByte(): serial not inited\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> tmpByte <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX ) || defined( TARGET_LINUX )</span>\n\n\t\t<span class=\"token keyword\">int</span> nRead <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tmpByte<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nRead <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> errno <span class=\"token operator\">==</span> EAGAIN <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> OF_SERIAL_NO_DATA<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"readByte(): couldn't read from port: \"</span> <span class=\"token operator\">&lt;&lt;</span> errno <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">strerror</span><span class=\"token punctuation\">(</span>errno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nRead <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> OF_SERIAL_NO_DATA<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined( TARGET_WIN32 )</span>\n\n\t\tDWORD nRead<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ReadFile</span><span class=\"token punctuation\">(</span>hComm<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tmpByte<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>nRead<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"readByte(): couldn't read from port\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nRead <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> OF_SERIAL_NO_DATA<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"not defined in this platform\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">return</span> tmpByte<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> flushIn<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> flushOut<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bInited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"flush(): serial not inited\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX ) || defined( TARGET_LINUX )</span>\n\t\t<span class=\"token keyword\">int</span> flushType <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flushIn <span class=\"token operator\">&amp;&amp;</span> flushOut<span class=\"token punctuation\">)</span> flushType <span class=\"token operator\">=</span> TCIOFLUSH<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flushIn<span class=\"token punctuation\">)</span> flushType <span class=\"token operator\">=</span> TCIFLUSH<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flushOut<span class=\"token punctuation\">)</span> flushType <span class=\"token operator\">=</span> TCOFLUSH<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">tcflush</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> flushType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined( TARGET_WIN32 )</span>\n\n\t\t<span class=\"token keyword\">int</span> flushType <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flushIn <span class=\"token operator\">&amp;&amp;</span> flushOut<span class=\"token punctuation\">)</span> flushType <span class=\"token operator\">=</span> PURGE_TXCLEAR <span class=\"token operator\">|</span> PURGE_RXCLEAR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flushIn<span class=\"token punctuation\">)</span> flushType <span class=\"token operator\">=</span> PURGE_RXCLEAR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flushOut<span class=\"token punctuation\">)</span> flushType <span class=\"token operator\">=</span> PURGE_TXCLEAR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">PurgeComm</span><span class=\"token punctuation\">(</span>hComm<span class=\"token punctuation\">,</span> flushType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">drain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bInited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"drain(): serial not inited\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX ) || defined( TARGET_LINUX )</span>\n\n\t\t<span class=\"token function\">tcdrain</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bInited<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofSerial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"available(): serial not inited\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> OF_SERIAL_ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> numBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined( TARGET_OSX ) || defined( TARGET_LINUX )</span>\n\n\t\t<span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> FIONREAD<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\n\t\tCOMSTAT stat<span class=\"token punctuation\">;</span>\n\t\tDWORD err<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hComm<span class=\"token operator\">!=</span>INVALID_HANDLE_VALUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ClearCommError</span><span class=\"token punctuation\">(</span>hComm<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>stat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tnumBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tnumBytes <span class=\"token operator\">=</span> stat<span class=\"token punctuation\">.</span>cbInQue<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tnumBytes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">return</span> numBytes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofSerial<span class=\"token operator\">::</span><span class=\"token function\">isInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> bInited<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}