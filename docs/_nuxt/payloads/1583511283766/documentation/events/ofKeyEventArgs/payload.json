{"data":[{"page":{"entry":{"name":"ofKeyEventArgs","filename":"ofKeyEventArgs.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/events/ofKeyEventArgs.markdown","path":"/documentation/events/ofKeyEventArgs","route":"/documentation/events/ofKeyEventArgs.markdown","dir":"../ofSite/documentation/events","ext":"markdown","type":"page","id":1936,"parent":1922,"breadcrumbs":[1922,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>This class is integrated into the openframeworks events system. When a key event (key pressed, key released) happens we record key information inside an object of the class. Used to send event messages. In the new openFrameworks release we can find a very illustrative example about how to use events in openFrameworks.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"ofEventArgs"},"methods":[{"syntax":"hasModifier(modifier)","name":"hasModifier","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> modifier","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofKeyEventArgs()","name":"ofKeyEventArgs","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofKeyEventArgs(type, key)","name":"ofKeyEventArgs","returns":null,"returns_description":null,"parameters":"ofKeyEventArgs<span class=\"token operator\">::</span>Type type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofKeyEventArgs(type, key, keycode, scancode, codepoint, modifiers)","name":"ofKeyEventArgs","returns":null,"returns_description":null,"parameters":"ofKeyEventArgs<span class=\"token operator\">::</span>Type type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> keycode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> scancode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> codepoint<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> modifiers","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"codepoint","type":"unsigned int","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>The Unicode code point you'd expect if this key combo (including modifier keys) was pressed in a text editor, or 0 for non-printable characters.</p>\n","desc":""},{"name":"isRepeat","type":"bool","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>If this is a repeat event</p>\n","desc":""},{"name":"key","type":"int ","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>For special keys, one of OF_KEY_* (\n<strong>See also</strong>: ofConstants.h). For all other keys, the Unicode code point you'd expect if this key combo (including modifier keys that may be down) was pressed in a text editor (same as codepoint).</p>\n","desc":""},{"name":"keycode","type":"int","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>The keycode returned by the windowing system, independent of any modifier keys or keyboard layout settings. For ofAppGLFWWindow this value is one of GLFW_KEY_* (\n<strong>See also</strong>: glfw3.h) - typically, ASCII representation of the symbol on the physical key, so A key always returns 0x41 even if shift, alt, ctrl are down.</p>\n","desc":""},{"name":"modifiers","type":"int","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>Key modifiers</p>\n","desc":""},{"name":"scancode","type":"int","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>The raw scan code returned by the keyboard, OS and hardware specific.</p>\n","desc":""},{"name":"type","type":"enum  ofKeyEventArgs::Type","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofKeyEventArgs</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n<em>extends: ofEventArgs</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>This class is integrated into the openframeworks events system. When a key event (key pressed, key released) happens we record key information inside an object of the class. Used to send event messages. In the new openFrameworks release we can find a very illustrative example about how to use events in openFrameworks.</p>\n<p>##Methods</p>\n<p>###bool hasModifier(modifier)</p>\n<p>&lt;!--\n<em>syntax: hasModifier(modifier)</em>\n<em>name: hasModifier</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int modifier</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofKeyEventArgs()</h3>\n<p>&lt;!--\n<em>syntax: ofKeyEventArgs()</em>\n<em>name: ofKeyEventArgs</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofKeyEventArgs(type, key)</h3>\n<p>&lt;!--\n<em>syntax: ofKeyEventArgs(type, key)</em>\n<em>name: ofKeyEventArgs</em>\n_returns: _\n_returns_description: _\n<em>parameters: ofKeyEventArgs::Type type, int key</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofKeyEventArgs(type, key, keycode, scancode, codepoint, modifiers)</h3>\n<p>&lt;!--\n<em>syntax: ofKeyEventArgs(type, key, keycode, scancode, codepoint, modifiers)</em>\n<em>name: ofKeyEventArgs</em>\n_returns: _\n_returns_description: _\n<em>parameters: ofKeyEventArgs::Type type, int key, int keycode, int scancode, unsigned int codepoint, int modifiers</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###unsigned int codepoint</p>\n<p>&lt;!--\n<em>name: codepoint</em>\n<em>type: unsigned int</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The Unicode code point you'd expect if this key combo (including modifier keys) was pressed in a text editor, or 0 for non-printable characters.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isRepeat</p>\n<p>&lt;!--\n<em>name: isRepeat</em>\n<em>type: bool</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>If this is a repeat event</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int  key</p>\n<p>&lt;!--\n<em>name: key</em>\n_type: int _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>For special keys, one of OF_KEY_* (\n<strong>See also</strong>: ofConstants.h). For all other keys, the Unicode code point you'd expect if this key combo (including modifier keys that may be down) was pressed in a text editor (same as codepoint).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int keycode</p>\n<p>&lt;!--\n<em>name: keycode</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The keycode returned by the windowing system, independent of any modifier keys or keyboard layout settings. For ofAppGLFWWindow this value is one of GLFW_KEY_* (\n<strong>See also</strong>: glfw3.h) - typically, ASCII representation of the symbol on the physical key, so A key always returns 0x41 even if shift, alt, ctrl are down.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int modifiers</p>\n<p>&lt;!--\n<em>name: modifiers</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Key modifiers</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int scancode</p>\n<p>&lt;!--\n<em>name: scancode</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The raw scan code returned by the keyboard, OS and hardware specific.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###enum  ofKeyEventArgs::Type type</p>\n<p>&lt;!--\n<em>name: type</em>\n<em>type: enum  ofKeyEventArgs::Type</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofKeyEventArgs\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: ofEventArgs_\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nThis class is integrated into the openframeworks events system. When a key event (key pressed, key released) happens we record key information inside an object of the class. Used to send event messages. In the new openFrameworks release we can find a very illustrative example about how to use events in openFrameworks.\n\n\n\n\n\n##Methods\n\n\n\n###bool hasModifier(modifier)\n\n<!--\n_syntax: hasModifier(modifier)_\n_name: hasModifier_\n_returns: bool_\n_returns_description: _\n_parameters: int modifier_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofKeyEventArgs()\n\n<!--\n_syntax: ofKeyEventArgs()_\n_name: ofKeyEventArgs_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofKeyEventArgs(type, key)\n\n<!--\n_syntax: ofKeyEventArgs(type, key)_\n_name: ofKeyEventArgs_\n_returns: _\n_returns_description: _\n_parameters: ofKeyEventArgs::Type type, int key_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofKeyEventArgs(type, key, keycode, scancode, codepoint, modifiers)\n\n<!--\n_syntax: ofKeyEventArgs(type, key, keycode, scancode, codepoint, modifiers)_\n_name: ofKeyEventArgs_\n_returns: _\n_returns_description: _\n_parameters: ofKeyEventArgs::Type type, int key, int keycode, int scancode, unsigned int codepoint, int modifiers_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###unsigned int codepoint\n\n<!--\n_name: codepoint_\n_type: unsigned int_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe Unicode code point you'd expect if this key combo (including modifier keys) was pressed in a text editor, or 0 for non-printable characters.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isRepeat\n\n<!--\n_name: isRepeat_\n_type: bool_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nIf this is a repeat event\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int  key\n\n<!--\n_name: key_\n_type: int _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFor special keys, one of OF_KEY_* (\n**See also**: ofConstants.h). For all other keys, the Unicode code point you'd expect if this key combo (including modifier keys that may be down) was pressed in a text editor (same as codepoint).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int keycode\n\n<!--\n_name: keycode_\n_type: int_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe keycode returned by the windowing system, independent of any modifier keys or keyboard layout settings. For ofAppGLFWWindow this value is one of GLFW_KEY_* (\n**See also**: glfw3.h) - typically, ASCII representation of the symbol on the physical key, so A key always returns 0x41 even if shift, alt, ctrl are down.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int modifiers\n\n<!--\n_name: modifiers_\n_type: int_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nKey modifiers\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int scancode\n\n<!--\n_name: scancode_\n_type: int_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe raw scan code returned by the keyboard, OS and hardware specific.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###enum  ofKeyEventArgs::Type type\n\n<!--\n_name: type_\n_type: enum  ofKeyEventArgs::Type_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}