{"data":[{"page":{"entry":{"name":"ofxTCPClient.cpp","filename":"ofxTCPClient.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxNetwork/src/ofxTCPClient.cpp","path":"/addons/ofxNetwork/src/ofxTCPClient_cpp","route":"/addons/ofxNetwork/src/ofxTCPClient.cpp","dir":"../addons/ofxNetwork/src","ext":"cpp","type":"source","id":128,"parent":123,"breadcrumbs":[123,124,36],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxTCPClient.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofAppRunner.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxNetworkUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\nofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">ofxTCPClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tconnected\t<span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tmessageSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tport\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tindex\t\t<span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tstr\t\t\t<span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\ttmpStr\t\t<span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\tipAddr\t\t<span class=\"token operator\">=</span><span class=\"token string\">\"000.000.000.000\"</span><span class=\"token punctuation\">;</span>\n\n\tpartialPrevMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\tmessageDelimiter <span class=\"token operator\">=</span> <span class=\"token string\">\"[/TCP]\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>tmpBuff<span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> TCP_MAX_MSG_SIZE<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\nofxTCPClient<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofxTCPClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">void</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">setVerbose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> _verbose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setVerbose(): is deprecated, replaced by ofLogWarning and ofLogError\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>string ip<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> _port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> blocking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tofxTCPSettings <span class=\"token function\">settings</span><span class=\"token punctuation\">(</span>ip<span class=\"token punctuation\">,</span> _port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tsettings<span class=\"token punctuation\">.</span>blocking <span class=\"token operator\">=</span> blocking<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxTCPSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setup(): couldn't create client\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>settings<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setup(): couldn't connect to \"</span> <span class=\"token operator\">&lt;&lt;</span> settings<span class=\"token punctuation\">.</span>address <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> settings<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">;</span>\n\t\tTCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//we free the connection</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tTCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">SetNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>settings<span class=\"token punctuation\">.</span>blocking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">setMessageDelimiter</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>messageDelimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tport\t\t<span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>port<span class=\"token punctuation\">;</span>\n\tipAddr\t\t<span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">;</span>\n\tconnected\t<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//don't use this one</span>\n<span class=\"token comment\" spellcheck=\"true\">//for server to use internally only!</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">setupConnectionIdx</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> blocking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tindex <span class=\"token operator\">=</span> _index<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//this fetches the port that the server</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//sets up the connection on</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//different to the server's listening port</span>\n\tInetAddr addr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetRemoteAddr</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tport   <span class=\"token operator\">=</span>  addr<span class=\"token punctuation\">.</span><span class=\"token function\">GetPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tipAddr <span class=\"token operator\">=</span>  addr<span class=\"token punctuation\">.</span><span class=\"token function\">DottedDecimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tTCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">SetNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>blocking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconnected \t<span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> connected <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"close(): couldn't close client\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"closing client\"</span><span class=\"token punctuation\">;</span>\n\t\t\tconnected <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">void</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">setMessageDelimiter</span><span class=\"token punctuation\">(</span>string delim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>delim <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tmessageDelimiter <span class=\"token operator\">=</span> delim<span class=\"token punctuation\">;</span> \n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// tcp is a stream oriented protocol</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// so there's no way to be sure were</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// a message ends without using a terminator</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// note that you will receive a trailing [/TCP]\\0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// if sending from here and receiving from receiveRaw or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// other applications</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>connected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"send(): not connected, call setup() first\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tmessage <span class=\"token operator\">=</span> partialPrevMsg <span class=\"token operator\">+</span> message <span class=\"token operator\">+</span> messageDelimiter<span class=\"token punctuation\">;</span>\n\tmessage <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//for flash</span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">SendAll</span><span class=\"token punctuation\">(</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> errorCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> errorCode <span class=\"token operator\">=</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isClosingCondition</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> errorCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"send(): client disconnected\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"send(): sending failed\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// in case of partial send, store the</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// part that hasn't been sent and send</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// with the next message to not corrupt</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// next messages</span>\n\t\tpartialPrevMsg<span class=\"token operator\">=</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tpartialPrevMsg <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">sendRawMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> msg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// tcp is a stream oriented protocol</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// so there's no way to be sure were</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// a message ends without using a terminator</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// note that you will receive a trailing [/TCP]\\0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// if sending from here and receiving from receiveRaw or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// other applications</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>connected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sendRawMsg(): not connected, call setup() first\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\ttmpBuffSend<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttmpBuffSend<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>messageDelimiter<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>messageDelimiter<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">SendAll</span><span class=\"token punctuation\">(</span> tmpBuffSend<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> tmpBuffSend<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> errorCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> errorCode <span class=\"token operator\">=</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isClosingCondition</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> errorCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sendRawMsg(): client disconnected\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sendRawMsg(): sending failed\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// in case of partial send, store the</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// part that hasn't been sent and send</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// with the next message to not corrupt</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// next messages</span>\n\t\ttmpBuffSend<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tmpBuffSend<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>ret<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>tmpBuffSend<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\ttmpBuffSend<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">sendRaw</span><span class=\"token punctuation\">(</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">SendAll</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> errorCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> errorCode <span class=\"token operator\">=</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isClosingCondition</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> errorCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sendRawBytes(): sending failed\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> ret <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">sendRawBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> rawBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> numBytes <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">SendAll</span><span class=\"token punctuation\">(</span>rawBytes<span class=\"token punctuation\">,</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> errorCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> errorCode <span class=\"token operator\">=</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">isClosingCondition</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">,</span> errorCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxTCPClient\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sendRawBytes(): sending failed\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> ret <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//this only works after you have called receive</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">int</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">getNumReceivedBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> messageSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeZeros</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>size<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tbuffer<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tbuffer<span class=\"token punctuation\">[</span>size<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">isClosingCondition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> messageSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> errorCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>messageSize <span class=\"token operator\">==</span> SOCKET_ERROR <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>errorCode <span class=\"token operator\">==</span> <span class=\"token function\">OFXNETWORK_ERROR</span><span class=\"token punctuation\">(</span>CONNRESET<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> errorCode <span class=\"token operator\">==</span> <span class=\"token function\">OFXNETWORK_ERROR</span><span class=\"token punctuation\">(</span>CONNABORTED<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> errorCode <span class=\"token operator\">==</span> <span class=\"token function\">OFXNETWORK_ERROR</span><span class=\"token punctuation\">(</span>CONNREFUSED<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> errorCode <span class=\"token operator\">==</span> EPIPE <span class=\"token operator\">||</span> errorCode <span class=\"token operator\">==</span> <span class=\"token function\">OFXNETWORK_ERROR</span><span class=\"token punctuation\">(</span>NOTCONN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>messageSize <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">IsNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">GetTimeoutReceive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\nstring ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstr    <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> byte<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">peekReceiveRawBytes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>byte<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//only get data from the buffer if we don't have already some complete message</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmpStr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>messageDelimiter<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>tmpBuff<span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> TCP_MAX_MSG_SIZE<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//one more so there's always a \\0 at the end for string concat</span>\n\t\t\tlength <span class=\"token operator\">=</span> TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span>tmpBuff<span class=\"token punctuation\">,</span> TCP_MAX_MSG_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// don't copy the data if there was an error or disconnection</span>\n\t\t\t\t<span class=\"token function\">removeZeros</span><span class=\"token punctuation\">(</span>tmpBuff<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\ttmpStr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> tmpBuff<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// check for connection reset or disconnection</span>\n\t\t<span class=\"token keyword\">int</span> errorCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> errorCode <span class=\"token operator\">=</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isClosingCondition</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">,</span>errorCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmpStr<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// return if there's no more data left in the buffer</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// process any available data</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmpStr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>messageDelimiter<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstr<span class=\"token operator\">=</span>tmpStr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>tmpStr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>messageDelimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ttmpStr<span class=\"token operator\">=</span>tmpStr<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>tmpStr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>messageDelimiter<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>messageDelimiter<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findDelimiter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">,</span> string delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> posInDelimiter<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>delimiter<span class=\"token punctuation\">[</span>posInDelimiter<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tposInDelimiter<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>posInDelimiter<span class=\"token operator\">==</span>delimiter<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> i<span class=\"token operator\">-</span>delimiter<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tposInDelimiter<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">int</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">receiveRawMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> receiveBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> length<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//only get data from the buffer if we don't have already some complete message</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">findDelimiter</span><span class=\"token punctuation\">(</span>tmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>tmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>messageDelimiter<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>tmpBuff<span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> TCP_MAX_MSG_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlength <span class=\"token operator\">=</span> <span class=\"token function\">receiveRawBytes</span><span class=\"token punctuation\">(</span>tmpBuff<span class=\"token punctuation\">,</span> TCP_MAX_MSG_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// don't copy the data if there was an error or disconnection</span>\n\t\t\ttmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>tmpBuff<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// process any available data</span>\n\t<span class=\"token keyword\">int</span> posDelimiter <span class=\"token operator\">=</span> <span class=\"token function\">findDelimiter</span><span class=\"token punctuation\">(</span>tmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>tmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>messageDelimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>posDelimiter<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>receiveBuffer<span class=\"token punctuation\">,</span>tmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>posDelimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> posDelimiter <span class=\"token operator\">+</span> messageDelimiter<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>tmpBuff<span class=\"token punctuation\">,</span>tmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>posDelimiter<span class=\"token operator\">+</span>messageDelimiter<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>tmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>posDelimiter<span class=\"token operator\">+</span>messageDelimiter<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ttmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>tmpBuff<span class=\"token punctuation\">,</span>tmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>posDelimiter<span class=\"token operator\">+</span>messageDelimiter<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\ttmpBuffReceive<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>posDelimiter<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> posDelimiter<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">int</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">receiveRawBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> receiveBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    messageSize <span class=\"token operator\">=</span> TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span>receiveBuffer<span class=\"token punctuation\">,</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> errorCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>messageSize<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> errorCode <span class=\"token operator\">=</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//\t0 is not an error... -1 is</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isClosingCondition</span><span class=\"token punctuation\">(</span>messageSize<span class=\"token punctuation\">,</span> errorCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> messageSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">int</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">peekReceiveRawBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> receiveBuffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    messageSize <span class=\"token operator\">=</span> TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">PeekReceive</span><span class=\"token punctuation\">(</span>receiveBuffer<span class=\"token punctuation\">,</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> errorCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>messageSize<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> errorCode <span class=\"token operator\">=</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isClosingCondition</span><span class=\"token punctuation\">(</span>messageSize<span class=\"token punctuation\">,</span> errorCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> messageSize<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\nstring ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">receiveRaw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    messageSize <span class=\"token operator\">=</span> TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span>tmpBuff<span class=\"token punctuation\">,</span> TCP_MAX_MSG_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> errorCode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>messageSize<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> errorCode <span class=\"token operator\">=</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isClosingCondition</span><span class=\"token punctuation\">(</span>messageSize<span class=\"token punctuation\">,</span> errorCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>messageSize<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> messageSize<span class=\"token operator\">&lt;</span>TCP_MAX_MSG_SIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// null terminate!!</span>\n        tmpBuff<span class=\"token punctuation\">[</span>messageSize<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> tmpBuff<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>connected<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>TCPClient<span class=\"token punctuation\">.</span><span class=\"token function\">CheckIsConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> connected<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\n<span class=\"token keyword\">int</span> ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> port<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------</span>\nstring ofxTCPClient<span class=\"token operator\">::</span><span class=\"token function\">getIP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ipAddr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source"}}],"fetch":[]}