{"data":[{"page":{"entry":{"name":"ofMatrix4x4.h","filename":"ofMatrix4x4.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/math/ofMatrix4x4.h","path":"/openframeworks/math/ofMatrix4x4_h","route":"/openframeworks/math/ofMatrix4x4.h","dir":"../libs/openFrameworks/math","ext":"h","type":"source","id":291,"parent":284,"breadcrumbs":[284,195],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">/*\n *  ofMatrix4x4.h\n *  \n *  Created by Aaron Meyers on 6/22/09 -- modified by Arturo Castro, Zach Lieberman, Memo Akten\n *  based on code from OSG - \n *  see OSG license for more details: \n *  http://www.openscenegraph.org/projects/osg/wiki/Legal\n * \n */</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVec4f.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofQuaternion.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/mat4x4.hpp\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMathConstants.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVec3f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief The ofMatrix4x4 is the big class of the math part of openFrameworks.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// You'll sometimes see it used for doing things like setting where the camera</span>\n<span class=\"token comment\" spellcheck=\"true\">/// in OpenGL (the mathematically calculated one, not the ofCamera one) is </span>\n<span class=\"token comment\" spellcheck=\"true\">/// looking or is pointed, or figuring how to position something in 3d space,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// doing scaling, etc. The great thing about the 4x4 matrix is that it can do </span>\n<span class=\"token comment\" spellcheck=\"true\">/// all these things at the same time. A single ofMatrix4x4 can represent a ton </span>\n<span class=\"token comment\" spellcheck=\"true\">/// of different information about a stuff that goes on in doing 3d </span>\n<span class=\"token comment\" spellcheck=\"true\">/// programming: where an object is, how you want to scale an object, where a </span>\n<span class=\"token comment\" spellcheck=\"true\">/// camera is. Let's look at a few really basic examples:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ![MATS](math/mats.png)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Not particularly exciting, but you can see how they'd be useful. Luckily most</span>\n<span class=\"token comment\" spellcheck=\"true\">/// of the need to transform, rotate, scale, shear, or further bazzlemunge (just</span>\n<span class=\"token comment\" spellcheck=\"true\">/// kidding, bazzlemunging is not a thing) stuff in oF is handled internally by</span>\n<span class=\"token comment\" spellcheck=\"true\">/// objects like ofNode or ofCamera.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// oF uses row-vector style by default, meaning that when transforming a vector</span>\n<span class=\"token comment\" spellcheck=\"true\">/// by multiplying with a matrix, you should put the vector on the left side and</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the matrix (or matrices) to its right. When multiplying by multiple matrices,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the order of application of the transforms is left-to-right. This means that</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the standard order of manipulation operations is </span>\n<span class=\"token comment\" spellcheck=\"true\">/// vector * scale * rotate * translate.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Note that in GLSL, this convention is reversed, and column-vector style is</span>\n<span class=\"token comment\" spellcheck=\"true\">/// used. oF uploads the matrices to the GL context correctly, but you should</span>\n<span class=\"token comment\" spellcheck=\"true\">/// reverse the order of your vertex manipulations to right-to-left style, e.g.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// translate * rotate * scale * vector.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// On the application side, oF has operators which let you do matrix-vector </span>\n<span class=\"token comment\" spellcheck=\"true\">/// multiplication with the vector on the right if that's your preferred style. </span>\n<span class=\"token comment\" spellcheck=\"true\">/// To set up a combined transformation matrix for working in this style, you</span>\n<span class=\"token comment\" spellcheck=\"true\">/// should do matrix transformations with the functions like glTranslate,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// glRotate, and glScale.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofMatrix4x4</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n<span class=\"token comment\" spellcheck=\"true\">//\tfloat _mat[4][4];</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The values of the matrix, stored in row-major order.</span>\n\tofVec4f _mat<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Should this be moved to private?</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Constructors</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The default constructor provides an identity matrix.</span>\n\t<span class=\"token function\">ofMatrix4x4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">makeIdentityMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">ofMatrix4x4</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span> mat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">operator</span> glm<span class=\"token operator\">::</span><span class=\"token function\">mat4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct with a pointer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// You can pass a pointer to floats, and the first 16 contents will be </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// extracted into this matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning the validity of these values is not checked!</span>\n\t<span class=\"token function\">ofMatrix4x4</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> ptr <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotation matrices can be constructed from a quaternion.</span>\n\t<span class=\"token function\">ofMatrix4x4</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> quat <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span>quat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Positional style.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// All 16 values of the matrix as positional arguments in row-major order.</span>\n\t<span class=\"token function\">ofMatrix4x4</span><span class=\"token punctuation\">(</span>\t<span class=\"token keyword\">float</span> a00<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a01<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a02<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a03<span class=\"token punctuation\">,</span>\n\t              <span class=\"token keyword\">float</span> a10<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a11<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a12<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a13<span class=\"token punctuation\">,</span>\n\t              <span class=\"token keyword\">float</span> a20<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a21<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a22<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a23<span class=\"token punctuation\">,</span>\n\t              <span class=\"token keyword\">float</span> a30<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a31<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a32<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a33<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\} end Constructor group</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief destructor.</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">ofMatrix4x4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name make* Methods</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// These methods perform a total matrix makeover. All make* methods delete</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the current data and the matrix becomes a new type of transform.</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix becomes the identity matrix.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeIdentityMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Scale</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Matrix becomes a scale transform.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Accepts x, y, z scale values as a vector or separately.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeScaleMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeScaleMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Translation</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Matrix becomes a translation transform.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Accepts x, y, z translation values as a vector or separately.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeTranslationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeTranslationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Rotation</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Matrix becomes a rotation transform.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param from Matrix becomes a rotation from this vector direction.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param to Matrix becomes a rotation to this vector direction.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> to <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param angle Matrix becomes a rotation by angle (degrees).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param axis Rotation is performed around this vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param angle Matrix becomes a rotation by angle (degrees).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x X-value of the rotation axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Y-value of the rotation axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param z Z-value of the rotation axis.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param quaternion Matrix becomes a rotation that produces the quaternion's orientation.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> quaternion <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix becomes a rotation around multiple axes.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The final rotation is the result of rotating around each of the three</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// axes, in order. Angles are given in degrees, and axes can be arbitrary</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vectors.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis1<span class=\"token punctuation\">,</span>\n\t                 <span class=\"token keyword\">float</span> angle2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis2<span class=\"token punctuation\">,</span>\n\t                 <span class=\"token keyword\">float</span> angle3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Make* methods related to another matrix</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix becomes the inverse of the provided matrix.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">makeInvertOf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix becomes an orthonormalized version of the provided matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The basis vectors (the 3x3 chunk embedded in the upper left of the matrix)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are normalized. This means the resulting matrix has had scaling effects</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// removed. The fourth column and the fourth row are transferred over</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// untouched, so translation will be included as well.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeOrthoNormalOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix becomes the result of the multiplication of two other matrices.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeFromMultiplicationOf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name View matrix make*</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// These functions are based on some OpenGL matrix functions used for</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// perspective settings. See the OpenGL docs of the related function</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// for further details.</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix becomes an orthographic projection matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Related to: glOrtho. The orthographic projection has a box-shaped</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// viewing volume described by the six parameters. Left, right, bottom,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and top specify coordinates in the zNear clipping plane where the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// corresponding box sides intersect it.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeOrthoMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span>\n\t               <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">,</span>\n\t               <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">double</span> zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix becomes a 2D orthographic projection matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Related to: glOrtho2D. The box-shaped viewing volume is </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// described by the four parameters and, implicitly, a zNear of -1 </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and a zFar of 1.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeOrtho2DMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span>\n\t                        <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix becomes a perspective projection matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Related to: glFrustum. The viewing volume is frustum-shaped and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// defined by the six parameters. Left, right, top, and bottom specify </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// coordinates in the zNear clipping plane where the frustum edges intersect</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// it, and the zNear and zFar parameters define the forward distances of </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the view volume. The resulting volume can be vertically and </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// horizontally asymmetrical around the center of the near plane.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeFrustumMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span>\n\t                 <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">,</span>\n\t                 <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">double</span> zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix becomes a perspective projection matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Related to: gluPerspective. The viewing volume is frustum-shaped amd</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// defined by the four parameters. The fovy and aspect ratio</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// are used to compute the positions of the left, right, top, and bottom sides</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// of the viewing volume in the zNear plane. The fovy is the y field-of-view,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the angle made by the top and bottom sides of frustum if they were to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// intersect. The aspect ratio is the width of the frustum divided by its</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// height. Note that the resulting volume is both vertically and </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// horizontally symmetrical around the center of the near plane.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makePerspectiveMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> fovy<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">double</span> aspectRatio<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix becomes a combination of translation and rotation.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Matrix becomes a combination of a translation to the position of 'eye'</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and a rotation matrix which orients an object to point towards 'center'</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// along its z-axis. Use this function if you want an object to look at a </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point from another point in space.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param eye The position of the object.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param center The point which the object is \"looking\" at.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param up The direction which the object considers to be \"up\".</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeLookAtMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> eye<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix becomes a combination of an inverse translation and rotation.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Related to: gluLookAt. This creates the inverse of makeLookAtMatrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The matrix will be an opposite translation from the 'eye' position,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and it will rotate things in the opposite direction of the eye-to-center</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// orientation. This is definitely confusing, but the main reason to use</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// this transform is to set up a view matrix for a camera that's looking </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// at a certain point. To achieve the effect of moving the camera somewhere</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and rotating it so that it points at something, the rest of the world</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// is moved in the *opposite* direction and rotated in the *opposite* way </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// around the camera. This way, you get the same effect as moving the actual</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// camera, but all the projection math can still be done with the camera</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// positioned at the origin (which makes it way simpler).</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">makeLookAtViewMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> eye<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\} end view-related group</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\} end make* group</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Static new* matrix functions</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// These are static utility functions to create new matrices. These</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// functions generally return the equivalent of declaring a matrix and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// calling the corresponding \"make...\" function on it.</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa makeIdentityMatrix</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newIdentityMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa makeScaleMatrix</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newScaleMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> sv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newScaleMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa makeTranslationMatrix</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newTranslationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> dv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newTranslationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa makeRotationMatrix</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newRotationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newRotationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newRotationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newRotationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis1<span class=\"token punctuation\">,</span>\n\t                                   <span class=\"token keyword\">float</span> angle2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis2<span class=\"token punctuation\">,</span>\n\t                                   <span class=\"token keyword\">float</span> angle3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newRotationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> quat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// These functions create new matrices related to glFunctions. See </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the description of the corresponding make* methods for more info.</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa makeOrthoMatrix</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newOrthoMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span>\n\t                                 <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">,</span>\n\t                                 <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">double</span> zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa makeOrtho2DMatrix</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newOrtho2DMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span>\n\t                                   <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa makeFrustumMatrix</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newFrustumMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span>\n\t                                   <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">,</span>\n\t                                   <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">double</span> zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa makePerspectiveMatrix</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newPerspectiveMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> fovy<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">double</span> aspectRatio<span class=\"token punctuation\">,</span>\n\t                                       <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa makeLookAtMatrix</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">newLookAtMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> eye<span class=\"token punctuation\">,</span>\n\t                                  <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> center<span class=\"token punctuation\">,</span>\n\t                                  <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\} end Static new* matrix group</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Accessors</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Write data with `matrix(row,col)=number`</span>\n\t<span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t row<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t col<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> _mat<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Read data with `matrix(row, col)`</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t row<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>size_t col<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> _mat<span class=\"token punctuation\">[</span>row<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>col<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief returns a copy of row i</span>\n\tofVec3f <span class=\"token function\">getRowAsVec3f</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief returns a copy of row i</span>\n\tofVec4f <span class=\"token function\">getRowAsVec4f</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> _mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Access the internal data in `float*` format</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// useful for opengl matrix transformations</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>_mat<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>_mat<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\} end accessors group</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Checking</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Checks if the matrix is valid by ensuring its items are numbers.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isValid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Checks if the matrix contains items that are not numbers.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Checks if the matrix is the identity matrix.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Setters</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Copy a matrix using `=` operator.</span>\n\tofMatrix4x4<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the data of the matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// These functions are analogous to the corresponding constructors.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> a00<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a01<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a02<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a03<span class=\"token punctuation\">,</span>\n\t         <span class=\"token keyword\">float</span> a10<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a11<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a12<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a13<span class=\"token punctuation\">,</span>\n\t         <span class=\"token keyword\">float</span> a20<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a21<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a22<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a23<span class=\"token punctuation\">,</span>\n\t         <span class=\"token keyword\">float</span> a30<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a31<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a32<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a33<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Getters</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gets the inverse matrix.</span>\n\tofMatrix4x4 <span class=\"token function\">getInverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the perspective components from a matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This only works with pure perspective projection matrices.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getOrtho</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> left<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> right<span class=\"token punctuation\">,</span>\n\t              <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> top<span class=\"token punctuation\">,</span>\n\t              <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> zNear<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> zFar<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gets the perspective components for a frustum projection matrix.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getFrustum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> left<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> right<span class=\"token punctuation\">,</span>\n\t                <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> top<span class=\"token punctuation\">,</span>\n\t                <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> zNear<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> zFar<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the frustum settings of a symmetric perspective projection</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Note, if matrix is not a symmetric perspective matrix then the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// shear will be lost.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Asymmetric matrices occur when stereo, power walls, caves and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// reality center display are used.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// In these configuration one should use the getFrustum method instead.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns false if matrix is not a perspective matrix,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// where parameter values are undefined.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getPerspective</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> fovy<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> aspectRatio<span class=\"token punctuation\">,</span>\n\t                    <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token operator\">&amp;</span> zFar<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gets the lookAt determiners of the matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This function will only work for modelview matrices.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">getLookAt</span><span class=\"token punctuation\">(</span>ofVec3f<span class=\"token operator\">&amp;</span> eye<span class=\"token punctuation\">,</span> ofVec3f<span class=\"token operator\">&amp;</span> center<span class=\"token punctuation\">,</span> ofVec3f<span class=\"token operator\">&amp;</span> up<span class=\"token punctuation\">,</span>\n\t               <span class=\"token keyword\">float</span> lookDistance <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Decompose the matrix into translation, rotation,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// scale and scale orientation.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">decompose</span><span class=\"token punctuation\">(</span> ofVec3f<span class=\"token operator\">&amp;</span> translation<span class=\"token punctuation\">,</span>\n\t\t\t\t\tofQuaternion<span class=\"token operator\">&amp;</span> rotation<span class=\"token punctuation\">,</span>\n\t\t\t\t\tofVec3f<span class=\"token operator\">&amp;</span> scale<span class=\"token punctuation\">,</span>\n\t\t\t\t\tofQuaternion<span class=\"token operator\">&amp;</span> so <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Create new matrices as transformation of another.</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Makes a new matrix which is the inverse of the given matrix.</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">getInverseOf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Makes a new matrix which is the transpose of the given matrix.</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">getTransposedOf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Makes a new matrix which is the given matrix, normalized.</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofMatrix4x4 <span class=\"token function\">getOrthoNormalOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Matrix multiplication</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Although OpenGL uses post-multiplication (vector-on-the-right) with</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// column-major matrix memory layout, oF uses pre-multiplication</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (vector-on-the-left) with row-major matrix memory layout by default.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// openGL:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// |   |   |   |   |</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// |:-:|:-:|:-:|:-:|</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// | 0 | 4 | 8 | 12|</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// | 1 | 5 | 9 | 13|</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// | 2 | 6 | 10| 14|</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// | 3 | 7 | 11| 15|</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofMatrix4x4:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// |   |   |   |   |</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// |:-:|:-:|:-:|:-:|</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// | 0 | 1 | 2 | 3 |</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// | 4 | 5 | 6 | 7 |</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// | 8 | 9 | 10| 11|</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// | 12| 13| 14| 15|</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// However, the two memory layouts are compatible because of a funny trick.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// When the ofMatrix4x4 is uploaded into OpenGL's memory, OpenGL treats it</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// like a column-major matrix. The rows of the ofMatrix4x4 are loaded as</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// columns for the GLSL mat4. The result is that the matrix is transposed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This seems like a bug, but it's in fact exactly what we want, because to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// do the transition from pre-multiplication to post-multiplication style,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// we need to perform the very same transpose.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// By using pre-multiplication, oF treats vectors as 1x4 matrices, since </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// that provides a valid 1x4 * 4x4 operation. When moving to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// post-multiplication, OpenGL is treating vectors like columns, </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// providing a similarly valid 4x4 * 4x1 operation. This means that the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///  resulting vector in OGL-land is the transpose of the result when</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// done in oF-land.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Recall that in matrix multiplication,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (V * M * S)^T = (S^T) * (M^T) * (V^T)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// What this means is that to convert from pre-multiplication to </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// post-multiplication, we need to transpose our matrices (and vectors) </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and reverse the order of multiplication. You're already reversing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the order of multiplication by writing your shaders with the vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// on the right, and the implicit transpose that happens when your matrix</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// is uploaded to GL memory accomplishes the transposition for free!</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// For more information on this subject, check out</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// [this post](http://seanmiddleditch.com/matrices-handedness-pre-and-post-multiplication-row-vs-column-major-and-notations/).</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix * vector multiplication.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This operation implicitly treat vectors as column-matrices.</span>\n\t<span class=\"token keyword\">inline</span> ofVec3f <span class=\"token function\">postMult</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> ofVec4f <span class=\"token function\">postMult</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Post-multiply by another matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This matrix becomes `this * other`.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">postMult</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Vector * matrix multiplication.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This operation implicitly treats vectors as row-matrices.</span>\n\t<span class=\"token keyword\">inline</span> ofVec3f <span class=\"token function\">preMult</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> ofVec4f <span class=\"token function\">preMult</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Pre-multiply by another matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This matrix becomes `other * this`.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">preMult</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The *= operation for matrices.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is equivalent to calling postMult(other), but it allows you to do</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// someMatrix *= someMatrix without breaking const-correctness. Calling</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// someMatrix.postMult(someMatrix) won't work.</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> other <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>other <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tofMatrix4x4 <span class=\"token function\">temp</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">postMult</span><span class=\"token punctuation\">(</span> temp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token function\">postMult</span><span class=\"token punctuation\">(</span> other <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief creates a new matrix from the product of two matrices.</span>\n\t<span class=\"token keyword\">inline</span> ofMatrix4x4 <span class=\"token keyword\">operator</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>m <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\tofMatrix4x4 r<span class=\"token punctuation\">;</span>\n\t\tr<span class=\"token punctuation\">.</span><span class=\"token function\">makeFromMultiplicationOf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span>  r<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Matrix * Vector operator.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Calls postMult() internally.</span>\n\t<span class=\"token keyword\">inline</span> ofVec3f <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">postMult</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">inline</span> ofVec4f <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">postMult</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// These are specialized postMult methods, usually you want to use these</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// for transforming with ofVec.</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Equivalent to postMult(newTranslationMatrix(v)).</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postMultTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Equivalent to postMult(scale(v)).</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postMultScale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Equivalent to postMult(newRotationMatrix(q)).</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postMultRotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> q <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postMultTranslate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postMultRotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">postMultScale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Equivalent to preMult(newScaleMatrix(v)).</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preMultScale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Equivalent to preMult(newTranslationMatrix(v)).</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preMultTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Equivalent to preMult(newRotationMatrix(q)).</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">preMultRotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> q <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Matrix transformation</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Set methods</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// All of these methods alter the components,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// deleting the previous data only in that component.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setRotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setTranslation</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> tx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tz <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setTranslation</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name PostMult Transformations</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// All of these methods apply the transformations over the current one,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// calling postMult under the hood. These work as the opposite of the </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// equivalent OpenGL functions.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// For example, glTranslate + glRotate == rotate + translate.</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates by angle (degrees) around the given x, y, z axis.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates by angle (radians) around the given x, y, z axis.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates based on the quarternion.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Translates by tx, ty, tz.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> tx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tz <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Translates along the vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Scales each axis by the corresponding x, y, z.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Scales each axis by the corresponding x, y, z of the vector.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name PreMult Transformations</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// All of these methods apply the transformations over the current one,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// calling preMult under the hood. These work the the same the equivalent </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OpenGL functions.</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa rotate</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">glRotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa rotate</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">glRotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa rotate</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">glRotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa translate</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">glTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> tx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tz <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa translate</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">glTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa scale</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">glScale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa scale</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">glScale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Get Methods</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// These return matrix components. getRotate and getScale can only be </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// used if the matrix only has rotation or only has scale, since these</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// transform values are stored in the same area of the matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// For matrices with both use decompose instead.</span>\n\tofQuaternion <span class=\"token function\">getRotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tofVec3f <span class=\"token function\">getTranslation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tofVec3f <span class=\"token function\">getScale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Apply a 3x3 transform (no translation) of v * M.</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofVec3f <span class=\"token function\">transform3x3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Apply a 3x3 transform (no translation) of M * v.</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">static</span> ofVec3f <span class=\"token function\">transform3x3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// implementation of inline methods</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\t       std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\t       std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n\t\t   std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">isnan</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\nstd<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstd<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>rhs <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span><span class=\"token operator\">*</span> local_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>_mat<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> local_ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span><span class=\"token operator\">*</span> local_ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>_mat<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> local_ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">isIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">&amp;&amp;</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span>  _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t   _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">&amp;&amp;</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span>  _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t   _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">&amp;&amp;</span>  _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t   _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0.0f</span> <span class=\"token operator\">&amp;&amp;</span>  _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">makeOrtho2DMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span>   <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span>\n\t                        <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">makeOrthoMatrix</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">getTranslation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">getScale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tofVec3f <span class=\"token function\">x_vec</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofVec3f <span class=\"token function\">y_vec</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofVec3f <span class=\"token function\">z_vec</span><span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span>x_vec<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> y_vec<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> z_vec<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//static utility methods</span>\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newIdentityMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeIdentityMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newScaleMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeScaleMatrix</span><span class=\"token punctuation\">(</span>sx<span class=\"token punctuation\">,</span> sy<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newScaleMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">newScaleMatrix</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newTranslationMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> tx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tz<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeTranslationMatrix</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span> ty<span class=\"token punctuation\">,</span> tz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newTranslationMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">newTranslationMatrix</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newRotationMatrix</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> q <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofMatrix4x4</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newRotationMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newRotationMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">,</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newRotationMatrix</span><span class=\"token punctuation\">(</span>\t<span class=\"token keyword\">float</span> angle1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis1<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">float</span> angle2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis2<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">float</span> angle3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis3<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span>angle1<span class=\"token punctuation\">,</span> axis1<span class=\"token punctuation\">,</span> angle2<span class=\"token punctuation\">,</span> axis2<span class=\"token punctuation\">,</span> angle3<span class=\"token punctuation\">,</span> axis3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newRotationMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> to <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span>from<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">getInverseOf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeInvertOf</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">getTransposedOf</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 <span class=\"token function\">m</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t               matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t               matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t               matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\t               matrix<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">getOrthoNormalOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> matrix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeOrthoNormalOf</span><span class=\"token punctuation\">(</span>matrix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newOrthoMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span>\n                                        <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">,</span>\n                                        <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zFar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeOrthoMatrix</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> zNear<span class=\"token punctuation\">,</span> zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newOrtho2DMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeOrtho2DMatrix</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newFrustumMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zFar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeFrustumMatrix</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> bottom<span class=\"token punctuation\">,</span> top<span class=\"token punctuation\">,</span> zNear<span class=\"token punctuation\">,</span> zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newPerspectiveMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> fovy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> aspectRatio<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zFar<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makePerspectiveMatrix</span><span class=\"token punctuation\">(</span>fovy<span class=\"token punctuation\">,</span> aspectRatio<span class=\"token punctuation\">,</span> zNear<span class=\"token punctuation\">,</span> zFar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofMatrix4x4 ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">newLookAtMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> eye<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> up<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 m<span class=\"token punctuation\">;</span>\n\tm<span class=\"token punctuation\">.</span><span class=\"token function\">makeLookAtMatrix</span><span class=\"token punctuation\">(</span>eye<span class=\"token punctuation\">,</span> center<span class=\"token punctuation\">,</span> up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">postMult</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">preMult</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> d <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief post-multiplies the vector by the matrix (i.e. returns M mult v).</span>\n<span class=\"token comment\" spellcheck=\"true\">/// The vector is implicitly treated as a column-matrix</span>\n<span class=\"token keyword\">inline</span> ofVec4f ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">postMult</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief pre-multiplies the vector by the matrix (i.e. returns v mult M)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// The vector is implicitly treated as a row-matrix</span>\n<span class=\"token keyword\">inline</span> ofVec4f ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">preMult</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec4f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief performs a pre-multiplication transformation on the vector using only the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// upper left 3x3 portion of the matrix (i.e. only the rotation part).</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">transform3x3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief performs a post-multiplication transformation on the vector using only the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// upper left 3x3 portion of the matrix (i.e. only the rotation part).</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">transform3x3</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t                 <span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> m<span class=\"token punctuation\">.</span>_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief translates this matrix by treating the ofVec3f like a translation matrix,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// and multiplying this Matrix by it in a pre-multiplication manner (T mult M)</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">preMultTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> tmp <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> tmp <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> tmp <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> tmp <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> tmp <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief translates this matrix by treating the ofVec3f like a translation matrix,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// and multiplying this Matrix by it in a post-multiplication manner (M mult T)</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">postMultTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> tmp <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> tmp <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> tmp <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> tmp <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> tmp <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// AARON METHOD</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief the positional argument version of the above</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">postMultTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> y <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> y <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> y <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> y <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> z <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> z <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> z <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> z <span class=\"token operator\">*</span> _mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief treats the ofVec3f like a scaling matrix and edits this Matrix</span>\n<span class=\"token comment\" spellcheck=\"true\">/// by multiplying the vector with it in a pre-multiplication style (V mult M)</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">preMultScale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief treats the ofVec3f like a scaling matrix and edits this Matrix</span>\n<span class=\"token comment\" spellcheck=\"true\">/// by multiplying the vector with it in a post-multiplication style (M mult V)</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">postMultScale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief rotates this Matrix by the provided quaternion</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">postMultRotate</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief rotates this Matrix by the provided angle (in degrees) around an axis defined by the three values</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">postMultRotate</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates this Matrix by the provided angle (in Radians) around an axis defined by the three values</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">postMultRotate</span><span class=\"token punctuation\">(</span>angle<span class=\"token operator\">*</span><span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>RAD_TO_DEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Translates this matrix by the provided amount</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> tx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tz <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">postMultTranslate</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>tz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Translates this matrix by the provided vector</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">translate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">postMultTranslate</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief scales this matrix by the provided scales</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">postMultScale</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief scales this matrix, treating the ofVec3f as the diagonal of a scaling matrix.</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">postMultScale</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// implementation of the gl-style pre-multiplication versions of the above functions</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">glRotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">preMultRotate</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofQuaternion</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">,</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">glRotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">preMultRotate</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofQuaternion</span><span class=\"token punctuation\">(</span>angle<span class=\"token operator\">*</span><span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>RAD_TO_DEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">glRotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">preMultRotate</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">glTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> tx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tz <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">preMultTranslate</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">,</span>ty<span class=\"token punctuation\">,</span>tz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">glTranslate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">preMultTranslate</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">glScale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">preMultScale</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">glScale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">preMultScale</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// AARON METHOD</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">postMultScale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>\n\t_mat<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">preMultRotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> q <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">zeroRotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tofMatrix4x4 r<span class=\"token punctuation\">;</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">setRotate</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">preMult</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">postMultRotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofQuaternion<span class=\"token operator\">&amp;</span> q <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">.</span><span class=\"token function\">zeroRotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tofMatrix4x4 r<span class=\"token punctuation\">;</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">setRotate</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">postMult</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// AARON METHOD</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofMatrix4x4<span class=\"token operator\">::</span><span class=\"token function\">postMultRotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofMatrix4x4 r<span class=\"token punctuation\">;</span>\n\tr<span class=\"token punctuation\">.</span><span class=\"token function\">makeRotationMatrix</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">postMult</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief provides Vector3 * Matrix multiplication. Vectors are implicitly treated as row-matrices.</span>\n<span class=\"token keyword\">inline</span> ofVec3f <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> m <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">preMult</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief provides Vector4 * Matrix multiplication. Vectors are implicitly treated as row-matrices.</span>\n<span class=\"token keyword\">inline</span> ofVec4f <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofMatrix4x4<span class=\"token operator\">&amp;</span> m <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m<span class=\"token punctuation\">.</span><span class=\"token function\">preMult</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n","type":"source"}}],"fetch":[]}