{"data":[{"page":{"entry":{"name":"ofThreadChannel.h","filename":"ofThreadChannel.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/utils/ofThreadChannel.h","path":"/openframeworks/utils/ofThreadChannel_h","route":"/openframeworks/utils/ofThreadChannel.h","dir":"../libs/openFrameworks/utils","ext":"h","type":"source","id":345,"parent":329,"breadcrumbs":[329,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mutex></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;queue></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;condition_variable></span></span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Safely send data between threads without additional synchronization.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel makes it easy to safely and efficiently share data between</span>\n<span class=\"token comment\" spellcheck=\"true\">/// threads without the need for shared memory, mutexes, or other</span>\n<span class=\"token comment\" spellcheck=\"true\">/// synchronization techniques. Additionally, ofThreadChannel employs a</span>\n<span class=\"token comment\" spellcheck=\"true\">/// signalling system that allows receiving threads to sleep until new data</span>\n<span class=\"token comment\" spellcheck=\"true\">/// arrives or the ofThreadChannel is closed.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// A single ofThreadChannel class is designed for one-way communication. In</span>\n<span class=\"token comment\" spellcheck=\"true\">/// most cases an additional ofThreadChannel can be used for two-way</span>\n<span class=\"token comment\" spellcheck=\"true\">/// communication.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Data is sent through the ofThreadChannel in a FIFO (first in, first out)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// order, guaranteeing that that data will be received in the same order that</span>\n<span class=\"token comment\" spellcheck=\"true\">/// it was sent.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// If multiple threads attempt to send data using the same ofThreadChannel, the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// send method will block the calling thread until it is free.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://github.com/openframeworks/ofBook/blob/master/chapters/threads/chapter.md</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\tparam T The data type sent by the ofThreadChannel.</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofThreadChannel</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a default ofThreadChannel.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel must be instantiated with a template parameter such as:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tofThreadChannel&lt;ofPixels> myThreadChannel;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token function\">ofThreadChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">closed</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Block the receiving thread until a new sent value is available.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The receiving thread will block until a new sent value is available. In</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// order to receive data, the user must create an instance of the data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// type, and pass it to the receive method to be set.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel::receive will not make a copy or reallocate data.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel&lt;ofPixels> myThreadChannel;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ofThreadChannel&lt;ofPixels> declared elsewhere.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofPixels myPixelsToSet;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if (myThreadChannel.receive(myPixelsToSet)) {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// If true, `myPixelsToSet` can be used.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// } else {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// If false, thread channel was closed and the value of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// `myPixelsToSet` may be invalid depending on the scope of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// `myPixelsToSet`.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sentValue A reference to a sent value.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if a new value was received or false if the ofThreadChannel was closed.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span> sentValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>closed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>closed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tcondition<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>closed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>sentValue<span class=\"token punctuation\">,</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tqueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief If available, receive a new sent value without blocking.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel::tryReceive is similar to ofThreadChannel::receive,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// except that it will not block the receiving thread.  If no data is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// available, it will return false and continue immediately.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel::tryReceive will not make a copy or reallocate data.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Like ofThreadChannel::receive, in order to receive data, the user must</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// create an instance of the data type, and pass it to the receive method</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to be set.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel&lt;ofPixels> myThreadChannel;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ofThreadChannel&lt;ofPixels> initialized elsewhere.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofPixels myPixelsToSet;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if (myThreadChannel.tryReceive(myPixelsToSet)) {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// If true, `myPixelsToSet` can be used.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// } else {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// If false, there was no new data OR the thread channel was closed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// Either way, the value of `myPixelsToSet` may be invalid depending</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// on the scope of `myPixelsToSet`.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sentValue A reference to a sent value.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if a new value was received or false if the ofThreadChannel was closed.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">tryReceive</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span> sentValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>closed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>sentValue<span class=\"token punctuation\">,</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tqueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief If available, receive a new sent value or wait for a user-specified duration.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel::tryReceive is similar to ofThreadChannel::receive,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// except that it will block the receiving thread for a maximum of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// `timeoutMs` while it waits for sent data.  If no data is available</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// during that time, it will return false and continue.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel::tryReceive will not make a copy or reallocate data.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Like ofThreadChannel::receive, in order to receive data, the user must</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// create an instance of the data type, and pass it to the receive method</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to be set.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel&lt;ofPixels> myThreadChannel;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ofThreadChannel&lt;ofPixels> initialized elsewhere.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofPixels myPixelsToSet;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if (myThreadChannel.tryReceive(myPixelsToSet)) {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// If true, `myPixelsToSet` can be used.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// } else {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// If false, there was no new data OR the thread channel was closed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// Either way, the value of `myPixelsToSet` may be invalid depending</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// on the scope of `myPixelsToSet`.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sentValue A reference to a sent value.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param timeoutMs The number of milliseconds to wait for new data before continuing.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if a new value was received or false if the ofThreadChannel was closed.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">tryReceive</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span> sentValue<span class=\"token punctuation\">,</span> int64_t timeoutMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>closed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tcondition<span class=\"token punctuation\">.</span><span class=\"token function\">wait_for</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">milliseconds</span><span class=\"token punctuation\">(</span>timeoutMs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>closed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tstd<span class=\"token operator\">::</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>sentValue<span class=\"token punctuation\">,</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tqueue<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Send a value to the receiver by making a copy.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This method copies the contents of the sent value, leaving the original</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// data unchanged.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel&lt;ofPixels> myThreadChannel;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ofThreadChannel&lt;ofPixels> initialized elsewhere.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofPixels myPixelsToSend;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // Fill the pixels with valid data, an image for example.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofLoadImage(myPixelsToSend, \"myImage.jpg\");</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // Send `myPixelsToSend` by copying it. `myPixelsToSend` is still valid</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // after sending.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if (myThreadChannel.send(myPixelsToSend)) {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// If true, `myPixelsToSend` was sent successfully.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// } else {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// If false, the thread channel was closed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the value was sent successfully or false if the channel was closed.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>closed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tqueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        condition<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Send a value to the receiver without making a copy.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This method moves the contents of the sent value using `std::move`</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// semantics. This avoids copying the data, but the original data data will</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// be invalidated. Note that the original data will be invalideated even if</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the send fails because the channel is already closed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofThreadChannel&lt;ofPixels> myThreadChannel;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ofThreadChannel&lt;ofPixels> initialized elsewhere.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofPixels myPixelsToSend;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // Fill the pixels with valid data, an image for example.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofLoadImage(myPixelsToSend, \"myImage.jpg\");</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // Send `myPixelsToSend` by moving it. `myPixelsToSend` will no longer</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // be valid, even if the send fails because the channel is closed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if (myThreadChannel.send(std::move(myPixelsToSend))) {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// If true, `myPixelsToSend` was sent successfully.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// `myPixelsToSend` is no longer valid because it was moved.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// } else {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// If false, the thread channel was closed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t// `myPixelsToSend` is no longer valid because it was moved.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the value was sent successfully or false if the channel was closed.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>closed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tqueue<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        condition<span class=\"token punctuation\">.</span><span class=\"token function\">notify_one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Close the ofThreadChannel.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Closing the ofThreadChannel means that no new messages can be sent or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// received. All threads waiting to receive new values will be notified and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// all ofThreadChannel::receive and ofThreadChannel::tryReceive methods</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// will return false.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tclosed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\tcondition<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Queries empty channel.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This call is only an approximation, since messages come from a different</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// thread the channel can return true when calling empty() and then receive</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// a message right afterwards</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The FIFO data queue.</span>\n\tstd<span class=\"token operator\">::</span>queue<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> queue<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The mutext to protect the data.</span>\n\tstd<span class=\"token operator\">::</span>mutex mutex<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The condition even to notify receivers.</span>\n\tstd<span class=\"token operator\">::</span>condition_variable condition<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief True if the channel is closed.</span>\n\t<span class=\"token keyword\">bool</span> closed<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}