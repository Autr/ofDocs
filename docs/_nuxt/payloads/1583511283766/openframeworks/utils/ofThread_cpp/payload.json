{"data":[{"page":{"entry":{"name":"ofThread.cpp","filename":"ofThread.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/utils/ofThread.cpp","path":"/openframeworks/utils/ofThread_cpp","route":"/openframeworks/utils/ofThread.cpp","dir":"../libs/openFrameworks/utils","ext":"cpp","type":"source","id":343,"parent":329,"breadcrumbs":[329,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofThread.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;jni.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxAndroidUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\nofThread<span class=\"token operator\">::</span><span class=\"token function\">ofThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">threadRunning</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">threadDone</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">mutexBlocks</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">isThreadRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> threadRunning<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>thread<span class=\"token operator\">::</span>id ofThread<span class=\"token operator\">::</span><span class=\"token function\">getThreadId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> thread<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>string ofThread<span class=\"token operator\">::</span><span class=\"token function\">getThreadName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">setThreadName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">startThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>threadRunning <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>threadDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofThread\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"- name: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getThreadName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - Cannot start, thread already running.\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tthreadDone <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tthreadRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>mutexBlocks <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\tthread <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ofThread<span class=\"token operator\">::</span>run<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">startThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> mutexBlocks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>threadRunning <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>threadDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofThread\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"- name: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getThreadName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - Cannot start, thread already running.\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    threadDone <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    threadRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>mutexBlocks <span class=\"token operator\">=</span> mutexBlocks<span class=\"token punctuation\">;</span>\n\n\tthread <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">thread</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ofThread<span class=\"token operator\">::</span>run<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mutexBlocks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tmutex<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mutex<span class=\"token punctuation\">.</span><span class=\"token function\">try_lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// mutex is locked, tryLock failed</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> mutex<span class=\"token punctuation\">.</span><span class=\"token function\">try_lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tmutex<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">stopThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    threadRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">waitForThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> callStopThread<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> milliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>threadDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// tell thread to stop</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>callStopThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">stopThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// wait for the thread to finish</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// waitForThread should only be called outside thread</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>INFINITE_JOIN_TIMEOUT <span class=\"token operator\">==</span> milliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            std<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>threadDone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                condition<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span>lck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// Wait for \"joinWaitMillis\" milliseconds for thread to finish</span>\n            std<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>threadDone <span class=\"token operator\">&amp;&amp;</span> condition<span class=\"token punctuation\">.</span><span class=\"token function\">wait_for</span><span class=\"token punctuation\">(</span>lck<span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">milliseconds</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>std<span class=\"token operator\">::</span>cv_status<span class=\"token operator\">::</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// unable to completely wait for thread</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> milliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>this_thread<span class=\"token operator\">::</span><span class=\"token function\">sleep_for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>chrono<span class=\"token operator\">::</span><span class=\"token function\">milliseconds</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>this_thread<span class=\"token operator\">::</span><span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">isCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>this_thread<span class=\"token operator\">::</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> thread<span class=\"token punctuation\">.</span><span class=\"token function\">get_id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>thread <span class=\"token operator\">&amp;</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">getNativeThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> thread<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>thread <span class=\"token operator\">&amp;</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">getNativeThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> thread<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">threadedFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofThread\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"- name: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getThreadName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" - Override ofThread::threadedFunction() in your ofThread subclass.\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofThread<span class=\"token operator\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n\tJNIEnv <span class=\"token operator\">*</span> env<span class=\"token punctuation\">;</span>\n\tjint attachResult <span class=\"token operator\">=</span> <span class=\"token function\">ofGetJavaVMPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">AttachCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>env<span class=\"token punctuation\">,</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>attachResult<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"couldn't attach new thread to java vm\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// user function</span>\n    <span class=\"token comment\" spellcheck=\"true\">// should loop endlessly.</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">threadedFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>exception<span class=\"token operator\">&amp;</span> exc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogFatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofThreadErrorLogger::exception\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> exc<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogFatalError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofThreadErrorLogger::exception\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Unknown exception.\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\tthread<span class=\"token punctuation\">.</span><span class=\"token function\">detach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n\tattachResult <span class=\"token operator\">=</span> <span class=\"token function\">ofGetJavaVMPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">DetachCurrentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n    std<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lck</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthreadRunning <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tthreadDone <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    condition<span class=\"token punctuation\">.</span><span class=\"token function\">notify_all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source"}}],"fetch":[]}