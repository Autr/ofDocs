{"data":[{"page":{"entry":{"name":"ofTrueTypeFont.h","filename":"ofTrueTypeFont.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/graphics/ofTrueTypeFont.h","path":"/openframeworks/graphics/ofTrueTypeFont_h","route":"/openframeworks/graphics/ofTrueTypeFont.h","dir":"../libs/openFrameworks/graphics","ext":"h","type":"source","id":283,"parent":259,"breadcrumbs":[259,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unordered_map></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofRectangle.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofPath.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofTexture.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMesh.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofPixels.h\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\file</span>\n<span class=\"token comment\" spellcheck=\"true\">/// The ofTrueTypeFont class provides an interface to load fonts into</span>\n<span class=\"token comment\" spellcheck=\"true\">/// openFrameworks. The fonts are converted to textures, and can be drawn on</span>\n<span class=\"token comment\" spellcheck=\"true\">/// screen. There are some options when you load the font - what size the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// font is rendered at, whether or not it is anti-aliased, and whether the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// font object will be the full character set or a subset (i.e., extended</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ASCII, which can include diacritics like umlauts, or ASCII). The default</span>\n<span class=\"token comment\" spellcheck=\"true\">/// is anti-aliased, non-full character set. The library uses freetype, which</span>\n<span class=\"token comment\" spellcheck=\"true\">/// has certain patent problems in regards to true type hinting, especially</span>\n<span class=\"token comment\" spellcheck=\"true\">/// at small sizes, so non-anti-aliased type doesn't always render</span>\n<span class=\"token comment\" spellcheck=\"true\">/// beautifully. But we find it quite adequate, and at larger sizes it seems</span>\n<span class=\"token comment\" spellcheck=\"true\">/// to works well.</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> FT_FaceRec_<span class=\"token operator\">*</span>  FT_Face<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Fonts</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string OF_TTF_SANS <span class=\"token operator\">=</span> <span class=\"token string\">\"sans-serif\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string OF_TTF_SERIF <span class=\"token operator\">=</span> <span class=\"token string\">\"serif\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string OF_TTF_MONO <span class=\"token operator\">=</span> <span class=\"token string\">\"monospace\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofTrueTypeShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofUnicode</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">struct</span> range<span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>uint32_t begin<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>uint32_t end<span class=\"token punctuation\">;</span>\n\t\t\n\t\tstd<span class=\"token operator\">::</span>uint32_t <span class=\"token function\">getNumGlyphs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> end <span class=\"token operator\">-</span> begin <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Space<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range IdeographicSpace<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Latin<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Latin1Supplement<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range LatinA<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Greek<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Cyrillic<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Arabic<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range ArabicSupplement<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range ArabicExtendedA<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Devanagari<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range HangulJamo<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range VedicExtensions<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range LatinExtendedAdditional<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range GreekExtended<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range GeneralPunctuation<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range SuperAndSubScripts<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range CurrencySymbols<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range LetterLikeSymbols<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range NumberForms<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Arrows<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range MathOperators<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range MiscTechnical<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range BoxDrawing<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range BlockElement<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range GeometricShapes<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range MiscSymbols<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Dingbats<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Hiragana<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Katakana<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range HangulCompatJamo<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range KatakanaPhoneticExtensions<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range CJKLettersAndMonths<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range CJKUnified<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range DevanagariExtended<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range HangulExtendedA<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range HangulSyllables<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range HangulExtendedB<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range AlphabeticPresentationForms<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range ArabicPresFormsA<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range ArabicPresFormsB<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range KatakanaHalfAndFullwidthForms<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range KanaSupplement<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range RumiNumericalSymbols<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range ArabicMath<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range MiscSymbolsAndPictographs<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Emoticons<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range TransportAndMap<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range EnclosedCharacters<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range Uncategorized<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range AdditionalEmoticons<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range AdditionalTransportAndMap<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> range OtherAdditionalSymbols<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofAlphabet</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> Emoji<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> Japanese<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> Chinese<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> Korean<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> Arabic<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> Devanagari<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> Latin<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> Greek<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> Cyrillic<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> ofTrueTypeFontDirection <span class=\"token operator\">:</span> uint32_t <span class=\"token punctuation\">{</span>\n    OF_TTF_LEFT_TO_RIGHT<span class=\"token punctuation\">,</span>\n    OF_TTF_RIGHT_TO_LEFT\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> ofTrueTypeFontSettings<span class=\"token punctuation\">{</span>\n\n    std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path     fontName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>                       fontSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>                      antialiased <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span>                      contours <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span>                     simplifyAmt <span class=\"token operator\">=</span> <span class=\"token number\">0.3f</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>                       dpi <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    ofTrueTypeFontDirection direction <span class=\"token operator\">=</span> OF_TTF_LEFT_TO_RIGHT<span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> ranges<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofTrueTypeFontSettings</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span><span class=\"token function\">fontName</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">,</span><span class=\"token function\">fontSize</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">addRanges</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>initializer_list<span class=\"token operator\">&lt;</span>ofUnicode<span class=\"token operator\">::</span>range<span class=\"token operator\">></span> alphabet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        ranges<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>ranges<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> alphabet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">addRange</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofUnicode<span class=\"token operator\">::</span>range <span class=\"token operator\">&amp;</span> range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        ranges<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofTrueTypeFont</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a default ofTrueTypeFont.</span>\n\t<span class=\"token function\">ofTrueTypeFont</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the ofTrueTypeFont.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofTrueTypeFont</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ofTrueTypeFont</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTrueTypeFont<span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofTrueTypeFont <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTrueTypeFont<span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ofTrueTypeFont</span><span class=\"token punctuation\">(</span>ofTrueTypeFont<span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofTrueTypeFont <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofTrueTypeFont<span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Load Font</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\t\t\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Loads the font specified by filename, allows you to control size, aliasing, and other parameters.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// loads a font, and allows you to set the following parameters: the filename, the size, if the font is anti-aliased,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if it has a full character set, if you need it to have contours (for getStringPoints) and parameters that control </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the simplification amount for those contours and the dpi of the font.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// default (without dpi), non-full char set, anti aliased, 96 dpi</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param filename The name of the font file to load.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param fontsize The size in pixels to load the font.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param _bAntiAliased true if the font should be anti-aliased.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param _bFullCharacterSet true if the full character set should be cached.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param makeContours true if the vector contours should be cached.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param simplifyAmt the amount to simplify the vector contours.  Larger number means more simplified.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param dpi the dots per inch used to specify rendering size.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the font was loaded correctly.</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">int</span> fontsize<span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">bool</span> _bAntiAliased<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">bool</span> _bFullCharacterSet<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">bool</span> makeContours<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">float</span> simplifyAmt<span class=\"token operator\">=</span><span class=\"token number\">0.3f</span><span class=\"token punctuation\">,</span>\n\t\t\t\t  <span class=\"token keyword\">int</span> dpi<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use load instead\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> <span class=\"token function\">loadFont</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string filename<span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">int</span> fontsize<span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">bool</span> _bAntiAliased<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">bool</span> _bFullCharacterSet<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">bool</span> makeContours<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                  <span class=\"token keyword\">float</span> simplifyAmt<span class=\"token operator\">=</span><span class=\"token number\">0.3f</span><span class=\"token punctuation\">,</span>\n\t\t\t\t  <span class=\"token keyword\">int</span> dpi<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTrueTypeFontSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Has the font been loaded successfully?</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the font was loaded.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Font Settings</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the default dpi for all typefaces.</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setGlobalDpi</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> newDpi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Is the font anti-aliased?</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the font was set to be anti-aliased.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isAntiAliased</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Does the font have a full character set?</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the font was allocated with a full character set.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasFullCharacterSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the number of characters in the loaded character set.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// If you allocate the font using different parameters, you can load in partial </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and full character sets, this helps you know how many characters it can represent.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Number of characters in loaded character set.</span>\n\tstd<span class=\"token operator\">::</span>size_t\t<span class=\"token function\">getNumCharacters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Font Size</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the size of the font.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Size of font, set when font was loaded.</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Computes line height based on font size.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the current line height.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getLineHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets line height for text drawn on screen.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Note the line height is automatically computed based on the font size, when you load in the font.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param height Line height for text drawn on screen.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setLineHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the ascender distance for this font.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The ascender is the vertical distance from the baseline to the highest \"character\" coordinate.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The meaning of \"character\" coordinate depends on the font. Some fonts take accents into account,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// others do not, and still others define it simply to be the highest coordinate over all glyphs.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the font ascender height in pixels.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getAscenderHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the descender distance for this font.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The descender is the vertical distance from the baseline to the lowest \"character\" coordinate.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The meaning of \"character\" coordinate depends on the font. Some fonts take accents into account,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// others do not, and still others define it simply to be the lowest coordinate over all glyphs.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This value will be negative for descenders below the baseline (which is typical).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the font descender height in pixels.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getDescenderHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the global bounding box for this font.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The global bounding box is the rectangle inside of which all glyphs in the font can fit.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Glyphs are drawn starting from (0,0) in the returned box (though note that the box can</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// extend in any direction out from the origin).</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the font descender height in pixels.</span>\n    <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> <span class=\"token function\">getGlyphBBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns letter spacing of font object.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// You can control this by the ofTrueTypeFont::setLetterSpacing() function. 1.f = default spacing,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// less than 1.0 means tighter spacing, greater than 1.0 means wider spacing.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the letter spacing of font object.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getLetterSpacing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets the letter spacing of the font object.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 1.f = default spacing, less than 1.f would be tighter spacing, greater than 1.f would be wider spacing.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param spacing Scale for spacing between letters for this font.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setLetterSpacing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> spacing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a variable that represents how wide spaces are.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The value returned is a scalar for the advance (=width) of the whitespace glyph, so 1.0 means</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// that a space will be the default width of a whitespace glyph of this font, 2.0 means that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// it's 2 times the default width, etc.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the width of the space.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getSpaceSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets the width for the whitespace character for this font.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This number, which defaults to 1.0, scales the width of a whitespace, based on the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// width of the whitespace glyph of this font.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Setting spaceSize to 2.f will make whitespaces twice as wide, 0.5f will make whitespaces</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// half as wide, etc.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param size Scales the width of the whitespace glyph for this font.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setSpaceSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the string width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is essentially the width component of the ofTrueTypeFont::getStringBoundingBox() rectangle.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param s The string to get the width of.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the string width. </span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">stringWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the string height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is essentially the height component of the ofTrueTypeFont::getStringBoundingBox() rectangle.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param s The string to get the height of.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the string height.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">stringHeight</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the bounding box of a string as a rectangle.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param s The string to get bounding box of.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x X position of returned rectangle.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Y position of returned rectangle.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the bounding box of a string as a rectangle.</span>\n\tofRectangle <span class=\"token function\">getStringBoundingBox</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Drawing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draws a string s at position x,y.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param s String to draw</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x X position of string</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Y position of string</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draws the string as if it was geometrical shapes.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Uses the information contained in ofTTFContour and ofTTFCharacter.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x X position of shapes</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Y position of shapes</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawStringAsShapes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\todo</span>\n\tofPath <span class=\"token function\">getCharacterAsPoints</span><span class=\"token punctuation\">(</span>uint32_t character<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> filled<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">></span> <span class=\"token function\">getStringAsPoints</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>  str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> filled<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofMesh <span class=\"token operator\">&amp;</span> <span class=\"token function\">getStringMesh</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>  s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getFontTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tofTexture <span class=\"token function\">getStringTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>  s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tglm<span class=\"token operator\">::</span>vec2 <span class=\"token function\">getFirstGlyphPosForTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isValidGlyph</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns current font direction</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setDirection</span><span class=\"token punctuation\">(</span>ofTrueTypeFontDirection direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t\n\t<span class=\"token keyword\">bool</span> bLoadedOk<span class=\"token punctuation\">;</span>\n\t\n\tstd<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">></span> charOutlines<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">></span> charOutlinesNonVFlipped<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">></span> charOutlinesContour<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">></span> charOutlinesNonVFlippedContour<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">float</span> lineHeight<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> ascenderHeight<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> descenderHeight<span class=\"token punctuation\">;</span>\n\tofRectangle glyphBBox<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> letterSpacing<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> spaceSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> fontUnitScale<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> glyphProps<span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>size_t characterIndex<span class=\"token punctuation\">;</span>\n\t\tuint32_t glyph<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">long</span> height<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">long</span> width<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">long</span> bearingX<span class=\"token punctuation\">,</span> bearingY<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">long</span> xmin<span class=\"token punctuation\">,</span> xmax<span class=\"token punctuation\">,</span> ymin<span class=\"token punctuation\">,</span> ymax<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">long</span> advance<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> tW<span class=\"token punctuation\">,</span>tH<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> t1<span class=\"token punctuation\">,</span>t2<span class=\"token punctuation\">,</span>v1<span class=\"token punctuation\">,</span>v2<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> glyph<span class=\"token punctuation\">{</span>\n\t\tglyphProps props<span class=\"token punctuation\">;</span>\n\t\tofPixels pixels<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>glyphProps<span class=\"token operator\">></span> cps<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// properties for each character</span>\n\n\tofTrueTypeFontSettings settings<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>unordered_map<span class=\"token operator\">&lt;</span>uint32_t<span class=\"token punctuation\">,</span>size_t<span class=\"token operator\">></span> glyphIndexMap<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getKerning</span><span class=\"token punctuation\">(</span>uint32_t leftC<span class=\"token punctuation\">,</span> uint32_t rightC<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawChar</span><span class=\"token punctuation\">(</span>uint32_t c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlipped<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawCharAsShape</span><span class=\"token punctuation\">(</span>uint32_t c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlipped<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> filled<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">createStringMesh</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlipped<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tglyph <span class=\"token function\">loadGlyph</span><span class=\"token punctuation\">(</span>uint32_t utf8<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> glyphProps <span class=\"token operator\">&amp;</span> <span class=\"token function\">getGlyphProperties</span><span class=\"token punctuation\">(</span>uint32_t glyph<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">iterateString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlipped<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec2<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tsize_t <span class=\"token function\">indexForGlyph</span><span class=\"token punctuation\">(</span>uint32_t glyph<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tofTexture texAtlas<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">mutable</span> ofMesh stringQuads<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_ANDROID) || defined(TARGET_OF_IOS)</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ofUnloadAllFontTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ofReloadAllFontTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">struct</span> FT_FaceRec_<span class=\"token operator\">></span>\tface<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> glyphProps invalidProps<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span>\t\t<span class=\"token function\">unloadTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span>\t\t<span class=\"token function\">reloadTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span>\t<span class=\"token function\">initLibraries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finishLibraries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ofExitCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}