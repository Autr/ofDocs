{"data":[{"page":{"entry":{"name":"ofGraphicsConstants.h","filename":"ofGraphicsConstants.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/graphics/ofGraphicsConstants.h","path":"/openframeworks/graphics/ofGraphicsConstants_h","route":"/openframeworks/graphics/ofGraphicsConstants.h","dir":"../libs/openFrameworks/graphics","ext":"h","type":"source","id":270,"parent":259,"breadcrumbs":[259,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMathConstants.h\"</span></span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> ofColor_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> ofFloatColor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ofDefaultVertexType <span class=\"token operator\">=</span> ofDefaultVec3<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ofDefaultNormalType <span class=\"token operator\">=</span> ofDefaultVec3<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ofDefaultColorType <span class=\"token operator\">=</span> ofFloatColor<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ofDefaultTexCoordType <span class=\"token operator\">=</span> ofDefaultVec2<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> ofPolyRenderMode<span class=\"token punctuation\">{</span>\n\tOF_MESH_POINTS<span class=\"token punctuation\">,</span>\n\tOF_MESH_WIREFRAME<span class=\"token punctuation\">,</span>\n\tOF_MESH_FILL\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">enum</span> ofPrimitiveMode<span class=\"token punctuation\">{</span>\n\tOF_PRIMITIVE_TRIANGLES<span class=\"token punctuation\">,</span>\n\tOF_PRIMITIVE_TRIANGLE_STRIP<span class=\"token punctuation\">,</span>\n\tOF_PRIMITIVE_TRIANGLE_FAN<span class=\"token punctuation\">,</span>\n\tOF_PRIMITIVE_LINES<span class=\"token punctuation\">,</span>\n\tOF_PRIMITIVE_LINE_STRIP<span class=\"token punctuation\">,</span>\n\tOF_PRIMITIVE_LINE_LOOP<span class=\"token punctuation\">,</span>\n\tOF_PRIMITIVE_POINTS<span class=\"token punctuation\">,</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\tOF_PRIMITIVE_LINES_ADJACENCY<span class=\"token punctuation\">,</span>\n\tOF_PRIMITIVE_LINE_STRIP_ADJACENCY<span class=\"token punctuation\">,</span>\n\tOF_PRIMITIVE_TRIANGLES_ADJACENCY<span class=\"token punctuation\">,</span>\n\tOF_PRIMITIVE_TRIANGLE_STRIP_ADJACENCY<span class=\"token punctuation\">,</span>\n\tOF_PRIMITIVE_PATCHES\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Used to represent the available fill modes.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofBaseRenderer</span>\n<span class=\"token keyword\">enum</span> ofFillFlag<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw shapes as outlines, unfilled.</span>\n\tOF_OUTLINE<span class=\"token operator\">=</span>\t<span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw shapes filled with the current draw color.</span>\n\tOF_FILLED <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span>\t\tOF_MAX_STYLE_HISTORY\t32</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\deprecated Not currently used in the OF codebase.</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span>\t\tOF_MAX_VIEWPORT_HISTORY\t32</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\deprecated Not currently used in the OF codebase.</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span>\t\tOF_MAX_CIRCLE_PTS 1024</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Used to represent the available blending modes for drawing.</span>\n<span class=\"token keyword\">enum</span> ofBlendMode<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Blend mode is disabled.</span>\n\tOF_BLENDMODE_DISABLED <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Blend mode used for alpha blending.</span>\n\tOF_BLENDMODE_ALPHA \t  <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Blend mode used for additive blending.</span>\n\tOF_BLENDMODE_ADD \t  <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Blend mode used for subtractive blending.</span>\n\tOF_BLENDMODE_SUBTRACT <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Blend mode used for multiplicative blending.</span>\n\tOF_BLENDMODE_MULTIPLY <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Blend mode used for screen blending.</span>\n\tOF_BLENDMODE_SCREEN   <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Represents the gradient types available to ofBackgroundGradient().</span>\n<span class=\"token keyword\">enum</span> ofGradientMode <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Represents a top-to-bottom linear gradient.</span>\n\tOF_GRADIENT_LINEAR <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Represents a circular gradient beginning at the screen's center.</span>\n\tOF_GRADIENT_CIRCULAR<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Represents a horizontal bar gradient.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///  This is a horizontal gradient starting across the screen's center,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///  and extending both to the top and bottom of the screen.</span>\n\tOF_GRADIENT_BAR\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief represents the available polygon winding modes.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// These are straight out of glu, but renamed and included here</span>\n<span class=\"token comment\" spellcheck=\"true\">/// for convenience.  We don't mean to wrap the whole glu library</span>\n<span class=\"token comment\" spellcheck=\"true\">/// (or any other library for that matter), but these defines are useful</span>\n<span class=\"token comment\" spellcheck=\"true\">/// to give people flexibility over the polygonizer.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofPath::tessellate()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofTessellator::performTessellation()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://glprogramming.com/red/images/Image128.gif</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://glprogramming.com/red/chapter11.html</span>\n<span class=\"token keyword\">enum</span> ofPolyWindingMode<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Fill odd winding numbers.</span>\n\tOF_POLY_WINDING_ODD \t        <span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Fill all non-zero winding numbers.</span>\n\tOF_POLY_WINDING_NONZERO         <span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Fill all winding numbers greater than zero.</span>\n\tOF_POLY_WINDING_POSITIVE        <span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Fill all winding numbers less than zero.</span>\n\tOF_POLY_WINDING_NEGATIVE        <span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Fill all winding numbers greater than 1 or less than -1.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This stands for \"Fill ABSolute values Greater than EQual to TWO\".</span>\n\tOF_POLY_WINDING_ABS_GEQ_TWO\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief represents the available matrix coordinate system handednesses.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofMatrixStack</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://seanmiddleditch.com/matrices-handedness-pre-and-post-multiplication-row-vs-column-major-and-notations/</span>\n<span class=\"token keyword\">enum</span> ofHandednessType <span class=\"token punctuation\">{</span>OF_LEFT_HANDED<span class=\"token punctuation\">,</span> OF_RIGHT_HANDED<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief represents the available matrix types used internally in ::ofMatrixStack.</span>\n<span class=\"token keyword\">enum</span> ofMatrixMode <span class=\"token punctuation\">{</span>OF_MATRIX_MODELVIEW<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> OF_MATRIX_PROJECTION<span class=\"token punctuation\">,</span> OF_MATRIX_TEXTURE<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets the bitmap drawing mode for text.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofSetDrawBitmapMode()</span>\n<span class=\"token keyword\">enum</span> ofDrawBitmapMode<span class=\"token punctuation\">{</span>\n\tOF_BITMAPMODE_SIMPLE <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\tOF_BITMAPMODE_SCREEN<span class=\"token punctuation\">,</span>\n\tOF_BITMAPMODE_VIEWPORT<span class=\"token punctuation\">,</span>\n\tOF_BITMAPMODE_MODEL<span class=\"token punctuation\">,</span>\n\tOF_BITMAPMODE_MODEL_BILLBOARD\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Used to represent the available rectangle drawing modes.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofRectangle</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofTexture</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofImage</span>\n<span class=\"token keyword\">enum</span> ofRectMode<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Represents the mode where rectangles draw from the top left.</span>\n\tOF_RECTMODE_CORNER<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Represents the mode where rectangles draw from the center.</span>\n\tOF_RECTMODE_CENTER<span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Used to represent the available channel types in ofImage.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// These represent an abstraction of both CPU pixels (ofPixels) and GPU pixels</span>\n<span class=\"token comment\" spellcheck=\"true\">/// (ofTexture). In most cases, developers should prefer ::ofPixelFormat over</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ::ofImageType for a more precise description of channel types.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofImage</span>\n<span class=\"token keyword\">enum</span> ofImageType<span class=\"token operator\">:</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A single channel (or monochrome) image.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa OF_PIXELS_GRAY</span>\n\tOF_IMAGE_GRAYSCALE\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A three channel (or RGB) image.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa OF_PIXELS_RGB</span>\n\tOF_IMAGE_COLOR\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A four channel (or RGBA) image.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa OF_PIXELS_RGBA</span>\n\tOF_IMAGE_COLOR_ALPHA\t<span class=\"token operator\">=</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief An unknown and unsupported image type.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa OF_PIXELS_UNKNOWN</span>\n\tOF_IMAGE_UNDEFINED\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0x03</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}