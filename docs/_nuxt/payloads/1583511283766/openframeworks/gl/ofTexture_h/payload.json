{"data":[{"page":{"entry":{"name":"ofTexture.h","filename":"ofTexture.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/gl/ofTexture.h","path":"/openframeworks/gl/ofTexture_h","route":"/openframeworks/gl/ofTexture.h","dir":"../libs/openFrameworks/gl","ext":"h","type":"source","id":254,"parent":235,"breadcrumbs":[235,195],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/mat4x4.hpp\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGraphicsBaseTypes.h\"</span></span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofRectangle</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofPixels_</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> ofPixels_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> ofPixels<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> ofPixels_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token operator\">></span> ofShortPixels<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> ofPixels_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> ofFloatPixels<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofTexture</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBufferObject</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\file</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofTexture is used to create OpenGL textures that live on your graphics card</span>\n<span class=\"token comment\" spellcheck=\"true\">/// (GPU). While you can certainly use ofTexture directly to manipulate and</span>\n<span class=\"token comment\" spellcheck=\"true\">/// textures, more often ofTexture will be used internally by classes like</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofImage or ofVideoGrabber.  That said, ofImage and other classes that use</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofTexture internally often provide access to the ofTexture.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofTexture allows use of non-power of 2 textures in OpenGL and has a set</span>\n<span class=\"token comment\" spellcheck=\"true\">/// of functions simplify the process of transfering pixel data to and from</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the GPU in various formats.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Users must _allocate_ the texture before drawing it or loading data into it.</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\section Global Texture Settings</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Check whether OF is using GL_TEXTURE_RECTANGLE rectangular or GL_TEXTURE_2D textures.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofEnableArbTex()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if using GL_TEXTURE_RECTANGLE textures, false if using GL_TEXTURE_2D textures.</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofGetUsingArbTex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Use GL_TEXTURE_RECTANGLE textures.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// GL_TEXTURE_RECTANGLE textures are more intuitive since they allow pixel</span>\n<span class=\"token comment\" spellcheck=\"true\">/// based coordinates and are enabled by default.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// GL_TEXTURE_2D textures use normalised texture coordinates (a float value</span>\n<span class=\"token comment\" spellcheck=\"true\">/// between 0 and 1 is used to express texture coordinates along width and</span>\n<span class=\"token comment\" spellcheck=\"true\">/// height).</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// GL_TEXTURE_2D textures are more widely supported and allow advanced features</span>\n<span class=\"token comment\" spellcheck=\"true\">/// such as mipmaps and texture compression.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofDisableArbTex()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning GL_TEXTURE_RECTANGLE is not available in OpenGL ES.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning GL_TEXTURE_RECTANGLE does not support mipmaps.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofEnableArbTex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Use GL_TEXTURE_2D textures.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// GL_TEXTURE_2D is OpenGL's default way of handling textures and supports a</span>\n<span class=\"token comment\" spellcheck=\"true\">/// wider range of core OpenGL features such as mipmaps.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofEnableArbTex()</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofDisableArbTex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Check whether OF is using normalized or pixel texture coordinates.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofEnableNormalizedTexCoords()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if using normalized (0 - 1) texture coordinates.</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofGetUsingNormalizedTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Use normalized (0 - 1) texture coordinates.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// By default, textures in OF work with pixel-based coordinates based on given</span>\n<span class=\"token comment\" spellcheck=\"true\">/// content dimensions (images size, fbo size, etc). Normalized (0 - 1)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// coordinates are the traditional OpenGL default as they allow working with</span>\n<span class=\"token comment\" spellcheck=\"true\">/// internal texture data without having to worry about specific dimensions of</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the content.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This overrides individual ofTexture wrap settings.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.opengl.org/sdk/docs/man4/html/glTexParameter.xhtml</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofEnableNormalizedTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Use pixel-based texture coordinates.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofEnableNormalizedTexCoords()</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofDisableNormalizedTexCoords</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set custom global texture wrapping.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// By default, textures are clamped to their edges with GL_CLAMP_TO_EDGE.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Setting a repeat mode like GL_REPEAT allows you to create tiled backgrounds</span>\n<span class=\"token comment\" spellcheck=\"true\">/// with small textures.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This overrides individual ofTexture wrap settings.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofTexture::setTextureWrap</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.opengl.org/sdk/docs/man4/html/glTexParameter.xhtml</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning Deprecated. Use member methods instead.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param wrapS wrap parameter for texture coordinate s.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param wrapT wrap parameter for texture coordinate t.</span>\n<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method ofTexture::setTextureWrap() instead.\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token function\">ofSetTextureWrap</span><span class=\"token punctuation\">(</span>GLfloat wrapS <span class=\"token operator\">=</span> GL_CLAMP_TO_EDGE<span class=\"token punctuation\">,</span> GLfloat wrapT <span class=\"token operator\">=</span> GL_CLAMP_TO_EDGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Check whether OF is using custom global texture wrapping.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning Deprecated. Use member methods instead.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofSetTextureWrap()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if OF is currently using custom global texture wrapping. </span>\n<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method ofTexture::setTextureWrap() instead.\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> <span class=\"token function\">ofGetUsingCustomTextureWrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Removes global custom texture wrapping.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Restores individual ofTexture wrap settings.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning Deprecated. Use member methods instead.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofSetTextureWrap()</span>\n<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method ofTexture::setTextureWrap() instead.\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token function\">ofRestoreTextureWrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set custom global texture minification/magnification scaling filters.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// This setting allows global control over how OpenGL scales textures. It</span>\n<span class=\"token comment\" spellcheck=\"true\">/// overrides individual ofTexture min &amp; mag filter settings.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning Deprecated. Use member methods instead.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofTexture::setTextureMinMagFilter()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param minFilter minifying filter for scaling a pixel to a smaller area.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param magFilter magnifying filter for scaling a pixel to a larger area.</span>\n<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method ofTexture::setTextureMinMagFilter() instead.\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token function\">ofSetMinMagFilters</span><span class=\"token punctuation\">(</span>GLfloat minFilter <span class=\"token operator\">=</span> GL_LINEAR<span class=\"token punctuation\">,</span> GLfloat magFilter <span class=\"token operator\">=</span> GL_LINEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Check whether OF is using custom global texture scaling filters.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if OF is currently using custom texture scaling filters.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning Deprecated. Use member methods instead.</span>\n<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method ofTexture::setTextureMinMagFilter() instead.\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> <span class=\"token function\">ofGetUsingCustomMinMagFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Removes global custom texture wrapping.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Restores individual ofTexture min mag filter settings.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\warning Deprecated. Use member methods instead.</span>\n<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method ofTexture::setTextureMinMagFilter() instead.\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token function\">ofRestoreMinMagFilters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Texture compression types.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Compression is only available through OpenGL for textures using</span>\n<span class=\"token comment\" spellcheck=\"true\">/// GL_TEXTURE_2D, *not* GL_TEXTURE_RECTANGLE, also note that most compression</span>\n<span class=\"token comment\" spellcheck=\"true\">/// algorithms work on blocks of 4x4 pixels, and therefore expect compressed</span>\n<span class=\"token comment\" spellcheck=\"true\">/// textures to have multiple-of-four dimensions.</span>\n<span class=\"token keyword\">enum</span> ofTexCompression <span class=\"token punctuation\">{</span>\n\tOF_COMPRESS_NONE<span class=\"token punctuation\">,</span>\t<span class=\"token comment\" spellcheck=\"true\">///&lt; No compression.</span>\n\tOF_COMPRESS_SRGB<span class=\"token punctuation\">,</span>\t<span class=\"token comment\" spellcheck=\"true\">///&lt; sRGB compression.</span>\n\tOF_COMPRESS_ARB\t\t<span class=\"token comment\" spellcheck=\"true\">///&lt; ARB compression.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofTextureData</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\advanced</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Internal texture data structure.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Used by ofTexture internally. You won't need to work with this in most cases.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofTextureData</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofTextureData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttextureID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t\tglInternalFormat <span class=\"token operator\">=</span> GL_RGB8<span class=\"token punctuation\">;</span>\n\t\ttextureTarget <span class=\"token operator\">=</span> GL_TEXTURE_RECTANGLE_ARB<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\tglInternalFormat <span class=\"token operator\">=</span> GL_RGB<span class=\"token punctuation\">;</span>\n\t\ttextureTarget <span class=\"token operator\">=</span> GL_TEXTURE_2D<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t\ttex_t <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\ttex_u <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\ttex_w <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\ttex_h <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\twidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\theight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tbFlipTexture <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tcompressionType <span class=\"token operator\">=</span> OF_COMPRESS_NONE<span class=\"token punctuation\">;</span>\n\t\tbAllocated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tbUseExternalTextureID <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tuseTextureMatrix <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tminFilter <span class=\"token operator\">=</span> GL_LINEAR<span class=\"token punctuation\">;</span>\n\t\tmagFilter <span class=\"token operator\">=</span> GL_LINEAR<span class=\"token punctuation\">;</span>\n\t\t\n\t\twrapModeHorizontal <span class=\"token operator\">=</span> GL_CLAMP_TO_EDGE<span class=\"token punctuation\">;</span>\n\t\twrapModeVertical <span class=\"token operator\">=</span> GL_CLAMP_TO_EDGE<span class=\"token punctuation\">;</span>\n\t\thasMipmap <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tbufferId <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> textureID<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; GL internal texture ID.</span>\n\t<span class=\"token keyword\">int</span> textureTarget<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; GL texture type, either GL_TEXTURE_2D or</span>\n\t                   <span class=\"token comment\" spellcheck=\"true\">///&lt; GL_TEXTURE_RECTANGLE_ARB.</span>\n\t<span class=\"token keyword\">int</span> glInternalFormat<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; GL internal format, e.g. GL_RGB8.</span>\n                        <span class=\"token comment\" spellcheck=\"true\">///&lt; \\sa http://www.opengl.org/wiki/Image_Format</span>\n\t\n\t<span class=\"token keyword\">float</span> tex_t<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Texture horizontal coordinate, ratio of width to display width.</span>\n\t<span class=\"token keyword\">float</span> tex_u<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Texture vertical coordinate, ratio of height to display height.</span>\n\t<span class=\"token keyword\">float</span> tex_w<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Texture width (in pixels).</span>\n\t<span class=\"token keyword\">float</span> tex_h<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Texture height (in pixels).</span>\n\t<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Texture display size.</span>\n\t\n\t<span class=\"token keyword\">bool</span> bFlipTexture<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Should the texture be flipped vertically?</span>\n\tofTexCompression compressionType<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Texture compression type.</span>\n\t<span class=\"token keyword\">bool</span> bAllocated<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Has the texture been allocated?</span>\n\n\tGLint minFilter<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Filter to use for minification (reduction).</span>\n\tGLint magFilter<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Filter to use for magnification (enlargement).</span>\n\n\tGLint wrapModeHorizontal<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; How will the texture wrap around horizontally?</span>\n\tGLint wrapModeVertical<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; How will the texture wrap around vertically?</span>\n\t\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> bufferId<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Optionally if the texture is backed by a buffer so we can bind it</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tstd<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofTexture<span class=\"token operator\">></span> alphaMask<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Optional alpha mask to bind</span>\n\t<span class=\"token keyword\">bool</span> bUseExternalTextureID<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Are we using an external texture ID? </span>\n\tglm<span class=\"token operator\">::</span>mat4 textureMatrix<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; For required transformations.</span>\n\t<span class=\"token keyword\">bool</span> useTextureMatrix<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Apply the transformation matrix?</span>\n\t<span class=\"token keyword\">bool</span> hasMipmap<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; True if mipmap has been generated for this texture, false by default.</span>\n\n\t<span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofTexture</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable the global texture \"edge hack\" to compensate for edge artifacts.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Adds a 2 pixel offset to avoid possible edge artifacts (typically a black or</span>\n<span class=\"token comment\" spellcheck=\"true\">/// white border). This *very slightly* alters the image by scaling.  This is</span>\n<span class=\"token comment\" spellcheck=\"true\">/// enabled by default.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofEnableTextureEdgeHack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\todo Add docs on why the \"edge hack\" is needed.</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable global texture \"edge hack\".</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofEnableTextureEdgeHack()</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofDisableTextureEdgeHack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Check whether OF is using the texture \"edge hack\".</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofEnableTextureEdgeHack()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if OF is currently using the texture \"edge hack\".</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofIsTextureEdgeHackEnabled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofTexture</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A wrapper class for an OpenGL texture.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofTexture</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseDraws <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Construction and Allocation</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct an ofTexture instance.</span>\n\t<span class=\"token function\">ofTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct an ofTexture from an existing ofTexture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mom The ofTexture to copy. Reuses internal GL texture ID.</span>\n\t<span class=\"token function\">ofTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofTexture</span><span class=\"token punctuation\">(</span>ofTexture <span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate the texture using the given settings.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is useful if you need manual control over loading a number of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// textures with the same settings. Make sure to set the texture data </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// parameters first.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param textureData The settings to use when allocating the ofTexture.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTextureData <span class=\"token operator\">&amp;</span> textureData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate the texture using the given settings and custom format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param textureData The settings to use when allocating the ofTexture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glFormat GL texture format: GL_RGBA, GL_LUMINANCE, etc.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pixelType GL pixel type: GL_UNSIGNED_BYTE, GL_FLOAT, etc.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTextureData <span class=\"token operator\">&amp;</span> textureData<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pixelType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate texture of a given size and format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The width (w) and height (h) do not necessarily need to be powers of 2,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// but they do need to be large enough to contain the data you will upload</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The internal data type `glFormat` describes how OpenGL will store this</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// texture internally. For example, if you want a grayscale texture, you</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// can use `GL_LUMINANCE`. You can upload what ever type of data you want</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (using `loadData()`) but internally, opengl will store the information</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// as grayscale. Other types include: `GL_RGB`, `GL_RGBA`.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This method applies the currently set OF texture type and defaults to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ARB rectangular textures if they are supported. (They are not supported</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// on OpenGL ES).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Desired width in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Desired height in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glInternalFormat OpenGL internal data format: `GL_RGBA`, `GL_LUMINANCE`, etc.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glInternalFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate texture of a given size and format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa allocate(int w, int h, int glInternalFormat)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Desired width in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Desired height in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glInternalFormat The internal openGL format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glFormat The openGL format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pixelType GL pixel type: GL_UNSIGNED_BYTE, GL_FLOAT, etc.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glInternalFormat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pixelType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate texture of a given size and format. Specify texture type.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This allows to enable the ARBE extension for this texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This will overide the default OF texture type, in case you need a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// square texture (`GL_TEXTURE_2D`).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning ARB textures are not available in OpenGL ES.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofEnableArbTex()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa allocate(int w, int h, int glInternalFormat)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Desired width in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Desired height in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glInternalFormat The internal openGL format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bUseARBExtension Set to true to use rectangular textures.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glInternalFormat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bUseARBExtension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate texture of a given size, format, &amp; type.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa allocate(int w, int h, int glInternalFormat)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Desired width in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Desired height in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glInternalFormat OpenGL data format: `GL_RGBA`, `GL_LUMINANCE`, etc.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bUseARBExtension Set to true to use rectangular textures.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glFormat The OpenGL format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pixelType OpenGL pixel type: `GL_UNSIGNED_BYTE`, `GL_FLOAT`, etc.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glInternalFormat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bUseARBExtension<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pixelType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\todo Not sure how the two texture format parameters are different:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// glFormat &amp; glInternalFormat.</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate texture using an ofPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Pixel type and OpenGL format are determined from pixel settings.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofPixels instance.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels<span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate texture using an ofPixels instance and type.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This lets you overide the default OF texture type in case you need a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// square GL_TEXTURE_2D texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning ARB textures are not available in OpenGL ES.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofEnableArbTex()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa allocate(const ofPixels&amp; pix)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bUseARBExtension Set to true to use rectangular textures.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels<span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bUseARBExtension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate texture using an ofShortPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Same as void allocate(const ofPixels&amp; pix), except using ofShortPixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa allocate(const ofPixels&amp; pix)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofShortPixels instance.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShortPixels<span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate texture using an ofShortPixels instance and type.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Same as void void allocate(const ofPixels&amp; pix), except using ofShortPixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa allocate(const ofShortPixels&amp; pix)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofShortPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bUseARBExtension Set to true to use rectangular textures.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShortPixels<span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bUseARBExtension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate texture using an ofFloatPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Same as void allocate(const ofPixels&amp; pix), except using ofFloatPixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa allocate(const ofPixels&amp; pix)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofFloatPixels instance.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFloatPixels<span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate texture using an ofShortPixels instance and type.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Same as void void allocate(const ofPixels&amp; pix), except using ofShortPixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa allocate(const ofFloatPixels&amp; pix)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofFloatPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bUseARBExtension Set to true to use rectangular textures.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFloatPixels<span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bUseARBExtension<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocate texture as a Buffer Texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Uses a GPU buffer as data for the texture instead of pixels in RAM</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Allows to use texture buffer objects (TBO) which make it easier to send big</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// amounts of data to a shader as a uniform.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Buffer textures are 1D textures, and may only be sampled using texelFetch </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// in GLSL.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// See textureBufferInstanceExample and https://www.opengl.org/wiki/Buffer_Texture</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa allocate(const ofBufferObject &amp; buffer, int glInternalFormat)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param buffer Reference to ofBufferObject instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glInternalFormat Internal pixel format of the data.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">allocateAsBufferTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBufferObject <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glInternalFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Determine whether the texture has been allocated.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This lets you check if a texture is safe to draw.  The texture can both</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// be allocated by using `allocate()` or loading it with data `loadData()`.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the texture has been allocated.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Has the texture been allocated?</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Legacy function for backwards compatibility.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the texture has been allocated.</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use isAllocated instead\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> <span class=\"token function\">bAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy an ofTexture instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofTexture keeps a reference count for the internal OpenGL texture ID.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Thus, the texture ID is only released if there are no additional</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// references to the internal texture ID.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Update Texture</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Copy a given ofTexture into this texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mom The ofTexture to copy from. Reuses internal GL texture ID.</span>\n\tofTexture<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofTexture<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofTexture <span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Clears the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Clears / frees the texture memory, if something was already allocated.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Useful if you need to control the memory on the graphics card.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The internal GL texture ID is only released if this is the last texture</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// using it.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the texture ID.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Allows you to point the texture id to an externally allocated id</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (perhaps from another texture). It's up to you to set the rest of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// textData parameters manually. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning When setting an external texture ID, the user must set the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// remaining ofTextureData parameters manually.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param externTexID New texture ID.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setUseExternalTextureID</span><span class=\"token punctuation\">(</span>GLuint externTexID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load byte pixel data.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// glFormat can be different to the internal format of the texture on each</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// load, i.e. we can upload GL_BGRA pixels into a GL_RGBA texture but the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// number of channels need to match according to the OpenGL standard.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param data Pointer to byte pixel data. Must not be nullptr.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Pixel data width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Pixel data height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glFormat GL pixel type: GL_RGBA, GL_LUMINANCE, etc.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> uint8_t<span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load short (2 byte) pixel data.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa loadData(const unsigned char* const data, int w, int h, int glFormat)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param data Pointer to byte pixel data. Must not be nullptr.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Pixel data width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Pixel data height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glFormat GL pixel type: GL_RGBA, GL_LUMINANCE, etc.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> uint16_t<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> uint32_t<span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int8_t <span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int16_t <span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> int32_t <span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load float pixel data.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa loadData(const unsigned char* const data, int w, int h, int glFormat)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param data Pointer to byte pixel data. Must not be nullptr.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Pixel data width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Pixel data height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glFormat GL pixel type: GL_RGBA, GL_LUMINANCE, etc.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load pixels from an ofPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofPixels instance.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load pixels from an ofShortPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Same as loadData(ofPixels &amp;) but for ofShortPixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa loadData(const ofPixels &amp; pix)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofShortPixels instance.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShortPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load pixels from an ofFloatPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Same as loadData(ofPixels &amp;) but for ofFloatPixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa loadData(const ofPixels &amp; pix)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofFloatPixels instance.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFloatPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load pixels from an ofPixels instance and specify the format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// glFormat can be different to the internal format of the texture on each</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// load, ie. we can upload GL_BGRA pixels into a GL_RGBA texture, but the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// number of channels need to match according to the OpenGL standard.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glFormat GL pixel type: GL_RGBA, GL_LUMINANCE, etc.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load pixels from an ofShortPixels instance &amp; specify the format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa loadData(const ofPixels &amp; pix, int glFormat)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofShortPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glFormat GL pixel type: GL_RGBA, GL_LUMINANCE, etc.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShortPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load pixels from an ofFloatPixels instance and specify the format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa loadData(const ofPixels &amp; pix, int glFormat)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pix Reference to ofFloatPixels instance.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glFormat GL pixel type: GL_RGBA, GL_LUMINANCE, etc.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFloatPixels <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load byte pixel data.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// glFormat can be different to the internal format of the texture on each</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// load, i.e. we can upload GL_BGRA pixels into a GL_RGBA texture but the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// number of channels need to match according to the OpenGL standard.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param data Pointer to byte pixel data. Must not be nullptr.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Pixel data width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Pixel data height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glFormat GL pixel type: GL_RGBA, GL_LUMINANCE, etc.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glType the OpenGL type of the data.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load pixels from an ofBufferObject</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is different to allocate(ofBufferObject,internal). That</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// creates a texture which data lives in GL buffer while this</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// copies the data from the buffer to the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is usually used to upload data to be shown asynchronously</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// by using a buffer object binded as a PBO</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param buffer The buffer to load.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glFormat GL pixel type: GL_RGBA, GL_LUMINANCE, etc.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param glType the GL type to load.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBufferObject <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glFormat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> glType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Copy an area of the screen into this texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Specifiy the position (x,y) you wish to grab from, with the width (w)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and height (h) of the region.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Make sure that you have allocated your texture (using `allocate()`)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to be large enough to hold the region of the screen you wish to load.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.opengl.org/sdk/docs/man4/html/glCopyTexSubImage2D.xhtml</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x Upper left corner horizontal screen position.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Upper left corner vertical screen position.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Width of the area to copy in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Height of the area to copy in pixels.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadScreenData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">using</span> ofBaseDraws<span class=\"token operator\">::</span>draw<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Drawing</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw the texture at a given size witdh and depth.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x Draw position on the x axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Draw position on the y axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param z Draw position on the z axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Draw width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Draw height.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draws the texture at 4 points passed in as if you created 4 glVertices.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param p1 Upper left position on the x axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param p2 Upper left position on the y axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param p3 Lower right position on the x axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param p4 Lower right position on the y axis.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p4<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a subsection of the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Like ofRect() depend on the current `OF_RECT_MODE`:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// * `OF_RECT_MODE_CORNER`: drawn with the upper left corner = (x,y)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// * `OF_RECT_MODE_CENTER`: drawn centered on (x,y)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofSetRectMode()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x Draw position on the x axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Draw position on the y axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Draw width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Draw height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sx Subsection x axis offset within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sy Subsection y axis offset within the texture.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a subsection of the texture with depth.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa drawSubsection(float x, float y, float w, float h, float sx, float sy)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x Draw position on the x axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Draw position on the y axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param z Draw position on the z axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Draw width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Draw height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sx Subsection x axis offset within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sy Subsection y axis offset within the texture.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a subsection of the texture with an offset.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa drawSubsection(float x, float y, float w, float h, float sx, float sy)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x Draw position on the x axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Draw position on the y axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Draw width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Draw height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sx Subsection x axis offset within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sy Subsection y axis offset within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sw Subsection width within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sh Subsection height within the texture.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sh<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a subsection of the texture with an offset.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa drawSubsection(ofRectangle&amp; drawBounds, ofRectangle&amp; subsectionBounds)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param drawBounds Draw position and dimensions.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param subsectionBounds Subsection position and dimensions within the texture.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle<span class=\"token operator\">&amp;</span> drawBounds<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle<span class=\"token operator\">&amp;</span> subsectionBounds<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a subsection of the texture with an offset and depth.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa drawSubsection(float x, float y, float w, float h, float sx, float sy)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x Draw position on the x axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Draw position on the y axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param z Draw position on the z axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Draw width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Draw height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sx Subsection x axis offset within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sy Subsection y axis offset within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sw Subsection width within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sh Subsection height within the texture.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">drawSubsection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sh<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tofMesh <span class=\"token function\">getQuad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p4<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a mesh that has the texture coordinates set.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa drawSubsection(float x, float y, float w, float h, float sx, float sy)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x Draw position on the x axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Draw position on the y axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param z Draw position on the z axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Draw width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Draw height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sx Subsection x axis offset within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sy Subsection y axis offset within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sw Subsection width within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param sh Subsection height within the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vflipped Takes into account the flipped state in OF.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param rectMode rectMode Taking x,y as the center or the top left corner.</span>\n\tofMesh <span class=\"token function\">getMeshForSubsection</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sw<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflipped<span class=\"token punctuation\">,</span> ofRectMode rectMode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Bind the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// For advanced users who need to manually manage texture drawing without</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// calling ofTexture::draw.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.opengl.org/sdk/docs/man4/html/glBindTexture.xhtml</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> textureLocation<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Unbind the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// For advanced users who need to manually manage texture drawing without</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// calling ofTexture::draw.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.opengl.org/sdk/docs/man4/html/glBindTexture.xhtml</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> textureLocation<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> !defined(TARGET_OPENGLES) &amp;&amp; defined(glBindImageTexture)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Calls glBindImageTexture on the texture</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Binds the texture as an read or write image, only available since OpenGL 4.2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning This is not available in OpenGLES</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.opengl.org/wiki/GLAPI/glBindImageTexture</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">bindAsImage</span><span class=\"token punctuation\">(</span>GLuint unit<span class=\"token punctuation\">,</span> GLenum access<span class=\"token punctuation\">,</span> GLint level<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GLboolean layered<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GLint layer<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">*</span> <span class=\"token function\">getAlphaMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Size and Coordinates</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Display height of texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Return value is pixel size (default) or normalized (0 - 1) if ofEnableNormalizedTextures() is set to true.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofEnabledNormalizedTextures()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Display height of texture in pixels.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Display width of texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Return value is pixel size (default) or normalized (0 - 1) if ofEnableNormalizedTextures() is set to true.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofEnabledNormalizedTextures()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Display width of texture in pixels.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the anchor point the texture is drawn around as a percentage.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This can be useful if you want to rotate an image around a particular</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param xPct Horizontal texture position as a percentage (0 - 1).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param yPct Vertical texture position as a percentage (0 - 1).</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> xPct<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yPct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the anchor point the texture is drawn around in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This can be useful if you want to rotate an image around a particular</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param x Horizontal texture position in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param y Vertical texture position in pixels.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Reset the anchor point to (0, 0).</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">resetAnchor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Helper to convert display coordinate to texture coordinate.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param xPos Horizontal position in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param yPos Vertical position in pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Texture coordinate or zero if texture is not allocated.</span>\n\tglm<span class=\"token operator\">::</span>vec2 <span class=\"token function\">getCoordFromPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> xPos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yPos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Helper to convert display coordinate to texture coordinate.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param xPts Horizontal position in a normalized percentage (0 - 1).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param yPts Vertical position in a normalized percentage (0 - 1).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns Texture coordinate or zero if texture is not allocated.</span>\n\tglm<span class=\"token operator\">::</span>vec2 <span class=\"token function\">getCoordFromPercent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> xPts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yPts<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Texture Settings</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set another ofTexture to use as an alpha mask.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param mask The texture to use as alpha mask.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setAlphaMask</span><span class=\"token punctuation\">(</span>ofTexture <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable the alpha mask.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">disableAlphaMask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set texture wrapping.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// By default, textures are clamped to their edges with `GL_CLAMP_TO_EDGE`.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Setting a repeat mode like `GL_REPEAT` allows you to create tiled</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// backgrounds with small textures.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofTextureSetWrap()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.opengl.org/sdk/docs/man4/html/glTexParameter.xhtml</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning May be overridden.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param wrapModeHorizontal wrap parameter for texture coordinate s.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param wrapModeVertical wrap parameter for texture coordinate t.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setTextureWrap</span><span class=\"token punctuation\">(</span>GLint wrapModeHorizontal<span class=\"token punctuation\">,</span> GLint wrapModeVertical<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set texture minification/magnification scaling filters.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Controls how OpenGL will scale this texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.opengl.org/sdk/docs/man4/html/glTexParameter.xhtml</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofTextureSetMinMagFilters()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning May be overridden.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param minFilter minifying filter for scaling a pixel to a smaller area.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param magFilter magnifying filter for scaling a pixel to a larger area.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setTextureMinMagFilter</span><span class=\"token punctuation\">(</span>GLint minFilter<span class=\"token punctuation\">,</span> GLint magFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets a texture matrix to be uploaded whenever the texture is bound.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param m The 4x4 texture matrix.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setTextureMatrix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTextureMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isUsingTextureMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Disable the texture matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable the texture matrix.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">disableTextureMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the texture compression.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning: not yet implemented.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofTexCompression</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setCompression</span><span class=\"token punctuation\">(</span>ofTexCompression compression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\todo Define Swizzle in the documentation.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Swizzle RGBA to grayscale with alpha in the red channel.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use 1 channel GL_R as luminance instead of red channel in OpenGL 3+.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning This is not supported in OpenGL ES and does nothing.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://en.wikipedia.org/wiki/Swizzling_(computer_graphics)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setRGToRGBASwizzles</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> rToRGBSwizzles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Swizzle a channel to another</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Example:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofTexture tex;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// tex.setSwizzle(GL_TEXTURE_SWIZZLE_R,GL_ALPHA);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// will make channel 0 appear as alpha in the shader.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning This is not supported in OpenGL ES and does nothing.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa https://en.wikipedia.org/wiki/Swizzling_(computer_graphics)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setSwizzle</span><span class=\"token punctuation\">(</span>GLenum srcSwizzle<span class=\"token punctuation\">,</span> GLenum dstChannel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Read Pixel Data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Read current texture data from the GPU into pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning This is not supported in OpenGL ES and does nothing.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pixels Target ofPixels reference.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">readToPixels</span><span class=\"token punctuation\">(</span>ofPixels <span class=\"token operator\">&amp;</span> pixels<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Read current texture data from the GPU into pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning This is not supported in OpenGL ES and does nothing.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pixels Target pixels reference.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">readToPixels</span><span class=\"token punctuation\">(</span>ofShortPixels <span class=\"token operator\">&amp;</span> pixels<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Read current texture data from the GPU into pixels.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning This is not supported in OpenGL ES and does nothing.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pixels Target pixels reference.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">readToPixels</span><span class=\"token punctuation\">(</span>ofFloatPixels <span class=\"token operator\">&amp;</span> pixels<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Copy the texture to an ofBufferObject.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param buffer the target buffer to copy to.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span>ofBufferObject <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Texture Data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Internal texture data access.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This returns the internal texture data for this texture, for instance,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// its textureID, type of texture, whether it's been allocated and other</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// data about the state of the texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a reference to the internal texture data struct.</span>\n\tofTextureData<span class=\"token operator\">&amp;</span> <span class=\"token function\">getTextureData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Const version of getTextureData().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofTextureData::getTextureData()</span>\n\t<span class=\"token keyword\">const</span> ofTextureData<span class=\"token operator\">&amp;</span> <span class=\"token function\">getTextureData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Mipmapping</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets flag allowing texture to auto-generate a mipmap.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// By default, this will set your minFilter to GL_LINEAR_MIPMAP_LINEAR.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// If you want to change your minFilter later use setTextureMinMagFilter()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\tIf you want to generate a mipmap later, or at a specific</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point in your code, use generateMipmap() instead.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa generateMipmap()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa disableMipmap()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa setTextureMinMagFilter()</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">enableMipmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets flag disallowing texture to auto-generate mipmap.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// By default, this will set your minFilter to GL_LINEAR_MIPMAP_LINEAR.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// If you want to change your minFilter later use setTextureMinMagFilter()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\tIf you want to generate a mipmap later, or at a specific</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point in your code, use ofTexture::generateMipmap() instead.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa generateMipmap()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa enableMipmap()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa setTextureMinMagFilter()</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">disableMipmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Generate mipmap for the current texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning Only GL_TEXTURE_RECTANGLE - which is the default openFrameworks</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// texture target - does *not* support mipmaps, so make sure to call</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofDisableArbTex() before loading texture</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// data for a texture you want to generate mipmaps for.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofEnableArbTex()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofDisableArbTex()</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">generateMipmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Find out if a mipmap has been generated for the current texture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa generateMipmap()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa enableMipmap()</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasMipmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\internal</span>\n\tofTextureData texData<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Internal texture data access.</span>\n\t                       <span class=\"token comment\" spellcheck=\"true\">///&lt; For backwards compatibility.</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Enable a texture target.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param textureLocation the OpenGL texture ID to enable as a target.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">enableTextureTarget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> textureLocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Disable a texture target.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param textureLocation the OpenGL texture ID to enable as a target.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">disableTextureTarget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> textureLocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tglm<span class=\"token operator\">::</span>vec3 anchor<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; The texture's anchor point.</span>\n\n\t<span class=\"token keyword\">bool</span> bAnchorIsPct<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Is the anchor point represented as a normalized</span>\n\t\t\t\t\t   <span class=\"token comment\" spellcheck=\"true\">///&lt; (0 - 1) coordinate?</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">bool</span> bWantsMipmap<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; Should mipmaps be created?</span>\n\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}