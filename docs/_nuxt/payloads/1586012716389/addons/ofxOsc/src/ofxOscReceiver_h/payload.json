{"data":[{"page":{"entry":{"name":"ofxOscReceiver.h","filename":"ofxOscReceiver.h","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxOsc/src/ofxOscReceiver.h","path":"/addons/ofxOsc/src/ofxOscReceiver_h","route":"/addons/ofxOsc/src/ofxOscReceiver.h","dir":"../addons/ofxOsc/src","ext":"h","type":"source","id":137,"parent":126,"breadcrumbs":[126,127,5],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">// copyright (c) openFrameworks team 2010-2017</span>\n<span class=\"token comment\" spellcheck=\"true\">// copyright (c) Damian Stewart 2007-2009</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxOscMessage.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofParameter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofThreadChannel.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"OscTypes.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"OscPacketListener.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"UdpSocket.h\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\struct ofxOscSenderSettings</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief OSC message sender settings</span>\n<span class=\"token keyword\">struct</span> ofxOscReceiverSettings <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> port <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">///&lt; port to listen on</span>\n\t<span class=\"token keyword\">bool</span> reuse <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">///&lt; should the port be reused by other receivers?</span>\n\t<span class=\"token keyword\">bool</span> start <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">///&lt; start listening after setup?</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofxOscReceiver</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief OSC message receiver which listens on a network port</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofxOscReceiver</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> osc<span class=\"token operator\">::</span>OscPacketListener <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">ofxOscReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">ofxOscReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofxOscReceiver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxOscReceiver <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofxOscReceiver<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxOscReceiver <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// for operator= and copy constructor</span>\n\tofxOscReceiver<span class=\"token operator\">&amp;</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxOscReceiver <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// set up the receiver with the port to listen for messages on</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and start listening</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// multiple receivers can share the same port if port reuse is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// enabled (true by default)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return true if listening started</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// set up the receiver with the given settings</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// starts listening if start is true (true by default)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// multiple receivers can share the same port if port reuse is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// enabled (true by default)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return true if listening was started or start was not required</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxOscReceiverSettings <span class=\"token operator\">&amp;</span>settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// start listening manually using the current settings</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// this is not required if you called setup(port)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// or setup(settings) with start set to true</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return true if listening started or was already running</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// stop listening, does not clear port value</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return true if the receiver is listening</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isListening</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return true if there are any messages waiting for collection</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasWaitingMessages</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// remove a message from the queue and copy it's data into msg</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return false if there are no waiting messages, otherwise return true</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getNextMessage</span><span class=\"token punctuation\">(</span>ofxOscMessage<span class=\"token operator\">&amp;</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pass a reference instead of a pointer\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">getNextMessage</span><span class=\"token punctuation\">(</span>ofxOscMessage <span class=\"token operator\">*</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// try to get waiting message an ofParameter</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return true if message was handled by the given parameter</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span>ofAbstractParameter <span class=\"token operator\">&amp;</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return listening port</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return the current receiver settings</span>\n\t<span class=\"token keyword\">const</span> ofxOscReceiverSettings <span class=\"token operator\">&amp;</span><span class=\"token function\">getSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// output stream operator for string conversion and printing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return current port value and \"listening\" if receiver is listening</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofxOscReceiver <span class=\"token operator\">&amp;</span>receiver<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// process an incoming osc message and add it to the queue</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ProcessMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> osc<span class=\"token operator\">::</span>ReceivedMessage <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> osc<span class=\"token operator\">::</span>IpEndpointName <span class=\"token operator\">&amp;</span>remoteEndpoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// socket to listen on, unique for each port</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// shared between objects if allowReuse is true</span>\n\tstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>osc<span class=\"token operator\">::</span>UdpListeningReceiveSocket<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>osc<span class=\"token operator\">::</span>UdpListeningReceiveSocket<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span> listenSocket<span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>thread listenThread<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; listener thread</span>\n\tofThreadChannel<span class=\"token operator\">&lt;</span>ofxOscMessage<span class=\"token operator\">></span> messagesChannel<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; message passing thread channel</span>\n\n\tofxOscReceiverSettings settings<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; current settings</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source","static":true}}],"fetch":[]}