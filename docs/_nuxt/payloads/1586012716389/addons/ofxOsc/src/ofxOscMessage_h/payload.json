{"data":[{"page":{"entry":{"name":"ofxOscMessage.h","filename":"ofxOscMessage.h","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxOsc/src/ofxOscMessage.h","path":"/addons/ofxOsc/src/ofxOscMessage_h","route":"/addons/ofxOsc/src/ofxOscMessage.h","dir":"../addons/ofxOsc/src","ext":"h","type":"source","id":133,"parent":126,"breadcrumbs":[126,127,5],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">// copyright (c) openFrameworks team 2010-2017</span>\n<span class=\"token comment\" spellcheck=\"true\">// copyright (c) Damian Stewart 2007-2009</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxOscArg.h\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofxOscMessage</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief an OSC message with address and arguments</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofxOscMessage</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">ofxOscMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">ofxOscMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofxOscMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxOscMessage <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofxOscMessage<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxOscMessage <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// for operator= and copy constructor</span>\n\tofxOscMessage<span class=\"token operator\">&amp;</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxOscMessage <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// clear this message</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// set the message address, must start with a /</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return the OSC address</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return the remote host name/ip (deprecated)</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getRemoteHost() instead\"</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string <span class=\"token function\">getRemoteIp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return the remote host name/ip or \"\" if not set</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getRemoteHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return the remote port or 0 if not set</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getRemotePort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Argument Getters</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// get the argument with the given index as an int, float, string, etc</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// some types can be automatically converted to a requested type,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (ie. int to float) however it is best to ensure that the type matches</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// what you are requesting:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     int i = 0;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     if(message.getArgType(index) == OFXOSC_TYPE_INT32) {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         i = message.getArgAsInt32(index);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// or use the type tag char:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\tint i = 0;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     if(message.getArgTypeName(index) == \"i\") {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         i = message.getArgAsInt32(index);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// you can also check against the type string for all arguments:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     int i = 0; float f = 0.0; std::string s = \"\";</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     if(message.getTypeString() == \"ifs\") {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         i = message.getArgAsInt32(0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         f = message.getArgAsFloat(1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         s = message.getArgAsString(2);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// see ofxOscArg.h for argument type tag char values</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return number of arguments</span>\n\tstd<span class=\"token operator\">::</span>size_t <span class=\"token function\">getNumArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return argument type code for a given index</span>\n\tofxOscArgType <span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return argument type tag char as a string</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getArgTypeName</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return type tags for all arguments as a string, 1 char for each argument</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getTypeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as an integer, converts numeric types automatically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// prints a warning when converting higher precision types</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument value as a 32-bit int</span>\n\tstd<span class=\"token operator\">::</span>int32_t <span class=\"token function\">getArgAsInt</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as an integer, converts numeric types automatically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// prints a warning when converting higher precision types</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument value as a 32-bit int</span>\n\tstd<span class=\"token operator\">::</span>int32_t <span class=\"token function\">getArgAsInt32</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as a 64-bit integer, converts numeric types automatically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument value as a 64-bit int</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\tstd<span class=\"token operator\">::</span>int64_t <span class=\"token function\">getArgAsInt64</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as a float, converts numeric types automatically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// prints a warning when converting higher precision types</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument value as a float</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getArgAsFloat</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as a double, converts numeric types automatically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument value as a double</span>\n\t<span class=\"token keyword\">double</span> <span class=\"token function\">getArgAsDouble</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as a string, converts numeric types with a warning</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument value as a string</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getArgAsString</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as a symbol (string), converts numeric types with a warning</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument value as a symbol (string)</span>\n\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getArgAsSymbol</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as a string, converts numeric types with a warning</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument value as a string</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token function\">getArgAsChar</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument value as a 4-byte midi message</span>\n\tstd<span class=\"token operator\">::</span>uint32_t <span class=\"token function\">getArgAsMidiMessage</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as a bool, converts numeric types automatically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// this argument type matches both OFXOSC_TYPE_TRUE &amp; OFXOSC_TYPE_FALSE</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument value as a bool</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getArgAsBool</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as a none/nil</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return true if argument was a none/nil</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getArgAsNone</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as a trigger impulse</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return true if argument was a trigger</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getArgAsTrigger</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as a trigger impulse</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// this is an alias for getArgAsTrigger()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return true if argument was a trigger</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getArgAsImpulse</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get argument as a trigger impulse</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// this is an alias for getArgAsTrigger()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return true if argument was a trigger</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getArgAsInfinitum</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument as a 64-bit NTP time tag</span>\n\tstd<span class=\"token operator\">::</span>uint64_t <span class=\"token function\">getArgAsTimetag</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument as a binary blob</span>\n\tofBuffer <span class=\"token function\">getArgAsBlob</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// get an argument as an RGBA color, converts int32 automatically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the queried item.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return given argument as a 32-bit color value</span>\n\tstd<span class=\"token operator\">::</span>uint32_t <span class=\"token function\">getArgAsRgbaColor</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\section Argument Setters</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a 32-bit integer</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addIntArg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int32_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a 32-bit integer</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addInt32Arg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int32_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a 64-bit integer</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addInt64Arg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int64_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a 32-bit float</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addFloatArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a 64-bit double</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addDoubleArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a string</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addStringArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a symbol (string)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addSymbolArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a char</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addCharArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a 4-byte MIDI message</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addMidiMessageArg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>uint32_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a bool</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// true sends a OFXOSC_TYPE_TRUE &amp; false sends a OFXOSC_TYPE_FALSE</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addBoolArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a none/nil (has no value)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addNoneArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a trigger impulse (has no value)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addTriggerArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a trigger impulse (has no value)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// alias for addTriggerArg()</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addImpulseArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a trigger impulse (has no value)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// alias for addTriggerArg()</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addInfinitumArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a 64-bit NTP time tag</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addTimetagArg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>uint64_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a binary blog</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addBlobArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// add a 32-bit color</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addRgbaColorArg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>uint32_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// set host and port of the remote endpoint,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// this is mainly used by ofxOscReceiver</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setRemoteEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// output stream operator for string conversion and printing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// converts argument contents to strings with following caveats per type:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///   * true: printed as T</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///   * false: printed as F</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///   * midi message: printed as 4 byte hex</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///   * none/nil: printed as NONE (has no value)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///   * trigger impulse: printed as TRIGGER (has no value)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///   * timetag: printed as TIMETAG (does not show value)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///   * blob: printed as BLOB (does not show value)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///   * rgba color: printed as 4 byte hex</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\return message address &amp; arguments separated by spaces</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofxOscMessage <span class=\"token operator\">&amp;</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\tstd<span class=\"token operator\">::</span>string address<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; OSC address, must start with a /</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofxOscArg<span class=\"token operator\">*</span><span class=\"token operator\">></span> args<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; current arguments</span>\n\n\tstd<span class=\"token operator\">::</span>string remoteHost<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; host name/ip the message was sent from</span>\n\t<span class=\"token keyword\">int</span> remotePort<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; port the message was sent from</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source","static":true}}],"fetch":[]}