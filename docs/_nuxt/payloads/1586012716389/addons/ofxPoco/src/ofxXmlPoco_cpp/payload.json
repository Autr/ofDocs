{"data":[{"page":{"entry":{"name":"ofxXmlPoco.cpp","filename":"ofxXmlPoco.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxPoco/src/ofxXmlPoco.cpp","path":"/addons/ofxPoco/src/ofxXmlPoco_cpp","route":"/addons/ofxPoco/src/ofxXmlPoco.cpp","dir":"../addons/ofxPoco/src","ext":"cpp","type":"source","id":142,"parent":140,"breadcrumbs":[140,141,5],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxXmlPoco.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Poco/AutoPtr.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\nofxXmlPoco<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofxXmlPoco</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">releaseAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">ofxXmlPoco</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tdocument <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span><span class=\"token function\">Document</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// we create this so that they can be merged later</span>\n\telement <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">load</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">ofxXmlPoco</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxXmlPoco <span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    document <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span><span class=\"token function\">Document</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    element <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ofxXmlPoco <span class=\"token operator\">&amp;</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxXmlPoco <span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rhs <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">releaseAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tdocument <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Document <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>rhs<span class=\"token punctuation\">.</span>document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">cloneNode</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\telement <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">ofxXmlPoco</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tdocument <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span><span class=\"token function\">Document</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// we create this so that they can be merged later</span>\n\telement <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofFile <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> ofFile<span class=\"token operator\">::</span>ReadOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>file<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"couldn't load, \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\" not found\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tofBuffer <span class=\"token function\">xmlBuffer</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">loadFromBuffer</span><span class=\"token punctuation\">(</span>xmlBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ofBuffer buffer<span class=\"token punctuation\">;</span>\n    buffer<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofFile <span class=\"token function\">file</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> ofFile<span class=\"token operator\">::</span>WriteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">writeFromBuffer</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getNumChildren</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> numberOfChildren <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>NodeList <span class=\"token operator\">*</span>list <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">childNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">::</span>ELEMENT_NODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            numberOfChildren<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> numberOfChildren<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getNumChildren</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> numberOfChildren <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>NodeList <span class=\"token operator\">*</span>list <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">childNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">::</span>ELEMENT_NODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            string nodeName <span class=\"token operator\">=</span> list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">localName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">compare</span><span class=\"token punctuation\">(</span>nodeName<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                numberOfChildren<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> numberOfChildren<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstring ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    ostringstream stream<span class=\"token punctuation\">;</span>\n\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>DOMWriter writer<span class=\"token punctuation\">;</span>\n    writer<span class=\"token punctuation\">.</span><span class=\"token function\">setOptions</span><span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>XMLWriter<span class=\"token operator\">::</span>PRETTY_PRINT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n            writer<span class=\"token punctuation\">.</span><span class=\"token function\">writeNode</span><span class=\"token punctuation\">(</span> stream<span class=\"token punctuation\">,</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span> exception <span class=\"token operator\">&amp;</span> e <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"toString(): \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        writer<span class=\"token punctuation\">.</span><span class=\"token function\">writeNode</span><span class=\"token punctuation\">(</span> stream<span class=\"token punctuation\">,</span> element <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    string tmp <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// don't know how else to get rid of the hidden &lt;#text>&lt;/#text> nodes :/</span>\n    <span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;#text>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;/#text>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">addXml</span><span class=\"token punctuation\">(</span>ofxXmlPoco<span class=\"token operator\">&amp;</span> xml<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> copyAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>copyAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        n <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            n <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            n <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// we have an element, i.e. the document has child nodes</span>\n    <span class=\"token comment\" spellcheck=\"true\">// or we don't, so append it directly to the document</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// is this a tokenized tag?</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// don't 'push' down into the new nodes</span>\n        Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>el <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n\n        vector<span class=\"token operator\">&lt;</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token operator\">></span> toBeReleased<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>pe <span class=\"token operator\">=</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            el<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>pe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            toBeReleased<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>pe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            el <span class=\"token operator\">=</span> pe<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            element <span class=\"token operator\">=</span> el<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> pe <span class=\"token operator\">=</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>pe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>pe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            element <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstring ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//if we don't have a DOM element, return the default value</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// firstChild() may return a NULL pointer</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">firstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// return default value in this case</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// no NULL pointer -> save to call nodeType()</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">firstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">::</span>TEXT_NODE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">innerText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstring ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> getValue <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getIntValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getIntValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> getValue <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">float</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getFloatValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToFloat</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">float</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getFloatValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> getValue <span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getBoolValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToBool</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getBoolValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> getValue <span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nint64_t ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getInt64Value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToInt64</span><span class=\"token punctuation\">(</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nint64_t ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getInt64Value</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> getValue <span class=\"token operator\">&lt;</span>int64_t<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        element <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"reset(): no element set yet\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">setToChild</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">firstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">firstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setToChild(): no element created yet\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> numberOfChildren <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>NodeList <span class=\"token operator\">*</span>list <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">childNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> numberOfChildren <span class=\"token operator\">&lt;</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">::</span>ELEMENT_NODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>numberOfChildren <span class=\"token operator\">==</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            numberOfChildren<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">setToParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">parentNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">parentNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setToParent(): current element has no parent\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">setToParent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> numLevelsUp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">&lt;</span> numLevelsUp <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">parentNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">parentNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setToParent(): too many parents: \"</span> <span class=\"token operator\">&lt;&lt;</span> numLevelsUp<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setToParent(): no element set yet\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>    \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">setToSibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nextSibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setToSibling() &lt;&lt; no element set yet\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/* If we get NULL for node, then we do not have a sibling.\n\t   We can only savely check the type on a non-Null node (thus\n\t   avoiding NULL-pointer dereferences). Empty space is treated\n\t   as a text node and we do not want that. We are also not\n\t   interessted in comments. If we find a non-TEXT_NODE or\n\t   non-COMMENT_NODE, we do not look further for a sibling. */</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">!=</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">::</span>TEXT_NODE<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>node<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">::</span>COMMENT_NODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> node<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nextSibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// make sure we actually got a sibling</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span> <span class=\"token operator\">==</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// we're cool now</span>\n    element <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">setToPrevSibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">previousSibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setToPrevSibling(): no element set yet\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// empty space in the XML doc is treated as text nodes. blerg.</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>node <span class=\"token operator\">&amp;&amp;</span> node<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">::</span>TEXT_NODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        node <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> node<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">previousSibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>node <span class=\"token operator\">||</span> node<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">::</span>TEXT_NODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    element <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setValue(): no element set yet\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span>  <span class=\"token string\">\"setValue(): path \\\"\"</span> <span class=\"token operator\">+</span> path <span class=\"token operator\">+</span> <span class=\"token string\">\"\\\" doesn't exist\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">firstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \tPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Text <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \te<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tnode<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">firstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">::</span>TEXT_NODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Text <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">replaceChild</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> node<span class=\"token punctuation\">,</span> e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">firstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// swap out</span>\n        node<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    \t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nstring ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[@\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// we need to create a proper path</span>\n            string attributePath <span class=\"token operator\">=</span> <span class=\"token string\">\"[@\"</span> <span class=\"token operator\">+</span> path <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n            e <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>attributePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            e <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getAttribute(): no element set yet\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// this will be the value of the attribute</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    string attributeName<span class=\"token punctuation\">,</span> pathToAttribute<span class=\"token punctuation\">;</span>\n\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">bool</span> hasPath <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// you can pass either /node[@attr] or just attr</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[@\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> attrBegin <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[@\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> attrBegin <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            attributeName <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span> start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pathToAttribute <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> attrBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            hasPath <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            attributeName <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hasPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>pathToAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            e <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"clearAttributes(): no element set yet\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>NamedNodeMap <span class=\"token operator\">*</span>map <span class=\"token operator\">=</span> e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">attributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> map<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> attributeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>map<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        map<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">removeAttributes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[@\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// we need to create a proper path</span>\n            string attributePath <span class=\"token operator\">=</span> <span class=\"token string\">\"[@\"</span> <span class=\"token operator\">+</span> path <span class=\"token operator\">+</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span>\n            e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>attributePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"clearAttributes(): no element set yet\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>NamedNodeMap <span class=\"token operator\">*</span>map <span class=\"token operator\">=</span> e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">attributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> map<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>map<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        map<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">removeAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>NamedNodeMap <span class=\"token operator\">*</span>map <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">attributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> map<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span>map<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        map<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"clearAttributes(): no element set yet\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">removeContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element <span class=\"token operator\">&amp;&amp;</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">hasChildNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t\tPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">*</span> swap<span class=\"token punctuation\">;</span>\n\t\tPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node<span class=\"token operator\">*</span> n <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">firstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nextSibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tswap <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nextSibling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\telement<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tn <span class=\"token operator\">=</span> swap<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">removeContents</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>    \n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"clearContents(): no element set yet\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>NodeList <span class=\"token operator\">*</span>list <span class=\"token operator\">=</span> e<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">childNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        list<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">releaseAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tdocument <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span><span class=\"token function\">Document</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// we create this so that they can be merged later</span>\n\telement <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">releaseAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tdocument<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdocument <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\telement <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// works for both attributes and tags</span>\n\tPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node <span class=\"token operator\">*</span> node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tnode <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"remove(): no element set yet\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node <span class=\"token operator\">*</span> n <span class=\"token operator\">=</span> node<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">parentNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tn<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node <span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">parentNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tparent<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\telement<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\telement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>parent<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// works for both attributes and tags</span>\n\tPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Node <span class=\"token operator\">*</span> node<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tnode <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nmap<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// works for both attributes and tags</span>\n    map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> string<span class=\"token operator\">></span> attrMap<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Poco<span class=\"token operator\">::</span>AutoPtr<span class=\"token operator\">&lt;</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>NamedNodeMap<span class=\"token operator\">></span> attr <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">attributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> attr<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            attrMap<span class=\"token punctuation\">[</span>attr<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> attr<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getAttribute(): no element set\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> attrMap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    string attributeName<span class=\"token punctuation\">,</span> pathToAttribute<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> hasPath <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// you can pass either /node[@attr] or just attr</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[@\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        size_t attrBegin <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[@\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        size_t start <span class=\"token operator\">=</span> attrBegin <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        size_t end <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        attributeName <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span> start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">-</span> start <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pathToAttribute <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> attrBegin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        hasPath <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        attributeName <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// we don't have a path to resolve</span>\n    Poco<span class=\"token operator\">::</span>AutoPtr<span class=\"token operator\">&lt;</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Attr<span class=\"token operator\">></span> attr <span class=\"token operator\">=</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createAttribute</span><span class=\"token punctuation\">(</span>attributeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    attr<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Poco<span class=\"token operator\">::</span>AutoPtr<span class=\"token operator\">&lt;</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>NamedNodeMap<span class=\"token operator\">></span> map <span class=\"token operator\">=</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">attributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setNamedItem</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// and we're done</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// we have a path to resolve</span>\n    Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> curElement <span class=\"token operator\">=</span> <span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span>pathToAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>curElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// if it doesn't exist</span>\n        vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> tokens<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            tokens <span class=\"token operator\">=</span> <span class=\"token function\">tokenize</span><span class=\"token punctuation\">(</span>pathToAttribute<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// is this a tokenized tag?</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// don't 'push' down into the new nodes</span>\n            curElement <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// find the last existing tag</span>\n            size_t lastExistingTag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// can't use reverse_iterator b/c accumulate doesn't like it</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                string empty <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                string concat <span class=\"token operator\">=</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> testElement <span class=\"token operator\">=</span> <span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span>concat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>testElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                    lastExistingTag<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    curElement <span class=\"token operator\">=</span> testElement<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// create all the tags that don't exist</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> lastExistingTag<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tokens<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>newElement <span class=\"token operator\">=</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">at</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curElement<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curElement <span class=\"token operator\">=</span> newElement<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            curElement<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attributeName<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> testElement <span class=\"token operator\">=</span> <span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span>pathToAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>testElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                curElement <span class=\"token operator\">=</span> testElement<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span>newElement <span class=\"token operator\">=</span> <span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>pathToAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curElement<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                curElement <span class=\"token operator\">=</span> newElement<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            curElement<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span>attributeName<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">loadFromBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>DOMParser parser<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// release and null out if we already have a document</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tdocument<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">try</span><span class=\"token punctuation\">{</span>\n\t\tdocument <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseString</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\telement <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">firstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdocument<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>SAXException <span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"parse error: \"</span> <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdocument <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Document<span class=\"token punctuation\">;</span>\n\t\telement <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> exception <span class=\"token operator\">&amp;</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">short</span> msg <span class=\"token operator\">=</span> <span class=\"token function\">atoi</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"parse error: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">DOMErrorMessage</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tdocument <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Document<span class=\"token punctuation\">;</span>\n\t\telement <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\nstring ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">setTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            element <span class=\"token operator\">=</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setTo(): empty document\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">// one case: we're at the root, but we don't know it yet:</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element <span class=\"token operator\">==</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">documentElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">nodeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> path <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//ofLogNotice(\"ofxXmlPoco\") &lt;&lt; path &lt;&lt; \" \" &lt;&lt; path.find(\"../\");</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// another: let's go up a little</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n \n        Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n        Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> parent <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\tsize_t count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        size_t offset<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n             offset <span class=\"token operator\">!=</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">;</span>\n             offset <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"../\"</span><span class=\"token punctuation\">,</span> offset <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">parentNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                parent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> parent<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">parentNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">//ofLogNotice(\"ofxXmlPoco\") &lt;&lt; (count * 3) &lt;&lt; \" \" &lt;&lt; path.size();</span>\n\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> path<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            element <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            string remainingPath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> parent<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>remainingPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n             <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                 element <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n                 <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setCurrentElement(): passed invalid path \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> remainingPath <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n                 <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n             <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setCurrentElement(): parent is nullptr.\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// another: we're looking all over</span>\n        Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n        element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> document<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            element <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setCurrentElement(): passed invalid path \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// another: we're actually looking down into the thing :)</span>\n        Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> prev <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n        element <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            element <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setCurrentElement(): passed invalid path \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element <span class=\"token operator\">*</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    string copy <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// does it have an attribute? just in case</span>\n    std<span class=\"token operator\">::</span>size_t ind <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[@\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ind <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        copy <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getPocoElement(): no element to get yet \"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getPocoElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    string copy <span class=\"token operator\">=</span> path<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// does it have an attribute? just in case</span>\n\tstd<span class=\"token operator\">::</span>size_t ind <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[@\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ind <span class=\"token operator\">!=</span> string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        copy <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ind<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Element<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> element<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNodeByPath</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getPocoElement(): no element to get yet \"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\nPoco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Document <span class=\"token operator\">*</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> document<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> Poco<span class=\"token operator\">::</span>XML<span class=\"token operator\">::</span>Document <span class=\"token operator\">*</span> ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">getPocoDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> document<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nstring ofxXmlPoco<span class=\"token operator\">::</span><span class=\"token function\">DOMErrorMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"INDEX_SIZE_ERR\"</span><span class=\"token punctuation\">;</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">/// index or size is negative or greater than allowed value</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"DOMSTRING_SIZE_ERR\"</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\" spellcheck=\"true\">/// the specified range of text does not fit into a DOMString (not used)</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"HIERARCHY_REQUEST_ERR\"</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">/// a node is inserted somewhere it doesn't belong</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">4</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"WRONG_DOCUMENT_ERR\"</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\" spellcheck=\"true\">/// a node is used in a different document than the one that created it</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">5</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"INVALID_CHARACTER_ERR\"</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\" spellcheck=\"true\">/// an invalid character is specified (not used)</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">6</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"NO_DATA_ALLOWED_ERR\"</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">/// data is specified for a node which does not support data</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">7</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"NO_MODIFICATION_ALLOWED_ERR\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">/// an attempt is made to modify an object where modifications are not allowed</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"NOT_FOUND_ERR\"</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\" spellcheck=\"true\">/// an attempt was made to reference a node in a context where it does not exist</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"NOT_SUPPORTED_ERR\"</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\" spellcheck=\"true\">/// the implementation does not support the type of object requested</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">10</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"INUSE_ATTRIBUTE_ERR\"</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\" spellcheck=\"true\">/// an attempt is made to add an attribute that is already in use elsewhere</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">11</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"INVALID_STATE_ERR\"</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\" spellcheck=\"true\">/// a parameter or an operation is not supported by the underlying object</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">12</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"SYNTAX_ERR\"</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\" spellcheck=\"true\">/// an invalid or illegal string is specified</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">13</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"INVALID_MODIFICATION_ERR\"</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">/// an attempt is made to modify the type of the underlying object</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">14</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"NAMESPACE_ERR\"</span><span class=\"token punctuation\">;</span>                  <span class=\"token comment\" spellcheck=\"true\">/// an attempt is made to create or change an object in a way which is incorrect with regard to namespaces</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t <span class=\"token keyword\">case</span> <span class=\"token number\">15</span><span class=\"token operator\">:</span>\n\t\t <span class=\"token keyword\">return</span> <span class=\"token string\">\"INVALID_ACCESS_ERR\"</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\" spellcheck=\"true\">/// an attempt is made to use an object that is not or is no longer usable</span>\n\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"DOM ERROR\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSerialize</span><span class=\"token punctuation\">(</span>ofxXmlPoco <span class=\"token operator\">&amp;</span> xml<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstring name <span class=\"token operator\">=</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tname <span class=\"token operator\">=</span> <span class=\"token string\">\"UnknownName\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameterGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token operator\">&amp;</span> group <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\txml<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"creating group \"</span> <span class=\"token operator\">&lt;&lt;</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\txml<span class=\"token punctuation\">.</span><span class=\"token function\">setTo</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"group \"</span> <span class=\"token operator\">&lt;&lt;</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> p<span class=\"token operator\">:</span> group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofSerialize</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"end group \"</span> <span class=\"token operator\">&lt;&lt;</span> name<span class=\"token punctuation\">;</span>\n\t\txml<span class=\"token punctuation\">.</span><span class=\"token function\">setToParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tstring value <span class=\"token operator\">=</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\txml<span class=\"token punctuation\">.</span><span class=\"token function\">addChild</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"creating tag \"</span> <span class=\"token operator\">&lt;&lt;</span> name<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxXmlPoco\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setting tag \"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">&lt;&lt;</span> value<span class=\"token punctuation\">;</span>\n\t\txml<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofDeserialize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxXmlPoco <span class=\"token operator\">&amp;</span> xml<span class=\"token punctuation\">,</span> ofAbstractParameter <span class=\"token operator\">&amp;</span> parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">isSerializable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstring name <span class=\"token operator\">=</span> parameter<span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameterGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofParameterGroup <span class=\"token operator\">&amp;</span> group <span class=\"token operator\">=</span> <span class=\"token keyword\">static_cast</span> <span class=\"token operator\">&lt;</span>ofParameterGroup <span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>ofxXmlPoco<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setTo</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> p<span class=\"token operator\">:</span> group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofDeserialize</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">const_cast</span><span class=\"token operator\">&lt;</span>ofxXmlPoco<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setToParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tparameter<span class=\"token punctuation\">.</span>cast <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getIntValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter <span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tparameter<span class=\"token punctuation\">.</span>cast <span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getFloatValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter <span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tparameter<span class=\"token punctuation\">.</span>cast <span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getBoolValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter <span class=\"token operator\">&lt;</span>int64_t<span class=\"token operator\">></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tparameter<span class=\"token punctuation\">.</span>cast <span class=\"token operator\">&lt;</span>int64_t<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getInt64Value</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tparameter<span class=\"token punctuation\">.</span>cast <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> xml<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\tparameter<span class=\"token punctuation\">.</span><span class=\"token function\">fromString</span><span class=\"token punctuation\">(</span>xml<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}