{"data":[{"page":{"entry":{"name":"ofxSvg.h","filename":"ofxSvg.h","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxSvg/src/ofxSvg.h","path":"/addons/ofxSvg/src/ofxSvg_h","route":"/addons/ofxSvg/src/ofxSvg.h","dir":"../addons/ofxSvg/src","ext":"h","type":"source","id":147,"parent":144,"breadcrumbs":[144,145,5],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//#include \"ofMain.h\"</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofPath.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofTypes.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofXml.h\"</span></span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\file</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofxSVG is used for loading and rendering SVG files. It's a wrapper</span>\n<span class=\"token comment\" spellcheck=\"true\">/// for the open source C library [Libsvgtiny](https://www.netsurf-browser.org/projects/libsvgtiny/ \"Libsvgtiny website\"),</span>\n<span class=\"token comment\" spellcheck=\"true\">/// and it supports files in the [SVG Tiny format](https://www.w3.org/TR/SVGMobile/ \"SVG Tiny 1.2</span>\n<span class=\"token comment\" spellcheck=\"true\">/// format specification at the W3C\").</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Libsvgtiny supports a subset of SVG elements, (for a full list, see the Libsvgtiny readme file)</span>\n<span class=\"token comment\" spellcheck=\"true\">/// but we have gone some way to improving this by manually implementing some extra features (such as the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// SVG \"use\" element).</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofxSVG</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span> <span class=\"token operator\">~</span><span class=\"token function\">ofxSVG</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">float</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Loads an SVG file from the provided filename.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Loads an SVG from a text string.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// Useful for parsing SVG text from sources other than a file. As the</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// underlying SVG parsing library requires a url, this method gives</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// you the option of providing one.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">loadFromString</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string data<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string url<span class=\"token operator\">=</span><span class=\"token string\">\"local\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">getNumPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tofPath <span class=\"token operator\">&amp;</span> <span class=\"token function\">getPathAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">fixSvgString</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> xmlstring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\t<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">;</span>\n\n\t\tstd<span class=\"token operator\">::</span>vector <span class=\"token operator\">&lt;</span>ofPath<span class=\"token operator\">></span> paths<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setupDiagram</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> svgtiny_diagram <span class=\"token operator\">*</span> diagram<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setupShape</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> svgtiny_shape <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">,</span> ofPath <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source","static":true}}],"fetch":[]}