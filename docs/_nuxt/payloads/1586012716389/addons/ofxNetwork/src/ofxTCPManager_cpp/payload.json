{"data":[{"page":{"entry":{"name":"ofxTCPManager.cpp","filename":"ofxTCPManager.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/addons/ofxNetwork/src/ofxTCPManager.cpp","path":"/addons/ofxNetwork/src/ofxTCPManager_cpp","route":"/addons/ofxNetwork/src/ofxTCPManager.cpp","dir":"../addons/ofxNetwork/src","ext":"cpp","type":"source","id":99,"parent":92,"breadcrumbs":[92,93,5],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxTCPManager.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxNetworkUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span>m_bWinsockInit<span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\nofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">ofxTCPManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// was winsock initialized?</span>\n  \t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>m_bWinsockInit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> vr<span class=\"token punctuation\">;</span>\n\t\t\tWSADATA\twsaData<span class=\"token punctuation\">;</span>\n\t\t\tvr <span class=\"token operator\">=</span> <span class=\"token function\">MAKEWORD</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\t<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">WSAStartup</span><span class=\"token punctuation\">(</span>vr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>wsaData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tm_bWinsockInit<span class=\"token operator\">=</span>\t<span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//this disables the other apps from shutting down if the client</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//or server disconnects.</span>\n\t\t<span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>SIGPIPE<span class=\"token punctuation\">,</span>SIG_IGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">signal</span><span class=\"token punctuation\">(</span>EPIPE<span class=\"token punctuation\">,</span>SIG_IGN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n  nonBlocking <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  m_hSocket<span class=\"token operator\">=</span> INVALID_SOCKET<span class=\"token punctuation\">;</span>\n  m_dwTimeoutSend<span class=\"token operator\">=</span> OF_TCP_DEFAULT_TIMEOUT<span class=\"token punctuation\">;</span>\n  m_dwTimeoutReceive<span class=\"token operator\">=</span> OF_TCP_DEFAULT_TIMEOUT<span class=\"token punctuation\">;</span>\n  m_dwTimeoutAccept<span class=\"token operator\">=</span> OF_TCP_DEFAULT_TIMEOUT<span class=\"token punctuation\">;</span>\n  m_dwTimeoutConnect<span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//OF_TCP_DEFAULT_TIMEOUT;</span>\n  m_iListenPort<span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  m_closing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  m_iMaxConnections <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Closes an open socket.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// NOTE: A closed socket cannot be reused again without a call to \"Create()\".</span>\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">closesocket</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\tm_closing <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span>SHUT_RDWR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//\tif it's reported we're not/no longer a socket, let it fall through and be invalidated</span>\n\t\t\t<span class=\"token keyword\">int</span> Error <span class=\"token operator\">=</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> Error <span class=\"token operator\">!=</span> <span class=\"token function\">OFXNETWORK_ERROR</span><span class=\"token punctuation\">(</span>NOTSOCK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\tm_hSocket<span class=\"token operator\">=</span> INVALID_SOCKET<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//This was commented out in the original</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//WSACleanup();</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">CleanUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token function\">WSACleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n  m_bWinsockInit <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">CheckIsConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\tfd_set fd<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimeval tv <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span>time_t<span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> so_error<span class=\"token punctuation\">;</span>\n\t\tsocklen_t len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span> so_error<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">getsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_ERROR<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>so_error<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>so_error <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tu_long toread<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t\t<span class=\"token function\">ioctlsocket</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> FIONREAD<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>toread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t\t<span class=\"token function\">ioctl</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> FIONREAD<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>toread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>toread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n    <span class=\"token keyword\">bool</span> wasBlocking <span class=\"token operator\">=</span> nonBlocking<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SetNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> timeval timeout<span class=\"token punctuation\">;</span>\n    timeout<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    timeout<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_RCVTIMEO<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>timeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> MSG_PEEK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SetNonBlocking</span><span class=\"token punctuation\">(</span>wasBlocking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    timeout<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    timeout<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_RCVTIMEO<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>timeout<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">!=</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm_closing <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\tm_hSocket <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span> AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> IPPROTO_IP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">!=</span> INVALID_SOCKET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> iMaxConnections<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tm_iMaxConnections <span class=\"token operator\">=</span> iMaxConnections<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> iMaxConnections<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span> SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bReuse<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> sockaddr_in local<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>local<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr_in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tlocal<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\tlocal<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//Port MUST be in Network Byte Order</span>\n\tlocal<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bReuse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> enable <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span>SOL_SOCKET<span class=\"token punctuation\">,</span>SO_REUSEADDR<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>enable<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">::</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> sockaddr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>local<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>local<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">Accept</span><span class=\"token punctuation\">(</span>ofxTCPManager<span class=\"token operator\">&amp;</span> sConnect<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  sockaddr_in addr<span class=\"token punctuation\">;</span>\n\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\tsocklen_t iSize<span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutAccept <span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t  fd_set fd<span class=\"token punctuation\">;</span>\n\t  <span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  timeval tv<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>time_t<span class=\"token punctuation\">)</span>m_dwTimeoutAccept<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t  <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  iSize<span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr_in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  sConnect<span class=\"token punctuation\">.</span>m_hSocket <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sConnect<span class=\"token punctuation\">.</span>m_hSocket <span class=\"token operator\">!=</span> INVALID_SOCKET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>m_closing<span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pAddrStr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  sockaddr_in addr_in<span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> hostent <span class=\"token operator\">*</span>he<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>he <span class=\"token operator\">=</span> <span class=\"token function\">gethostbyname</span><span class=\"token punctuation\">(</span>pAddrStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\taddr_in<span class=\"token punctuation\">.</span>sin_family<span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// host byte order</span>\n\taddr_in<span class=\"token punctuation\">.</span>sin_port  <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// short, network byte order</span>\n\taddr_in<span class=\"token punctuation\">.</span>sin_addr  <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> in_addr <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>he<span class=\"token operator\">-</span><span class=\"token operator\">></span>h_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// set to non-blocking before connect</span>\n    <span class=\"token keyword\">bool</span> wasBlocking <span class=\"token operator\">=</span> nonBlocking<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_dwTimeoutConnect <span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">SetNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addr_in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> err <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> err <span class=\"token operator\">=</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// set a timeout</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">==</span> <span class=\"token function\">OFXNETWORK_ERROR</span><span class=\"token punctuation\">(</span>INPROGRESS<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> err <span class=\"token operator\">==</span> <span class=\"token function\">OFXNETWORK_ERROR</span><span class=\"token punctuation\">(</span>WOULDBLOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> m_dwTimeoutConnect <span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">WaitSend</span><span class=\"token punctuation\">(</span>m_dwTimeoutConnect<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tsocklen_t len <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span> err<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_ERROR<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>len<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tret <span class=\"token operator\">=</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tret <span class=\"token operator\">=</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> \n\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m_dwTimeoutConnect <span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">SetNonBlocking</span><span class=\"token punctuation\">(</span>wasBlocking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    \n\t<span class=\"token keyword\">return</span> ret<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">WaitReceive</span><span class=\"token punctuation\">(</span>time_t timeoutSeconds<span class=\"token punctuation\">,</span> time_t timeoutMicros<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\n\tfd_set fd<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimeval\ttv<span class=\"token punctuation\">;</span>\n\ttv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> timeoutSeconds<span class=\"token punctuation\">;</span>\n\ttv<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">=</span> timeoutMicros<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> SOCKET_TIMEOUT<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">WaitSend</span><span class=\"token punctuation\">(</span>time_t timeoutSeconds<span class=\"token punctuation\">,</span> time_t timeoutMicros<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\n\tfd_set fd<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_ZERO</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">FD_SET</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ttimeval\ttv<span class=\"token punctuation\">;</span>\n\ttv<span class=\"token punctuation\">.</span>tv_sec <span class=\"token operator\">=</span> timeoutSeconds<span class=\"token punctuation\">;</span>\n\ttv<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">=</span> timeoutMicros<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fd<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> SOCKET_TIMEOUT<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">SetNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> useNonBlocking<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//if(useNonBlocking==nonBlocking){</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//return true;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//}</span>\n    <span class=\"token keyword\">auto</span> prevNonBlocking <span class=\"token operator\">=</span> nonBlocking<span class=\"token punctuation\">;</span>\n    nonBlocking <span class=\"token operator\">=</span> useNonBlocking<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> arg <span class=\"token operator\">=</span> nonBlocking<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> retVal <span class=\"token operator\">=</span> <span class=\"token function\">ioctlsocket</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span>FIONBIO<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span> flags <span class=\"token operator\">=</span> <span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> F_GETFL<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> retVal<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>useNonBlocking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tretVal <span class=\"token operator\">=</span> <span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> F_SETFL<span class=\"token punctuation\">,</span> flags <span class=\"token operator\">|</span> O_NONBLOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tretVal <span class=\"token operator\">=</span> <span class=\"token function\">fcntl</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> F_SETFL<span class=\"token punctuation\">,</span> flags <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>O_NONBLOCK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">bool</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>retVal <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tnonBlocking <span class=\"token operator\">=</span> prevNonBlocking<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">IsNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> nonBlocking<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> iBytesSent<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> iBytesTemp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pTemp<span class=\"token operator\">=</span> pBuff<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n\t\tiBytesTemp<span class=\"token operator\">=</span> <span class=\"token function\">Send</span><span class=\"token punctuation\">(</span>pTemp<span class=\"token punctuation\">,</span> iSize <span class=\"token operator\">-</span> iBytesSent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// error occured?</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iBytesTemp <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iBytesTemp <span class=\"token operator\">==</span> SOCKET_TIMEOUT<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>SOCKET_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tiBytesSent<span class=\"token operator\">+</span><span class=\"token operator\">=</span> iBytesTemp<span class=\"token punctuation\">;</span>\n\t\tpTemp<span class=\"token operator\">+</span><span class=\"token operator\">=</span> iBytesTemp<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iBytesSent <span class=\"token operator\">&lt;</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>iBytesSent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Return values:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// SOCKET_TIMEOUT indicates timeout</span>\n<span class=\"token comment\" spellcheck=\"true\">/// SOCKET_ERROR in case of a problem.</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">Send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutSend\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">WaitSend</span><span class=\"token punctuation\">(</span>m_dwTimeoutSend<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> pBuff<span class=\"token punctuation\">,</span> iSize<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Return values:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// SOCKET_TIMEOUT indicates timeout</span>\n<span class=\"token comment\" spellcheck=\"true\">/// SOCKET_ERROR in case of a problem.</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">SendAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">auto</span> timestamp <span class=\"token operator\">=</span> <span class=\"token function\">ofGetElapsedTimeMicros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> timeleftSecs <span class=\"token operator\">=</span> m_dwTimeoutSend<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> timeleftMicros <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> total<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> bytesleft <span class=\"token operator\">=</span> iSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>total <span class=\"token operator\">&lt;</span> iSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutSend\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">WaitSend</span><span class=\"token punctuation\">(</span>timeleftSecs<span class=\"token punctuation\">,</span>timeleftMicros<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tret <span class=\"token operator\">=</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> pBuff <span class=\"token operator\">+</span> total<span class=\"token punctuation\">,</span> bytesleft<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">==</span> SOCKET_ERROR<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ttotal <span class=\"token operator\">+</span><span class=\"token operator\">=</span> ret<span class=\"token punctuation\">;</span>\n\t\tbytesleft <span class=\"token operator\">-</span><span class=\"token operator\">=</span>ret<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutSend\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> now <span class=\"token operator\">=</span> <span class=\"token function\">ofGetElapsedTimeMicros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> diff <span class=\"token operator\">=</span> now <span class=\"token operator\">-</span> timestamp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>diff <span class=\"token operator\">></span> m_dwTimeoutSend <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> SOCKET_TIMEOUT<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">float</span> timeFloat <span class=\"token operator\">=</span> m_dwTimeoutSend <span class=\"token operator\">-</span> diff<span class=\"token operator\">/</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n\t\t\ttimeleftSecs <span class=\"token operator\">=</span> timeFloat<span class=\"token punctuation\">;</span>\n\t\t\ttimeleftMicros <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>timeFloat <span class=\"token operator\">-</span> timeleftSecs<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Return values:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// SOCKET_TIMEOUT indicates timeout</span>\n<span class=\"token comment\" spellcheck=\"true\">/// SOCKET_ERROR in case of a problem.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutReceive\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">WaitReceive</span><span class=\"token punctuation\">(</span>m_dwTimeoutReceive<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> pBuff<span class=\"token punctuation\">,</span> iSize<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Return values:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// SOCKET_TIMEOUT indicates timeout</span>\n<span class=\"token comment\" spellcheck=\"true\">/// SOCKET_ERROR in case of a problem.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">PeekReceive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutReceive\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">WaitReceive</span><span class=\"token punctuation\">(</span>m_dwTimeoutReceive<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n \n\t<span class=\"token keyword\">return</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> pBuff<span class=\"token punctuation\">,</span> iSize<span class=\"token punctuation\">,</span> MSG_PEEK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Return values:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// SOCKET_TIMEOUT indicates timeout</span>\n<span class=\"token comment\" spellcheck=\"true\">/// SOCKET_ERROR in case of a problem.</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">ReceiveAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">auto</span> timestamp <span class=\"token operator\">=</span> <span class=\"token function\">ofGetElapsedTimeMicros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> timeleftSecs <span class=\"token operator\">=</span> m_dwTimeoutReceive<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> timeleftMicros <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> totalBytes<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutReceive\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">WaitReceive</span><span class=\"token punctuation\">(</span>timeleftSecs<span class=\"token punctuation\">,</span> timeleftMicros<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">recv</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> pBuff<span class=\"token operator\">+</span>totalBytes<span class=\"token punctuation\">,</span> iSize<span class=\"token operator\">-</span>totalBytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> totalBytes <span class=\"token operator\">!=</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ret <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> SOCKET_ERROR<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\ttotalBytes <span class=\"token operator\">+</span><span class=\"token operator\">=</span> ret<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_dwTimeoutReceive\t<span class=\"token operator\">!=</span> NO_TIMEOUT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> now <span class=\"token operator\">=</span> <span class=\"token function\">ofGetElapsedTimeMicros</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> diff <span class=\"token operator\">=</span> now <span class=\"token operator\">-</span> timestamp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>diff <span class=\"token operator\">></span> m_dwTimeoutReceive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> SOCKET_TIMEOUT<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">float</span> timeFloat <span class=\"token operator\">=</span> m_dwTimeoutSend <span class=\"token operator\">-</span> diff<span class=\"token operator\">/</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span>\n\t\t\ttimeleftSecs <span class=\"token operator\">=</span> timeFloat<span class=\"token punctuation\">;</span>\n\t\t\ttimeleftMicros <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>timeFloat <span class=\"token operator\">-</span> timeleftSecs<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>totalBytes <span class=\"token operator\">&lt;</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> totalBytes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">GetRemoteAddr</span><span class=\"token punctuation\">(</span>LPINETADDR pInetAddr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\t\tsocklen_t iSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\tiSize<span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getpeername</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pInetAddr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>iSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">GetInetAddr</span><span class=\"token punctuation\">(</span>LPINETADDR pInetAddr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\t\tsocklen_t iSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\tiSize<span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> ret <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getsockname</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>sockaddr <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>pInetAddr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>iSize<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> SOCKET_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ret<span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">SetTimeoutConnect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeoutInSeconds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm_dwTimeoutConnect<span class=\"token operator\">=</span> timeoutInSeconds<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">SetTimeoutSend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeoutInSeconds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm_dwTimeoutSend<span class=\"token operator\">=</span> timeoutInSeconds<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">SetTimeoutReceive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeoutInSeconds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm_dwTimeoutReceive<span class=\"token operator\">=</span> timeoutInSeconds<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">SetTimeoutAccept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeoutInSeconds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tm_dwTimeoutAccept<span class=\"token operator\">=</span> timeoutInSeconds<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">GetTimeoutConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m_dwTimeoutConnect<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">GetTimeoutSend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m_dwTimeoutSend<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">GetTimeoutReceive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m_dwTimeoutReceive<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">GetTimeoutAccept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> m_dwTimeoutAccept<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">GetReceiveBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\t\tsocklen_t size<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">int</span> sizeBuffer<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tsize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">getsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_RCVBUF<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sizeBuffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> sizeBuffer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">SetReceiveBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sizeInByte<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_RCVBUF<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sizeInByte<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">GetSendBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\t\tsocklen_t size<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token keyword\">int</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">int</span> sizeBuffer<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tsize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token function\">getsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_SNDBUF<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sizeBuffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ret<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> sizeBuffer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">SetSendBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sizeInByte<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">==</span> INVALID_SOCKET<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_SNDBUF<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>sizeInByte<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofxNetworkCheckError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">GetMaxConnections</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> m_iMaxConnections<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofxTCPManager<span class=\"token operator\">::</span><span class=\"token function\">CheckHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pAddrStr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  hostent <span class=\"token operator\">*</span> hostEntry<span class=\"token punctuation\">;</span>\n  in_addr iaHost<span class=\"token punctuation\">;</span>\n  iaHost<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>pAddrStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  hostEntry <span class=\"token operator\">=</span> <span class=\"token function\">gethostbyaddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>iaHost<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> in_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> AF_INET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hostEntry<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n","type":"source","static":true}}],"fetch":[]}