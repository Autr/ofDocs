{"data":[{"page":{"entry":{"name":"Raspberry-Pi-Getting-Started","filename":"Raspberry-Pi-Getting-Started.md","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/content/setup/RaspberryPi/Raspberry-Pi-Getting-Started.md","path":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started","route":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started.md","dir":"../ofSite/content/setup/RaspberryPi","ext":"md","type":"page","id":1937,"parent":1919,"breadcrumbs":[1919,1795],"siblings":[],"translations":{"ko":{"name":"Raspberry-Pi-Getting-Started-ko","filename":"Raspberry-Pi-Getting-Started.ko.md","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/content/setup/RaspberryPi/Raspberry-Pi-Getting-Started.ko.md","path":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started-ko","route":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started.ko.md","dir":"../ofSite/content/setup/RaspberryPi","ext":"md","type":"page","id":1936,"parent":1919,"breadcrumbs":[1919,1795],"siblings":[],"translations":{}}}},"description":{},"document":"<h2>-<em>- coding: utf-8 -</em>-</h2>\n<p>.. title: raspberry pi</p>\n<h1>Getting your Raspberry Pi ready for openFrameworks</h1>\n<h2>Install Raspbian &quot;Buster&quot;</h2>\n<ol start=\"0\">\n<li>Install the latest <em><strong>Raspbian</strong> (Debian Buster)</em> image from the <a href=\"http://www.raspberrypi.org/downloads\">Raspberry Pi downloads page</a></li>\n<li>Follow the instructions at <a href=\"http://elinux.org/RPi_Easy_SD_Card_Setup\">Raspberry Pi Preparing Your SD Card</a> to get Raspbian installed onto your SD Card</li>\n</ol>\n<h2>Configure the Raspberry Pi</h2>\n<p>This guide assumes you are starting from a fresh Raspbian install and that you are able to connect to the Raspberry Pi and send it commands.</p>\n<p>If you're installing Raspbian via NOOBS, SSH access is disabled by default since the 2016-11-25 release, which makes setup in headless mode difficult. If you don't have access to a keyboard and monitor and plan to set up from scratch in the headless mode, make sure you follow <a href=\"https://www.raspberrypi.org/documentation/remote-access/ssh/\">this guide and add the ssh file onto the boot partition</a>.</p>\n<p>You can enter commands on the Pi by:</p>\n<ol start=\"0\">\n<li>SSH into the Pi from a different computer</li>\n<li>Attach a keyboard and monitor to the Pi.\n<ul>\n<li>With Stretch the Raspberry Pi now boots the X11 window system by default, open up LXTerminal from the shortcut on the Raspberry Pi Desktop</li>\n<li>Type in the command <code>sudo raspi-config</code></li>\n</ul>\n</li>\n</ol>\n<p><em>We need to make sure the CPU has 192MB of RAM in order to compile openFrameworks. Once you have compiled openFrameworks you may want to repeat this step with 128</em></p>\n<ol start=\"0\">\n<li>Select <code>1 Expand Filesystem</code> and hit Enter</li>\n<li>Select <code>7 Advanced Options</code> and hit Enter\n<ul>\n<li>Select <code>A3 Memory Split</code> and hit Enter</li>\n<li>Type <code>64</code> and Hit <code>&lt;ok&gt;</code></li>\n</ul>\n</li>\n</ol>\n<p>openFrameworks does not use the X11 Desktop for running OF applications. You can save GPU memory by disabling it. This is optional but suggested.</p>\n<ol start=\"0\">\n<li>Select <code>3 Boot Options</code></li>\n<li>Select <code>B1 Console</code> or <code>B2 Console Autologin</code></li>\n</ol>\n<p>For openFrameworks 0.11.0 and onwards OF needs to use the new experimental GL driver instead of the legacy driver.</p>\n<ol start=\"0\">\n<li>Select <code>7 Advanced Options</code> and hit Enter\n<ul>\n<li>Select either <code>GL Driver Fake KMS</code> or <code>GL Driver Full KMS</code> or from the options and hit Enter</li>\n</ul>\n</li>\n</ol>\n<p>For older OF releases with Wheezy or Jessie select the legacy driver instead.</p>\n<p>Unlike Wheezy, Debian Jessie onwards does not display the IP address on boot. You may wish to get the current IP by typing <code>ifconfig</code>. The IP address is under the eth0 entry for wired ethernet. This can possibly change on reboot.</p>\n<ol start=\"0\">\n<li>Reboot when prompted or type <code>sudo reboot</code></li>\n<li>Assuming you have internet access run these commands to update the software to the latest packages.</li>\n</ol>\n<pre><code class=\"language-sh\">sudo apt<span class=\"token operator\">-</span>get clean\nsudo apt<span class=\"token operator\">-</span>get update\nsudo apt<span class=\"token operator\">-</span>get upgrade\n</code></pre>\n<p><em>Note: The above steps may take a little while.</em></p>\n<h2>Download openFrameworks</h2>\n<p>You now can download openFrameworks and uncompress it into a folder. Using a Shell, The following commands will download openFrameworks and uncompress it into the folder <code>/home/pi/openFrameworks</code></p>\n<h3>For the Raspberry Pi using OF for arm6</h3>\n<pre><code class=\"language-sh\">cd\nwget https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>openframeworks<span class=\"token punctuation\">.</span>cc<span class=\"token operator\">/</span>versions<span class=\"token operator\">/</span>v0<span class=\"token number\">.11</span><span class=\"token punctuation\">.</span><span class=\"token number\">0</span><span class=\"token operator\">/</span>of_v0<span class=\"token number\">.11</span><span class=\"token punctuation\">.</span>0_linuxarmv6l_release<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz\nmkdir openFrameworks\ntar vxfz of_v0<span class=\"token number\">.11</span><span class=\"token punctuation\">.</span>0_linuxarmv6l_release<span class=\"token punctuation\">.</span>tar<span class=\"token punctuation\">.</span>gz <span class=\"token operator\">-</span>C openFrameworks <span class=\"token operator\">--</span>strip<span class=\"token operator\">-</span>components <span class=\"token number\">1</span>\n</code></pre>\n<h2>Install packages and compile openFrameworks:</h2>\n<p>Make sure you didn't skip the Memory Split step in the above section <em><strong>Configure the Raspberry Pi</strong></em> or it will eventually fail.</p>\n<p>The time for these steps will depend on whether you are on a RPI1, RPI2 or RPI3 and the speed of the Raspbian mirrors to download the packages.</p>\n<p>Assuming openFrameworks is located at <code>/home/pi/openFrameworks</code> run the following commands to install the necessary packages and compile openFrameworks.</p>\n<pre><code class=\"language-sh\">cd <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>pi<span class=\"token operator\">/</span>openFrameworks<span class=\"token operator\">/</span>scripts<span class=\"token operator\">/</span>linux<span class=\"token operator\">/</span>debian\nsudo <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>install_dependencies<span class=\"token punctuation\">.</span>sh\n</code></pre>\n<p>You are now ready to compile openFrameworks!</p>\n<pre><code class=\"language-sh\">make Release <span class=\"token operator\">-</span>C <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>pi<span class=\"token operator\">/</span>openFrameworks<span class=\"token operator\">/</span>libs<span class=\"token operator\">/</span>openFrameworksCompiled<span class=\"token operator\">/</span>project\n</code></pre>\n<h2>Use EGL instead of GLFW</h2>\n<p>As of 0.11.0 the default window is ofAppGLFWWindow. If you want to use the older ofAppEGLWindow approach, comment out <code>USE_GLFW_WINDOW = 1</code> in <code>libs/openFrameworksCompiled/project/linuxarmv6l/config.linuxarmv6l.default.mk</code></p>\n<h2>Speeding up compiling</h2>\n<p>Compiling natively on the Raspberry Pi takes a long time. openFrameworks applications typically take much less time than the core library. Taking the time to set up a cross-compiling solution will save you enormous amounts of time.</p>\n<p><a href=\"../raspberry-pi-cross-compiling-guide/\">Raspberry Pi Cross Compiling Guide</a></p>\n<h2>Compile your first app</h2>\n<p>openFrameworks ships with a bunch of examples located in the <code>openFrameworks/examples</code> folder. Inside examples the projects are sorted by the categories:</p>\n<ul>\n<li>3d</li>\n<li>addons</li>\n<li>communication</li>\n<li>empty</li>\n<li>events</li>\n<li>gl</li>\n<li>gles</li>\n<li>graphics</li>\n<li>gui</li>\n<li>math</li>\n<li>sound</li>\n<li>utils</li>\n<li>video</li>\n</ul>\n<p>Inside each category folder are a few examples of each. To run them you need to go into the folder, build and run.</p>\n<p>For example, here is how you build and run the polygonExample:</p>\n<pre><code class=\"language-sh\">cd <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>pi<span class=\"token operator\">/</span>openFrameworks<span class=\"token operator\">/</span>examples<span class=\"token operator\">/</span>graphics<span class=\"token operator\">/</span>polygonExample\nmake\nmake run\n</code></pre>\n<p>Unlike other platforms, OF Raspberry Pi projects do not make use of the projectGenerator. To create your own project from scratch, copy <code>examples/empty/emptyExample</code> into <code>apps/myApps/yourProjectName</code> folder and start from there</p>\n<p>For example:</p>\n<pre><code class=\"language-sh\">cp <span class=\"token operator\">-</span>R <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>pi<span class=\"token operator\">/</span>openFrameworks<span class=\"token operator\">/</span>examples<span class=\"token operator\">/</span>empty<span class=\"token operator\">/</span>emptyExample <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>pi<span class=\"token operator\">/</span>openFrameworks<span class=\"token operator\">/</span>apps<span class=\"token operator\">/</span>myApps<span class=\"token operator\">/</span>myRpiApp\ncd <span class=\"token operator\">/</span>home<span class=\"token operator\">/</span>pi<span class=\"token operator\">/</span>openFrameworks<span class=\"token operator\">/</span>apps<span class=\"token operator\">/</span>myApps<span class=\"token operator\">/</span>myRpiApp\nmake\nmake run\n</code></pre>\n<p>It is critical to keep your application directory 3 levels below the openFrameworks directory.</p>\n<p>Have fun! :)</p>\n","raw":"## -*- coding: utf-8 -*-\n.. title: raspberry pi\n\nGetting your Raspberry Pi ready for openFrameworks\n============\n\n\n## Install Raspbian \"Buster\"\n0. Install the latest _**Raspbian** (Debian Buster)_ image from the [Raspberry Pi downloads page](http://www.raspberrypi.org/downloads)\n1. Follow the instructions at [Raspberry Pi Preparing Your SD Card](http://elinux.org/RPi_Easy_SD_Card_Setup) to get Raspbian installed onto your SD Card\n\n\n## Configure the Raspberry Pi\nThis guide assumes you are starting from a fresh Raspbian install and that you are able to connect to the Raspberry Pi and send it commands.\n\nIf you're installing Raspbian via NOOBS, SSH access is disabled by default since the 2016-11-25 release, which makes setup in headless mode difficult. If you don't have access to a keyboard and monitor and plan to set up from scratch in the headless mode, make sure you follow [this guide and add the ssh file onto the boot partition](https://www.raspberrypi.org/documentation/remote-access/ssh/).\n\nYou can enter commands on the Pi by:\n\n0. SSH into the Pi from a different computer\n0. Attach a keyboard and monitor to the Pi.\n\t* With Stretch the Raspberry Pi now boots the X11 window system by default, open up LXTerminal from the shortcut on the Raspberry Pi Desktop\n\t* Type in the command `sudo raspi-config`\n\n_We need to make sure the CPU has 192MB of RAM in order to compile openFrameworks. Once you have compiled openFrameworks you may want to repeat this step with 128_\n\n0.  Select `1 Expand Filesystem` and hit Enter\n0.  Select `7 Advanced Options` and hit Enter\n\t* Select `A3 Memory Split` and hit Enter\n\t* Type `64` and Hit `<ok>`\n\nopenFrameworks does not use the X11 Desktop for running OF applications. You can save GPU memory by disabling it. This is optional but suggested.\n\n0. Select `3 Boot Options`\n0. Select `B1 Console` or `B2 Console Autologin`\n\nFor openFrameworks 0.11.0 and onwards OF needs to use the new experimental GL driver instead of the legacy driver.\n\n0. Select `7 Advanced Options` and hit Enter\n\t* Select either `GL Driver Fake KMS` or `GL Driver Full KMS` or from the options and hit Enter\n\nFor older OF releases with Wheezy or Jessie select the legacy driver instead.\n\nUnlike Wheezy, Debian Jessie onwards does not display the IP address on boot. You may wish to get the current IP by typing `ifconfig`. The IP address is under the eth0 entry for wired ethernet. This can possibly change on reboot.\n\n0. Reboot when prompted or type `sudo reboot`\n0. Assuming you have internet access run these commands to update the software to the latest packages.\n\n```sh\nsudo apt-get clean\nsudo apt-get update\nsudo apt-get upgrade\n```\n_Note: The above steps may take a little while._\n\n## Download openFrameworks\nYou now can download openFrameworks and uncompress it into a folder. Using a Shell, The following commands will download openFrameworks and uncompress it into the folder `/home/pi/openFrameworks`\n\n### For the Raspberry Pi using OF for arm6\n\n```sh\ncd\nwget https://openframeworks.cc/versions/v0.11.0/of_v0.11.0_linuxarmv6l_release.tar.gz\nmkdir openFrameworks\ntar vxfz of_v0.11.0_linuxarmv6l_release.tar.gz -C openFrameworks --strip-components 1\n```\n\n\n## Install packages and compile openFrameworks:\n Make sure you didn't skip the Memory Split step in the above section _**Configure the Raspberry Pi**_ or it will eventually fail.\n\nThe time for these steps will depend on whether you are on a RPI1, RPI2 or RPI3 and the speed of the Raspbian mirrors to download the packages.\n\nAssuming openFrameworks is located at `/home/pi/openFrameworks` run the following commands to install the necessary packages and compile openFrameworks.\n\n```sh\ncd /home/pi/openFrameworks/scripts/linux/debian\nsudo ./install_dependencies.sh\n```\n\nYou are now ready to compile openFrameworks!\n```sh\nmake Release -C /home/pi/openFrameworks/libs/openFrameworksCompiled/project\n```\n\n## Use EGL instead of GLFW \nAs of 0.11.0 the default window is ofAppGLFWWindow. If you want to use the older ofAppEGLWindow approach, comment out `USE_GLFW_WINDOW = 1` in `libs/openFrameworksCompiled/project/linuxarmv6l/config.linuxarmv6l.default.mk` \n\n## Speeding up compiling\nCompiling natively on the Raspberry Pi takes a long time. openFrameworks applications typically take much less time than the core library. Taking the time to set up a cross-compiling solution will save you enormous amounts of time.\n\n[Raspberry Pi Cross Compiling Guide](../raspberry-pi-cross-compiling-guide/)\n\n## Compile your first app\nopenFrameworks ships with a bunch of examples located in the `openFrameworks/examples` folder. Inside examples the projects are sorted by the categories:\n\n* 3d\n* addons\n* communication\n* empty\n* events\n* gl\n* gles\n* graphics\n* gui\n* math\n* sound\n* utils\n* video\n\nInside each category folder are a few examples of each. To run them you need to go into the folder, build and run.\n\nFor example, here is how you build and run the polygonExample:\n\n```sh\ncd /home/pi/openFrameworks/examples/graphics/polygonExample\nmake\nmake run\n```\n\nUnlike other platforms, OF Raspberry Pi projects do not make use of the projectGenerator. To create your own project from scratch, copy `examples/empty/emptyExample` into `apps/myApps/yourProjectName` folder and start from there\n\nFor example:\n\n```sh\ncp -R /home/pi/openFrameworks/examples/empty/emptyExample /home/pi/openFrameworks/apps/myApps/myRpiApp\ncd /home/pi/openFrameworks/apps/myApps/myRpiApp\nmake\nmake run\n```\n\nIt is critical to keep your application directory 3 levels below the openFrameworks directory.\n\nHave fun! :)\n","type":"page","static":true}}],"fetch":[]}