{"data":[{"page":{"entry":{"name":"Raspberry-Pi-Getting-Started-ArchLinux-ko","filename":"Raspberry-Pi-Getting-Started-ArchLinux.ko.md","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/content/setup/RaspberryPi/Raspberry-Pi-Getting-Started-ArchLinux.ko.md","path":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started-ArchLinux-ko","route":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started-ArchLinux.ko.md","dir":"../ofSite/content/setup/RaspberryPi","ext":"md","type":"page","id":1932,"parent":1919,"breadcrumbs":[1919,1795],"siblings":[],"translations":{}},"description":{},"document":"<h2>-<em>- coding: utf-8 -</em>-</h2>\n<p>.. title: raspberry pi</p>\n<h1>오픈프레임웍스를 위한 라즈베리파이2 B 세팅</h1>\n<h2>SD 카드 생성 - ArchLinux &quot;ARMv7&quot;</h2>\n<p><em>*이 과정은 리눅스 머신에서 수행되었습니다 (raspbian을 사용할 수도 있습니다 :D)</em></p>\n<hr>\n<p>아래 설명의 내용중 <strong>sdX</strong>를 여러분의 컴퓨터에서 보이는 SD 카드의 이름으로 변경해주십시오.</p>\n<ol>\n<li>\n<p>SD카드의 파티션을 위해 fdisk를 시작합니다.</p>\n<pre><code> fdisk /dev/sdX\n</code></pre>\n</li>\n<li>\n<p>fdisk 프롬프트에서, 원래의 파티션을 삭제하고, 새로운 파티션을 생성합니다:</p>\n<p><strong>o</strong>를 입력합니다. 드라이브상의 모든 파티션이 삭제됩니다.</p>\n<p><strong>p</strong>를 입력합니다. 남아있는 파티션이 없을것입니다.</p>\n<p><strong>n</strong>을 입력하고, <strong>p</strong>를 입력하여 primary를 선택합니다. <strong>1</strong>를 입력해 드라이브의 첫 파티션으로 설정하고, <strong>ENTER</strong>키를 눌러 첫 섹터로 기본으로 지정한 뒤 <strong>+100M</strong>를 입력하여 끝 섹터를 지정해줍니다.</p>\n<p><strong>t</strong>를 입력하고, <strong>c</strong>를 입력하여 첫 파티션을 **W95 AT32 (LBA)**로 지정해줍니다.</p>\n<p><strong>n</strong>을 입력하고, <strong>p</strong>를 입력해 primary를 선택한 뒤, <strong>2</strong>를 입력하여 두번째 파티션을 선택하고, <strong>ENTER</strong> 두번 눌러 기본 first andast sect로 지정합니다.</p>\n</li>\n<li>\n<p><strong>w</strong>를 눌러 파티션 테이블을 작성하고 종료합니다.</p>\n</li>\n<li>\n<p>FAT파일 시스템을 생성하고 마운트합니다:</p>\n<pre><code> mkfs.vfat /dev/sdX1\n mkdir boot\n mount /dev/sdX1 boot\n</code></pre>\n</li>\n<li>\n<p>ext4 파일 시스템을 생성하고 마운트합니다:</p>\n<pre><code> mkfs.ext4 /dev/sdX2\n mkdir root\n mount /dev/sdX2 root\n</code></pre>\n</li>\n<li>\n<p>root 파일 시스템을 다운로드 하고 추출합니다(as root, not via sudo):</p>\n<pre><code> wget http://archlinuxarm.org/os/ArchLinuxARM-rpi-2-latest.tar.gz\n bsdtar -xpf ArchLinuxARM-rpi-2-latest.tar.gz -C root\n sync\n</code></pre>\n</li>\n<li>\n<p>boot파일을 첫 파티션으로 이동합니다:</p>\n<pre><code> mv root/boot/* boot\n</code></pre>\n</li>\n<li>\n<p>두 파티션을 언마운트합니다:</p>\n<pre><code> umount boot root\n</code></pre>\n</li>\n</ol>\n<p>라즈베리파이에 SD카드를 삽입하고, ethernet을 연결한 뒤, 5V전원을 연결합니다.\n시리얼 콘솔창을 사용하거나 혹은 SSH로 접속합니다.\n기본 사용자와 패스워드로 로그인합니다\nroot의 초기 패스워드는 root입니다.</p>\n<hr>\n<h2>도움말</h2>\n<ol>\n<li><strong>root</strong>로 로그인합니다.</li>\n</ol>\n<ul>\n<li>\n<p>패스워드를 변경합니다.</p>\n<ul>\n<li>passed</li>\n</ul>\n</li>\n<li>\n<p>sudo 설치합니다.</p>\n<ul>\n<li>pacman -S sudo</li>\n</ul>\n</li>\n<li>\n<p><strong>alarm</strong> user를 삭제합니다.</p>\n<ul>\n<li>userdel alarm</li>\n</ul>\n</li>\n<li>\n<p>새로운 <strong>pi</strong> user를 생성합니다.</p>\n<ul>\n<li>useradd -m -G users -s /bin/bash pi</li>\n</ul>\n</li>\n<li>\n<p><em>sudoers</em> 파일을 수정합니다.</p>\n<ul>\n<li>\n<p>sudo nano /etc/sudoers</p>\n<pre><code>  ## Uncomment to allow members of group sudo to execute any command\n  #%sudo ALL=(ALL) NOPASSWD: ALL\n</code></pre>\n</li>\n<li>\n<p>위의 두번째 라인의 주석을 해제합니다, 아래와 같이 수정되어야 합니다:</p>\n<pre><code>  ## Uncomment to allow members of group sudo to execute any command\n  %sudo ALL=(ALL) NOPASSWD: ALL\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Control-O + Control-X 를 눌러 저장하고 종료합니다.</li>\n</ul>\n<ul>\n<li>\n<p>사용자 <strong>pi</strong>에게 superpowers 권한을 추가합니다.</p>\n<ul>\n<li>groupadd sudo</li>\n<li>usermod -a -G sudo pi</li>\n</ul>\n</li>\n<li>\n<p>손쉬운 사용을 위해 bash를 수정합니다.</p>\n<ul>\n<li>\n<p>nano .bashrc</p>\n<pre><code>  # This reads .bash_aliases file for aliases\n  if [ -f ~/.bash_aliases ]; then\n  . ~/.bash_aliases\n  fi\n</code></pre>\n</li>\n<li>\n<p>nano .bash_aliases</p>\n<pre><code>   #Enter openFrameworks folder just by typing &quot;oF&quot;\n   alias oF='cd /home/pi/of_v0.9.2_linuxarmv7l'\n   #Run project generator by typing projectgenerator\n   alias projectgenerator='oF &amp;&amp; ./apps/projectGenerator/commandLine/bin/projectGenerator'\n   # Read temperature of rPi\n   alias temp='/opt/vc/bin/vcgencmd measure_temp'\n   # Read screen properties\n   alias screen='/opt/vc/bin/tvservice -s'\n</code></pre>\n</li>\n<li>\n<p>nano .bash_profile</p>\n<pre><code>  #Setup openFrameworks variables\n  export MAKEFLAGS=-j4 PLATFORM_ARCH=armv7l PLATFORM_VARIANT=raspberry2\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>예비 작업</h2>\n<ol>\n<li>\n<p>말끔한 작업을 위해 디렉토리를 생성합니다.(추후 삭제 가능)</p>\n<ul>\n<li>mkdir builds</li>\n<li>cd builds</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>\n<p>devel 같은 것들을 설치합니다.</p>\n<ul>\n<li>sudo pacman -S --needed base-devel</li>\n</ul>\n</li>\n<li>\n<p><strong>rtMIDI를 설치합니다.</strong></p>\n<ul>\n<li>curl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/rtmidi.tar.gz</li>\n</ul>\n</li>\n<li>\n<p>PKGBUILD 파일을 편집합니다.</p>\n<ul>\n<li>cd rtmidi</li>\n<li>nano PKGBUILD</li>\n</ul>\n</li>\n<li>\n<p>[ <strong>arch=('i686' 'x86_64')</strong> ]를 찾아 [ <strong>arch=('armv7h')</strong> ]로 변경</p>\n<pre><code>  arch=('i686' 'x86_64') ----&gt; arch=('armv7h')\n</code></pre>\n</li>\n<li>\n<p>Make</p>\n<pre><code>  makepkg -si\n</code></pre>\n</li>\n<li>\n<p><strong>rtAudio를 설치합니다.</strong></p>\n<ul>\n<li>curl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/rtaudio.tar.gz</li>\n</ul>\n</li>\n<li>\n<p>PKGBUILD 파일을 편집합니다.</p>\n<ul>\n<li>cd rtaudio</li>\n<li>nano PKGBUILD</li>\n</ul>\n</li>\n<li>\n<p>[ arch=('i686' 'x86_64') ]를 찾아 [ arch=('armv7h') ]로 변경합니다.</p>\n</li>\n<li>\n<p>Make</p>\n<ul>\n<li>makepkg -si</li>\n</ul>\n<p>[프롬프트에서 물어보는 요청을 모두 수락합니다(물론 여러분의 동의가 필요하죠)]</p>\n</li>\n<li>\n<p>재부팅 후 builds폴더를 삭제합니다(패키지는 이미 설치되어 있음).</p>\n</li>\n</ul>\n<hr>\n<h2>오픈프레임웍스</h2>\n<ol>\n<li>\n<p>웹사이트에서 오픈프레임웍스를 다운받습니다.</p>\n<ul>\n<li>curl -O https://openframeworks.cc/versions/v0.9.2/of_v0.9.2_linuxarmv7l_release.tar.gz</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>\n<p>oF 디렉토리를 생성합니다.</p>\n<ul>\n<li>mkdir of_v0.9.2_linuxarmv7l</li>\n</ul>\n</li>\n<li>\n<p>tar파일을 압축 해제합니다.</p>\n<ul>\n<li>tar vxfz of_v0.9.2_linuxarmv7l_release.tar.gz -C of_v0.9.2_linuxarmv7l --strip-components 1</li>\n</ul>\n</li>\n<li>\n<p>업데이트</p>\n<ul>\n<li>pacman -Syu</li>\n</ul>\n</li>\n<li>\n<p>스크립트들을 실행합니다.</p>\n<ul>\n<li>\n<p>cd of_v0.9.2_linuxarmv7l/scripts/linux/archlinux</p>\n</li>\n<li>\n<p>sudo ./install_dependencies.sh</p>\n</li>\n</ul>\n<p>[This usually takes some time and has some prompts (accept them)]</p>\n<ul>\n<li>sudo install_codecs.sh</li>\n</ul>\n</li>\n<li>\n<p>makeflags를 세팅합니다(.bash_profile에 아래 내용을 추가하면 매번 입력해줄 필요가 없습니다).</p>\n<ul>\n<li>export MAKEFLAGS=-j4 PLATFORM_ARCH=armv7l PLATFORM_VARIANT=raspberry2</li>\n</ul>\n</li>\n<li>\n<p>oF를 컴파일합니다.</p>\n<ul>\n<li>make Release -C /home/pi/of_v0.9.2_linuxarmv7l/libs/openFrameworksCompiled/project</li>\n</ul>\n</li>\n<li>\n<p>예제 실행하기</p>\n<ul>\n<li>\n<p>cd /home/pi/of_v0.9.2_linuxarmv7l/examples/graphics/polygonExample</p>\n</li>\n<li>\n<p>make &amp;&amp; make run</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>Have lots of fun ! <strong>:)</strong></p>\n","raw":"## -*- coding: utf-8 -*-\n.. title: raspberry pi\n\n오픈프레임웍스를 위한 라즈베리파이2 B 세팅\n============\n\n## SD 카드 생성 - ArchLinux \"ARMv7\"\n\n_*이 과정은 리눅스 머신에서 수행되었습니다 (raspbian을 사용할 수도 있습니다 :D)_\n\n---\n\n아래 설명의 내용중 **sdX**를 여러분의 컴퓨터에서 보이는 SD 카드의 이름으로 변경해주십시오.\n\n1. SD카드의 파티션을 위해 fdisk를 시작합니다.\n\n\t\tfdisk /dev/sdX\n\n2. fdisk 프롬프트에서, 원래의 파티션을 삭제하고, 새로운 파티션을 생성합니다:\n\n\t**o**를 입력합니다. 드라이브상의 모든 파티션이 삭제됩니다.\n\n\t**p**를 입력합니다. 남아있는 파티션이 없을것입니다.\n\n\t**n**을 입력하고, **p**를 입력하여 primary를 선택합니다. **1**를 입력해 드라이브의 첫 파티션으로 설정하고, **ENTER**키를 눌러 첫 섹터로 기본으로 지정한 뒤 **+100M**를 입력하여 끝 섹터를 지정해줍니다.\n\n\t**t**를 입력하고, **c**를 입력하여 첫 파티션을 **W95 AT32 (LBA)**로 지정해줍니다.\n\n\t**n**을 입력하고, **p**를 입력해 primary를 선택한 뒤, **2**를 입력하여 두번째 파티션을 선택하고, **ENTER** 두번 눌러 기본 first andast sect로 지정합니다.\n\n3.\t**w**를 눌러 파티션 테이블을 작성하고 종료합니다.\n\n4. FAT파일 시스템을 생성하고 마운트합니다:\n\n\t\tmkfs.vfat /dev/sdX1\n\t\tmkdir boot\n\t\tmount /dev/sdX1 boot\n\n5. ext4 파일 시스템을 생성하고 마운트합니다:\n\n\t\tmkfs.ext4 /dev/sdX2\n\t\tmkdir root\n\t\tmount /dev/sdX2 root\n\n6. root 파일 시스템을 다운로드 하고 추출합니다(as root, not via sudo):\n\n\t\twget http://archlinuxarm.org/os/ArchLinuxARM-rpi-2-latest.tar.gz\n\t\tbsdtar -xpf ArchLinuxARM-rpi-2-latest.tar.gz -C root\n\t\tsync\n\n7. boot파일을 첫 파티션으로 이동합니다:\n\n\t\tmv root/boot/* boot\n\n8. 두 파티션을 언마운트합니다:\n\n\t\tumount boot root\n\n라즈베리파이에 SD카드를 삽입하고, ethernet을 연결한 뒤, 5V전원을 연결합니다.\n시리얼 콘솔창을 사용하거나 혹은 SSH로 접속합니다.\n기본 사용자와 패스워드로 로그인합니다\nroot의 초기 패스워드는 root입니다.\n\n---\n## 도움말\n\n1. **root**로 로그인합니다.\n\n+ 패스워드를 변경합니다.\n\n\t* passed\n\n+ sudo 설치합니다.\n\n\t* pacman -S sudo\n\n+ **alarm** user를 삭제합니다.\n\n\t* userdel alarm\n\n+ 새로운 **pi** user를 생성합니다.\n\n\t* useradd -m -G users -s /bin/bash pi\n\n+ _sudoers_ 파일을 수정합니다.\n\n\t* sudo nano /etc/sudoers\n\n\t\t\t## Uncomment to allow members of group sudo to execute any command\n\t\t\t#%sudo ALL=(ALL) NOPASSWD: ALL\n\n\t* 위의 두번째 라인의 주석을 해제합니다, 아래와 같이 수정되어야 합니다:\n\n\t\t\t## Uncomment to allow members of group sudo to execute any command\n\t\t\t%sudo ALL=(ALL) NOPASSWD: ALL\n\n* Control-O + Control-X 를 눌러 저장하고 종료합니다.\n\n+ 사용자 **pi**에게 superpowers 권한을 추가합니다.\n\n\t* groupadd sudo\n\t* usermod -a -G sudo pi\n\n+ 손쉬운 사용을 위해 bash를 수정합니다.\n\n\t* nano .bashrc\n\n\t\t\t# This reads .bash_aliases file for aliases\n\t\t\tif [ -f ~/.bash_aliases ]; then\n\t\t\t. ~/.bash_aliases\n\t\t\tfi\n\n\t * nano .bash_aliases\n\n\t\t\t  #Enter openFrameworks folder just by typing \"oF\"\n\t\t\t  alias oF='cd /home/pi/of_v0.9.2_linuxarmv7l'\n\t\t\t  #Run project generator by typing projectgenerator\n\t\t\t  alias projectgenerator='oF && ./apps/projectGenerator/commandLine/bin/projectGenerator'\n\t\t\t  # Read temperature of rPi\n\t\t\t  alias temp='/opt/vc/bin/vcgencmd measure_temp'\n\t\t\t  # Read screen properties\n\t\t\t  alias screen='/opt/vc/bin/tvservice -s'\n\n\t* nano .bash_profile\n\n\t\t\t#Setup openFrameworks variables\n\t\t\texport MAKEFLAGS=-j4 PLATFORM_ARCH=armv7l PLATFORM_VARIANT=raspberry2\n\n---\n## 예비 작업\n\n1. 말끔한 작업을 위해 디렉토리를 생성합니다.(추후 삭제 가능)\n\n\t* mkdir builds\n\t* cd builds\n\n+ devel 같은 것들을 설치합니다.\n\n\t* sudo pacman -S --needed base-devel\n\n+ **rtMIDI를 설치합니다.**\n\n\t* curl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/rtmidi.tar.gz\n\n+ PKGBUILD 파일을 편집합니다.\n\n\t* cd rtmidi\n\t* nano PKGBUILD\n\n+ [ **arch=('i686' 'x86_64')** ]를 찾아 [ **arch=('armv7h')** ]로 변경\n\n\t\tarch=('i686' 'x86_64') ----> arch=('armv7h')\n\n+ Make\n\n\t\tmakepkg -si\n\n+ **rtAudio를 설치합니다.**\n\n\t* curl -L -O https://aur.archlinux.org/cgit/aur.git/snapshot/rtaudio.tar.gz\n\n+ PKGBUILD 파일을 편집합니다.\n\t* cd rtaudio\n\t* nano PKGBUILD\n\n+ [ arch=('i686' 'x86_64') ]를 찾아 [ arch=('armv7h') ]로 변경합니다.\n\n+ Make\n\n\t* makepkg -si\n\n\t[프롬프트에서 물어보는 요청을 모두 수락합니다(물론 여러분의 동의가 필요하죠)]\n\n+ 재부팅 후 builds폴더를 삭제합니다(패키지는 이미 설치되어 있음).\n\n---\n## 오픈프레임웍스\n\n\n1. 웹사이트에서 오픈프레임웍스를 다운받습니다.\n\n\t* curl -O https://openframeworks.cc/versions/v0.9.2/of_v0.9.2_linuxarmv7l_release.tar.gz\n\n+ oF 디렉토리를 생성합니다.\n\n\t* mkdir of_v0.9.2_linuxarmv7l\n\n+ tar파일을 압축 해제합니다.\n\n\t* tar vxfz of_v0.9.2_linuxarmv7l_release.tar.gz -C of_v0.9.2_linuxarmv7l --strip-components 1\n\n+ 업데이트\n\n\t* pacman -Syu\n\n+ 스크립트들을 실행합니다.\n\n\t* cd of_v0.9.2_linuxarmv7l/scripts/linux/archlinux\n\n\t* sudo ./install_dependencies.sh\n\n\t[This usually takes some time and has some prompts (accept them)]\n\n\t* sudo install_codecs.sh\n\n+ makeflags를 세팅합니다(.bash_profile에 아래 내용을 추가하면 매번 입력해줄 필요가 없습니다).\n\n\t* export MAKEFLAGS=-j4 PLATFORM_ARCH=armv7l PLATFORM_VARIANT=raspberry2\n\n+ oF를 컴파일합니다.\n\n\t* make Release -C /home/pi/of_v0.9.2_linuxarmv7l/libs/openFrameworksCompiled/project\n\n+ 예제 실행하기\n\n\t* cd /home/pi/of_v0.9.2_linuxarmv7l/examples/graphics/polygonExample\n\n\t* make && make run\n\nHave lots of fun ! **:)**\n","type":"page","static":true}}],"fetch":[]}