{"data":[{"page":{"entry":{"name":"Raspberry-Pi-Getting-Started-ArchLinux","filename":"Raspberry-Pi-Getting-Started-ArchLinux.md","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/content/setup/RaspberryPi/Raspberry-Pi-Getting-Started-ArchLinux.md","path":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started-ArchLinux","route":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started-ArchLinux.md","dir":"../ofSite/content/setup/RaspberryPi","ext":"md","type":"page","id":1933,"parent":1919,"breadcrumbs":[1919,1795],"siblings":[],"translations":{"ko":{"name":"Raspberry-Pi-Getting-Started-ArchLinux-ko","filename":"Raspberry-Pi-Getting-Started-ArchLinux.ko.md","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/content/setup/RaspberryPi/Raspberry-Pi-Getting-Started-ArchLinux.ko.md","path":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started-ArchLinux-ko","route":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started-ArchLinux.ko.md","dir":"../ofSite/content/setup/RaspberryPi","ext":"md","type":"page","id":1932,"parent":1919,"breadcrumbs":[1919,1795],"siblings":[],"translations":{}}}},"description":{},"document":"<h2>-<em>- coding: utf-8 -</em>-</h2>\n<p>.. title: raspberry pi</p>\n<h1>Getting your Raspberry Pi 2 B ready for openFrameworks</h1>\n<p>##Create SD Card - ArchLinux &quot;ARMv7&quot;</p>\n<p><em>*This has to be done under a linux computer (you can use raspbian :D)</em></p>\n<hr>\n<p>Replace <strong>sdX</strong> in the following instructions with the device name for the SD card as it appears on your computer.</p>\n<ol>\n<li>\n<p>Start fdisk to partition the SD card:</p>\n<pre><code> fdisk /dev/sdX\n</code></pre>\n</li>\n<li>\n<p>At the fdisk prompt, delete old partitions and create a new one:</p>\n<p>Type <strong>o</strong>. This will clear out any partitions on the drive.</p>\n<p>Type <strong>p</strong> to list partitions. There should be no partitions left.</p>\n<p>Type <strong>n</strong>, then <strong>p</strong> for primary, <strong>1</strong> for the first partition on the drive, press <strong>ENTER</strong> to accept the default first sector, then type <strong>+100M</strong> for the last sector</p>\n<p>Type <strong>t</strong>, then <strong>c</strong> to set the first partition to type <strong>W95 AT32 (LBA)</strong></p>\n<p>Type <strong>n</strong>, then <strong>p</strong> for primary, <strong>2</strong> for the second partition on the drive, and then press <strong>ENTER</strong> twice to accept the default first andast sect</p>\n</li>\n<li>\n<p>Write the partition table and exit by typing <strong>w</strong>.</p>\n</li>\n<li>\n<p>Create and mount the FAT filesystem:</p>\n<pre><code> mkfs.vfat /dev/sdX1\n mkdir boot\n mount /dev/sdX1 boot\n</code></pre>\n</li>\n<li>\n<p>Create and mount the ext4 filesystem:</p>\n<pre><code> mkfs.ext4 /dev/sdX2\n mkdir root\n mount /dev/sdX2 root\n</code></pre>\n</li>\n<li>\n<p>Download and extract the root filesystem (as root, not via sudo):</p>\n<pre><code> wget http://archlinuxarm.org/os/ArchLinuxARM-rpi-2-latest.tar.gz\n bsdtar -xpf ArchLinuxARM-rpi-2-latest.tar.gz -C root\n sync\n</code></pre>\n</li>\n<li>\n<p>Move boot files to the first partition:</p>\n<pre><code> mv root/boot/* boot\n</code></pre>\n</li>\n<li>\n<p>Unmount the two partitions:</p>\n<pre><code> umount boot root\n</code></pre>\n</li>\n</ol>\n<p>Insert the SD card into the Raspberry Pi, connect ethernet, and apply 5V power.\nUse the serial console or SSH to the IP address given to the board by your router.\nLogin as <strong>root</strong> with the default password <strong><em>root</em></strong>.\nThe default root password is root.</p>\n<hr>\n<p>##Accommodate</p>\n<ol>\n<li>Login as <strong>root</strong></li>\n</ol>\n<ul>\n<li>\n<p>Change password</p>\n<ul>\n<li>passwd</li>\n</ul>\n</li>\n<li>\n<p>Install sudo</p>\n<ul>\n<li>pacman -S sudo</li>\n</ul>\n</li>\n<li>\n<p>Delete <strong>alarm</strong> user</p>\n<ul>\n<li>userdel alarm</li>\n</ul>\n</li>\n<li>\n<p>Create new <strong>pi</strong> user</p>\n<ul>\n<li>useradd -m -G users -s /bin/bash pi</li>\n</ul>\n</li>\n<li>\n<p>Modify <em>sudoers</em> file</p>\n<ul>\n<li>\n<p>sudo nano /etc/sudoers</p>\n<pre><code>  ## Uncomment to allow members of group sudo to execute any command\n  #%sudo ALL=(ALL) NOPASSWD: ALL\n</code></pre>\n</li>\n<li>\n<p>Uncomment the second of the above lines, so that it reads as follows:</p>\n<pre><code>  ## Uncomment to allow members of group sudo to execute any command\n  %sudo ALL=(ALL) NOPASSWD: ALL\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Control-O + Control-X to save and exit</li>\n</ul>\n<ul>\n<li>\n<p>Add superpowers to user <strong>pi</strong></p>\n<ul>\n<li>groupadd sudo</li>\n<li>usermod -a -G sudo pi</li>\n</ul>\n</li>\n<li>\n<p>Modify you bash for ease of use</p>\n<ul>\n<li>\n<p>nano .bashrc</p>\n<pre><code>  # This reads .bash_aliases file for aliases\n  if [ -f ~/.bash_aliases ]; then\n  . ~/.bash_aliases\n  fi\n</code></pre>\n</li>\n<li>\n<p>nano .bash_aliases</p>\n<pre><code>    #Enter openFrameworks folder just by typing &quot;oF&quot;\n    alias oF='cd /home/pi/of_v0.9.2_linuxarmv7l'\n    #Run project generator by typing projectgenerator\n    alias projectgenerator='oF &amp;&amp; ./apps/projectGenerator/commandLine/bin/projectGenerator'\n    # Read temperature of rPi\n    alias temp='/opt/vc/bin/vcgencmd measure_temp'\n    # Read screen properties\n    alias screen='/opt/vc/bin/tvservice -s'\n</code></pre>\n</li>\n<li>\n<p>nano .bash_profile</p>\n<pre><code>  #Setup openFrameworks variables\n  export MAKEFLAGS=-j4 PLATFORM_ARCH=armv7l PLATFORM_VARIANT=raspberry2\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>##Install rtAudio</p>\n<p>Archlinux doesn't have an rtaudio package in their armv7 repositories. You can download it from the openFrameworks CI servers:\n* cd /\n* sudo wget http://ci.openframeworks.cc/rtaudio-armv7hf.tar.bz2\n* sudo tar xjf rtaudio-armv7hf.tar.bz2\n* sudo rm rtaudio-armv7hf.tar.bz2</p>\n<ul>\n<li>Reboot and then you can delete the builds folder (packages have been already installed)</li>\n</ul>\n<hr>\n<p>##openFrameworks</p>\n<ol>\n<li>\n<p>Get openframeworks from website:</p>\n<ul>\n<li>curl -O https://openframeworks.cc/versions/v0.9.2/of_v0.9.2_linuxarmv7l_release.tar.gz</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>\n<p>Make oF directory</p>\n<ul>\n<li>mkdir of_v0.9.2_linuxarmv7l</li>\n</ul>\n</li>\n<li>\n<p>Unpack tar</p>\n<ul>\n<li>tar vxfz of_v0.9.2_linuxarmv7l_release.tar.gz -C of_v0.9.2_linuxarmv7l --strip-components 1</li>\n</ul>\n</li>\n<li>\n<p>Update</p>\n<ul>\n<li>pacman -Syu</li>\n</ul>\n</li>\n<li>\n<p>Run scripts</p>\n<ul>\n<li>\n<p>cd of_v0.9.2_linuxarmv7l/scripts/linux/archlinux</p>\n</li>\n<li>\n<p>sudo ./install_dependencies.sh</p>\n</li>\n</ul>\n<p>[This usually takes some time and has some prompts (accept them)]</p>\n<ul>\n<li>sudo install_codecs.sh</li>\n</ul>\n</li>\n<li>\n<p>Set makeflags (you can put this in your .bash_profile so you don't have to type it in every time)</p>\n<ul>\n<li>export MAKEFLAGS=-j4 PLATFORM_ARCH=armv7l PLATFORM_VARIANT=raspberry2</li>\n</ul>\n</li>\n<li>\n<p>Compile oF</p>\n<ul>\n<li>make Release -C /home/pi/of_v0.9.2_linuxarmv7l/libs/openFrameworksCompiled/project</li>\n</ul>\n</li>\n<li>\n<p>Run an example</p>\n<p>*cd /home/pi/of_v0.9.2_linuxarmv7l/examples/graphics/polygonExample</p>\n<p>*make &amp;&amp; make run</p>\n</li>\n</ul>\n<p>Have lots of fun ! <strong>:)</strong></p>\n","raw":"## -*- coding: utf-8 -*-\n.. title: raspberry pi\n\nGetting your Raspberry Pi 2 B ready for openFrameworks\n============\n\n##Create SD Card - ArchLinux \"ARMv7\"\n\n_*This has to be done under a linux computer (you can use raspbian :D)_\n\n---\n\nReplace **sdX** in the following instructions with the device name for the SD card as it appears on your computer.\n\n1. Start fdisk to partition the SD card:\n\n\t\tfdisk /dev/sdX\n\n2. At the fdisk prompt, delete old partitions and create a new one:\n\n\tType **o**. This will clear out any partitions on the drive.\n\n\tType **p** to list partitions. There should be no partitions left.\n\n\tType **n**, then **p** for primary, **1** for the first partition on the drive, press **ENTER** to accept the default first sector, then type **+100M** for the last sector\n\n\tType **t**, then **c** to set the first partition to type **W95 AT32 (LBA)**\n\n\tType **n**, then **p** for primary, **2** for the second partition on the drive, and then press **ENTER** twice to accept the default first andast sect\n\n3. Write the partition table and exit by typing **w**.\n\n4. Create and mount the FAT filesystem:\n\n\t\tmkfs.vfat /dev/sdX1\n\t\tmkdir boot\n\t\tmount /dev/sdX1 boot\n\n5. Create and mount the ext4 filesystem:\n\n\t\tmkfs.ext4 /dev/sdX2\n\t\tmkdir root\n\t\tmount /dev/sdX2 root\n\n6. Download and extract the root filesystem (as root, not via sudo):\n\n\t\twget http://archlinuxarm.org/os/ArchLinuxARM-rpi-2-latest.tar.gz\n\t\tbsdtar -xpf ArchLinuxARM-rpi-2-latest.tar.gz -C root\n\t\tsync\n\n7. Move boot files to the first partition:\n\n\t\tmv root/boot/* boot\n\n8. Unmount the two partitions:\n\n\t\tumount boot root\n\nInsert the SD card into the Raspberry Pi, connect ethernet, and apply 5V power.\nUse the serial console or SSH to the IP address given to the board by your router.\nLogin as **root** with the default password **_root_**.\nThe default root password is root.\n\n---\n##Accommodate\n\n1. Login as **root**\n\n+ Change password\n\n\t* passwd\n\n+ Install sudo\n\n\t* pacman -S sudo\n\n+ Delete **alarm** user\n\n\t* userdel alarm\n\n+ Create new **pi** user\n\n\t* useradd -m -G users -s /bin/bash pi\n\n+ Modify _sudoers_ file\n\n\t* sudo nano /etc/sudoers\n\n\t\t\t## Uncomment to allow members of group sudo to execute any command\n\t\t\t#%sudo ALL=(ALL) NOPASSWD: ALL\n\n\t* Uncomment the second of the above lines, so that it reads as follows:\n\n\t\t\t## Uncomment to allow members of group sudo to execute any command\n\t\t\t%sudo ALL=(ALL) NOPASSWD: ALL\n\n* Control-O + Control-X to save and exit\n\n+ Add superpowers to user **pi**\n\n\t* groupadd sudo\n\t* usermod -a -G sudo pi\n\n+ Modify you bash for ease of use\n\n\t* nano .bashrc\n\n\t\t\t# This reads .bash_aliases file for aliases\n\t\t\tif [ -f ~/.bash_aliases ]; then\n\t\t\t. ~/.bash_aliases\n\t\t\tfi\n\n\t* nano .bash_aliases\n\n\t\t\t  #Enter openFrameworks folder just by typing \"oF\"\n\t\t\t  alias oF='cd /home/pi/of_v0.9.2_linuxarmv7l'\n\t\t\t  #Run project generator by typing projectgenerator\n\t\t\t  alias projectgenerator='oF && ./apps/projectGenerator/commandLine/bin/projectGenerator'\n\t\t\t  # Read temperature of rPi\n\t\t\t  alias temp='/opt/vc/bin/vcgencmd measure_temp'\n\t\t\t  # Read screen properties\n\t\t\t  alias screen='/opt/vc/bin/tvservice -s'\n\n\t* nano .bash_profile\n\n\t\t\t#Setup openFrameworks variables\n\t\t\texport MAKEFLAGS=-j4 PLATFORM_ARCH=armv7l PLATFORM_VARIANT=raspberry2\n\n\n---\n##Install rtAudio\n\nArchlinux doesn't have an rtaudio package in their armv7 repositories. You can download it from the openFrameworks CI servers:\n\t* cd /\n\t* sudo wget http://ci.openframeworks.cc/rtaudio-armv7hf.tar.bz2\n\t* sudo tar xjf rtaudio-armv7hf.tar.bz2\n\t* sudo rm rtaudio-armv7hf.tar.bz2\n\n+ Reboot and then you can delete the builds folder (packages have been already installed)\n\n---\n##openFrameworks\n\n\n1. Get openframeworks from website:\n\n\t* curl -O https://openframeworks.cc/versions/v0.9.2/of_v0.9.2_linuxarmv7l_release.tar.gz\n\n+ Make oF directory\n\n\t* mkdir of_v0.9.2_linuxarmv7l\n\n+ Unpack tar\n\n\t* tar vxfz of_v0.9.2_linuxarmv7l_release.tar.gz -C of_v0.9.2_linuxarmv7l --strip-components 1\n\n+ Update\n\n\t* pacman -Syu\n\n+ Run scripts\n\n\t* cd of_v0.9.2_linuxarmv7l/scripts/linux/archlinux\n\n\t* sudo ./install_dependencies.sh\n\n\t[This usually takes some time and has some prompts (accept them)]\n\n\t* sudo install_codecs.sh\n\n+ Set makeflags (you can put this in your .bash_profile so you don't have to type it in every time)\n\n\t* export MAKEFLAGS=-j4 PLATFORM_ARCH=armv7l PLATFORM_VARIANT=raspberry2\n\n+ Compile oF\n\n\t* make Release -C /home/pi/of_v0.9.2_linuxarmv7l/libs/openFrameworksCompiled/project\n\n+ Run an example\n\n\t*cd /home/pi/of_v0.9.2_linuxarmv7l/examples/graphics/polygonExample\n\n\t*make && make run\n\nHave lots of fun ! **:)**\n","type":"page","static":true}}],"fetch":[]}