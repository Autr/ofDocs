{"data":[{"page":{"entry":{"name":"Raspberry-Pi-Getting-Started-Wheezy","filename":"Raspberry-Pi-Getting-Started-Wheezy.md","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/content/setup/RaspberryPi/Raspberry-Pi-Getting-Started-Wheezy.md","path":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started-Wheezy","route":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started-Wheezy.md","dir":"../ofSite/content/setup/RaspberryPi","ext":"md","type":"page","id":1935,"parent":1919,"breadcrumbs":[1919,1795],"siblings":[],"translations":{"ko":{"name":"Raspberry-Pi-Getting-Started-Wheezy-ko","filename":"Raspberry-Pi-Getting-Started-Wheezy.ko.md","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/content/setup/RaspberryPi/Raspberry-Pi-Getting-Started-Wheezy.ko.md","path":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started-Wheezy-ko","route":"/guides/RaspberryPi/Raspberry-Pi-Getting-Started-Wheezy.ko.md","dir":"../ofSite/content/setup/RaspberryPi","ext":"md","type":"page","id":1934,"parent":1919,"breadcrumbs":[1919,1795],"siblings":[],"translations":{}}}},"description":{},"document":"<h2>-<em>- coding: utf-8 -</em>-</h2>\n<p>.. title: raspberry pi</p>\n<h1>Getting your Raspberry Pi ready for openFrameworks</h1>\n<h2>Install Raspbian &quot;wheezy&quot;</h2>\n<ol start=\"0\">\n<li>Install the latest <em><strong>Raspbian</strong> (Debian Wheezy)</em> image from the <a href=\"http://www.raspberrypi.org/downloads\">Raspberry Pi downloads page</a></li>\n<li>Follow the instructions at <a href=\"http://elinux.org/RPi_Easy_SD_Card_Setup\">Raspberry Pi Preparing Your SD Card</a> to get Raspbian installed onto your SD Card</li>\n</ol>\n<h2>Configure the Raspberry Pi</h2>\n<p>This guide assumes you are starting from a fresh Raspian install and that you are able to connect to the Raspberry Pi to give it commands.</p>\n<p>Options to give commands are:</p>\n<ol start=\"0\">\n<li>SSH into the Pi from a different computer</li>\n<li>Attach a keyboard and monitor to the Pi.\n<ul>\n<li>If the Pi boots to the command prompt you are ready to go</li>\n<li>If the Pi boots the X11 window system, open up LXTerminal from the shortcut on the Raspberry Pi Desktop</li>\n</ul>\n</li>\n</ol>\n<p>With a fresh install the Raspberry Pi configuration is presented at the first boot. Otherwise, you can re-configure with the command <code>sudo raspi-config</code>\n<em>We need to make sure the CPU has 192MB of RAM in order to compile openFrameworks. Once you have compiled openFrameworks you may want to repeat this step with 128</em>\n0.  Select <code>1 Expand Filesystem</code> and hit Enter\n0.  Select <code>8 Advanced Options</code> and hit Enter\n* Select <code>A3 Memory Split</code> and hit Enter\n* Type <code>64</code> and Hit <code>&lt;ok&gt;</code></p>\n<ol start=\"0\">\n<li>Reboot when prompted or type <code>sudo reboot</code></li>\n<li>Assuming you have internet access run these commands to update the software to the latest packages.\n<ul>\n<li><code>sudo apt-get clean</code></li>\n<li><code>sudo apt-get update</code></li>\n<li><code>sudo apt-get upgrade</code></li>\n<li><em>Note: The above steps may take a little while.</em></li>\n</ul>\n</li>\n</ol>\n<h2>Download openFrameworks</h2>\n<p>You now can download the Linux armv6 version of openFrameworks and uncompress it into a folder. Using a Shell, The following commands will download openFrameworks and uncompress it into the folder <code>/home/pi/openFrameworks</code></p>\n<ol start=\"0\">\n<li><code>cd</code></li>\n<li><code>curl -O http://openframeworks.cc/versions/v0.8.4/of_v0.8.4_linuxarmv6l_release.tar.gz</code></li>\n<li><code>mkdir openFrameworks</code></li>\n<li><code>tar vxfz of_v0.8.4_linuxarmv6l_release.tar.gz -C openFrameworks --strip-components 1</code></li>\n</ol>\n<h2>Compile openFrameworks:</h2>\n<p>This step will take approximately 1 hour when compiling on the Raspberry Pi, Make sure you didn't skip the Memory Split step in the above section <em><strong>Configure the Raspberry Pi</strong></em> or it will eventually fail.</p>\n<p>Assuming openFrameworks is located at <code>/home/pi/openFrameworks</code> run the following commands to install the necessary packages and compile openFrameworks.</p>\n<ol start=\"0\">\n<li><code>cd /home/pi/openFrameworks/scripts/linux/debian_armv6l</code></li>\n<li><code>sudo ./install_dependencies.sh</code></li>\n</ol>\n<p>You are now ready to compile openFrameworks!</p>\n<ol start=\"0\">\n<li><code>make Release -C /home/pi/openFrameworks/libs/openFrameworksCompiled/project</code></li>\n</ol>\n<h2>Speeding up compiling</h2>\n<p>Compiling natively on the Raspberry Pi takes a long time. openFrameworks applications typically take much less time than the core library. Taking the time to set up a cross-compiling solution will save you enormous amounts of time.</p>\n<p><a href=\"../raspberry-pi-distcc-guide/\">Raspberry Pi DISTCC Guide</a><br>\n<a href=\"../raspberry-pi-cross-compiling-guide/\">Raspberry Pi Cross Compiling Guide</a></p>\n<h2>Compile your first app</h2>\n<p>Like on other platforms, openFrameworks ships with a bunch of examples located in the <code>openFrameworks/examples</code> folder. Inside examples the projects are sorted by the categories:</p>\n<ul>\n<li>3d</li>\n<li>addons</li>\n<li>communication</li>\n<li>empty</li>\n<li>events</li>\n<li>gl</li>\n<li>gles</li>\n<li>graphics</li>\n<li>gui</li>\n<li>math</li>\n<li>sound</li>\n<li>utils</li>\n<li>video</li>\n</ul>\n<p>Inside each category folder are a few examples of each. To run them you need to go into the folder, build and run.</p>\n<p>For example, here is how you build and run the polygonExample:</p>\n<ul>\n<li><code>cd /home/pi/openFrameworks/examples/graphics/polygonExample</code></li>\n<li><code>make</code></li>\n<li><code>make run</code></li>\n</ul>\n<p>To create your own project from scratch, copy <code>examples/empty/emptyExample</code> into <code>apps/myApps/yourProjectName</code> folder and start from there</p>\n<p>For example:</p>\n<ul>\n<li><code>cp -R /home/pi/openFrameworks/examples/empty/emptyExample /home/pi/openFrameworks/apps/myApps/myRpiApp</code></li>\n<li><code>cd /home/pi/openFrameworks/apps/myApps/myRpiApp</code></li>\n<li><code>make</code></li>\n<li><code>make run</code></li>\n</ul>\n<p>It is critical to keep your application directory 3 levels below the openFrameworks directory.</p>\n<p>Have fun! :)</p>\n","raw":"## -*- coding: utf-8 -*-\n.. title: raspberry pi\n\nGetting your Raspberry Pi ready for openFrameworks\n============\n\n    \n## Install Raspbian \"wheezy\"\n0. Install the latest _**Raspbian** (Debian Wheezy)_ image from the [Raspberry Pi downloads page](http://www.raspberrypi.org/downloads)\n1. Follow the instructions at [Raspberry Pi Preparing Your SD Card](http://elinux.org/RPi_Easy_SD_Card_Setup) to get Raspbian installed onto your SD Card\n\n         \n## Configure the Raspberry Pi\nThis guide assumes you are starting from a fresh Raspian install and that you are able to connect to the Raspberry Pi to give it commands.\n\nOptions to give commands are:\n\n0. SSH into the Pi from a different computer\n0. Attach a keyboard and monitor to the Pi. \n\t* If the Pi boots to the command prompt you are ready to go\n\t* If the Pi boots the X11 window system, open up LXTerminal from the shortcut on the Raspberry Pi Desktop\n\nWith a fresh install the Raspberry Pi configuration is presented at the first boot. Otherwise, you can re-configure with the command `sudo raspi-config`\n_We need to make sure the CPU has 192MB of RAM in order to compile openFrameworks. Once you have compiled openFrameworks you may want to repeat this step with 128_\n0.  Select `1 Expand Filesystem` and hit Enter\n0.  Select `8 Advanced Options` and hit Enter\n\t* Select `A3 Memory Split` and hit Enter\n\t* Type `64` and Hit `<ok>`\n\t \n0. Reboot when prompted or type `sudo reboot`\n0. Assuming you have internet access run these commands to update the software to the latest packages.\n    * `sudo apt-get clean`\n    * `sudo apt-get update`\n    * `sudo apt-get upgrade`\n    * _Note: The above steps may take a little while._\n\n## Download openFrameworks\nYou now can download the Linux armv6 version of openFrameworks and uncompress it into a folder. Using a Shell, The following commands will download openFrameworks and uncompress it into the folder `/home/pi/openFrameworks`\n \n0. `cd` \n0. `curl -O http://openframeworks.cc/versions/v0.8.4/of_v0.8.4_linuxarmv6l_release.tar.gz` \n0.  `mkdir openFrameworks`\n0.  `tar vxfz of_v0.8.4_linuxarmv6l_release.tar.gz -C openFrameworks --strip-components 1`\n\n## Compile openFrameworks:\nThis step will take approximately 1 hour when compiling on the Raspberry Pi, Make sure you didn't skip the Memory Split step in the above section _**Configure the Raspberry Pi**_ or it will eventually fail.\n\nAssuming openFrameworks is located at `/home/pi/openFrameworks` run the following commands to install the necessary packages and compile openFrameworks. \n\n0. `cd /home/pi/openFrameworks/scripts/linux/debian_armv6l`  \n0. `sudo ./install_dependencies.sh` \n\nYou are now ready to compile openFrameworks! \n\n0. `make Release -C /home/pi/openFrameworks/libs/openFrameworksCompiled/project`\n\n## Speeding up compiling\nCompiling natively on the Raspberry Pi takes a long time. openFrameworks applications typically take much less time than the core library. Taking the time to set up a cross-compiling solution will save you enormous amounts of time. \n\n[Raspberry Pi DISTCC Guide](../raspberry-pi-distcc-guide/)    \n[Raspberry Pi Cross Compiling Guide](../raspberry-pi-cross-compiling-guide/)\n\n## Compile your first app\nLike on other platforms, openFrameworks ships with a bunch of examples located in the `openFrameworks/examples` folder. Inside examples the projects are sorted by the categories: \n\n* 3d \n* addons \n* communication \n* empty\n* events\n* gl\n* gles\n* graphics\n* gui\n* math\n* sound\n* utils\n* video\n\nInside each category folder are a few examples of each. To run them you need to go into the folder, build and run.\n\nFor example, here is how you build and run the polygonExample:\n\n* `cd /home/pi/openFrameworks/examples/graphics/polygonExample`\n* `make`\n* `make run`\n\nTo create your own project from scratch, copy `examples/empty/emptyExample` into `apps/myApps/yourProjectName` folder and start from there\n\nFor example:\n\n* `cp -R /home/pi/openFrameworks/examples/empty/emptyExample /home/pi/openFrameworks/apps/myApps/myRpiApp`\n* `cd /home/pi/openFrameworks/apps/myApps/myRpiApp`\n* `make`\n* `make run`\n\nIt is critical to keep your application directory 3 levels below the openFrameworks directory.\n\nHave fun! :)\n\n","type":"page","static":true}}],"fetch":[]}