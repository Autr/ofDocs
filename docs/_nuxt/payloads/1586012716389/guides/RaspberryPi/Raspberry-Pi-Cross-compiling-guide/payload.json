{"data":[{"page":{"entry":{"name":"Raspberry-Pi-Cross-compiling-guide","filename":"Raspberry-Pi-Cross-compiling-guide.md","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/content/setup/RaspberryPi/Raspberry-Pi-Cross-compiling-guide.md","path":"/guides/RaspberryPi/Raspberry-Pi-Cross-compiling-guide","route":"/guides/RaspberryPi/Raspberry-Pi-Cross-compiling-guide.md","dir":"../ofSite/content/setup/RaspberryPi","ext":"md","type":"page","id":1929,"parent":1919,"breadcrumbs":[1919,1795],"siblings":[],"translations":{"ko":{"name":"Raspberry-Pi-Cross-compiling-guide-ko","filename":"Raspberry-Pi-Cross-compiling-guide.ko.md","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/content/setup/RaspberryPi/Raspberry-Pi-Cross-compiling-guide.ko.md","path":"/guides/RaspberryPi/Raspberry-Pi-Cross-compiling-guide-ko","route":"/guides/RaspberryPi/Raspberry-Pi-Cross-compiling-guide.ko.md","dir":"../ofSite/content/setup/RaspberryPi","ext":"md","type":"page","id":1928,"parent":1919,"breadcrumbs":[1919,1795],"siblings":[],"translations":{}}}},"description":{},"document":"<h2>-<em>- coding: utf-8 -</em>-</h2>\n<p>.. title: raspberry pi</p>\n<h1>Cross-compiling for the Raspberry Pi</h1>\n<h2>Introduction</h2>\n<p>Creating a cross-compiler is a fairly advanced process but can be useful for heavy use. This guide will give some details on how to create a cross-compiler for use with openFrameworks 0.9.0. For older releases (OF 0.8.4/Wheezy) see <a href=\"../raspberry-pi-cross-compiling-guide-wheezy/\">Raspberry Pi Cross-compiling Guide for Wheezy</a></p>\n<h2>Do you need it?</h2>\n<p>The RPI2/arm7 is much faster and can natively compile openFrameworks in about 15 minutes by utilizing all 4 cores (<code>make -j4</code>). Applications are typically much faster depending on complexity, use of ofxAddons, etc.</p>\n<p>Compiling openFrameworks on the RPI1/arm6 is much slower and can take over an hour. Applications can be much faster however still slow.</p>\n<p>A typical cross-compiler on a modern Desktop PC will compile the OF core library in about 3 minutes.</p>\n<h2>Cross-compiling process</h2>\n<p>To use a cross-compiler you will need to setup a few things:</p>\n<h3>Toolchain</h3>\nThis is basically a custom version of GCC that understands your target platform. In order to cross-compile openFrameworks the compiler must support GCC 4.9. Previous versions of GCC do not support the level of C++11 features that openFrameworks requires. At the time of openFrameworks 0.9.0 release, the [offical Raspberry Pi tools](https://github.com/raspberrypi/tools) were out-of-date, requiring you to build GCC yourself. The tools were updated with GCC 4.9.3 on February 14, 2016 but have yet to be verified.\n<h3>Target Root File System</h3>\nThis is a copy of the RPI's file system that the compiler will use to build openFrameworks and applications. It is a copy because you will need to manipulate certain files that if changed directly would cause the RPI to stop working.\n<h2>Makefile variables</h2>\n<p>The openFrameworks Makefile system has some built-in variables that allow for easier cross-compiling.</p>\n<h3>TOOLCHAIN_ROOT</h3>\n`TOOLCHAIN_ROOT` is a path to the directory that contains your Toolchain. If you don't pass this in OF will guess a default value of `/opt/cross/bin`\n<h3>GCC_PREFIX</h3>\nA toolchain is often set up with multiple architectures in order to cross-compile a project for multiple platforms. `GCC_PREFIX` is used to differentiate between these platforms.\n<p>For example, to compile for an RPI/Arch Linux target the prefix is often <code>armv6l-unknown-linux-gnueabihf</code>. For Raspbian it is commonly <code>arm-linux-gnueabihf</code></p>\n<p>If <code>GCC_PREFIX</code> is not passed in <code>arm-linux-gnueabihf</code> is assumed. The prefix is then added to <code>-g++</code>, <code>-gcc</code>, <code>-ar</code> and <code>-ld</code> to complete the paths to the compiler and linkers.</p>\n<h3>RPI_ROOT</h3>\n`RPI_ROOT` is the Target Root File System previously described. This is required to be passed in and there is no default value.\n<p>These variables are either passed in with the make command:</p>\n<p><code>make TOOLCHAIN_ROOT=/path/to/toolchain GCC_PREFIX=arm-linux-gnueabihf RPI_ROOT=/path/to/local_copy_of_pi_filesystem</code></p>\n<p>or set via environmental variables</p>\n<p><code>export TOOLCHAIN_ROOT=/path/to/toolchain</code></p>\n<p><code>export GCC_PREFIX=arm-linux-gnueabihf</code></p>\n<p><code>export RPI_ROOT=/path/to/local_copy_of_pi_filesystem</code></p>\n<p>Using export allows you just use the shorter <code>make</code> command throughout a session. You can make these variables permanent by adding the export lines to the end of <code>~/.profile</code>.</p>\n<h2>Cross compiling guides for 0.9.0</h2>\n<p><a href=\"https://forum.openframeworks.cc/t/cross-compiler-for-of-0-9-0-jessie-arm6-rpi1\">Mac based, uses Debian VM, custom compiled  GCC</a></p>\n","raw":"## -*- coding: utf-8 -*-\n.. title: raspberry pi\n\n\nCross-compiling for the Raspberry Pi\n============\n\n## Introduction\n\nCreating a cross-compiler is a fairly advanced process but can be useful for heavy use. This guide will give some details on how to create a cross-compiler for use with openFrameworks 0.9.0. For older releases (OF 0.8.4/Wheezy) see [Raspberry Pi Cross-compiling Guide for Wheezy](../raspberry-pi-cross-compiling-guide-wheezy/)\n\n## Do you need it?\nThe RPI2/arm7 is much faster and can natively compile openFrameworks in about 15 minutes by utilizing all 4 cores (`make -j4`). Applications are typically much faster depending on complexity, use of ofxAddons, etc.\n\nCompiling openFrameworks on the RPI1/arm6 is much slower and can take over an hour. Applications can be much faster however still slow.\n\nA typical cross-compiler on a modern Desktop PC will compile the OF core library in about 3 minutes.\n\n## Cross-compiling process\n\nTo use a cross-compiler you will need to setup a few things:\n\n<h3>Toolchain</h3>\nThis is basically a custom version of GCC that understands your target platform. In order to cross-compile openFrameworks the compiler must support GCC 4.9. Previous versions of GCC do not support the level of C++11 features that openFrameworks requires. At the time of openFrameworks 0.9.0 release, the [offical Raspberry Pi tools](https://github.com/raspberrypi/tools) were out-of-date, requiring you to build GCC yourself. The tools were updated with GCC 4.9.3 on February 14, 2016 but have yet to be verified.\n\n<h3>Target Root File System</h3>\nThis is a copy of the RPI's file system that the compiler will use to build openFrameworks and applications. It is a copy because you will need to manipulate certain files that if changed directly would cause the RPI to stop working.\n\n## Makefile variables\nThe openFrameworks Makefile system has some built-in variables that allow for easier cross-compiling.\n\n<h3>TOOLCHAIN_ROOT</h3>\n`TOOLCHAIN_ROOT` is a path to the directory that contains your Toolchain. If you don't pass this in OF will guess a default value of `/opt/cross/bin`\n\n<h3>GCC_PREFIX</h3>\nA toolchain is often set up with multiple architectures in order to cross-compile a project for multiple platforms. `GCC_PREFIX` is used to differentiate between these platforms.\n\nFor example, to compile for an RPI/Arch Linux target the prefix is often `armv6l-unknown-linux-gnueabihf`. For Raspbian it is commonly `arm-linux-gnueabihf`\n\nIf `GCC_PREFIX` is not passed in `arm-linux-gnueabihf` is assumed. The prefix is then added to `-g++`, `-gcc`, `-ar` and `-ld` to complete the paths to the compiler and linkers.\n\n\n<h3>RPI_ROOT</h3>\n`RPI_ROOT` is the Target Root File System previously described. This is required to be passed in and there is no default value.\n\nThese variables are either passed in with the make command:\n\n`make TOOLCHAIN_ROOT=/path/to/toolchain GCC_PREFIX=arm-linux-gnueabihf RPI_ROOT=/path/to/local_copy_of_pi_filesystem`\n\nor set via environmental variables\n\n`export TOOLCHAIN_ROOT=/path/to/toolchain`\n\n`export GCC_PREFIX=arm-linux-gnueabihf`\n\n`export RPI_ROOT=/path/to/local_copy_of_pi_filesystem`\n\n\nUsing export allows you just use the shorter `make` command throughout a session. You can make these variables permanent by adding the export lines to the end of `~/.profile`.\n\n## Cross compiling guides for 0.9.0\n[Mac based, uses Debian VM, custom compiled  GCC](https://forum.openframeworks.cc/t/cross-compiler-for-of-0-9-0-jessie-arm6-rpi1)\n\n","type":"page","static":true}}],"fetch":[]}