{"data":[{"page":{"entry":{"name":"ofFbo.h","filename":"ofFbo.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/gl/ofFbo.h","path":"/openframeworks/gl/ofFbo_h","route":"/openframeworks/gl/ofFbo.h","dir":"../libs/openFrameworks/gl","ext":"h","type":"source","id":208,"parent":204,"breadcrumbs":[204,164],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofTexture.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGLBaseTypes.h\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// ofFbo mode(s) when binding</span>\n<span class=\"token keyword\">enum</span> ofFboMode <span class=\"token operator\">:</span> <span class=\"token keyword\">short</span> <span class=\"token punctuation\">{</span>\n    OF_FBOMODE_NODEFAULTS  <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; base GL fbo, no OF defaults</span>\n    OF_FBOMODE_PERSPECTIVE <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; set OF perspective and viewport</span>\n    OF_FBOMODE_MATRIXFLIP  <span class=\"token operator\">=</span> <span class=\"token number\">2</span>  <span class=\"token comment\" spellcheck=\"true\">///&lt; flip vertically</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">inline</span> ofFboMode <span class=\"token keyword\">operator</span> <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>ofFboMode m1<span class=\"token punctuation\">,</span> ofFboMode m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span>ofFboMode<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>ofFboMode m1<span class=\"token punctuation\">,</span> ofFboMode m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">short</span><span class=\"token punctuation\">(</span>m1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">(</span>m2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// ofFbo internal settings</span>\n<span class=\"token keyword\">struct</span> ofFboSettings <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>                        <span class=\"token comment\" spellcheck=\"true\">///&lt; width of images attached to fbo</span>\n    <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>                       <span class=\"token comment\" spellcheck=\"true\">///&lt; height of images attached to fbo</span>\n    <span class=\"token keyword\">int</span> numColorbuffers<span class=\"token punctuation\">;</span>              <span class=\"token comment\" spellcheck=\"true\">///&lt; how many color buffers to create</span>\n    std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>GLint<span class=\"token operator\">></span> colorFormats<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">///&lt; format of the color attachments for MRT.</span>\n    <span class=\"token keyword\">bool</span> useDepth<span class=\"token punctuation\">;</span>                    <span class=\"token comment\" spellcheck=\"true\">///&lt; whether to use depth buffer or not</span>\n    <span class=\"token keyword\">bool</span> useStencil<span class=\"token punctuation\">;</span>                  <span class=\"token comment\" spellcheck=\"true\">///&lt; whether to use stencil buffer or not</span>\n    <span class=\"token keyword\">bool</span> depthStencilAsTexture<span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">///&lt; use a texture instead of a renderbuffer for depth (useful to draw it or use it in a shader later)</span>\n    GLenum textureTarget<span class=\"token punctuation\">;</span>             <span class=\"token comment\" spellcheck=\"true\">///&lt; GL_TEXTURE_2D or GL_TEXTURE_RECTANGLE_ARB</span>\n    GLint internalformat<span class=\"token punctuation\">;</span>             <span class=\"token comment\" spellcheck=\"true\">///&lt; GL_RGBA, GL_RGBA16F_ARB, GL_RGBA32F_ARB, GL_LUMINANCE32F_ARB etc.</span>\n    GLint depthStencilInternalFormat<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; GL_DEPTH_COMPONENT(16/24/32)</span>\n    <span class=\"token keyword\">int</span> wrapModeHorizontal<span class=\"token punctuation\">;</span>           <span class=\"token comment\" spellcheck=\"true\">///&lt; GL_REPEAT, GL_MIRRORED_REPEAT, GL_CLAMP_TO_EDGE, GL_CLAMP_TO_BORDER etc.</span>\n    <span class=\"token keyword\">int</span> wrapModeVertical<span class=\"token punctuation\">;</span>             <span class=\"token comment\" spellcheck=\"true\">///&lt; GL_REPEAT, GL_MIRRORED_REPEAT, GL_CLAMP_TO_EDGE, GL_CLAMP_TO_BORDER etc.</span>\n    <span class=\"token keyword\">int</span> minFilter<span class=\"token punctuation\">;</span>                    <span class=\"token comment\" spellcheck=\"true\">///&lt; GL_NEAREST, GL_LINEAR etc.</span>\n    <span class=\"token keyword\">int</span> maxFilter<span class=\"token punctuation\">;</span>                    <span class=\"token comment\" spellcheck=\"true\">///&lt; GL_NEAREST, GL_LINEAR etc.</span>\n    <span class=\"token keyword\">int</span> numSamples<span class=\"token punctuation\">;</span>                   <span class=\"token comment\" spellcheck=\"true\">///&lt; number of samples for multisampling (set 0 to disable)</span>\n    <span class=\"token function\">ofFboSettings</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseGLRenderer<span class=\"token operator\">></span> renderer<span class=\"token operator\">=</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFboSettings <span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    std<span class=\"token operator\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>ofBaseGLRenderer<span class=\"token operator\">></span> renderer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">friend</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofFbo</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofFbo</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseDraws<span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> ofBaseHasTexture <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token function\">ofFbo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofFbo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFbo <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofFbo <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFbo <span class=\"token operator\">&amp;</span> fbo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofFbo</span><span class=\"token punctuation\">(</span>ofFbo <span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ofFbo <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofFbo <span class=\"token operator\">&amp;&amp;</span> fbo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofFbo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofFbo::Settings is currently deprecated in favor of the ofFboSettings struct</span>\n\t<span class=\"token keyword\">typedef</span> ofFboSettings Settings<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> internalformat <span class=\"token operator\">=</span> GL_RGBA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numSamples <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//void allocateForShadow(int width, int height);</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>ofFboSettings settings <span class=\"token operator\">=</span> <span class=\"token function\">ofFboSettings</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use clear() instead\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">void</span> <span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// glClearBufferfv(GL_COLOR, 0...)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// @see: https://www.opengl.org/wiki/GLAPI/glClearBuffer</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearColorBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofFloatColor <span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// glClearBufferfv(GL_COLOR, buffer_idx...)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// @see: https://www.opengl.org/wiki/GLAPI/glClearBuffer</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearColorBuffer</span><span class=\"token punctuation\">(</span>size_t buffer_idx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofFloatColor <span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// glClearBufferfv(GL_DEPTH...)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// @see: https://www.opengl.org/wiki/GLAPI/glClearBuffer</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearDepthBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// glClearBufferiv(GL_STENCIL...)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// @see: https://www.opengl.org/wiki/GLAPI/glClearBuffer</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearStencilBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// glClearBufferfi(GL_DEPTH_STENCIL...)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// @see: https://www.opengl.org/wiki/GLAPI/glClearBuffer</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clearDepthStencilBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> depth<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stencil<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">using</span> ofBaseDraws<span class=\"token operator\">::</span>draw<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setAnchorPercent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> xPct<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yPct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setAnchorPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">resetAnchor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setDefaultTextureIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> defaultTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getDefaultTextureIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getTexture()\"</span><span class=\"token punctuation\">,</span>ofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getTexture()\"</span><span class=\"token punctuation\">,</span>ofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> attachmentPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> attachmentPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getDepthTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getTexture()\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getTexture()\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> attachmentPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> attachmentPoint<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> <span class=\"token function\">getDepthTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setUseTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">/*irrelevant*/</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isUsingTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// Sets up the framebuffer and binds it for rendering.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning  This is a convenience method, and is considered unsafe </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           in multi-window and/or multi-renderer scenarios.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           If you use more than one renderer, use each renderer's</span>\n    <span class=\"token comment\" spellcheck=\"true\">///           explicit void ofBaseGLRenderer::begin(const ofFbo &amp; fbo, ofFboMode mode)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           method instead.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\sa       void ofBaseGLRenderer::begin(const ofFbo &amp; fbo, ofFboMode mode)</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use begin(OF_FBOMODE_NODEFAULTS) instead\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> setupScreen<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// Sets up the framebuffer and binds it for rendering.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// The mode parameter indicates which defaults are set when binding</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// the fbo.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// The default OF_FBOMODE_PERSPECTIVE | OF_FBOMODE_MATRIXFLIP</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// will set the screen perspective to the OF default for the fbo size, the</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// correct viewport to cover the full fbo and will flip the orientation</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// matrix in y so when drawing the fbo later or accesing it from a shader</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// it's correctly oriented</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Passing OF_FBOMODE_PERSPECTIVE will only set perspective and viewport</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Passing OF_FBOMODE_MATRIXFLIP won't set the perspective but will flip</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// the matrix.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Passing OF_FBOMODE_NODEFAULTS won't change anything and just bind the fbo</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// and set it as current rendering surface in OF</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning  This is a convenience method, and is considered unsafe</span>\n    <span class=\"token comment\" spellcheck=\"true\">///           in multi-window and/or multi-renderer scenarios.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///           If you use more than one renderer, use each renderer's</span>\n    <span class=\"token comment\" spellcheck=\"true\">///           explicit void ofBaseGLRenderer::begin(const ofFbo &amp; fbo, ofFboMode mode)</span>\n    <span class=\"token comment\" spellcheck=\"true\">///           method instead.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\sa       void ofBaseGLRenderer::begin(const ofFbo &amp; fbo, ofFboMode mode)</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span>ofFboMode mode <span class=\"token operator\">=</span> OF_FBOMODE_PERSPECTIVE <span class=\"token operator\">|</span> OF_FBOMODE_MATRIXFLIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief    Ends the current framebuffer render context.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa       void begin(bool setupScreen=true) const;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">readToPixels</span><span class=\"token punctuation\">(</span>ofPixels <span class=\"token operator\">&amp;</span> pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> attachmentPoint <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">readToPixels</span><span class=\"token punctuation\">(</span>ofShortPixels <span class=\"token operator\">&amp;</span> pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> attachmentPoint <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">readToPixels</span><span class=\"token punctuation\">(</span>ofFloatPixels <span class=\"token operator\">&amp;</span> pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> attachmentPoint <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Copy the fbo to an ofBufferObject.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param buffer the target buffer to copy to.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">copyTo</span><span class=\"token punctuation\">(</span>ofBufferObject <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// advanced functions</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief    Bind OpenGL GL_FRAMEBUFFER target to this ofFbo</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\warning  If you use this method, you need to manually keep track of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           currently bound framebuffer, if you ever want to restore state.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           * use ofBaseGLRenderer::getCurrentFramebuffer() to query the current</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           framebuffer binding state within the renderer.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           * Better, use the renderer's explicit method:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           ofBaseGLRenderer::bind(const ofFbo &amp; fbo) to bind the fbo, to allow</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           the renderer to keep track of any bound fbos.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa       unbind()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa       virtual void ofBaseGLRenderer::bind(const ofFbo &amp; fbo)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief    Unbinds OpenGL framebuffer target and restores the OpenGL framebuffer </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           render target to whatever this ofFbo stores in previousFramebufferBinding.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa       bind()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa       void setPreviousFramebufferBinding(const GLuint&amp; previousFramebufferBinding_) const</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">flagDirty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; check whether attached MSAA buffers need updating</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief    Explicityl resolve MSAA render buffers into textures </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note     if using MSAA, we will have rendered into a colorbuffer, not directly </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           into the texture call this to blit from the colorbuffer into the texture </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///           so we can use the results for rendering, or input to a shader etc.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note     This will get called implicitly upon getTexture();</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">updateTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> attachmentPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">checkStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">createAndAttachTexture</span><span class=\"token punctuation\">(</span>GLenum internalFormat<span class=\"token punctuation\">,</span> GLenum attachmentPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">attachTexture</span><span class=\"token punctuation\">(</span>ofTexture <span class=\"token operator\">&amp;</span> texture<span class=\"token punctuation\">,</span> GLenum internalFormat<span class=\"token punctuation\">,</span> GLenum attachmentPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tGLuint <span class=\"token function\">createAndAttachRenderbuffer</span><span class=\"token punctuation\">(</span>GLenum internalFormat<span class=\"token punctuation\">,</span> GLenum attachmentPoint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">createAndAttachDepthStencilTexture</span><span class=\"token punctuation\">(</span>GLenum target<span class=\"token punctuation\">,</span> GLint internalformat<span class=\"token punctuation\">,</span> GLenum attachment <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">createAndAttachDepthStencilTexture</span><span class=\"token punctuation\">(</span>GLenum target<span class=\"token punctuation\">,</span> GLint internalformat<span class=\"token punctuation\">,</span> GLenum attachment<span class=\"token punctuation\">,</span> GLenum transferFormat<span class=\"token punctuation\">,</span> GLenum transferType <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">int</span>\t<span class=\"token function\">getNumTextures</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setActiveDrawBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setActiveDrawBuffers</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">activateAllDrawBuffers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getId()\"</span><span class=\"token punctuation\">,</span> GLuint <span class=\"token function\">getFbo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// returns id of the underlying GL object for advanced actions</span>\n\tGLuint <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// returns id of Fbo for texture attachments</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// which is different when the fbo is using MSAA</span>\n\tGLuint <span class=\"token function\">getIdDrawBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span>\t<span class=\"token function\">checkGLSupport</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxColorAttachments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// return max color attachments</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxDrawBuffers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">// return max simultaneous draw buffers</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">maxSamples</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// return max MSAA samples</span>\n\n\tGLuint <span class=\"token function\">getDepthBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> depthBuffer<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\tGLuint <span class=\"token function\">getStencilBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> stencilBuffer<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\tofFboSettings settings<span class=\"token punctuation\">;</span>\n\n\tGLuint\t\t\t\tfbo<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// main fbo which we bind for drawing into, all renderbuffers are attached to this</span>\n\tGLuint\t\t\t\tfboTextures<span class=\"token punctuation\">;</span>\t<span class=\"token comment\" spellcheck=\"true\">// textures are attached to this (if MSAA is disabled, this is equal to fbo, otherwise it's a new fbo)</span>\n\tGLuint\t\t\t\tdepthBuffer<span class=\"token punctuation\">;</span>\n\tGLuint\t\t\t\tstencilBuffer<span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>GLuint<span class=\"token operator\">></span>\t\tcolorBuffers<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofTexture<span class=\"token operator\">></span>\ttextures<span class=\"token punctuation\">;</span>\t\t\t\n\n\tofTexture\t\t\tdepthBufferTex<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\t\t\t_maxColorAttachments<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\t\t\t_maxDrawBuffers<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\t\t\t_maxSamples<span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>GLenum<span class=\"token operator\">></span>\t\tactiveDrawBuffers<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">///&lt; table of currently active color draw buffers, allocate() defaults it to size(textures), with GL_COLOR_ATTACHMENT0..n as members, in order of allocation</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief  Flags used internally to keep track of MSAA renderbuffers / textures</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note   The dirty flags are only used when dealing if the framebuffer has MSAA </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         enabled attachments, i.e. numSamples is > 0 and extra Textures have</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         been bound so that the multisampled renderbuffers can be resolved to </span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         textures.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         The flags are read whenever an attached texture is accessed. If the texture</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         is dirty, i.e. it has not yet been resolved from its associated renderbuffer</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///         the texture will be resolved through blitting the renderbuffer into it.</span>\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> dirty<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> \t\t\t\tdefaultTextureIndex<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//used for getTextureReference</span>\n\t<span class=\"token keyword\">bool</span>\t\t\t\tbIsAllocated<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">reloadFbo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_OPENGLES</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> bglFunctionsInitialized<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n","type":"source","static":true}}],"fetch":[]}