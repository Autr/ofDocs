{"data":[{"page":{"entry":{"name":"ofMaterial.cpp","filename":"ofMaterial.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/gl/ofMaterial.cpp","path":"/openframeworks/gl/ofMaterial_cpp","route":"/openframeworks/gl/ofMaterial.cpp","dir":"../libs/openFrameworks/gl","ext":"cpp","type":"source","id":218,"parent":204,"breadcrumbs":[204,164],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMaterial.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLight.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGLProgrammableRenderer.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\nstd<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span>ofGLProgrammableRenderer<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>string<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>weak_ptr<span class=\"token operator\">&lt;</span>ofMaterial<span class=\"token operator\">::</span>Shaders<span class=\"token operator\">>></span><span class=\"token operator\">></span> ofMaterial<span class=\"token operator\">::</span>shadersMap<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span><span class=\"token punctuation\">{</span>\nstring <span class=\"token function\">vertexSource</span><span class=\"token punctuation\">(</span>string defaultHeader<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxLights<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> hasTexture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> hasColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstring <span class=\"token function\">fragmentSource</span><span class=\"token punctuation\">(</span>string defaultHeader<span class=\"token punctuation\">,</span> string customUniforms<span class=\"token punctuation\">,</span> string postFragment<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxLights<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> hasTexture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> hasColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\nofMaterial<span class=\"token operator\">::</span><span class=\"token function\">ofMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setColors</span><span class=\"token punctuation\">(</span>ofFloatColor oDiffuse<span class=\"token punctuation\">,</span> ofFloatColor oAmbient<span class=\"token punctuation\">,</span> ofFloatColor oSpecular<span class=\"token punctuation\">,</span> ofFloatColor oEmissive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setDiffuseColor</span><span class=\"token punctuation\">(</span>oDiffuse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">setAmbientColor</span><span class=\"token punctuation\">(</span>oAmbient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">setSpecularColor</span><span class=\"token punctuation\">(</span>oSpecular<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">setEmissiveColor</span><span class=\"token punctuation\">(</span>oEmissive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMaterialSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>customUniforms <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span>customUniforms <span class=\"token operator\">||</span> settings<span class=\"token punctuation\">.</span>postFragment <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span>postFragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tshaders<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tuniforms1f<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tuniforms2f<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tuniforms3f<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tuniforms4f<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tuniforms1i<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tuniforms2i<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tuniforms3i<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tuniforms4i<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tdata <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setDiffuseColor</span><span class=\"token punctuation\">(</span>ofFloatColor oDiffuse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdata<span class=\"token punctuation\">.</span>diffuse <span class=\"token operator\">=</span> oDiffuse<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setAmbientColor</span><span class=\"token punctuation\">(</span>ofFloatColor oAmbient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdata<span class=\"token punctuation\">.</span>ambient <span class=\"token operator\">=</span> oAmbient<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setSpecularColor</span><span class=\"token punctuation\">(</span>ofFloatColor oSpecular<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdata<span class=\"token punctuation\">.</span>specular <span class=\"token operator\">=</span> oSpecular<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setEmissiveColor</span><span class=\"token punctuation\">(</span>ofFloatColor oEmissive<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdata<span class=\"token punctuation\">.</span>emissive <span class=\"token operator\">=</span> oEmissive<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setShininess</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> nShininess<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tdata<span class=\"token punctuation\">.</span>shininess <span class=\"token operator\">=</span> nShininess<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMaterial<span class=\"token operator\">::</span>Data <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">getShininess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>shininess<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofFloatColor ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">getDiffuseColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>diffuse<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofFloatColor ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">getAmbientColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>ambient<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofFloatColor ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">getSpecularColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>specular<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofFloatColor ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">getEmissiveColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span>emissive<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofMaterialSettings ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">getSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofGetGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofGetGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">initShaders</span><span class=\"token punctuation\">(</span>ofGLProgrammableRenderer <span class=\"token operator\">&amp;</span> renderer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">auto</span> rendererShaders <span class=\"token operator\">=</span> shaders<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rendererShaders <span class=\"token operator\">==</span> shaders<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> rendererShaders<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token operator\">-</span><span class=\"token operator\">></span>numLights <span class=\"token operator\">!=</span> <span class=\"token function\">ofLightsData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shadersMap<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>postFragment<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>shadersMap<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">auto</span> newShaders <span class=\"token operator\">=</span> shadersMap<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>postFragment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newShaders <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span> <span class=\"token operator\">||</span> newShaders<span class=\"token operator\">-</span><span class=\"token operator\">></span>numLights <span class=\"token operator\">!=</span> <span class=\"token function\">ofLightsData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                shadersMap<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>postFragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n                shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> newShaders<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n            string vertexRectHeader <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">defaultVertexShaderHeader</span><span class=\"token punctuation\">(</span>GL_TEXTURE_RECTANGLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            string fragmentRectHeader <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">defaultFragmentShaderHeader</span><span class=\"token punctuation\">(</span>GL_TEXTURE_RECTANGLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n        string vertex2DHeader <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">defaultVertexShaderHeader</span><span class=\"token punctuation\">(</span>GL_TEXTURE_2D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        string fragment2DHeader <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">defaultFragmentShaderHeader</span><span class=\"token punctuation\">(</span>GL_TEXTURE_2D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">auto</span> numLights <span class=\"token operator\">=</span> <span class=\"token function\">ofLightsData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Shaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>numLights <span class=\"token operator\">=</span> numLights<span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>noTexture<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_VERTEX_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">vertexSource</span><span class=\"token punctuation\">(</span>vertex2DHeader<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>noTexture<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_FRAGMENT_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">fragmentSource</span><span class=\"token punctuation\">(</span>fragment2DHeader<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>customUniforms<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>postFragment<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>noTexture<span class=\"token punctuation\">.</span><span class=\"token function\">bindDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>noTexture<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>texture2D<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_VERTEX_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">vertexSource</span><span class=\"token punctuation\">(</span>vertex2DHeader<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>texture2D<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_FRAGMENT_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">fragmentSource</span><span class=\"token punctuation\">(</span>fragment2DHeader<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>customUniforms<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>postFragment<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>texture2D<span class=\"token punctuation\">.</span><span class=\"token function\">bindDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>texture2D<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n            shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>textureRect<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_VERTEX_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">vertexSource</span><span class=\"token punctuation\">(</span>vertexRectHeader<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>textureRect<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_FRAGMENT_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">fragmentSource</span><span class=\"token punctuation\">(</span>fragmentRectHeader<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>customUniforms<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>postFragment<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>textureRect<span class=\"token punctuation\">.</span><span class=\"token function\">bindDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>textureRect<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>color<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_VERTEX_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">vertexSource</span><span class=\"token punctuation\">(</span>vertex2DHeader<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>color<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_FRAGMENT_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">fragmentSource</span><span class=\"token punctuation\">(</span>fragment2DHeader<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>customUniforms<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>postFragment<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>color<span class=\"token punctuation\">.</span><span class=\"token function\">bindDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>color<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>texture2DColor<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_VERTEX_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">vertexSource</span><span class=\"token punctuation\">(</span>vertex2DHeader<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>texture2DColor<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_FRAGMENT_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">fragmentSource</span><span class=\"token punctuation\">(</span>fragment2DHeader<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>customUniforms<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>postFragment<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>texture2DColor<span class=\"token punctuation\">.</span><span class=\"token function\">bindDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>texture2DColor<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n            shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>textureRectColor<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_VERTEX_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">vertexSource</span><span class=\"token punctuation\">(</span>vertexRectHeader<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>textureRectColor<span class=\"token punctuation\">.</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GL_FRAGMENT_SHADER<span class=\"token punctuation\">,</span><span class=\"token function\">fragmentSource</span><span class=\"token punctuation\">(</span>fragmentRectHeader<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>customUniforms<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">.</span>postFragment<span class=\"token punctuation\">,</span>numLights<span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>textureRectColor<span class=\"token punctuation\">.</span><span class=\"token function\">bindDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>textureRectColor<span class=\"token punctuation\">.</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n        shadersMap<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">.</span>postFragment<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">getShader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> textureTarget<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> geometryHasColor<span class=\"token punctuation\">,</span> ofGLProgrammableRenderer <span class=\"token operator\">&amp;</span> renderer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">initShaders</span><span class=\"token punctuation\">(</span>renderer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>textureTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> OF_NO_TEXTURE<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>geometryHasColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>color<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>noTexture<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> GL_TEXTURE_2D<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>geometryHasColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>texture2DColor<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>texture2D<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>geometryHasColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>textureRectColor<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> shaders<span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>renderer<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>textureRect<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">updateMaterial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span> shader<span class=\"token punctuation\">,</span>ofGLProgrammableRenderer <span class=\"token operator\">&amp;</span> renderer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform4fv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mat_ambient\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">.</span>ambient<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform4fv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mat_diffuse\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">.</span>diffuse<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform4fv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mat_specular\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">.</span>specular<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform4fv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mat_emissive\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>data<span class=\"token punctuation\">.</span>emissive<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform4fv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"global_ambient\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">ofGetGlobalAmbientColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mat_shininess\"</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">.</span>shininess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> uniform<span class=\"token operator\">:</span> uniforms1f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span>uniform<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> uniform <span class=\"token operator\">:</span> uniforms2f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform2f</span><span class=\"token punctuation\">(</span>uniform<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> uniform <span class=\"token operator\">:</span> uniforms3f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform3f</span><span class=\"token punctuation\">(</span>uniform<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> uniform <span class=\"token operator\">:</span> uniforms4f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span>uniform<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> uniform <span class=\"token operator\">:</span> uniforms1i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1i</span><span class=\"token punctuation\">(</span>uniform<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> uniform <span class=\"token operator\">:</span> uniforms2i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform2i</span><span class=\"token punctuation\">(</span>uniform<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> uniform <span class=\"token operator\">:</span> uniforms3i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform3i</span><span class=\"token punctuation\">(</span>uniform<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> uniform <span class=\"token operator\">:</span> uniforms4i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform4i</span><span class=\"token punctuation\">(</span>uniform<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> uniform <span class=\"token operator\">:</span> uniforms4m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniformMatrix4f</span><span class=\"token punctuation\">(</span>uniform<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> uniform <span class=\"token operator\">:</span> uniforms3m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniformMatrix3f</span><span class=\"token punctuation\">(</span>uniform<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> uniform <span class=\"token operator\">:</span> uniformstex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniformTexture</span><span class=\"token punctuation\">(</span>uniform<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>textureTarget<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>textureID<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t uniform<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>textureLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">updateLights</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span> shader<span class=\"token punctuation\">,</span>ofGLProgrammableRenderer <span class=\"token operator\">&amp;</span> renderer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token function\">ofLightsData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstring idx <span class=\"token operator\">=</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tshared_ptr<span class=\"token operator\">&lt;</span>ofLight<span class=\"token operator\">::</span>Data<span class=\"token operator\">></span> light <span class=\"token operator\">=</span> <span class=\"token function\">ofLightsData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>light <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>light<span class=\"token operator\">-</span><span class=\"token operator\">></span>isEnabled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].enabled\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">auto</span> lightEyePosition <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentViewMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>position<span class=\"token punctuation\">;</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].enabled\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].type\"</span><span class=\"token punctuation\">,</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>lightType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].position\"</span><span class=\"token punctuation\">,</span> lightEyePosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].ambient\"</span><span class=\"token punctuation\">,</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>ambientColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].specular\"</span><span class=\"token punctuation\">,</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>specularColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].diffuse\"</span><span class=\"token punctuation\">,</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>diffuseColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">-</span><span class=\"token operator\">></span>lightType<span class=\"token operator\">!=</span>OF_LIGHT_DIRECTIONAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].constantAttenuation\"</span><span class=\"token punctuation\">,</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>attenuation_constant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].linearAttenuation\"</span><span class=\"token punctuation\">,</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>attenuation_linear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].quadraticAttenuation\"</span><span class=\"token punctuation\">,</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>attenuation_quadratic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">-</span><span class=\"token operator\">></span>lightType<span class=\"token operator\">==</span>OF_LIGHT_SPOT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tglm<span class=\"token operator\">::</span>vec3 direction <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">-</span><span class=\"token operator\">></span>position<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>direction<span class=\"token punctuation\">;</span>\n\t\t\tglm<span class=\"token operator\">::</span>vec4 direction4 <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentViewMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">,</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tdirection <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>direction4<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> direction4<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n\t\t\tdirection <span class=\"token operator\">=</span> direction <span class=\"token operator\">-</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>lightEyePosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform3f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].spotDirection\"</span><span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].spotExponent\"</span><span class=\"token punctuation\">,</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>exponent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].spotCutoff\"</span><span class=\"token punctuation\">,</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>spotCutOff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].spotCosCutoff\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofDegToRad</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">-</span><span class=\"token operator\">></span>spotCutOff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">-</span><span class=\"token operator\">></span>lightType<span class=\"token operator\">==</span>OF_LIGHT_DIRECTIONAL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tglm<span class=\"token operator\">::</span>vec3 <span class=\"token function\">halfVector</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> lightEyePosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform3f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].halfVector\"</span><span class=\"token punctuation\">,</span> halfVector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">-</span><span class=\"token operator\">></span>lightType<span class=\"token operator\">==</span>OF_LIGHT_AREA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].width\"</span><span class=\"token punctuation\">,</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].height\"</span><span class=\"token punctuation\">,</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tglm<span class=\"token operator\">::</span>vec3 direction <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">-</span><span class=\"token operator\">></span>position<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>direction<span class=\"token punctuation\">;</span>\n\t\t\tglm<span class=\"token operator\">::</span>vec4 direction4 <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentViewMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tdirection <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>direction4<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> direction4<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n\t\t\tdirection <span class=\"token operator\">=</span> direction <span class=\"token operator\">-</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>lightEyePosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform3f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].spotDirection\"</span><span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tglm<span class=\"token operator\">::</span>vec3 right <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>light<span class=\"token operator\">-</span><span class=\"token operator\">></span>position<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> light<span class=\"token operator\">-</span><span class=\"token operator\">></span>right<span class=\"token punctuation\">;</span>\n\t\t\tglm<span class=\"token operator\">::</span>vec4 right4 <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentViewMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec4</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tright <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>right4<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> right4<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">;</span>\n\t\t\tright <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>lightEyePosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> up <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">cross</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">,</span> direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform3f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].right\"</span><span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token function\">toGlm</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshader<span class=\"token punctuation\">.</span><span class=\"token function\">setUniform3f</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lights[\"</span><span class=\"token operator\">+</span>idx<span class=\"token operator\">+</span><span class=\"token string\">\"].up\"</span><span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tuniforms1f<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniform2f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec2 value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tuniforms2f<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniform3f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec3 value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tuniforms3f<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniform4f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec4 value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tuniforms4f<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniform1i</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tuniforms1i<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniform2i</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tuniforms2i<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniform3i</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tuniforms3i<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniform4i</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tuniforms4i<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniformMatrix4f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>mat4 value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tuniforms4m<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniformMatrix3f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>mat3 value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tuniforms3m<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniformTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofTexture <span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> textureLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tuniformstex<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textureTarget<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>textureID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> textureLocation<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofMaterial<span class=\"token operator\">::</span><span class=\"token function\">setCustomUniformTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> textureTarget<span class=\"token punctuation\">,</span> GLint textureID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> textureLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tuniformstex<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>textureTarget<span class=\"token punctuation\">,</span> textureID<span class=\"token punctuation\">,</span> textureLocation<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"shaders/phong.vert\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"shaders/phong.frag\"</span></span>\n\n<span class=\"token keyword\">namespace</span><span class=\"token punctuation\">{</span>\n    string <span class=\"token function\">shaderHeader</span><span class=\"token punctuation\">(</span>string header<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxLights<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> hasTexture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> hasColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        header <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"#define MAX_LIGHTS \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>maxLights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hasTexture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            header <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"#define HAS_TEXTURE 1\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\theader <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"#define HAS_TEXTURE 0\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hasColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            header <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"#define HAS_COLOR 1\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\theader <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"#define HAS_COLOR 0\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> header<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    string <span class=\"token function\">vertexSource</span><span class=\"token punctuation\">(</span>string defaultHeader<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxLights<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> hasTexture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> hasColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">shaderHeader</span><span class=\"token punctuation\">(</span>defaultHeader<span class=\"token punctuation\">,</span> maxLights<span class=\"token punctuation\">,</span> hasTexture<span class=\"token punctuation\">,</span> hasColor<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> vertexShader<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    string <span class=\"token function\">fragmentSource</span><span class=\"token punctuation\">(</span>string defaultHeader<span class=\"token punctuation\">,</span> string customUniforms<span class=\"token punctuation\">,</span>  string postFragment<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxLights<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> hasTexture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> hasColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">auto</span> source <span class=\"token operator\">=</span> fragmentShader<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>postFragment<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            postFragment <span class=\"token operator\">=</span> <span class=\"token string\">\"vec4 postFragment(vec4 localColor){ return localColor; }\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%postFragment%\"</span><span class=\"token punctuation\">,</span> postFragment<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%custom_uniforms%\"</span><span class=\"token punctuation\">,</span> customUniforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        source <span class=\"token operator\">=</span> <span class=\"token function\">shaderHeader</span><span class=\"token punctuation\">(</span>defaultHeader<span class=\"token punctuation\">,</span> maxLights<span class=\"token punctuation\">,</span> hasTexture<span class=\"token punctuation\">,</span> hasColor<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> source<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}