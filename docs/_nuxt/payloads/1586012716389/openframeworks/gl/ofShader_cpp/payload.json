{"data":[{"page":{"entry":{"name":"ofShader.cpp","filename":"ofShader.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/gl/ofShader.cpp","path":"/openframeworks/gl/ofShader_cpp","route":"/openframeworks/gl/ofShader.cpp","dir":"../libs/openFrameworks/gl","ext":"cpp","type":"source","id":220,"parent":204,"breadcrumbs":[204,164],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofShader.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofFileUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGraphics.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGLProgrammableRenderer.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofTexture.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMatrix4x4.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMatrix3x3.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVec2f.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVec3f.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVec4f.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofParameterGroup.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofParameter.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofBufferObject.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;regex></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxAndroidUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> string COLOR_ATTRIBUTE<span class=\"token operator\">=</span><span class=\"token string\">\"color\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> string POSITION_ATTRIBUTE<span class=\"token operator\">=</span><span class=\"token string\">\"position\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> string NORMAL_ATTRIBUTE<span class=\"token operator\">=</span><span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> string TEXCOORD_ATTRIBUTE<span class=\"token operator\">=</span><span class=\"token string\">\"texcoord\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> map<span class=\"token operator\">&lt;</span>GLuint<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getShaderIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> map<span class=\"token operator\">&lt;</span>GLuint<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span> ids <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> map<span class=\"token operator\">&lt;</span>GLuint<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>ids<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> map<span class=\"token operator\">&lt;</span>GLuint<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getProgramIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> map<span class=\"token operator\">&lt;</span>GLuint<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span> ids <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> map<span class=\"token operator\">&lt;</span>GLuint<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>ids<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">retainShader</span><span class=\"token punctuation\">(</span>GLuint id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getShaderIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token function\">getShaderIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">getShaderIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">getShaderIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">releaseShader</span><span class=\"token punctuation\">(</span>GLuint program<span class=\"token punctuation\">,</span> GLuint id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getShaderIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token function\">getShaderIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">getShaderIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getShaderIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">glDetachShader</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glDeleteShader</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">getShaderIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"releaseShader(): something's wrong here, releasing unknown shader id \"</span> <span class=\"token operator\">&lt;&lt;</span> id <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" from program \"</span> <span class=\"token operator\">&lt;&lt;</span> program<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glDetachShader</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glDeleteShader</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">retainProgram</span><span class=\"token punctuation\">(</span>GLuint id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getProgramIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token function\">getProgramIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">getProgramIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">getProgramIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">releaseProgram</span><span class=\"token punctuation\">(</span>GLuint id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getProgramIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token function\">getProgramIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">getProgramIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getProgramIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">glDeleteProgram</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">getProgramIds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"releaseProgram(): something's wrong here, releasing unknown program id \"</span> <span class=\"token operator\">&lt;&lt;</span> id<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glDeleteProgram</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofShader<span class=\"token operator\">::</span>TransformFeedbackRangeBinding<span class=\"token operator\">::</span><span class=\"token function\">TransformFeedbackRangeBinding</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBufferObject <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> GLuint offset<span class=\"token punctuation\">,</span> GLuint size<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span>offset<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofShader<span class=\"token operator\">::</span>TransformFeedbackBaseBinding<span class=\"token operator\">::</span><span class=\"token function\">TransformFeedbackBaseBinding</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBufferObject <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofShader<span class=\"token operator\">::</span><span class=\"token function\">ofShader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span>\n\t<span class=\"token function\">program</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function\">bLoaded</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofShader<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofShader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofShader<span class=\"token operator\">::</span><span class=\"token function\">ofShader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">program</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">bLoaded</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>bLoaded<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">shaders</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>shaders<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">uniformsCache</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>uniformsCache<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">attributesBindingsCache</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>attributesBindingsCache<span class=\"token punctuation\">)</span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">uniformBlocksCache</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>uniformBlocksCache<span class=\"token punctuation\">)</span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">retainProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it<span class=\"token operator\">:</span> shaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> shader <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">retainShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofShader<span class=\"token operator\">::</span>unloadGL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofShader <span class=\"token operator\">&amp;</span> ofShader<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tprogram <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">;</span>\n\tbLoaded <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>bLoaded<span class=\"token punctuation\">;</span>\n\tshaders <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>shaders<span class=\"token punctuation\">;</span>\n\tattributesBindingsCache <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>attributesBindingsCache<span class=\"token punctuation\">;</span>\n\tuniformsCache <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span>uniformsCache<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">retainProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it<span class=\"token operator\">:</span> shaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> shader <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">retainShader</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofShader<span class=\"token operator\">::</span>unloadGL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofShader<span class=\"token operator\">::</span><span class=\"token function\">ofShader</span><span class=\"token punctuation\">(</span>ofShader <span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">:</span><span class=\"token function\">program</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">bLoaded</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">shaders</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>shaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">uniformsCache</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>uniformsCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">,</span><span class=\"token function\">attributesBindingsCache</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>attributesBindingsCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofShader<span class=\"token operator\">::</span>unloadGL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n\tmom<span class=\"token punctuation\">.</span>bLoaded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofShader <span class=\"token operator\">&amp;</span> ofShader<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofShader <span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tprogram <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbLoaded <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tshaders <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>shaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tattributesBindingsCache <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>attributesBindingsCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuniformsCache <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>uniformsCache<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofShader<span class=\"token operator\">::</span>unloadGL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n\tmom<span class=\"token punctuation\">.</span>bLoaded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> shaderName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>shaderName<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".vert\"</span><span class=\"token punctuation\">,</span> shaderName<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\".frag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> vertName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> fragName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> geomName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vertName<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token function\">setupShaderFromFile</span><span class=\"token punctuation\">(</span>GL_VERTEX_SHADER<span class=\"token punctuation\">,</span> vertName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fragName<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token function\">setupShaderFromFile</span><span class=\"token punctuation\">(</span>GL_FRAGMENT_SHADER<span class=\"token punctuation\">,</span> fragName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>geomName<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token function\">setupShaderFromFile</span><span class=\"token punctuation\">(</span>GL_GEOMETRY_SHADER_EXT<span class=\"token punctuation\">,</span> geomName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofIsGLProgrammableRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">bindDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> !defined(TARGET_OPENGLES) &amp;&amp; defined(glDispatchCompute)</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">loadCompute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> shaderName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">setupShaderFromFile</span><span class=\"token punctuation\">(</span>GL_COMPUTE_SHADER<span class=\"token punctuation\">,</span> shaderName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShaderSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> shader <span class=\"token operator\">:</span> settings<span class=\"token punctuation\">.</span>shaderFiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> ty <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> file <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> shaderSource <span class=\"token operator\">=</span> <span class=\"token function\">sourceFromFile</span><span class=\"token punctuation\">(</span>ty<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tshaderSource<span class=\"token punctuation\">.</span>intDefines <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>intDefines<span class=\"token punctuation\">;</span>\n\t\tshaderSource<span class=\"token punctuation\">.</span>floatDefines <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>floatDefines<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>shaderSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> shader <span class=\"token operator\">:</span> settings<span class=\"token punctuation\">.</span>shaderSources<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> ty <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> source <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t\tSource shaderSource<span class=\"token punctuation\">{</span>ty<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>sourceDirectoryPath<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\tshaderSource<span class=\"token punctuation\">.</span>intDefines <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>intDefines<span class=\"token punctuation\">;</span>\n\t\tshaderSource<span class=\"token punctuation\">.</span>floatDefines <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>floatDefines<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>shaderSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ofIsGLProgrammableRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> settings<span class=\"token punctuation\">.</span>bindDefaults<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">bindDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> !defined(TARGET_OPENGLES)</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TransformFeedbackSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> shader <span class=\"token operator\">:</span> settings<span class=\"token punctuation\">.</span>shaderFiles<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> ty <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> file <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> shaderSource <span class=\"token operator\">=</span> <span class=\"token function\">sourceFromFile</span><span class=\"token punctuation\">(</span>ty<span class=\"token punctuation\">,</span> file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tshaderSource<span class=\"token punctuation\">.</span>intDefines <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>intDefines<span class=\"token punctuation\">;</span>\n\t\tshaderSource<span class=\"token punctuation\">.</span>floatDefines <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>floatDefines<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>shaderSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> shader <span class=\"token operator\">:</span> settings<span class=\"token punctuation\">.</span>shaderSources<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> ty <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">auto</span> source <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t\tSource shaderSource<span class=\"token punctuation\">{</span>ty<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>sourceDirectoryPath<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\tshaderSource<span class=\"token punctuation\">.</span>intDefines <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>intDefines<span class=\"token punctuation\">;</span>\n\t\tshaderSource<span class=\"token punctuation\">.</span>floatDefines <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span>floatDefines<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>shaderSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ofIsGLProgrammableRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> settings<span class=\"token punctuation\">.</span>bindDefaults<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">bindDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>settings<span class=\"token punctuation\">.</span>varyingsToCapture<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token function\">varyings</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>varyingsToCapture<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span><span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span>varyingsToCapture<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>varyingsToCapture<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> varyings<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glTransformFeedbackVaryings</span><span class=\"token punctuation\">(</span><span class=\"token function\">getProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> varyings<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> varyings<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> settings<span class=\"token punctuation\">.</span>bufferMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setupShaderFromFile</span><span class=\"token punctuation\">(</span>GLenum type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofBuffer buffer <span class=\"token operator\">=</span> <span class=\"token function\">ofBufferFromFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// we need to make absolutely sure to have an absolute path here, so that any #includes</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// within the shader files have a root directory to traverse from.</span>\n\tstring absoluteFilePath <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring sourceDirectoryPath <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span>absoluteFilePath<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sourceDirectoryPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupShaderFromFile(): couldn't load \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" shader \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" from \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> absoluteFilePath <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofShader<span class=\"token operator\">::</span>Source ofShader<span class=\"token operator\">::</span><span class=\"token function\">sourceFromFile</span><span class=\"token punctuation\">(</span>GLenum type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> filename<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofBuffer buffer <span class=\"token operator\">=</span> <span class=\"token function\">ofBufferFromFile</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// we need to make absolutely sure to have an absolute path here, so that any #includes</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// within the shader files have a root directory to traverse from.</span>\n\tstring absoluteFilePath <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring sourceDirectoryPath <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span>absoluteFilePath<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> Source<span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> sourceDirectoryPath<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupShaderFromFile(): couldn't load \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" shader \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" from \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> absoluteFilePath <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> Source<span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>GLenum type<span class=\"token punctuation\">,</span> string source<span class=\"token punctuation\">,</span> string sourceDirectoryPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">,</span> sourceDirectoryPath<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>ofShader<span class=\"token operator\">::</span>Source <span class=\"token operator\">&amp;&amp;</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// create program if it doesn't exist already</span>\n\t<span class=\"token function\">checkAndCreateProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tGLuint clearErrors <span class=\"token operator\">=</span> <span class=\"token function\">glGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//needed for some users to clear gl errors</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> clearErrors <span class=\"token operator\">!=</span> GL_NO_ERROR <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupShaderFromSource(): OpenGL error after checkAndCreateProgram() (probably harmless): error \"</span> <span class=\"token operator\">&lt;&lt;</span> clearErrors<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// create shader</span>\n\tGLuint shaderId <span class=\"token operator\">=</span> <span class=\"token function\">glCreateShader</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shaderId <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupShaderFromSource(): failed creating \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" shader\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// if the shader object has been allocated successfully on the GPU</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// we must retain it so that it can be de-allocated again, once</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// this ofShader object has been discarded, or re-allocated.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// we need to do this at this point in the code path, since early</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// return statements might prevent us from retaining later.</span>\n\t\t<span class=\"token function\">retainShader</span><span class=\"token punctuation\">(</span>shaderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// parse for includes</span>\n\tsource<span class=\"token punctuation\">.</span>expandedSource <span class=\"token operator\">=</span> <span class=\"token function\">parseForIncludes</span><span class=\"token punctuation\">(</span> source<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">.</span>directoryPath <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// parse and set defines</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> define<span class=\"token operator\">:</span> source<span class=\"token punctuation\">.</span>intDefines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> name <span class=\"token operator\">=</span> define<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> value <span class=\"token operator\">=</span> define<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>regex <span class=\"token function\">re_define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#define[ \\t]+\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"[ \\t]+(([1-9][0-9]*)|(0[xX][0-9a-fA-F]+))\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        source<span class=\"token punctuation\">.</span>expandedSource <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">regex_replace</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>expandedSource<span class=\"token punctuation\">,</span> re_define<span class=\"token punctuation\">,</span> <span class=\"token string\">\"#define \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> std<span class=\"token operator\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> define<span class=\"token operator\">:</span> source<span class=\"token punctuation\">.</span>floatDefines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> name <span class=\"token operator\">=</span> define<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> value <span class=\"token operator\">=</span> define<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>regex <span class=\"token function\">re_define</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#define[ \\t]+\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"[ \\t]+[0-9]*(\\\\.[0-9]*f?)?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        source<span class=\"token punctuation\">.</span>expandedSource <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">regex_replace</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">.</span>expandedSource<span class=\"token punctuation\">,</span> re_define<span class=\"token punctuation\">,</span> <span class=\"token string\">\"#define \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> std<span class=\"token operator\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// store source code (that's the expanded source with all includes copied in)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// we need to store this here, and before shader compilation,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// so that any shader compilation errors can be</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// traced down to the correct shader source code line.</span>\n\tshaders<span class=\"token punctuation\">[</span>source<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> shaderId<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>source<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> shader <span class=\"token operator\">=</span> shaders<span class=\"token punctuation\">[</span>source<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// compile shader</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> sptr <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>expandedSource<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> ssize <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>expandedSource<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glShaderSource</span><span class=\"token punctuation\">(</span>shaderId<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sptr<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ssize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glCompileShader</span><span class=\"token punctuation\">(</span>shaderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// check compile status</span>\n\tGLint status <span class=\"token operator\">=</span> GL_FALSE<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glGetShaderiv</span><span class=\"token punctuation\">(</span>shaderId<span class=\"token punctuation\">,</span> GL_COMPILE_STATUS<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tGLuint err <span class=\"token operator\">=</span> <span class=\"token function\">glGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> GL_NO_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupShaderFromSource(): OpenGL generated error \"</span> <span class=\"token operator\">&lt;&lt;</span> err <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" trying to get the compile status for a \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" shader, does your video card support this?\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> GL_TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupShaderFromSource(): \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" shader compiled\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_EMSCRIPTEN</span>\n\t\t<span class=\"token function\">checkShaderInfoLog</span><span class=\"token punctuation\">(</span>shaderId<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> OF_LOG_VERBOSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t<span class=\"token function\">checkShaderInfoLog</span><span class=\"token punctuation\">(</span>shaderId<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> OF_LOG_WARNING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> GL_FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setupShaderFromSource(): \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" shader failed to compile\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">checkShaderInfoLog</span><span class=\"token punctuation\">(</span>shaderId<span class=\"token punctuation\">,</span> source<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">,</span> OF_LOG_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/*\n * Parse for GLSL includes based on\n * https://www.opengl.org/discussion_boards/showthread.php/169209-include-in-glsl?p=1192415&amp;viewfull=1#post1192415\n */</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstring ofShader<span class=\"token operator\">::</span><span class=\"token function\">parseForIncludes</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> source<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> sourceDirectoryPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> included<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">parseForIncludes</span><span class=\"token punctuation\">(</span> source<span class=\"token punctuation\">,</span> included<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sourceDirectoryPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstring ofShader<span class=\"token operator\">::</span><span class=\"token function\">parseForIncludes</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> source<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> included<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> sourceDirectoryPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> level <span class=\"token operator\">></span> <span class=\"token number\">32</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"glsl header inclusion depth limit reached, might be caused by cyclic header inclusion\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tstringstream output<span class=\"token punctuation\">;</span>\n\tstringstream input<span class=\"token punctuation\">;</span>\n\tinput <span class=\"token operator\">&lt;&lt;</span> source<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">auto</span> match_pragma_include <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> s_<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string<span class=\"token operator\">&amp;</span> filename_<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n\t\tfilename_ <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>istringstream <span class=\"token function\">s</span><span class=\"token punctuation\">(</span>s_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ts <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>ws<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// eat up any leading whitespace.</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">peek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// -----| invariant: found '#'</span>\n\t\ts<span class=\"token punctuation\">.</span><span class=\"token function\">seekg</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>ios<span class=\"token operator\">::</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// move forward one character</span>\n\n\t\tstd<span class=\"token operator\">::</span>string p<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// while skipping whitespace, read in tokens for: pragma, include, and filename</span>\n\t\ts <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>skipws <span class=\"token operator\">>></span> p <span class=\"token operator\">>></span> i <span class=\"token operator\">>></span> f<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// -----| invariant: all tokens have values</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token string\">\"pragma\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token string\">\"include\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// first and last character of filename token must match and be either</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// '&lt;' and '>', or '\"</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'&lt;'</span> <span class=\"token operator\">&amp;&amp;</span> f<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//&lt; mismatching brackets</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\"'</span> <span class=\"token operator\">||</span> f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'\\''</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> f<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// mismatching quotes</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// invariant: filename properly quoted.</span>\n\n\t\tfilename_ <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>f<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// once std::regex is available across the board, use this regex in favour of the above lambda:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// std::regex re(\"^\\\\s*#\\\\s*pragma\\\\s+include\\\\s+[\\\"&lt;](.*)[\\\">].*\");</span>\n\n\tstring line<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> std<span class=\"token operator\">::</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span> input<span class=\"token punctuation\">,</span> line <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\tstring include<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">match_pragma_include</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\toutput <span class=\"token operator\">&lt;&lt;</span> line <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// --------| invariant: '#pragma include' has been requested</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> std<span class=\"token operator\">::</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span> included<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> included<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> include <span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> included<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> include <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" already included\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// we store the absolute paths so as have (more) unique file identifiers.</span>\n\n\t\tinclude <span class=\"token operator\">=</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>sourceDirectoryPath<span class=\"token punctuation\">,</span> include<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAbsolutePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tincluded<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span> include <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tofBuffer buffer <span class=\"token operator\">=</span> <span class=\"token function\">ofBufferFromFile</span><span class=\"token punctuation\">(</span> include <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"Could not open glsl include file \"</span> <span class=\"token operator\">&lt;&lt;</span> include<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tstring currentDir <span class=\"token operator\">=</span> <span class=\"token function\">ofFile</span><span class=\"token punctuation\">(</span>include<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEnclosingDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toutput <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">parseForIncludes</span><span class=\"token punctuation\">(</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> included<span class=\"token punctuation\">,</span> level <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> currentDir <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> output<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstring ofShader<span class=\"token operator\">::</span><span class=\"token function\">getShaderSource</span><span class=\"token punctuation\">(</span>GLenum type<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> source <span class=\"token operator\">=</span> shaders<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> source <span class=\"token operator\">!=</span> shaders<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> source<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>expandedSource<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No shader source for shader of type: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setGeometryInputType</span><span class=\"token punctuation\">(</span>GLenum type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token function\">checkAndCreateProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glProgramParameteri</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_GEOMETRY_INPUT_TYPE_EXT<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setGeometryOutputType</span><span class=\"token punctuation\">(</span>GLenum type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token function\">checkAndCreateProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glProgramParameteri</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_GEOMETRY_OUTPUT_TYPE_EXT<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setGeometryOutputCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token function\">checkAndCreateProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glProgramParameteri</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_GEOMETRY_VERTICES_OUT_EXT<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">getGeometryMaxOutputCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glGetIntegerv</span><span class=\"token punctuation\">(</span>GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">checkProgramLinkStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tGLint status<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glGetProgramiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_LINK_STATUS<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tGLuint err <span class=\"token operator\">=</span> <span class=\"token function\">glGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> GL_NO_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"checkProgramLinkStatus(): OpenGL generated error \"</span> <span class=\"token operator\">&lt;&lt;</span> err <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" trying to get the program link status, does your video card support shader programs?\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> GL_TRUE<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"checkProgramLinkStatus(): program \"</span> <span class=\"token operator\">&lt;&lt;</span> program <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" linked\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>status <span class=\"token operator\">==</span> GL_FALSE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"checkProgramLinkStatus(): program failed to link\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">checkProgramInfoLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">checkShaderInfoLog</span><span class=\"token punctuation\">(</span>GLuint shader<span class=\"token punctuation\">,</span> GLenum type<span class=\"token punctuation\">,</span> ofLogLevel logLevel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tGLsizei infoLength<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glGetShaderiv</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> GL_INFO_LOG_LENGTH<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infoLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>infoLength <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tofBuffer infoBuffer<span class=\"token punctuation\">;</span>\n\t\tinfoBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>infoLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glGetShaderInfoLog</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">,</span> infoLength<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infoLength<span class=\"token punctuation\">,</span> infoBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>logLevel<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ofShader: %s shader reports:\\n%s\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> infoBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> (!defined(TARGET_LINUX) || defined(GCC_HAS_REGEX))</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shaders<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> shaders<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// The following regexp should match shader compiler error messages by Nvidia and ATI.</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// Unfortunately, each vendor's driver formats error messages slightly different.</span>\n\t\t\tstd<span class=\"token operator\">::</span>regex <span class=\"token function\">nvidia_ati</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^.*[(:]{1}(\\\\d+)[:)]{1}.*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstd<span class=\"token operator\">::</span>regex <span class=\"token function\">intel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"^[0-9]+:([0-9]+)\\\\([0-9]+\\\\):.*$\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstd<span class=\"token operator\">::</span>smatch matches<span class=\"token punctuation\">;</span>\n\t\t\tstring infoString <span class=\"token operator\">=</span> <span class=\"token function\">ofTrim</span><span class=\"token punctuation\">(</span>infoBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">regex_search</span><span class=\"token punctuation\">(</span>infoString<span class=\"token punctuation\">,</span> matches<span class=\"token punctuation\">,</span> intel<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> std<span class=\"token operator\">::</span><span class=\"token function\">regex_search</span><span class=\"token punctuation\">(</span>infoString<span class=\"token punctuation\">,</span> matches<span class=\"token punctuation\">,</span> nvidia_ati<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tofBuffer buf<span class=\"token punctuation\">;</span>\n\t\t\t\tbuf<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>shaders<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>expandedSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tofBuffer<span class=\"token operator\">::</span>Line line <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">int</span>  offendingLineNumber <span class=\"token operator\">=</span> <span class=\"token function\">ofToInt</span><span class=\"token punctuation\">(</span>matches<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tostringstream msg<span class=\"token punctuation\">;</span>\n\t\t\t\tmsg <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"ofShader: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", offending line \"</span> <span class=\"token operator\">&lt;&lt;</span> offendingLineNumber <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" :\"</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> line <span class=\"token operator\">!=</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> line<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tstring s <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>line<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">>=</span> offendingLineNumber <span class=\"token operator\">-</span><span class=\"token number\">3</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> offendingLineNumber <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tmsg <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setw</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> s <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>logLevel<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> msg<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>logLevel<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> shaders<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>expandedSource<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">checkProgramInfoLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tGLsizei infoLength<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glGetProgramiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_INFO_LOG_LENGTH<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infoLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>infoLength <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tofBuffer infoBuffer<span class=\"token punctuation\">;</span>\n\t\tinfoBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>infoLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glGetProgramInfoLog</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> infoLength<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>infoLength<span class=\"token punctuation\">,</span> infoBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// TODO: it appears that Raspberry Pi only reports shader errors whilst linking,</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// but then it becomes hard to figure out whether the fragment or the</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// vertex shader caused the error.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// We need to find a robust way of extracing this information from</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// the log, and unfortunately can't use regex whilst gcc on RPi is assumed to</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// be &lt; 4.9, which is the first version fully supporting this c++11 feature.</span>\n\t\tstring msg <span class=\"token operator\">=</span> <span class=\"token string\">\"ofShader: program reports:\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> msg <span class=\"token operator\">+</span> infoBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_RAPSBERRY_PI</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it<span class=\"token operator\">:</span> shaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>expandedSource<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">checkAndCreateProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GL_ARB_shader_objects<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofIsGLProgrammableRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>program <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"checkAndCreateProgram(): creating GLSL program\"</span><span class=\"token punctuation\">;</span>\n\t\t\tprogram <span class=\"token operator\">=</span> <span class=\"token function\">glCreateProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">retainProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sorry, it looks like you can't run 'ARB_shader_objects'\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"please check the capabilites of your graphics card: http://www.ozone3d.net/gpu_caps_viewer\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shaders<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"linkProgram(): trying to link GLSL program, but no shaders created yet\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">checkAndCreateProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it<span class=\"token operator\">:</span> shaders<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> shader <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">.</span>id<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"linkProgram(): attaching \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" shader to program \"</span> <span class=\"token operator\">&lt;&lt;</span> program<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">glAttachShader</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> shader<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">glLinkProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">checkProgramLinkStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Pre-cache all active uniforms</span>\n\t\tGLint numUniforms <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glGetProgramiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_ACTIVE_UNIFORMS<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>numUniforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tGLint uniformMaxLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glGetProgramiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_ACTIVE_UNIFORM_MAX_LENGTH<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uniformMaxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tGLint count <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\tGLenum type <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tGLsizei length<span class=\"token punctuation\">;</span>\n\t\tGLint location<span class=\"token punctuation\">;</span>\n\t\tvector<span class=\"token operator\">&lt;</span>GLchar<span class=\"token operator\">></span> <span class=\"token function\">uniformName</span><span class=\"token punctuation\">(</span>uniformMaxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>GLint i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numUniforms<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">glGetActiveUniform</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> uniformMaxLength<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>length<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>type<span class=\"token punctuation\">,</span> uniformName<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstring <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>uniformName<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> uniformName<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// some drivers return uniform_name[0] for array uniforms</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// instead of the real uniform name</span>\n\t\t\tlocation <span class=\"token operator\">=</span> <span class=\"token function\">glGetUniformLocation</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>location <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ignore uniform blocks</span>\n\n\t\t\tuniformsCache<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> location<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">auto</span> arrayPos <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token string\">'['</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arrayPos<span class=\"token operator\">!=</span>std<span class=\"token operator\">::</span>string<span class=\"token operator\">::</span>npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tname <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arrayPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tuniformsCache<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> location<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> GLEW_ARB_uniform_buffer_object</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GLEW_ARB_uniform_buffer_object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// Pre-cache all active uniforms blocks</span>\n\t\t\tGLint numUniformBlocks <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glGetProgramiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_ACTIVE_UNIFORM_BLOCKS<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>numUniformBlocks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tcount <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\ttype <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\tvector<span class=\"token operator\">&lt;</span>GLchar<span class=\"token operator\">></span> <span class=\"token function\">uniformBlockName</span><span class=\"token punctuation\">(</span>uniformMaxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>GLint i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numUniformBlocks<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">glGetActiveUniformBlockName</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> uniformMaxLength<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>length<span class=\"token punctuation\">,</span> uniformBlockName<span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tstring <span class=\"token function\">name</span><span class=\"token punctuation\">(</span>uniformBlockName<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> uniformBlockName<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tuniformBlocksCache<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">glGetUniformBlockIndex</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofShader<span class=\"token operator\">::</span>unloadGL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// bLoaded means we have loaded shaders onto the graphics card;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// it doesn't necessarily mean that these shaders have compiled and linked successfully.</span>\n\t\tbLoaded <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> bLoaded<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">unloadGL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it<span class=\"token operator\">:</span> shaders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> shader <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">releaseShader</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span>shader<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">releaseProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tprogram <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tbLoaded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofShader<span class=\"token operator\">::</span>reloadGL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">reloadGL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> source <span class=\"token operator\">=</span> shaders<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> bindings <span class=\"token operator\">=</span> attributesBindingsCache<span class=\"token punctuation\">;</span>\n\tshaders<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuniformsCache<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> GLEW_ARB_uniform_buffer_object </span><span class=\"token comment\" spellcheck=\"true\">// Core in OpenGL 3.1</span>\n\tuniformBlocksCache<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\tattributesBindingsCache<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> shader<span class=\"token operator\">:</span> source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> source <span class=\"token operator\">=</span> shader<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">setupShaderFromSource</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> binding<span class=\"token operator\">:</span> bindings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">bindAttribute</span><span class=\"token punctuation\">(</span>binding<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">linkProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">bindAttribute</span><span class=\"token punctuation\">(</span>GLuint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tattributesBindingsCache<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> location<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glBindAttribLocation</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span>location<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">bindDefaults</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shaders<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"bindDefaults(): trying to link GLSL program, but no shaders created yet\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">bindAttribute</span><span class=\"token punctuation\">(</span>ofShader<span class=\"token operator\">::</span>POSITION_ATTRIBUTE<span class=\"token punctuation\">,</span><span class=\"token operator\">::</span>POSITION_ATTRIBUTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">bindAttribute</span><span class=\"token punctuation\">(</span>ofShader<span class=\"token operator\">::</span>COLOR_ATTRIBUTE<span class=\"token punctuation\">,</span><span class=\"token operator\">::</span>COLOR_ATTRIBUTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">bindAttribute</span><span class=\"token punctuation\">(</span>ofShader<span class=\"token operator\">::</span>NORMAL_ATTRIBUTE<span class=\"token punctuation\">,</span><span class=\"token operator\">::</span>NORMAL_ATTRIBUTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">bindAttribute</span><span class=\"token punctuation\">(</span>ofShader<span class=\"token operator\">::</span>TEXCOORD_ATTRIBUTE<span class=\"token punctuation\">,</span><span class=\"token operator\">::</span>TEXCOORD_ATTRIBUTE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it<span class=\"token operator\">:</span> shaders<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">auto</span> shader <span class=\"token operator\">=</span> it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"unload(): detaching and deleting \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>shader<span class=\"token punctuation\">.</span>source<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" shader from program \"</span> <span class=\"token operator\">&lt;&lt;</span> program<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">releaseShader</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span>shader<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">releaseProgram</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tprogram <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tshaders<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tuniformsCache<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> GLEW_ARB_uniform_buffer_object </span><span class=\"token comment\" spellcheck=\"true\">// Core in OpenGL 3.1</span>\n\t\tuniformBlocksCache<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\tattributesBindingsCache<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n\t\t<span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofShader<span class=\"token operator\">::</span>reloadGL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofxAndroidEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unloadGL<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofShader<span class=\"token operator\">::</span>unloadGL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token punctuation\">}</span>\n\tbLoaded <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> bLoaded<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofGetGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofGetGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">unbind</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> !defined(TARGET_OPENGLES)</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">beginTransformFeedback</span><span class=\"token punctuation\">(</span>GLenum mode<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">glEnable</span><span class=\"token punctuation\">(</span>GL_RASTERIZER_DISCARD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glBeginTransformFeedback</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">beginTransformFeedback</span><span class=\"token punctuation\">(</span>GLenum mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TransformFeedbackRangeBinding <span class=\"token operator\">&amp;</span> binding<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tbinding<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">bindRange</span><span class=\"token punctuation\">(</span>GL_TRANSFORM_FEEDBACK_BUFFER<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">beginTransformFeedback</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">beginTransformFeedback</span><span class=\"token punctuation\">(</span>GLenum mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>TransformFeedbackRangeBinding<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> bindings<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> binding <span class=\"token operator\">:</span> bindings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbinding<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">bindRange</span><span class=\"token punctuation\">(</span>GL_TRANSFORM_FEEDBACK_BUFFER<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>offset<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">beginTransformFeedback</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">beginTransformFeedback</span><span class=\"token punctuation\">(</span>GLenum mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> TransformFeedbackBaseBinding <span class=\"token operator\">&amp;</span> binding<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tbinding<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">bindBase</span><span class=\"token punctuation\">(</span>GL_TRANSFORM_FEEDBACK_BUFFER<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">beginTransformFeedback</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">beginTransformFeedback</span><span class=\"token punctuation\">(</span>GLenum mode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>TransformFeedbackBaseBinding<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> bindings<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> binding <span class=\"token operator\">:</span> bindings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbinding<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">bindBase</span><span class=\"token punctuation\">(</span>GL_TRANSFORM_FEEDBACK_BUFFER<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">beginTransformFeedback</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">endTransformFeedback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">glEndTransformFeedback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">glDisable</span><span class=\"token punctuation\">(</span>GL_RASTERIZER_DISCARD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">endTransformFeedback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TransformFeedbackRangeBinding <span class=\"token operator\">&amp;</span> binding<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tbinding<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">unbindRange</span><span class=\"token punctuation\">(</span>GL_TRANSFORM_FEEDBACK_BUFFER<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">endTransformFeedback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">endTransformFeedback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>TransformFeedbackRangeBinding<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> bindings<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> binding <span class=\"token operator\">:</span> bindings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbinding<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">unbindRange</span><span class=\"token punctuation\">(</span>GL_TRANSFORM_FEEDBACK_BUFFER<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">endTransformFeedback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">endTransformFeedback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> TransformFeedbackBaseBinding <span class=\"token operator\">&amp;</span> binding<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tbinding<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">unbindBase</span><span class=\"token punctuation\">(</span>GL_TRANSFORM_FEEDBACK_BUFFER<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">endTransformFeedback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">endTransformFeedback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>TransformFeedbackBaseBinding<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> bindings<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span> binding <span class=\"token operator\">:</span> bindings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbinding<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">unbindBase</span><span class=\"token punctuation\">(</span>GL_TRANSFORM_FEEDBACK_BUFFER<span class=\"token punctuation\">,</span> binding<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">endTransformFeedback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> !defined(TARGET_OPENGLES) &amp;&amp; defined(glDispatchCompute)</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">dispatchCompute</span><span class=\"token punctuation\">(</span>GLuint x<span class=\"token punctuation\">,</span> GLuint y<span class=\"token punctuation\">,</span> GLuint z<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">glDispatchCompute</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniformTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofBaseHasTexture<span class=\"token operator\">&amp;</span> img<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> textureLocation<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setUniformTexture</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">getTexture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> textureLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniformTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> textureTarget<span class=\"token punctuation\">,</span> GLint textureID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> textureLocation<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">glActiveTexture</span><span class=\"token punctuation\">(</span>GL_TEXTURE0 <span class=\"token operator\">+</span> textureLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ofIsGLProgrammableRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">glEnable</span><span class=\"token punctuation\">(</span>textureTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glBindTexture</span><span class=\"token punctuation\">(</span>textureTarget<span class=\"token punctuation\">,</span> textureID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glDisable</span><span class=\"token punctuation\">(</span>textureTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">glBindTexture</span><span class=\"token punctuation\">(</span>textureTarget<span class=\"token punctuation\">,</span> textureID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">setUniform1i</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> textureLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glActiveTexture</span><span class=\"token punctuation\">(</span>GL_TEXTURE0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniformTexture</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofTexture<span class=\"token operator\">&amp;</span> tex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> textureLocation<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tofTextureData texData <span class=\"token operator\">=</span> tex<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glActiveTexture</span><span class=\"token punctuation\">(</span>GL_TEXTURE0 <span class=\"token operator\">+</span> textureLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">ofIsGLProgrammableRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">glEnable</span><span class=\"token punctuation\">(</span>texData<span class=\"token punctuation\">.</span>textureTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glBindTexture</span><span class=\"token punctuation\">(</span>texData<span class=\"token punctuation\">.</span>textureTarget<span class=\"token punctuation\">,</span> texData<span class=\"token punctuation\">.</span>textureID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>texData<span class=\"token punctuation\">.</span>bufferId <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">glTexBuffer</span><span class=\"token punctuation\">(</span>GL_TEXTURE_BUFFER<span class=\"token punctuation\">,</span> texData<span class=\"token punctuation\">.</span>glInternalFormat<span class=\"token punctuation\">,</span> texData<span class=\"token punctuation\">.</span>bufferId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t\t<span class=\"token function\">glDisable</span><span class=\"token punctuation\">(</span>texData<span class=\"token punctuation\">.</span>textureTarget<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">glBindTexture</span><span class=\"token punctuation\">(</span>texData<span class=\"token punctuation\">.</span>textureTarget<span class=\"token punctuation\">,</span> texData<span class=\"token punctuation\">.</span>textureID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>texData<span class=\"token punctuation\">.</span>bufferId <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">glTexBuffer</span><span class=\"token punctuation\">(</span>GL_TEXTURE_BUFFER<span class=\"token punctuation\">,</span> texData<span class=\"token punctuation\">.</span>glInternalFormat<span class=\"token punctuation\">,</span> texData<span class=\"token punctuation\">.</span>bufferId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">setUniform1i</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> textureLocation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glActiveTexture</span><span class=\"token punctuation\">(</span>GL_TEXTURE0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform1i</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform1i</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform2i</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform2i</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform3i</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform3i</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform4i</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v4<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> \t<span class=\"token function\">glUniform4i</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v1<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform1f</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform2f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v2<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform2f</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform3f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v3<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform3f</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v4<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform4f</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform2f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setUniform2f</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform3f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setUniform3f</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofFloatColor <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform1iv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform1iv</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform2iv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform2iv</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform3iv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform3iv</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform4iv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform4iv</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform1fv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform1fv</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform2fv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform2fv</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform3fv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform3fv</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniform4fv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniform4fv</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniforms</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofParameterGroup <span class=\"token operator\">&amp;</span> parameters<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>parameters<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setUniform1i</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setUniform1f</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setUniform2f</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setUniform3f</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec4<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec4<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span>ofVec2f<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setUniform2f</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span>ofVec3f<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setUniform3f</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameter<span class=\"token operator\">&lt;</span>ofVec4f<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setUniform4f</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getEscapedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>cast<span class=\"token operator\">&lt;</span>glm<span class=\"token operator\">::</span>vec4<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>ofParameterGroup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">setUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofParameterGroup<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span>parameters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniformMatrix3f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat3 <span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniformMatrix3fv</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> GL_FALSE<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span><span class=\"token function\">value_ptr</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setUniformMatrix4f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> loc <span class=\"token operator\">=</span> <span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loc <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">glUniformMatrix4fv</span><span class=\"token punctuation\">(</span>loc<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> GL_FALSE<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span><span class=\"token function\">value_ptr</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute1s</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> v1<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib1s</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute2s</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> v2<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib2s</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute3s</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> v3<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib3s</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute4s</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> v3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">short</span> v4<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib4s</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute1f</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v1<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib1f</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute2f</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v2<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib2f</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute3f</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v3<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib3f</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute4f</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> v4<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib4f</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute1fv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> GLsizei stride<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tGLint location <span class=\"token operator\">=</span> <span class=\"token function\">getAttributeLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>location <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">glVertexAttribPointer</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> GL_FLOAT<span class=\"token punctuation\">,</span> GL_FALSE<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glEnableVertexAttribArray</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute2fv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> GLsizei stride<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tGLint location <span class=\"token operator\">=</span> <span class=\"token function\">getAttributeLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>location <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">glVertexAttribPointer</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> GL_FLOAT<span class=\"token punctuation\">,</span> GL_FALSE<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glEnableVertexAttribArray</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute3fv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> GLsizei stride<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tGLint location <span class=\"token operator\">=</span> <span class=\"token function\">getAttributeLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>location <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">glVertexAttribPointer</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> GL_FLOAT<span class=\"token punctuation\">,</span> GL_FALSE<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glEnableVertexAttribArray</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute4fv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> v<span class=\"token punctuation\">,</span> GLsizei stride<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tGLint location <span class=\"token operator\">=</span> <span class=\"token function\">getAttributeLocation</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>location <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">glVertexAttribPointer</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> GL_FLOAT<span class=\"token punctuation\">,</span> GL_FALSE<span class=\"token punctuation\">,</span> stride<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glEnableVertexAttribArray</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute1d</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v1<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib1d</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute2d</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v2<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib2d</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute3d</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v3<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib3d</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">setAttribute4d</span><span class=\"token punctuation\">(</span>GLint location<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v4<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">glVertexAttrib4d</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">,</span> v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">,</span> v3<span class=\"token punctuation\">,</span> v4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nGLint ofShader<span class=\"token operator\">::</span><span class=\"token function\">getAttributeLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">glGetAttribLocation</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nGLint ofShader<span class=\"token operator\">::</span><span class=\"token function\">getUniformLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> uniformsCache<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">==</span> uniformsCache<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> it<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> GLEW_ARB_uniform_buffer_object</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nGLint ofShader<span class=\"token operator\">::</span><span class=\"token function\">getUniformBlockIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GLEW_ARB_uniform_buffer_object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> uniformBlocksCache<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">==</span> uniformBlocksCache<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> it<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader::getUniformBlockIndex\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Sorry, it looks like you can't run 'ARB_uniform_buffer_object'\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nGLint ofShader<span class=\"token operator\">::</span><span class=\"token function\">getUniformBlockBinding</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoaded<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GLEW_ARB_uniform_buffer_object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tGLint index <span class=\"token operator\">=</span> <span class=\"token function\">getUniformBlockIndex</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\tGLint blockBinding<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glGetActiveUniformBlockiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> GL_UNIFORM_BLOCK_BINDING<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>blockBinding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> blockBinding<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader::getUniformBlockBinding\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Sorry, it looks like you can't run 'ARB_uniform_buffer_object'\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">printActiveUniformBlocks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GLEW_ARB_uniform_buffer_object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tGLint numUniformBlocks <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glGetProgramiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_ACTIVE_UNIFORM_BLOCKS<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>numUniformBlocks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> numUniformBlocks <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" uniform blocks\"</span><span class=\"token punctuation\">;</span>\n\n\t\tGLint uniformBlockMaxLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glGetProgramiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_ACTIVE_UNIFORM_MAX_LENGTH<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uniformBlockMaxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tGLchar<span class=\"token operator\">*</span> uniformBlockName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> GLchar<span class=\"token punctuation\">[</span>uniformBlockMaxLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tstringstream line<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>GLint i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numUniformBlocks<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tGLsizei length<span class=\"token punctuation\">;</span>\n\t\t\tGLint blockBinding<span class=\"token punctuation\">;</span>\n\t\t\tGLsizei blockDataSize<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glGetActiveUniformBlockName</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> uniformBlockMaxLength<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>length<span class=\"token punctuation\">,</span> uniformBlockName <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glGetActiveUniformBlockiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> GL_UNIFORM_BLOCK_BINDING<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>blockBinding <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">glGetActiveUniformBlockiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> GL_UNIFORM_BLOCK_DATA_SIZE<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>blockDataSize <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tline <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" [\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tline <span class=\"token operator\">&lt;&lt;</span> uniformBlockName<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tline <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" @ index \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getUniformBlockIndex</span><span class=\"token punctuation\">(</span> uniformBlockName <span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", binding point \"</span> <span class=\"token operator\">&lt;&lt;</span> blockBinding <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", size \"</span> <span class=\"token operator\">&lt;&lt;</span> blockDataSize <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" bytes\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tline<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> uniformBlockName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader::printActiveUniformBlocks\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Sorry, it looks like you can't run 'ARB_uniform_buffer_object'\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">bindUniformBlock</span><span class=\"token punctuation\">(</span>GLuint binding<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bLoaded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>GLEW_ARB_uniform_buffer_object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tGLint index <span class=\"token operator\">=</span> <span class=\"token function\">getUniformBlockIndex</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">glUniformBlockBinding</span><span class=\"token punctuation\">(</span> program<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> binding <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader::bindUniformBlock\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Sorry, it looks like you can't run 'ARB_uniform_buffer_object'\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">printActiveUniforms</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tGLint numUniforms <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glGetProgramiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_ACTIVE_UNIFORMS<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>numUniforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> numUniforms <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" uniforms\"</span><span class=\"token punctuation\">;</span>\n\n\tGLint uniformMaxLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glGetProgramiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_ACTIVE_UNIFORM_MAX_LENGTH<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>uniformMaxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tGLint count <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tGLenum type <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tGLchar<span class=\"token operator\">*</span> uniformName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> GLchar<span class=\"token punctuation\">[</span>uniformMaxLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>GLint i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numUniforms<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstringstream line<span class=\"token punctuation\">;</span>\n\t\tGLsizei length<span class=\"token punctuation\">;</span>\n\t\tGLint location<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glGetActiveUniform</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> uniformMaxLength<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>length<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>type<span class=\"token punctuation\">,</span> uniformName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlocation <span class=\"token operator\">=</span> <span class=\"token function\">glGetUniformLocation</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> uniformName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>location <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ignore uniform blocks</span>\n\n\t\tline <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">&lt;&lt;</span> location <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tline <span class=\"token operator\">&lt;&lt;</span> uniformName<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tline <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" @ index \"</span> <span class=\"token operator\">&lt;&lt;</span> location<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> uniformName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofShader<span class=\"token operator\">::</span><span class=\"token function\">printActiveAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tGLint numAttributes <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glGetProgramiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_ACTIVE_ATTRIBUTES<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>numAttributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> numAttributes <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" attributes\"</span><span class=\"token punctuation\">;</span>\n\n\tGLint attributeMaxLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">glGetProgramiv</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> GL_ACTIVE_ATTRIBUTE_MAX_LENGTH<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>attributeMaxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tGLint count <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tGLenum type <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tGLchar<span class=\"token operator\">*</span> attributeName <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> GLchar<span class=\"token punctuation\">[</span>attributeMaxLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\tstringstream line<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>GLint i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numAttributes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tGLsizei length<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">glGetActiveAttrib</span><span class=\"token punctuation\">(</span>program<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> attributeMaxLength<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>length<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>count<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>type<span class=\"token punctuation\">,</span> attributeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tline <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" [\"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tline <span class=\"token operator\">&lt;&lt;</span> attributeName<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tline <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" @ index \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getAttributeLocation</span><span class=\"token punctuation\">(</span>attributeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofShader\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> line<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tline<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">delete</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> attributeName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nGLuint ofShader<span class=\"token operator\">::</span><span class=\"token function\">getProgram</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> program<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nGLuint ofShader<span class=\"token operator\">::</span><span class=\"token function\">getShader</span><span class=\"token punctuation\">(</span>GLenum type<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">auto</span> shader <span class=\"token operator\">=</span> shaders<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>shader<span class=\"token operator\">!=</span>shaders<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> shader<span class=\"token operator\">-</span><span class=\"token operator\">></span>second<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> other<span class=\"token punctuation\">.</span>program<span class=\"token operator\">==</span>program<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofShader<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> other<span class=\"token punctuation\">.</span>program<span class=\"token operator\">!=</span>program<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstring ofShader<span class=\"token operator\">::</span><span class=\"token function\">nameForType</span><span class=\"token punctuation\">(</span>GLenum type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> GL_VERTEX_SHADER<span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"GL_VERTEX_SHADER\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> GL_FRAGMENT_SHADER<span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"GL_FRAGMENT_SHADER\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_OPENGLES</span>\n\t\t<span class=\"token keyword\">case</span> GL_GEOMETRY_SHADER_EXT<span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"GL_GEOMETRY_SHADER_EXT\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> glDispatchCompute</span>\n\t\t<span class=\"token keyword\">case</span> GL_COMPUTE_SHADER<span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"GL_COMPUTE_SHADER\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"UNKNOWN SHADER TYPE\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n","type":"source","static":true}}],"fetch":[]}