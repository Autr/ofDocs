{"data":[{"page":{"entry":{"name":"ofPath.h","filename":"ofPath.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/graphics/ofPath.h","path":"/openframeworks/graphics/ofPath_h","route":"/openframeworks/graphics/ofPath.h","dir":"../libs/openFrameworks/graphics","ext":"h","type":"source","id":243,"parent":228,"breadcrumbs":[228,164],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofColor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofPolyline.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVboMesh.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofTessellator.h\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief ofPath is a way to create a path or multiple paths consisting of</span>\n<span class=\"token comment\" spellcheck=\"true\">/// points. It allows you to combine multiple paths consisting of points into</span>\n<span class=\"token comment\" spellcheck=\"true\">/// a single vector data object that can be drawn to the screen, manipulated</span>\n<span class=\"token comment\" spellcheck=\"true\">/// point by point, or manipulated with it's child subpaths. It is better at</span>\n<span class=\"token comment\" spellcheck=\"true\">/// representing and manipulating complex shapes than the ofPolyline and more</span>\n<span class=\"token comment\" spellcheck=\"true\">/// easily represents multiple child lines or shapes as either ofSubPath or</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofPolyline instances. By default ofPath uses ofSubPath instances. Closing</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the path automatically creates a new path:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// for( int i = 0; i &lt; 5; i++) {</span>\n<span class=\"token comment\" spellcheck=\"true\">///     // create a new ofSubPath</span>\n<span class=\"token comment\" spellcheck=\"true\">///     path.arc( i * 50 + 20, i * 50 + 20, i * 40 + 10, i * 40 + 10, 0, 360);</span>\n<span class=\"token comment\" spellcheck=\"true\">///     path.close();</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// To use ofPolyline instances, simply set the mode to POLYLINES</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// path.setMode(POLYLINES);</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofPath</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Create and remove paths and sub paths</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a new ofPath instance.</span>\n\t<span class=\"token function\">ofPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Remove all subpaths from the ofPath instance</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a new subpath, either an ofPolyline instance or an ofSubPath</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// instance. All points added after a call to ofSubPath will be done in</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the newly created subpath. Calling close() automatically calls create</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// newSubPath(), ensuring that the closed path doesn't have new points</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// added to it.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">newSubPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Close the current subpath and create a new subpath, either an</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofPolyline or ofSubPath by calling newSubPath(), ensuring that the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// closed path doesn't have new points added to it.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Sub paths</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a straight line from the current drawing position to the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// location indicated by p.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a straight line from the current drawing position to the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// location indicated by x,y.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw a straight line from the current drawing position to the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// location indicated by x,y,z.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Move the drawing position to p. This means that a subsequent calls to,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// for instance, lineTo() or curveTo() will connect the location p to the new</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// location.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Move the drawing position to x,y.z. This means that a subsequent</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// calls to, for instance, lineTo() or curveTo() will connect the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// location x,y,z to the new location.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draws a curve to p from the current drawing position</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draws a curve to x,y from the current drawing position</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draws a curve to x,y,z from the current drawing position</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a cubic bezier line from the current drawing point with the 2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// control points indicated by glm::vec3 `cp1` and `cp2`, that ends at glm::vec3</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// line.addVertex(glm::vec3(200, 400));</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// line.bezierTo(100, 100, 800, 100, 700, 400);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![polyline bezier](graphics/bezier.jpg)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The control points are shown in red.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> cp2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> cp2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a cubic bezier line from the current drawing point with the 2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// control points indicated by the coordinates cx1, cy1 and cx2, cy2,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// that ends at the coordinates x, y.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a cubic bezier line in 3D space from the current drawing point</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// with the 2 control points indicated by the coordinates cx1, cy1, cz1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and cx2, cy2, cz2, that ends at the coordinates x, y, z.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create a quadratic bezier line in 3D space from the current drawing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point with the beginning indicated by the coordinates cx1, cy1, cz1,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the control point at cx2, cy2, cz2, and that ends at the coordinates</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// x, y, z.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![Curves](graphics/curves.jpg)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">quadBezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> cp2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">quadBezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> cp2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Creates a quadratic bezier line in 2D space from the current drawing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point with the beginning indicated by the point p1, the control point</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// at p2, and that ends at the point p3.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">quadBezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Creates a quadratic bezier line in 3D space from the current drawing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point with the beginning indicated by the coordinates cx1, cy1, the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// control point at cx2, cy2, and that ends at the coordinates x, y.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">quadBezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create an arc at centre, which has the radiusX, radiusY, and begins at</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// angleBegin and ends at angleEnd. To draw a circle with a radius of 50 pixels</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// at 100, 100:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note angleBegin needs to be larger than angleEnd, i.e. 0,180 is ok,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// while 180,0 is not.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> clockwise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> clockwise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create an arc at x,y, which has the radiusX, radiusY, and begins at</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// angleBegin and ends at angleEnd. To draws a shape with a radius of 200 pixels</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// at 300, 300:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// path.moveTo(300, 300);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// path.arc( 300, 300, 200, 200, 0, 271); // note 271, not 270 for precision</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![ofPath arc](graphics/ofPath_arc.jpg)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note angleBegin needs to be larger than angleEnd, i.e. 0, 180 is ok,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// while 180,0 is not.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Create an arc at x,y,z, which has the radiusX, radiusY, and begins at</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// angleBegin and ends at angleEnd.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arcNegative</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arcNegative</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arcNegative</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arcNegative</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">triangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">triangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> z1<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> z2<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> z3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">triangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">triangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">circle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectRounded</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectRounded</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectRounded</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectRounded</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectRounded</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span>\n\t                                                        <span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span>\n\t                                                        <span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span>\n\t                                                        <span class=\"token keyword\">float</span> bottomLeftRadius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectRounded</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"token keyword\">float</span> bottomLeftRadius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectRounded</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span>\n\t                                          <span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span>\n\t                                          <span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span>\n\t                                          <span class=\"token keyword\">float</span> bottomLeftRadius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rectRounded</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span>\n                                                      <span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span>\n                                                      <span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span>\n                                                      <span class=\"token keyword\">float</span> bottomLeftRadius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Winding Mode</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the way that the points in the sub paths are connected.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OpenGL can only render convex polygons which means that any shape that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// isn't convex, i.e. that has points which are concave, going inwards,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// need to be tessellated into triangles so that OpenGL can render them.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// If you're using filled shapes with your ofPath this is done</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// automatically for you.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The possible options you can pass in are:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_POLY_WINDING_ODD</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_POLY_WINDING_NONZERO</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_POLY_WINDING_POSITIVE</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_POLY_WINDING_NEGATIVE</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_POLY_WINDING_ABS_GEQ_TWO</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setPolyWindingMode</span><span class=\"token punctuation\">(</span>ofPolyWindingMode mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the poly winding mode currently in use.</span>\n\tofPolyWindingMode <span class=\"token function\">getWindingMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Drawing Mode</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set whether the path should be drawn as wireframes or filled.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFilled</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> hasFill<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// default true</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the stroke width of the line if the ofPath is to be drawn</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// not in wireframe.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setStrokeWidth</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// default 0</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the color of the path. This affects both the line if the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// path is drawn as wireframe and the fill if the path is drawn with</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// fill. All subpaths are affected.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofColor<span class=\"token operator\">&amp;</span> color <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the color of the path. This affects both the line if the path is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// drawn as wireframe and the fill if the path is drawn with fill. All</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// subpaths are affected.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setHexColor</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> hex <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the fill color of the path. This has no affect if the path is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// drawn as wireframe.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFillColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the fill color of the path. This has no affect if the path is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// drawn as wireframe.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFillHexColor</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> hex <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the stroke color of the path. This has no affect if the path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// is drawn filled.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setStrokeColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the stroke color of the path. This has no affect if the path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// is drawn filled.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setStrokeHexColor</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> hex <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get whether the path is using a fill or not.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The default value is `true`</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isFilled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the ofColor fill of the ofPath</span>\n\tofColor <span class=\"token function\">getFillColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the stroke color of the ofPath</span>\n\tofColor <span class=\"token function\">getStrokeColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the stroke width of the ofPath</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The default value is `0</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getStrokeWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasOutline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> strokeWidth<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setCurveResolution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> curveResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getCurveResolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setCircleResolution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> circleResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getCircleResolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use setCircleResolution instead.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setArcResolution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getCircleResolution instead.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getArcResolution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setUseShapeColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> useColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">getUseShapeColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Drawing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draws the path at 0,0. Calling draw() also calls tessellate()</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draws the path at x,y. Calling draw() also calls tessellate()</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Functions</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get an ofPolyline representing the outline of the ofPath.</span>\n\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getOutline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">tessellate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> ofMesh <span class=\"token operator\">&amp;</span> <span class=\"token function\">getTessellation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.3f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use Deg/Rad versions.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use Deg/Rad versions.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Change the size of either the ofPolyline or ofSubPath instances that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the ofPath contains. These changes are non-reversible, so for instance</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// scaling by 0,0 zeros out all data.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPath <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Path Mode</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token keyword\">enum</span> Mode<span class=\"token punctuation\">{</span>\n\t\tCOMMANDS<span class=\"token punctuation\">,</span>\n\t\tPOLYLINES\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>Mode mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tMode <span class=\"token function\">getMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Path Commands</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token keyword\">struct</span> Command<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">enum</span> Type<span class=\"token punctuation\">{</span>\n\t\t\tmoveTo<span class=\"token punctuation\">,</span>\n\t\t\tlineTo<span class=\"token punctuation\">,</span>\n\t\t\tcurveTo<span class=\"token punctuation\">,</span>\n\t\t\tbezierTo<span class=\"token punctuation\">,</span>\n\t\t\tquadBezierTo<span class=\"token punctuation\">,</span>\n\t\t\tarc<span class=\"token punctuation\">,</span>\n\t\t\tarcNegative<span class=\"token punctuation\">,</span>\n\t\t\tclose\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// for close</span>\n\t\t<span class=\"token function\">Command</span><span class=\"token punctuation\">(</span>Type type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// for lineTo and curveTo</span>\n\t\t<span class=\"token function\">Command</span><span class=\"token punctuation\">(</span>Type type <span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">/// for bezierTo</span>\n\t\t<span class=\"token function\">Command</span><span class=\"token punctuation\">(</span>Type type <span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> cp2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">///for arc</span>\n\t\t<span class=\"token function\">Command</span><span class=\"token punctuation\">(</span>Type type <span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t\tType type<span class=\"token punctuation\">;</span>\n\t\tglm<span class=\"token operator\">::</span>vec3 to<span class=\"token punctuation\">;</span>\n\t\tglm<span class=\"token operator\">::</span>vec3 cp1<span class=\"token punctuation\">,</span> cp2<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> radiusY<span class=\"token punctuation\">,</span> angleBegin<span class=\"token punctuation\">,</span> angleEnd<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>Command<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>Command<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\n\tofPolyline <span class=\"token operator\">&amp;</span> <span class=\"token function\">lastPolyline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addCommand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Command <span class=\"token operator\">&amp;</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">generatePolylinesFromCommands</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// only needs to be called when path is modified externally</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">flagShapeChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// path description</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//vector&lt;ofSubPath>\t\tpaths;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>Command<span class=\"token operator\">></span> \tcommands<span class=\"token punctuation\">;</span>\n\tofPolyWindingMode \twindingMode<span class=\"token punctuation\">;</span>\n\tofColor \t\t\tfillColor<span class=\"token punctuation\">;</span>\n\tofColor\t\t\t\tstrokeColor<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span>\t\t\t\tstrokeWidth<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\t\t\t\tbFill<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\t\t\t\tbUseShapeColor<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// polyline / tessellation</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span>  polylines<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span>  tessellatedContour<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// if winding mode != ODD</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_OPENGLES</span>\n\tofMesh\t\t\t\tcachedTessellation<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\tofVboMesh\t\t\tcachedTessellation<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TARGET_EMSCRIPTEN)</span>\n\t<span class=\"token keyword\">static</span> ofTessellator tessellator<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> HAS_TLS</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">thread_local</span> ofTessellator tessellator<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\tofTessellator tessellator<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">bool</span>\t\t\t\tbHasChanged<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>\t\t\t\t\tprevCurveRes<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>\t\t\t\t\tcurveResolution<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>\t\t\t\t\tcircleResolution<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> \t\t\t\tbNeedsTessellation<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\t\t\t\tbNeedsPolylinesGeneration<span class=\"token punctuation\">;</span>\n\n\tMode\t\t\t\tmode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source","static":true}}],"fetch":[]}