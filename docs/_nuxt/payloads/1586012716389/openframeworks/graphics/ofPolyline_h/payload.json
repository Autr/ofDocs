{"data":[{"page":{"entry":{"name":"ofPolyline.h","filename":"ofPolyline.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/graphics/ofPolyline.h","path":"/openframeworks/graphics/ofPolyline_h","route":"/openframeworks/graphics/ofPolyline.h","dir":"../libs/openFrameworks/graphics","ext":"h","type":"source","id":246,"parent":228,"breadcrumbs":[228,164],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">// This include guard is not a pragma once on purpose</span>\n<span class=\"token comment\" spellcheck=\"true\">// so some IDEs are happy include this file back form the corresponding inl</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> OF_POLYLINE_H</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_POLYLINE_H</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/fwd.hpp\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;deque></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVec2f.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVec3f.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVec4f.h\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\file</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofPolyLine allows you to combine multiple points into a single vector data</span>\n<span class=\"token comment\" spellcheck=\"true\">/// object that can be drawn to the screen, manipulated point by point, and</span>\n<span class=\"token comment\" spellcheck=\"true\">/// combined with other ofPolyline instances. It is less complex than the ofPath</span>\n<span class=\"token comment\" spellcheck=\"true\">/// and generally represents a single line or vector shape rather than multiple</span>\n<span class=\"token comment\" spellcheck=\"true\">/// lines or shapes.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// You can add points to an ofPolyline by adding vertices:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// float i = 0;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// while (i &lt; TWO_PI) { // make a heart</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \tfloat r = (2-2*sin(i) + sin(i)*sqrt(abs(cos(i))) / (sin(i)+1.4)) * -80;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \tfloat x = ofGetWidth()/2 + cos(i) * r;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \tfloat y = ofGetHeight()/2 + sin(i) * r;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \tline.addVertex(ofVec2f(x,y));</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \ti+=0.005*HALF_PI*0.5;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// line.close(); // close the shape</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Or you can draw lines or curves:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// float angle = 0;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// while (angle &lt; TWO_PI ) {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \tb.curveTo(100*cos(angle), 0, 100*sin(angle));</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \tb.curveTo(300*cos(angle), 300, 300*sin(angle));</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \tangle += TWO_PI / 30;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofPolyline also includes methods to get the closest point, determine whether a</span>\n<span class=\"token comment\" spellcheck=\"true\">/// point is inside shape, and resample shapes. Along with the ofPath class, it's</span>\n<span class=\"token comment\" spellcheck=\"true\">/// the best way to draw and manipulate 2D and 3D vector graphics that you'll need</span>\n<span class=\"token comment\" spellcheck=\"true\">/// to update and manipulate frequently.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// If you use the lineTo() or curveTo() or bezierTo() functions, you move the</span>\n<span class=\"token comment\" spellcheck=\"true\">/// drawing point, so that drawing a line to 100,100 means a line from 0,0 to</span>\n<span class=\"token comment\" spellcheck=\"true\">/// 100, 100. The next line would be a line from 100,100 to wherever you go</span>\n<span class=\"token comment\" spellcheck=\"true\">/// next. Storing this position means that you can easily create continuous</span>\n<span class=\"token comment\" spellcheck=\"true\">/// drawings without difficulty.</span>\n\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofRectangle</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofPolyline_</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Constructors</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Creates an ofPolyline.</span>\n\t<span class=\"token function\">ofPolyline_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Creates an ofPolyline from a vector of ofVec2f or T objects.</span>\n\t<span class=\"token function\">ofPolyline_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> verts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">static</span> ofPolyline_ <span class=\"token function\">fromRectangle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofRectangle<span class=\"token operator\">&amp;</span> rect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\name Add and Remove Vertices</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Removes all the points from the ofPolyline.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds a point using an T at the end of the ofPolyline.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds a point using floats at the end of the ofPolyline.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add multiple points at the end of the ofPolyline using a vector of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// T objects</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \t// make a pentagon</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tfloat size = 80.f;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tfloat X1 = 0.125*sqrt(10 + 2*sqrt(5)) * size;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tfloat X2 = 0.125*sqrt(10 - 2*sqrt(5)) * size;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tfloat Y1 = 0.125*(sqrt(5) - 1) * size;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tfloat Y2 = 0.125*(sqrt(5) + 1) * size;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tvector&lt;T> verts = {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t{0, -0.5 * size, 0.f),</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t{-X1, -Y1, 0.f},</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t{-X2, Y2, 0.f},</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t{X2, Y2, 0.f},</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t\t{X1, -Y1, 0.f},</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\t};</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tofPolyline p;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tp.addVertices(verts);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addVertices</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> verts <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds multiple points at the end of the ofPolyline using a pointer to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// an array of T objects.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">addVertices</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span> verts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numverts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">insertVertex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Remove a vertex at a given index.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This function print an error and ignore the input if the index is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// invalid. When a vertex is removed, the internal caches are cleared.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param index The index of the vertex to remove.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">removeVertex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Resize the number of points in the ofPolyline to the value</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// passed in.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Access Vertices</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The number of points in the ofPolyline.</span>\n\tsize_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Allows you to access the points of the ofPolyline just like you would</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// in an array, so to make the points of a line follow the mouse</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// movement, you could do:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// line[0].set(mouseX, mouseY);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// int i = 1;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// while ( i&lt;bounds.size()) {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tfloat angle = atan2(line[i-1].y - line[i].y, line[i-1].x - line[i].x);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tbounds[i].set(bounds[i-1].x - cos(angle) * 20, bounds[i-1].y - sin(angle) * 20);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \ti++;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gets a vector of vertices that the line contains</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getVertices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typename</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Lines and Curves</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add a straight line from the last point added, or from 0,0 if no point</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// is set, to the point indicated by the T passesd in.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> to <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add a straight line from the last point added, or from 0,0 if no point</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// is set, to the point indicated by the floats x,y,z passesd in.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds an arc around the T `center` with the width of `radiusX`</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and the height of `radiusY` to the polyline.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The `angleBegin` and `angleEnd` indicate the start and end angles of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the arc in degrees measured clockwise from the x-axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The `clockwise` boolean sets the drawing direction.  Passing 'false' to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// it will draw the arc counter-clockwise.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Optionally, you can specify `circleResolution`, which is the number of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// line segments a circle would be drawn with.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// If the arc doesn't start at the same point the last vertex finished a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// straight line will be created to join both</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> clockwise<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds an arc around the T `center` with the width of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// `radiusX` and the height of `radiusY`.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The `angleBegin` and `angleEnd` indicate the start and end angles</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// of the arc in degrees measured clockwise from the x-axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Optionally, you can specify `circleResolution`, which is the number of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// line segments a circle would be drawn with. A partial arc will be</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// drawn with the same resolution: if circleResolution == 20, a half-</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// circle will be drawn with 10 segments.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// If there are already vertexes in the ofPolyline the arc will extend</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// them; a line will be created from the endmost point on the ofPolyline</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to the beginning point of the arc.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofPolyline polyline1, polyline2;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // draw an line, then an semi-circle in red</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// polyline2.lineTo(300, 50);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// T point2(450,120);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// polyline2.arc(point2,100,100,0,180);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofSetColor(ofColor::red);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// polyline2.draw();</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![Arc Example](graphics/ofpolyline_arc.jpg)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">,</span> radiusX<span class=\"token punctuation\">,</span>  radiusY<span class=\"token punctuation\">,</span>  angleBegin<span class=\"token punctuation\">,</span>  angleEnd<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  circleResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds an arc around the coordinates (`x`,`y`) with the width of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// `radiusX` and the height of `radiusY`.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The `angleBegin` and `angleEnd` indicate the start and end angles</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// of the arc in degrees measured clockwise from the x-axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Optionally, you can specify `circleResolution`, which is the number</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// of line segments a circle would be drawn with.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token function\">T</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> radiusX<span class=\"token punctuation\">,</span> radiusY<span class=\"token punctuation\">,</span> angleBegin<span class=\"token punctuation\">,</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> circleResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds an arc around the coordinates (`x`,`y`,`z`) with the width of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// `radiusX` and the height of `radiusY`.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The `angleBegin` and `angleEnd` indicate the start and end angles of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the arc in degrees measured clockwise from the x-axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Optionally, you can specify `circleResolution`, which is the number of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// line segments a circle would be drawn with.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token function\">T</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> radiusX<span class=\"token punctuation\">,</span> radiusY<span class=\"token punctuation\">,</span> angleBegin<span class=\"token punctuation\">,</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> circleResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arcNegative</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>center<span class=\"token punctuation\">,</span> radiusX<span class=\"token punctuation\">,</span> radiusY<span class=\"token punctuation\">,</span> angleBegin<span class=\"token punctuation\">,</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> circleResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arcNegative</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token function\">T</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> radiusX<span class=\"token punctuation\">,</span> radiusY<span class=\"token punctuation\">,</span> angleBegin<span class=\"token punctuation\">,</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> circleResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">arcNegative</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">arc</span><span class=\"token punctuation\">(</span><span class=\"token function\">T</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> radiusX<span class=\"token punctuation\">,</span> radiusY<span class=\"token punctuation\">,</span> angleBegin<span class=\"token punctuation\">,</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> circleResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds a curve to an T object passed in</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float angle = 0;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// while (angle &lt; TWO_PI ) {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tb.curveTo( T(100*cos(angle), 100*sin(angle)));</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tb.curveTo( T(300*cos(angle), 300*sin(angle)));</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tangle += TWO_PI / 30;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note You need at least 4 points to be able to use curveTo()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa [Catmull-Rom splines wiki](http://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds a curve to the x,y,z points passed in with the optional</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// resolution.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span> curveResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>curveResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds a cubic bezier line from the current drawing point with the 2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// control points indicated by T cp1 and cp2, that ends at T</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// line.addVertex(T(200, 400));</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// line.bezierTo(100, 100, 800, 100, 700, 400);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![polyline bezier](bezier.jpg)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The control points are shown in red.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> cp2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds a cubic bezier line from the current drawing point with the 2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// control points indicated by the coordinates cx1, cy1 and cx2, cy2,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// that ends at the coordinates x, y.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>cx1<span class=\"token punctuation\">,</span>cy1<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>cx2<span class=\"token punctuation\">,</span>cy2<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> curveResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds a cubic bezier line in 3D space from the current drawing point</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// with the 2 control points indicated by the coordinates cx1, cy1, cz1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and cx2, cy2, cz2, that ends at the coordinates x, y, z.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>cx1<span class=\"token punctuation\">,</span>cy1<span class=\"token punctuation\">,</span>cz1<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>cx2<span class=\"token punctuation\">,</span>cy2<span class=\"token punctuation\">,</span>cz2<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> curveResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds a quadratic bezier line in 3D space from the current drawing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point with the beginning indicated by the coordinates cx1, cy1, cz1,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the control point at cx2, cy2, cz2, and that ends at the coordinates</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// x, y, z.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![polyline curves](graphics/curves.png)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">quadBezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds a quadratic bezier line in 2D space from the current drawing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point with the beginning indicated by the point p1, the control point</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// at p2, and that ends at the point p3.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">quadBezierTo</span><span class=\"token punctuation\">(</span>  <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> p3<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span> curveResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">quadBezierTo</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span>curveResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Adds a quadratic bezier line in 2D space from the current drawing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point with the beginning indicated by the coordinates cx1, cy1, the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// control point at cx2, cy2, and that ends at the coordinates x, y.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">quadBezierTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">quadBezierTo</span><span class=\"token punctuation\">(</span>cx1<span class=\"token punctuation\">,</span>cy1<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cx2<span class=\"token punctuation\">,</span>cy2<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>curveResolution<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Smoothing and Resampling</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gets a smoothed version of the ofPolyline.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// `smoothingSize` is the size of the smoothing window. So if</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// `smoothingSize` is 2, then 2 points from the left, 1 in the center,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and 2 on the right (5 total) will be used for smoothing each point.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// `smoothingShape` describes whether to use a triangular window (0) or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// box window (1) or something in between (for example, .5).</span>\n\tofPolyline_ <span class=\"token function\">getSmoothed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> smoothingSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> smoothingShape <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Resamples the line based on the spacing passed in. The larger the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// spacing, the more points will be eliminated.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// line.draw();</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofTranslate(400, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// line.getResampledBySpacing(100).draw();</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![polyline resample](graphics/resample.jpg)</span>\n\tofPolyline_ <span class=\"token function\">getResampledBySpacing</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> spacing<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Resamples the line based on the count passed in. The lower the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// count passed in, the more points will be eliminated.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This doesn't add new points to the line.</span>\n\tofPolyline_ <span class=\"token function\">getResampledByCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Simplifies the polyline, removing un-necessary vertices.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param tolerance determines how dis-similar points need to be to stay in the line.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Higher tolerance means more points removed, lower tolerance means less</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// points removed.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">simplify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.3f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Transform polyline</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use Deg/Rad versions.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateDeg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use Deg/Rad versions.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2<span class=\"token operator\">&amp;</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Change the size of the ofPolyline</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// These changes are non-reversible, so for instance</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// scaling by 0,0 zeros out all data.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Polyline State</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Closes the ofPolyline, meaning that all the vertices will be linked</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and can be \"walked\".</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Closes the ofPolyline, meaning that all the vertices will be linked</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and can be \"walked\".</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setClosed</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">bool</span> tf <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isClosed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns whether the vertices within the line have changed.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">hasChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">flagHasChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Geometric Functions</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Tests whether the x,y coordinates are within a closed ofPolyline.</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">inside</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofPolyline_ <span class=\"token operator\">&amp;</span> polyline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Tests whether the x,y coordinates are within a closed ofPolyline.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">inside</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Tests whether the T is within a closed ofPolyline.</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">inside</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofPolyline_ <span class=\"token operator\">&amp;</span> polyline<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Tests whether the T is within a closed ofPolyline.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">inside</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the bounding box of the polyline , taking into account</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// all the points to determine the extents of the polyline.</span>\n\tofRectangle <span class=\"token function\">getBoundingBox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gets the size of the perimeter of the polyline, good for</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// determining length of the line, rather than just the bounding box</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// shape.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getPerimeter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gets the precise area bounded by the line</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the center of the area bounded by the line</span>\n\tT <span class=\"token function\">getCentroid2D</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Gets the point on the line closest to the target. You can also</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// optionally pass a pointer to/address of an unsigned int to get the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// index of the closest vertex</span>\n\tT <span class=\"token function\">getClosestPoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nearestIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Other Functions</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get (interpolated) index at given length along the path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Includes info on percentage along segment, e.g. `ret=5.75` =></span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 75% along the path between 5th and 6th points</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getIndexAtLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get (interpolated) index at given percentage along the path</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Includes info on percentage along segment, e.g. `ret=5.75`</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// => 75% along the path between 5th and 6th points</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getIndexAtPercent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get length along path at index</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getLengthAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get length along path at interpolated index (e.g. `f=5.75` => 75% along</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the path between 5th and 6th points)</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getLengthAtIndexInterpolated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> findex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get point long the path at a given length (e.g. `f=150` => 150</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// units along the path)</span>\n\tT <span class=\"token function\">getPointAtLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get point along the path at a given percentage (e.g. `f=0.25`</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// => 25% along the path)</span>\n\tT <span class=\"token function\">getPointAtPercent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> f<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get point along the path at interpolated index (e.g. `f=5.75` =></span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 75% along the path between 5th and 6th points)</span>\n\tT <span class=\"token function\">getPointAtIndexInterpolated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> findex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get angle (degrees) of the path at index</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use Deg/Rad versions.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getAngleAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get angle (degrees) at interpolated index (interpolated between</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// neighboring indices)</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use Deg/Rad versions.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getAngleAtIndexInterpolated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> findex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get rotation vector at index (magnitude is sine of angle)</span>\n\tT <span class=\"token function\">getRotationAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get rotation vector at interpolated index</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (interpolated between neighboring indices) (magnitude is sine of angle)</span>\n\tT <span class=\"token function\">getRotationAtIndexInterpolated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> findex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get angle (degrees) of the path at index</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getDegreesAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get angle (degrees) at interpolated index (interpolated between</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// neighboring indices)</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getDegreesAtIndexInterpolated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> findex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get angle (degrees) of the path at index</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getRadiansAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get angle (degrees) at interpolated index (interpolated between</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// neighboring indices)</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">getRadiansAtIndexInterpolated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> findex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get tangent vector at index</span>\n\tT <span class=\"token function\">getTangentAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get tangent vector at interpolated index</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (interpolated between neighboring indices)</span>\n\tT <span class=\"token function\">getTangentAtIndexInterpolated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> findex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get normal vector at index</span>\n\tT <span class=\"token function\">getNormalAtIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get normal vector at interpolated index</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (interpolated between neighboring indices)</span>\n\tT <span class=\"token function\">getNormalAtIndexInterpolated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> findex<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get wrapped index depending on whether poly is closed or not</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">getWrappedIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// used for calculating the normals</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setRightVector</span><span class=\"token punctuation\">(</span>T v <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tT <span class=\"token function\">getRightVector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Drawing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Draw the line using the current renderer</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setCircleResolution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">wrapAngle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angleRad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> points<span class=\"token punctuation\">;</span>\n\tT rightVector<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// cache</span>\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> lengths<span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// cumulative lengths, stored per point (lengths[n] is the distance to the n'th point, zero based)</span>\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> tangents<span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// tangent at vertex, stored per point</span>\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> normals<span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">//</span>\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> rotations<span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// rotation axes between adjacent segments, stored per point (cross product)</span>\n\t<span class=\"token keyword\">mutable</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> angles<span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// angle (rad) between adjacent segments, stored per point (asin(cross product))</span>\n\t<span class=\"token keyword\">mutable</span> T centroid2D<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">mutable</span> <span class=\"token keyword\">float</span> area<span class=\"token punctuation\">;</span>\n\n\n\tstd<span class=\"token operator\">::</span>deque<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> curveVertices<span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> circlePoints<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> bClosed<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> bHasChanged<span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// public API has access to this</span>\n\t<span class=\"token keyword\">mutable</span> <span class=\"token keyword\">bool</span> bCacheIsDirty<span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// used only internally, no public API to read</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">updateCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bForceUpdate <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// given an interpolated index (e.g. 5.75) return neighboring indices and interolation factor (e.g. 5, 6, 0.75)</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">getInterpolationParams</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> findex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>i1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>i2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">calcData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> T <span class=\"token operator\">&amp;</span>tangent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>angle<span class=\"token punctuation\">,</span> T <span class=\"token operator\">&amp;</span>rotation<span class=\"token punctuation\">,</span> T <span class=\"token operator\">&amp;</span>normal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofPolyline.inl\"</span></span>\n\n<span class=\"token keyword\">using</span> ofPolyline <span class=\"token operator\">=</span> ofPolyline_<span class=\"token operator\">&lt;</span>ofDefaultVertexType<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Determine if an (x,y) coordinate is within the polygon defined by a vector of glm::vec3s.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param x The x dimension of the coordinate.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param y The y dimension of the coordinate.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param polygon a vector of glm::vec3s defining a polygon.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if the point defined by the coordinates is enclosed, false otherwise.</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofInsidePoly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> polygon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofPolyline_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">inside</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span> ofPolyline_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>polygon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Determine if an glm::vec3 is within the polygon defined by a vector of glm::vec3s.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param p A point to check.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\param poly A vector of glm::vec3s defining a polygon.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if the glm::vec3 is enclosed, false otherwise.</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">ofInsidePoly</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> poly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofPolyline_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">inside</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> ofPolyline_<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>poly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n","type":"source","static":true}}],"fetch":[]}