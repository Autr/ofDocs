{"data":[{"page":{"entry":{"name":"ofPixels.h","filename":"ofPixels.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/graphics/ofPixels.h","path":"/openframeworks/graphics/ofPixels_h","route":"/openframeworks/graphics/ofPixels.h","dir":"../libs/openFrameworks/graphics","ext":"h","type":"source","id":245,"parent":228,"breadcrumbs":[228,164],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofColor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMath.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;limits></span></span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\file</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofPixels is an object for working with blocks of pixels, those pixels can</span>\n<span class=\"token comment\" spellcheck=\"true\">/// be copied from an image that you've loaded, something that you've drawn</span>\n<span class=\"token comment\" spellcheck=\"true\">/// using ofGraphics, or a ofVideoGrabber instance.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// You can create an image from pixels, using on ofPixels object like so:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofPixels p;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofLoadImage(p, \"pathToImage.jpg\");</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofPixels represents pixels data on the CPU as opposed to an ofTexture</span>\n<span class=\"token comment\" spellcheck=\"true\">/// which represents pixel data on the GPU. They can easily be made inter-</span>\n<span class=\"token comment\" spellcheck=\"true\">/// operational though:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofTexture tex;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // do some stuff with tex</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofPixels pix;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// tex.readToPixels(pix); // now all the pixels from tex are in pix</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// You can access the pixels in an ofPixels object with the `[]` operator.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofPixels pix;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // put some stuff in the pixels</span>\n<span class=\"token comment\" spellcheck=\"true\">/// size_t i = 0;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// while( i &lt; pix.size()) {</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \tchar c = pix[i];</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \ti++;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// You can think of the ofPixels as the CPU side representation of pixel data</span>\n<span class=\"token comment\" spellcheck=\"true\">/// that can be sent to the GPU as an ofTexture object. To draw pixels, you</span>\n<span class=\"token comment\" spellcheck=\"true\">/// need to put them into an ofTexture and to manipulate an ofTextures pixel</span>\n<span class=\"token comment\" spellcheck=\"true\">/// data you need an ofPixels object.</span>\n\n\n<span class=\"token keyword\">enum</span> ofInterpolationMethod <span class=\"token punctuation\">{</span>\n\tOF_INTERPOLATE_NEAREST_NEIGHBOR <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\tOF_INTERPOLATE_BILINEAR\t\t\t<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\tOF_INTERPOLATE_BICUBIC\t\t\t<span class=\"token operator\">=</span><span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Used to represent the available pixel formats.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofPixels</span>\n<span class=\"token keyword\">enum</span> ofPixelFormat<span class=\"token operator\">:</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A single-channel pixel, typically used for greyscale images.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This has 1 channel and a type-dependent number of bits per-pixel.</span>\n\tOF_PIXELS_GRAY <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A single-channel pixel with an alpha channel.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This has 2 channels and a type-dependent number of bits per-pixel.</span>\n\tOF_PIXELS_GRAY_ALPHA <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief An RGB pixel with no alpha channel.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This has 3 channels and a type-dependent number of bits per-pixel.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.fourcc.org/rgb.php#BI_RGB</span>\n\tOF_PIXELS_RGB<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A pixel used for color data with a blue/green/red channel order.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This has 3 channels and a type-dependent number of bits per-pixel.</span>\n\tOF_PIXELS_BGR<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief An RGBA pixel. This is typically used for color with transparency.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This has 4 channels and a type-dependent number of bits per-pixel.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.fourcc.org/rgb.php#RGBA</span>\n\tOF_PIXELS_RGBA<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A pixel used for color/transparency with a blue/green/red/alpha channel order.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This has 4 channels and a type-dependent number of bits per-pixel.</span>\n\tOF_PIXELS_BGRA<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// \\brief A 16-bit color pixel with 5-bit red and blue channels and a 6-bit green channel.</span>\n\tOF_PIXELS_RGB565<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A 12-bit YUV 4:2:0 pixel with an interleaved U/V plane.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// YUV 4:2:0 image with a plane of 8-bit Y samples followed by an</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// interleaved U/V plane containing 8-bit 2x2 subsampled color difference</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// samples.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.fourcc.org/yuv.php#NV12</span>\n\tOF_PIXELS_NV12<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A 12-bit YUV 4:2:0 pixel with an interleaved V/U plane.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// YUV 4:2:0 image with a plane of 8-bit Y samples followed by an</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// interleaved V/U plane containing 8-bit 2x2 subsampled chroma samples.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The same as NV12 except the interleave order of U and V is reversed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.fourcc.org/yuv.php#NV21</span>\n\tOF_PIXELS_NV21<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A 12-bit YUV NxM Y plane followed by (N/2)x(M/2) V and U planes.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.fourcc.org/yuv.php#YV12</span>\n\tOF_PIXELS_YV12<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A 12-bit YUV format similar to ::OF_PIXELS_YV12, but with U &amp; V reversed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Note that IYUV and I420 appear to be identical.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.fourcc.org/yuv.php#IYUV</span>\n\tOF_PIXELS_I420<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A 16-bit YUV 4:2:2 format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.fourcc.org/yuv.php#YUY2</span>\n\tOF_PIXELS_YUY2<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A 16-bit YUV 4:2:2 format.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa http://www.fourcc.org/yuv.php#UYVY</span>\n\tOF_PIXELS_UYVY<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A single channel pixel, typically used for the luma component of YUV.</span>\n\tOF_PIXELS_Y<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A single channel pixel, typically used (with V) for the chroma component of YUV.</span>\n\tOF_PIXELS_U<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A single channel pixel, typically used (with U) for the chroma component of YUV.</span>\n\tOF_PIXELS_V<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A two channel pixel, with U first, representing both chroma components of YUV.</span>\n\tOF_PIXELS_UV<span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A two channel pixel, with V first, representing both chroma components of YUV.</span>\n\tOF_PIXELS_VU<span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This is a placeholder to indicate the last valid enum.</span>\n\tOF_PIXELS_NUM_FORMATS<span class=\"token punctuation\">,</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This indicates an unknown pixel type.</span>\n\tOF_PIXELS_UNKNOWN<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief This indicates an unknown, native pixel type.</span>\n\tOF_PIXELS_NATIVE<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_PIXELS_MONO OF_PIXELS_GRAY</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_PIXELS_R OF_PIXELS_GRAY</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_PIXELS_RG OF_PIXELS_GRAY_ALPHA</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> T<span class=\"token operator\">></span>\nstd<span class=\"token operator\">::</span>string <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\nstd<span class=\"token operator\">::</span>string <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixelFormat <span class=\"token operator\">&amp;</span> pixelType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">enum</span> ofImageType<span class=\"token operator\">:</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A class representing a collection of pixels.</span>\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofPixels_</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Construction And Allocation</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t<span class=\"token function\">ofPixels_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">~</span><span class=\"token function\">ofPixels_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofPixels_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofPixels_</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\n\t<span class=\"token function\">ofPixels_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocates space for pixel data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Width of pixel array</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Height of pixel array</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param channels Number of channels per pixel</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> size_t channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocates space for pixel data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The pixelFormat can be one of the following:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_PIXELS_RGB</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_PIXELS_RGBA</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_PIXELS_BGRA</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_PIXELS_MONO</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Width of pixel array</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Height of pixel array</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pixelFormat ofPixelFormat defining number of channels per pixel</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allocates space for pixel data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The imageType can be one of the following:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_IMAGE_GRAYSCALE</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_IMAGE_COLOR</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_IMAGE_COLOR_ALPHA</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w Width of pixel array</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h Height of pixel array</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param imageType ofImageType defining number of channels per pixel</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofImageType imageType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get whether memory has been allocated for an ofPixels object or not</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Many operations like copying pixels, etc, automatically allocate</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the memory needed, but it's sometimes good to check.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Clear all the data from the ofPixels objects.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// After calling this you'll need to allocate()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the ofPixels object again to use it.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\n\tofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Set Pixel Data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>PixelType val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>size_t channel<span class=\"token punctuation\">,</span>PixelType val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> newPixels<span class=\"token punctuation\">,</span>size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> size_t channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> newPixels<span class=\"token punctuation\">,</span>size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> newPixels<span class=\"token punctuation\">,</span>size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofImageType type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFromExternalPixels</span><span class=\"token punctuation\">(</span>PixelType <span class=\"token operator\">*</span> newPixels<span class=\"token punctuation\">,</span>size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> size_t channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFromExternalPixels</span><span class=\"token punctuation\">(</span>PixelType <span class=\"token operator\">*</span> newPixels<span class=\"token punctuation\">,</span>size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFromAlignedPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> newPixels<span class=\"token punctuation\">,</span> size_t width<span class=\"token punctuation\">,</span> size_t height<span class=\"token punctuation\">,</span> size_t channels<span class=\"token punctuation\">,</span> size_t stride<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFromAlignedPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> newPixels<span class=\"token punctuation\">,</span> size_t width<span class=\"token punctuation\">,</span> size_t height<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">,</span> size_t stride<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief used to copy i420 pixels from gstreamer when (width % 4) != 0</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setFromAlignedPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> newPixels<span class=\"token punctuation\">,</span> size_t width<span class=\"token punctuation\">,</span> size_t height<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>size_t<span class=\"token operator\">></span> strides<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> pix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Modify Existing Data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Crop the pixels to a new width and height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// As a word of caution this reallocates memory and can be a bit</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// expensive if done a lot.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">crop</span><span class=\"token punctuation\">(</span>size_t x<span class=\"token punctuation\">,</span> size_t y<span class=\"token punctuation\">,</span> size_t width<span class=\"token punctuation\">,</span> size_t height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Crop the pixels into the ofPixels reference passed in by `toPix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// at the `x` and `y` and width the new width and height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// As a word of caution this reallocates memory and can be a bit</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// expensive if done a lot.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">cropTo</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>toPix<span class=\"token punctuation\">,</span> size_t x<span class=\"token punctuation\">,</span> size_t y<span class=\"token punctuation\">,</span> size_t width<span class=\"token punctuation\">,</span> size_t height<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// crop to a new width and height, this reallocates memory.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotate90</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> nClockwiseRotations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">rotate90To</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nClockwiseRotations<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">mirrorTo</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> dst<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vertically<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> horizontal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Mirror the pixels across the vertical and/or horizontal axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param vertically Set to true to mirror vertically</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param horizontal Set to true to mirror horizontal</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">mirror</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> vertically<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> horizontal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Resize the ofPixels instance to the dstHeight and dstWidth.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The options for the interpolation methods are as follows:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_INTERPOLATE_NEAREST_NEIGHBOR</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_INTERPOLATE_BILINEAR</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_INTERPOLATE_BICUBIC</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size_t dstWidth<span class=\"token punctuation\">,</span> size_t dstHeight<span class=\"token punctuation\">,</span> ofInterpolationMethod interpMethod<span class=\"token operator\">=</span>OF_INTERPOLATE_NEAREST_NEIGHBOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Resize the ofPixels instance to the size of the ofPixels object passed in dst.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The options for the interpolation methods are as follows:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_INTERPOLATE_NEAREST_NEIGHBOR</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_INTERPOLATE_BILINEAR</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     OF_INTERPOLATE_BICUBIC</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">resizeTo</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> dst<span class=\"token punctuation\">,</span> ofInterpolationMethod interpMethod<span class=\"token operator\">=</span>OF_INTERPOLATE_NEAREST_NEIGHBOR<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Paste the ofPixels object into another ofPixels object at the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// specified index, copying data from the ofPixels that the method is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// being called on to the ofPixels object at `&amp;dst`. If the data being</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// copied doesn't fit into the destination then the image is cropped.</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">pasteInto</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>dst<span class=\"token punctuation\">,</span> size_t x<span class=\"token punctuation\">,</span> size_t y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">blendInto</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>dst<span class=\"token punctuation\">,</span> size_t x<span class=\"token punctuation\">,</span> size_t y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Swaps the R and B channels of an</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// image, leaving the G and A channels as is.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">swapRgb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Pixels Access</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Retrieves pixel data from the ofPixel object.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A raw pointer to the pixel data.</span>\n\tPixelType <span class=\"token operator\">*</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getData instead\"</span><span class=\"token punctuation\">,</span>PixelType <span class=\"token operator\">*</span> <span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use getData instead\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> <span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the pixel index at a x,y position</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofColor yellow = ofColor::yellow;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// size_t ind = pix.getPixelIndex(mouseX, mouseY);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// pix.setPixel(ind, yellow);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\tsize_t <span class=\"token function\">getPixelIndex</span><span class=\"token punctuation\">(</span>size_t x<span class=\"token punctuation\">,</span> size_t y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the color at a x,y position</span>\n\tofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>size_t x<span class=\"token punctuation\">,</span> size_t y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the color at a specific index</span>\n\tofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the color of the pixel at the x,y location</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>size_t x<span class=\"token punctuation\">,</span> size_t y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the color of the pixel at a specific index</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>size_t index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the color of all pixels</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Provides access to each channel of each pixel. If you have RGB pixel</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// data, then you'll have 3 values for each pixel, if you have RGBA,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// you'll have 4</span>\n\t<span class=\"token keyword\">const</span> PixelType<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tPixelType<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Getters</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the width of the pixel array.</span>\n\tsize_t <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the height of the pixel array.</span>\n\tsize_t <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the number of bytes per pixel</span>\n\tsize_t <span class=\"token function\">getBytesPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get number of bits per pixel</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// If you have RGB pixel data, this will return 24, if you have RGBA,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// you'll have 32, if you have grayscale, this will return 8.</span>\n\tsize_t <span class=\"token function\">getBitsPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get how large each channel of a pixel is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofPixels objects that store pixel data as unsigned char are smaller</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// than  ofPixels objects that store pixel data as floats.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note This returns bytes, not bits, so you should see ofPixels&lt;float></span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// return 4 and ofPixels&lt;unsigned char> return 1.</span>\n\tsize_t <span class=\"token function\">getBytesPerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get how large each channel of a pixels is.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofPixels objects that store pixel data as `unsigned char` are smaller</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// than ofPixels objects that store pixel data as 'float`.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note This returns bits, not bytes, so you should see ofPixels&lt;float></span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// return 32 and ofPixels&lt;unsigned char> return 8.</span>\n\tsize_t <span class=\"token function\">getBitsPerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tsize_t <span class=\"token function\">getBytesStride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the number of channels that the ofPixels object contains.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// RGB is 3 channels, RGBA is 4, and grayscale is 1.</span>\n\tsize_t <span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tsize_t <span class=\"token function\">getTotalBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tsize_t <span class=\"token function\">getNumPlanes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">getPlane</span><span class=\"token punctuation\">(</span>size_t plane<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get all values of one channel</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// For instance, the Red pixel values, from the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofPixels object, this gives you a grayscale representation of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// specific channel</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     // Get red pixels</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tofPixels rpix = pix.getChannel(0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     // Get green pixels</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tofPixels gpix = pix.getChannel(1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     // Get blue pixels</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tofPixels bpix = pix.getChannel(2);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\tofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span>size_t channel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\tofPixelFormat <span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the number of values that the ofPixels object</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// contains, so an RGB data 400x400 would be 480,000, whereas RGBA data</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// of the same dimensions would be 640,000.</span>\n\tsize_t <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the type of the image</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns One of the following types: `OF_IMAGE_GRAYSCALE`,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// `OF_IMAGE_COLOR`, `OF_IMAGE_COLOR_ALPHA`</span>\n\tofImageType <span class=\"token function\">getImageType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Setters</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set all the pixel data for a single channel, for instance, the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Red pixel values, from an ofPixels object assumed to be a grayscale</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// representation of the data that should go into that one channel.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span>size_t channel<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> channelPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Changes the image type for the ofPixels object</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param imageType Can be one of the following: OF_IMAGE_GRAYSCALE, OF_IMAGE_COLOR, OF_IMAGE_COLOR_ALPHA</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setImageType</span><span class=\"token punctuation\">(</span>ofImageType imageType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">setNumChannels</span><span class=\"token punctuation\">(</span>size_t numChannels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> size_t <span class=\"token function\">pixelBitsFromPixelFormat</span><span class=\"token punctuation\">(</span>ofPixelFormat format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> size_t <span class=\"token function\">bytesFromPixelFormat</span><span class=\"token punctuation\">(</span>size_t w<span class=\"token punctuation\">,</span> size_t h<span class=\"token punctuation\">,</span> ofPixelFormat format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Iterator</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token keyword\">typedef</span> PixelType <span class=\"token operator\">*</span> iterator<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> const_iterator<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> PixelType <span class=\"token operator\">*</span> reverse_iterator<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> const_reverse_iterator<span class=\"token punctuation\">;</span>\n\titerator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\titerator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconst_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tconst_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\treverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\treverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tconst_reverse_iterator <span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tconst_reverse_iterator <span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n    <span class=\"token keyword\">struct</span> ConstPixel<span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> std<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>forward_iterator_tag<span class=\"token punctuation\">,</span>ConstPixel<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">ConstPixel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> pixel<span class=\"token punctuation\">,</span> size_t bytesPerPixel<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> ConstPixel<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> ConstPixel<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        ConstPixel<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ConstPixel <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ConstPixel <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        ConstPixel <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        ConstPixel <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>ConstPixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>ConstPixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t idx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        size_t <span class=\"token function\">getComponentsPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        ofPixelFormat <span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> pixel<span class=\"token punctuation\">;</span>\n        size_t componentsPerPixel<span class=\"token punctuation\">;</span>\n        ofPixelFormat pixelFormat<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> Pixel<span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> std<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>forward_iterator_tag<span class=\"token punctuation\">,</span>Pixel<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">Pixel</span><span class=\"token punctuation\">(</span>PixelType <span class=\"token operator\">*</span> pixel<span class=\"token punctuation\">,</span> size_t bytesPerPixel<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> Pixel<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> Pixel<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        Pixel<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Pixel <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Pixel<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Pixel <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Pixel <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        Pixel <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        Pixel <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>Pixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>Pixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        Pixel <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Pixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Pixel <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ConstPixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        PixelType <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t idx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tsize_t <span class=\"token function\">getComponentsPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tofPixelFormat <span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tPixelType <span class=\"token operator\">*</span> pixel<span class=\"token punctuation\">;</span>\n\t\tsize_t componentsPerPixel<span class=\"token punctuation\">;</span>\n\t\tofPixelFormat pixelFormat<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> Pixels<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">Pixels</span><span class=\"token punctuation\">(</span>PixelType <span class=\"token operator\">*</span> begin<span class=\"token punctuation\">,</span> PixelType <span class=\"token operator\">*</span> end<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">Pixels</span><span class=\"token punctuation\">(</span>Pixel begin<span class=\"token punctuation\">,</span> Pixel end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tPixel <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tPixel <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tPixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">;</span>\n\t\tPixelType <span class=\"token operator\">*</span> _end<span class=\"token punctuation\">;</span>\n\t\tsize_t componentsPerPixel<span class=\"token punctuation\">;</span>\n\t\tofPixelFormat pixelFormat<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> Line<span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> std<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>forward_iterator_tag<span class=\"token punctuation\">,</span>Line<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">,</span> size_t stride<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> size_t lineNum<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> Line<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> Line<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        Line<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Line <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Line<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Line <span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Line <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        Line <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        PixelType <span class=\"token operator\">*</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        PixelType <span class=\"token operator\">*</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tsize_t <span class=\"token function\">getLineNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">asPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">asPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tsize_t <span class=\"token function\">getStride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tPixel <span class=\"token function\">getPixel</span><span class=\"token punctuation\">(</span>size_t pixel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tPixels <span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Pixels <span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span>size_t first<span class=\"token punctuation\">,</span> size_t numPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tPixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">;</span>\n\t\tPixelType <span class=\"token operator\">*</span> _end<span class=\"token punctuation\">;</span>\n\t\tsize_t stride<span class=\"token punctuation\">;</span>\n\t\tsize_t componentsPerPixel<span class=\"token punctuation\">;</span>\n\t\tsize_t lineNum<span class=\"token punctuation\">;</span>\n\t\tofPixelFormat pixelFormat<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> Lines<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">Lines</span><span class=\"token punctuation\">(</span>PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">,</span> PixelType <span class=\"token operator\">*</span> _end<span class=\"token punctuation\">,</span> size_t stride<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> size_t lines<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Line <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        Line <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n        PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">;</span>\n\t\tPixelType <span class=\"token operator\">*</span> _end<span class=\"token punctuation\">;</span>\n\t\tsize_t stride<span class=\"token punctuation\">;</span>\n\t\tsize_t componentsPerPixel<span class=\"token punctuation\">;</span>\n\t\tsize_t lines<span class=\"token punctuation\">;</span>\n\t\tofPixelFormat pixelFormat<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> ConstPixels<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ConstPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> end<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ConstPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ConstPixel <span class=\"token operator\">&amp;</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ConstPixel <span class=\"token operator\">&amp;</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tConstPixel <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tConstPixel <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _end<span class=\"token punctuation\">;</span>\n\t\tsize_t componentsPerPixel<span class=\"token punctuation\">;</span>\n\t\tofPixelFormat pixelFormat<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> ConstLine<span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> std<span class=\"token operator\">::</span>iterator<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>forward_iterator_tag<span class=\"token punctuation\">,</span>Line<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ConstLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">,</span> size_t stride<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> size_t lineNum<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> ConstLine<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> ConstLine<span class=\"token operator\">*</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tConstLine<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tConstLine <span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tConstLine <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tConstLine <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>ConstLine <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>ConstLine <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tsize_t <span class=\"token function\">getLineNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tsize_t <span class=\"token function\">getStride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        ConstPixel <span class=\"token function\">getPixel</span><span class=\"token punctuation\">(</span>size_t pixel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tConstPixels <span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\tConstPixels <span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span>size_t first<span class=\"token punctuation\">,</span> size_t numPixels<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _end<span class=\"token punctuation\">;</span>\n\t\tsize_t stride<span class=\"token punctuation\">;</span>\n\t\tsize_t componentsPerPixel<span class=\"token punctuation\">;</span>\n\t\tsize_t lineNum<span class=\"token punctuation\">;</span>\n\t\tofPixelFormat pixelFormat<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">struct</span> ConstLines<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ConstLines</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _end<span class=\"token punctuation\">,</span> size_t stride<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> size_t lines<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tConstLine <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t\tConstLine <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _end<span class=\"token punctuation\">;</span>\n\t\tsize_t stride<span class=\"token punctuation\">;</span>\n\t\tsize_t componentsPerPixel<span class=\"token punctuation\">;</span>\n\t\tsize_t lines<span class=\"token punctuation\">;</span>\n\t\tofPixelFormat pixelFormat<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\tLine <span class=\"token function\">getLine</span><span class=\"token punctuation\">(</span>size_t line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tLines <span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Lines <span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span>size_t first<span class=\"token punctuation\">,</span> size_t numLines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tPixels <span class=\"token function\">getPixelsIter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tConstLine <span class=\"token function\">getConstLine</span><span class=\"token punctuation\">(</span>size_t line<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tConstLines <span class=\"token function\">getConstLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tConstLines <span class=\"token function\">getConstLines</span><span class=\"token punctuation\">(</span>size_t first<span class=\"token punctuation\">,</span> size_t numLines<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\tConstPixels <span class=\"token function\">getConstPixelsIter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">float</span> <span class=\"token function\">bicubicInterpolate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span>patch<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span> y3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> mom <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> mom <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tPixelType <span class=\"token operator\">*</span> pixels <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\tsize_t \twidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tsize_t \theight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//int \tchannels; // 1, 3, 4 channels per pixel (grayscale, rgb, rgba)</span>\n\tsize_t \tpixelsSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\tbAllocated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span>\tpixelsOwner <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// if set from external data don't delete it</span>\n\tofPixelFormat pixelFormat <span class=\"token operator\">=</span> OF_PIXELS_UNKNOWN<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">typedef</span> ofPixels_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> ofPixels<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> ofPixels_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> ofFloatPixels<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> ofPixels_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token operator\">></span> ofShortPixels<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">typedef</span> ofPixels<span class=\"token operator\">&amp;</span> ofPixelsRef<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> ofFloatPixels<span class=\"token operator\">&amp;</span> ofFloatPixelsRef<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> ofShortPixels<span class=\"token operator\">&amp;</span> ofShortPixelsRef<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// sorry for these ones, being templated functions inside a template i needed to do it in the .h</span>\n<span class=\"token comment\" spellcheck=\"true\">// they allow to do things like:</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">// ofPixels pix;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ofFloatPixels pixf;</span>\n<span class=\"token comment\" spellcheck=\"true\">// pix = pixf;</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\nofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofPixels_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbAllocated <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tpixelsOwner <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tpixelsSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tpixels <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\twidth <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\theight <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tpixelFormat <span class=\"token operator\">=</span> OF_PIXELS_UNKNOWN<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span> mom <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\nofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span> mom <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span><span class=\"token function\">isAllocated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>mom<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>mom<span class=\"token punctuation\">.</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> srcMax <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SrcType<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f <span class=\"token operator\">:</span> std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> dstMax <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PixelType<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f <span class=\"token operator\">:</span> std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> factor <span class=\"token operator\">=</span> dstMax <span class=\"token operator\">/</span> srcMax<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>SrcType<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// coming from float we need a special case to clamp the values</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mom<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tpixels<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofClamp</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> factor<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// everything else is a straight scaling</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mom<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tpixels<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> factor<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels <span class=\"token operator\">+</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels <span class=\"token operator\">+</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>reverse_iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_reverse_iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixels <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token function\">Pixel</span><span class=\"token punctuation\">(</span>PixelType <span class=\"token operator\">*</span> pixel<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">pixel</span><span class=\"token punctuation\">(</span>pixel<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">componentsPerPixel</span><span class=\"token punctuation\">(</span>componentsPerPixel<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">*</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tpixel <span class=\"token operator\">+</span><span class=\"token operator\">=</span> componentsPerPixel<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tPixel <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tpixel <span class=\"token operator\">-</span><span class=\"token operator\">=</span> componentsPerPixel<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tPixel <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Pixel</span><span class=\"token punctuation\">(</span>pixel <span class=\"token operator\">+</span> componentsPerPixel <span class=\"token operator\">*</span> i<span class=\"token punctuation\">,</span> componentsPerPixel<span class=\"token punctuation\">,</span> pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Pixel</span><span class=\"token punctuation\">(</span>pixel <span class=\"token operator\">-</span> componentsPerPixel <span class=\"token operator\">*</span> i<span class=\"token punctuation\">,</span> componentsPerPixel<span class=\"token punctuation\">,</span> pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tpixel <span class=\"token operator\">+</span><span class=\"token operator\">=</span> componentsPerPixel <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>Pixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixel <span class=\"token operator\">!=</span> rhs<span class=\"token punctuation\">.</span>pixel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>Pixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixel <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span>pixel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel <span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>Pixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>componentsPerPixel<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        pixel<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel <span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ConstPixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>componentsPerPixel<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        pixel<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rhs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> PixelType <span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixel<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t idx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixel<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> size_t ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token function\">getComponentsPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> componentsPerPixel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixelFormat ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixelFormat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel<span class=\"token operator\">::</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_RGB<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_BGR<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_RGBA<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_BGRA<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_GRAY<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_GRAY_ALPHA<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_RGB565<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_NV12<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_NV21<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_YV12<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_I420<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_YUY2<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_UYVY<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_Y<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_U<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_V<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_UV<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_VU<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_UNKNOWN<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"returning color not supported yet for \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" format\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixels<span class=\"token operator\">::</span><span class=\"token function\">Pixels</span><span class=\"token punctuation\">(</span>PixelType <span class=\"token operator\">*</span> begin<span class=\"token punctuation\">,</span> PixelType <span class=\"token operator\">*</span> end<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">_begin</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">_end</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">componentsPerPixel</span><span class=\"token punctuation\">(</span>componentsPerPixel<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixels<span class=\"token operator\">::</span><span class=\"token function\">Pixels</span><span class=\"token punctuation\">(</span>Pixel begin<span class=\"token punctuation\">,</span> Pixel end<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">_begin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>begin<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">_end</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">componentsPerPixel</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">.</span><span class=\"token function\">getComponentsPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixels<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Pixel</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixels<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Pixel</span><span class=\"token punctuation\">(</span>_end<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">,</span> size_t stride<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> size_t lineNum<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">_begin</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">_end</span><span class=\"token punctuation\">(</span>_begin<span class=\"token operator\">+</span>stride<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">stride</span><span class=\"token punctuation\">(</span>stride<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">componentsPerPixel</span><span class=\"token punctuation\">(</span>componentsPerPixel<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">lineNum</span><span class=\"token punctuation\">(</span>lineNum<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">*</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t_begin <span class=\"token operator\">=</span> _end<span class=\"token punctuation\">;</span>\n\t_end <span class=\"token operator\">=</span> _begin <span class=\"token operator\">+</span> stride<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">++</span>lineNum<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tLine <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t_end <span class=\"token operator\">=</span> _begin<span class=\"token punctuation\">;</span>\n\t_begin <span class=\"token operator\">=</span> _end <span class=\"token operator\">-</span> stride<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">--</span>lineNum<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tLine <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span><span class=\"token operator\">--</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line  ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>_begin<span class=\"token operator\">+</span>stride<span class=\"token operator\">*</span>i<span class=\"token punctuation\">,</span>stride<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span>lineNum<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line  ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t_begin <span class=\"token operator\">=</span> _begin<span class=\"token operator\">+</span>stride<span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n\t_end <span class=\"token operator\">=</span> _begin <span class=\"token operator\">+</span> stride<span class=\"token punctuation\">;</span>\n\tlineNum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> rhs<span class=\"token punctuation\">.</span>_begin <span class=\"token operator\">!=</span> _begin <span class=\"token operator\">||</span> rhs<span class=\"token punctuation\">.</span>_end <span class=\"token operator\">!=</span> _end <span class=\"token operator\">||</span> rhs<span class=\"token punctuation\">.</span>stride <span class=\"token operator\">!=</span> stride <span class=\"token operator\">||</span> rhs<span class=\"token punctuation\">.</span>lineNum<span class=\"token operator\">!=</span>lineNum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _begin <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span>_begin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _begin <span class=\"token operator\">></span> rhs<span class=\"token punctuation\">.</span>_begin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">>=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _begin <span class=\"token operator\">>=</span> rhs<span class=\"token punctuation\">.</span>_begin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _begin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _begin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> size_t ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">getLineNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> lineNum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">asPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> pixels<span class=\"token punctuation\">;</span>\n\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">setFromExternalPixels</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span>stride<span class=\"token operator\">/</span>componentsPerPixel<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">asPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> pixels<span class=\"token punctuation\">;</span>\n\tpixels<span class=\"token punctuation\">.</span><span class=\"token function\">setFromExternalPixels</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span>stride<span class=\"token operator\">/</span>componentsPerPixel<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> pixels<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> size_t ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">getStride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> stride<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">getPixel</span><span class=\"token punctuation\">(</span>size_t pixel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Pixel</span><span class=\"token punctuation\">(</span>_begin <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pixel<span class=\"token operator\">*</span>componentsPerPixel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> componentsPerPixel<span class=\"token punctuation\">,</span> pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixels ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Pixels</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span>_end<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixels ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line<span class=\"token operator\">::</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span>size_t first<span class=\"token punctuation\">,</span> size_t numPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Pixels</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token function\">getPixel</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">getPixel</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">+</span>numPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> componentsPerPixel<span class=\"token punctuation\">,</span> pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Lines<span class=\"token operator\">::</span><span class=\"token function\">Lines</span><span class=\"token punctuation\">(</span>PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">,</span> PixelType <span class=\"token operator\">*</span> _end<span class=\"token punctuation\">,</span> size_t stride<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> size_t lines<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">_begin</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">_end</span><span class=\"token punctuation\">(</span>_end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">stride</span><span class=\"token punctuation\">(</span>stride<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">componentsPerPixel</span><span class=\"token punctuation\">(</span>componentsPerPixel<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Lines<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span>stride<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Lines<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>_end<span class=\"token punctuation\">,</span>stride<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span>lines<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Line ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getLine</span><span class=\"token punctuation\">(</span>size_t line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Line</span><span class=\"token punctuation\">(</span>pixels<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">*</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">*</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Lines ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Lines</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>width<span class=\"token operator\">*</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Lines ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getLines</span><span class=\"token punctuation\">(</span>size_t first<span class=\"token punctuation\">,</span> size_t numLines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">Lines</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLine</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getLine</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">+</span>numLines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>width<span class=\"token operator\">*</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>numLines<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>Pixels ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getPixelsIter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">Pixels</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token function\">ConstPixel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> pixel<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">pixel</span><span class=\"token punctuation\">(</span>pixel<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">componentsPerPixel</span><span class=\"token punctuation\">(</span>componentsPerPixel<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">*</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tpixel <span class=\"token operator\">+</span><span class=\"token operator\">=</span> componentsPerPixel<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tConstPixel <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConstPixel</span><span class=\"token punctuation\">(</span>pixel <span class=\"token operator\">+</span> componentsPerPixel <span class=\"token operator\">*</span> i<span class=\"token punctuation\">,</span> componentsPerPixel<span class=\"token punctuation\">,</span> pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConstPixel</span><span class=\"token punctuation\">(</span>pixel <span class=\"token operator\">-</span> componentsPerPixel <span class=\"token operator\">*</span> i<span class=\"token punctuation\">,</span> componentsPerPixel<span class=\"token punctuation\">,</span> pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tpixel <span class=\"token operator\">+</span><span class=\"token operator\">=</span> componentsPerPixel <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span>ConstPixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixel <span class=\"token operator\">!=</span> rhs<span class=\"token punctuation\">.</span>pixel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span>ConstPixel <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixel <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span>pixel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_t idx<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixel<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> size_t ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token function\">getComponentsPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> componentsPerPixel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixelFormat ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pixelFormat<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel<span class=\"token operator\">::</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\tofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_RGB<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_BGR<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_RGBA<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_BGRA<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_GRAY<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_GRAY_ALPHA<span class=\"token operator\">:</span>\n\t\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> pixel<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_RGB565<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_NV12<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_NV21<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_YV12<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_I420<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_YUY2<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_UYVY<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_Y<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_U<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_V<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_UV<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_VU<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> OF_PIXELS_UNKNOWN<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"returning color not supported yet for \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" format\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixels<span class=\"token operator\">::</span><span class=\"token function\">ConstPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> end<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">_begin</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">_end</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">componentsPerPixel</span><span class=\"token punctuation\">(</span>componentsPerPixel<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixels<span class=\"token operator\">::</span><span class=\"token function\">ConstPixels</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ConstPixel <span class=\"token operator\">&amp;</span> begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ConstPixel <span class=\"token operator\">&amp;</span> end<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">_begin</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>begin<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">_end</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">componentsPerPixel</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">.</span><span class=\"token function\">getComponentsPerPixel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">.</span><span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixels<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConstPixel</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixels<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConstPixel</span><span class=\"token punctuation\">(</span>_end<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token function\">ConstLine</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">,</span> size_t stride<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> size_t lineNum<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">_begin</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">_end</span><span class=\"token punctuation\">(</span>_begin<span class=\"token operator\">+</span>stride<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">stride</span><span class=\"token punctuation\">(</span>stride<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">componentsPerPixel</span><span class=\"token punctuation\">(</span>componentsPerPixel<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">lineNum</span><span class=\"token punctuation\">(</span>lineNum<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">*</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">&amp;</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t_begin <span class=\"token operator\">=</span> _end<span class=\"token punctuation\">;</span>\n\t_end <span class=\"token operator\">=</span> _begin <span class=\"token operator\">+</span> stride<span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">++</span>lineNum<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tConstLine <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span><span class=\"token operator\">++</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine  ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConstLine</span><span class=\"token punctuation\">(</span>_begin<span class=\"token operator\">+</span>stride<span class=\"token operator\">*</span>i<span class=\"token punctuation\">,</span>stride<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span>lineNum<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine  ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t_begin <span class=\"token operator\">=</span> _begin<span class=\"token operator\">+</span>stride<span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n\t_end <span class=\"token operator\">=</span> _begin <span class=\"token operator\">+</span> stride<span class=\"token punctuation\">;</span>\n\tlineNum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> rhs<span class=\"token punctuation\">.</span>_begin <span class=\"token operator\">!=</span> _begin <span class=\"token operator\">||</span> rhs<span class=\"token punctuation\">.</span>_end <span class=\"token operator\">!=</span> _end <span class=\"token operator\">||</span> rhs<span class=\"token punctuation\">.</span>stride <span class=\"token operator\">!=</span> stride <span class=\"token operator\">||</span> rhs<span class=\"token punctuation\">.</span>lineNum<span class=\"token operator\">!=</span>lineNum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine <span class=\"token keyword\">const</span><span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _begin <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span>_begin <span class=\"token operator\">||</span> _end <span class=\"token operator\">&lt;</span> rhs<span class=\"token punctuation\">.</span>_end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _begin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>const_iterator ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _end<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> size_t ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token function\">getLineNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> lineNum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> size_t ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token function\">getStride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> stride<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixel ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token function\">getPixel</span><span class=\"token punctuation\">(</span>size_t pixel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ConstPixel</span><span class=\"token punctuation\">(</span>_begin <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pixel<span class=\"token operator\">*</span>componentsPerPixel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> componentsPerPixel<span class=\"token punctuation\">,</span> pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixels ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConstPixels</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span>_end<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixels ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine<span class=\"token operator\">::</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span>size_t first<span class=\"token punctuation\">,</span> size_t numPixels<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ConstPixels</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token function\">getPixel</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">getPixel</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">+</span>numPixels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> componentsPerPixel<span class=\"token punctuation\">,</span> pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLines<span class=\"token operator\">::</span><span class=\"token function\">ConstLines</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _begin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> PixelType <span class=\"token operator\">*</span> _end<span class=\"token punctuation\">,</span> size_t stride<span class=\"token punctuation\">,</span> size_t componentsPerPixel<span class=\"token punctuation\">,</span> size_t lines<span class=\"token punctuation\">,</span> ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">:</span><span class=\"token function\">_begin</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">_end</span><span class=\"token punctuation\">(</span>_end<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">stride</span><span class=\"token punctuation\">(</span>stride<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">componentsPerPixel</span><span class=\"token punctuation\">(</span>componentsPerPixel<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">lines</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">,</span><span class=\"token function\">pixelFormat</span><span class=\"token punctuation\">(</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLines<span class=\"token operator\">::</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConstLine</span><span class=\"token punctuation\">(</span>_begin<span class=\"token punctuation\">,</span>stride<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLines<span class=\"token operator\">::</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConstLine</span><span class=\"token punctuation\">(</span>_end<span class=\"token punctuation\">,</span>stride<span class=\"token punctuation\">,</span>componentsPerPixel<span class=\"token punctuation\">,</span>lines<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLine ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getConstLine</span><span class=\"token punctuation\">(</span>size_t line<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConstLine</span><span class=\"token punctuation\">(</span>pixels<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>width<span class=\"token operator\">*</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> width<span class=\"token operator\">*</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLines ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getConstLines</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConstLines</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>width<span class=\"token operator\">*</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstLines ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getConstLines</span><span class=\"token punctuation\">(</span>size_t first<span class=\"token punctuation\">,</span> size_t numLines<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ConstLines</span><span class=\"token punctuation\">(</span><span class=\"token function\">getConstLine</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getConstLine</span><span class=\"token punctuation\">(</span>first<span class=\"token operator\">+</span>numLines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>width<span class=\"token operator\">*</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>numLines<span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//----------------------------------------------------------------------</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">typename</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span>ConstPixels ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getConstPixelsIter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ConstPixels</span><span class=\"token punctuation\">(</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">getNumChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>pixelFormat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> src<span class=\"token punctuation\">,</span> ofPixels_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tsrc<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}