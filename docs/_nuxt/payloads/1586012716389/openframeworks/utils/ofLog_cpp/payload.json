{"data":[{"page":{"entry":{"name":"ofLog.cpp","filename":"ofLog.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/utils/ofLog.cpp","path":"/openframeworks/utils/ofLog_cpp","route":"/openframeworks/utils/ofLog.cpp","dir":"../libs/openFrameworks/utils","ext":"cpp","type":"source","id":305,"parent":298,"breadcrumbs":[298,164],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ofUtils.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cstdarg></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxAndroidLogChannel.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> ofLogLevel currentLogLevel <span class=\"token operator\">=</span>  OF_LOG_NOTICE<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> ofLog<span class=\"token operator\">::</span>bAutoSpace <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\nstring <span class=\"token operator\">&amp;</span> ofLog<span class=\"token operator\">::</span><span class=\"token function\">getPadding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> string <span class=\"token operator\">*</span> padding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> string<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>padding<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>ofLogLevel<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">getModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>ofLogLevel<span class=\"token operator\">></span> <span class=\"token operator\">*</span> modules <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>ofLogLevel<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>modules<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">noopDeleter</span><span class=\"token punctuation\">(</span>ofBaseLoggerChannel<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\nshared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofLog<span class=\"token operator\">::</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_ANDROID</span>\n\t<span class=\"token keyword\">static</span> shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> channel <span class=\"token operator\">=</span> shared_ptr<span class=\"token operator\">&lt;</span>ofxAndroidLogChannel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> ofxAndroidLogChannel<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>ofBaseLoggerChannel <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>noopDeleter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">elif</span> defined(TARGET_WIN32)</span>\n\t<span class=\"token keyword\">static</span> shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> channel <span class=\"token operator\">=</span> <span class=\"token function\">IsDebuggerPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> ofDebugViewLoggerChannel<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>ofBaseLoggerChannel <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>noopDeleter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> ofConsoleLoggerChannel<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>ofBaseLoggerChannel <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>noopDeleter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">static</span> shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> channel <span class=\"token operator\">=</span> shared_ptr<span class=\"token operator\">&lt;</span>ofConsoleLoggerChannel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> ofConsoleLoggerChannel<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>ofBaseLoggerChannel <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>noopDeleter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">return</span> channel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tcurrentLogLevel <span class=\"token operator\">=</span> level<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSetLogLevel</span><span class=\"token punctuation\">(</span>string module<span class=\"token punctuation\">,</span> ofLogLevel level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">getModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>module<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> level<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofLogLevel <span class=\"token function\">ofGetLogLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> currentLogLevel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofLogLevel <span class=\"token function\">ofGetLogLevel</span><span class=\"token punctuation\">(</span>string module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">getModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> currentLogLevel<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>module<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofLogToFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofLog<span class=\"token operator\">::</span><span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>make_shared<span class=\"token operator\">&lt;</span>ofFileLoggerChannel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofLogToConsole</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofLog<span class=\"token operator\">::</span><span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span>shared_ptr<span class=\"token operator\">&lt;</span>ofConsoleLoggerChannel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> ofConsoleLoggerChannel<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>ofBaseLoggerChannel <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>noopDeleter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofLogToDebugView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofLog<span class=\"token operator\">::</span><span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span>shared_ptr<span class=\"token operator\">&lt;</span>ofDebugViewLoggerChannel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> ofDebugViewLoggerChannel<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">(</span>ofBaseLoggerChannel <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>noopDeleter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofLog<span class=\"token operator\">::</span><span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tlevel <span class=\"token operator\">=</span> OF_LOG_NOTICE<span class=\"token punctuation\">;</span>\n\tmodule <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\t\t\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofLog<span class=\"token operator\">::</span><span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>ofLogLevel _level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tlevel <span class=\"token operator\">=</span> _level<span class=\"token punctuation\">;</span>\n\tmodule <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofLog<span class=\"token operator\">::</span><span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">_log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofLog<span class=\"token operator\">::</span><span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkLog</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tva_list args<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span> args<span class=\"token punctuation\">,</span> format <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>format<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span> args <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofLog<span class=\"token operator\">::</span><span class=\"token function\">setAutoSpace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> autoSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbAutoSpace <span class=\"token operator\">=</span> autoSpace<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bAutoSpace<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tofLog<span class=\"token operator\">::</span><span class=\"token function\">getPadding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tofLog<span class=\"token operator\">::</span><span class=\"token function\">getPadding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------</span>\nofLog<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// don't log if we printed in the constructor already</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bPrinted<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">_log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span>module<span class=\"token punctuation\">,</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofLog<span class=\"token operator\">::</span><span class=\"token function\">checkLog</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>module<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token function\">getModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>level <span class=\"token operator\">>=</span> currentLogLevel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>level <span class=\"token operator\">>=</span> <span class=\"token function\">getModules</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>module<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//-------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofLog<span class=\"token operator\">::</span><span class=\"token function\">_log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkLog</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span>module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span>module<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofLogVerbose<span class=\"token operator\">::</span><span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tlevel <span class=\"token operator\">=</span> OF_LOG_VERBOSE<span class=\"token punctuation\">;</span>\n\tmodule <span class=\"token operator\">=</span> _module<span class=\"token punctuation\">;</span>\n\tbPrinted<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofLogVerbose<span class=\"token operator\">::</span><span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">_log</span><span class=\"token punctuation\">(</span>OF_LOG_VERBOSE<span class=\"token punctuation\">,</span>_module<span class=\"token punctuation\">,</span>_message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofLogVerbose<span class=\"token operator\">::</span><span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkLog</span><span class=\"token punctuation\">(</span>OF_LOG_VERBOSE<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tva_list args<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>OF_LOG_VERBOSE<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofLogNotice<span class=\"token operator\">::</span><span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tlevel <span class=\"token operator\">=</span> OF_LOG_NOTICE<span class=\"token punctuation\">;</span>\n\tmodule <span class=\"token operator\">=</span> _module<span class=\"token punctuation\">;</span>\n\tbPrinted<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofLogNotice<span class=\"token operator\">::</span><span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">_log</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span>_module<span class=\"token punctuation\">,</span>_message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofLogNotice<span class=\"token operator\">::</span><span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tva_list args<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofLogWarning<span class=\"token operator\">::</span><span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tlevel <span class=\"token operator\">=</span> OF_LOG_WARNING<span class=\"token punctuation\">;</span>\n\tmodule <span class=\"token operator\">=</span> _module<span class=\"token punctuation\">;</span>\n\tbPrinted<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofLogWarning<span class=\"token operator\">::</span><span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">_log</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">,</span>_module<span class=\"token punctuation\">,</span>_message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofLogWarning<span class=\"token operator\">::</span><span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkLog</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tva_list args<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofLogError<span class=\"token operator\">::</span><span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tlevel <span class=\"token operator\">=</span> OF_LOG_ERROR<span class=\"token punctuation\">;</span>\n\tmodule <span class=\"token operator\">=</span> _module<span class=\"token punctuation\">;</span>\n\tbPrinted<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofLogError<span class=\"token operator\">::</span><span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">_log</span><span class=\"token punctuation\">(</span>OF_LOG_ERROR<span class=\"token punctuation\">,</span>_module<span class=\"token punctuation\">,</span>_message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofLogError<span class=\"token operator\">::</span><span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkLog</span><span class=\"token punctuation\">(</span>OF_LOG_ERROR<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tva_list args<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>OF_LOG_ERROR<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofLogFatalError<span class=\"token operator\">::</span><span class=\"token function\">ofLogFatalError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>  _module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tlevel <span class=\"token operator\">=</span> OF_LOG_FATAL_ERROR<span class=\"token punctuation\">;</span>\n\tmodule <span class=\"token operator\">=</span> _module<span class=\"token punctuation\">;</span>\n\tbPrinted<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofLogFatalError<span class=\"token operator\">::</span><span class=\"token function\">ofLogFatalError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> _message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">_log</span><span class=\"token punctuation\">(</span>OF_LOG_FATAL_ERROR<span class=\"token punctuation\">,</span>_module<span class=\"token punctuation\">,</span>_message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofLogFatalError<span class=\"token operator\">::</span><span class=\"token function\">ofLogFatalError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkLog</span><span class=\"token punctuation\">(</span>OF_LOG_FATAL_ERROR<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tva_list args<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>OF_LOG_FATAL_ERROR<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tbPrinted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofLog<span class=\"token operator\">::</span><span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> _channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _channel<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofSetLoggerChannel</span><span class=\"token punctuation\">(</span>shared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> loggerChannel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofLog<span class=\"token operator\">::</span><span class=\"token function\">setChannel</span><span class=\"token punctuation\">(</span>loggerChannel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nshared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> ofLog<span class=\"token operator\">::</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nshared_ptr<span class=\"token operator\">&lt;</span>ofBaseLoggerChannel<span class=\"token operator\">></span> <span class=\"token function\">ofGetLoggerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> ofLog<span class=\"token operator\">::</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstring <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> pad<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> OF_LOG_VERBOSE<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"verbose\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_LOG_NOTICE<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> pad <span class=\"token operator\">?</span> <span class=\"token string\">\"notice \"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"notice\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_LOG_WARNING<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_LOG_ERROR<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> pad <span class=\"token operator\">?</span> <span class=\"token string\">\" error \"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"error\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_LOG_FATAL_ERROR<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> pad <span class=\"token operator\">?</span> <span class=\"token string\">\" fatal \"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"fatal\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OF_LOG_SILENT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> pad <span class=\"token operator\">?</span> <span class=\"token string\">\"silent \"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"silent\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofConsoleLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// print to cerr for OF_LOG_ERROR and OF_LOG_FATAL_ERROR, everything else to cout </span>\n\tostream<span class=\"token operator\">&amp;</span> out <span class=\"token operator\">=</span> level <span class=\"token operator\">&lt;</span> OF_LOG_ERROR <span class=\"token operator\">?</span> cout <span class=\"token operator\">:</span> cerr<span class=\"token punctuation\">;</span>\n\tout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// only print the module name if it's not \"\"</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>module <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tout <span class=\"token operator\">&lt;&lt;</span> module <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tout <span class=\"token operator\">&lt;&lt;</span> message <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofConsoleLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tva_list args<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofConsoleLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> va_list args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//thanks stefan!</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html</span>\n\tFILE<span class=\"token operator\">*</span> out <span class=\"token operator\">=</span> level <span class=\"token operator\">&lt;</span> OF_LOG_ERROR <span class=\"token operator\">?</span> <span class=\"token constant\">stdout</span> <span class=\"token operator\">:</span> <span class=\"token constant\">stderr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"[%s] \"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>module <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"%s: \"</span><span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">vfprintf</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;array></span></span>\n<span class=\"token keyword\">void</span> ofDebugViewLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// print to cerr for OF_LOG_ERROR and OF_LOG_FATAL_ERROR, everything else to cout </span>\n\tstringstream out<span class=\"token punctuation\">;</span>\n\tout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// only print the module name if it's not \"\"</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tout <span class=\"token operator\">&lt;&lt;</span> module <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tout <span class=\"token operator\">&lt;&lt;</span> message <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OutputDebugStringA</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDebugViewLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tva_list args<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofDebugViewLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> va_list args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>string buffer<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n\tbuffer <span class=\"token operator\">=</span>  <span class=\"token string\">\"[\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>module <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbuffer <span class=\"token operator\">+</span><span class=\"token operator\">=</span> module <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tbuffer <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">ofVAArgsToString</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbuffer <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">OutputDebugStringA</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------</span>\nofFileLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">ofFileLoggerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\nofFileLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">ofFileLoggerChannel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setFile</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofFileLoggerChannel<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofFileLoggerChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofFileLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofFileLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">setFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span><span class=\"token keyword\">bool</span> append<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tfile<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">,</span>append<span class=\"token operator\">?</span>ofFile<span class=\"token operator\">::</span>Append<span class=\"token operator\">:</span>ofFile<span class=\"token operator\">::</span>WriteOnly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfile <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tfile <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\tfile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"--------------------------------------- \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofGetTimestampString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofFileLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tfile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>module <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tfile <span class=\"token operator\">&lt;&lt;</span> module <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tfile <span class=\"token operator\">&lt;&lt;</span> message <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofFileLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tva_list args<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">log</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> module<span class=\"token punctuation\">,</span> format<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofFileLoggerChannel<span class=\"token operator\">::</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span> module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> format<span class=\"token punctuation\">,</span> va_list args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tfile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"[\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofGetLogLevelName</span><span class=\"token punctuation\">(</span>level<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"] \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>module <span class=\"token operator\">!=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tfile <span class=\"token operator\">&lt;&lt;</span> module <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\": \"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tfile <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofVAArgsToString</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source","static":true}}],"fetch":[]}