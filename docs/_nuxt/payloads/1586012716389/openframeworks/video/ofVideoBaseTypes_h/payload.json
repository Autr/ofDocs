{"data":[{"page":{"entry":{"name":"ofVideoBaseTypes.h","filename":"ofVideoBaseTypes.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/video/ofVideoBaseTypes.h","path":"/openframeworks/video/ofVideoBaseTypes_h","route":"/openframeworks/video/ofVideoBaseTypes.h","dir":"../libs/openFrameworks/video","ext":"h","type":"source","id":346,"parent":323,"breadcrumbs":[323,164],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGraphicsBaseTypes.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofGLBaseTypes.h\"</span></span>\n\n<span class=\"token keyword\">enum</span> ofPixelFormat<span class=\"token operator\">:</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief Used to represent the available video looping modes.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofVideoPlayer::setLoopState()</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofVideoPlayer::getLoopState()</span>\n<span class=\"token keyword\">enum</span> ofLoopType <span class=\"token operator\">:</span> <span class=\"token keyword\">short</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Plays the video once without looping.</span>\n\tOF_LOOP_NONE<span class=\"token operator\">=</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Plays the video forwards then backwards repeatedly.</span>\n\tOF_LOOP_PALINDROME<span class=\"token operator\">=</span><span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Repeats the video over and over.</span>\n\tOF_LOOP_NORMAL<span class=\"token operator\">=</span><span class=\"token number\">0x03</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A structure describing attributes of a video format.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// An ofVideoFormat is used to describe the size, pixel format and frame rates</span>\n<span class=\"token comment\" spellcheck=\"true\">/// offered by a video device.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofVideoDevice</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVideoFormat</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The pixel format of the video format.</span>\n\tofPixelFormat pixelFormat<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The width of the video format in pixels.</span>\n\t<span class=\"token keyword\">int</span> width<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The height of the video format in pixels.</span>\n\t<span class=\"token keyword\">int</span> height<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A list of framerates for this video format in frames per second.</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> framerates<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A structure describing attributes of a video device.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// An ofVideoDevice can represent a camera, grabber or other frame source.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVideoDevice</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The video device ID.</span>\n\t<span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The video device name.</span>\n\tstd<span class=\"token operator\">::</span>string deviceName<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief The video device hardware name.</span>\n\tstd<span class=\"token operator\">::</span>string hardwareName<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Unique identifier for the device if it has one.</span>\n\tstd<span class=\"token operator\">::</span>string serialID<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A list of video device formats provided by the device.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofVideoFormat</span>\n\tstd<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofVideoFormat<span class=\"token operator\">></span> formats<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Is true if this video device is available.</span>\n\t<span class=\"token keyword\">bool</span> bAvailable<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A base class representing a video source.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseVideo</span><span class=\"token operator\">:</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> ofBaseHasPixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> ofBaseUpdates<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the ofBaseVideo.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofBaseVideo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the pixel data was updated since the last call to update().</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">isFrameNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Close the video source.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Determine if the video source is initialized.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Video sources such as cameras are often initialized with a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// setup() method.  Video sources such as movie players are often</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// initialized with a load() method.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the video source is initialized.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">isInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the requested ofPixelFormat.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pixelFormat the requested ofPixelFormat.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the format was successfully changed.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">setPixelFormat</span><span class=\"token punctuation\">(</span>ofPixelFormat pixelFormat<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the current ofPixelFormat.</span>\n\t<span class=\"token keyword\">virtual</span> ofPixelFormat <span class=\"token function\">getPixelFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A base class representing a drawable video source.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseVideoDraws</span><span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> ofBaseVideo<span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">public</span> ofBaseDraws<span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">public</span> ofBaseHasTexturePlanes<span class=\"token punctuation\">,</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> ofBaseHasPixels<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the ofBaseVideoDraws.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofBaseVideoDraws</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A base class representing a video device such as a camera.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseVideoGrabber</span><span class=\"token operator\">:</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> ofBaseVideo<span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroy the ofBaseVideoGrabber</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofBaseVideoGrabber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//needs implementing</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a list of available video grabber devices.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns a std::vector of ofVideoDevice objects.</span>\n\t<span class=\"token keyword\">virtual</span> std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span>ofVideoDevice<span class=\"token operator\">></span>\t<span class=\"token function\">listDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set up the grabber with the requested width and height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Some video grabbers may take the requested width and height as</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// a hint and choose the closest dimensions to those requested.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Users can check the actual width and height by calling getWidth() and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// getHeight() respectively after a successful setup.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param w the requested width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param h the requested height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns true if the video grabber was set up successfully.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the video grabber's height.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the video grabber's height.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the video grabber's width.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the video grabber's width.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">float</span> <span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the video grabber's internal ofTexture pointer if available.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note Subclasses should implement this method only if internal API can</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// upload video grabber pixels directly to an ofTexture.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns the internal ofTexture pointer or nullptr if not available.</span>\n\t<span class=\"token keyword\">virtual</span> ofTexture <span class=\"token operator\">*</span> <span class=\"token function\">getTexturePtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the video grabber's hardware verbosity level.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bTalkToMe true if verbose grabber logging feedback is required.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setVerbose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bTalkToMe<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the video grabber's device ID.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// In most cases, a user can choose a specific grabber source by ID.  This</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// device ID information should be available to the user via the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// listDevices() method.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param deviceID The device ID provided by listDevices().</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDeviceID</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> deviceID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the video grabber's desired frame rate.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Many video grabbers support user-specified frame rates.  This frame rate</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// should be considered a hint for the video grabber and is not guaranteed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param framerate the desired frame rate.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDesiredFrameRate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> framerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Request a native GUI for video grabber settings.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\note This feature may not be implemented by all video grabbers.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">videoSettings</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A base class representing a video player.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofBaseVideoPlayer</span><span class=\"token operator\">:</span> <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">public</span> ofBaseVideo<span class=\"token punctuation\">{</span>\n\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Destroys the ofBaseVideoPlayer.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofBaseVideoPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Load a video resource by name.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The list of supported video types and sources (e.g. rtsp:// sources) is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// implementation dependent.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param name The name of the video resource to load.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if the video was loaded successfully.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa loadAsync()</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span>\t\t\t\t<span class=\"token function\">load</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string name<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Asynchronously load a video resource by name.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The list of supported video types and sources (e.g. rtsp:// sources) is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// implementation dependent.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// When this method is used to load a video resouce, users can determine</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// when the video is loaded by calling isLoaded().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param name The name of the video resource to load.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa isLoaded()</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">loadAsync</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Play the video from the current playhead position.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa getPosition()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa setPostion()</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Pause and reset the playhead position to the first frame.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a pointer to the video texture used internally if it exists.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// If the video player implementation supports direct-to-texture rendering,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// this method will return a pointer to the internal texture. If</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// direct-to-texture rendering is not supported, nullptr is returned.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A valid pointer to the internal texture, otherwise a nullptr.</span>\n\t<span class=\"token keyword\">virtual</span> ofTexture <span class=\"token operator\">*</span>\t\t\t<span class=\"token function\">getTexturePtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the width in pixels of the loaded video.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The width in pixels of the loaded video or 0 if none is loaded.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">float</span> \t\t\t\t<span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the height in pixels of the loaded video.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The height in pixels of the loaded video or 0 if none is loaded.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">float</span> \t\t\t\t<span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns true if the video is paused.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if the video is paused.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span>\t\t\t\t<span class=\"token function\">isPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns true if a video is loaded.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is helpful when loading a video with loadAsync(). This is also an</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// alias of isInitialized().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa loadAsync()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if a video is loaded.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span>\t\t\t\t<span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns true if the loaded video is playing.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if the loaded video is playing.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span>\t\t\t\t<span class=\"token function\">isPlaying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns true if a video is loaded.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is helpful when loading a video with loadAsync(). This is also</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// an alias of isLoaded().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa loadAsync()</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if a video is loaded.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span>\t\t\t\t<span class=\"token function\">isInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the current playhead position of the loaded video.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This value is a normalized floating point value between 0.0 and 1.0 that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// represents the position of the playhead. 0.0 maps to the first frame of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the loaded video and 1.0 maps to the last frame of the loaded video.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns A value between 0.0 and 1.0 representing playhead position.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">float</span> \t\t\t\t<span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the playback speed of the video player.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// When the loop state is OF_LOOP_NONE or OF_LOOP_NORMAL, positive speed</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// will scale a forward playback rate while a negative speed will scale a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// a backward playback rate. When the loop state is OF_LOOP_PALINDROME,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the direction of playback will change each loop, but the playback rate</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// will still be scaled by the absolute value of the speed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The playback speed of the video player.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">float</span> \t\t\t\t<span class=\"token function\">getSpeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the duration of the loaded video in seconds.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The duration of the loaded video in seconds.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">float</span> \t\t\t\t<span class=\"token function\">getDuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns true if the loaded video has finished playing.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns True if the loaded video has finished playing.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span>\t\t\t\t<span class=\"token function\">getIsMovieDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the paused state of the video.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param bPause True to pause the video, false to play.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">setPaused</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bPause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the position of the playhead.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This value is a normalized floating point value between 0.0 and 1.0 that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// represents the position of the playhead. 0.0 maps to the first frame of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the loaded video and 1.0 maps to the last frame of the loaded video.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param pct A value between 0.0 and 1.0 representing playhead position.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the volume of the video player.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This value is a normalized floating point value between 0.0 and 1.0 that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// represents the video player volume. 0.0 maps to silence and 1.0 maps to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// maximum volume.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param volume A value between 0.0 and 1.0 representing volume.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">setVolume</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> volume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the video loop state.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param state The loop state of the video.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ::ofLoopType</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> \t\t\t\t<span class=\"token function\">setLoopState</span><span class=\"token punctuation\">(</span>ofLoopType state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the video playback speed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// When the loop state is OF_LOOP_NONE or OF_LOOP_NORMAL, positive speed</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// will scale a forward playback rate while a negative speed will scale a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// a backward playback rate. When the loop state is OF_LOOP_PALINDROME,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the direction of playback will change each loop, but the playback rate</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// will still be scaled by the absolute value of the speed.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// To play a video forward at normal speed, set the loop state to</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// OF_LOOP_NONE or OF_LOOP_NORMAL and a speed of 1.0. To double the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// playback rate, set the speed to 2.0. To play a video backward, set the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// speed to a negative number. A speed 0.25 will play the video at 1/4 the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the normal rate and a rate of 0.0 will effectively stop playback.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param speed The desired playback speed of the video.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span>   \t\t\t\t<span class=\"token function\">setSpeed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the current frame by frame number.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Similar to setPosition(), but accepts a frame number instead of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// a normalized floating point value. Frame count begins with the first</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// frame as 0 and the last frame as getTotalNumFrames() - 1.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\param frame The frame number to set the new playhead to.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">setFrame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> frame<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the current playhead position as a frame number.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The current playhead position as a frame number.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span>\t\t\t\t\t<span class=\"token function\">getCurrentFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the total number of frames in the currently loaded video.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns The total number of frames in the currently loaded video.</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">int</span>\t\t\t\t\t<span class=\"token function\">getTotalNumFrames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the current loop state of the video.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa ::ofLoopType</span>\n\t<span class=\"token keyword\">virtual</span> ofLoopType\t\t\t<span class=\"token function\">getLoopState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the playhead position to the first frame.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is functionally equivalent to setFrame(0) or setPosition(0.0).</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">firstFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Advance the playhead forward one frame.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This allows the user to advance through the video manually one frame at</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// a time without calling play().</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">nextFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Advance the playhead backward one frame.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This allows the user to advance backward through the video manually one</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// frame at a time without calling play().</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span>\t\t\t\t<span class=\"token function\">previousFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source","static":true}}],"fetch":[]}