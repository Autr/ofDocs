{"data":[{"page":{"entry":{"name":"ofOpenALSoundPlayer.cpp","filename":"ofOpenALSoundPlayer.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/sound/ofOpenALSoundPlayer.cpp","path":"/openframeworks/sound/ofOpenALSoundPlayer_cpp","route":"/openframeworks/sound/ofOpenALSoundPlayer.cpp","dir":"../libs/openFrameworks/sound","ext":"cpp","type":"source","id":272,"parent":269,"breadcrumbs":[269,164],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofOpenALSoundPlayer.h\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_SOUND_PLAYER_OPENAL</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/gtc/constants.hpp\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/common.hpp\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofEvents.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sndfile.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined (TARGET_OF_IOS) || defined (TARGET_OSX)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;OpenAL/al.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;OpenAL/alc.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;AL/al.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;AL/alc.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;mpg123.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> ALCdevice <span class=\"token operator\">*</span> alDevice <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> ALCcontext <span class=\"token operator\">*</span> alContext <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> ofOpenALSoundPlayer<span class=\"token operator\">::</span>window<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span>windowSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\n\nkiss_fftr_cfg ofOpenALSoundPlayer<span class=\"token operator\">::</span>systemFftCfg<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> ofOpenALSoundPlayer<span class=\"token operator\">::</span>systemWindowedSignal<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> ofOpenALSoundPlayer<span class=\"token operator\">::</span>systemBins<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>kiss_fft_cpx<span class=\"token operator\">></span> ofOpenALSoundPlayer<span class=\"token operator\">::</span>systemCx_out<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">static</span> set<span class=\"token operator\">&lt;</span>ofOpenALSoundPlayer<span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token function\">players</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> set<span class=\"token operator\">&lt;</span>ofOpenALSoundPlayer<span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span> players <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> set<span class=\"token operator\">&lt;</span>ofOpenALSoundPlayer<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>players<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">ofOpenALSoundUpdate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">alcProcessContext</span><span class=\"token punctuation\">(</span>alContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// from http://devmaster.net/posts/2893/openal-lesson-6-advanced-loading-and-error-handles</span>\n<span class=\"token keyword\">static</span> string <span class=\"token function\">getALErrorString</span><span class=\"token punctuation\">(</span>ALenum error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> AL_NO_ERROR<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"AL_NO_ERROR\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> AL_INVALID_NAME<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"AL_INVALID_NAME\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> AL_INVALID_ENUM<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"AL_INVALID_ENUM\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> AL_INVALID_VALUE<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"AL_INVALID_VALUE\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> AL_INVALID_OPERATION<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"AL_INVALID_OPERATION\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> AL_OUT_OF_MEMORY<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"AL_OUT_OF_MEMORY\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"UNKWOWN_ERROR\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> string <span class=\"token function\">getALCErrorString</span><span class=\"token punctuation\">(</span>ALCenum  error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> ALC_NO_ERROR<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"ALC_NO_ERROR\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> ALC_INVALID_DEVICE<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"ALC_INVALID_DEVICE\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> ALC_INVALID_CONTEXT<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"ALC_INVALID_CONTEXT\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> ALC_INVALID_ENUM<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"ALC_INVALID_ENUM\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> ALC_INVALID_VALUE<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"ALC_INVALID_VALUE\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> ALC_OUT_OF_MEMORY<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"ALC_OUT_OF_MEMORY\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"UNKWOWN_ERROR\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n<span class=\"token keyword\">static</span> string <span class=\"token function\">getMpg123EncodingString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> encoding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_16<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_16\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> MPG123_API_VERSION>=36</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_24<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_24\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_32<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_32\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_8<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_8\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_ALAW_8<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_ALAW_8\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_FLOAT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_FLOAT\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_FLOAT_32<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_FLOAT_32\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_FLOAT_64<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_FLOAT_64\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_SIGNED<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_SIGNED\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_SIGNED_16<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_SIGNED_16\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> MPG123_API_VERSION>=36</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_SIGNED_24<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_SIGNED_24\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_SIGNED_32<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_SIGNED_32\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_SIGNED_8<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_SIGNED_8\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_ULAW_8<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_ULAW_8\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_UNSIGNED_16<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_UNSIGNED_16\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> MPG123_API_VERSION>=36</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_UNSIGNED_24<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_UNSIGNED_24\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_UNSIGNED_32<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_UNSIGNED_32\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> MPG123_ENC_UNSIGNED_8<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_UNSIGNED_8\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"MPG123_ENC_ANY\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> BUFFER_STREAM_SIZE 4096</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// now, the individual sound player:</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\nofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">ofOpenALSoundPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tbLoop \t\t\t<span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tbLoadedOk \t\t<span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tpan \t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// range for oF is -1 to 1,</span>\n\tvolume \t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">;</span>\n\tinternalFreq \t<span class=\"token operator\">=</span> <span class=\"token number\">44100</span><span class=\"token punctuation\">;</span>\n\tspeed \t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tbPaused \t\t<span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tisStreaming\t\t<span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tchannels\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tduration\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tfftCfg\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tstreamf\t\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n\tmp3streamf\t\t<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token function\">players</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------------------------------------------------------</span>\nofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofOpenALSoundPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">kiss_fftr_free</span><span class=\"token punctuation\">(</span>fftCfg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">players</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">players</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">// this should only be called once</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>alDevice <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\talDevice <span class=\"token operator\">=</span> <span class=\"token function\">alcOpenDevice</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">nullptr</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>alDevice <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"initialize(): couldn't open OpenAL default device\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"initialize(): opening \"</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">alcGetString</span><span class=\"token punctuation\">(</span> alDevice<span class=\"token punctuation\">,</span> ALC_DEVICE_SPECIFIER <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Create OpenAL context and make it current. If fails, close the OpenAL device that was just opened.</span>\n\t\talContext <span class=\"token operator\">=</span> <span class=\"token function\">alcCreateContext</span><span class=\"token punctuation\">(</span> alDevice<span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>alContext <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tALCenum err <span class=\"token operator\">=</span> <span class=\"token function\">alcGetError</span><span class=\"token punctuation\">(</span> alDevice <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"initialize(): couldn't not create OpenAL context : \"</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getALCErrorString</span><span class=\"token punctuation\">(</span> err <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">alcMakeContextCurrent</span><span class=\"token punctuation\">(</span> alContext <span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>ALC_FALSE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tALCenum err <span class=\"token operator\">=</span> <span class=\"token function\">alcGetError</span><span class=\"token punctuation\">(</span> alDevice <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"initialize(): couldn't not make current the create OpenAL context : \"</span><span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getALCErrorString</span><span class=\"token punctuation\">(</span> err <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">alListener3f</span><span class=\"token punctuation\">(</span> AL_POSITION<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n\t\t<span class=\"token function\">mpg123_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"initialize(): Done\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\twindowSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\twindow<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// hanning window</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\twindow<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token number\">54</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">.</span><span class=\"token number\">46</span> <span class=\"token operator\">*</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span>two_pi<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\twindowSum <span class=\"token operator\">+</span><span class=\"token operator\">=</span> window<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//---------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// Destroy the OpenAL context (if any) before closing the device</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> alDevice <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> alContext <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n\t\t\t<span class=\"token function\">mpg123_exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t\t<span class=\"token function\">alcMakeContextCurrent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">alcDestroyContext</span><span class=\"token punctuation\">(</span>alContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\talContext <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">alcCloseDevice</span><span class=\"token punctuation\">(</span> alDevice <span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>ALC_FALSE <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"initialize(): error closing OpenAL device.\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\talDevice <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">sfReadFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> fftAuxBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tSF_INFO sfInfo<span class=\"token punctuation\">;</span>\n\tSNDFILE<span class=\"token operator\">*</span> f <span class=\"token operator\">=</span> <span class=\"token function\">sf_open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>SFM_READ<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sfInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sfReadFile(): couldn't read \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>sfInfo<span class=\"token punctuation\">.</span>frames<span class=\"token operator\">*</span>sfInfo<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>sfInfo<span class=\"token punctuation\">.</span>frames<span class=\"token operator\">*</span>sfInfo<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> subformat <span class=\"token operator\">=</span> sfInfo<span class=\"token punctuation\">.</span>format <span class=\"token operator\">&amp;</span> SF_FORMAT_SUBMASK <span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>subformat <span class=\"token operator\">==</span> SF_FORMAT_FLOAT <span class=\"token operator\">||</span> subformat <span class=\"token operator\">==</span> SF_FORMAT_DOUBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">double</span>\tscale <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sf_command</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> SFC_CALC_SIGNAL_MAX<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>scale<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span>scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scale <span class=\"token operator\">&lt;</span> <span class=\"token number\">1e-10</span><span class=\"token punctuation\">)</span>\n\t\t\tscale <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tscale <span class=\"token operator\">=</span> <span class=\"token number\">32700.0</span> <span class=\"token operator\">/</span> scale <span class=\"token punctuation\">;</span>\n\n\t\tsf_count_t samples_read <span class=\"token operator\">=</span> <span class=\"token function\">sf_read_float</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fftAuxBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>samples_read<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>fftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sfReadFile(): read \"</span> <span class=\"token operator\">&lt;&lt;</span> samples_read <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" float samples, expected \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> fftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>fftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfftAuxBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> scale <span class=\"token punctuation\">;</span>\n\t\t\tbuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">32565.0</span> <span class=\"token operator\">*</span> fftAuxBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tsf_count_t frames_read <span class=\"token operator\">=</span> <span class=\"token function\">sf_readf_short</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sfInfo<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>frames_read<span class=\"token operator\">&lt;</span>sfInfo<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sfReadFile(): read \"</span> <span class=\"token operator\">&lt;&lt;</span> frames_read <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" frames from buffer, expected \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> sfInfo<span class=\"token punctuation\">.</span>frames <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">sf_seek</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>SEEK_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tframes_read <span class=\"token operator\">=</span> <span class=\"token function\">sf_readf_float</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>fftAuxBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>sfInfo<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>frames_read<span class=\"token operator\">&lt;</span>sfInfo<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sfReadFile(): read \"</span> <span class=\"token operator\">&lt;&lt;</span> frames_read <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" frames from fft buffer, expected \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> sfInfo<span class=\"token punctuation\">.</span>frames <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sf_close</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tchannels <span class=\"token operator\">=</span> sfInfo<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">;</span>\n\tduration <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>sfInfo<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>sfInfo<span class=\"token punctuation\">.</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsamplerate <span class=\"token operator\">=</span> sfInfo<span class=\"token punctuation\">.</span>samplerate<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">mpg123ReadFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> fftAuxBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> err <span class=\"token operator\">=</span> MPG123_OK<span class=\"token punctuation\">;</span>\n\tmpg123_handle <span class=\"token operator\">*</span> f <span class=\"token operator\">=</span> <span class=\"token function\">mpg123_new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mpg123_open</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>MPG123_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mpg123ReadFile(): couldn't read \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tmpg123_enc_enum encoding<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> rate<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">mpg123_getformat</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rate<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>channels<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>encoding<span class=\"token operator\">!=</span>MPG123_ENC_SIGNED_16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mpg123ReadFile(): \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getMpg123EncodingString</span><span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" encoding for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" unsupported, expecting MPG123_ENC_SIGNED_16\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tsamplerate <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">;</span>\n\n\tsize_t done<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tsize_t buffer_size <span class=\"token operator\">=</span> <span class=\"token function\">mpg123_outblock</span><span class=\"token punctuation\">(</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>buffer_size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">mpg123_read</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">[</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>buffer_size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>buffer_size<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>done<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>MPG123_DONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>buffer_size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>buffer_size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span>done<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">mpg123_close</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">mpg123_delete</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tfftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tfftAuxBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">32565</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tduration <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">sfStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> fftAuxBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tSF_INFO sfInfo<span class=\"token punctuation\">;</span>\n\t\tstreamf <span class=\"token operator\">=</span> <span class=\"token function\">sf_open</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>SFM_READ<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sfInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"sfStream(): couldn't read \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tstream_subformat <span class=\"token operator\">=</span> sfInfo<span class=\"token punctuation\">.</span>format <span class=\"token operator\">&amp;</span> SF_FORMAT_SUBMASK <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stream_subformat <span class=\"token operator\">==</span> SF_FORMAT_FLOAT <span class=\"token operator\">||</span> stream_subformat <span class=\"token operator\">==</span> SF_FORMAT_DOUBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sf_command</span> <span class=\"token punctuation\">(</span>streamf<span class=\"token punctuation\">,</span> SFC_CALC_SIGNAL_MAX<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>stream_scale<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span>stream_scale<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stream_scale <span class=\"token operator\">&lt;</span> <span class=\"token number\">1e-10</span><span class=\"token punctuation\">)</span>\n\t\t\t\tstream_scale <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> <span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tstream_scale <span class=\"token operator\">=</span> <span class=\"token number\">32700.0</span> <span class=\"token operator\">/</span> stream_scale <span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tchannels <span class=\"token operator\">=</span> sfInfo<span class=\"token punctuation\">.</span>channels<span class=\"token punctuation\">;</span>\n\t\tduration <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>sfInfo<span class=\"token punctuation\">.</span>frames<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>sfInfo<span class=\"token punctuation\">.</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsamplerate <span class=\"token operator\">=</span> sfInfo<span class=\"token punctuation\">.</span>samplerate<span class=\"token punctuation\">;</span>\n\t\tstream_samples_read <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> curr_buffer_size <span class=\"token operator\">=</span> BUFFER_STREAM_SIZE<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> curr_buffer_size <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>curr_buffer_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stream_subformat <span class=\"token operator\">==</span> SF_FORMAT_FLOAT <span class=\"token operator\">||</span> stream_subformat <span class=\"token operator\">==</span> SF_FORMAT_DOUBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tsf_count_t samples_read <span class=\"token operator\">=</span> <span class=\"token function\">sf_read_float</span> <span class=\"token punctuation\">(</span>streamf<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>fftAuxBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> fftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstream_samples_read <span class=\"token operator\">+</span><span class=\"token operator\">=</span> samples_read<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>samples_read<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>fftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>samples_read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>samples_read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoop<span class=\"token punctuation\">)</span> <span class=\"token function\">stopThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstream_samples_read <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\tstream_end <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>fftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfftAuxBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> stream_scale <span class=\"token punctuation\">;</span>\n\t\t\tbuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">32565.0</span> <span class=\"token operator\">*</span> fftAuxBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tsf_count_t frames_read <span class=\"token operator\">=</span> <span class=\"token function\">sf_readf_short</span><span class=\"token punctuation\">(</span>streamf<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>curr_buffer_size<span class=\"token operator\">/</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstream_samples_read <span class=\"token operator\">+</span><span class=\"token operator\">=</span> frames_read<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>frames_read<span class=\"token operator\">&lt;</span>curr_buffer_size<span class=\"token operator\">/</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>frames_read<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>frames_read<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoop<span class=\"token punctuation\">)</span> <span class=\"token function\">stopThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tstream_samples_read <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\tstream_end <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfftAuxBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">32565.0f</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">mpg123Stream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> path<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> fftAuxBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mp3streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">int</span> err <span class=\"token operator\">=</span> MPG123_OK<span class=\"token punctuation\">;</span>\n\t\tmp3streamf <span class=\"token operator\">=</span> <span class=\"token function\">mpg123_new</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mpg123_open</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">,</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>MPG123_OK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">mpg123_close</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">mpg123_delete</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mpg123Stream(): couldn't read \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> rate<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">mpg123_getformat</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>rate<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>channels<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>stream_encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stream_encoding<span class=\"token operator\">!=</span>MPG123_ENC_SIGNED_16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"mpg123Stream(): \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getMpg123EncodingString</span><span class=\"token punctuation\">(</span>stream_encoding<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" encoding for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> path <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" unsupported, expecting MPG123_ENC_SIGNED_16\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tsamplerate <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">;</span>\n\t\tmp3_buffer_size <span class=\"token operator\">=</span> <span class=\"token function\">mpg123_outblock</span><span class=\"token punctuation\">(</span> mp3streamf <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t\t<span class=\"token function\">mpg123_seek</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>SEEK_END<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toff_t samples <span class=\"token operator\">=</span> <span class=\"token function\">mpg123_tell</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tduration <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>samples<span class=\"token operator\">/</span>channels<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">mpg123_seek</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>SEEK_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> curr_buffer_size <span class=\"token operator\">=</span> mp3_buffer_size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>speed<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> curr_buffer_size <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>curr_buffer_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsize_t done<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mpg123_read</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>curr_buffer_size<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>done<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>MPG123_DONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>done<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tfftAuxBuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>done<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bLoop<span class=\"token punctuation\">)</span> <span class=\"token function\">stopThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstream_end <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tfftAuxBuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">32565</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> fileName<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getFileExt</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"mp3\"</span> <span class=\"token operator\">||</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getFileExt</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"MP3\"</span> <span class=\"token operator\">||</span> mp3streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">mpg123Stream</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>fftAuxBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">sfStream</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>fftAuxBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\tfftBuffers<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> numFrames <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>channels<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tfftBuffers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>numFrames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>numFrames<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfftBuffers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fftAuxBuffer<span class=\"token punctuation\">[</span>j<span class=\"token operator\">*</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> fileName<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getFileExt</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">\"mp3\"</span> <span class=\"token operator\">&amp;&amp;</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getFileExt</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">\"MP3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">sfReadFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>fftAuxBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">mpg123ReadFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>fftAuxBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">sfReadFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">,</span>fftAuxBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\tfftBuffers<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> numFrames <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>channels<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tfftBuffers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>numFrames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>numFrames<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfftBuffers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fftAuxBuffer<span class=\"token punctuation\">[</span>j<span class=\"token operator\">*</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path<span class=\"token operator\">&amp;</span> _fileName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> is_stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\tstd<span class=\"token operator\">::</span>filesystem<span class=\"token operator\">::</span>path fileName <span class=\"token operator\">=</span> <span class=\"token function\">ofToDataPath</span><span class=\"token punctuation\">(</span>_fileName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tbMultiPlay <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tisStreaming <span class=\"token operator\">=</span> is_stream<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> err <span class=\"token operator\">=</span> AL_NO_ERROR<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// [1] init sound systems, if necessary</span>\n\t<span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// [2] try to unload any previously loaded sounds</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// &amp; prevent user-created memory leaks</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// if they call \"loadSound\" repeatedly, for example</span>\n\n\t<span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tALenum format<span class=\"token operator\">=</span>AL_FORMAT_MONO16<span class=\"token punctuation\">;</span>\n\tbLoadedOk <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isStreaming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">int</span> numFrames <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isStreaming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tbuffers<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>channels<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tbuffers<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">alGenBuffers</span><span class=\"token punctuation\">(</span>buffers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>buffers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tsources<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Clear error.</span>\n\t\t<span class=\"token function\">alGenSources</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sources<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\terr <span class=\"token operator\">=</span> <span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> AL_NO_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadSound(): couldn't generate source for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fileName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\": \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> err <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getALErrorString</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>buffers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Clear error.</span>\n\t\t\t<span class=\"token function\">alBufferData</span><span class=\"token punctuation\">(</span>buffers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>format<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\terr <span class=\"token operator\">=</span> <span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> AL_NO_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer:\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadSound(): couldn't create buffer for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fileName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\": \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> err <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getALErrorString</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isStreaming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isStreaming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">alSourceQueueBuffers</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>buffers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>buffers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">alSourcei</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_BUFFER<span class=\"token punctuation\">,</span>   buffers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">alSourcef</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_PITCH<span class=\"token punctuation\">,</span>    <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">alSourcef</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_GAIN<span class=\"token punctuation\">,</span>     <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token function\">alSourcef</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_ROLLOFF_FACTOR<span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token function\">alSourcei</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_SOURCE_RELATIVE<span class=\"token punctuation\">,</span> AL_TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> multibuffer<span class=\"token punctuation\">;</span>\n\t\tmultibuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsources<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">alGenSources</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sources<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isStreaming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> s<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>s<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>channels<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tmultibuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>numFrames<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tmultibuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>j<span class=\"token operator\">*</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Clear error.</span>\n\t\t\t\t\t<span class=\"token function\">alBufferData</span><span class=\"token punctuation\">(</span>buffers<span class=\"token punctuation\">[</span>s<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>format<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>multibuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\terr <span class=\"token operator\">=</span> <span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> err <span class=\"token operator\">!=</span> AL_NO_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadSound(): couldn't create stereo buffers for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fileName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\": \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> err <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getALErrorString</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token function\">alSourceQueueBuffers</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>buffers<span class=\"token punctuation\">[</span>s<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>fileName<span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>channels<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tmultibuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>numFrames<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tmultibuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>j<span class=\"token operator\">*</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Clear error.</span>\n\t\t\t\t<span class=\"token function\">alBufferData</span><span class=\"token punctuation\">(</span>buffers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>format<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>multibuffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\terr <span class=\"token operator\">=</span> <span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> AL_NO_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadSound(): couldn't create stereo buffers for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fileName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\": \"</span>\n\t\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> err <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getALErrorString</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token function\">alSourcei</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_BUFFER<span class=\"token punctuation\">,</span>   buffers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>channels<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\terr <span class=\"token operator\">=</span> <span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> AL_NO_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"loadSound(): couldn't create stereo sources for \\\"\"</span> <span class=\"token operator\">&lt;&lt;</span> fileName <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\\": \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> err <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getALErrorString</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// only stereo panning</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">float</span> pos<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">alSourcefv</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_POSITION<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">float</span> pos<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">alSourcefv</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_POSITION<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">alSourcef</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_ROLLOFF_FACTOR<span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">alSourcei</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_SOURCE_RELATIVE<span class=\"token punctuation\">,</span> AL_TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tbLoadedOk <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> bLoadedOk<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">isLoaded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> bLoadedOk<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">threadedFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> multibuffer<span class=\"token punctuation\">;</span>\n\tmultibuffer<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isThreadRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> processed<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">alGetSourcei</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_BUFFERS_PROCESSED<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>processed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>processed<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">int</span> numFrames <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>channels<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\tmultibuffer<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>numFrames<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\tmultibuffer<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">[</span>k<span class=\"token operator\">*</span>channels<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t\tALuint albuffer<span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">alSourceUnqueueBuffers</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>channels<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>albuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">alBufferData</span><span class=\"token punctuation\">(</span>albuffer<span class=\"token punctuation\">,</span>AL_FORMAT_MONO16<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>multibuffer<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">,</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token function\">alSourceQueueBuffers</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>channels<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>albuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tALuint albuffer<span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">alSourceUnqueueBuffers</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>albuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">alBufferData</span><span class=\"token punctuation\">(</span>albuffer<span class=\"token punctuation\">,</span>AL_FORMAT_MONO16<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">,</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t<span class=\"token function\">alSourceQueueBuffers</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>albuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stream_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tALint state<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">alGetSourcei</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_SOURCE_STATE<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">bool</span> stream_running<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n\t\t\t\tstream_running <span class=\"token operator\">=</span> streamf <span class=\"token operator\">||</span> mp3streamf<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t\t\tstream_running <span class=\"token operator\">=</span> streamf<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">!=</span> AL_PLAYING <span class=\"token operator\">&amp;&amp;</span> stream_running <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>stream_end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">alSourcePlayv</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\tstream_end <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>ofEventArgs <span class=\"token operator\">&amp;</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tALint state<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">alGetSourcei</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_SOURCE_STATE<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">!=</span> AL_PLAYING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">alDeleteSources</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>channels<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tsources<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>i<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">unload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofOpenALSoundPlayer<span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Only lock the thread where necessary.</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// Delete sources before buffers.</span>\n\t\t<span class=\"token function\">alDeleteSources</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sources<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">alDeleteBuffers</span><span class=\"token punctuation\">(</span>buffers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>buffers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tsources<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tbuffers<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Free resources and close file descriptors.</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">mpg123_close</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">mpg123_delete</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tmp3streamf <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sf_close</span><span class=\"token punctuation\">(</span>streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tstreamf <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\tbLoadedOk <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">isPlaying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isStreaming<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">isThreadRunning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tALint state<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> playing<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">alGetSourcei</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_SOURCE_STATE<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tplaying <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">==</span> AL_PLAYING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> playing<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">isPaused</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tALint state<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> paused<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">alGetSourcei</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_SOURCE_STATE<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpaused <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">==</span> AL_PAUSED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> paused<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">getSpeed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> speed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">getPan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> pan<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">getVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> volume<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">setVolume</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> vol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tvolume <span class=\"token operator\">=</span> vol<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">alSourcef</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_GAIN<span class=\"token punctuation\">,</span> vol<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setPan</span><span class=\"token punctuation\">(</span>pan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> pct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">setPositionMS</span><span class=\"token punctuation\">(</span>duration<span class=\"token operator\">*</span>pct<span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">setPositionMS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">mpg123_seek</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">.</span>f<span class=\"token operator\">*</span>samplerate<span class=\"token punctuation\">,</span>SEEK_SET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        stream_samples_read <span class=\"token operator\">=</span> <span class=\"token function\">sf_seek</span><span class=\"token punctuation\">(</span>streamf<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">.</span>f<span class=\"token operator\">*</span>samplerate<span class=\"token punctuation\">,</span>SEEK_SET<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> channels<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>channels<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">alSourcef</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_SEC_OFFSET<span class=\"token punctuation\">,</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">getPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>duration<span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token operator\">||</span> sources<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getPositionMS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">.</span>f<span class=\"token operator\">*</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">getPositionMS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> pos<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> OF_USING_MPG123</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tpos <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span><span class=\"token function\">mpg123_tell</span><span class=\"token punctuation\">(</span>mp3streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>streamf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tpos <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>stream_samples_read<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>samplerate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">alGetSourcef</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_SEC_OFFSET<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> pos <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">setPan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tp <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpan <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channels<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">float</span> pos<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">alSourcefv</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_POSITION<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// calculates left/right volumes from pan-value (constant panning law)</span>\n        <span class=\"token comment\" spellcheck=\"true\">// see: Curtis Roads: Computer Music Tutorial p 460</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// thanks to jasch</span>\n        <span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> p <span class=\"token operator\">*</span> <span class=\"token number\">0.7853981633974483f</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// in radians from -45. to +45.</span>\n        <span class=\"token keyword\">float</span> cosAngle <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> sinAngle <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">float</span> leftVol  <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cosAngle <span class=\"token operator\">-</span> sinAngle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.7071067811865475</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// multiplied by sqrt(2)/2</span>\n        <span class=\"token keyword\">float</span> rightVol <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cosAngle <span class=\"token operator\">+</span> sinAngle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">0.7071067811865475</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// multiplied by sqrt(2)/2</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>channels<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">alSourcef</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_GAIN<span class=\"token punctuation\">,</span>leftVol<span class=\"token operator\">*</span>volume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">alSourcef</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_GAIN<span class=\"token punctuation\">,</span>rightVol<span class=\"token operator\">*</span>volume<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">setPaused</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">alSourcePausev</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sources<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isStreaming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">stopThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">alSourcePlayv</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sources<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isStreaming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">startThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\tbPaused <span class=\"token operator\">=</span> bP<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">setSpeed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> spd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>channels<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">alSourcef</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_PITCH<span class=\"token punctuation\">,</span>spd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tspeed <span class=\"token operator\">=</span> spd<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">setLoop</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bLp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bMultiPlay<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// no looping on multiplay</span>\n\tbLoop <span class=\"token operator\">=</span> bLp<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isStreaming<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">alSourcei</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_LOOPING<span class=\"token punctuation\">,</span>bLp<span class=\"token operator\">?</span>AL_TRUE<span class=\"token operator\">:</span>AL_FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">setMultiPlay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bMp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isStreaming <span class=\"token operator\">&amp;&amp;</span> bMp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"setMultiPlay(): sorry, no support for multiplay streams\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tbMultiPlay <span class=\"token operator\">=</span> bMp<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">// be careful with this...</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bMultiPlay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofOpenALSoundPlayer<span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofRemoveListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofOpenALSoundPlayer<span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> err <span class=\"token operator\">=</span> <span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// if the sound is set to multiplay, then create new sources,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// do not multiplay on loop or we won't be able to stop it</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bMultiPlay <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>bLoop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tsources<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>channels<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Clear error.</span>\n\t\t<span class=\"token function\">alGenSources</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\terr <span class=\"token operator\">=</span> <span class=\"token function\">alGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> AL_NO_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"play(): couldn't create multiplay stereo sources: \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> err <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getALErrorString</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>channels<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">alSourcei</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_BUFFER<span class=\"token punctuation\">,</span>   buffers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>   <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// only stereo panning</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">float</span> pos<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">alSourcefv</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_POSITION<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">float</span> pos<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">alSourcefv</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_POSITION<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t    <span class=\"token function\">alSourcef</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_ROLLOFF_FACTOR<span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t    <span class=\"token function\">alSourcei</span> <span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> AL_SOURCE_RELATIVE<span class=\"token punctuation\">,</span> AL_TRUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\terr <span class=\"token operator\">=</span> <span class=\"token function\">glGetError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> AL_NO_ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofOpenALSoundPlayer\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"play(): couldn't assign multiplay buffers: \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> err <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getALErrorString</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">alSourcePlayv</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bMultiPlay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofAddListener</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>ofOpenALSoundPlayer<span class=\"token operator\">::</span>update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isStreaming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstream_end <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">startThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\tstd<span class=\"token operator\">::</span>unique_lock<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">alSourceStopv</span><span class=\"token punctuation\">(</span>channels<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>sources<span class=\"token punctuation\">[</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>isStreaming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">stopThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">initFFT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>bins<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>bands<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> signalSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bands<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fftCfg<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">kiss_fftr_free</span><span class=\"token punctuation\">(</span>fftCfg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfftCfg <span class=\"token operator\">=</span> <span class=\"token function\">kiss_fftr_alloc</span><span class=\"token punctuation\">(</span>signalSize<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcx_out<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>bands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbins<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>bands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span>signalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">initSystemFFT</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>systemBins<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>bands<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> signalSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bands<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>systemFftCfg<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">kiss_fftr_free</span><span class=\"token punctuation\">(</span>systemFftCfg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsystemFftCfg <span class=\"token operator\">=</span> <span class=\"token function\">kiss_fftr_alloc</span><span class=\"token punctuation\">(</span>signalSize<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsystemCx_out<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>bands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsystemBins<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>bands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">createWindow</span><span class=\"token punctuation\">(</span>signalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">getCurrentBufferSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>windowedSignal<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\twindowedSignal<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\twindowedSignal<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>windowedSignal<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>channels<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isStreaming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tALint state<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">alGetSourcei</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>k<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_SOURCE_STATE<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> state <span class=\"token operator\">!=</span> AL_PLAYING <span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">alGetSourcei</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>k<span class=\"token operator\">*</span>channels<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_SAMPLE_OFFSET<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//if(pos+size>=(int)fftBuffers[0].size()) continue;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>channels<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">float</span> gain<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">alGetSourcef</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">[</span>k<span class=\"token operator\">*</span>channels<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>AL_GAIN<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>gain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token operator\">+</span>j<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>fftBuffers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\twindowedSignal<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span>fftBuffers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pos<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>gain<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\t\twindowedSignal<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>windowedSignal<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">getSpectrum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">initFFT</span><span class=\"token punctuation\">(</span>bands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbins<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>bins<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sources<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>bins<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> signalSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bands<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getCurrentBufferSum</span><span class=\"token punctuation\">(</span>signalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">float</span> normalizer <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">/</span> windowSum<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">runWindow</span><span class=\"token punctuation\">(</span>windowedSignal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">kiss_fftr</span><span class=\"token punctuation\">(</span>fftCfg<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>windowedSignal<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>cx_out<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bands<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">sqrtf</span><span class=\"token punctuation\">(</span>cx_out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">*</span> cx_out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">+</span> cx_out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">*</span> cx_out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> normalizer<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>bins<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">getSystemSpectrum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> bands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">initSystemFFT</span><span class=\"token punctuation\">(</span>bands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsystemBins<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>systemBins<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">players</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>systemBins<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">int</span> signalSize <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bands<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span>systemWindowedSignal<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span>signalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tsystemWindowedSignal<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>signalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tsystemWindowedSignal<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>systemWindowedSignal<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\tset<span class=\"token operator\">&lt;</span>ofOpenALSoundPlayer<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>it<span class=\"token operator\">=</span><span class=\"token function\">players</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span><span class=\"token function\">players</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">isPlaying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> buffer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getCurrentBufferSum</span><span class=\"token punctuation\">(</span>signalSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>signalSize<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tsystemWindowedSignal<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span>buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">float</span> normalizer <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span> <span class=\"token operator\">/</span> windowSum<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">runWindow</span><span class=\"token punctuation\">(</span>systemWindowedSignal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">kiss_fftr</span><span class=\"token punctuation\">(</span>systemFftCfg<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>systemWindowedSignal<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>systemCx_out<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bands<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tsystemBins<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">sqrtf</span><span class=\"token punctuation\">(</span>systemCx_out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">*</span> systemCx_out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r <span class=\"token operator\">+</span> systemCx_out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>i <span class=\"token operator\">*</span> systemCx_out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> normalizer<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>systemBins<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ----------------------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofOpenALSoundPlayer<span class=\"token operator\">::</span><span class=\"token function\">runWindow</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> signal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\tsignal<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> window<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n","type":"source","static":true}}],"fetch":[]}