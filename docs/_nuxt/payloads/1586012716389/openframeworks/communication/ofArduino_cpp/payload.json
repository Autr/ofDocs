{"data":[{"page":{"entry":{"name":"ofArduino.cpp","filename":"ofArduino.cpp","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/communication/ofArduino.cpp","path":"/openframeworks/communication/ofArduino_cpp","route":"/openframeworks/communication/ofArduino.cpp","dir":"../libs/openFrameworks/communication","ext":"cpp","type":"source","id":195,"parent":194,"breadcrumbs":[194,164],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">/*\n * 11/5/15:\n *   - updated for arduino 2.5.0 and configurable firmata\n *\n * 1/9/13:\n *   - Fixed issue where digitalPinchange\n *\n * 9/28/11:\n *   - updated to be Firmata 2.3/Arduino 1.0 compatible\n *   - fixed ability to use analog pins as digital inputs\n *\n * 3/5/11:\n *   - added servo support for firmata 2.2 and greater (should be\n *     backwards compatible with Erik Sjodin's older firmata servo\n *     implementation)\n *\n *\n * Copyright 2007-2008 (c) Erik Sjodin, eriksjodin.net\n * Wiring version 2011 (c) Carlos Mario Rodriguez and Hernando Barragan\n * Updates 2015 (c) Dom Amato\n *\n * Devloped at: The Interactive Institutet / Art and Technology,\n * OF Lab / Ars Electronica\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial _portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofArduino.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMath.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n <span class=\"token comment\" spellcheck=\"true\">// TODO thread it?</span>\n <span class=\"token comment\" spellcheck=\"true\">// TODO throw event or exception if the serial port goes down...</span>\n <span class=\"token comment\" spellcheck=\"true\">//---------------------------------------------------------------------------</span>\nofArduino<span class=\"token operator\">::</span><span class=\"token function\">ofArduino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t_portStatus <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t_waitForData <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t_analogHistoryLength <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t_digitalHistoryLength <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t_stringHistoryLength <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t_sysExHistoryLength <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t_totalDigitalPins <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t_executeMultiByteCommand <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 0x00 a pin mode (input), not a command in Firmata -> fail hard</span>\n\t_multiByteChannel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t_firstAnalogPin <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> _storedInputData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\te <span class=\"token operator\">=</span> UCHAR_MAX<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> _digitalPinMode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\te <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> _digitalPinValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\te <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> _digitalPortValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\te <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> _digitalPortReporting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\te <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> _digitalPinReporting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\te <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> _analogPinReporting<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\te <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span> e <span class=\"token operator\">:</span> _servoValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\te <span class=\"token operator\">=</span> INT_MAX<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tconnected <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tconnectTime <span class=\"token operator\">=</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">;</span>\n\n\t_majorFirmwareVersion <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t_minorFirmwareVersion <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t_firmwareName <span class=\"token operator\">=</span> <span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">;</span>\n\n\tbUseDelay <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nofArduino<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofArduino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t_port<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// initialize pins once we get the Firmata version back from the Arduino board</span>\n<span class=\"token comment\" spellcheck=\"true\">// the version is sent automatically by the Arduino board on startup</span>\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">initPins</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_initialized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>                 <span class=\"token comment\" spellcheck=\"true\">// already initialized</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t_digitalHistory<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>_totalDigitalPins <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_digitalPinMode<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>_totalDigitalPins <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_digitalPinValue<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>_totalDigitalPins <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_digitalPinReporting<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>_totalDigitalPins <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_servoValue<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>_totalDigitalPins <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t_analogHistory<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>_totalDigitalPins <span class=\"token operator\">-</span> _firstAnalogPin <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_analogPinReporting<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>_totalDigitalPins <span class=\"token operator\">-</span> _firstAnalogPin <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// ports</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> ARD_TOTAL_PORTS<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_digitalPortValue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t_digitalPortReporting<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_OFF<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// digital pins</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _firstAnalogPin<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_digitalPinValue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t_digitalPinMode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_OUTPUT<span class=\"token punctuation\">;</span>\n\t\t_digitalPinReporting<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_OFF<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// analog in pins</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> _firstAnalogPin<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _totalDigitalPins<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_analogPinReporting<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> _firstAnalogPin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_OFF<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// analog pins used as digital</span>\n\t\t_digitalPinMode<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_ANALOG<span class=\"token punctuation\">;</span>\n\t\t_digitalPinValue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> _totalDigitalPins<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_servoValue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EInitialized<span class=\"token punctuation\">,</span> _majorFirmwareVersion<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span> device<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baud<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconnectTime <span class=\"token operator\">=</span> <span class=\"token function\">ofGetElapsedTimef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_initialized <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\tconnected <span class=\"token operator\">=</span> _port<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> baud<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendFirmwareVersionRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> connected<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// this method is not recommended</span>\n<span class=\"token comment\" spellcheck=\"true\">// the preferred method is to listen for the EInitialized event in your application</span>\n<span class=\"token keyword\">bool</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">isArduinoReady</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bUseDelay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_initialized <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">ofGetElapsedTimef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> connectTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> OF_ARDUINO_DELAY_LENGTH<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendPinCapabilityRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tconnected <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> connected<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">setUseDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> bDelay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tbUseDelay <span class=\"token operator\">=</span> bDelay<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">setDigitalHistoryLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_digitalHistoryLength <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">setAnalogHistoryLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_analogHistoryLength <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">setSysExHistoryLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_sysExHistoryLength <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">setStringHistoryLength</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_stringHistoryLength <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t_port<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tvector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> bytesToProcess<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> bytesToRead <span class=\"token operator\">=</span> _port<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bytesToRead <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbytesToProcess<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>bytesToRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//its possible we dont get all the bytes</span>\n\t\t<span class=\"token keyword\">int</span> bytesRead <span class=\"token operator\">=</span> _port<span class=\"token punctuation\">.</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>bytesToProcess<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bytesToRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bytesRead<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>bytesToProcess<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getAnalog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isAnalogPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_digitalPinMode<span class=\"token punctuation\">[</span><span class=\"token function\">convertAnalogPinToDigital</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> ARD_ANALOG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Analog Input has not been configured for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tpin <span class=\"token operator\">=</span> <span class=\"token function\">convertDigitalPinToAnalog</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_analogHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> _analogHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getDigital</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ARD_INPUT <span class=\"token operator\">||</span> _digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ARD_INPUT_PULLUP<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> _digitalHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> _digitalHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ARD_OUTPUT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> _digitalPinValue<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getPwm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pwmSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"PWM is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ARD_PWM<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> _digitalPinValue<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nvector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getSysEx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _sysExHistory<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstring ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _stringHistory<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getDigitalPinMode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> _digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendDigital</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> force<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ARD_INPUT <span class=\"token operator\">||</span> _digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ARD_INPUT_PULLUP <span class=\"token operator\">||</span> _digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ARD_OUTPUT<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>_digitalPinValue<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> value <span class=\"token operator\">||</span> force<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t_digitalPinValue<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// set the bit</span>\n\t\t<span class=\"token keyword\">int</span> port <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0F</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t_digitalPortValue<span class=\"token punctuation\">[</span>port<span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x07</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// clear the bit</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t_digitalPortValue<span class=\"token punctuation\">[</span>port<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x07</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>DIGITAL_MESSAGE <span class=\"token operator\">|</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>_digitalPortValue<span class=\"token punctuation\">[</span>port<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendPwm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> force<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pwmSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"PWM is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ARD_PWM <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>_digitalPinValue<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> value <span class=\"token operator\">||</span> force<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ANALOG_MESSAGE <span class=\"token operator\">|</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t_digitalPinValue<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendSysEx</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> command<span class=\"token punctuation\">,</span> vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendSysExBegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendSysExEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendString</span><span class=\"token punctuation\">(</span>string str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>STRING_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tstring<span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendProtocolVersionRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>REPORT_VERSION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendFirmwareVersionRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>REPORT_FIRMWARE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//this currently isn't supported as the resonse is not mapped</span>\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendPinCofigurationRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>PIN_STATE_QUERY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendPinCapabilityRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>CAPABILITY_QUERY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendAnalogMappingRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ANALOG_MAPPING_QUERY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendPinStateQuery</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>PIN_STATE_QUERY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pin <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendReset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SYSTEM_RESET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendAnalogPinReporting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isAnalogPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//the digital pin mode needs the digital pin #</span>\n\t_digitalPinMode<span class=\"token punctuation\">[</span><span class=\"token function\">convertAnalogPinToDigital</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_ANALOG<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//the sent message needs the analog pin #</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>REPORT_ANALOG <span class=\"token operator\">|</span> <span class=\"token function\">convertDigitalPinToAnalog</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_analogPinReporting<span class=\"token punctuation\">[</span><span class=\"token function\">convertDigitalPinToAnalog</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendDigitalPinMode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">case</span> ARD_INPUT<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">case</span> ARD_INPUT_PULLUP<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>inputSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Input is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ARD_OUTPUT<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>outputSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Output is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ARD_ANALOG<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>analogSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Analog is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ARD_PWM<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pwmSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"PWM is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ARD_SERVO<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>servoSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Servo Control is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ARD_I2C<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>i2cSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"I2C is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ARD_ONEWIRE<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>onewireSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Onewire is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ARD_STEPPER<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stepperSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stepper Control is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ARD_ENCODER<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encoderSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Encoder Control is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ARD_SERIAL<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>serialSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Serial is not supported for pin\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Mode is not supported\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SET_PIN_MODE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Tx pins 0-6</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mode<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// turn on or off reporting on the port</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> ARD_INPUT <span class=\"token operator\">||</span> mode <span class=\"token operator\">==</span> ARD_INPUT_PULLUP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendDigitalPinReporting</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> ARD_ON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendDigitalPinReporting</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> ARD_OFF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getAnalogPinReporting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isAnalogPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_digitalPinMode<span class=\"token punctuation\">[</span><span class=\"token function\">convertAnalogPinToDigital</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> ARD_ANALOG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Analog Input has not been configured for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//these are just safety checks</span>\n\tpin <span class=\"token operator\">=</span> <span class=\"token function\">convertDigitalPinToAnalog</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> _analogPinReporting<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nlist <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getAnalogHistory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isAnalogPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_digitalPinMode<span class=\"token punctuation\">[</span><span class=\"token function\">convertAnalogPinToDigital</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> ARD_ANALOG<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Analog Input has not been configured for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tpin <span class=\"token operator\">=</span> <span class=\"token function\">convertDigitalPinToAnalog</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>_analogHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nlist <span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">*</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getDigitalHistory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>_digitalHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nlist <span class=\"token operator\">&lt;</span>vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token operator\">*</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getSysExHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>_sysExHistory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nlist <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token operator\">*</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getStringHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>_stringHistory<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getMajorFirmwareVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _majorFirmwareVersion<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getMinorFirmwareVersion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _minorFirmwareVersion<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nstring ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getFirmwareName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _firmwareName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">isInitialized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> _initialized<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">isAttached</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//should return false if there is a serial error thus the arduino is not attached</span>\n\t<span class=\"token keyword\">return</span> _port<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ------------------------------ private functions</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">processData</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> inputData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">char</span> msg<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Received Byte: %i\"</span><span class=\"token punctuation\">,</span> inputData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//Logger::get(\"Application\").information(msg);</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// we have command data</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_waitForData <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> inputData <span class=\"token operator\">&lt;</span> <span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_waitForData<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// collect the data</span>\n\t\t_storedInputData<span class=\"token punctuation\">[</span>_waitForData<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> inputData<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// we have all data executeMultiByteCommand</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_waitForData <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>_executeMultiByteCommand<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> DIGITAL_MESSAGE<span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">processDigitalPort</span><span class=\"token punctuation\">(</span>_multiByteChannel<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_storedInputData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> _storedInputData<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">case</span> REPORT_VERSION<span class=\"token operator\">:</span>    <span class=\"token comment\" spellcheck=\"true\">// report version</span>\n\t\t\t\t_majorFirmwareVersion <span class=\"token operator\">=</span> _storedInputData<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t_minorFirmwareVersion <span class=\"token operator\">=</span> _storedInputData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EFirmwareVersionReceived<span class=\"token punctuation\">,</span> _majorFirmwareVersion<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">case</span> ANALOG_MESSAGE<span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_initialized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_analogHistory<span class=\"token punctuation\">[</span>_multiByteChannel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t<span class=\"token keyword\">int</span> previous <span class=\"token operator\">=</span> _analogHistory<span class=\"token punctuation\">[</span>_multiByteChannel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t\t_analogHistory<span class=\"token punctuation\">[</span>_multiByteChannel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_storedInputData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> _storedInputData<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_analogHistory<span class=\"token punctuation\">[</span>_multiByteChannel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> _analogHistoryLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t_analogHistory<span class=\"token punctuation\">[</span>_multiByteChannel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// trigger an event if the pin has changed value</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_analogHistory<span class=\"token punctuation\">[</span>_multiByteChannel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> previous<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EAnalogPinChanged<span class=\"token punctuation\">,</span> _multiByteChannel<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t_analogHistory<span class=\"token punctuation\">[</span>_multiByteChannel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>_storedInputData<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> _storedInputData<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_analogHistory<span class=\"token punctuation\">[</span>_multiByteChannel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> _analogHistoryLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t\t\t_analogHistory<span class=\"token punctuation\">[</span>_multiByteChannel<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// we have SysEx command data</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_waitForData <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// we have all sysex data</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputData <span class=\"token operator\">==</span> END_SYSEX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t_waitForData <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">processSysExData</span><span class=\"token punctuation\">(</span>_sysExData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_sysExData<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// still have data, collect it</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t_sysExData<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>inputData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// we have a command</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">int</span> command<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// extract the command and channel info from a byte if it is less than 0xF0</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>inputData <span class=\"token operator\">&lt;</span> <span class=\"token number\">0xF0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tcommand <span class=\"token operator\">=</span> inputData <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xF0</span><span class=\"token punctuation\">;</span>\n\t\t\t_multiByteChannel <span class=\"token operator\">=</span> inputData <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0F</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// commands in the 0xF* range don't use channel data</span>\n\t\t\tcommand <span class=\"token operator\">=</span> inputData<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> REPORT_VERSION<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> DIGITAL_MESSAGE<span class=\"token operator\">:</span>\n\t\t<span class=\"token keyword\">case</span> ANALOG_MESSAGE<span class=\"token operator\">:</span>\n\t\t\t_waitForData <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// 2 bytes needed</span>\n\t\t\t_executeMultiByteCommand <span class=\"token operator\">=</span> command<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">case</span> START_SYSEX<span class=\"token operator\">:</span>\n\t\t\t_sysExData<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_waitForData <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">// n bytes needed, -1 is used to indicate sysex message</span>\n\t\t\t_executeMultiByteCommand <span class=\"token operator\">=</span> command<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// sysex data is assumed to be 8-bit bytes split into two 7-bit bytes.</span>\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">processSysExData</span><span class=\"token punctuation\">(</span>vector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\tstring str<span class=\"token punctuation\">;</span>\n\n\tvector <span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> buffer<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//int i = 1;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// act on reserved sysEx messages (extended commands) or trigger SysEx event...</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">//first byte in buffer is command</span>\n\t<span class=\"token keyword\">case</span> REPORT_FIRMWARE<span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Recieved Firmware Report\"</span><span class=\"token punctuation\">;</span>\n\t\tit <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// skip the first byte, which is the firmware version command</span>\n\t\t_majorFirmwareVersion <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t_minorFirmwareVersion <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tbuffer <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tstr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t_firmwareName <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EFirmwareVersionReceived<span class=\"token punctuation\">,</span> _majorFirmwareVersion<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// trigger the initialization event</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_initialized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendPinCapabilityRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">case</span> STRING_DATA<span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Recieved Firamta String\"</span><span class=\"token punctuation\">;</span>\n\t\tit <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// skip the first byte, which is the string command</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tbuffer <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tstr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t_stringHistory<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_stringHistory<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> _stringHistoryLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t_stringHistory<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EStringReceived<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> I2C_REPLY<span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Recieved I2C Reply\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">7</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tFirmata_I2C_Data i2creply<span class=\"token punctuation\">;</span>\n\t\t\tit <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\ti2creply<span class=\"token punctuation\">.</span>address <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token operator\">++</span>it <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">++</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\ti2creply<span class=\"token punctuation\">.</span>reg <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token operator\">++</span>it <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">++</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tstr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token operator\">++</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\ti2creply<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EI2CDataRecieved<span class=\"token punctuation\">,</span> i2creply<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arduino I2C\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Incorrect Number of Bytes recieved, possible buffer overflow\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">purge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ENCODER_DATA<span class=\"token operator\">:</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Recieved Encoder Data\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">5</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t\tvector<span class=\"token operator\">&lt;</span>Firmata_Encoder_Data<span class=\"token operator\">></span> encoderReply<span class=\"token punctuation\">;</span>\n\t\t\tFirmata_Encoder_Data tempEncoderReply<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> encoderPos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> encBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t\tit <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// skip the first byte, which is the string command</span>\n\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\ttempEncoderReply<span class=\"token punctuation\">.</span>ID <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it <span class=\"token operator\">&amp;</span> ENCODER_CHANNEL_MASK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\ttempEncoderReply<span class=\"token punctuation\">.</span>direction <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it <span class=\"token operator\">&amp;</span> ENCODER_DIRECTION_MASK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\tencBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token operator\">++</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7F</span><span class=\"token punctuation\">;</span>\n\t\t\t\tencBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token operator\">++</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7F</span><span class=\"token punctuation\">;</span>\n\t\t\t\tencBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token operator\">++</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7F</span><span class=\"token punctuation\">;</span>\n\t\t\t\tencBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token operator\">++</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7F</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\tencoderPos <span class=\"token operator\">=</span> encBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tencoderPos <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\t\t\t\tencoderPos <span class=\"token operator\">|</span><span class=\"token operator\">=</span> encBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tencoderPos <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\t\t\t\tencoderPos <span class=\"token operator\">|</span><span class=\"token operator\">=</span> encBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tencoderPos <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\t\t\t\tencoderPos <span class=\"token operator\">|</span><span class=\"token operator\">=</span> encBuffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\ttempEncoderReply<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> encoderPos<span class=\"token punctuation\">;</span>\n\t\t\t\tencoderReply<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>tempEncoderReply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EEncoderDataReceived<span class=\"token punctuation\">,</span> encoderReply<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arduino Encoder\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Incorrect Number of Bytes recieved, possible buffer overflow\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">purge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> SERIAL_MESSAGE<span class=\"token operator\">:</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Recieved Serial Message\"</span><span class=\"token punctuation\">;</span>\n\t\tFirmata_Serial_Data reply<span class=\"token punctuation\">;</span>\n\n\t\tit <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//unsigned char command = *it &amp; 0xF0;</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> portId <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0F</span><span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// skip the first byte, which is the command and port</span>\n\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbuffer <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tbuffer <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tstr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>portId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> HW_SERIAL0<span class=\"token operator\">:</span>\n\t\t\treply<span class=\"token punctuation\">.</span>portID <span class=\"token operator\">=</span> HW_SERIAL0<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> HW_SERIAL1<span class=\"token operator\">:</span>\n\t\t\treply<span class=\"token punctuation\">.</span>portID <span class=\"token operator\">=</span> HW_SERIAL1<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> HW_SERIAL2<span class=\"token operator\">:</span>\n\t\t\treply<span class=\"token punctuation\">.</span>portID <span class=\"token operator\">=</span> HW_SERIAL2<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> HW_SERIAL3<span class=\"token operator\">:</span>\n\t\t\treply<span class=\"token punctuation\">.</span>portID <span class=\"token operator\">=</span> HW_SERIAL3<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SW_SERIAL0<span class=\"token operator\">:</span>\n\t\t\treply<span class=\"token punctuation\">.</span>portID <span class=\"token operator\">=</span> SW_SERIAL0<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SW_SERIAL1<span class=\"token operator\">:</span>\n\t\t\treply<span class=\"token punctuation\">.</span>portID <span class=\"token operator\">=</span> SW_SERIAL1<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SW_SERIAL2<span class=\"token operator\">:</span>\n\t\t\treply<span class=\"token punctuation\">.</span>portID <span class=\"token operator\">=</span> SW_SERIAL2<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SW_SERIAL3<span class=\"token operator\">:</span>\n\t\t\treply<span class=\"token punctuation\">.</span>portID <span class=\"token operator\">=</span> SW_SERIAL3<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arduino Serial\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Port does not exist or is not defined\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\treply<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>ESerialDataReceived<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> CAPABILITY_RESPONSE<span class=\"token operator\">:</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Recieved Capability Response\"</span><span class=\"token punctuation\">;</span>\n\t\tit <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tit <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// skip the first byte, which is the string command</span>\n\n\t\t<span class=\"token keyword\">int</span> pin <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\tfirmataInputSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tfirmataOutputSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tfirmataAnalogSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tfirmataPwmSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tfirmataServoSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tfirmataI2cSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tfirmataSerialSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tfirmataOnewireSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tfirmataStepperSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tfirmataEncoderSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> ARD_INPUT<span class=\"token operator\">:</span>\n\t\t\t\tpinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>inputSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tpinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>outputSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tfirmataInputSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tfirmataOutputSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tit <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> ARD_ANALOG<span class=\"token operator\">:</span>\n\t\t\t\tpinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>analogSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tit <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>firmataAnalogSupported<span class=\"token punctuation\">)</span>\n\t\t\t\t\t_firstAnalogPin <span class=\"token operator\">=</span> pin<span class=\"token punctuation\">;</span>\n\t\t\t\tfirmataAnalogSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> ARD_PWM<span class=\"token operator\">:</span>\n\t\t\t\tpinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pwmSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tfirmataPwmSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tit <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> ARD_SERVO<span class=\"token operator\">:</span>\n\t\t\t\tpinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>servoSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tfirmataServoSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tit <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> ARD_I2C<span class=\"token operator\">:</span>\n\t\t\t\tpinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>i2cSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tfirmataI2cSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tit <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> ARD_SERIAL<span class=\"token operator\">:</span>\n\t\t\t\tpinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>serialSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tfirmataI2cSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tit <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> ARD_ONEWIRE<span class=\"token operator\">:</span>\n\t\t\t\tpinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>onewireSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tfirmataOnewireSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tit <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> ARD_STEPPER<span class=\"token operator\">:</span>\n\t\t\t\tpinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stepperSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tfirmataStepperSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tit <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> ARD_ENCODER<span class=\"token operator\">:</span>\n\t\t\t\tpinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encoderSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tfirmataEncoderSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\tit <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tsupportedPinTypes temp<span class=\"token punctuation\">;</span>\n\t\t\t\t\tpinCapabilities<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>pin<span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t_totalDigitalPins <span class=\"token operator\">=</span> pin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_initialized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendAnalogMappingRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> ANALOG_MAPPING_RESPONSE<span class=\"token operator\">:</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Recieved Analog Map Query Response\"</span><span class=\"token punctuation\">;</span>\n\t\tit <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> pin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> fAPin <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// skip the first byte, which is the string command</span>\n\t\t_totalAnalogPins <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//from the firmata protocol</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//analog channel corresponding to pin x, or 127 if pin x does not support analog</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it <span class=\"token operator\">!=</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tanalogPinMap<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t_totalAnalogPins<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">//these should be set by the capability query but just incase</span>\n\t\t\t\tpinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>analogSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>firmataAnalogSupported<span class=\"token punctuation\">)</span>\n\t\t\t\t\tfirmataAnalogSupported <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">//lets also make sure that the capability response and this match up</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fAPin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">!=</span> _firstAnalogPin<span class=\"token punctuation\">)</span>\n\t\t\t\t\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Capabaility Query and Analog Map don't match up\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\t_firstAnalogPin <span class=\"token operator\">=</span> pin<span class=\"token punctuation\">;</span>\n\t\t\t\t\tfAPin <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tpin<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token operator\">*</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_initialized<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">initPins</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">case</span> PIN_STATE_RESPONSE<span class=\"token operator\">:</span>\n\t<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Recieved Pin State Query Response\"</span><span class=\"token punctuation\">;</span>\n\t\tit <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">// skip the first byte, which is the string command</span>\n\t\t<span class=\"token keyword\">int</span> pin <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tFirmata_Pin_Modes mode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> ARD_INPUT<span class=\"token operator\">:</span>\n\t\t\tmode <span class=\"token operator\">=</span> Firmata_Pin_Modes<span class=\"token operator\">::</span>MODE_INPUT<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> ARD_INPUT_PULLUP<span class=\"token operator\">:</span>\n\t\t\tmode <span class=\"token operator\">=</span> Firmata_Pin_Modes<span class=\"token operator\">::</span>MODE_INPUT_PULLUP<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> ARD_OUTPUT<span class=\"token operator\">:</span>\n\t\t\tmode <span class=\"token operator\">=</span> Firmata_Pin_Modes<span class=\"token operator\">::</span>MODE_OUTPUT<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> ARD_ANALOG<span class=\"token operator\">:</span>\n\t\t\tmode <span class=\"token operator\">=</span> Firmata_Pin_Modes<span class=\"token operator\">::</span>MODE_ANALOG<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> ARD_PWM<span class=\"token operator\">:</span>\n\t\t\tmode <span class=\"token operator\">=</span> Firmata_Pin_Modes<span class=\"token operator\">::</span>MODE_PWM<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> ARD_SERVO<span class=\"token operator\">:</span>\n\t\t\tmode <span class=\"token operator\">=</span> Firmata_Pin_Modes<span class=\"token operator\">::</span>MODE_SERVO<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> ARD_I2C<span class=\"token operator\">:</span>\n\t\t\tmode <span class=\"token operator\">=</span> Firmata_Pin_Modes<span class=\"token operator\">::</span>MODE_I2C<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> ARD_SERIAL<span class=\"token operator\">:</span>\n\t\t\tmode <span class=\"token operator\">=</span> Firmata_Pin_Modes<span class=\"token operator\">::</span>MODE_SERIAL<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> ARD_ONEWIRE<span class=\"token operator\">:</span>\n\t\t\tmode <span class=\"token operator\">=</span> Firmata_Pin_Modes<span class=\"token operator\">::</span>MODE_ONEWIRE<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> ARD_STEPPER<span class=\"token operator\">:</span>\n\t\t\tmode <span class=\"token operator\">=</span> Firmata_Pin_Modes<span class=\"token operator\">::</span>MODE_STEPPER<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> ARD_ENCODER<span class=\"token operator\">:</span>\n\t\t\tmode <span class=\"token operator\">=</span> Firmata_Pin_Modes<span class=\"token operator\">::</span>MODE_ENCODER<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//\t\tint val;</span>\n\t\t<span class=\"token keyword\">int</span> shift <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">//\t\t\tval = *it &lt;&lt; shift;</span>\n\t\t\tit<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tshift <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token comment\" spellcheck=\"true\">//clear whatever is left</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//int pinVal[2] = { pin, val }; //I think this was supposed to be the return value</span>\n\t\tpair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> Firmata_Pin_Modes<span class=\"token operator\">></span> <span class=\"token function\">reply</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EPinStateResponseReceived<span class=\"token punctuation\">,</span> reply<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>    <span class=\"token comment\" spellcheck=\"true\">// the message isn't in Firmatas extended command set</span>\n\t\t<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"This message isn't in Firmatas extended command set\"</span><span class=\"token punctuation\">;</span>\n\t\t_sysExHistory<span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_sysExHistory<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> _sysExHistoryLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t_sysExHistory<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>ESysExReceived<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">processDigitalPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_initialized<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> mask<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> previous<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpin <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>port <span class=\"token operator\">*</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">&lt;=</span> _totalDigitalPins <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>_digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ARD_INPUT <span class=\"token operator\">||</span> _digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ARD_INPUT_PULLUP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_digitalHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t\tprevious <span class=\"token operator\">=</span> _digitalHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> previous <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t\t\tmask <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">;</span>\n\t\t\t_digitalHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">&amp;</span> mask<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_digitalHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> _digitalHistoryLength<span class=\"token punctuation\">)</span>\n\t\t\t\t_digitalHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// trigger an event if the pin has changed value</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_digitalHistory<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> previous<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofNotifyEvent</span><span class=\"token punctuation\">(</span>EDigitalPinChanged<span class=\"token punctuation\">,</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendDigitalPortReporting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>REPORT_DIGITAL <span class=\"token operator\">|</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_digitalPortReporting<span class=\"token punctuation\">[</span>port<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mode<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendDigitalPinReporting</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">int</span> port <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>pin <span class=\"token operator\">/</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mode <span class=\"token operator\">==</span> ARD_OFF <span class=\"token operator\">||</span> mode <span class=\"token operator\">==</span> ARD_ON<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t_digitalPinReporting<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mode<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendDigitalPortReporting</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> byte<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t_port<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// in Firmata (and MIDI) data bytes are 7-bits. The 8th bit serves as a flag to mark a byte as either command or data.</span>\n<span class=\"token comment\" spellcheck=\"true\">// therefore you need two data bytes to send 8-bits (a char).</span>\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">&amp;</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// LSB</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">>></span> <span class=\"token number\">7</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">127</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// MSB</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// SysEx data is sent as 8-bit bytes split into two 7-bit bytes, this function merges two 7-bit bytes back into one 8-bit byte.</span>\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getValueFromTwo7bitBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> lsb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> msb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>msb <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> lsb<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getInvertedValueFromTwo7bitBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> lsb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> msb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> msb <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>lsb <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/********************************************\n*\n*\n*\t\t\t\tServo Functions\n*\n*\n********************************************/</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendServoAttach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minPulse<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxPulse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>servoSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Servo Control is not supported for pin\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERVO_CONFIG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>minPulse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>maxPulse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t_digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_SERVO<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendServo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> force<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>servoSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Servo Control is not supported for pin \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> ARD_SERVO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Servo Control is not configured for pin \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\". Did you send a servo attach message?\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_digitalPinValue<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> value <span class=\"token operator\">||</span> force<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">></span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>EXTENDED_ANALOG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ANALOG_MESSAGE <span class=\"token operator\">|</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t_digitalPinValue<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getServo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>servoSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Servo Control is not supported for pin\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_digitalPinMode<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> ARD_SERVO<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> _digitalPinValue<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/********************************************\n*\n*\n*\t\t\t\tStepper Functions\n*\n*\n********************************************/</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendStepper2Wire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dirPin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stepPin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stepsPerRev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>dirPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>stepPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>dirPin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stepperSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stepper Control is not supported for pin\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>dirPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>stepPin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stepperSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stepper Control is not supported for pin\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>stepPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_numSteppers <span class=\"token operator\">&lt;</span> MAX_STEPPERS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>STEPPER_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>STEPPER_CONFIG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>_numSteppers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>FIRMATA_STEPPER_DRIVER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>stepsPerRev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>dirPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>stepPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t_digitalPinMode<span class=\"token punctuation\">[</span>dirPin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_STEPPER<span class=\"token punctuation\">;</span>\n\t\t_digitalPinMode<span class=\"token punctuation\">[</span>stepPin<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_STEPPER<span class=\"token punctuation\">;</span>\n\t\t_numSteppers<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Reached max number of steppers\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendStepper4Wire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin4<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> stepsPerRev<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stepperSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stepper Control is not supported for pin\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stepperSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stepper Control is not supported for pin\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stepperSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stepper Control is not supported for pin\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>stepperSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Stepper Control is not supported for pin\"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_numSteppers <span class=\"token operator\">&lt;</span> MAX_STEPPERS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>STEPPER_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>STEPPER_CONFIG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>_numSteppers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>FIRMATA_STEPPER_FOUR_WIRE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>stepsPerRev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pin1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pin2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pin3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pin4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t_digitalPinMode<span class=\"token punctuation\">[</span>pin1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_STEPPER<span class=\"token punctuation\">;</span>\n\t\t_digitalPinMode<span class=\"token punctuation\">[</span>pin2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_STEPPER<span class=\"token punctuation\">;</span>\n\t\t_digitalPinMode<span class=\"token punctuation\">[</span>pin3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_STEPPER<span class=\"token punctuation\">;</span>\n\t\t_digitalPinMode<span class=\"token punctuation\">[</span>pin4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ARD_STEPPER<span class=\"token punctuation\">;</span>\n\t\t_numSteppers<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Reached max number of steppers\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendStepperMove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> stepperID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> direction<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numSteps<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> speed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> acceleration<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> deceleration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stepperID <span class=\"token operator\">&lt;=</span> _numSteppers <span class=\"token operator\">&amp;&amp;</span> stepperID <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> steps<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>numSteps<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000007F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>numSteps<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000007F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>numSteps<span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x0000007F</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// the stepper interface expects decimal expressed an an integer</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>acceleration <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> deceleration <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> accel <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>acceleration <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> decel <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>deceleration <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>STEPPER_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>STEPPER_STEP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>stepperID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>steps<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>steps<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>steps<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>accel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>decel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>STEPPER_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>STEPPER_STEP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>stepperID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>steps<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>steps<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>steps<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/********************************************\n*\n*\n*\t\t\t\tI2C Functions\n*\n*\n********************************************/</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendI2CConfig</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>I2C_CONFIG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>delay <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>delay <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t_i2cConfigured <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendI2CWriteRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_i2cConfigured<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>I2C_REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>slaveAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>FIRMATA_I2C_WRITE <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> numOfBytes<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"I2C was not configured, did you send an I2C config request?\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendI2CWriteRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_i2cConfigured<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>I2C_REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>slaveAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>FIRMATA_I2C_WRITE <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> numOfBytes<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"I2C was not configured, did you send an I2C config request?\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendI2CWriteRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_i2cConfigured<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>I2C_REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>slaveAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>FIRMATA_I2C_WRITE <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> numOfBytes<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"I2C was not configured, did you send an I2C config request?\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendI2CWriteRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> slaveAddress<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_i2cConfigured<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>I2C_REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>slaveAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>FIRMATA_I2C_WRITE <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> length <span class=\"token operator\">=</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"I2C was not configured, did you send an I2C config request?\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendI2CReadRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_i2cConfigured<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>I2C_REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>FIRMATA_I2C_READ <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"I2C was not configured, did you send an I2C config request?\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendI2ContinuousReadRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> address<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> reg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_i2cConfigured<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>I2C_REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>FIRMATA_I2C_CONTINUOUS_READ <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>reg <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Arduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"I2C was not configured, did you send an I2C config request?\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">bool</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">isI2CConfigured</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span>  _i2cConfigured<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// CONTINUOUS_READ</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/********************************************\n*\n*\n*\t\t\t\tOne Wire Functions\n*\n*\n********************************************/</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendOneWireConfig</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> enableParasiticPower<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>onewireSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Onewire is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ONEWIRE_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ONEWIRE_CONFIG_REQUEST<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>enableParasiticPower <span class=\"token operator\">?</span> <span class=\"token number\">0x01</span> <span class=\"token operator\">:</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendOneWireSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendOneWireSearch</span><span class=\"token punctuation\">(</span>ONEWIRE_SEARCH_REQUEST<span class=\"token punctuation\">,</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendOneWireAlarmsSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendOneWireSearch</span><span class=\"token punctuation\">(</span>ONEWIRE_SEARCH_ALARMS_REQUEST<span class=\"token punctuation\">,</span> pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//needs to notify event handler</span>\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendOneWireSearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>onewireSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Onewire is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ONEWIRE_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendOneWireRead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> devices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytesToRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> correlationId <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofRandomuf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendOneWireRequest</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> ONEWIRE_READ_REQUEST_BIT<span class=\"token punctuation\">,</span> devices<span class=\"token punctuation\">,</span> numBytesToRead<span class=\"token punctuation\">,</span> correlationId<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendOneWireReset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendOneWireRequest</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> ONEWIRE_RESET_REQUEST_BIT<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendOneWireWrite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> devices<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendOneWireRequest</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> ONEWIRE_WRITE_REQUEST_BIT<span class=\"token punctuation\">,</span> devices<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendOneWireDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendOneWireRequest</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> ONEWIRE_DELAY_REQUEST_BIT<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendOneWireWriteAndRead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> devices<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytesToRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> correlationId <span class=\"token operator\">=</span> <span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofRandomuf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendOneWireRequest</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">,</span> ONEWIRE_WRITE_REQUEST_BIT <span class=\"token operator\">|</span> ONEWIRE_READ_REQUEST_BIT<span class=\"token punctuation\">,</span> devices<span class=\"token punctuation\">,</span> numBytesToRead<span class=\"token punctuation\">,</span> correlationId<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//// see http://firmata.org/wiki/Proposals#OneWire_Proposal</span>\n<span class=\"token keyword\">void</span>  ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendOneWireRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> subcommand<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> devices<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numBytesToRead<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> correlationId<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> delay<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> dataToWrite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>onewireSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Onewire is not supported for pin \"</span> <span class=\"token operator\">&lt;&lt;</span> pin<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> bytes<span class=\"token punctuation\">;</span>\n\tbytes<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>devices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> numBytesToRead <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> correlationId <span class=\"token operator\">||</span> delay <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> dataToWrite<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tsubcommand <span class=\"token operator\">=</span> subcommand <span class=\"token operator\">|</span> ONEWIRE_WITHDATA_REQUEST_BITS<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>devices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> devices<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> devices<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numBytesToRead <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbytes<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> numBytesToRead <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n\t\tbytes<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>numBytesToRead <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>correlationId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbytes<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> correlationId <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n\t\tbytes<span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>correlationId <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delay <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tbytes<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> delay <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n\t\tbytes<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>delay <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n\t\tbytes<span class=\"token punctuation\">[</span><span class=\"token number\">14</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>delay <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n\t\tbytes<span class=\"token punctuation\">[</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>delay <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataToWrite<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dataToWrite<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tbytes<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>dataToWrite<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ONEWIRE_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>subcommand<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> shift <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> previous <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//i dont think this is safe</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> bytes<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shift <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tshift<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\tprevious <span class=\"token operator\">=</span> bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> shift<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x7f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shift <span class=\"token operator\">==</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\tshift <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tshift<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\t\t\tprevious <span class=\"token operator\">=</span> bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">-</span> shift<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shift <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>previous<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/********************************************\n*\n*\n*\t\t\t\tEncoder Functions\n*\n*\n********************************************/</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">attachEncoder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pinA<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pinB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pinA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span>pinB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pinA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encoderSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Encoder Control is not supported for pin \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pinA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pinCapabilities<span class=\"token punctuation\">[</span>pinB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>encoderSupported<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Encoder Control is not supported for pin \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pinB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_encoderID <span class=\"token operator\">&lt;</span> MAX_ENCODERS<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_ATTACH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>_encoderID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pinA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>pinB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t_encoderID<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getEncoderPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> encoderID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>encoderID <span class=\"token operator\">&lt;=</span> _encoderID <span class=\"token operator\">&amp;&amp;</span> encoderID <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_REPORT_POSITION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>encoderID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">getAllEncoderPositions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_REPORT_POSITIONS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">resetEncoderPosition</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> encoderID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>encoderID <span class=\"token operator\">&lt;=</span> _encoderID <span class=\"token operator\">&amp;&amp;</span> encoderID <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_RESET_POSITION<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>encoderID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">enableEncoderReporting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_REPORT_AUTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">disableEncoderReporting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_REPORT_AUTO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">detachEncoder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> encoderID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>encoderID <span class=\"token operator\">&lt;=</span> _encoderID <span class=\"token operator\">&amp;&amp;</span> encoderID <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_DATA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>ENCODER_DETACH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>encoderID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t_encoderID<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//if the buffer gets out of sync we have to purge everything to get back on track</span>\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">purge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>_port<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/********************************************\n*\n*\n*\t\t\t\tSerial Functions\n*\n*\n********************************************/</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">sendSerialConfig</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baud<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rxPin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> txPin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>portID <span class=\"token operator\">></span> <span class=\"token number\">7</span> <span class=\"token operator\">&amp;&amp;</span> rxPin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> txPin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Both RX and TX pins must be defined when using Software Serial.\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_CONFIG <span class=\"token operator\">|</span> portID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>baud <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x007F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>baud <span class=\"token operator\">>></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x007F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>baud <span class=\"token operator\">>></span> <span class=\"token number\">14</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x007F</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>portID <span class=\"token operator\">></span> <span class=\"token number\">7</span> <span class=\"token operator\">&amp;&amp;</span> rxPin <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> txPin <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>rxPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>txPin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>portID <span class=\"token operator\">></span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Both RX and TX pins must be defined when using Software Serial.\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">serialWrite</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numOfBytes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_WRITE <span class=\"token operator\">|</span> portID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numOfBytes<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">serialRead</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxBytesToRead<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_READ <span class=\"token operator\">|</span> portID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>FIRMATA_SERIAL_READ_CONTINUOUS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxBytesToRead <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">sendValueAsTwo7bitBytes</span><span class=\"token punctuation\">(</span>maxBytesToRead<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">serialStop</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_READ <span class=\"token operator\">|</span> portID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>FIRMATA_SERIAL_STOP_READING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">serialClose</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_CLOSE <span class=\"token operator\">|</span> portID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">serialFlush</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_FLUSH <span class=\"token operator\">|</span> portID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">serialListen</span><span class=\"token punctuation\">(</span>Firmata_Serial_Ports portID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// listen only applies to software serial ports</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>portID <span class=\"token operator\">&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>START_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>SERIAL_LISTEN <span class=\"token operator\">|</span> portID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sendByte</span><span class=\"token punctuation\">(</span>END_SYSEX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">//this is mostly safe except for the teensy 2.0, it has 12 analog outs starting at 22 going down to 11</span>\n<span class=\"token comment\" spellcheck=\"true\">//the problem arises if they mean digital pin 11 or analog pin 11 which are not the same</span>\n<span class=\"token comment\" spellcheck=\"true\">//digital pin 11 is analog pin 10 and analog pin 11 is digital pin 22</span>\n<span class=\"token keyword\">bool</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">isAnalogPin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span><span class=\"token function\">convertAnalogPinToDigital</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">&lt;</span> _firstAnalogPin<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// this probably means they are using the Analog pin #</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>analogPinMap<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//the pin doesnt exist in the analog pin mapping</span>\n\t\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Analog is not supported for pin \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token comment\" spellcheck=\"true\">//they are using the digital pin #</span>\n\t\t<span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pinCapabilities<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Analog is not supported for pin \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//this should only be false if the pin is negative or greater than the number of pins on the board</span>\n<span class=\"token comment\" spellcheck=\"true\">//just incase we check against the pin capability map if for some reason a pin doesn't exist</span>\n<span class=\"token comment\" spellcheck=\"true\">//pin 0 &amp; 1 are outliers because they dont exist in the capability query but technically exist</span>\n<span class=\"token comment\" spellcheck=\"true\">//we cant really use pin 0 &amp; 1 though as it messes up the serial communication</span>\n<span class=\"token keyword\">bool</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">isPin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> pin <span class=\"token operator\">></span> _totalDigitalPins<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Pin \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" does not exist on the current board\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pinCapabilities<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Pin \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" does not exist on the current board\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//this returns the pin if its already not within the analog pin map</span>\n<span class=\"token comment\" spellcheck=\"true\">//we need this to check between digital and analog pin mappings</span>\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">convertAnalogPinToDigital</span><span class=\"token punctuation\">(</span>size_t pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">&lt;</span> analogPinMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>analogPinMap<span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> analogPinMap<span class=\"token punctuation\">[</span>pin<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Pin \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is not an Analog Pin\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> pin<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//this returns the pin if its already within the analog pin map</span>\n<span class=\"token comment\" spellcheck=\"true\">//we need this to check between digital and analog pin mappings</span>\n<span class=\"token keyword\">int</span> ofArduino<span class=\"token operator\">::</span><span class=\"token function\">convertDigitalPinToAnalog</span><span class=\"token punctuation\">(</span>size_t pin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pin <span class=\"token operator\">></span> analogPinMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> aPin <span class=\"token operator\">:</span> analogPinMap<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aPin<span class=\"token punctuation\">.</span>second <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>pin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">return</span> aPin<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofArduino\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Pin \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>pin<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is not an Analog Pin\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> pin<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//this pin is already in the range of analog pins</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//these functions can't really account for user error </span>\n","type":"source","static":true}}],"fetch":[]}