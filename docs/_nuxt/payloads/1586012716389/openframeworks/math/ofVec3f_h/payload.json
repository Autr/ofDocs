{"data":[{"page":{"entry":{"name":"ofVec3f.h","filename":"ofVec3f.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/math/ofVec3f.h","path":"/openframeworks/math/ofVec3f_h","route":"/openframeworks/math/ofVec3f.h","dir":"../libs/openFrameworks/math","ext":"h","type":"source","id":265,"parent":253,"breadcrumbs":[253,164],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVec2f.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofVec4f.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofMathConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/vec3.hpp\"</span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cmath></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief  ofVec3f is a class for storing a three dimensional vector.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Moving through space requires knowledge of where things are and where they are</span>\n<span class=\"token comment\" spellcheck=\"true\">/// going. Vector Maths is the class of mathematics that gives us control over</span>\n<span class=\"token comment\" spellcheck=\"true\">/// these things in space, allowing for elegant and intuitive descriptions of</span>\n<span class=\"token comment\" spellcheck=\"true\">/// complex structures and movement. Vectors are at the heart of animations,</span>\n<span class=\"token comment\" spellcheck=\"true\">/// particle systems, and 2D and 3D graphics.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Vectors in mathematics in general are entities with magnitude (also called</span>\n<span class=\"token comment\" spellcheck=\"true\">/// length) and direction. A vector whose magnitude is 1 (ie a vector that is</span>\n<span class=\"token comment\" spellcheck=\"true\">/// *normalized*) is called a *unit vector*. Unit vectors are very handy for</span>\n<span class=\"token comment\" spellcheck=\"true\">/// storing directions as they can be easily scaled up (or down) to represent</span>\n<span class=\"token comment\" spellcheck=\"true\">/// motion in a particular direction with a particular length.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// *You will also see the term 'vector' used to describe an array of objects in</span>\n<span class=\"token comment\" spellcheck=\"true\">/// C++ (such as text strings). Don't let this confuse you, they are quite</span>\n<span class=\"token comment\" spellcheck=\"true\">/// different: one of them is a mathematical term for a fixed-length list of</span>\n<span class=\"token comment\" spellcheck=\"true\">/// numbers that you can do mathematical operations on, the other is a</span>\n<span class=\"token comment\" spellcheck=\"true\">/// C++-specific term that means 'dynamically sizeable array'.*</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// 'ofVec3f has three member variables, x, y, and z, which allow to conveniently</span>\n<span class=\"token comment\" spellcheck=\"true\">/// 'store 3D properties of an object such as its position, velocity, or</span>\n<span class=\"token comment\" spellcheck=\"true\">/// 'acceleration.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1; // v1.x is 0, v1.y is 0, v1.z is 0</span>\n<span class=\"token comment\" spellcheck=\"true\">/// v1.set(10, 50, 80); // now v1.x is 10, v1.y is 50, v1.z is 80</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// Using 'ofVec3f' greatly simplifies arithmetic operations in three dimensions.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// For example if you have two vectors 'v1' and 'v2', both of which represent a</span>\n<span class=\"token comment\" spellcheck=\"true\">/// 3D change in position, you can find the total change of position of both of</span>\n<span class=\"token comment\" spellcheck=\"true\">/// them just by doing an addition 'v1 + v2':</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(5, 2, 1); </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // so now v1 represents walking 5 steps forward then 2 steps </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // sideways then 1 step upwards</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2;</span>\n<span class=\"token comment\" spellcheck=\"true\">/// v2.set(1, 1, 1); </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // so now v2 represents walking 1 step forward then 1 step </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // sideways then 1 step upwards</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // what happens if you do v1 followed by v2?</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // to find out just add v1 and v2 together:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f result = v1 + v2; </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // result is (6, 3, 1), or 6 steps forward then 3 steps sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // then 2 steps upwards</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// You can scale an 'ofVec3f' by multiplying it with a float:</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n<span class=\"token comment\" spellcheck=\"true\">/// // walk 5 steps forward then 2 steps sideways then 1 step upwards</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(5, 2, 1); </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // what happens if we do v1 three times?</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f result = v1 * 3; // result is (15, 6, 3), or </span>\n<span class=\"token comment\" spellcheck=\"true\">/// // 15 steps forward, 6 steps sideways and 3 steps upwards</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// This also works for subtraction and division.</span>\n<span class=\"token comment\" spellcheck=\"true\">/// </span>\n<span class=\"token comment\" spellcheck=\"true\">/// As you can see this really makes dealing with vectors as easy as dealing with</span>\n<span class=\"token comment\" spellcheck=\"true\">/// single 'float's or 'int's, and can reduce the number of lines of code you have</span>\n<span class=\"token comment\" spellcheck=\"true\">/// to write by half, at the same time making your code much easier to read and</span>\n<span class=\"token comment\" spellcheck=\"true\">/// understand!</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofVec2f for 2D vectors</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\sa ofVec4f for 4D vectors</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofVec3f</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n   \t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> DIM <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Stores the `X` component of this vector.</span>\n\t<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Stores the `Y` component of this vector.</span>\n\t<span class=\"token keyword\">float</span> y<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Stores the `Z` component of this vector.</span>\n\t<span class=\"token keyword\">float</span> z<span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Construct a 3D vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a 3D vector. Defaults to (0,0,0).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1; </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // default: v1.x is 0, v1.y is 0, v1.z is 0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v2.x is 40, v2.y is 20, v2.z is 10</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3(0.1, 0.3, -1.5); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v3.x is 0.1, v3.y is 0.3, v3.z is -1.5</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construt a 3D vector with `x`, `y` and `z` specified</span>\n\t<span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a 3D vector with `x`, `y` and `z` set to `scalar`</span>\n\t<span class=\"token keyword\">explicit</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> scalar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a new 3D vector from a 4D vector by </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// throwing away the 'w' component.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f mom = ofVec4f(40, 20, 10, 100);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v(mom); // v is (40, 20, 10)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">operator</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Access components</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a pointer to the memory position of the first element of the vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ('x'); the other elements ('y' and 'z') immediately follow it in memory.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 10);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float * v1Ptr = v1.getPtr();</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float x = *(v1Ptr); // x is 40</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float y = *(v1Ptr+1); // y is 20</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float z = *(v1Ptr+2); // z is 10</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is very useful when using arrays of 'ofVec3f's to store geometry</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// information, as it allows the vector to be treated as a simple C array of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'float's that can be passed verbatim to OpenGL.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Allows to access the individual components of an 'ofVec3f' as though it is an</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// array</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 10);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float x = v1[0]; // x is 40</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float y = v1[1]; // y is 20</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float z = v1[2]; // z is 10</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This function can be handy if you want to do the same operation to all 'x',</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'y' and 'z' components, as it means you can just make a 'for' loop that</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// repeats 3 times.</span>\n\t<span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">float</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> n <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Set 'x', 'y' and 'z' components of this vector with just one function call.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'z' is optional, it defaults to 0.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.set(40, 20, 70);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Setting the values by using other 3 dimension vector ofVec3f.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.set(40, 20, 70);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v2.set(v1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _scalar <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Comparison </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Check for equality between two ofVec3f</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Returns 'true' if each component is the same as the corresponding component in</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'vec', ie if 'x == vec.x' and 'y == vec.y' and 'z == vec.z'; otherwise returns</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'false'. But you should probably be using ['match'](#match) instead.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(50, 30, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ( v1 == v2 ) is false</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ( v1 == v3 ) is true</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns 'true' if any component is different to its corresponding component in</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'vec', ie if 'x != vec.x' or 'y != vec.y' or 'z != vec.z'; otherwise returns</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'false'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(50, 20, 40); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ( v1 != v2 ) is true</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // ( v1 != v3 ) is false</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Let you check if two vectors are similar given a tolerance threshold</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'tolerance' (default = 0.0001).\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 70);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(40.01, 19.999, 70.05);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v1.match(v2, 0.1) is true</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v1.match(v2, 0.01) is false (because (70.5-70) > 0.01)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">match</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token operator\">=</span> <span class=\"token number\">0.0001f</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">/**\n\t * Checks if vectors look in the same direction.\n\t */</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isAligned</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token operator\">=</span> <span class=\"token number\">0.0001f</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">isAlignedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token operator\">=</span> <span class=\"token number\">0.0001f</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns 'true' if this vector is pointing in the same direction as</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'vec', with an angle error threshold 'tolerance' in degrees (default</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 0.0001 degrees).\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 70);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(4, 2, 7);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v1.align(v2, 0.0) is true</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">align</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token operator\">=</span> <span class=\"token number\">0.0001f</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns 'true' if this vector is pointing in the same direction</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// as 'vec', with an angle error threshold 'tolerance' in radians</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (default 0.0001).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 70);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(4, 2, 7);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v1.align(v2, 0.0) is true</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">alignRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token operator\">=</span> <span class=\"token number\">0.0001f</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Operators</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Super easy vector addition. Returns a new vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ('x'+'vec.x','y'+'vec.y','z'+'vec.z').</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(25, 50, 10);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1 + v2; // v3 is (65, 70, 20)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\tofVec3f  <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Returns a new vector with a float value 'f' added to 'x', 'y' and 'z'</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// members.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(2, 5, 1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = v1 + 10; // (12, 15, 11)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\n    ofVec3f  <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// Super easy addition assignment. Adds 'vec.x' to 'x', adds 'vec.y' to 'y' and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// adds 'vec.z' to 'z'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(25, 50, 10);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 += v2; // v1 is (65, 70, 20)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\tofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// Adds a float value 'f' to 'x', 'y' and 'z' members.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(2, 5, 1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 += 10; // (12, 15, 11)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// Super easy vector subtraction. Returns a new vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ('x'-'vec.x','y'-'vec.y','z'-'vec.z').\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(25, 50, 10);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1 - v2; // v3 is (15, -30, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\tofVec3f  <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Returns a new vector with a float value 'f' subtracted from 'x', 'y' and 'z'</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// members.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(2, 5, 1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = v1 - 10; // (-8, -5, -9)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n \tofVec3f  <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Returns a new 'ofVec3f' that is the inverted version (mirrored in X, Y and Z)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// of this vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(2, 5, 1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = -v1; // (-2, -5, -1)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    ofVec3f  <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Super easy subtraction assignment. Subtracts 'vec.x' from 'x', subtracts</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'vec.y' from 'y' and subtracts 'vec.z' from 'z'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(25, 50, 10);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 -= v2; // v1 is (15, -30, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~    </span>\n\tofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Subtract a float value 'f' from 'x', 'y', and 'z' members.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(2, 5, 1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 -= 10; // (-8, -5, -9)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\tofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Returns a new vector ('x'*'vec.x','y'*'vec.y','z'*'vec.z').</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 10); inline</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(2, 4, 10);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1 * v2; // (80, 80, 100)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Useful for scaling a 3D point by a non-uniform scale.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    ofVec3f  <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Return a new 'ofVec3f' that is this vector scaled by multiplying 'x', 'y', 'z'</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// members by 'f'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(2, 5, 1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = v1 * 4; // (8, 20, 4)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f  <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// Multiplies 'x' by 'vec.x', and multiplies 'y' by 'vec.y', and multiplies 'z'</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// by 'vec.z'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(2, 4, 10);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 *= v2; // v1 is now (80, 80, 100)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Useful for scaling a 3D point by a non-uniform scale.</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Scale this vector by multiplying 'x', 'y' and 'z' members by 'f'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(2, 5, 1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 *= 4; // (8, 20, 4)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// Returns a new vector ('x'/'vec.x','y'/'vec.y','z'/'vec.z').</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(2, 4, 10);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1 / v2; // (20, 5, 1)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Useful for scaling a 3D point by a non-uniform scale.</span>\n    ofVec3f  <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// Return a new 'ofVec3f' that is this vector scaled by dividing 'x', 'y'</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and 'z' members by 'f'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(2, 5, 1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = v1 / 4; // (0.5, 1.25, 0.25)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f  <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// Divides 'x' by 'vec.x', divides 'y' by 'vec.y', and divides 'z' by 'vec.z'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1 = ofVec3f(40, 20, 10); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = ofVec3f(2, 4, 10);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 *= v2; // v1 is now (20, 5, 1)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Useful for scaling a 3D point by a non-uniform scale.</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Scale this vector by dividing 'x', 'y' and 'z' members by 'f'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(2, 5, 1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1 /= 4; // (0.5, 1.25, 0.25)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Simple manipulations</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Return a new 'ofVec3f' that is the result of scaling this vector up or down so that it has</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the requested length.\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(3, 4); // length is 5</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = v1.getScaled(15); // v2 is (9, 12), which has length of 15</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    ofVec3f  <span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Scales this vector up or down so that it has the requested length.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(3, 4); // length is 5</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.scale(15); // v1 is now (9, 12), which has length of 15</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector that is the result of rotating this vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// by 'angle' degrees about the given axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = v1.getRotated(45, ofVec3f(0, 0, 1)); // v2 is (0.707, 0.707, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1.getRotated(45, ofVec3f(0, 1, 0)); // v3 is (0.707, 0, -0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    ofVec3f  <span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector that is the result of performing an Euler</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// rotation of this vector by 'ax' degrees about the x axis, 'ay' degrees</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// about the y axis, and 'az' degrees about the z axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = v1.getRotated(0, 0, 45); // v2 is (0.707, 0.707, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1.getRotated(0, 45, 0); // v3 is (0.707, 0, -0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Watch out for gimbal lock when specifying multiple rotations in the same call.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    ofVec3f  <span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector that is the result of rotating this vector by</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'angle' degrees about the axis specified by 'axis', using 'pivot' as the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// origin of rotation.</span>\n    ofVec3f  <span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pivot<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector that is the result of rotating this vector by</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'angle' radians about the given axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = v1.getRotated(PI / 4, ofVec3f(0, 0, 1)); // v2 is (0.707, 0.707, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1.getRotated(PI / 4, ofVec3f(0, 1, 0)); // v3 is (0.707, 0, -0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f  <span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector that is the result of performing an Euler</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// rotation of this vector by 'ax' radians about the x axis, 'ay' radians</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// about the y axis, and 'az' radians about the z axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2 = v1.getRotatedRad(0, 0, PI / 4); // v2 is (0.707, 0.707, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1.getRotatedRad(0, PI / 4, 0); // v3 is (0.707, 0, -0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Watch out for gimbal lock when specifying multiple rotations in the same call.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\tofVec3f  <span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns a new vector that is the result of rotating this vector by</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'angle' radians about the axis specified by 'axis', using 'pivot' as the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// origin of rotation.</span>\n    ofVec3f   <span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pivot<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates this vector by 'angle' degrees around the given axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(1, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.rotate(45, ofVec3f(0, 0, 1)); // v1 is now (0.707, 0.707, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v2.rotate(45, ofVec3f(0, 1, 0)); // v2 is now (0.707, 0, -0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\tofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Performs an Euler rotation of this vector by 'ax' degrees about the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// x axis, 'ay' degrees about the y axis, and 'az' degrees about the z axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(1, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.rotate(0, 0, 45); // v1 is now (0.707, 0.707, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v2.rotate(0, 45, 0); // v2 is now (0.707, 0, -0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Watch out for gimbal lock when specifying multiple rotations in the same call.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates this vector by 'angle' degrees about the axis specified by 'axis',</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// using 'pivot' as the origin of rotation.</span>\n\tofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pivot<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates this vector by 'angle' radians about the given axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(1, 0, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.rotateRad(PI / 4, ofVec3f(0, 0, 1)); // v1 is now (0.707, 0.707, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v2.rotateRad(PI / 4, ofVec3f(0, 1, 0)); // v2 is now (0.707, 0, -0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Performs an Euler rotation of this vector by 'ax' radians about</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the x axis, 'ay' radians about the y axis, and 'az' radians about the z axis.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(1, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.rotateRad(0, 0, PI / 4); // v1 is now (0.707, 0.707, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v2.rotateRad(0, PI / 4, 0); // v2 is now (0.707, 0, -0.707)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Watch out for gimbal lock when specifying multiple rotations in the same call.</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Rotates this vector by 'angle' radians around the axis specified by 'axis',</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// using 'pivot' as the origin of rotation.</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pivot<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n    \t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Return a new 'ofVec3f' calculated by copying this vector and then mapping from</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// its default coordinate system -- origin (0,0,0), X direction (1,0,0), Y</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// direction (0,1,0), Z direction (0,0,1) -- to a new coordinate system defined</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// with origin at 'origin', X direction 'vx', and Y direction 'vy', and Z</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// direction 'vz'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// *In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of unit</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// length; if they are not perpendicular you will have shearing as part of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// mapping, and if they are not of unit length you will have scaling as part of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the mapping.*</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\tofVec3f <span class=\"token function\">getMapped</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span>\n\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span>\n\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vy<span class=\"token punctuation\">,</span>\n\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vz <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Map this vector from its default coordinate system -- origin (0,0,0), X</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// direction (1,0,0), Y direction (0,1,0), Z direction (0,0,1) -- to a new</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// coordinate system defined with origin at 'origin', X direction 'vx', and Y</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// direction 'vy', and Z direction 'vz'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// *In most cases you want 'vx', 'vy', and 'vz' to be perpendicular and of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// unit length; if they are not perpendicular you will have shearing as part</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// of the mapping, and if they are not of unit length you will have scaling</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// as part of the mapping.*</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span>\n\t\t\t\t <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span>\n\t\t\t\t <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vy<span class=\"token punctuation\">,</span>\n\t\t\t\t <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vz <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Distance</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Treats both this vector and 'pnt' as points in 3D space, and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// calculates and returns the distance between them.\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f p1(3, 4, 2);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f p2(6, 8, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float distance = p1.distance( p2 ); // distance is 5.8310</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'distance' involves a square root calculation, which is one of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// slowest things you can do in programming. If you don't need an exact</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// number but rather just a rough idea of distance (for example when</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// finding the shortest distance of a bunch of points to a reference</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point, where it doesn't matter exactly what the distances are, you</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// just want the shortest), you can use squareDistance() instead.</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Treats both this vector and 'pnt' as points in 3D space, and calculates and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// returns the squared distance between them.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f p1(3, 4, 2);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f p2(6, 8, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float distance = p1.distance( p2 ); // distance is 5.8310</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use as a much faster alternative to distance() if you don't need</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to know an exact number but rather just a rough idea of distance (for example</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// when finding the shortest distance of a bunch of points to a reference point,</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// where it doesn't matter exactly what the distances are, you just want the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// shortest). It avoids the square root calculation that is ordinarily required</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to calculate a length.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">squareDistance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Interpolation</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Perform a linear interpolation of this vector's position towards 'pnt'</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and return the interpolated vector without altering the original. 'p'</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// controls the amount to move towards 'pnt'. 'p' is normally between 0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and 1 and where 0 means stay the original position and 1 means move</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// all the way to 'pnt', but you can also have 'p' greater than 1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// overshoot 'pnt', or less than 0 to move backwards away from 'pnt'.\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(0, 5, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(10, 10, 20);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v3 = v1.getInterpolated(p2, 0.5); // v3 is (5, 7.5, 10)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v4 = v1.getInterpolated(p2, 0.8); // v4 is (8, 9, 16)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    ofVec3f   <span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Perform a linear interpolation of this vector's position towards</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'pnt'. 'p' controls the amount to move towards 'pnt'. 'p' is normally</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// between 0 and 1 and where 0 means stay the original position and 1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// means move all the way to 'pnt', but you can also have 'p' greater</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// than 1 overshoot 'pnt', or less than 0 to move backwards away from</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'pnt'.\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1( 0, 5, 0 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2( 10, 10, 20 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // go go gadget zeno</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.interpolate( v2, 0.5 ); // v1 is now (5, 7.5, 10)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.interpolate( v2, 0.5 ); // v1 is now (7.5, 8.75, 15)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.interpolate( v2, 0.5 ); // v1 is now (8.75, 9.375, 17.5)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.interpolate( v2, 0.5 ); // v1 is now (9.375, 9.6875, 18.75)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f<span class=\"token operator\">&amp;</span>  <span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculate and return the midpoint between this vector and 'pnt'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(5, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(10, 10, 20);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f mid = v1.getMiddle(v2); // mid gets (7.5, 5, 10)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f   <span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Set this vector to the midpoint between itself and 'pnt'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1( 0, 5, 0 );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2( 10, 10, 20);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // go go gadget zeno</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.middle( v2 ); // v1 is now (5, 7.5, 10)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.middle( v2 ); // v1 is now (7.5, 8.75, 15)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.middle( v2 ); // v1 is now (8.75, 9.375, 17.5)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.middle( v2 ); // v1 is now (9.375, 9.6875, 18.75)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f<span class=\"token operator\">&amp;</span>  <span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Sets this vector to be the average (*centre of gravity* or</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// *centroid*) of a given array of 'ofVec3f's. 'points' is the array of</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'ofVec3f's and 'num' specifies the number of 'ofVec3f's in the array.\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// int numPoints = 10;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f points[numPoints];</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// for ( int i=0; i&lt;numPoints; i++ ) {</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \tpoints[i].set( ofRandom(0,100), ofRandom(0,100), ofRandom(0,100) );</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// }</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f centroid;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// centroid.average( points, numPoints ); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // centroid now is the centre of gravity/average of all the random points</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\tofVec3f<span class=\"token operator\">&amp;</span>  <span class=\"token function\">average</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">*</span> points<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Limit</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Return a normalized copy of this vector. </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// *Normalization* means to scale the vector so that its length</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (magnitude) is exactly 1, at which stage all that is left is the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// direction. A normalized vector is usually called a *unit vector*, and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// can be used to represent a pure direction (heading).\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(5, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1Normalized = v1.getNormalized(); // (1, 0, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(5, 0, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2Normalized = v2.getNormalized(); // (√2, 0, √2)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\tofVec3f  <span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n   \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Normalize the vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// *Normalizing* means to scale the vector so that its length (magnitude)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// is exactly 1, at which stage all that is left is the direction. A</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// normalized vector is usually called a *unit vector*, and can be used</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to represent a pure direction (heading).\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(5, 0, 0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.normalize(); // v2 is now (1, 0, 0)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(5, 0, 5);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v2.normalize(); // v2 is now (√2, 0, √2)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n  \tofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Return a copy of this vector with its length (magnitude) restricted to a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// maximum of 'max' units by scaling down if necessary.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(5, 0, 1); // length is about 5.1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(2, 0, 1); // length is about 2.2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1Limited = v1.getLimited(3); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v1Limited is (2.9417, 0, 0.58835) which has length of 3 in the same direction as v1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2Limited = v2.getLimited(3);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v2Limited is (2, 0, 1) (same as v2)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\tofVec3f  <span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Restrict the length (magnitude) of this vector to a maximum of 'max'</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// units by scaling down if necessary.\t</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(5, 0, 1); // length is about 5.1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(2, 0, 1); // length is about 2.2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.limit(3); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v1 is now (2.9417, 0, 0.58835) which has length of 3 in the same direction as at initialization</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v2.limit(3);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // v2 is unchanged</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Measurement</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// Return the length (magnitude) of this vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v(3, 4, 1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float len = v.length(); // len is 5.0990</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// `length' involves a square root calculation, which is one of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// slowest things you can do in programming. If you don't need an exact</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// number but rather just a rough idea of a length (for example when</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// finding the shortest distance of a bunch of points to a reference</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// point, where it doesn't matter exactly what the lengths are, you just</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// want the shortest), you can use lengthSquared() instead.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///    </span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Return the squared length (squared magnitude) of this vector.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v(3, 4, 1);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float len = v.length(); // len is 5.0990</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Use as a much faster alternative to length() if you don't need</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to know an accurate length but rather just a rough idea of a length (for</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// example when finding the shortest distance of a bunch of points to a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// reference point, where it doesn't matter exactly what the lengths are, you</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// just want the shortest). It avoids the square root calculation that is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ordinarily required to calculate a length.</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">lengthSquared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculate and return the coplanar angle in degrees between this vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// and 'vec'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1,0,0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(0,1,0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float angle = v1.angle(v2); // angle is 90</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~    </span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">angle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculate and return the coplanar angle in radians between this </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vector and 'vec'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1,0,0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(0,1,0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float angle = v1.angle(v2); // angle is 90</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">angleRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Perpendicular</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a plane using this vector and 'vec' (by finding the plane that both</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// lectors lie on), and return the vector that is perpendicular to that plane</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// (the normal to that plane).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofSetLogLevel(OF_LOG_NOTICE);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1,0,0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(0,1,0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f p = v1.getPerpendicular(v2);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofLog(OF_LOG_NOTICE, \"%1.1f, %1.1f, %1.1f\\n\", p.x, p.y, p.z);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // prints \"0.0, 0.0, 1.0\"</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This method is usually used to calculate a normal vector to a surface, which</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// can then be used to calculate lighting, collisions, and other 3D effects.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\tofVec3f  <span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a plane using this vector and 'vec' (by finding the plane that both</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// lie on), and set our 'x', 'y' and 'z' to be the vector that is perpendicular</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// to the constructed plane (the normal to the plane).</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofSetLogLevel(OF_LOG_NOTICE);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v1(1,0,0);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f v2(0,1,0); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// v1.perpendicular(v2); </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofLog(OF_LOG_NOTICE, \"%1.1f, %1.1f, %1.1f\\n\", v1.x, v1.y, v1.z);</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// // prints \"0.0, 0.0, 1.0'</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This method is usually used to calculate a normal vector to a surface, which</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// can then be used to calculate lighting, collisions, and other 3D effects.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the cross product (vector product) of this vector and 'vec'. This is a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// binary operation on two vectors in three-dimensional space, which results in a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vector that is perpendicular to both of the vectors being multiplied, and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// normal to the plane containing them. The name *cross product* is derived from</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the cross symbol X that is often used to designate this operation; the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// alternative name *vector product* emphasizes the vector (rather than scalar)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// nature of the result.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ![CROSS](math/crossproduct.png)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Image courtesy of Wikipedia</span>\n    ofVec3f  <span class=\"token function\">getCrossed</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token comment\" spellcheck=\"true\">/// Set this vector to the cross product (vector product) of itself and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// 'vec'. This is a binary operation on two vectors in three-dimensional</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// space, which results in a vector that is perpendicular to both of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vectors being multiplied, and normal to the plane containing them. The</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// name *cross product* is derived from the cross symbol X that is often</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// used to designate this operation; the alternative name *vector</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// product* emphasizes the vector (rather than scalar) nature of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// result.</span>\n    ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">cross</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Returns the dot product of this vector with 'vec'.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The *dot product* of two vectors, also known as the *scalar product*, is</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the product of the magnitude of the two vectors and the cosine of the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// angle between them.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// One interpretation of the dot product is as a measure of how closely two</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vectors align with each other. If they point in exactly the same</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// direction, their dot product will simply be the product of their</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// magnitudes, if they are perpendicular, their dot product will be 0, and</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// if they point in opposite directions, their dot product will be</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// negative.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// The dot product is in contrast to the *cross product*, which returns a</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// vector rather than a scalar.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f a1(2, 0, 0); // magnitude 2, parallel to x-axis</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f b1(3, 4, 0); // magnitude 5, 53.13 degree angle to a1</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// float dot = a1.dot(b1); // dot is 2 * 5 * cos(53.13) = 6.0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f a2(1, 0, 0); // magnitude 1, parallel to x-axis</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f b2(0, 0, 1); // magnitude 1, 90 degree angle to a2</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// dot = a2.dot(b2); // dot is 1 * 1 * cos(90) = 0.0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f a3(0, 1, 0); // magnitude 1, parallel to y-axis</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ofVec3f b3(0, -1, 0); // magnitude 1, 180 degree angle to a3</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// dot = a3.dot(b3); // dot is 1 * 1 * cos(180) = -1.0</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// </span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">dot</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n\t\n    <span class=\"token comment\" spellcheck=\"true\">//-----------------------------------------------</span>\n    <span class=\"token comment\" spellcheck=\"true\">// this methods are deprecated in 006 please use:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// getScaled</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getScaled() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f <span class=\"token function\">rescaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// scale</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method scale() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f<span class=\"token operator\">&amp;</span> <span class=\"token function\">rescale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getRotated</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getRotated() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f <span class=\"token function\">rotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getRotated should this be const???</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getRotated() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f <span class=\"token function\">rotated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getNormalized</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getNormalized() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f <span class=\"token function\">normalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getLimited</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getLimited() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f <span class=\"token function\">limited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getCrossed</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getCrossed() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f <span class=\"token function\">crossed</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// getPerpendicular</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getPerpendicular() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f <span class=\"token function\">perpendiculared</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// use getMapped</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getMapped() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f <span class=\"token function\">mapped</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vy<span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vz <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// use squareDistance</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method squareDistance() instead.\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span>  <span class=\"token function\">distanceSquared</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// use getInterpolated</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getInterpolated() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f <span class=\"token function\">interpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n    <span class=\"token comment\" spellcheck=\"true\">// use getMiddle</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getMiddle() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f <span class=\"token function\">middled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// use getRotated</span>\n    <span class=\"token function\">OF_DEPRECATED_MSG</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Use member method getRotated() instead.\"</span><span class=\"token punctuation\">,</span> ofVec3f <span class=\"token function\">rotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pivot<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t<span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \n\n    <span class=\"token comment\" spellcheck=\"true\">// return all zero vector</span>\n    <span class=\"token keyword\">static</span> ofVec3f <span class=\"token function\">zero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\" spellcheck=\"true\">// return all one vector</span>\n    <span class=\"token keyword\">static</span> ofVec3f <span class=\"token function\">one</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\cond INTERNAL</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Non-Member operators</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\nofVec3f <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/////////////////</span>\n<span class=\"token comment\" spellcheck=\"true\">// Implementation</span>\n<span class=\"token comment\" spellcheck=\"true\">/////////////////</span>\n\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec2f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec4f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _all <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_all<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_all<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>_all<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _z <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>_x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>_y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>_z<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">z</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Getters and Setters.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _scalar <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> _scalar<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> _scalar<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> _scalar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _z <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> _x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> _y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> _z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Check similarity/equality.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">==</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">!=</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fabs</span><span class=\"token punctuation\">(</span>z <span class=\"token operator\">-</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * Checks if vectors look in the same direction.\n */</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">isAligned</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span>  angle <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">align</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">isAligned</span><span class=\"token punctuation\">(</span> vec<span class=\"token punctuation\">,</span> tolerance <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">isAlignedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">angleRad</span><span class=\"token punctuation\">(</span> vec <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span>  angle <span class=\"token operator\">&lt;</span> tolerance<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">alignRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">isAlignedRad</span><span class=\"token punctuation\">(</span> vec<span class=\"token punctuation\">,</span> tolerance <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Operator overloading for ofVec3f</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n\n<span class=\"token keyword\">inline</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tos <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> ofVec3f<span class=\"token operator\">&amp;</span> vec<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tis <span class=\"token operator\">>></span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tis <span class=\"token operator\">>></span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tis <span class=\"token operator\">>></span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> z<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token operator\">+</span><span class=\"token operator\">=</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">+</span><span class=\"token operator\">=</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz<span class=\"token operator\">+</span><span class=\"token operator\">=</span>pnt<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> z<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">-</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">-</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">-</span><span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token operator\">*</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">*</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz<span class=\"token operator\">*</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> vec<span class=\"token punctuation\">.</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> x<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">:</span> x <span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span>y<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> y<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">:</span> y<span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span>z<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> z<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token operator\">:</span> z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tvec<span class=\"token punctuation\">.</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> x<span class=\"token operator\">/</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">:</span> x<span class=\"token punctuation\">;</span>\n\tvec<span class=\"token punctuation\">.</span>y<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> y<span class=\"token operator\">/</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">:</span> y<span class=\"token punctuation\">;</span>\n\tvec<span class=\"token punctuation\">.</span>z<span class=\"token operator\">!=</span><span class=\"token number\">0</span> <span class=\"token operator\">?</span> z<span class=\"token operator\">/</span><span class=\"token operator\">=</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token operator\">:</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>y<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//operator overloading for float</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//inline void ofVec3f::operator=( const float f){</span>\n<span class=\"token comment\" spellcheck=\"true\">//\tx = f;</span>\n<span class=\"token comment\" spellcheck=\"true\">//\ty = f;</span>\n<span class=\"token comment\" spellcheck=\"true\">//\tz = f;</span>\n<span class=\"token comment\" spellcheck=\"true\">//}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">+</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">+</span>f<span class=\"token punctuation\">,</span> z<span class=\"token operator\">+</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">+</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">+</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">-</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">-</span>f<span class=\"token punctuation\">,</span> z<span class=\"token operator\">-</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">-</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">-</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">-</span><span class=\"token operator\">=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">*</span>f<span class=\"token punctuation\">,</span> z<span class=\"token operator\">*</span>f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx<span class=\"token operator\">*</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">*</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n\tz<span class=\"token operator\">*</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">/</span>f<span class=\"token punctuation\">,</span> y<span class=\"token operator\">/</span>f<span class=\"token punctuation\">,</span> z<span class=\"token operator\">/</span>f <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t\n\tx<span class=\"token operator\">/</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n\ty<span class=\"token operator\">/</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n\tz<span class=\"token operator\">/</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//Scale</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">rescaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> l <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">rescale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>\n\t\tz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">/</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Rotation</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">rotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">,</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tofVec3f ax <span class=\"token operator\">=</span> axis<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>angle<span class=\"token operator\">*</span>DEG_TO_RAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> sina <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosa <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosb <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> cosa<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t   x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t   x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tofVec3f ax <span class=\"token operator\">=</span> axis<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> angle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> sina <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosa <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosb <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> cosa<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t   x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t   x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t\t\t\t   <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofVec3f ax <span class=\"token operator\">=</span> axis<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>angle<span class=\"token operator\">*</span>DEG_TO_RAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> sina <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosa <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosb <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> cosa<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> nx <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> ny <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> nz <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> nx<span class=\"token punctuation\">;</span> y <span class=\"token operator\">=</span> ny<span class=\"token punctuation\">;</span> z <span class=\"token operator\">=</span> nz<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofVec3f ax <span class=\"token operator\">=</span> axis<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> angle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> sina <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosa <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosb <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> cosa<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> nx <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> ny <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> nz <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> nx<span class=\"token punctuation\">;</span> y <span class=\"token operator\">=</span> ny<span class=\"token punctuation\">;</span> z <span class=\"token operator\">=</span> nz<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// const???</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">rotated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">,</span>ay<span class=\"token punctuation\">,</span>az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> nx <span class=\"token operator\">=</span> c <span class=\"token operator\">*</span> e <span class=\"token operator\">*</span> x <span class=\"token operator\">-</span> c <span class=\"token operator\">*</span> f <span class=\"token operator\">*</span> y <span class=\"token operator\">+</span> d <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> f <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> e <span class=\"token operator\">-</span> b <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y <span class=\"token operator\">-</span> b <span class=\"token operator\">*</span> c <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> nz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> f <span class=\"token operator\">-</span> a <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> f <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y <span class=\"token operator\">+</span> a <span class=\"token operator\">*</span> c <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> nz <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> c <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>ay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> d <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>ay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> e <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> nx <span class=\"token operator\">=</span> c <span class=\"token operator\">*</span> e <span class=\"token operator\">*</span> x <span class=\"token operator\">-</span> c <span class=\"token operator\">*</span> f <span class=\"token operator\">*</span> y <span class=\"token operator\">+</span> d <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> f <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> e <span class=\"token operator\">-</span> b <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y <span class=\"token operator\">-</span> b <span class=\"token operator\">*</span> c <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> nz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> f <span class=\"token operator\">-</span> a <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> f <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y <span class=\"token operator\">+</span> a <span class=\"token operator\">*</span> c <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> nx<span class=\"token punctuation\">,</span> ny<span class=\"token punctuation\">,</span> nz <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> d <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>DEG_TO_RAD<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> nx <span class=\"token operator\">=</span> c <span class=\"token operator\">*</span> e <span class=\"token operator\">*</span> x <span class=\"token operator\">-</span> c <span class=\"token operator\">*</span> f <span class=\"token operator\">*</span> y <span class=\"token operator\">+</span> d <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> f <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> e <span class=\"token operator\">-</span> b <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y <span class=\"token operator\">-</span> b <span class=\"token operator\">*</span> c <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> nz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> f <span class=\"token operator\">-</span> a <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> f <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y <span class=\"token operator\">+</span> a <span class=\"token operator\">*</span> c <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t\n\tx <span class=\"token operator\">=</span> nx<span class=\"token punctuation\">;</span> y <span class=\"token operator\">=</span> ny<span class=\"token punctuation\">;</span> z <span class=\"token operator\">=</span> nz<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> ax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ay<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> az<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> b <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> c <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>ay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> d <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>ay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> e <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> f <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>az<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> nx <span class=\"token operator\">=</span> c <span class=\"token operator\">*</span> e <span class=\"token operator\">*</span> x <span class=\"token operator\">-</span> c <span class=\"token operator\">*</span> f <span class=\"token operator\">*</span> y <span class=\"token operator\">+</span> d <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> f <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> e <span class=\"token operator\">-</span> b <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> f<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y <span class=\"token operator\">-</span> b <span class=\"token operator\">*</span> c <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> nz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">*</span> f <span class=\"token operator\">-</span> a <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> x <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> d <span class=\"token operator\">*</span> f <span class=\"token operator\">+</span> b <span class=\"token operator\">*</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> y <span class=\"token operator\">+</span> a <span class=\"token operator\">*</span> c <span class=\"token operator\">*</span> z<span class=\"token punctuation\">;</span>\n\t\n\tx <span class=\"token operator\">=</span> nx<span class=\"token punctuation\">;</span> y <span class=\"token operator\">=</span> ny<span class=\"token punctuation\">;</span> z <span class=\"token operator\">=</span> nz<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Rotate point by angle (deg) around line defined by pivot and axis.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">rotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pivot<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">,</span> pivot<span class=\"token punctuation\">,</span> axis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t   <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pivot<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t   <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\tofVec3f ax <span class=\"token operator\">=</span> axis<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> tx <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> ty <span class=\"token operator\">=</span> y <span class=\"token operator\">-</span> pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> tz <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> pivot<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>angle<span class=\"token operator\">*</span>DEG_TO_RAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> sina <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosa <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosb <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> cosa<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> xrot <span class=\"token operator\">=</span> tx<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> ty<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> tz<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> yrot <span class=\"token operator\">=</span> tx<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> ty<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> tz<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> zrot <span class=\"token operator\">=</span> tx<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> ty<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> tz<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> xrot<span class=\"token operator\">+</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> yrot<span class=\"token operator\">+</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> zrot<span class=\"token operator\">+</span>pivot<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pivot<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\tofVec3f ax <span class=\"token operator\">=</span> axis<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> tx <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> ty <span class=\"token operator\">=</span> y <span class=\"token operator\">-</span> pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> tz <span class=\"token operator\">=</span> z <span class=\"token operator\">-</span> pivot<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> angle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> sina <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosa <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosb <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> cosa<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> xrot <span class=\"token operator\">=</span> tx<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> ty<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> tz<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> yrot <span class=\"token operator\">=</span> tx<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> ty<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> tz<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> zrot <span class=\"token operator\">=</span> tx<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> ty<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> tz<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> xrot<span class=\"token operator\">+</span>pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> yrot<span class=\"token operator\">+</span>pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> zrot<span class=\"token operator\">+</span>pivot<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pivot<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t<span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tofVec3f ax <span class=\"token operator\">=</span> axis<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">-</span><span class=\"token operator\">=</span> pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">-</span><span class=\"token operator\">=</span> pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">-</span><span class=\"token operator\">=</span> pivot<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>angle<span class=\"token operator\">*</span>DEG_TO_RAD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> sina <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosa <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosb <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> cosa<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> xrot <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> yrot <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> zrot <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tx <span class=\"token operator\">=</span> xrot <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> yrot <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> zrot <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t   <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pivot<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t   <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> axis <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tofVec3f ax <span class=\"token operator\">=</span> axis<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">-</span><span class=\"token operator\">=</span> pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">-</span><span class=\"token operator\">=</span> pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">-</span><span class=\"token operator\">=</span> pivot<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> a <span class=\"token operator\">=</span> angle<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> sina <span class=\"token operator\">=</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosa <span class=\"token operator\">=</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> cosb <span class=\"token operator\">=</span> <span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> cosa<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> xrot <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> yrot <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> zrot <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>cosb <span class=\"token operator\">-</span> ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> ax<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>sina<span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">+</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>ax<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>cosb <span class=\"token operator\">+</span> cosa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\tx <span class=\"token operator\">=</span> xrot <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> yrot <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> zrot <span class=\"token operator\">+</span> pivot<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Map point to coordinate system defined by origin, vx, vy, and vz.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">mapped</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t   <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t   <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vy<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t   <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vz <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getMapped</span><span class=\"token punctuation\">(</span>origin<span class=\"token punctuation\">,</span> vx<span class=\"token punctuation\">,</span> vy<span class=\"token punctuation\">,</span> vz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getMapped</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vy<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t\t  <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vz <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> origin<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> x<span class=\"token operator\">*</span>vx<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>vz<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span>\n\t\t\t\t   origin<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> x<span class=\"token operator\">*</span>vx<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>vz<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n\t\t\t\t   origin<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> x<span class=\"token operator\">*</span>vx<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>vz<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> origin<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vx<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vy<span class=\"token punctuation\">,</span>\n\t\t\t\t\t\t\t <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vz <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> xmap <span class=\"token operator\">=</span> origin<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> x<span class=\"token operator\">*</span>vx<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>vz<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> ymap <span class=\"token operator\">=</span>  origin<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> x<span class=\"token operator\">*</span>vx<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>vz<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> origin<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> x<span class=\"token operator\">*</span>vx<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vy<span class=\"token punctuation\">.</span>z <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>vz<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> xmap<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> ymap<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Distance between two points.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> vx <span class=\"token operator\">=</span> x<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vy <span class=\"token operator\">=</span> y<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vz <span class=\"token operator\">=</span> z<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>vx<span class=\"token operator\">*</span>vx <span class=\"token operator\">+</span> vy<span class=\"token operator\">*</span>vy <span class=\"token operator\">+</span> vz<span class=\"token operator\">*</span>vz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span>  ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">distanceSquared</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">squareDistance</span><span class=\"token punctuation\">(</span>pnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span>  ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">squareDistance</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> vx <span class=\"token operator\">=</span> x<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vy <span class=\"token operator\">=</span> y<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> vz <span class=\"token operator\">=</span> z<span class=\"token operator\">-</span>pnt<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> vx<span class=\"token operator\">*</span>vx <span class=\"token operator\">+</span> vy<span class=\"token operator\">*</span>vy <span class=\"token operator\">+</span> vz<span class=\"token operator\">*</span>vz<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Linear interpolation.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">/**\n * p==0.0 results in this point, p==0.5 results in the\n * midpoint, and p==1.0 results in pnt being returned.\n */</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">interpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span>pnt<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span>\n\t\t\t\t   y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span>\n\t\t\t\t   z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>p <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> y<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>y<span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> z<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">-</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pnt<span class=\"token punctuation\">.</span>z<span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">middled</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span>pnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> pnt <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>z<span class=\"token operator\">+</span>pnt<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2.0f</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Average (centroid) among points.</span>\n<span class=\"token comment\" spellcheck=\"true\">// Addition is sometimes useful for calculating averages too.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">*</span> points<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">+</span><span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">+</span><span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t\tz <span class=\"token operator\">+</span><span class=\"token operator\">=</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tx <span class=\"token operator\">/</span><span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">/</span><span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">/</span><span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Normalization</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">normalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">/</span>length<span class=\"token punctuation\">,</span> y<span class=\"token operator\">/</span>length<span class=\"token punctuation\">,</span> z<span class=\"token operator\">/</span>length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">/</span><span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">/</span><span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n\t\tz <span class=\"token operator\">/</span><span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Limit length.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">limited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    ofVec3f limited<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> lengthSquared <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> lengthSquared <span class=\"token operator\">></span> max<span class=\"token operator\">*</span>max <span class=\"token operator\">&amp;&amp;</span> lengthSquared <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">float</span> ratio <span class=\"token operator\">=</span> max<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>lengthSquared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        limited<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>ratio<span class=\"token punctuation\">,</span> y<span class=\"token operator\">*</span>ratio<span class=\"token punctuation\">,</span> z<span class=\"token operator\">*</span>ratio<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        limited<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> limited<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> lengthSquared <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> lengthSquared <span class=\"token operator\">></span> max<span class=\"token operator\">*</span>max <span class=\"token operator\">&amp;&amp;</span> lengthSquared <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">float</span> ratio <span class=\"token operator\">=</span> max<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>lengthSquared<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">*</span><span class=\"token operator\">=</span> ratio<span class=\"token punctuation\">;</span>\n        y <span class=\"token operator\">*</span><span class=\"token operator\">=</span> ratio<span class=\"token punctuation\">;</span>\n        z <span class=\"token operator\">*</span><span class=\"token operator\">=</span> ratio<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Perpendicular vector.</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">crossed</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getCrossed</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getCrossed</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token operator\">-</span> z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span>\n\t\t\t\t   z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">,</span>\n\t\t\t\t   x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">cross</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> _x <span class=\"token operator\">=</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token operator\">-</span> z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> _y <span class=\"token operator\">=</span> z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\tz <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\tx <span class=\"token operator\">=</span> _x<span class=\"token punctuation\">;</span>\n\ty <span class=\"token operator\">=</span> _y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * Normalized perpendicular.\n */</span>\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">perpendiculared</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> crossX <span class=\"token operator\">=</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token operator\">-</span> z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> crossY <span class=\"token operator\">=</span> z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> crossZ <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>crossX<span class=\"token operator\">*</span>crossX <span class=\"token operator\">+</span>\n\t\t\t\t\t\t\t   crossY<span class=\"token operator\">*</span>crossY <span class=\"token operator\">+</span>\n\t\t\t\t\t\t\t   crossZ<span class=\"token operator\">*</span>crossZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> crossX<span class=\"token operator\">/</span>length<span class=\"token punctuation\">,</span> crossY<span class=\"token operator\">/</span>length<span class=\"token punctuation\">,</span> crossZ<span class=\"token operator\">/</span>length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f<span class=\"token operator\">&amp;</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> crossX <span class=\"token operator\">=</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token operator\">-</span> z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> crossY <span class=\"token operator\">=</span> z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> crossZ <span class=\"token operator\">=</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>crossX<span class=\"token operator\">*</span>crossX <span class=\"token operator\">+</span>\n\t\t\t\t\t\t\t   crossY<span class=\"token operator\">*</span>crossY <span class=\"token operator\">+</span>\n\t\t\t\t\t\t\t   crossZ<span class=\"token operator\">*</span>crossZ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">=</span> crossX<span class=\"token operator\">/</span>length<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">=</span> crossY<span class=\"token operator\">/</span>length<span class=\"token punctuation\">;</span>\n\t\tz <span class=\"token operator\">=</span> crossZ<span class=\"token operator\">/</span>length<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\t\ty <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\t\tz <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Length</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span> x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">lengthSquared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">*</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * Angle (deg) between two vectors.\n * This is an unsigned relative angle from 0 to 180.\n * http://www.euclideanspace.com/maths/algebra/vectors/angleBetween/index.htm\n */</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tofVec3f n1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofVec3f n2 <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">acos</span><span class=\"token punctuation\">(</span> n1<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>RAD_TO_DEG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">angleRad</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tofVec3f n1 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tofVec3f n2 <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token function\">acos</span><span class=\"token punctuation\">(</span> n1<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>n2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">/**\n * Dot Product.\n */</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofVec3f<span class=\"token operator\">::</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x <span class=\"token operator\">+</span> y<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y <span class=\"token operator\">+</span> z<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n\n\n\n<span class=\"token comment\" spellcheck=\"true\">// Non-Member operators</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token keyword\">inline</span> ofVec3f <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> f<span class=\"token operator\">+</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> f<span class=\"token operator\">-</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> f<span class=\"token operator\">*</span>vec<span class=\"token punctuation\">.</span>z <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">inline</span> ofVec3f <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f<span class=\"token operator\">&amp;</span> vec <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span> f<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> f<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> f<span class=\"token operator\">/</span>vec<span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\endcond</span>\n","type":"source","static":true}}],"fetch":[]}