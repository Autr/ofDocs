{"data":[{"page":{"entry":{"name":"ofColor.h","filename":"ofColor.h","absolute":"/Users/Gilbert/Code/openFrameworks/libs/openFrameworks/types/ofColor.h","path":"/openframeworks/types/ofColor_h","route":"/openframeworks/types/ofColor.h","dir":"../libs/openFrameworks/types","ext":"h","type":"source","id":289,"parent":285,"breadcrumbs":[285,164],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;limits></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"glm/common.hpp\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\class ofColor_</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief ofColor represents a color in openFrameworks.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// The default ofColor uses unsigned char values [0,255], but use</span>\n<span class=\"token comment\" spellcheck=\"true\">/// ofFloatColor for floating point values [0.0,1.0], or ofShortColor for</span>\n<span class=\"token comment\" spellcheck=\"true\">/// unsigned short ints [0,[65,535]]. ofColor can be represented by an RGB</span>\n<span class=\"token comment\" spellcheck=\"true\">/// value, an HSB value or a hex value.</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\tparam PixelType The data type used to represent a single pixel value.</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\name Create an ofColor</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a default white color.</span>\n    <span class=\"token function\">ofColor_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">r</span><span class=\"token punctuation\">(</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct an ofColor_ by using channel values.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param red The red component.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param green The green component.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param blue The blue component.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param alpha The alpha component.</span>\n    <span class=\"token function\">ofColor_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> red<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> green<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> blue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha <span class=\"token operator\">=</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct a grayscale ofColor_ by specifying a single number.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param gray A grayscale value.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param alpha The opacity of the color.</span>\n    <span class=\"token function\">ofColor_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> gray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha <span class=\"token operator\">=</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct an ofColor_ from an existing ofColor_.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning Depending on the PixelType and SrcType used, color precision</span>\n    <span class=\"token comment\" spellcheck=\"true\">///          may be lost when converting a higher precision to a lower</span>\n    <span class=\"token comment\" spellcheck=\"true\">///          precision representation.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The ofColor_ to copy.</span>\n    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\n    <span class=\"token function\">ofColor_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Construct an ofColor_ from an existing ofColor_.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The ofColor_ to copy.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param alpha The new alpha value to replace the alpha value in color.</span>\n    <span class=\"token function\">ofColor_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Create an ofColor_ from an HSB representation.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param hue The hue of the color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param saturation The saturation of the color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param brightness The brightness of the color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param alpha The alpha value of the color.</span>\n    <span class=\"token keyword\">static</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">fromHsb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> hue<span class=\"token punctuation\">,</span>\n                                       <span class=\"token keyword\">float</span> saturation<span class=\"token punctuation\">,</span>\n                                       <span class=\"token keyword\">float</span> brightness<span class=\"token punctuation\">,</span>\n                                       <span class=\"token keyword\">float</span> alpha <span class=\"token operator\">=</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Create an ofColor_ from a hexadecimal value.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param hexColor A color in hexadecimal form.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param alpha The alpha value of the color.</span>\n    <span class=\"token keyword\">static</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">fromHex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hexColor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha <span class=\"token operator\">=</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\name Data Accessors</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief A union representing the internal data.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\sa r, g, b and a</span>\n    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n            PixelType r<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; \\brief The red color component.</span>\n            PixelType g<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; \\brief The green color component.</span>\n            PixelType b<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; \\brief The blue color component.</span>\n            PixelType a<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; \\brief The alpha color component.</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        PixelType v<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">///&lt; \\brief The pixel values as an array.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\name Setters</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Set an ofColor_ by using RGB values.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param red The red component.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param green The green component.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param blue The blue component.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param alpha The alpha component.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> red<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> green<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> blue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha <span class=\"token operator\">=</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Set a grayscale ofColor_ by specifying a single number.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param gray A grayscale value.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param alpha The opacity of the color.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> gray<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha <span class=\"token operator\">=</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Set an ofColor_ from an existing ofColor_.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// This will use the R, G, B and A components from the passed color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The ofColor_ to copy.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Set an ofColor_ from a hexadecimal representation.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha value _should not_ be packed in the hexColor and</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     must be specified separately.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param hexColor An RGB color in hexadecimal form.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param alpha The alpha value of the color.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setHex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hexColor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha <span class=\"token operator\">=</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the hue of this color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param hue A hue value to set in the range of 0 - limit().</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setHue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> hue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the hue angle of this color.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param angle A hue angle value to set in the range of 0 - 360 degrees.</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setHueAngle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the saturation of this color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// This method uses HSB not HSL. So red desaturated is white, not gray</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param saturation A saturation value value in the range of 0 - limit().</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\sa http://en.wikipedia.org/wiki/HSL_and_HSV</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setSaturation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> saturation<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the brightness of this color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param brightness A brightness value to set in the range of 0 - limit().</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setBrightness</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> brightness<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Set the color using HSB components.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param hue A hue value to set in the range of 0 - limit().</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param saturation A saturation value to set in the range of 0 - limit().</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param brightness A brightness value to set in the range of 0 - limit().</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param alpha An alpha value to set in the range of 0 - limit().</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">setHsb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> hue<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">float</span> saturation<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">float</span> brightness<span class=\"token punctuation\">,</span>\n                <span class=\"token keyword\">float</span> alpha <span class=\"token operator\">=</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\name Modifiers</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamp values between 0 and the limit().</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Clamps the value of each component, R, G, B and A to a maximum of</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// limit() and a minimum of zero.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Invert the R, G and B components.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Performs an inversion operation on the color by replacing the red, green</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// and blue components with their original value subtracted from the</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// limit().</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token function\">invert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Normalize the R, G and B components.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Performs a normalization operation on the red, green and blue components</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// by scaling them by brightness of the original color divided by the</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// limit().  The brightness is calculated by finding the maximum of</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// original red, green and blue components.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// In short: ofColor / (brightness / limit())</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief A linear interpolation between all components of two colors.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// The linear interpolation is carried out</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// on _all_ components, R, G, B _and_ A.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param target The target color corresponding to an amount of 1.0.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param amount The amount (between 0.0 and 1.0) to interpolate.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     A value of 0.0 will yield an unchanged color.  A value of 1.0</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     will yield the target color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token function\">lerp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\name Getters</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief A non-destructive version of clamp().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\sa clamp()</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A copy of this color, clamped.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">getClamped</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief A non-destructive version of invert().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\sa invert()</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A copy of this color, inverted.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">getInverted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief A non-destructive version of normalize().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa normalize()</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A copy of this color, normalized.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief A non-destructive version of lerp().</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param target The target color corresponding to an amount of 1.0.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param amount The amount (between 0.0 and 1.0) to interpolate.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     A value of 0.0 will yield an unchanged color.  A value of 1.0</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     will yield the target color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A copy of this color, lerped.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\sa lerp()</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token function\">getLerped</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> target<span class=\"token punctuation\">,</span>\n                                  <span class=\"token keyword\">float</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Get a 24-bit hexadecimal representation of the RGB color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning This method does _not_ encode the alpha component.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns An integer representing an RGB color.</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">getHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the Hue of this color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// The color is converted from the default RGB to an HSB color space and</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// the resulting Hue value is returned.  The resulting hue value will</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// always be returned in the range 0 - limit().</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The Hue value in the range 0 - limit().</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getHue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the Hue angle of this color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// The color is converted from the default RGB to an HSB color space and</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// the resulting Hue angle is returned.  The resulting hue value will</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// always be returned in degrees in the range 0 - 360.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The Hue angle in the range 0 - 360.</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getHueAngle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the Saturation of this color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// The color is converted from the default RGB to an HSB color space and</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// the resulting saturation is returned.  The resulting saturation value</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// will always be returned in the range 0 - limit().</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The saturation in the range 0 - limit().</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getSaturation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculate the brightness of of the R, G and B components.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Brightness is simply the maximum of the three color components. This</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// method of calculating brightness is used by Photoshop (HSB) and</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Processing (HSB).  Note that brightness is also called \"Value\".</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns the brightness in the range 0 - limit().</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getBrightness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Calculate the lightness of the R, G and B components.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Lightness is simply the average of the three color components. This</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// method of calculating lightness is used by the Lab and HSL color spaces.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns the lightness in the range 0 - limit().</span>\n    <span class=\"token keyword\">float</span> <span class=\"token function\">getLightness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Extract the hue, saturation and brightness (HSB) from this color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param hue A reference to the hue to fill. Will be in the range of</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     0 - limit().</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param saturation A reference to the saturation to fill. Will be in the</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///\t\trange of 0 - limit().</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param brightness A reference to the brightness to fill. Will be in the</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     range of 0 - limit().</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getHsb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> hue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> saturation<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> brightness<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Get the maximum value of a color component.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The value associated with a fully saturated color component.</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">float</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\name Operators</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Assign a color using an existing color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// R, G, B and A components are set to the the values of the assigned</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning Depending on the PixelType and SrcType used, color precision</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     may be lost when converting a higher precision to a lower precision</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     representation.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The color to assign.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself.</span>\n    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Assign a color using a grayscale value.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param value The grayscale value.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Test two colors for equality.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns true iff the R, G, B and A components are all equal.</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Test two colors for inequality.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns true iff any of the R, G, B or A components are not equal.</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped addition operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Add two colors by summing and clamping their R, G and B components.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The color to add.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span>  <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped addition operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Add a value to each of the R, G and B components and clamp each.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The value to add.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span>  <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> color<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped addition operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Add two colors by summing and clamping their R, G and B components.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The color to add.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself, the new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped addition operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Add a value to each of the R, G and B components and clamp each.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The value to add.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself, the new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped subtraction operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Subtract two colors by subtracting and clamping their R, G and B</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// components.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The color to subtract.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span>  <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped subtraction operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Subtract a value from each of the R, G and B components and clamp each.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param value The value to subtract.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span>  <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped subtraction operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Add two colors by subtracting and clamping their R, G and B components.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The color to subtract.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself, the new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped subtraction operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Subtract a value to each of the R, G and B components and clamp each.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The value to subtract.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself, the new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped multiplication operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Multiply two colors by multiplying and clamping their R, G and B</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// components.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The color to multiply.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span>  <span class=\"token keyword\">operator</span> <span class=\"token operator\">*</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped scalar multiplication operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Multiply the R, G and B components by a scaler and clamp each.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param value The value to multiply.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span>  <span class=\"token keyword\">operator</span> <span class=\"token operator\">*</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped multiplication operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Multiply two colors by multiplying and clamping their R, G and B</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// components.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The color to multiply.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself, the new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped scalar multiplication operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Multiply the R, G and B components by a scaler and clamp each.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param value The scaler value.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself, the new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped division operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Divide two colors by treating the passed color components as divisors.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The divisor color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span>  <span class=\"token keyword\">operator</span> <span class=\"token operator\">/</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped scalar division operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Divide each of the R, G and B components by a scalar and clamp each.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param value The divisor value.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span>  <span class=\"token keyword\">operator</span> <span class=\"token operator\">/</span>  <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped division operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Divide two colors by treating the passed color components as divisors.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The divisor color.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself, the new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Clamped scalar division operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Divide each of the R, G and B components by a scalar and clamp each.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\warning The alpha component is ignored.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param value The divisor value.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns A reference to itself, the new clamped color.</span>\n    ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Array subscript operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// If n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// alpha.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param n An index 0-3 of the component to get.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The value of the requested component.</span>\n    <span class=\"token keyword\">const</span> PixelType<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief Array subscript operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// If n is 0 returns .r, if 1 returns .g, if 2 returns .b, if 3 returns</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// alpha.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param n An index 0-3 of the component to get.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The value of the requested component.</span>\n\tPixelType<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief An output stream operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Colors can be serialized into comma separated values (CSV) using the</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// output stream operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param os An output stream reference.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The color to write to the output stream.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The passed output stream reference, useful for method chaining.</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PixelType<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>g <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> color<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tos <span class=\"token operator\">&lt;&lt;</span> color<span class=\"token punctuation\">.</span>r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> color<span class=\"token punctuation\">.</span>g <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> color<span class=\"token punctuation\">.</span>b <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> color<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\brief An input stream operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// Colors can be deserialized from comma separated values (CSV) input</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// stream using the input stream operator.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param is An input stream reference.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\param color The color to fill with the input stream.</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\returns The passed input stream reference, useful for method chaining.</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">>></span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>PixelType<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> component<span class=\"token punctuation\">;</span>\n\t\t\tis <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>skipws <span class=\"token operator\">>></span> component<span class=\"token punctuation\">;</span>\n\t\t\tcolor<span class=\"token punctuation\">.</span>r <span class=\"token operator\">=</span> component<span class=\"token punctuation\">;</span>\n\t\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tis <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>skipws <span class=\"token operator\">>></span> component<span class=\"token punctuation\">;</span>\n\t\t\tcolor<span class=\"token punctuation\">.</span>g <span class=\"token operator\">=</span> component<span class=\"token punctuation\">;</span>\n\t\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tis <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>skipws <span class=\"token operator\">>></span> component<span class=\"token punctuation\">;</span>\n\t\t\tcolor<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> component<span class=\"token punctuation\">;</span>\n\t\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tis <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>skipws <span class=\"token operator\">>></span> component<span class=\"token punctuation\">;</span>\n\t\t\tcolor<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> component<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\tis <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>skipws <span class=\"token operator\">>></span> color<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">;</span>\n\t\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tis <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>skipws <span class=\"token operator\">>></span> color<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">;</span>\n\t\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tis <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>skipws <span class=\"token operator\">>></span> color<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">;</span>\n\t\t\tis<span class=\"token punctuation\">.</span><span class=\"token function\">ignore</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tis <span class=\"token operator\">>></span> std<span class=\"token operator\">::</span>skipws <span class=\"token operator\">>></span> color<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\name Predefined Colors</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief A collection of static colors defined by name.</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// These constants allow the user to access colors by name.  For example,</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// if using ofColor, one might set a color in the following way:</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// ~~~~{.cpp}</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     ofColor myColor = ofColor::white;</span>\n    <span class=\"token comment\" spellcheck=\"true\">///     // myColor is now full white (255,255,255,255).</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// ~~~~</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// The list of colors is based upon the CSS names colors and can be viewed</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// [here](http://www.w3schools.com/cssref/css_colornames.asp).</span>\n    <span class=\"token comment\" spellcheck=\"true\">///</span>\n    <span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> white<span class=\"token punctuation\">,</span> gray<span class=\"token punctuation\">,</span> black<span class=\"token punctuation\">,</span> red<span class=\"token punctuation\">,</span> green<span class=\"token punctuation\">,</span> blue<span class=\"token punctuation\">,</span> cyan<span class=\"token punctuation\">,</span> magenta<span class=\"token punctuation\">,</span>\n    yellow<span class=\"token punctuation\">,</span>aliceBlue<span class=\"token punctuation\">,</span>antiqueWhite<span class=\"token punctuation\">,</span>aqua<span class=\"token punctuation\">,</span>aquamarine<span class=\"token punctuation\">,</span>azure<span class=\"token punctuation\">,</span>beige<span class=\"token punctuation\">,</span>bisque<span class=\"token punctuation\">,</span>blanchedAlmond<span class=\"token punctuation\">,</span>\n    blueViolet<span class=\"token punctuation\">,</span>brown<span class=\"token punctuation\">,</span>burlyWood<span class=\"token punctuation\">,</span>cadetBlue<span class=\"token punctuation\">,</span>chartreuse<span class=\"token punctuation\">,</span>chocolate<span class=\"token punctuation\">,</span>coral<span class=\"token punctuation\">,</span>cornflowerBlue<span class=\"token punctuation\">,</span>cornsilk<span class=\"token punctuation\">,</span>\n    crimson<span class=\"token punctuation\">,</span>darkBlue<span class=\"token punctuation\">,</span>darkCyan<span class=\"token punctuation\">,</span>darkGoldenRod<span class=\"token punctuation\">,</span>darkGray<span class=\"token punctuation\">,</span>darkGrey<span class=\"token punctuation\">,</span>darkGreen<span class=\"token punctuation\">,</span>darkKhaki<span class=\"token punctuation\">,</span>\n    darkMagenta<span class=\"token punctuation\">,</span>darkOliveGreen<span class=\"token punctuation\">,</span>darkorange<span class=\"token punctuation\">,</span>darkOrchid<span class=\"token punctuation\">,</span>darkRed<span class=\"token punctuation\">,</span>darkSalmon<span class=\"token punctuation\">,</span>darkSeaGreen<span class=\"token punctuation\">,</span>\n    darkSlateBlue<span class=\"token punctuation\">,</span>darkSlateGray<span class=\"token punctuation\">,</span>darkSlateGrey<span class=\"token punctuation\">,</span>darkTurquoise<span class=\"token punctuation\">,</span>darkViolet<span class=\"token punctuation\">,</span>deepPink<span class=\"token punctuation\">,</span>\n    deepSkyBlue<span class=\"token punctuation\">,</span>dimGray<span class=\"token punctuation\">,</span>dimGrey<span class=\"token punctuation\">,</span>dodgerBlue<span class=\"token punctuation\">,</span>fireBrick<span class=\"token punctuation\">,</span>floralWhite<span class=\"token punctuation\">,</span>forestGreen<span class=\"token punctuation\">,</span>fuchsia<span class=\"token punctuation\">,</span>\n    gainsboro<span class=\"token punctuation\">,</span>ghostWhite<span class=\"token punctuation\">,</span>gold<span class=\"token punctuation\">,</span>goldenRod<span class=\"token punctuation\">,</span>grey<span class=\"token punctuation\">,</span>greenYellow<span class=\"token punctuation\">,</span>honeyDew<span class=\"token punctuation\">,</span>hotPink<span class=\"token punctuation\">,</span>indianRed<span class=\"token punctuation\">,</span>indigo<span class=\"token punctuation\">,</span>\n    ivory<span class=\"token punctuation\">,</span>khaki<span class=\"token punctuation\">,</span>lavender<span class=\"token punctuation\">,</span>lavenderBlush<span class=\"token punctuation\">,</span>lawnGreen<span class=\"token punctuation\">,</span>lemonChiffon<span class=\"token punctuation\">,</span>lightBlue<span class=\"token punctuation\">,</span>lightCoral<span class=\"token punctuation\">,</span>\n    lightCyan<span class=\"token punctuation\">,</span>lightGoldenRodYellow<span class=\"token punctuation\">,</span>lightGray<span class=\"token punctuation\">,</span>lightGrey<span class=\"token punctuation\">,</span>lightGreen<span class=\"token punctuation\">,</span>lightPink<span class=\"token punctuation\">,</span>lightSalmon<span class=\"token punctuation\">,</span>\n    lightSeaGreen<span class=\"token punctuation\">,</span>lightSkyBlue<span class=\"token punctuation\">,</span>lightSlateGray<span class=\"token punctuation\">,</span>lightSlateGrey<span class=\"token punctuation\">,</span>lightSteelBlue<span class=\"token punctuation\">,</span>lightYellow<span class=\"token punctuation\">,</span>\n    lime<span class=\"token punctuation\">,</span>limeGreen<span class=\"token punctuation\">,</span>linen<span class=\"token punctuation\">,</span>maroon<span class=\"token punctuation\">,</span>mediumAquaMarine<span class=\"token punctuation\">,</span>mediumBlue<span class=\"token punctuation\">,</span>mediumOrchid<span class=\"token punctuation\">,</span>mediumPurple<span class=\"token punctuation\">,</span>\n    mediumSeaGreen<span class=\"token punctuation\">,</span>mediumSlateBlue<span class=\"token punctuation\">,</span>mediumSpringGreen<span class=\"token punctuation\">,</span>mediumTurquoise<span class=\"token punctuation\">,</span>mediumVioletRed<span class=\"token punctuation\">,</span>\n    midnightBlue<span class=\"token punctuation\">,</span>mintCream<span class=\"token punctuation\">,</span>mistyRose<span class=\"token punctuation\">,</span>moccasin<span class=\"token punctuation\">,</span>navajoWhite<span class=\"token punctuation\">,</span>navy<span class=\"token punctuation\">,</span>oldLace<span class=\"token punctuation\">,</span>olive<span class=\"token punctuation\">,</span>oliveDrab<span class=\"token punctuation\">,</span>\n    orange<span class=\"token punctuation\">,</span>orangeRed<span class=\"token punctuation\">,</span>orchid<span class=\"token punctuation\">,</span>paleGoldenRod<span class=\"token punctuation\">,</span>paleGreen<span class=\"token punctuation\">,</span>paleTurquoise<span class=\"token punctuation\">,</span>paleVioletRed<span class=\"token punctuation\">,</span>papayaWhip<span class=\"token punctuation\">,</span>\n    peachPuff<span class=\"token punctuation\">,</span>peru<span class=\"token punctuation\">,</span>pink<span class=\"token punctuation\">,</span>plum<span class=\"token punctuation\">,</span>powderBlue<span class=\"token punctuation\">,</span>purple<span class=\"token punctuation\">,</span>rosyBrown<span class=\"token punctuation\">,</span>royalBlue<span class=\"token punctuation\">,</span>saddleBrown<span class=\"token punctuation\">,</span>salmon<span class=\"token punctuation\">,</span>\n    sandyBrown<span class=\"token punctuation\">,</span>seaGreen<span class=\"token punctuation\">,</span>seaShell<span class=\"token punctuation\">,</span>sienna<span class=\"token punctuation\">,</span>silver<span class=\"token punctuation\">,</span>skyBlue<span class=\"token punctuation\">,</span>slateBlue<span class=\"token punctuation\">,</span>slateGray<span class=\"token punctuation\">,</span>slateGrey<span class=\"token punctuation\">,</span>snow<span class=\"token punctuation\">,</span>\n    springGreen<span class=\"token punctuation\">,</span>steelBlue<span class=\"token punctuation\">,</span>blueSteel<span class=\"token punctuation\">,</span>tan<span class=\"token punctuation\">,</span>teal<span class=\"token punctuation\">,</span>thistle<span class=\"token punctuation\">,</span>tomato<span class=\"token punctuation\">,</span>turquoise<span class=\"token punctuation\">,</span>violet<span class=\"token punctuation\">,</span>wheat<span class=\"token punctuation\">,</span>whiteSmoke<span class=\"token punctuation\">,</span>\n    yellowGreen<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\name Variants</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\typedef ofColor</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A typedef representing an 8-bit (`unsigned char`) RGBA color.</span>\n<span class=\"token keyword\">typedef</span> ofColor_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span> ofColor<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\typedef ofShortColor</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A typedef representing a 16-bit (`unsigned short`) RGBA color.</span>\n<span class=\"token keyword\">typedef</span> ofColor_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token operator\">></span> ofShortColor<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\typedef ofFloatColor</span>\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A typedef representing a floating (`float`) point RGBA color.</span>\n<span class=\"token keyword\">typedef</span> ofColor_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span> ofFloatColor<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\nofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">ofColor_</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\nofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> SrcType<span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">copyFrom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>SrcType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> srcMax <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> dstMax <span class=\"token operator\">=</span> <span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> factor <span class=\"token operator\">=</span> dstMax <span class=\"token operator\">/</span> srcMax<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>SrcType<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span>SrcType<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">typeid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// coming from float we need a special case to clamp the values</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">clamp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">(</span>mom<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> factor<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// everything else is a straight scaling</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> mom<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> factor<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\nofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> color <span class=\"token operator\">*</span> val<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> std<span class=\"token operator\">::</span>numeric_limits<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">float</span> ofColor_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> ofColor_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> g<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">getHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getHex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofColor_<span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setHex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hexColor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hexColor <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n\tg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hexColor <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n\tb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hexColor <span class=\"token operator\">>></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> alpha<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> PixelType<span class=\"token operator\">></span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> ofColor_<span class=\"token operator\">&lt;</span>PixelType<span class=\"token operator\">></span><span class=\"token operator\">::</span><span class=\"token function\">setHex</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hexColor<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tofColor c <span class=\"token operator\">=</span> ofColor<span class=\"token operator\">::</span><span class=\"token function\">fromHex</span><span class=\"token punctuation\">(</span>hexColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n\ta <span class=\"token operator\">=</span> alpha<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">short</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">template</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ofColor_</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n","type":"source","static":true}}],"fetch":[]}