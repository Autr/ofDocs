{"data":[{"page":{"entry":{"name":"README","filename":"README.md","absolute":"/Users/Gilbert/Code/openFrameworks/examples/math/vectorMathExample/README.md","path":"/examples/math/vectorMathExample/README","route":"/examples/math/vectorMathExample/README.md","dir":"../examples/math/vectorMathExample","ext":"md","type":"page","id":1576,"parent":1575,"breadcrumbs":[1575,1520,514],"translations":{},"siblings":[]},"description":{},"document":"<h2>#level1_vectorMathExample</h2>\n<p><img src=\"vectorMathExample.png\" alt=\"Screenshot of Example\"></p>\n<h3>Learning Objectives</h3>\n<p>This openFrameworks Example is designed to demonstrate\n<a href=\"http://openframeworks.cc/tutorials/02_maths/001_vector_maths/\">vector math</a> and how to draw using vectors.  Note, a vector represents a direction and magnitude in an abstract &quot;space&quot;.</p>\n<p>In this example, pay attention to the following code:</p>\n<ul>\n<li><code>glm::vec3\tpts[MAX_N_PTS]</code>, declares a vector named 'pts' that cannot hold more than <code>MAX_N_PTS</code> which is defined at the top of the header file with <code>#define MAX_N_PTS</code></li>\n<li><code>ofBeginShape()</code>, called to start drawing a new shape.</li>\n<li><code>ofBeginShape()</code> is followed by a list of vertex points, <code>ofVertex(pts[i].x, pts[i].y)</code> and ends with a call to <code>ofEndShape()</code></li>\n<li><code>pts[nPts].x = x</code> &amp;  <code>pts[nPts].y = y</code> sets a specific value position nPts in the vector</li>\n</ul>\n<h3>Expected Behavior</h3>\n<p>When launching this app, you should see:</p>\n<ul>\n<li>a rotating x, y, and z axis in blue; although, only the x and y axis will be visible due to the default orientation of the app</li>\n<li>a mustard yellow legend in the upper left corner with labels for the speed of rotation and rotateAmount in x, y, and z</li>\n</ul>\n<p>Instructions for use:</p>\n<ul>\n<li>Hold down the mouse clicker and drag the mouse to draw</li>\n<li>Each point will be stored in vector 'Pts'</li>\n<li>You can rotate the screen using the following key commands:\n<ul>\n<li>A - increase rotation speed</li>\n<li>Z - decrease rotation speed</li>\n<li>S - increase the rotation amount in the x-direction</li>\n<li>X - decrease the rotation amount in the x-direction</li>\n<li>D - increase the rotation amount in the y-direction</li>\n<li>C - decrease the rotation amount in the y-direction</li>\n<li>F - increase the rotation amount in the z-direction</li>\n<li>V - decrease the rotation amount in the z-direction</li>\n</ul>\n</li>\n<li>Press the mouse once to clear the screen</li>\n</ul>\n<h3>Other classes used in this file</h3>\n<p>This Example uses no additional classes.</p>\n","raw":"#level1_vectorMathExample\n--\n![Screenshot of Example](vectorMathExample.png)\n\n### Learning Objectives\n\nThis openFrameworks Example is designed to demonstrate \n[vector math](http://openframeworks.cc/tutorials/02_maths/001_vector_maths/) and how to draw using vectors.  Note, a vector represents a direction and magnitude in an abstract \"space\".\n\nIn this example, pay attention to the following code: \n\n*  ```glm::vec3\tpts[MAX_N_PTS]```, declares a vector named 'pts' that cannot hold more than ```MAX_N_PTS``` which is defined at the top of the header file with ```#define MAX_N_PTS```\n*  ```ofBeginShape()```, called to start drawing a new shape. \n*  ```ofBeginShape()``` is followed by a list of vertex points, ```ofVertex(pts[i].x, pts[i].y)``` and ends with a call to ```ofEndShape()```\n*  ```pts[nPts].x = x``` &  ```pts[nPts].y = y``` sets a specific value position nPts in the vector \n\n\n### Expected Behavior\n\nWhen launching this app, you should see:\n\n* a rotating x, y, and z axis in blue; although, only the x and y axis will be visible due to the default orientation of the app\n* a mustard yellow legend in the upper left corner with labels for the speed of rotation and rotateAmount in x, y, and z\n\nInstructions for use:\n\n* Hold down the mouse clicker and drag the mouse to draw\n* Each point will be stored in vector 'Pts' \n* You can rotate the screen using the following key commands:\n  * A - increase rotation speed\n  * Z - decrease rotation speed\n  * S - increase the rotation amount in the x-direction\n  * X - decrease the rotation amount in the x-direction\n  * D - increase the rotation amount in the y-direction\n  * C - decrease the rotation amount in the y-direction\n  * F - increase the rotation amount in the z-direction\n  * V - decrease the rotation amount in the z-direction\n* Press the mouse once to clear the screen\n\n### Other classes used in this file\n\nThis Example uses no additional classes. \n\n\n\n","type":"page","static":true}}],"fetch":[]}