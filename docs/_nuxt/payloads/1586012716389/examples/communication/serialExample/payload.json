{"data":[{"page":{"entry":{"name":"serialExample","filename":"serialExample","absolute":"/Users/Gilbert/Code/openFrameworks/examples/communication/serialExample","path":"/examples/communication/serialExample/","dir":"../examples/communication","route":"/examples/communication/serialExample/","ext":"","type":"folder","id":792,"children":[793,794,795],"parent":750,"breadcrumbs":[750,514],"siblings":[],"translations":{}},"intro":{"name":"README","filename":"README.md","absolute":"/Users/Gilbert/Code/openFrameworks/examples/communication/serialExample/README.md","path":"/examples/communication/serialExample/README","route":"/examples/communication/serialExample/README.md","dir":"../examples/communication/serialExample","ext":"md","type":"page","id":793,"parent":792,"breadcrumbs":[792,750,514],"translations":{},"siblings":[]},"document":"<h1>About serialExample</h1>\n<p><img src=\"serialExample.png\" alt=\"Screenshot of serialExample\"></p>\n<h3>Learning Objectives</h3>\n<p>This example demonstrates communication with external devices over the serial port. In this example, you will connect to a serial device, read incoming byte packets from the connected device, and send response messages over serial.</p>\n<p>This example covers the following functions:</p>\n<ul>\n<li>Connecting to a serial device</li>\n<li>Reading incoming byte packets from the connected device</li>\n<li>Sending response messages over serial</li>\n<li>Updating graphics based on the incoming byte information</li>\n</ul>\n<p>In the code, pay attention to:</p>\n<ul>\n<li>Listing all serial devices with <code>serial.listDevices()</code>, which logs a list to the console. Make sure the port ID you specify is the same that your Arduino or other device is connected on.</li>\n<li>When a device is connected, check the console logs to ensure that you're not getting any Serial connection errors and have successfully connected to the specified port</li>\n<li>To signal successful communication back to the Arduino, send a trigger message: <code>serial.writeByte('a')</code></li>\n<li>Read incoming messages with <code>serial.readBytes()</code></li>\n<li>Store incoming messages in an array <code>bytesReturned[3]</code> to match the set of data being sent from the Arduino sketch. This can be changed to match the size of discrete data packets being sent from Arduino.</li>\n</ul>\n<h3>Expected Behavior</h3>\n<p>When launching this app, you should see a white screen with gray text showing the following information:</p>\n<ul>\n<li>nBytes read</li>\n<li>nTimes read</li>\n<li>read byte</li>\n<li>time of reading</li>\n</ul>\n<h3>Instructions for use:</h3>\n<ul>\n<li>Click the mouse to send a communication trigger to Arduino and receive a serial packet in return. The displayed values onscreen should change to reflect sent and received data.</li>\n</ul>\n<h3>Other classes used in this file</h3>\n<p>This example uses no other classes.</p>\n","raw":"# About serialExample\n\n![Screenshot of serialExample](serialExample.png)\n\n\n### Learning Objectives\n\nThis example demonstrates communication with external devices over the serial port. In this example, you will connect to a serial device, read incoming byte packets from the connected device, and send response messages over serial.\n\nThis example covers the following functions:\n\n* Connecting to a serial device\n* Reading incoming byte packets from the connected device\n* Sending response messages over serial\n* Updating graphics based on the incoming byte information\n\nIn the code, pay attention to:\n\n* Listing all serial devices with ```serial.listDevices()```, which logs a list to the console. Make sure the port ID you specify is the same that your Arduino or other device is connected on.\n* When a device is connected, check the console logs to ensure that you're not getting any Serial connection errors and have successfully connected to the specified port\n* To signal successful communication back to the Arduino, send a trigger message: ```serial.writeByte('a')```\n* Read incoming messages with ```serial.readBytes()```\n* Store incoming messages in an array ```bytesReturned[3]``` to match the set of data being sent from the Arduino sketch. This can be changed to match the size of discrete data packets being sent from Arduino.\n\n\n### Expected Behavior\n\nWhen launching this app, you should see a white screen with gray text showing the following information:\n\n* nBytes read\n* nTimes read\n* read byte\n* time of reading\n\n### Instructions for use:\n\n* Click the mouse to send a communication trigger to Arduino and receive a serial packet in return. The displayed values onscreen should change to reflect sent and received data.\n\n### Other classes used in this file\n\nThis example uses no other classes.\n","type":"folder","static":true}}],"fetch":[]}