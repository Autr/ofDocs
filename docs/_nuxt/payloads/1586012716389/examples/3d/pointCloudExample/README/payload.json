{"data":[{"page":{"entry":{"name":"README","filename":"README.md","absolute":"/Users/Gilbert/Code/openFrameworks/examples/3d/pointCloudExample/README.md","path":"/examples/3d/pointCloudExample/README","route":"/examples/3d/pointCloudExample/README.md","dir":"../examples/3d/pointCloudExample","ext":"md","type":"page","id":610,"parent":608,"breadcrumbs":[608,513,514],"translations":{},"siblings":[]},"description":{},"document":"<h1>About Point Cloud Example</h1>\n<p>--\n<img src=\"pointCloudExample.png\" alt=\"Screenshot of Example\"></p>\n<h3>Learning Objectives</h3>\n<p>This openFrameworks Example is demonstrates how to create a [point cloud] (https://en.wikipedia.org/wiki/Point_cloud) of data points in 3d space from an image, and represented by a mesh to represent the exterior surface.</p>\n<p>After studying this example, you will understand how to</p>\n<p>In the code, pay attention to:</p>\n<ul>\n<li><code>ofSetVerticalSync</code> to synchronize the redraw of the screen to the vertical refresh of your screen</li>\n<li>setting the mode of the <a href=\"http://openframeworks.cc/documentation/3d/ofMesh/\">mesh</a> to use points with <code>mesh.setMode(OF_PRIMITIVE_POINTS);</code></li>\n<li>Loading the image using <code>img.load</code> and then examining the pixels in the image by looping through the grid of pixels and getting color with <code>img.getColor(x,y)</code></li>\n<li>Utilizing the alpha value of the current pixel from the image to determine the z space coordinate and mapping it to a good depth range<code>float z = ofMap(cur.a, 0, 255, -300, 300);</code></li>\n<li><code>ofEnableDepthTest</code> to ensure rendering happens according to z-depth rather than draw order.</li>\n<li><code>glEnable(GL_POINT_SMOOTH)</code> to make the points round</li>\n<li><code>glPointSize(3)</code> to the points bigger</li>\n<li><code>ofScale(2,-2,2)</code> to flip the y axis and zoom the item in</li>\n<li><code>ofRotateY(90)</code> to rotate on the y axis so we are looking at the face from the side.</li>\n<li><code>cam.begin</code> use of an <code>ofEasyCam</code> to render the scene</li>\n</ul>\n<h3>Expected Behavior</h3>\n<p>When launching this app, you should see</p>\n<ul>\n<li>A mesh that uses points to draw the exterior surface of the side of a face</li>\n</ul>\n<p>Instructions for use:</p>\n<ul>\n<li>Try pressing the various keys to alter the drawing state. Refer to the overlay on the application to know which keys to press.</li>\n</ul>\n","raw":"# About Point Cloud Example\n--\n![Screenshot of Example](pointCloudExample.png)\n\n### Learning Objectives\n\nThis openFrameworks Example is demonstrates how to create a [point cloud] (https://en.wikipedia.org/wiki/Point_cloud) of data points in 3d space from an image, and represented by a mesh to represent the exterior surface.\n\nAfter studying this example, you will understand how to\n\nIn the code, pay attention to:\n\n* ```ofSetVerticalSync``` to synchronize the redraw of the screen to the vertical refresh of your screen\n* setting the mode of the [mesh](http://openframeworks.cc/documentation/3d/ofMesh/) to use points with ```mesh.setMode(OF_PRIMITIVE_POINTS);```\n* Loading the image using ```img.load``` and then examining the pixels in the image by looping through the grid of pixels and getting color with ```img.getColor(x,y)```\n* Utilizing the alpha value of the current pixel from the image to determine the z space coordinate and mapping it to a good depth range```float z = ofMap(cur.a, 0, 255, -300, 300);```\n* ```ofEnableDepthTest``` to ensure rendering happens according to z-depth rather than draw order.\n* ```glEnable(GL_POINT_SMOOTH)``` to make the points round\n* ```glPointSize(3)``` to the points bigger\n* ```ofScale(2,-2,2)``` to flip the y axis and zoom the item in\n* ```ofRotateY(90)``` to rotate on the y axis so we are looking at the face from the side.\n* ```cam.begin``` use of an ```ofEasyCam``` to render the scene \n\n\n### Expected Behavior\n\nWhen launching this app, you should see\n\n* A mesh that uses points to draw the exterior surface of the side of a face\n\nInstructions for use:\n\n* Try pressing the various keys to alter the drawing state. Refer to the overlay on the application to know which keys to press.\n","type":"page","static":true}}],"fetch":[]}