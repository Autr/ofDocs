{"data":[{"page":{"entry":{"name":"README","filename":"README.md","absolute":"/Users/Gilbert/Code/openFrameworks/examples/3d/quaternionLatLongExample/README.md","path":"/examples/3d/quaternionLatLongExample/README","route":"/examples/3d/quaternionLatLongExample/README.md","dir":"../examples/3d/quaternionLatLongExample","ext":"md","type":"page","id":631,"parent":629,"breadcrumbs":[629,513,514],"translations":{},"siblings":[]},"description":{},"document":"<h1>About QuaternionLatLong Example</h1>\n<p>--\n<img src=\"quaternionLongLatExample.png\" alt=\"Screenshot of Example\"></p>\n<h3>Learning Objectives</h3>\n<p>This openFrameworks example utilizes quaternions to  plot latitude and longitude onto a sphere.</p>\n<p>In the code, pay attention to:</p>\n<ul>\n<li><code>cities</code> which is a Vector to hold <code>City</code> objects for the data to plot onto the sphere</li>\n<li><code> ofTranslate(ofGetWidth()/2, ofGetHeight()/2, 40);</code> to make 0,0 the center of the screen</li>\n<li><code>ofRotate(ofGetFrameNum(), 0, 1, 0);</code> to spin at the rate of 1 degree per frame</li>\n<li><code>ofDrawSphere</code> to draw the sphere</li>\n<li><code>latRot.makeRotate(cities[i].latitude, 1, 0, 0);</code> to create a quaternion which will perform a rotation of an angle</li>\n<li><code>longRot.makeRotate(cities[i].longitude, 0, 1, 0);</code> to create a quaternion which will perform a rotation of an angle</li>\n<li><code>\tspinQuat.makeRotate(ofGetFrameNum(), 0, 1, 0);</code> to create another quaternion to ensure it spins on the y axis</li>\n<li><code>glm::vec3 worldPoint = latRot * longRot * spinQuat * center;</code> to generate the point to map the city by multiplying all of the quaternions and then multipying the center vector to apply the rotation to the center vector</li>\n</ul>\n<h3>Expected Behavior</h3>\n<p>When launching this app, you should see</p>\n<ul>\n<li>A white mesh sphere centered in the middle of the screen with a black background</li>\n<li>The sphere will have the cities latitude and longitude mapped and labeled on the sphere</li>\n<li>The sphere will be constantly rotating</li>\n</ul>\n","raw":"# About QuaternionLatLong Example\n--\n![Screenshot of Example](quaternionLongLatExample.png)\n\n### Learning Objectives\n\nThis openFrameworks example utilizes quaternions to  plot latitude and longitude onto a sphere.\n\n\nIn the code, pay attention to:\n\n*  ```cities``` which is a Vector to hold ```City``` objects for the data to plot onto the sphere\n* ```  ofTranslate(ofGetWidth()/2, ofGetHeight()/2, 40); ``` to make 0,0 the center of the screen\n* ```ofRotate(ofGetFrameNum(), 0, 1, 0);``` to spin at the rate of 1 degree per frame\n* ```ofDrawSphere``` to draw the sphere\n* ```latRot.makeRotate(cities[i].latitude, 1, 0, 0);``` to create a quaternion which will perform a rotation of an angle\n* ```longRot.makeRotate(cities[i].longitude, 0, 1, 0);``` to create a quaternion which will perform a rotation of an angle\n* ```\tspinQuat.makeRotate(ofGetFrameNum(), 0, 1, 0);``` to create another quaternion to ensure it spins on the y axis\n* ```glm::vec3 worldPoint = latRot * longRot * spinQuat * center;``` to generate the point to map the city by multiplying all of the quaternions and then multipying the center vector to apply the rotation to the center vector\n\n\n### Expected Behavior\n\nWhen launching this app, you should see\n\n* A white mesh sphere centered in the middle of the screen with a black background\n* The sphere will have the cities latitude and longitude mapped and labeled on the sphere\n* The sphere will be constantly rotating\n","type":"page","static":true}}],"fetch":[]}