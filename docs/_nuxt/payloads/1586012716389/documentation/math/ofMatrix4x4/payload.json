{"data":[{"page":{"entry":{"name":"ofMatrix4x4","filename":"ofMatrix4x4.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/math/ofMatrix4x4.markdown","path":"/documentation/math/ofMatrix4x4","route":"/documentation/math/ofMatrix4x4.markdown","dir":"../ofSite/documentation/math","ext":"markdown","type":"page","id":2381,"parent":2373,"breadcrumbs":[2373,1968],"siblings":[],"translations":{}},"description":{"short":"<p>The ofMatrix4x4 is the big class of the math part of openFrameworks.</p>\n<p>You'll sometimes see it used for doing things like setting where the camera\nin OpenGL (the mathematically calculated one, not the ofCamera one) is\nlooking or is pointed, or figuring how to position something in 3d space,\ndoing scaling, etc. The great thing about the 4x4 matrix is that it can do\nall these things at the same time. A single ofMatrix4x4 can represent a ton\nof different information about a stuff that goes on in doing 3d\nprogramming: where an object is, how you want to scale an object, where a\ncamera is. Let's look at a few really basic examples:</p>\n<p><img src=\"mats.png\" alt=\"MATS\"></p>\n<p>Not particularly exciting, but you can see how they'd be useful. Luckily most\nof the need to transform, rotate, scale, shear, or further bazzlemunge (just\nkidding, bazzlemunging is not a thing) stuff in oF is handled internally by\nobjects like ofNode or ofCamera.</p>\n<p>oF uses row-vector style by default, meaning that when transforming a vector\nby multiplying with a matrix, you should put the vector on the left side and\nthe matrix (or matrices) to its right. When multiplying by multiple matrices,\nthe order of application of the transforms is left-to-right. This means that\nthe standard order of manipulation operations is\nvector * scale * rotate * translate.</p>\n<p>Note that in GLSL, this convention is reversed, and column-vector style is\nused. oF uploads the matrices to the GL context correctly, but you should\nreverse the order of your vertex manipulations to right-to-left style, e.g.\ntranslate * rotate * scale * vector.</p>\n<p>On the application side, oF has operators which let you do matrix-vector\nmultiplication with the vector on the right if that's your preferred style.\nTo set up a combined transformation matrix for working in this style, you\nshould do matrix transformations with the functions like glTranslate,\nglRotate, and glScale.</p>\n","full":"<p>The ofMatrix4x4 is the big class of the math part of openFrameworks. You'll sometimes see it used for doing things like setting where the camera in OepnGL (the mathematically calculated one, not the ofCamera one) is looking or is pointedA, or figuring how to position something in 3d space, doing scaling, etc. The great thing about the 4x4 matrix is that it can do all these things at the same time. A single ofMatrix4x4 can represent a ton of different information about a stuff that goes on in doing 3d programming: where an object is, how you want to scale an object, where a camera is. Let's look at a few really basic examples:</p>\n<p><img src=\"mats.png\" alt=\"MATS\"></p>\n<p>Not particularly exciting, but you can see how they'd be useful. Luckily most of the need to transform, rotate, scale, shear, or further bazzlemunge (just kidding, bazzlemunging is not a thing) stuff in OF is handled internally by objects like ofNode or ofCamera.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"decompose(&translation, &rotation, &scale, &so)","name":"decompose","returns":"void","returns_description":null,"parameters":"ofVec3f <span class=\"token operator\">&amp;</span>translation<span class=\"token punctuation\">,</span> ofQuaternion <span class=\"token operator\">&amp;</span>rotation<span class=\"token punctuation\">,</span> ofVec3f <span class=\"token operator\">&amp;</span>scale<span class=\"token punctuation\">,</span> ofQuaternion <span class=\"token operator\">&amp;</span>so","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Decompose the matrix into translation, rotation,\nscale and scale orientation.</p>\n","desc":"","counter":0},{"syntax":"getFrustum(&left, &right, &bottom, &top, &zNear, &zFar)","name":"getFrustum","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>zFar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the perspective components for a frustum projection matrix.</p>\n","desc":"","counter":0},{"syntax":"getInverse()","name":"getInverse","returns":"ofMatrix4x4","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the inverse matrix.</p>\n","desc":"","counter":0},{"syntax":"getInverseOf(&matrix)","name":"getInverseOf","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>matrix","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Makes a new matrix which is the inverse of the given matrix.</p>\n","desc":"","counter":0},{"syntax":"getLookAt(&eye, &center, &up, lookDistance = 1.0f)","name":"getLookAt","returns":"void","returns_description":null,"parameters":"ofVec3f <span class=\"token operator\">&amp;</span>eye<span class=\"token punctuation\">,</span> ofVec3f <span class=\"token operator\">&amp;</span>center<span class=\"token punctuation\">,</span> ofVec3f <span class=\"token operator\">&amp;</span>up<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> lookDistance<span class=\"token operator\">=</span><span class=\"token number\">1.0f</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the lookAt determiners of the matrix.</p>\n<p>This function will only work for modelview matrices.</p>\n","desc":"","counter":0},{"syntax":"getOrtho(&left, &right, &bottom, &top, &zNear, &zFar)","name":"getOrtho","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>zFar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the perspective components from a matrix.</p>\n<p>This only works with pure perspective projection matrices.</p>\n","desc":"","counter":0},{"syntax":"getOrthoNormalOf(&matrix)","name":"getOrthoNormalOf","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>matrix","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Makes a new matrix which is the given matrix, normalized.</p>\n","desc":"","counter":0},{"syntax":"getPerspective(&fovy, &aspectRatio, &zNear, &zFar)","name":"getPerspective","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>fovy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>aspectRatio<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>zFar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the frustum settings of a symmetric perspective projection\nmatrix.</p>\n<p>Note, if matrix is not a symmetric perspective matrix then the\nshear will be lost.\nAsymmetric matrices occur when stereo, power walls, caves and\nreality center display are used.\nIn these configuration one should use the getFrustum method instead.</p>\n<p><strong>Returns</strong>: false if matrix is not a perspective matrix,\nwhere parameter values are undefined.</p>\n","desc":"","counter":0},{"syntax":"getPtr()","name":"getPtr","returns":"float *","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Access the internal data in <code>float*</code> format\nuseful for opengl matrix transformations</p>\n","desc":"","counter":1},{"syntax":"getPtr()","name":"getPtr","returns":"const float *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getRotate()","name":"getRotate","returns":"ofQuaternion","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Get Methods\n{</p>\n<p>These return matrix components. getRotate and getScale can only be\nused if the matrix only has rotation or only has scale, since these\ntransform values are stored in the same area of the matrix.\nFor matrices with both use decompose instead.</p>\n","desc":"","counter":0},{"syntax":"getRowAsVec3f(i)","name":"getRowAsVec3f","returns":"ofVec3f","returns_description":null,"parameters":"size_t i","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>returns a copy of row i</p>\n","desc":"","counter":0},{"syntax":"getRowAsVec4f(i)","name":"getRowAsVec4f","returns":"ofVec4f","returns_description":null,"parameters":"size_t i","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>returns a copy of row i</p>\n","desc":"","counter":0},{"syntax":"getScale()","name":"getScale","returns":"ofVec3f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getTranslation()","name":"getTranslation","returns":"ofVec3f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getTransposedOf(&matrix)","name":"getTransposedOf","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>matrix","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Makes a new matrix which is the transpose of the given matrix.</p>\n","desc":"","counter":0},{"syntax":"glRotate(&q)","name":"glRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: rotate</p>\n","desc":"","counter":1},{"syntax":"glRotate(angle, x, y, z)","name":"glRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: rotate</p>\n","desc":""},{"syntax":"glRotateRad(angle, x, y, z)","name":"glRotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: rotate</p>\n","desc":"","counter":0},{"syntax":"glScale(&v)","name":"glScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: scale</p>\n","desc":"","counter":1},{"syntax":"glScale(x, y, z)","name":"glScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: scale</p>\n","desc":""},{"syntax":"glTranslate(&v)","name":"glTranslate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: translate</p>\n","desc":"","counter":1},{"syntax":"glTranslate(tx, ty, tz)","name":"glTranslate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> tx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tz","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: translate</p>\n","desc":""},{"syntax":"isIdentity()","name":"isIdentity","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Checks if the matrix is the identity matrix.</p>\n","desc":"","counter":0},{"syntax":"isNaN()","name":"isNaN","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Checks if the matrix contains items that are not numbers.</p>\n","desc":"","counter":0},{"syntax":"isValid()","name":"isValid","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Checks if the matrix is valid by ensuring its items are numbers.</p>\n","desc":"","counter":0},{"syntax":"makeFromMultiplicationOf(&, &)","name":"makeFromMultiplicationOf","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix becomes the result of the multiplication of two other matrices.</p>\n","desc":"","counter":0},{"syntax":"makeFrustumMatrix(left, right, bottom, top, zNear, zFar)","name":"makeFrustumMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zFar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix becomes a perspective projection matrix.</p>\n<p>Related to: glFrustum. The viewing volume is frustum-shaped and\ndefined by the six parameters. Left, right, top, and bottom specify\ncoordinates in the zNear clipping plane where the frustum edges intersect\nit, and the zNear and zFar parameters define the forward distances of\nthe view volume. The resulting volume can be vertically and\nhorizontally asymmetrical around the center of the near plane.</p>\n","desc":"","counter":0},{"syntax":"makeIdentityMatrix()","name":"makeIdentityMatrix","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix becomes the identity matrix.</p>\n","desc":"","counter":0},{"syntax":"makeInvertOf(&rhs)","name":"makeInvertOf","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix becomes the inverse of the provided matrix.</p>\n","desc":"","counter":0},{"syntax":"makeLookAtMatrix(&eye, &center, &up)","name":"makeLookAtMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>eye<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>up","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix becomes a combination of translation and rotation.</p>\n<p>Matrix becomes a combination of a translation to the position of 'eye'\nand a rotation matrix which orients an object to point towards 'center'\nalong its z-axis. Use this function if you want an object to look at a\npoint from another point in space.</p>\n<p><strong>Parameters:</strong></p>\n<p>eye The position of the object.</p>\n<p>center The point which the object is &quot;looking&quot; at.</p>\n<p>up The direction which the object considers to be &quot;up&quot;.</p>\n","desc":"","counter":0},{"syntax":"makeLookAtViewMatrix(&eye, &center, &up)","name":"makeLookAtViewMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>eye<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>up","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix becomes a combination of an inverse translation and rotation.</p>\n<p>Related to: gluLookAt. This creates the inverse of makeLookAtMatrix.\nThe matrix will be an opposite translation from the 'eye' position,\nand it will rotate things in the opposite direction of the eye-to-center\norientation. This is definitely confusing, but the main reason to use\nthis transform is to set up a view matrix for a camera that's looking\nat a certain point. To achieve the effect of moving the camera somewhere\nand rotating it so that it points at something, the rest of the world\nis moved in the <em>opposite</em> direction and rotated in the <em>opposite</em> way\naround the camera. This way, you get the same effect as moving the actual\ncamera, but all the projection math can still be done with the camera\npositioned at the origin (which makes it way simpler).</p>\n","desc":"","counter":0},{"syntax":"makeOrtho2DMatrix(left, right, bottom, top)","name":"makeOrtho2DMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix becomes a 2D orthographic projection matrix.</p>\n<p>Related to: glOrtho2D. The box-shaped viewing volume is\ndescribed by the four parameters and, implicitly, a zNear of -1\nand a zFar of 1.</p>\n","desc":"","counter":0},{"syntax":"makeOrthoMatrix(left, right, bottom, top, zNear, zFar)","name":"makeOrthoMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zFar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix becomes an orthographic projection matrix.</p>\n<p>Related to: glOrtho. The orthographic projection has a box-shaped\nviewing volume described by the six parameters. Left, right, bottom,\nand top specify coordinates in the zNear clipping plane where the\ncorresponding box sides intersect it.</p>\n","desc":"","counter":0},{"syntax":"makeOrthoNormalOf(&rhs)","name":"makeOrthoNormalOf","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix becomes an orthonormalized version of the provided matrix.</p>\n<p>The basis vectors (the 3x3 chunk embedded in the upper left of the matrix)\nare normalized. This means the resulting matrix has had scaling effects\nremoved. The fourth column and the fourth row are transferred over\nuntouched, so translation will be included as well.</p>\n","desc":"","counter":0},{"syntax":"makePerspectiveMatrix(fovy, aspectRatio, zNear, zFar)","name":"makePerspectiveMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> fovy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> aspectRatio<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zFar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix becomes a perspective projection matrix.</p>\n<p>Related to: gluPerspective. The viewing volume is frustum-shaped amd\ndefined by the four parameters. The fovy and aspect ratio\nare used to compute the positions of the left, right, top, and bottom sides\nof the viewing volume in the zNear plane. The fovy is the y field-of-view,\nthe angle made by the top and bottom sides of frustum if they were to\nintersect. The aspect ratio is the width of the frustum divided by its\nheight. Note that the resulting volume is both vertically and\nhorizontally symmetrical around the center of the near plane.</p>\n","desc":"","counter":0},{"syntax":"makeRotationMatrix(&from, &to)","name":"makeRotationMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>to","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Rotation\n{\nMatrix becomes a rotation transform.</p>\n<p><strong>Parameters:</strong></p>\n<p>from Matrix becomes a rotation from this vector direction.</p>\n<p>to Matrix becomes a rotation to this vector direction.</p>\n","desc":"","counter":4},{"syntax":"makeRotationMatrix(&quaternion)","name":"makeRotationMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>quaternion","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Parameters:</strong></p>\n<p>quaternion Matrix becomes a rotation that produces the quaternion's orientation.</p>\n","desc":""},{"syntax":"makeRotationMatrix(angle, &axis)","name":"makeRotationMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Parameters:</strong></p>\n<p>angle Matrix becomes a rotation by angle (degrees).</p>\n<p>axis Rotation is performed around this vector.</p>\n","desc":""},{"syntax":"makeRotationMatrix(angle, x, y, z)","name":"makeRotationMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Parameters:</strong></p>\n<p>angle Matrix becomes a rotation by angle (degrees).</p>\n<p>x X-value of the rotation axis.</p>\n<p>y Y-value of the rotation axis.</p>\n<p>z Z-value of the rotation axis.</p>\n","desc":""},{"syntax":"makeRotationMatrix(angle1, &axis1, angle2, &axis2, angle3, &axis3)","name":"makeRotationMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angle2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angle3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis3","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix becomes a rotation around multiple axes.</p>\n<p>The final rotation is the result of rotating around each of the three\naxes, in order. Angles are given in degrees, and axes can be arbitrary\nvectors.</p>\n","desc":""},{"syntax":"makeScaleMatrix(&)","name":"makeScaleMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Scale\n{\nMatrix becomes a scale transform.</p>\n<p>Accepts x, y, z scale values as a vector or separately.</p>\n","desc":"","counter":1},{"syntax":"makeScaleMatrix(float, float, float)","name":"makeScaleMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"makeTranslationMatrix(&)","name":"makeTranslationMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Translation\n{\nMatrix becomes a translation transform.</p>\n<p>Accepts x, y, z translation values as a vector or separately.</p>\n","desc":"","counter":1},{"syntax":"makeTranslationMatrix(float, float, float)","name":"makeTranslationMatrix","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"newFrustumMatrix(left, right, bottom, top, zNear, zFar)","name":"newFrustumMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zFar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: makeFrustumMatrix</p>\n","desc":"","counter":0},{"syntax":"newIdentityMatrix()","name":"newIdentityMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: makeIdentityMatrix</p>\n","desc":"","counter":0},{"syntax":"newLookAtMatrix(&eye, &center, &up)","name":"newLookAtMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>eye<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>up","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: makeLookAtMatrix</p>\n","desc":"","counter":0},{"syntax":"newOrtho2DMatrix(left, right, bottom, top)","name":"newOrtho2DMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: makeOrtho2DMatrix</p>\n","desc":"","counter":0},{"syntax":"newOrthoMatrix(left, right, bottom, top, zNear, zFar)","name":"newOrthoMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> bottom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zFar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: makeOrthoMatrix</p>\n","desc":"","counter":0},{"syntax":"newPerspectiveMatrix(fovy, aspectRatio, zNear, zFar)","name":"newPerspectiveMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> fovy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> aspectRatio<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zNear<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> zFar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: makePerspectiveMatrix</p>\n","desc":"","counter":0},{"syntax":"newRotationMatrix(&from, &to)","name":"newRotationMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>to","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: makeRotationMatrix</p>\n","desc":"","counter":4},{"syntax":"newRotationMatrix(&quat)","name":"newRotationMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>quat","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"newRotationMatrix(angle, &axis)","name":"newRotationMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"newRotationMatrix(angle, x, y, z)","name":"newRotationMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"newRotationMatrix(angle1, &axis1, angle2, &axis2, angle3, &axis3)","name":"newRotationMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angle2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angle3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>axis3","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"newScaleMatrix(&sv)","name":"newScaleMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>sv","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: makeScaleMatrix</p>\n","desc":"","counter":1},{"syntax":"newScaleMatrix(sx, sy, sz)","name":"newScaleMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sz","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"newTranslationMatrix(&dv)","name":"newTranslationMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>dv","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p><strong>See also</strong>: makeTranslationMatrix</p>\n","desc":"","counter":1},{"syntax":"newTranslationMatrix(x, y, z)","name":"newTranslationMatrix","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofMatrix4x4(&mat)","name":"ofMatrix4x4","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>mat","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":4},{"syntax":"ofMatrix4x4(&quat)","name":"ofMatrix4x4","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>quat","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotation matrices can be constructed from a quaternion.</p>\n","desc":""},{"syntax":"ofMatrix4x4()","name":"ofMatrix4x4","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>The default constructor provides an identity matrix.</p>\n","desc":""},{"syntax":"ofMatrix4x4(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33)","name":"ofMatrix4x4","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> a00<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a01<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a02<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a03<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a10<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a11<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a12<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a13<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a20<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a21<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a22<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a23<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a30<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a31<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a32<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a33","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Positional style.</p>\n<p>All 16 values of the matrix as positional arguments in row-major order.</p>\n","desc":""},{"syntax":"ofMatrix4x4(ptr)","name":"ofMatrix4x4","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> ptr","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct with a pointer.</p>\n<p>You can pass a pointer to floats, and the first 16 contents will be\nextracted into this matrix.</p>\n<p><strong>Warning</strong>: the validity of these values is not checked!</p>\n","desc":""},{"syntax":"operator()(row, col)","name":"operator()","returns":"float &","returns_description":null,"parameters":"size_t row<span class=\"token punctuation\">,</span> size_t col","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Write data with <code>matrix(row,col)=number</code></p>\n","desc":"","counter":1},{"syntax":"operator()(row, col)","name":"operator()","returns":"float","returns_description":null,"parameters":"size_t row<span class=\"token punctuation\">,</span> size_t col","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Read data with <code>matrix(row, col)</code></p>\n","desc":""},{"syntax":"operator*(&m)","name":"operator*","returns":"ofMatrix4x4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>m","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>creates a new matrix from the product of two matrices.</p>\n","desc":"","counter":2},{"syntax":"operator*(&v)","name":"operator*","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix * Vector operator.</p>\n<p>Calls postMult() internally.</p>\n","desc":""},{"syntax":"operator*(&v)","name":"operator*","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator*=(&other)","name":"operator*=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>other","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>The *= operation for matrices.</p>\n<p>This is equivalent to calling postMult(other), but it allows you to do\nsomeMatrix *= someMatrix without breaking const-correctness. Calling\nsomeMatrix.postMult(someMatrix) won't work.</p>\n","desc":"","counter":0},{"syntax":"operator=(&rhs)","name":"operator=","returns":"ofMatrix4x4 &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Copy a matrix using <code>=</code> operator.</p>\n","desc":"","counter":0},{"syntax":"postMult(&)","name":"postMult","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Post-multiply by another matrix.</p>\n<p>This matrix becomes <code>this * other</code>.</p>\n","desc":"","counter":2},{"syntax":"postMult(&v)","name":"postMult","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Matrix * vector multiplication.</p>\n<p>This operation implicitly treat vectors as column-matrices.</p>\n","desc":""},{"syntax":"postMult(&v)","name":"postMult","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>post-multiplies the vector by the matrix (i.e. returns M mult v).\nThe vector is implicitly treated as a column-matrix</p>\n","desc":""},{"syntax":"postMultRotate(&q)","name":"postMultRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Equivalent to postMult(newRotationMatrix(q)).</p>\n","desc":"","counter":1},{"syntax":"postMultRotate(angle, x, y, z)","name":"postMultRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"postMultScale(&v)","name":"postMultScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Equivalent to postMult(scale(v)).</p>\n","desc":"","counter":1},{"syntax":"postMultScale(x, y, z)","name":"postMultScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"postMultTranslate(&v)","name":"postMultTranslate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Equivalent to postMult(newTranslationMatrix(v)).</p>\n","desc":"","counter":1},{"syntax":"postMultTranslate(x, y, z)","name":"postMultTranslate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>the positional argument version of the above</p>\n","desc":""},{"syntax":"preMult(&)","name":"preMult","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Pre-multiply by another matrix.</p>\n<p>This matrix becomes <code>other * this</code>.</p>\n","desc":"","counter":2},{"syntax":"preMult(&v)","name":"preMult","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Vector * matrix multiplication.</p>\n<p>This operation implicitly treats vectors as row-matrices.</p>\n","desc":""},{"syntax":"preMult(&v)","name":"preMult","returns":"ofVec4f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>pre-multiplies the vector by the matrix (i.e. returns v mult M)\nThe vector is implicitly treated as a row-matrix</p>\n","desc":""},{"syntax":"preMultRotate(&q)","name":"preMultRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Equivalent to preMult(newRotationMatrix(q)).</p>\n","desc":"","counter":0},{"syntax":"preMultScale(&v)","name":"preMultScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Equivalent to preMult(newScaleMatrix(v)).</p>\n","desc":"","counter":0},{"syntax":"preMultTranslate(&v)","name":"preMultTranslate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Equivalent to preMult(newTranslationMatrix(v)).</p>\n","desc":"","counter":0},{"syntax":"rotate(&q)","name":"rotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates based on the quarternion.</p>\n","desc":"","counter":1},{"syntax":"rotate(angle, x, y, z)","name":"rotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates by angle (degrees) around the given x, y, z axis.</p>\n","desc":""},{"syntax":"rotateRad(angle, x, y, z)","name":"rotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates by angle (radians) around the given x, y, z axis.</p>\n","desc":"","counter":0},{"syntax":"scale(&v)","name":"scale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scales each axis by the corresponding x, y, z of the vector.</p>\n","desc":"","counter":1},{"syntax":"scale(x, y, z)","name":"scale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scales each axis by the corresponding x, y, z.</p>\n","desc":""},{"syntax":"set(&rhs)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>rhs","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the data of the matrix.</p>\n<p>These functions are analogous to the corresponding constructors.</p>\n","desc":"","counter":3},{"syntax":"set(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> a00<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a01<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a02<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a03<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a10<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a11<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a12<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a13<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a20<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a21<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a22<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a23<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a30<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a31<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a32<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> a33","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(ptr)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> ptr","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(ptr)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span><span class=\"token keyword\">const</span> ptr","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setRotate(&q)","name":"setRotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofQuaternion <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Set methods\n{</p>\n<p>All of these methods alter the components,\ndeleting the previous data only in that component.</p>\n","desc":"","counter":0},{"syntax":"setTranslation(&v)","name":"setTranslation","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"setTranslation(tx, ty, tz)","name":"setTranslation","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> tx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tz","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"transform3x3(&m, &v)","name":"transform3x3","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Apply a 3x3 transform (no translation) of M * v.</p>\n","desc":"","counter":1},{"syntax":"transform3x3(&v, &m)","name":"transform3x3","returns":"ofVec3f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofMatrix4x4 <span class=\"token operator\">&amp;</span>m","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Apply a 3x3 transform (no translation) of v * M.</p>\n","desc":""},{"syntax":"translate(&v)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Translates along the vector.</p>\n","desc":"","counter":1},{"syntax":"translate(tx, ty, tz)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> tx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> ty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tz","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Translates by tx, ty, tz.</p>\n","desc":""},{"syntax":"~ofMatrix4x4()","name":"~ofMatrix4x4","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>destructor.</p>\n","desc":"","counter":0},{"name":"_mat","type":"ofVec4f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>The values of the matrix, stored in row-major order.</p>\n","desc":""},{}],"document":"<p>#class ofMatrix4x4</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>The ofMatrix4x4 is the big class of the math part of openFrameworks.</p>\n<p>You'll sometimes see it used for doing things like setting where the camera\nin OpenGL (the mathematically calculated one, not the ofCamera one) is\nlooking or is pointed, or figuring how to position something in 3d space,\ndoing scaling, etc. The great thing about the 4x4 matrix is that it can do\nall these things at the same time. A single ofMatrix4x4 can represent a ton\nof different information about a stuff that goes on in doing 3d\nprogramming: where an object is, how you want to scale an object, where a\ncamera is. Let's look at a few really basic examples:</p>\n<p><img src=\"mats.png\" alt=\"MATS\"></p>\n<p>Not particularly exciting, but you can see how they'd be useful. Luckily most\nof the need to transform, rotate, scale, shear, or further bazzlemunge (just\nkidding, bazzlemunging is not a thing) stuff in oF is handled internally by\nobjects like ofNode or ofCamera.</p>\n<p>oF uses row-vector style by default, meaning that when transforming a vector\nby multiplying with a matrix, you should put the vector on the left side and\nthe matrix (or matrices) to its right. When multiplying by multiple matrices,\nthe order of application of the transforms is left-to-right. This means that\nthe standard order of manipulation operations is\nvector * scale * rotate * translate.</p>\n<p>Note that in GLSL, this convention is reversed, and column-vector style is\nused. oF uploads the matrices to the GL context correctly, but you should\nreverse the order of your vertex manipulations to right-to-left style, e.g.\ntranslate * rotate * scale * vector.</p>\n<p>On the application side, oF has operators which let you do matrix-vector\nmultiplication with the vector on the right if that's your preferred style.\nTo set up a combined transformation matrix for working in this style, you\nshould do matrix transformations with the functions like glTranslate,\nglRotate, and glScale.</p>\n<p>##Description</p>\n<p>The ofMatrix4x4 is the big class of the math part of openFrameworks. You'll sometimes see it used for doing things like setting where the camera in OepnGL (the mathematically calculated one, not the ofCamera one) is looking or is pointedA, or figuring how to position something in 3d space, doing scaling, etc. The great thing about the 4x4 matrix is that it can do all these things at the same time. A single ofMatrix4x4 can represent a ton of different information about a stuff that goes on in doing 3d programming: where an object is, how you want to scale an object, where a camera is. Let's look at a few really basic examples:</p>\n<p><img src=\"mats.png\" alt=\"MATS\"></p>\n<p>Not particularly exciting, but you can see how they'd be useful. Luckily most of the need to transform, rotate, scale, shear, or further bazzlemunge (just kidding, bazzlemunging is not a thing) stuff in OF is handled internally by objects like ofNode or ofCamera.</p>\n<p>##Methods</p>\n<p>###void decompose(&amp;translation, &amp;rotation, &amp;scale, &amp;so)</p>\n<!--\n_syntax: decompose(&translation, &rotation, &scale, &so)_\n_name: decompose_\n_returns: void_\n_returns_description: _\n_parameters: ofVec3f &translation, ofQuaternion &rotation, ofVec3f &scale, ofQuaternion &so_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Decompose the matrix into translation, rotation,\nscale and scale orientation.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool getFrustum(&amp;left, &amp;right, &amp;bottom, &amp;top, &amp;zNear, &amp;zFar)</p>\n<!--\n_syntax: getFrustum(&left, &right, &bottom, &top, &zNear, &zFar)_\n_name: getFrustum_\n_returns: bool_\n_returns_description: _\n_parameters: double &left, double &right, double &bottom, double &top, double &zNear, double &zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Gets the perspective components for a frustum projection matrix.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 getInverse()</p>\n<!--\n_syntax: getInverse()_\n_name: getInverse_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Gets the inverse matrix.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 getInverseOf(&amp;matrix)</p>\n<!--\n_syntax: getInverseOf(&matrix)_\n_name: getInverseOf_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofMatrix4x4 &matrix_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Makes a new matrix which is the inverse of the given matrix.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void getLookAt(&amp;eye, &amp;center, &amp;up, lookDistance = 1.0f)</p>\n<!--\n_syntax: getLookAt(&eye, &center, &up, lookDistance = 1.0f)_\n_name: getLookAt_\n_returns: void_\n_returns_description: _\n_parameters: ofVec3f &eye, ofVec3f &center, ofVec3f &up, float lookDistance=1.0f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Gets the lookAt determiners of the matrix.</p>\n<p>This function will only work for modelview matrices.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool getOrtho(&amp;left, &amp;right, &amp;bottom, &amp;top, &amp;zNear, &amp;zFar)</p>\n<!--\n_syntax: getOrtho(&left, &right, &bottom, &top, &zNear, &zFar)_\n_name: getOrtho_\n_returns: bool_\n_returns_description: _\n_parameters: double &left, double &right, double &bottom, double &top, double &zNear, double &zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the perspective components from a matrix.</p>\n<p>This only works with pure perspective projection matrices.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 getOrthoNormalOf(&amp;matrix)</p>\n<!--\n_syntax: getOrthoNormalOf(&matrix)_\n_name: getOrthoNormalOf_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofMatrix4x4 &matrix_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Makes a new matrix which is the given matrix, normalized.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool getPerspective(&amp;fovy, &amp;aspectRatio, &amp;zNear, &amp;zFar)</p>\n<!--\n_syntax: getPerspective(&fovy, &aspectRatio, &zNear, &zFar)_\n_name: getPerspective_\n_returns: bool_\n_returns_description: _\n_parameters: double &fovy, double &aspectRatio, double &zNear, double &zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the frustum settings of a symmetric perspective projection\nmatrix.</p>\n<p>Note, if matrix is not a symmetric perspective matrix then the\nshear will be lost.\nAsymmetric matrices occur when stereo, power walls, caves and\nreality center display are used.\nIn these configuration one should use the getFrustum method instead.</p>\n<p><strong>Returns</strong>: false if matrix is not a perspective matrix,\nwhere parameter values are undefined.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float * getPtr()</p>\n<!--\n_syntax: getPtr()_\n_name: getPtr_\n_returns: float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Access the internal data in <code>float*</code> format\nuseful for opengl matrix transformations</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###const float * getPtr()</p>\n<!--\n_syntax: getPtr()_\n_name: getPtr_\n_returns: const float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofQuaternion getRotate()</p>\n<!--\n_syntax: getRotate()_\n_name: getRotate_\n_returns: ofQuaternion_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\name Get Methods\n{</p>\n<p>These return matrix components. getRotate and getScale can only be\nused if the matrix only has rotation or only has scale, since these\ntransform values are stored in the same area of the matrix.\nFor matrices with both use decompose instead.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec3f getRowAsVec3f(i)</p>\n<!--\n_syntax: getRowAsVec3f(i)_\n_name: getRowAsVec3f_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: size_t i_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>returns a copy of row i</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec4f getRowAsVec4f(i)</p>\n<!--\n_syntax: getRowAsVec4f(i)_\n_name: getRowAsVec4f_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: size_t i_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>returns a copy of row i</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec3f getScale()</p>\n<!--\n_syntax: getScale()_\n_name: getScale_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec3f getTranslation()</p>\n<!--\n_syntax: getTranslation()_\n_name: getTranslation_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 getTransposedOf(&amp;matrix)</p>\n<!--\n_syntax: getTransposedOf(&matrix)_\n_name: getTransposedOf_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofMatrix4x4 &matrix_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Makes a new matrix which is the transpose of the given matrix.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void glRotate(&amp;q)</p>\n<!--\n_syntax: glRotate(&q)_\n_name: glRotate_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: rotate</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void glRotate(angle, x, y, z)</p>\n<!--\n_syntax: glRotate(angle, x, y, z)_\n_name: glRotate_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: rotate</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void glRotateRad(angle, x, y, z)</p>\n<!--\n_syntax: glRotateRad(angle, x, y, z)_\n_name: glRotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: rotate</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void glScale(&amp;v)</p>\n<!--\n_syntax: glScale(&v)_\n_name: glScale_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: scale</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void glScale(x, y, z)</p>\n<!--\n_syntax: glScale(x, y, z)_\n_name: glScale_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: scale</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void glTranslate(&amp;v)</p>\n<!--\n_syntax: glTranslate(&v)_\n_name: glTranslate_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: translate</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void glTranslate(tx, ty, tz)</p>\n<!--\n_syntax: glTranslate(tx, ty, tz)_\n_name: glTranslate_\n_returns: void_\n_returns_description: _\n_parameters: float tx, float ty, float tz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: translate</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isIdentity()</p>\n<!--\n_syntax: isIdentity()_\n_name: isIdentity_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Checks if the matrix is the identity matrix.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isNaN()</p>\n<!--\n_syntax: isNaN()_\n_name: isNaN_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Checks if the matrix contains items that are not numbers.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isValid()</p>\n<!--\n_syntax: isValid()_\n_name: isValid_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Checks if the matrix is valid by ensuring its items are numbers.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeFromMultiplicationOf(&amp;, &amp;)</p>\n<!--\n_syntax: makeFromMultiplicationOf(&, &)_\n_name: makeFromMultiplicationOf_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &, const ofMatrix4x4 &_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix becomes the result of the multiplication of two other matrices.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeFrustumMatrix(left, right, bottom, top, zNear, zFar)</p>\n<!--\n_syntax: makeFrustumMatrix(left, right, bottom, top, zNear, zFar)_\n_name: makeFrustumMatrix_\n_returns: void_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix becomes a perspective projection matrix.</p>\n<p>Related to: glFrustum. The viewing volume is frustum-shaped and\ndefined by the six parameters. Left, right, top, and bottom specify\ncoordinates in the zNear clipping plane where the frustum edges intersect\nit, and the zNear and zFar parameters define the forward distances of\nthe view volume. The resulting volume can be vertically and\nhorizontally asymmetrical around the center of the near plane.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeIdentityMatrix()</p>\n<!--\n_syntax: makeIdentityMatrix()_\n_name: makeIdentityMatrix_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix becomes the identity matrix.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool makeInvertOf(&amp;rhs)</p>\n<!--\n_syntax: makeInvertOf(&rhs)_\n_name: makeInvertOf_\n_returns: bool_\n_returns_description: _\n_parameters: const ofMatrix4x4 &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix becomes the inverse of the provided matrix.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeLookAtMatrix(&amp;eye, &amp;center, &amp;up)</p>\n<!--\n_syntax: makeLookAtMatrix(&eye, &center, &up)_\n_name: makeLookAtMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &eye, const ofVec3f &center, const ofVec3f &up_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix becomes a combination of translation and rotation.</p>\n<p>Matrix becomes a combination of a translation to the position of 'eye'\nand a rotation matrix which orients an object to point towards 'center'\nalong its z-axis. Use this function if you want an object to look at a\npoint from another point in space.</p>\n<p><strong>Parameters:</strong></p>\n<p>eye The position of the object.</p>\n<p>center The point which the object is &quot;looking&quot; at.</p>\n<p>up The direction which the object considers to be &quot;up&quot;.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeLookAtViewMatrix(&amp;eye, &amp;center, &amp;up)</p>\n<!--\n_syntax: makeLookAtViewMatrix(&eye, &center, &up)_\n_name: makeLookAtViewMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &eye, const ofVec3f &center, const ofVec3f &up_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix becomes a combination of an inverse translation and rotation.</p>\n<p>Related to: gluLookAt. This creates the inverse of makeLookAtMatrix.\nThe matrix will be an opposite translation from the 'eye' position,\nand it will rotate things in the opposite direction of the eye-to-center\norientation. This is definitely confusing, but the main reason to use\nthis transform is to set up a view matrix for a camera that's looking\nat a certain point. To achieve the effect of moving the camera somewhere\nand rotating it so that it points at something, the rest of the world\nis moved in the <em>opposite</em> direction and rotated in the <em>opposite</em> way\naround the camera. This way, you get the same effect as moving the actual\ncamera, but all the projection math can still be done with the camera\npositioned at the origin (which makes it way simpler).</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeOrtho2DMatrix(left, right, bottom, top)</p>\n<!--\n_syntax: makeOrtho2DMatrix(left, right, bottom, top)_\n_name: makeOrtho2DMatrix_\n_returns: void_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix becomes a 2D orthographic projection matrix.</p>\n<p>Related to: glOrtho2D. The box-shaped viewing volume is\ndescribed by the four parameters and, implicitly, a zNear of -1\nand a zFar of 1.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeOrthoMatrix(left, right, bottom, top, zNear, zFar)</p>\n<!--\n_syntax: makeOrthoMatrix(left, right, bottom, top, zNear, zFar)_\n_name: makeOrthoMatrix_\n_returns: void_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix becomes an orthographic projection matrix.</p>\n<p>Related to: glOrtho. The orthographic projection has a box-shaped\nviewing volume described by the six parameters. Left, right, bottom,\nand top specify coordinates in the zNear clipping plane where the\ncorresponding box sides intersect it.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeOrthoNormalOf(&amp;rhs)</p>\n<!--\n_syntax: makeOrthoNormalOf(&rhs)_\n_name: makeOrthoNormalOf_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix becomes an orthonormalized version of the provided matrix.</p>\n<p>The basis vectors (the 3x3 chunk embedded in the upper left of the matrix)\nare normalized. This means the resulting matrix has had scaling effects\nremoved. The fourth column and the fourth row are transferred over\nuntouched, so translation will be included as well.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makePerspectiveMatrix(fovy, aspectRatio, zNear, zFar)</p>\n<!--\n_syntax: makePerspectiveMatrix(fovy, aspectRatio, zNear, zFar)_\n_name: makePerspectiveMatrix_\n_returns: void_\n_returns_description: _\n_parameters: double fovy, double aspectRatio, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix becomes a perspective projection matrix.</p>\n<p>Related to: gluPerspective. The viewing volume is frustum-shaped amd\ndefined by the four parameters. The fovy and aspect ratio\nare used to compute the positions of the left, right, top, and bottom sides\nof the viewing volume in the zNear plane. The fovy is the y field-of-view,\nthe angle made by the top and bottom sides of frustum if they were to\nintersect. The aspect ratio is the width of the frustum divided by its\nheight. Note that the resulting volume is both vertically and\nhorizontally symmetrical around the center of the near plane.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeRotationMatrix(&amp;from, &amp;to)</p>\n<!--\n_syntax: makeRotationMatrix(&from, &to)_\n_name: makeRotationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &from, const ofVec3f &to_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\name Rotation\n{\nMatrix becomes a rotation transform.</p>\n<p><strong>Parameters:</strong></p>\n<p>from Matrix becomes a rotation from this vector direction.</p>\n<p>to Matrix becomes a rotation to this vector direction.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeRotationMatrix(&amp;quaternion)</p>\n<!--\n_syntax: makeRotationMatrix(&quaternion)_\n_name: makeRotationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &quaternion_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>Parameters:</strong></p>\n<p>quaternion Matrix becomes a rotation that produces the quaternion's orientation.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeRotationMatrix(angle, &amp;axis)</p>\n<!--\n_syntax: makeRotationMatrix(angle, &axis)_\n_name: makeRotationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: float angle, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>Parameters:</strong></p>\n<p>angle Matrix becomes a rotation by angle (degrees).</p>\n<p>axis Rotation is performed around this vector.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeRotationMatrix(angle, x, y, z)</p>\n<!--\n_syntax: makeRotationMatrix(angle, x, y, z)_\n_name: makeRotationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>Parameters:</strong></p>\n<p>angle Matrix becomes a rotation by angle (degrees).</p>\n<p>x X-value of the rotation axis.</p>\n<p>y Y-value of the rotation axis.</p>\n<p>z Z-value of the rotation axis.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeRotationMatrix(angle1, &amp;axis1, angle2, &amp;axis2, angle3, &amp;axis3)</p>\n<!--\n_syntax: makeRotationMatrix(angle1, &axis1, angle2, &axis2, angle3, &axis3)_\n_name: makeRotationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: float angle1, const ofVec3f &axis1, float angle2, const ofVec3f &axis2, float angle3, const ofVec3f &axis3_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix becomes a rotation around multiple axes.</p>\n<p>The final rotation is the result of rotating around each of the three\naxes, in order. Angles are given in degrees, and axes can be arbitrary\nvectors.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeScaleMatrix(&amp;)</p>\n<!--\n_syntax: makeScaleMatrix(&)_\n_name: makeScaleMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\name Scale\n{\nMatrix becomes a scale transform.</p>\n<p>Accepts x, y, z scale values as a vector or separately.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeScaleMatrix(float, float, float)</p>\n<!--\n_syntax: makeScaleMatrix(float, float, float)_\n_name: makeScaleMatrix_\n_returns: void_\n_returns_description: _\n_parameters: float , float , float _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeTranslationMatrix(&amp;)</p>\n<!--\n_syntax: makeTranslationMatrix(&)_\n_name: makeTranslationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\name Translation\n{\nMatrix becomes a translation transform.</p>\n<p>Accepts x, y, z translation values as a vector or separately.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void makeTranslationMatrix(float, float, float)</p>\n<!--\n_syntax: makeTranslationMatrix(float, float, float)_\n_name: makeTranslationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: float , float , float _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newFrustumMatrix(left, right, bottom, top, zNear, zFar)</p>\n<!--\n_syntax: newFrustumMatrix(left, right, bottom, top, zNear, zFar)_\n_name: newFrustumMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: makeFrustumMatrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newIdentityMatrix()</p>\n<!--\n_syntax: newIdentityMatrix()_\n_name: newIdentityMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: makeIdentityMatrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newLookAtMatrix(&amp;eye, &amp;center, &amp;up)</p>\n<!--\n_syntax: newLookAtMatrix(&eye, &center, &up)_\n_name: newLookAtMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofVec3f &eye, const ofVec3f &center, const ofVec3f &up_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: makeLookAtMatrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newOrtho2DMatrix(left, right, bottom, top)</p>\n<!--\n_syntax: newOrtho2DMatrix(left, right, bottom, top)_\n_name: newOrtho2DMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: makeOrtho2DMatrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newOrthoMatrix(left, right, bottom, top, zNear, zFar)</p>\n<!--\n_syntax: newOrthoMatrix(left, right, bottom, top, zNear, zFar)_\n_name: newOrthoMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: makeOrthoMatrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newPerspectiveMatrix(fovy, aspectRatio, zNear, zFar)</p>\n<!--\n_syntax: newPerspectiveMatrix(fovy, aspectRatio, zNear, zFar)_\n_name: newPerspectiveMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: double fovy, double aspectRatio, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: makePerspectiveMatrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newRotationMatrix(&amp;from, &amp;to)</p>\n<!--\n_syntax: newRotationMatrix(&from, &to)_\n_name: newRotationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofVec3f &from, const ofVec3f &to_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: makeRotationMatrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newRotationMatrix(&amp;quat)</p>\n<!--\n_syntax: newRotationMatrix(&quat)_\n_name: newRotationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofQuaternion &quat_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newRotationMatrix(angle, &amp;axis)</p>\n<!--\n_syntax: newRotationMatrix(angle, &axis)_\n_name: newRotationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: float angle, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newRotationMatrix(angle, x, y, z)</p>\n<!--\n_syntax: newRotationMatrix(angle, x, y, z)_\n_name: newRotationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newRotationMatrix(angle1, &amp;axis1, angle2, &amp;axis2, angle3, &amp;axis3)</p>\n<!--\n_syntax: newRotationMatrix(angle1, &axis1, angle2, &axis2, angle3, &axis3)_\n_name: newRotationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: float angle1, const ofVec3f &axis1, float angle2, const ofVec3f &axis2, float angle3, const ofVec3f &axis3_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newScaleMatrix(&amp;sv)</p>\n<!--\n_syntax: newScaleMatrix(&sv)_\n_name: newScaleMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofVec3f &sv_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: makeScaleMatrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newScaleMatrix(sx, sy, sz)</p>\n<!--\n_syntax: newScaleMatrix(sx, sy, sz)_\n_name: newScaleMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: float sx, float sy, float sz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newTranslationMatrix(&amp;dv)</p>\n<!--\n_syntax: newTranslationMatrix(&dv)_\n_name: newTranslationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofVec3f &dv_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>See also</strong>: makeTranslationMatrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 newTranslationMatrix(x, y, z)</p>\n<!--\n_syntax: newTranslationMatrix(x, y, z)_\n_name: newTranslationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofMatrix4x4(&amp;mat)</h3>\n<!--\n_syntax: ofMatrix4x4(&mat)_\n_name: ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: const glm::mat4 &mat_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofMatrix4x4(&amp;quat)</h3>\n<!--\n_syntax: ofMatrix4x4(&quat)_\n_name: ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: const ofQuaternion &quat_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Rotation matrices can be constructed from a quaternion.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofMatrix4x4()</h3>\n<!--\n_syntax: ofMatrix4x4()_\n_name: ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>The default constructor provides an identity matrix.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofMatrix4x4(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33)</h3>\n<!--\n_syntax: ofMatrix4x4(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33)_\n_name: ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: float a00, float a01, float a02, float a03, float a10, float a11, float a12, float a13, float a20, float a21, float a22, float a23, float a30, float a31, float a32, float a33_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Positional style.</p>\n<p>All 16 values of the matrix as positional arguments in row-major order.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofMatrix4x4(ptr)</h3>\n<!--\n_syntax: ofMatrix4x4(ptr)_\n_name: ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: const float *const ptr_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Construct with a pointer.</p>\n<p>You can pass a pointer to floats, and the first 16 contents will be\nextracted into this matrix.</p>\n<p><strong>Warning</strong>: the validity of these values is not checked!</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float &amp; operator()(row, col)</p>\n<!--\n_syntax: operator()(row, col)_\n_name: operator()_\n_returns: float &_\n_returns_description: _\n_parameters: size_t row, size_t col_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Write data with <code>matrix(row,col)=number</code></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float operator()(row, col)</p>\n<!--\n_syntax: operator()(row, col)_\n_name: operator()_\n_returns: float_\n_returns_description: _\n_parameters: size_t row, size_t col_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Read data with <code>matrix(row, col)</code></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 operator*(&amp;m)</p>\n<!--\n_syntax: operator*(&m)_\n_name: operator*_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofMatrix4x4 &m_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>creates a new matrix from the product of two matrices.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec3f operator*(&amp;v)</p>\n<!--\n_syntax: operator*(&v)_\n_name: operator*_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix * Vector operator.</p>\n<p>Calls postMult() internally.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec4f operator*(&amp;v)</p>\n<!--\n_syntax: operator*(&v)_\n_name: operator*_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void operator*=(&amp;other)</p>\n<!--\n_syntax: operator*=(&other)_\n_name: operator*=_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &other_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>The *= operation for matrices.</p>\n<p>This is equivalent to calling postMult(other), but it allows you to do\nsomeMatrix *= someMatrix without breaking const-correctness. Calling\nsomeMatrix.postMult(someMatrix) won't work.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix4x4 &amp; operator=(&amp;rhs)</p>\n<!--\n_syntax: operator=(&rhs)_\n_name: operator=_\n_returns: ofMatrix4x4 &_\n_returns_description: _\n_parameters: const ofMatrix4x4 &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Copy a matrix using <code>=</code> operator.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void postMult(&amp;)</p>\n<!--\n_syntax: postMult(&)_\n_name: postMult_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Post-multiply by another matrix.</p>\n<p>This matrix becomes <code>this * other</code>.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec3f postMult(&amp;v)</p>\n<!--\n_syntax: postMult(&v)_\n_name: postMult_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Matrix * vector multiplication.</p>\n<p>This operation implicitly treat vectors as column-matrices.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec4f postMult(&amp;v)</p>\n<!--\n_syntax: postMult(&v)_\n_name: postMult_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>post-multiplies the vector by the matrix (i.e. returns M mult v).\nThe vector is implicitly treated as a column-matrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void postMultRotate(&amp;q)</p>\n<!--\n_syntax: postMultRotate(&q)_\n_name: postMultRotate_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Equivalent to postMult(newRotationMatrix(q)).</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void postMultRotate(angle, x, y, z)</p>\n<!--\n_syntax: postMultRotate(angle, x, y, z)_\n_name: postMultRotate_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void postMultScale(&amp;v)</p>\n<!--\n_syntax: postMultScale(&v)_\n_name: postMultScale_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Equivalent to postMult(scale(v)).</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void postMultScale(x, y, z)</p>\n<!--\n_syntax: postMultScale(x, y, z)_\n_name: postMultScale_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void postMultTranslate(&amp;v)</p>\n<!--\n_syntax: postMultTranslate(&v)_\n_name: postMultTranslate_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Equivalent to postMult(newTranslationMatrix(v)).</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void postMultTranslate(x, y, z)</p>\n<!--\n_syntax: postMultTranslate(x, y, z)_\n_name: postMultTranslate_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>the positional argument version of the above</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void preMult(&amp;)</p>\n<!--\n_syntax: preMult(&)_\n_name: preMult_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Pre-multiply by another matrix.</p>\n<p>This matrix becomes <code>other * this</code>.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec3f preMult(&amp;v)</p>\n<!--\n_syntax: preMult(&v)_\n_name: preMult_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Vector * matrix multiplication.</p>\n<p>This operation implicitly treats vectors as row-matrices.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec4f preMult(&amp;v)</p>\n<!--\n_syntax: preMult(&v)_\n_name: preMult_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>pre-multiplies the vector by the matrix (i.e. returns v mult M)\nThe vector is implicitly treated as a row-matrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void preMultRotate(&amp;q)</p>\n<!--\n_syntax: preMultRotate(&q)_\n_name: preMultRotate_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Equivalent to preMult(newRotationMatrix(q)).</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void preMultScale(&amp;v)</p>\n<!--\n_syntax: preMultScale(&v)_\n_name: preMultScale_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Equivalent to preMult(newScaleMatrix(v)).</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void preMultTranslate(&amp;v)</p>\n<!--\n_syntax: preMultTranslate(&v)_\n_name: preMultTranslate_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Equivalent to preMult(newTranslationMatrix(v)).</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rotate(&amp;q)</p>\n<!--\n_syntax: rotate(&q)_\n_name: rotate_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Rotates based on the quarternion.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rotate(angle, x, y, z)</p>\n<!--\n_syntax: rotate(angle, x, y, z)_\n_name: rotate_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Rotates by angle (degrees) around the given x, y, z axis.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rotateRad(angle, x, y, z)</p>\n<!--\n_syntax: rotateRad(angle, x, y, z)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Rotates by angle (radians) around the given x, y, z axis.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void scale(&amp;v)</p>\n<!--\n_syntax: scale(&v)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Scales each axis by the corresponding x, y, z of the vector.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void scale(x, y, z)</p>\n<!--\n_syntax: scale(x, y, z)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Scales each axis by the corresponding x, y, z.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void set(&amp;rhs)</p>\n<!--\n_syntax: set(&rhs)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the data of the matrix.</p>\n<p>These functions are analogous to the corresponding constructors.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void set(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33)</p>\n<!--\n_syntax: set(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float a00, float a01, float a02, float a03, float a10, float a11, float a12, float a13, float a20, float a21, float a22, float a23, float a30, float a31, float a32, float a33_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void set(ptr)</p>\n<!--\n_syntax: set(ptr)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const float *const ptr_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void set(ptr)</p>\n<!--\n_syntax: set(ptr)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const double *const ptr_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setRotate(&amp;q)</p>\n<!--\n_syntax: setRotate(&q)_\n_name: setRotate_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\name Set methods\n{</p>\n<p>All of these methods alter the components,\ndeleting the previous data only in that component.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setTranslation(&amp;v)</p>\n<!--\n_syntax: setTranslation(&v)_\n_name: setTranslation_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setTranslation(tx, ty, tz)</p>\n<!--\n_syntax: setTranslation(tx, ty, tz)_\n_name: setTranslation_\n_returns: void_\n_returns_description: _\n_parameters: float tx, float ty, float tz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec3f transform3x3(&amp;m, &amp;v)</p>\n<!--\n_syntax: transform3x3(&m, &v)_\n_name: transform3x3_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofMatrix4x4 &m, const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Apply a 3x3 transform (no translation) of M * v.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec3f transform3x3(&amp;v, &amp;m)</p>\n<!--\n_syntax: transform3x3(&v, &m)_\n_name: transform3x3_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &v, const ofMatrix4x4 &m_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Apply a 3x3 transform (no translation) of v * M.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void translate(&amp;v)</p>\n<!--\n_syntax: translate(&v)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Translates along the vector.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void translate(tx, ty, tz)</p>\n<!--\n_syntax: translate(tx, ty, tz)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: float tx, float ty, float tz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Translates by tx, ty, tz.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>~ofMatrix4x4()</h3>\n<!--\n_syntax: ~ofMatrix4x4()_\n_name: ~ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>destructor.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###ofVec4f _mat</p>\n<!--\n_name: _mat_\n_type: ofVec4f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>The values of the matrix, stored in row-major order.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofMatrix4x4\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\nThe ofMatrix4x4 is the big class of the math part of openFrameworks.\n\nYou'll sometimes see it used for doing things like setting where the camera\nin OpenGL (the mathematically calculated one, not the ofCamera one) is\nlooking or is pointed, or figuring how to position something in 3d space,\ndoing scaling, etc. The great thing about the 4x4 matrix is that it can do\nall these things at the same time. A single ofMatrix4x4 can represent a ton\nof different information about a stuff that goes on in doing 3d\nprogramming: where an object is, how you want to scale an object, where a\ncamera is. Let's look at a few really basic examples:\n\n![MATS](mats.png)\n\nNot particularly exciting, but you can see how they'd be useful. Luckily most\nof the need to transform, rotate, scale, shear, or further bazzlemunge (just\nkidding, bazzlemunging is not a thing) stuff in oF is handled internally by\nobjects like ofNode or ofCamera.\n\noF uses row-vector style by default, meaning that when transforming a vector\nby multiplying with a matrix, you should put the vector on the left side and\nthe matrix (or matrices) to its right. When multiplying by multiple matrices,\nthe order of application of the transforms is left-to-right. This means that\nthe standard order of manipulation operations is\nvector * scale * rotate * translate.\n\nNote that in GLSL, this convention is reversed, and column-vector style is\nused. oF uploads the matrices to the GL context correctly, but you should\nreverse the order of your vertex manipulations to right-to-left style, e.g.\ntranslate * rotate * scale * vector.\n\nOn the application side, oF has operators which let you do matrix-vector\nmultiplication with the vector on the right if that's your preferred style.\nTo set up a combined transformation matrix for working in this style, you\nshould do matrix transformations with the functions like glTranslate,\nglRotate, and glScale.\n\n\n\n\n\n\n##Description\n\nThe ofMatrix4x4 is the big class of the math part of openFrameworks. You'll sometimes see it used for doing things like setting where the camera in OepnGL (the mathematically calculated one, not the ofCamera one) is looking or is pointedA, or figuring how to position something in 3d space, doing scaling, etc. The great thing about the 4x4 matrix is that it can do all these things at the same time. A single ofMatrix4x4 can represent a ton of different information about a stuff that goes on in doing 3d programming: where an object is, how you want to scale an object, where a camera is. Let's look at a few really basic examples:\n\n![MATS](mats.png)\n\nNot particularly exciting, but you can see how they'd be useful. Luckily most of the need to transform, rotate, scale, shear, or further bazzlemunge (just kidding, bazzlemunging is not a thing) stuff in OF is handled internally by objects like ofNode or ofCamera.\n\n\n\n\n\n##Methods\n\n\n\n###void decompose(&translation, &rotation, &scale, &so)\n\n<!--\n_syntax: decompose(&translation, &rotation, &scale, &so)_\n_name: decompose_\n_returns: void_\n_returns_description: _\n_parameters: ofVec3f &translation, ofQuaternion &rotation, ofVec3f &scale, ofQuaternion &so_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDecompose the matrix into translation, rotation,\nscale and scale orientation.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getFrustum(&left, &right, &bottom, &top, &zNear, &zFar)\n\n<!--\n_syntax: getFrustum(&left, &right, &bottom, &top, &zNear, &zFar)_\n_name: getFrustum_\n_returns: bool_\n_returns_description: _\n_parameters: double &left, double &right, double &bottom, double &top, double &zNear, double &zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the perspective components for a frustum projection matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 getInverse()\n\n<!--\n_syntax: getInverse()_\n_name: getInverse_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the inverse matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 getInverseOf(&matrix)\n\n<!--\n_syntax: getInverseOf(&matrix)_\n_name: getInverseOf_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofMatrix4x4 &matrix_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMakes a new matrix which is the inverse of the given matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void getLookAt(&eye, &center, &up, lookDistance = 1.0f)\n\n<!--\n_syntax: getLookAt(&eye, &center, &up, lookDistance = 1.0f)_\n_name: getLookAt_\n_returns: void_\n_returns_description: _\n_parameters: ofVec3f &eye, ofVec3f &center, ofVec3f &up, float lookDistance=1.0f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the lookAt determiners of the matrix.\n\nThis function will only work for modelview matrices.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getOrtho(&left, &right, &bottom, &top, &zNear, &zFar)\n\n<!--\n_syntax: getOrtho(&left, &right, &bottom, &top, &zNear, &zFar)_\n_name: getOrtho_\n_returns: bool_\n_returns_description: _\n_parameters: double &left, double &right, double &bottom, double &top, double &zNear, double &zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the perspective components from a matrix.\n\nThis only works with pure perspective projection matrices.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 getOrthoNormalOf(&matrix)\n\n<!--\n_syntax: getOrthoNormalOf(&matrix)_\n_name: getOrthoNormalOf_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofMatrix4x4 &matrix_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMakes a new matrix which is the given matrix, normalized.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getPerspective(&fovy, &aspectRatio, &zNear, &zFar)\n\n<!--\n_syntax: getPerspective(&fovy, &aspectRatio, &zNear, &zFar)_\n_name: getPerspective_\n_returns: bool_\n_returns_description: _\n_parameters: double &fovy, double &aspectRatio, double &zNear, double &zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the frustum settings of a symmetric perspective projection\nmatrix.\n\nNote, if matrix is not a symmetric perspective matrix then the\nshear will be lost.\nAsymmetric matrices occur when stereo, power walls, caves and\nreality center display are used.\nIn these configuration one should use the getFrustum method instead.\n\n\n**Returns**: false if matrix is not a perspective matrix,\nwhere parameter values are undefined.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float * getPtr()\n\n<!--\n_syntax: getPtr()_\n_name: getPtr_\n_returns: float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAccess the internal data in `float*` format\nuseful for opengl matrix transformations\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const float * getPtr()\n\n<!--\n_syntax: getPtr()_\n_name: getPtr_\n_returns: const float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofQuaternion getRotate()\n\n<!--\n_syntax: getRotate()_\n_name: getRotate_\n_returns: ofQuaternion_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Get Methods\n\\{\n\nThese return matrix components. getRotate and getScale can only be\nused if the matrix only has rotation or only has scale, since these\ntransform values are stored in the same area of the matrix.\nFor matrices with both use decompose instead.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getRowAsVec3f(i)\n\n<!--\n_syntax: getRowAsVec3f(i)_\n_name: getRowAsVec3f_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: size_t i_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nreturns a copy of row i\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f getRowAsVec4f(i)\n\n<!--\n_syntax: getRowAsVec4f(i)_\n_name: getRowAsVec4f_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: size_t i_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nreturns a copy of row i\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getScale()\n\n<!--\n_syntax: getScale()_\n_name: getScale_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f getTranslation()\n\n<!--\n_syntax: getTranslation()_\n_name: getTranslation_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 getTransposedOf(&matrix)\n\n<!--\n_syntax: getTransposedOf(&matrix)_\n_name: getTransposedOf_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofMatrix4x4 &matrix_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMakes a new matrix which is the transpose of the given matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void glRotate(&q)\n\n<!--\n_syntax: glRotate(&q)_\n_name: glRotate_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: rotate\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void glRotate(angle, x, y, z)\n\n<!--\n_syntax: glRotate(angle, x, y, z)_\n_name: glRotate_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: rotate\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void glRotateRad(angle, x, y, z)\n\n<!--\n_syntax: glRotateRad(angle, x, y, z)_\n_name: glRotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: rotate\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void glScale(&v)\n\n<!--\n_syntax: glScale(&v)_\n_name: glScale_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: scale\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void glScale(x, y, z)\n\n<!--\n_syntax: glScale(x, y, z)_\n_name: glScale_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: scale\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void glTranslate(&v)\n\n<!--\n_syntax: glTranslate(&v)_\n_name: glTranslate_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: translate\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void glTranslate(tx, ty, tz)\n\n<!--\n_syntax: glTranslate(tx, ty, tz)_\n_name: glTranslate_\n_returns: void_\n_returns_description: _\n_parameters: float tx, float ty, float tz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: translate\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isIdentity()\n\n<!--\n_syntax: isIdentity()_\n_name: isIdentity_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nChecks if the matrix is the identity matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isNaN()\n\n<!--\n_syntax: isNaN()_\n_name: isNaN_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nChecks if the matrix contains items that are not numbers.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isValid()\n\n<!--\n_syntax: isValid()_\n_name: isValid_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nChecks if the matrix is valid by ensuring its items are numbers.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeFromMultiplicationOf(&, &)\n\n<!--\n_syntax: makeFromMultiplicationOf(&, &)_\n_name: makeFromMultiplicationOf_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &, const ofMatrix4x4 &_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix becomes the result of the multiplication of two other matrices.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeFrustumMatrix(left, right, bottom, top, zNear, zFar)\n\n<!--\n_syntax: makeFrustumMatrix(left, right, bottom, top, zNear, zFar)_\n_name: makeFrustumMatrix_\n_returns: void_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix becomes a perspective projection matrix.\n\nRelated to: glFrustum. The viewing volume is frustum-shaped and\ndefined by the six parameters. Left, right, top, and bottom specify\ncoordinates in the zNear clipping plane where the frustum edges intersect\nit, and the zNear and zFar parameters define the forward distances of\nthe view volume. The resulting volume can be vertically and\nhorizontally asymmetrical around the center of the near plane.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeIdentityMatrix()\n\n<!--\n_syntax: makeIdentityMatrix()_\n_name: makeIdentityMatrix_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix becomes the identity matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool makeInvertOf(&rhs)\n\n<!--\n_syntax: makeInvertOf(&rhs)_\n_name: makeInvertOf_\n_returns: bool_\n_returns_description: _\n_parameters: const ofMatrix4x4 &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix becomes the inverse of the provided matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeLookAtMatrix(&eye, &center, &up)\n\n<!--\n_syntax: makeLookAtMatrix(&eye, &center, &up)_\n_name: makeLookAtMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &eye, const ofVec3f &center, const ofVec3f &up_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix becomes a combination of translation and rotation.\n\nMatrix becomes a combination of a translation to the position of 'eye'\nand a rotation matrix which orients an object to point towards 'center'\nalong its z-axis. Use this function if you want an object to look at a\npoint from another point in space.\n\n\n**Parameters:**\n\neye The position of the object.\n\ncenter The point which the object is \"looking\" at.\n\nup The direction which the object considers to be \"up\".\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeLookAtViewMatrix(&eye, &center, &up)\n\n<!--\n_syntax: makeLookAtViewMatrix(&eye, &center, &up)_\n_name: makeLookAtViewMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &eye, const ofVec3f &center, const ofVec3f &up_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix becomes a combination of an inverse translation and rotation.\n\nRelated to: gluLookAt. This creates the inverse of makeLookAtMatrix.\nThe matrix will be an opposite translation from the 'eye' position,\nand it will rotate things in the opposite direction of the eye-to-center\norientation. This is definitely confusing, but the main reason to use\nthis transform is to set up a view matrix for a camera that's looking\nat a certain point. To achieve the effect of moving the camera somewhere\nand rotating it so that it points at something, the rest of the world\nis moved in the *opposite* direction and rotated in the *opposite* way\naround the camera. This way, you get the same effect as moving the actual\ncamera, but all the projection math can still be done with the camera\npositioned at the origin (which makes it way simpler).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeOrtho2DMatrix(left, right, bottom, top)\n\n<!--\n_syntax: makeOrtho2DMatrix(left, right, bottom, top)_\n_name: makeOrtho2DMatrix_\n_returns: void_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix becomes a 2D orthographic projection matrix.\n\nRelated to: glOrtho2D. The box-shaped viewing volume is\ndescribed by the four parameters and, implicitly, a zNear of -1\nand a zFar of 1.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeOrthoMatrix(left, right, bottom, top, zNear, zFar)\n\n<!--\n_syntax: makeOrthoMatrix(left, right, bottom, top, zNear, zFar)_\n_name: makeOrthoMatrix_\n_returns: void_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix becomes an orthographic projection matrix.\n\nRelated to: glOrtho. The orthographic projection has a box-shaped\nviewing volume described by the six parameters. Left, right, bottom,\nand top specify coordinates in the zNear clipping plane where the\ncorresponding box sides intersect it.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeOrthoNormalOf(&rhs)\n\n<!--\n_syntax: makeOrthoNormalOf(&rhs)_\n_name: makeOrthoNormalOf_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix becomes an orthonormalized version of the provided matrix.\n\nThe basis vectors (the 3x3 chunk embedded in the upper left of the matrix)\nare normalized. This means the resulting matrix has had scaling effects\nremoved. The fourth column and the fourth row are transferred over\nuntouched, so translation will be included as well.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makePerspectiveMatrix(fovy, aspectRatio, zNear, zFar)\n\n<!--\n_syntax: makePerspectiveMatrix(fovy, aspectRatio, zNear, zFar)_\n_name: makePerspectiveMatrix_\n_returns: void_\n_returns_description: _\n_parameters: double fovy, double aspectRatio, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix becomes a perspective projection matrix.\n\nRelated to: gluPerspective. The viewing volume is frustum-shaped amd\ndefined by the four parameters. The fovy and aspect ratio\nare used to compute the positions of the left, right, top, and bottom sides\nof the viewing volume in the zNear plane. The fovy is the y field-of-view,\nthe angle made by the top and bottom sides of frustum if they were to\nintersect. The aspect ratio is the width of the frustum divided by its\nheight. Note that the resulting volume is both vertically and\nhorizontally symmetrical around the center of the near plane.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeRotationMatrix(&from, &to)\n\n<!--\n_syntax: makeRotationMatrix(&from, &to)_\n_name: makeRotationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &from, const ofVec3f &to_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Rotation\n\\{\nMatrix becomes a rotation transform.\n\n\n**Parameters:**\n\nfrom Matrix becomes a rotation from this vector direction.\n\nto Matrix becomes a rotation to this vector direction.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeRotationMatrix(&quaternion)\n\n<!--\n_syntax: makeRotationMatrix(&quaternion)_\n_name: makeRotationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &quaternion_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Parameters:**\n\nquaternion Matrix becomes a rotation that produces the quaternion's orientation.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeRotationMatrix(angle, &axis)\n\n<!--\n_syntax: makeRotationMatrix(angle, &axis)_\n_name: makeRotationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: float angle, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Parameters:**\n\nangle Matrix becomes a rotation by angle (degrees).\n\naxis Rotation is performed around this vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeRotationMatrix(angle, x, y, z)\n\n<!--\n_syntax: makeRotationMatrix(angle, x, y, z)_\n_name: makeRotationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Parameters:**\n\nangle Matrix becomes a rotation by angle (degrees).\n\nx X-value of the rotation axis.\n\ny Y-value of the rotation axis.\n\nz Z-value of the rotation axis.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeRotationMatrix(angle1, &axis1, angle2, &axis2, angle3, &axis3)\n\n<!--\n_syntax: makeRotationMatrix(angle1, &axis1, angle2, &axis2, angle3, &axis3)_\n_name: makeRotationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: float angle1, const ofVec3f &axis1, float angle2, const ofVec3f &axis2, float angle3, const ofVec3f &axis3_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix becomes a rotation around multiple axes.\n\nThe final rotation is the result of rotating around each of the three\naxes, in order. Angles are given in degrees, and axes can be arbitrary\nvectors.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeScaleMatrix(&)\n\n<!--\n_syntax: makeScaleMatrix(&)_\n_name: makeScaleMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Scale\n\\{\nMatrix becomes a scale transform.\n\nAccepts x, y, z scale values as a vector or separately.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeScaleMatrix(float, float, float)\n\n<!--\n_syntax: makeScaleMatrix(float, float, float)_\n_name: makeScaleMatrix_\n_returns: void_\n_returns_description: _\n_parameters: float , float , float _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeTranslationMatrix(&)\n\n<!--\n_syntax: makeTranslationMatrix(&)_\n_name: makeTranslationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Translation\n\\{\nMatrix becomes a translation transform.\n\nAccepts x, y, z translation values as a vector or separately.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void makeTranslationMatrix(float, float, float)\n\n<!--\n_syntax: makeTranslationMatrix(float, float, float)_\n_name: makeTranslationMatrix_\n_returns: void_\n_returns_description: _\n_parameters: float , float , float _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newFrustumMatrix(left, right, bottom, top, zNear, zFar)\n\n<!--\n_syntax: newFrustumMatrix(left, right, bottom, top, zNear, zFar)_\n_name: newFrustumMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: makeFrustumMatrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newIdentityMatrix()\n\n<!--\n_syntax: newIdentityMatrix()_\n_name: newIdentityMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: makeIdentityMatrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newLookAtMatrix(&eye, &center, &up)\n\n<!--\n_syntax: newLookAtMatrix(&eye, &center, &up)_\n_name: newLookAtMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofVec3f &eye, const ofVec3f &center, const ofVec3f &up_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: makeLookAtMatrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newOrtho2DMatrix(left, right, bottom, top)\n\n<!--\n_syntax: newOrtho2DMatrix(left, right, bottom, top)_\n_name: newOrtho2DMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: makeOrtho2DMatrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newOrthoMatrix(left, right, bottom, top, zNear, zFar)\n\n<!--\n_syntax: newOrthoMatrix(left, right, bottom, top, zNear, zFar)_\n_name: newOrthoMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: double left, double right, double bottom, double top, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: makeOrthoMatrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newPerspectiveMatrix(fovy, aspectRatio, zNear, zFar)\n\n<!--\n_syntax: newPerspectiveMatrix(fovy, aspectRatio, zNear, zFar)_\n_name: newPerspectiveMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: double fovy, double aspectRatio, double zNear, double zFar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: makePerspectiveMatrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newRotationMatrix(&from, &to)\n\n<!--\n_syntax: newRotationMatrix(&from, &to)_\n_name: newRotationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofVec3f &from, const ofVec3f &to_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: makeRotationMatrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newRotationMatrix(&quat)\n\n<!--\n_syntax: newRotationMatrix(&quat)_\n_name: newRotationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofQuaternion &quat_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newRotationMatrix(angle, &axis)\n\n<!--\n_syntax: newRotationMatrix(angle, &axis)_\n_name: newRotationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: float angle, const ofVec3f &axis_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newRotationMatrix(angle, x, y, z)\n\n<!--\n_syntax: newRotationMatrix(angle, x, y, z)_\n_name: newRotationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newRotationMatrix(angle1, &axis1, angle2, &axis2, angle3, &axis3)\n\n<!--\n_syntax: newRotationMatrix(angle1, &axis1, angle2, &axis2, angle3, &axis3)_\n_name: newRotationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: float angle1, const ofVec3f &axis1, float angle2, const ofVec3f &axis2, float angle3, const ofVec3f &axis3_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newScaleMatrix(&sv)\n\n<!--\n_syntax: newScaleMatrix(&sv)_\n_name: newScaleMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofVec3f &sv_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: makeScaleMatrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newScaleMatrix(sx, sy, sz)\n\n<!--\n_syntax: newScaleMatrix(sx, sy, sz)_\n_name: newScaleMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: float sx, float sy, float sz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newTranslationMatrix(&dv)\n\n<!--\n_syntax: newTranslationMatrix(&dv)_\n_name: newTranslationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofVec3f &dv_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**See also**: makeTranslationMatrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 newTranslationMatrix(x, y, z)\n\n<!--\n_syntax: newTranslationMatrix(x, y, z)_\n_name: newTranslationMatrix_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofMatrix4x4(&mat)\n\n<!--\n_syntax: ofMatrix4x4(&mat)_\n_name: ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: const glm::mat4 &mat_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofMatrix4x4(&quat)\n\n<!--\n_syntax: ofMatrix4x4(&quat)_\n_name: ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: const ofQuaternion &quat_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotation matrices can be constructed from a quaternion.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofMatrix4x4()\n\n<!--\n_syntax: ofMatrix4x4()_\n_name: ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe default constructor provides an identity matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofMatrix4x4(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33)\n\n<!--\n_syntax: ofMatrix4x4(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33)_\n_name: ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: float a00, float a01, float a02, float a03, float a10, float a11, float a12, float a13, float a20, float a21, float a22, float a23, float a30, float a31, float a32, float a33_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPositional style.\n\nAll 16 values of the matrix as positional arguments in row-major order.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofMatrix4x4(ptr)\n\n<!--\n_syntax: ofMatrix4x4(ptr)_\n_name: ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: const float *const ptr_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct with a pointer.\n\nYou can pass a pointer to floats, and the first 16 contents will be\nextracted into this matrix.\n\n\n**Warning**: the validity of these values is not checked!\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float & operator()(row, col)\n\n<!--\n_syntax: operator()(row, col)_\n_name: operator()_\n_returns: float &_\n_returns_description: _\n_parameters: size_t row, size_t col_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nWrite data with `matrix(row,col)=number`\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float operator()(row, col)\n\n<!--\n_syntax: operator()(row, col)_\n_name: operator()_\n_returns: float_\n_returns_description: _\n_parameters: size_t row, size_t col_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRead data with `matrix(row, col)`\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 operator*(&m)\n\n<!--\n_syntax: operator*(&m)_\n_name: operator*_\n_returns: ofMatrix4x4_\n_returns_description: _\n_parameters: const ofMatrix4x4 &m_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\ncreates a new matrix from the product of two matrices.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f operator*(&v)\n\n<!--\n_syntax: operator*(&v)_\n_name: operator*_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix * Vector operator.\n\nCalls postMult() internally.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f operator*(&v)\n\n<!--\n_syntax: operator*(&v)_\n_name: operator*_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator*=(&other)\n\n<!--\n_syntax: operator*=(&other)_\n_name: operator*=_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &other_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe *= operation for matrices.\n\nThis is equivalent to calling postMult(other), but it allows you to do\nsomeMatrix *= someMatrix without breaking const-correctness. Calling\nsomeMatrix.postMult(someMatrix) won't work.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 & operator=(&rhs)\n\n<!--\n_syntax: operator=(&rhs)_\n_name: operator=_\n_returns: ofMatrix4x4 &_\n_returns_description: _\n_parameters: const ofMatrix4x4 &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCopy a matrix using `=` operator.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void postMult(&)\n\n<!--\n_syntax: postMult(&)_\n_name: postMult_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPost-multiply by another matrix.\n\nThis matrix becomes `this * other`.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f postMult(&v)\n\n<!--\n_syntax: postMult(&v)_\n_name: postMult_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMatrix * vector multiplication.\n\nThis operation implicitly treat vectors as column-matrices.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f postMult(&v)\n\n<!--\n_syntax: postMult(&v)_\n_name: postMult_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\npost-multiplies the vector by the matrix (i.e. returns M mult v).\nThe vector is implicitly treated as a column-matrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void postMultRotate(&q)\n\n<!--\n_syntax: postMultRotate(&q)_\n_name: postMultRotate_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEquivalent to postMult(newRotationMatrix(q)).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void postMultRotate(angle, x, y, z)\n\n<!--\n_syntax: postMultRotate(angle, x, y, z)_\n_name: postMultRotate_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void postMultScale(&v)\n\n<!--\n_syntax: postMultScale(&v)_\n_name: postMultScale_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEquivalent to postMult(scale(v)).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void postMultScale(x, y, z)\n\n<!--\n_syntax: postMultScale(x, y, z)_\n_name: postMultScale_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void postMultTranslate(&v)\n\n<!--\n_syntax: postMultTranslate(&v)_\n_name: postMultTranslate_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEquivalent to postMult(newTranslationMatrix(v)).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void postMultTranslate(x, y, z)\n\n<!--\n_syntax: postMultTranslate(x, y, z)_\n_name: postMultTranslate_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nthe positional argument version of the above\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void preMult(&)\n\n<!--\n_syntax: preMult(&)_\n_name: preMult_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPre-multiply by another matrix.\n\nThis matrix becomes `other * this`.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f preMult(&v)\n\n<!--\n_syntax: preMult(&v)_\n_name: preMult_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nVector * matrix multiplication.\n\nThis operation implicitly treats vectors as row-matrices.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec4f preMult(&v)\n\n<!--\n_syntax: preMult(&v)_\n_name: preMult_\n_returns: ofVec4f_\n_returns_description: _\n_parameters: const ofVec4f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\npre-multiplies the vector by the matrix (i.e. returns v mult M)\nThe vector is implicitly treated as a row-matrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void preMultRotate(&q)\n\n<!--\n_syntax: preMultRotate(&q)_\n_name: preMultRotate_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEquivalent to preMult(newRotationMatrix(q)).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void preMultScale(&v)\n\n<!--\n_syntax: preMultScale(&v)_\n_name: preMultScale_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEquivalent to preMult(newScaleMatrix(v)).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void preMultTranslate(&v)\n\n<!--\n_syntax: preMultTranslate(&v)_\n_name: preMultTranslate_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEquivalent to preMult(newTranslationMatrix(v)).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotate(&q)\n\n<!--\n_syntax: rotate(&q)_\n_name: rotate_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates based on the quarternion.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotate(angle, x, y, z)\n\n<!--\n_syntax: rotate(angle, x, y, z)_\n_name: rotate_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates by angle (degrees) around the given x, y, z axis.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateRad(angle, x, y, z)\n\n<!--\n_syntax: rotateRad(angle, x, y, z)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates by angle (radians) around the given x, y, z axis.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scale(&v)\n\n<!--\n_syntax: scale(&v)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScales each axis by the corresponding x, y, z of the vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scale(x, y, z)\n\n<!--\n_syntax: scale(x, y, z)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScales each axis by the corresponding x, y, z.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&rhs)\n\n<!--\n_syntax: set(&rhs)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix4x4 &rhs_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the data of the matrix.\n\nThese functions are analogous to the corresponding constructors.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33)\n\n<!--\n_syntax: set(a00, a01, a02, a03, a10, a11, a12, a13, a20, a21, a22, a23, a30, a31, a32, a33)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float a00, float a01, float a02, float a03, float a10, float a11, float a12, float a13, float a20, float a21, float a22, float a23, float a30, float a31, float a32, float a33_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(ptr)\n\n<!--\n_syntax: set(ptr)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const float *const ptr_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(ptr)\n\n<!--\n_syntax: set(ptr)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const double *const ptr_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRotate(&q)\n\n<!--\n_syntax: setRotate(&q)_\n_name: setRotate_\n_returns: void_\n_returns_description: _\n_parameters: const ofQuaternion &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Set methods\n\\{\n\nAll of these methods alter the components,\ndeleting the previous data only in that component.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setTranslation(&v)\n\n<!--\n_syntax: setTranslation(&v)_\n_name: setTranslation_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setTranslation(tx, ty, tz)\n\n<!--\n_syntax: setTranslation(tx, ty, tz)_\n_name: setTranslation_\n_returns: void_\n_returns_description: _\n_parameters: float tx, float ty, float tz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f transform3x3(&m, &v)\n\n<!--\n_syntax: transform3x3(&m, &v)_\n_name: transform3x3_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofMatrix4x4 &m, const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nApply a 3x3 transform (no translation) of M * v.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f transform3x3(&v, &m)\n\n<!--\n_syntax: transform3x3(&v, &m)_\n_name: transform3x3_\n_returns: ofVec3f_\n_returns_description: _\n_parameters: const ofVec3f &v, const ofMatrix4x4 &m_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nApply a 3x3 transform (no translation) of v * M.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(&v)\n\n<!--\n_syntax: translate(&v)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec3f &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTranslates along the vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(tx, ty, tz)\n\n<!--\n_syntax: translate(tx, ty, tz)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: float tx, float ty, float tz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTranslates by tx, ty, tz.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofMatrix4x4()\n\n<!--\n_syntax: ~ofMatrix4x4()_\n_name: ~ofMatrix4x4_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\ndestructor.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###ofVec4f _mat\n\n<!--\n_name: _mat_\n_type: ofVec4f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe values of the matrix, stored in row-major order.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}