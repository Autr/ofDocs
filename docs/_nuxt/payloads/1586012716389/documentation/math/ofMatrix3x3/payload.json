{"data":[{"page":{"entry":{"name":"ofMatrix3x3","filename":"ofMatrix3x3.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/math/ofMatrix3x3.markdown","path":"/documentation/math/ofMatrix3x3","route":"/documentation/math/ofMatrix3x3.markdown","dir":"../ofSite/documentation/math","ext":"markdown","type":"page","id":2380,"parent":2373,"breadcrumbs":[2373,1968],"siblings":[],"translations":{}},"description":{"short":"<p>A 3x3 Matrix</p>\n<p>The layout is like this:</p>\n<pre><code>[ a b c ]\n[ d e f ]\n[ g h i ]\n</code></pre>\n","full":"<p>The 3x3 matrix can hold the values needed to transform a 2d vertex, which is pretty handy when you want to do things like move vertices around, rotate them, etc. The 3x3 is pretty important because it allows you to have both a rotation and a transformation in the same little old object. You won't see them used a great deal because it's usually easier to use the rotate() and translate() methods of ofVec2f but they are handy sometimes. You'll probably see the ofMatrix4x4 used more often, because it allows you to represent a camera or a projection mathematically, and that's pretty useful in doing 3d graphics. They're also used in ofxOpenCv sometimes to represent information about cameras.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"determinant(&A)","name":"determinant","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix3x3 <span class=\"token operator\">&amp;</span>A","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"determinant()","name":"determinant","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Find the determinant of the matrix</p>\n<p><strong>See also</strong>: <a href=\"http://mathworld.wolfram.com/Determinant.html\">Wolfram explanation</a></p>\n","desc":""},{"syntax":"entrywiseTimes(&A)","name":"entrywiseTimes","returns":"ofMatrix3x3","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix3x3 <span class=\"token operator\">&amp;</span>A","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Multiply a matrix by a matrix entry by entry (i.e. a<em>a, b</em>b, c*c...)</p>\n<p>This is referred to as an entrywise, Hadamard, or Schur product.</p>\n","desc":"","counter":0},{"syntax":"inverse(&A)","name":"inverse","returns":"ofMatrix3x3","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix3x3 <span class=\"token operator\">&amp;</span>A","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Inverse of a 3x3 matrix</p>\n<p>the inverse is the adjoint divided through the determinant\nfind the matrix of minors (minor = determinant of 2x2 matrix of the 2 rows/colums current element is NOT in)\nturn them in cofactors (= change some of the signs)\nfind the adjoint by transposing the matrix of cofactors\ndivide this through the determinant to get the inverse</p>\n<p><strong>See also</strong>: invert();</p>\n","desc":"","counter":0},{"syntax":"invert()","name":"invert","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofMatrix3x3(&mat)","name":"ofMatrix3x3","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat3 <span class=\"token operator\">&amp;</span>mat","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"ofMatrix3x3(_a, _b, _c, _d, _e, _f, _g, _h, _i)","name":"ofMatrix3x3","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> _a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _i","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Constructor\n{</p>\n","desc":""},{"syntax":"operator*(&B)","name":"operator*","returns":"ofMatrix3x3","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix3x3 <span class=\"token operator\">&amp;</span>B","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Multiply a 3x3 matrix with a 3x3 matrix</p>\n","desc":"","counter":1},{"syntax":"operator*(scalar)","name":"operator*","returns":"ofMatrix3x3","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> scalar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Multiply a matrix with a scalar</p>\n","desc":""},{"syntax":"operator*=(&B)","name":"operator*=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix3x3 <span class=\"token operator\">&amp;</span>B","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Multiply a matrix by a matrix this = this*B (in that order)</p>\n","desc":"","counter":1},{"syntax":"operator*=(scalar)","name":"operator*=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> scalar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Multiply a matrix by a scalar (multiples all entries by scalar)</p>\n","desc":""},{"syntax":"operator+(&B)","name":"operator+","returns":"ofMatrix3x3","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix3x3 <span class=\"token operator\">&amp;</span>B","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Add two matrices</p>\n","desc":"","counter":0},{"syntax":"operator+=(&B)","name":"operator+=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix3x3 <span class=\"token operator\">&amp;</span>B","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Add matrix to existing matrix</p>\n","desc":"","counter":0},{"syntax":"operator-(&B)","name":"operator-","returns":"ofMatrix3x3","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix3x3 <span class=\"token operator\">&amp;</span>B","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Subtract two matrices</p>\n","desc":"","counter":0},{"syntax":"operator-=(&B)","name":"operator-=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix3x3 <span class=\"token operator\">&amp;</span>B","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Subtract matrix from existing matrix</p>\n","desc":"","counter":0},{"syntax":"operator/(scalar)","name":"operator/","returns":"ofMatrix3x3","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> scalar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Divide a matrix through a scalar</p>\n","desc":"","counter":0},{"syntax":"operator/=(&B)","name":"operator/=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix3x3 <span class=\"token operator\">&amp;</span>B","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"operator/=(scalar)","name":"operator/=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> scalar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator[](&index)","name":"operator[]","returns":"float &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>index","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"set(_a, _b, _c, _d, _e, _f, _g, _h, _i)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> _a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _f<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _i","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\name Matrix access\n{</p>\n","desc":"","counter":0},{"syntax":"transpose(&A)","name":"transpose","returns":"ofMatrix3x3","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofMatrix3x3 <span class=\"token operator\">&amp;</span>A","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Transpose without changing the matrix.\nUses the &quot;swap&quot; method with additions and subtractions to swap the elements that aren't on the main diagonal.</p>\n<p><strong>Returns</strong>: transposed matrix.</p>\n","desc":"","counter":1},{"syntax":"transpose()","name":"transpose","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Transpose the matrix</p>\n<p>This changes the matrix.</p>\n<pre><code>[ a b c ]T    [ a d g ]\n[ d e f ]  =  [ b e h ]\n[ g h i ]     [ c f i ]\n</code></pre>\n","desc":""},{"name":"a","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"b","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"c","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"d","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"e","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"f","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"g","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"h","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"i","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofMatrix3x3</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>A 3x3 Matrix</p>\n<p>The layout is like this:</p>\n<pre><code>[ a b c ]\n[ d e f ]\n[ g h i ]\n</code></pre>\n<p>##Description</p>\n<p>The 3x3 matrix can hold the values needed to transform a 2d vertex, which is pretty handy when you want to do things like move vertices around, rotate them, etc. The 3x3 is pretty important because it allows you to have both a rotation and a transformation in the same little old object. You won't see them used a great deal because it's usually easier to use the rotate() and translate() methods of ofVec2f but they are handy sometimes. You'll probably see the ofMatrix4x4 used more often, because it allows you to represent a camera or a projection mathematically, and that's pretty useful in doing 3d graphics. They're also used in ofxOpenCv sometimes to represent information about cameras.</p>\n<p>##Methods</p>\n<p>###float determinant(&amp;A)</p>\n<!--\n_syntax: determinant(&A)_\n_name: determinant_\n_returns: float_\n_returns_description: _\n_parameters: const ofMatrix3x3 &A_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float determinant()</p>\n<!--\n_syntax: determinant()_\n_name: determinant_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Find the determinant of the matrix</p>\n<p><strong>See also</strong>: <a href=\"http://mathworld.wolfram.com/Determinant.html\">Wolfram explanation</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix3x3 entrywiseTimes(&amp;A)</p>\n<!--\n_syntax: entrywiseTimes(&A)_\n_name: entrywiseTimes_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &A_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Multiply a matrix by a matrix entry by entry (i.e. a<em>a, b</em>b, c*c...)</p>\n<p>This is referred to as an entrywise, Hadamard, or Schur product.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix3x3 inverse(&amp;A)</p>\n<!--\n_syntax: inverse(&A)_\n_name: inverse_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &A_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Inverse of a 3x3 matrix</p>\n<p>the inverse is the adjoint divided through the determinant\nfind the matrix of minors (minor = determinant of 2x2 matrix of the 2 rows/colums current element is NOT in)\nturn them in cofactors (= change some of the signs)\nfind the adjoint by transposing the matrix of cofactors\ndivide this through the determinant to get the inverse</p>\n<p><strong>See also</strong>: invert();</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void invert()</p>\n<!--\n_syntax: invert()_\n_name: invert_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofMatrix3x3(&amp;mat)</h3>\n<!--\n_syntax: ofMatrix3x3(&mat)_\n_name: ofMatrix3x3_\n_returns: _\n_returns_description: _\n_parameters: const glm::mat3 &mat_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofMatrix3x3(_a, _b, _c, _d, _e, _f, _g, _h, _i)</h3>\n<!--\n_syntax: ofMatrix3x3(_a, _b, _c, _d, _e, _f, _g, _h, _i)_\n_name: ofMatrix3x3_\n_returns: _\n_returns_description: _\n_parameters: float _a, float _b, float _c, float _d, float _e, float _f, float _g, float _h, float _i_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\name Constructor\n{</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix3x3 operator*(&amp;B)</p>\n<!--\n_syntax: operator*(&B)_\n_name: operator*_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Multiply a 3x3 matrix with a 3x3 matrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix3x3 operator*(scalar)</p>\n<!--\n_syntax: operator*(scalar)_\n_name: operator*_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Multiply a matrix with a scalar</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void operator*=(&amp;B)</p>\n<!--\n_syntax: operator*=(&B)_\n_name: operator*=_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Multiply a matrix by a matrix this = this*B (in that order)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void operator*=(scalar)</p>\n<!--\n_syntax: operator*=(scalar)_\n_name: operator*=_\n_returns: void_\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Multiply a matrix by a scalar (multiples all entries by scalar)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix3x3 operator+(&amp;B)</p>\n<!--\n_syntax: operator+(&B)_\n_name: operator+_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Add two matrices</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void operator+=(&amp;B)</p>\n<!--\n_syntax: operator+=(&B)_\n_name: operator+=_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Add matrix to existing matrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix3x3 operator-(&amp;B)</p>\n<!--\n_syntax: operator-(&B)_\n_name: operator-_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Subtract two matrices</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void operator-=(&amp;B)</p>\n<!--\n_syntax: operator-=(&B)_\n_name: operator-=_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Subtract matrix from existing matrix</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix3x3 operator/(scalar)</p>\n<!--\n_syntax: operator/(scalar)_\n_name: operator/_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Divide a matrix through a scalar</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void operator/=(&amp;B)</p>\n<!--\n_syntax: operator/=(&B)_\n_name: operator/=_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void operator/=(scalar)</p>\n<!--\n_syntax: operator/=(scalar)_\n_name: operator/=_\n_returns: void_\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float &amp; operator<a href=\"&amp;index\"></a></p>\n<!--\n_syntax: operator[](&index)_\n_name: operator[]_\n_returns: float &_\n_returns_description: _\n_parameters: const int &index_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void set(_a, _b, _c, _d, _e, _f, _g, _h, _i)</p>\n<!--\n_syntax: set(_a, _b, _c, _d, _e, _f, _g, _h, _i)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float _a, float _b, float _c, float _d, float _e, float _f, float _g, float _h, float _i_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\name Matrix access\n{</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMatrix3x3 transpose(&amp;A)</p>\n<!--\n_syntax: transpose(&A)_\n_name: transpose_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &A_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Transpose without changing the matrix.\nUses the &quot;swap&quot; method with additions and subtractions to swap the elements that aren't on the main diagonal.</p>\n<p><strong>Returns</strong>: transposed matrix.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void transpose()</p>\n<!--\n_syntax: transpose()_\n_name: transpose_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Transpose the matrix</p>\n<p>This changes the matrix.</p>\n<pre><code>[ a b c ]T    [ a d g ]\n[ d e f ]  =  [ b e h ]\n[ g h i ]     [ c f i ]\n</code></pre>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###float a</p>\n<!--\n_name: a_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float b</p>\n<!--\n_name: b_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float c</p>\n<!--\n_name: c_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float d</p>\n<!--\n_name: d_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float e</p>\n<!--\n_name: e_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float f</p>\n<!--\n_name: f_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float g</p>\n<!--\n_name: g_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float h</p>\n<!--\n_name: h_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float i</p>\n<!--\n_name: i_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofMatrix3x3\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\nA 3x3 Matrix\n\nThe layout is like this:\n\n    [ a b c ]\n    [ d e f ]\n    [ g h i ]\n\n\n\n\n\n##Description\n\nThe 3x3 matrix can hold the values needed to transform a 2d vertex, which is pretty handy when you want to do things like move vertices around, rotate them, etc. The 3x3 is pretty important because it allows you to have both a rotation and a transformation in the same little old object. You won't see them used a great deal because it's usually easier to use the rotate() and translate() methods of ofVec2f but they are handy sometimes. You'll probably see the ofMatrix4x4 used more often, because it allows you to represent a camera or a projection mathematically, and that's pretty useful in doing 3d graphics. They're also used in ofxOpenCv sometimes to represent information about cameras.\n\n\n\n\n\n##Methods\n\n\n\n###float determinant(&A)\n\n<!--\n_syntax: determinant(&A)_\n_name: determinant_\n_returns: float_\n_returns_description: _\n_parameters: const ofMatrix3x3 &A_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float determinant()\n\n<!--\n_syntax: determinant()_\n_name: determinant_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFind the determinant of the matrix\n\n**See also**: [Wolfram explanation](http://mathworld.wolfram.com/Determinant.html)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix3x3 entrywiseTimes(&A)\n\n<!--\n_syntax: entrywiseTimes(&A)_\n_name: entrywiseTimes_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &A_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiply a matrix by a matrix entry by entry (i.e. a*a, b*b, c*c...)\n\nThis is referred to as an entrywise, Hadamard, or Schur product.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix3x3 inverse(&A)\n\n<!--\n_syntax: inverse(&A)_\n_name: inverse_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &A_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nInverse of a 3x3 matrix\n\nthe inverse is the adjoint divided through the determinant\nfind the matrix of minors (minor = determinant of 2x2 matrix of the 2 rows/colums current element is NOT in)\nturn them in cofactors (= change some of the signs)\nfind the adjoint by transposing the matrix of cofactors\ndivide this through the determinant to get the inverse\n\n\n**See also**: invert();\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void invert()\n\n<!--\n_syntax: invert()_\n_name: invert_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofMatrix3x3(&mat)\n\n<!--\n_syntax: ofMatrix3x3(&mat)_\n_name: ofMatrix3x3_\n_returns: _\n_returns_description: _\n_parameters: const glm::mat3 &mat_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofMatrix3x3(_a, _b, _c, _d, _e, _f, _g, _h, _i)\n\n<!--\n_syntax: ofMatrix3x3(_a, _b, _c, _d, _e, _f, _g, _h, _i)_\n_name: ofMatrix3x3_\n_returns: _\n_returns_description: _\n_parameters: float _a, float _b, float _c, float _d, float _e, float _f, float _g, float _h, float _i_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Constructor\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix3x3 operator*(&B)\n\n<!--\n_syntax: operator*(&B)_\n_name: operator*_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiply a 3x3 matrix with a 3x3 matrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix3x3 operator*(scalar)\n\n<!--\n_syntax: operator*(scalar)_\n_name: operator*_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiply a matrix with a scalar\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator*=(&B)\n\n<!--\n_syntax: operator*=(&B)_\n_name: operator*=_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiply a matrix by a matrix this = this*B (in that order)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator*=(scalar)\n\n<!--\n_syntax: operator*=(scalar)_\n_name: operator*=_\n_returns: void_\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiply a matrix by a scalar (multiples all entries by scalar)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix3x3 operator+(&B)\n\n<!--\n_syntax: operator+(&B)_\n_name: operator+_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd two matrices\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator+=(&B)\n\n<!--\n_syntax: operator+=(&B)_\n_name: operator+=_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd matrix to existing matrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix3x3 operator-(&B)\n\n<!--\n_syntax: operator-(&B)_\n_name: operator-_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSubtract two matrices\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator-=(&B)\n\n<!--\n_syntax: operator-=(&B)_\n_name: operator-=_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSubtract matrix from existing matrix\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix3x3 operator/(scalar)\n\n<!--\n_syntax: operator/(scalar)_\n_name: operator/_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDivide a matrix through a scalar\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator/=(&B)\n\n<!--\n_syntax: operator/=(&B)_\n_name: operator/=_\n_returns: void_\n_returns_description: _\n_parameters: const ofMatrix3x3 &B_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator/=(scalar)\n\n<!--\n_syntax: operator/=(scalar)_\n_name: operator/=_\n_returns: void_\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float & operator[](&index)\n\n<!--\n_syntax: operator[](&index)_\n_name: operator[]_\n_returns: float &_\n_returns_description: _\n_parameters: const int &index_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(_a, _b, _c, _d, _e, _f, _g, _h, _i)\n\n<!--\n_syntax: set(_a, _b, _c, _d, _e, _f, _g, _h, _i)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float _a, float _b, float _c, float _d, float _e, float _f, float _g, float _h, float _i_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\name Matrix access\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix3x3 transpose(&A)\n\n<!--\n_syntax: transpose(&A)_\n_name: transpose_\n_returns: ofMatrix3x3_\n_returns_description: _\n_parameters: const ofMatrix3x3 &A_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTranspose without changing the matrix.\nUses the \"swap\" method with additions and subtractions to swap the elements that aren't on the main diagonal.\n\n**Returns**: transposed matrix.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void transpose()\n\n<!--\n_syntax: transpose()_\n_name: transpose_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTranspose the matrix\n\nThis changes the matrix.\n\n    [ a b c ]T    [ a d g ]\n    [ d e f ]  =  [ b e h ]\n    [ g h i ]     [ c f i ]\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###float a\n\n<!--\n_name: a_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float b\n\n<!--\n_name: b_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float c\n\n<!--\n_name: c_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float d\n\n<!--\n_name: d_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float e\n\n<!--\n_name: e_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float f\n\n<!--\n_name: f_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float g\n\n<!--\n_name: g_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float h\n\n<!--\n_name: h_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float i\n\n<!--\n_name: i_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}