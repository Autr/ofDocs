{"data":[{"page":{"entry":{"name":"ofBuffer","filename":"ofBuffer.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/utils/ofBuffer.markdown","path":"/documentation/utils/ofBuffer","route":"/documentation/utils/ofBuffer.markdown","dir":"../ofSite/documentation/utils","ext":"markdown","type":"page","id":2453,"parent":2446,"breadcrumbs":[2446,1968],"siblings":[],"translations":{}},"description":{"short":"<p>A buffer of data which can be accessed as simple bytes or text.</p>\n","full":"<p>ofBuffer is a convenience class that provides easy methods for reading from and writing to files. It makes heavy use of the standard C++ ostream and istream classes, but also adds in easy ways to convert file data to strings, like:</p>\n<pre><code class=\"language-{.cpp}\">ofBuffer buffer <span class=\"token operator\">=</span> <span class=\"token function\">ofBufferFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"someFile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// reading into the buffer</span>\ncout <span class=\"token operator\">&lt;&lt;</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// let's see what it says</span>\n</code></pre>\n<p>You can also use the ofBufferFromFile() method to create a buffer from a file:</p>\n<pre><code class=\"language-{.cpp}\">ofBuffer fileBuffer <span class=\"token operator\">=</span> <span class=\"token function\">ofBufferFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"someFile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"allocate(size)","name":"allocate","returns":"void","returns_description":null,"parameters":"size_t size","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Request that the buffer capacity be at least enough to contain a\nspecified number of bytes.</p>\n<p><strong>Parameters:</strong></p>\n<p>size number of bytes to reserve space for</p>\n","desc":"<p>Allocate memory for the buffer to use. This sizes the char vector that the ofBuffer instance contains.</p>\n","counter":0},{"syntax":"append(&buffer)","name":"append","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>buffer","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Append bytes to the end of buffer from a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>buffer string to copy bytes from</p>\n","desc":"","counter":1},{"syntax":"append(*buffer, size)","name":"append","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t size","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Append bytes to the end of the buffer from a raw byte pointer.</p>\n<p><strong>Warning</strong>: buffer <em>must</em> not be NULL</p>\n<p><strong>Warning</strong>: size <em>must</em> be &lt;= the number of bytes allocated in buffer</p>\n<p><strong>Parameters:</strong></p>\n<p>buffer pointer to the raw byte buffer to copy data from</p>\n<p>size the number of bytes to read</p>\n","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Remove all bytes from the buffer, leaving a size of 0.</p>\n","desc":"<p>Clears all the data from the buffer.</p>\n","counter":0},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"getData()","name":"getData","returns":"char *","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Access the buffer's contents using a raw byte pointer.</p>\n<p><strong>Warning</strong>: Do not access bytes at indices beyond size()!</p>\n<p><strong>Returns</strong>: pointer to internal raw bytes</p>\n","desc":"","counter":1},{"syntax":"getData()","name":"getData","returns":"const char *","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>access the buffer's contents using a const raw byte pointer.</p>\n<p><strong>Warning</strong>: Do not access bytes at indices beyond size()!</p>\n<p><strong>Returns</strong>: const pointer to internal raw bytes</p>\n","desc":""},{"syntax":"getLines()","name":"getLines","returns":"ofBuffer::Lines","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Access the contents of the buffer as a series of text lines.</p>\n<p>If the buffer loads a text file with lines separated by an endline\nchar '\\n', you can access each line individually using Line structs.</p>\n<p><strong>Returns</strong>: buffer text lines</p>\n","desc":"","counter":0},{"syntax":"getReverseLines()","name":"getReverseLines","returns":"ofBuffer::RLines","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Access the contents of the buffer as a series of text lines in reverse\norder</p>\n<p>If the buffer loads a text file with lines separated by an endline\nchar '\\n' or '\\r\\n', you can access each line individually using Line structs.</p>\n<p><strong>Returns</strong>: buffer text lines</p>\n","desc":"","counter":0},{"syntax":"getText()","name":"getText","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>get the contents of the buffer as a string.</p>\n<p><strong>Returns</strong>: buffer contents as a string</p>\n","desc":"<p>Return the buffer data as a string.</p>\n","counter":0},{"syntax":"ofBuffer(&stream, ioBlockSize)","name":"ofBuffer","returns":null,"returns_description":null,"parameters":"istream <span class=\"token operator\">&amp;</span>stream<span class=\"token punctuation\">,</span> size_t ioBlockSize","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a buffer and set its contents from an input stream.</p>\n<p><strong>Parameters:</strong></p>\n<p>ioBlockSize the number of bytes to read from the stream in chunks</p>\n","desc":"<p>Copy constructor, allows you to do:</p>\n<pre><code class=\"language-{.cpp}\">ofBuffer aBuff<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// put some stuff in aBuff</span>\nofBuffer <span class=\"token function\">bBuff</span><span class=\"token punctuation\">(</span>aBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now it's in bBuff as well</span>\n</code></pre>\n","counter":2},{"syntax":"ofBuffer()","name":"ofBuffer","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Constructor.</p>\n"},{"syntax":"ofBuffer(*buffer, size)","name":"ofBuffer","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t size","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a buffer and set its contents from a raw byte pointer.</p>\n<p><strong>Parameters:</strong></p>\n<p>buffer pointer to the raw byte buffer to copy data from</p>\n<p>size the number of bytes to read</p>\n<p><strong>Warning</strong>: buffer <em>must</em> not be NULL</p>\n<p><strong>Warning</strong>: size <em>must</em> be &lt;= the number of bytes allocated in buffer</p>\n","desc":"<p>Create a buffer with a character array.</p>\n<pre><code class=\"language-{.cpp}\">string giantDataString<span class=\"token punctuation\">;</span>\nofBuffer <span class=\"token function\">buff</span><span class=\"token punctuation\">(</span>giantDataString<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> giantDataString<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"operator=(&text)","name":"operator=","returns":"ofBuffer &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>text","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>set contents of the buffer from a string</p>\n","desc":"","counter":0},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"reserve(size)","name":"reserve","returns":"void","returns_description":null,"parameters":"size_t size","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Request that the buffer capacity be at least enough to contain a\nspecified number of bytes.</p>\n<p><strong>Parameters:</strong></p>\n<p>size number of bytes to reserve space for</p>\n","desc":"","counter":0},{"syntax":"resize(size)","name":"resize","returns":"void","returns_description":null,"parameters":"size_t size","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"set(&stream, ioBlockSize)","name":"set","returns":"bool","returns_description":null,"parameters":"istream <span class=\"token operator\">&amp;</span>stream<span class=\"token punctuation\">,</span> size_t ioBlockSize","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set contents of the buffer from an input stream.</p>\n<p><strong>Parameters:</strong></p>\n<p>stream input stream to copy data from</p>\n<p>ioBlockSize the number of bytes to read from the stream in chunks</p>\n","desc":"<p>Set the buffer from an istream.</p>\n","counter":2},{"syntax":"set(&text)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>text","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set contents of the buffer from a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>text string to copy data from</p>\n","desc":""},{"syntax":"set(*buffer, size)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t size","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the contents of the buffer from a raw byte pointer.</p>\n<p><strong>Warning</strong>: buffer <em>must</em> not be NULL</p>\n<p><strong>Warning</strong>: size <em>must</em> be &lt;= the number of bytes allocated in buffer</p>\n<p><strong>Parameters:</strong></p>\n<p>buffer pointer to the raw byte buffer to copy data from</p>\n<p>size the number of bytes to read</p>\n","desc":"<p>Set the buffer from a string.</p>\n<pre><code class=\"language-{.cpp}\">string giantDataString<span class=\"token punctuation\">;</span>\nofBuffer buff<span class=\"token punctuation\">;</span>\nbuff<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>giantDataString<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> giantDataString<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"setall(mem)","name":"setall","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> mem","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set all bytes in the buffer to a given value.</p>\n<p><strong>Parameters:</strong></p>\n<p>mem byte value to set</p>\n","desc":"","counter":0},{"syntax":"size()","name":"size","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Check the buffer's size.</p>\n<p><strong>Returns</strong>: the size of the buffer's content in bytes</p>\n","desc":"<p>Get the size of the buffer data.</p>\n","counter":0},{"syntax":"writeTo(&stream)","name":"writeTo","returns":"bool","returns_description":null,"parameters":"ostream <span class=\"token operator\">&amp;</span>stream","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Write contents of the buffer to an output stream.</p>\n","desc":"","counter":0},{"short":"","desc":""},{"name":"currentLine","type":"ofBuffer::Line","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofBuffer</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>A buffer of data which can be accessed as simple bytes or text.</p>\n<p>##Description</p>\n<p>ofBuffer is a convenience class that provides easy methods for reading from and writing to files. It makes heavy use of the standard C++ ostream and istream classes, but also adds in easy ways to convert file data to strings, like:</p>\n<pre><code class=\"language-{.cpp}\">ofBuffer buffer <span class=\"token operator\">=</span> <span class=\"token function\">ofBufferFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"someFile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// reading into the buffer</span>\ncout <span class=\"token operator\">&lt;&lt;</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// let's see what it says</span>\n</code></pre>\n<p>You can also use the ofBufferFromFile() method to create a buffer from a file:</p>\n<pre><code class=\"language-{.cpp}\">ofBuffer fileBuffer <span class=\"token operator\">=</span> <span class=\"token function\">ofBufferFromFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"someFile.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>##Methods</p>\n<p>###void allocate(size)</p>\n<!--\n_syntax: allocate(size)_\n_name: allocate_\n_returns: void_\n_returns_description: _\n_parameters: size_t size_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Request that the buffer capacity be at least enough to contain a\nspecified number of bytes.</p>\n<p><strong>Parameters:</strong></p>\n<p>size number of bytes to reserve space for</p>\n<p>_description: _</p>\n<p>Allocate memory for the buffer to use. This sizes the char vector that the ofBuffer instance contains.</p>\n<!----------------------------------------------------------------------------->\n<p>###void append(&amp;buffer)</p>\n<!--\n_syntax: append(&buffer)_\n_name: append_\n_returns: void_\n_returns_description: _\n_parameters: const string &buffer_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Append bytes to the end of buffer from a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>buffer string to copy bytes from</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void append(*buffer, size)</p>\n<!--\n_syntax: append(*buffer, size)_\n_name: append_\n_returns: void_\n_returns_description: _\n_parameters: const char *buffer, size_t size_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Append bytes to the end of the buffer from a raw byte pointer.</p>\n<p><strong>Warning</strong>: buffer <em>must</em> not be NULL</p>\n<p><strong>Warning</strong>: size <em>must</em> be &lt;= the number of bytes allocated in buffer</p>\n<p><strong>Parameters:</strong></p>\n<p>buffer pointer to the raw byte buffer to copy data from</p>\n<p>size the number of bytes to read</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; char &gt;::iterator begin()</p>\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: vector< char >::iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; char &gt;::const_iterator begin()</p>\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: vector< char >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void clear()</p>\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Remove all bytes from the buffer, leaving a size of 0.</p>\n<p>_description: _</p>\n<p>Clears all the data from the buffer.</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; char &gt;::iterator end()</p>\n<!--\n_syntax: end()_\n_name: end_\n_returns: vector< char >::iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; char &gt;::const_iterator end()</p>\n<!--\n_syntax: end()_\n_name: end_\n_returns: vector< char >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###char * getData()</p>\n<!--\n_syntax: getData()_\n_name: getData_\n_returns: char *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Access the buffer's contents using a raw byte pointer.</p>\n<p><strong>Warning</strong>: Do not access bytes at indices beyond size()!</p>\n<p><strong>Returns</strong>: pointer to internal raw bytes</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###const char * getData()</p>\n<!--\n_syntax: getData()_\n_name: getData_\n_returns: const char *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>access the buffer's contents using a const raw byte pointer.</p>\n<p><strong>Warning</strong>: Do not access bytes at indices beyond size()!</p>\n<p><strong>Returns</strong>: const pointer to internal raw bytes</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofBuffer::Lines getLines()</p>\n<!--\n_syntax: getLines()_\n_name: getLines_\n_returns: ofBuffer::Lines_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Access the contents of the buffer as a series of text lines.</p>\n<p>If the buffer loads a text file with lines separated by an endline\nchar '\\n', you can access each line individually using Line structs.</p>\n<p><strong>Returns</strong>: buffer text lines</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofBuffer::RLines getReverseLines()</p>\n<!--\n_syntax: getReverseLines()_\n_name: getReverseLines_\n_returns: ofBuffer::RLines_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Access the contents of the buffer as a series of text lines in reverse\norder</p>\n<p>If the buffer loads a text file with lines separated by an endline\nchar '\\n' or '\\r\\n', you can access each line individually using Line structs.</p>\n<p><strong>Returns</strong>: buffer text lines</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string getText()</p>\n<!--\n_syntax: getText()_\n_name: getText_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>get the contents of the buffer as a string.</p>\n<p><strong>Returns</strong>: buffer contents as a string</p>\n<p>_description: _</p>\n<p>Return the buffer data as a string.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofBuffer(&amp;stream, ioBlockSize)</h3>\n<!--\n_syntax: ofBuffer(&stream, ioBlockSize)_\n_name: ofBuffer_\n_returns: _\n_returns_description: _\n_parameters: istream &stream, size_t ioBlockSize_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create a buffer and set its contents from an input stream.</p>\n<p><strong>Parameters:</strong></p>\n<p>ioBlockSize the number of bytes to read from the stream in chunks</p>\n<p>_description: _</p>\n<p>Copy constructor, allows you to do:</p>\n<pre><code class=\"language-{.cpp}\">ofBuffer aBuff<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// put some stuff in aBuff</span>\nofBuffer <span class=\"token function\">bBuff</span><span class=\"token punctuation\">(</span>aBuff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now it's in bBuff as well</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<h3>ofBuffer()</h3>\n<!--\n_syntax: ofBuffer()_\n_name: ofBuffer_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Constructor.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofBuffer(*buffer, size)</h3>\n<!--\n_syntax: ofBuffer(*buffer, size)_\n_name: ofBuffer_\n_returns: _\n_returns_description: _\n_parameters: const char *buffer, size_t size_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create a buffer and set its contents from a raw byte pointer.</p>\n<p><strong>Parameters:</strong></p>\n<p>buffer pointer to the raw byte buffer to copy data from</p>\n<p>size the number of bytes to read</p>\n<p><strong>Warning</strong>: buffer <em>must</em> not be NULL</p>\n<p><strong>Warning</strong>: size <em>must</em> be &lt;= the number of bytes allocated in buffer</p>\n<p>_description: _</p>\n<p>Create a buffer with a character array.</p>\n<pre><code class=\"language-{.cpp}\">string giantDataString<span class=\"token punctuation\">;</span>\nofBuffer <span class=\"token function\">buff</span><span class=\"token punctuation\">(</span>giantDataString<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> giantDataString<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###ofBuffer &amp; operator=(&amp;text)</p>\n<!--\n_syntax: operator=(&text)_\n_name: operator=_\n_returns: ofBuffer &_\n_returns_description: _\n_parameters: const string &text_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>set contents of the buffer from a string</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; char &gt;::reverse_iterator rbegin()</p>\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: vector< char >::reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; char &gt;::const_reverse_iterator rbegin()</p>\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: vector< char >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; char &gt;::reverse_iterator rend()</p>\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: vector< char >::reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; char &gt;::const_reverse_iterator rend()</p>\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: vector< char >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void reserve(size)</p>\n<!--\n_syntax: reserve(size)_\n_name: reserve_\n_returns: void_\n_returns_description: _\n_parameters: size_t size_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Request that the buffer capacity be at least enough to contain a\nspecified number of bytes.</p>\n<p><strong>Parameters:</strong></p>\n<p>size number of bytes to reserve space for</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void resize(size)</p>\n<!--\n_syntax: resize(size)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: size_t size_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Resize the buffer to contain a specified number of bytes.</p>\n<p>If size is &lt; the current buffer size, the contents are reduced to size\nbytes &amp; remaining bytes are removed. If size is &gt; the current buffer\nsize, the buffer's size is increased to size_ bytes.</p>\n<p><strong>Parameters:</strong></p>\n<p>size number of bytes to resize the buffer to</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool set(&amp;stream, ioBlockSize)</p>\n<!--\n_syntax: set(&stream, ioBlockSize)_\n_name: set_\n_returns: bool_\n_returns_description: _\n_parameters: istream &stream, size_t ioBlockSize_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set contents of the buffer from an input stream.</p>\n<p><strong>Parameters:</strong></p>\n<p>stream input stream to copy data from</p>\n<p>ioBlockSize the number of bytes to read from the stream in chunks</p>\n<p>_description: _</p>\n<p>Set the buffer from an istream.</p>\n<!----------------------------------------------------------------------------->\n<p>###void set(&amp;text)</p>\n<!--\n_syntax: set(&text)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const string &text_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set contents of the buffer from a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>text string to copy data from</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void set(*buffer, size)</p>\n<!--\n_syntax: set(*buffer, size)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const char *buffer, size_t size_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the contents of the buffer from a raw byte pointer.</p>\n<p><strong>Warning</strong>: buffer <em>must</em> not be NULL</p>\n<p><strong>Warning</strong>: size <em>must</em> be &lt;= the number of bytes allocated in buffer</p>\n<p><strong>Parameters:</strong></p>\n<p>buffer pointer to the raw byte buffer to copy data from</p>\n<p>size the number of bytes to read</p>\n<p>_description: _</p>\n<p>Set the buffer from a string.</p>\n<pre><code class=\"language-{.cpp}\">string giantDataString<span class=\"token punctuation\">;</span>\nofBuffer buff<span class=\"token punctuation\">;</span>\nbuff<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>giantDataString<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> giantDataString<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void setall(mem)</p>\n<!--\n_syntax: setall(mem)_\n_name: setall_\n_returns: void_\n_returns_description: _\n_parameters: char mem_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set all bytes in the buffer to a given value.</p>\n<p><strong>Parameters:</strong></p>\n<p>mem byte value to set</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###size_t size()</p>\n<!--\n_syntax: size()_\n_name: size_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check the buffer's size.</p>\n<p><strong>Returns</strong>: the size of the buffer's content in bytes</p>\n<p>_description: _</p>\n<p>Get the size of the buffer data.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool writeTo(&amp;stream)</p>\n<!--\n_syntax: writeTo(&stream)_\n_name: writeTo_\n_returns: bool_\n_returns_description: _\n_parameters: ostream &stream_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Write contents of the buffer to an output stream.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###vector&lt; char &gt; buffer</p>\n<!--\n_name: buffer_\n_type: vector< char >_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofBuffer::Line currentLine</p>\n<!--\n_name: currentLine_\n_type: ofBuffer::Line_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofBuffer\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\nA buffer of data which can be accessed as simple bytes or text.\n\n\n\n\n\n\n##Description\n\nofBuffer is a convenience class that provides easy methods for reading from and writing to files. It makes heavy use of the standard C++ ostream and istream classes, but also adds in easy ways to convert file data to strings, like:\n\n~~~~{.cpp}\nofBuffer buffer = ofBufferFromFile(\"someFile.txt\"); // reading into the buffer\ncout << buffer.getText(); // let's see what it says\n~~~~\n\nYou can also use the ofBufferFromFile() method to create a buffer from a file:\n\n~~~~{.cpp}\nofBuffer fileBuffer = ofBufferFromFile(\"someFile.txt\");\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###void allocate(size)\n\n<!--\n_syntax: allocate(size)_\n_name: allocate_\n_returns: void_\n_returns_description: _\n_parameters: size_t size_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRequest that the buffer capacity be at least enough to contain a\nspecified number of bytes.\n\n\n**Parameters:**\n\nsize number of bytes to reserve space for\n\n\n\n\n\n_description: _\n\nAllocate memory for the buffer to use. This sizes the char vector that the ofBuffer instance contains.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void append(&buffer)\n\n<!--\n_syntax: append(&buffer)_\n_name: append_\n_returns: void_\n_returns_description: _\n_parameters: const string &buffer_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAppend bytes to the end of buffer from a string.\n\n\n**Parameters:**\n\nbuffer string to copy bytes from\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void append(*buffer, size)\n\n<!--\n_syntax: append(*buffer, size)_\n_name: append_\n_returns: void_\n_returns_description: _\n_parameters: const char *buffer, size_t size_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAppend bytes to the end of the buffer from a raw byte pointer.\n\n\n**Warning**: buffer *must* not be NULL\n\n**Warning**: size *must* be <= the number of bytes allocated in buffer\n\n**Parameters:**\n\nbuffer pointer to the raw byte buffer to copy data from\n\nsize the number of bytes to read\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< char >::iterator begin()\n\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: vector< char >::iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< char >::const_iterator begin()\n\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: vector< char >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemove all bytes from the buffer, leaving a size of 0.\n\n\n\n\n\n_description: _\n\nClears all the data from the buffer.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< char >::iterator end()\n\n<!--\n_syntax: end()_\n_name: end_\n_returns: vector< char >::iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< char >::const_iterator end()\n\n<!--\n_syntax: end()_\n_name: end_\n_returns: vector< char >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###char * getData()\n\n<!--\n_syntax: getData()_\n_name: getData_\n_returns: char *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAccess the buffer's contents using a raw byte pointer.\n\n\n**Warning**: Do not access bytes at indices beyond size()!\n\n**Returns**: pointer to internal raw bytes\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const char * getData()\n\n<!--\n_syntax: getData()_\n_name: getData_\n_returns: const char *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\naccess the buffer's contents using a const raw byte pointer.\n\n\n**Warning**: Do not access bytes at indices beyond size()!\n\n**Returns**: const pointer to internal raw bytes\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBuffer::Lines getLines()\n\n<!--\n_syntax: getLines()_\n_name: getLines_\n_returns: ofBuffer::Lines_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAccess the contents of the buffer as a series of text lines.\n\nIf the buffer loads a text file with lines separated by an endline\nchar '\\n', you can access each line individually using Line structs.\n\n\n**Returns**: buffer text lines\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBuffer::RLines getReverseLines()\n\n<!--\n_syntax: getReverseLines()_\n_name: getReverseLines_\n_returns: ofBuffer::RLines_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAccess the contents of the buffer as a series of text lines in reverse\norder\n\nIf the buffer loads a text file with lines separated by an endline\nchar '\\n' or '\\r\\n', you can access each line individually using Line structs.\n\n\n**Returns**: buffer text lines\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getText()\n\n<!--\n_syntax: getText()_\n_name: getText_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nget the contents of the buffer as a string.\n\n\n**Returns**: buffer contents as a string\n\n\n\n\n\n_description: _\n\nReturn the buffer data as a string.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofBuffer(&stream, ioBlockSize)\n\n<!--\n_syntax: ofBuffer(&stream, ioBlockSize)_\n_name: ofBuffer_\n_returns: _\n_returns_description: _\n_parameters: istream &stream, size_t ioBlockSize_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a buffer and set its contents from an input stream.\n\n\n**Parameters:**\n\nioBlockSize the number of bytes to read from the stream in chunks\n\n\n\n\n\n_description: _\n\nCopy constructor, allows you to do:\n\n~~~~{.cpp}\nofBuffer aBuff;\n// put some stuff in aBuff\nofBuffer bBuff(aBuff); // now it's in bBuff as well\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofBuffer()\n\n<!--\n_syntax: ofBuffer()_\n_name: ofBuffer_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConstructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofBuffer(*buffer, size)\n\n<!--\n_syntax: ofBuffer(*buffer, size)_\n_name: ofBuffer_\n_returns: _\n_returns_description: _\n_parameters: const char *buffer, size_t size_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a buffer and set its contents from a raw byte pointer.\n\n\n**Parameters:**\n\nbuffer pointer to the raw byte buffer to copy data from\n\nsize the number of bytes to read\n\n**Warning**: buffer *must* not be NULL\n\n**Warning**: size *must* be <= the number of bytes allocated in buffer\n\n\n\n\n\n_description: _\n\nCreate a buffer with a character array.\n\n~~~~{.cpp}\nstring giantDataString;\nofBuffer buff(giantDataString.c_str(), giantDataString.size());\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBuffer & operator=(&text)\n\n<!--\n_syntax: operator=(&text)_\n_name: operator=_\n_returns: ofBuffer &_\n_returns_description: _\n_parameters: const string &text_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nset contents of the buffer from a string\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< char >::reverse_iterator rbegin()\n\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: vector< char >::reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< char >::const_reverse_iterator rbegin()\n\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: vector< char >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< char >::reverse_iterator rend()\n\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: vector< char >::reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< char >::const_reverse_iterator rend()\n\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: vector< char >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void reserve(size)\n\n<!--\n_syntax: reserve(size)_\n_name: reserve_\n_returns: void_\n_returns_description: _\n_parameters: size_t size_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRequest that the buffer capacity be at least enough to contain a\nspecified number of bytes.\n\n\n**Parameters:**\n\nsize number of bytes to reserve space for\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resize(size)\n\n<!--\n_syntax: resize(size)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: size_t size_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nResize the buffer to contain a specified number of bytes.\n\nIf size is < the current buffer size, the contents are reduced to size\nbytes & remaining bytes are removed. If size is > the current buffer\nsize, the buffer's size is increased to size_ bytes.\n\n\n**Parameters:**\n\nsize number of bytes to resize the buffer to\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool set(&stream, ioBlockSize)\n\n<!--\n_syntax: set(&stream, ioBlockSize)_\n_name: set_\n_returns: bool_\n_returns_description: _\n_parameters: istream &stream, size_t ioBlockSize_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet contents of the buffer from an input stream.\n\n\n**Parameters:**\n\nstream input stream to copy data from\n\nioBlockSize the number of bytes to read from the stream in chunks\n\n\n\n\n\n_description: _\n\nSet the buffer from an istream.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&text)\n\n<!--\n_syntax: set(&text)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const string &text_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet contents of the buffer from a string.\n\n\n**Parameters:**\n\ntext string to copy data from\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(*buffer, size)\n\n<!--\n_syntax: set(*buffer, size)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const char *buffer, size_t size_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the contents of the buffer from a raw byte pointer.\n\n\n**Warning**: buffer *must* not be NULL\n\n**Warning**: size *must* be <= the number of bytes allocated in buffer\n\n**Parameters:**\n\nbuffer pointer to the raw byte buffer to copy data from\n\nsize the number of bytes to read\n\n\n\n\n\n_description: _\n\nSet the buffer from a string.\n\n~~~~{.cpp}\nstring giantDataString;\nofBuffer buff;\nbuff.set(giantDataString.c_str(), giantDataString.size());\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setall(mem)\n\n<!--\n_syntax: setall(mem)_\n_name: setall_\n_returns: void_\n_returns_description: _\n_parameters: char mem_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet all bytes in the buffer to a given value.\n\n\n**Parameters:**\n\nmem byte value to set\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t size()\n\n<!--\n_syntax: size()_\n_name: size_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck the buffer's size.\n\n\n**Returns**: the size of the buffer's content in bytes\n\n\n\n\n\n_description: _\n\nGet the size of the buffer data.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool writeTo(&stream)\n\n<!--\n_syntax: writeTo(&stream)_\n_name: writeTo_\n_returns: bool_\n_returns_description: _\n_parameters: ostream &stream_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nWrite contents of the buffer to an output stream.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###vector< char > buffer\n\n<!--\n_name: buffer_\n_type: vector< char >_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofBuffer::Line currentLine\n\n<!--\n_name: currentLine_\n_type: ofBuffer::Line_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}