{"data":[{"page":{"entry":{"name":"ofUtils (functions)","filename":"ofUtils_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/utils/ofUtils_functions.markdown","path":"/documentation/utils/ofUtils_functions","route":"/documentation/utils/ofUtils_functions.markdown","dir":"../ofSite/documentation/utils","ext":"markdown","type":"page","id":2480,"parent":2446,"breadcrumbs":[2446,1968],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"ofBinaryToChar(&value)","name":"ofBinaryToChar","returns":"char","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a binary string to an char.</p>\n<p>Interprets a string consisting only of 1s and 0s as an char and returns\nthe corresponding int value.</p>\n<p>\\value The binary string.</p>\n<p><strong>Returns</strong>: the char represented by the string or 0 on failure.</p>\n","desc":"<p>Interprets a string consisting only of 1s and 0s as a char, and returns the corresponding char value.</p>\n","counter":0},{"syntax":"ofBinaryToFloat(&value)","name":"ofBinaryToFloat","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a binary string to a float.</p>\n<p>Interprets a string consisting only of 1s and 0s as an a float\n(little-endian, 32-bit IEEE 754), and returns the corresponding float value.</p>\n<p>\\value The binary string.</p>\n<p><strong>Returns</strong>: the float represented by the string or 0 on failure.</p>\n","desc":"<p>Interprets a string consisting only of 1s and 0s as a float (little-endian, 32-bit IEEE 754), and returns the corresponding float value.</p>\n","counter":0},{"syntax":"ofBinaryToInt(&value)","name":"ofBinaryToInt","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a binary string to an int.</p>\n<p>Interprets a string consisting only of 1s and 0s as an int (little-endian,\n32-bit), and returns the corresponding int value.</p>\n<p>\\value The binary string.</p>\n<p><strong>Returns</strong>: the integer represented by the string or 0 on failure.</p>\n","desc":"<p>Interprets a string consisting only of 1s and 0s as an int (little-endian, 32-bit), and returns the corresponding int value.</p>\n","counter":0},{"syntax":"ofBinaryToString(&value)","name":"ofBinaryToString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a binary string to ASCII characters.</p>\n<p>Interprets a string consisting only of 1s and 0s as 8-bit ASCII characters\nand returns the corresponding string.</p>\n<p>\\value The binary string.</p>\n<p><strong>Returns</strong>: the ASCII string represented by the string.</p>\n","desc":"<p>Interprets a string consisting only of 1s and 0s as 8-bit ASCII characters, and returns the corresponding string.</p>\n","counter":0},{"syntax":"ofContains(&values, &target)","name":"ofContains","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>values<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>target","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Search for a target value in a vector of values.\n\\tparam T the type contained by the vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to be searched.</p>\n<p>target The target value to be found.</p>\n<p><strong>Returns</strong>: true if at least one value equal to the target value is found.</p>\n","desc":"<p>returns true if the vector values contains target</p>\n","counter":0},{"syntax":"ofDisableDataPath()","name":"ofDisableDataPath","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Disable the use of the data path.</p>\n<p>This function causes ofToDataPath() to ignore the relative path set\nwith ofSetDataPathRoot().</p>\n","desc":"<p>Disables the conversion of paths to realtive to data/</p>\n","counter":0},{"syntax":"ofEnableDataPath()","name":"ofEnableDataPath","returns":"void","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>\\section Data Path\nEnable the use of the data path.</p>\n<p>This function causes ofToDataPath() to respect the relative path set\nwith ofSetDataPathRoot().  This is enabled by default.</p>\n","desc":"<p>Enables the conversion of paths to relative to data/  This is enabled by default.</p>\n","counter":0},{"syntax":"ofFind(&values, &target)","name":"ofFind","returns":"size_t","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>values<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>target","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Search for a target value in a vector of values.\n\\tparam T the type contained by the vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to be searched.</p>\n<p>target The target value to be found.</p>\n<p><strong>Returns</strong>: true the index of the first target value found.</p>\n<p><strong>See also</strong>: http://www.cplusplus.com/reference/iterator/distance/</p>\n","desc":"","counter":0},{"syntax":"ofFromString(&value)","name":"ofFromString","returns":"const char *","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string represetnation to another string.</p>\n<p>Equivalent to calling the <code>.c_str()</code> on a std::string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The string value to convert to another string.</p>\n<p><strong>Returns</strong>: the string converted to a c-style string.</p>\n","desc":"","counter":2},{"syntax":"ofFromString(&value)","name":"ofFromString","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>value","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string represetnation to another type.</p>\n<p>Often, this method will be used to convert a string to a numerical type.</p>\n<p>\\tparam T The target data type.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The string value to convert to type T.</p>\n<p><strong>Returns</strong>: the string converted to the target data type T.</p>\n","desc":""},{"syntax":"ofFromString(&value)","name":"ofFromString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>value","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string represetnation to another string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The string value to convert to another string.</p>\n<p><strong>Returns</strong>: the string converted to another string.</p>\n","desc":""},{"syntax":"ofGetCurrentTime()","name":"ofGetCurrentTime","returns":"ofTime","returns_description":null,"parameters":null,"version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the system time.</p>\n<p><strong>Returns</strong>: the system time.</p>\n","desc":"","counter":0},{"syntax":"ofGetDay()","name":"ofGetDay","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the current day within the month.</p>\n<p><strong>Returns</strong>: the day witin the month [1-31].</p>\n","desc":"","counter":0},{"syntax":"ofGetElapsedTimeMicros()","name":"ofGetElapsedTimeMicros","returns":"uint64_t","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the elapsed time in microseconds.</p>\n<p>This returns the elapsed time since ofResetElapsedTimeCounter() was called.\nUsually ofResetElapsedTimeCounter() is called automatically upon program\nstartup.</p>\n<p><strong>Returns</strong>: the elapsed time in microseconds (1000000 microseconds = 1 second).</p>\n","desc":"<p>returns the elapsed time since the application started in microseconds (1000000 microsecs = 1 second)</p>\n","counter":0},{"syntax":"ofGetElapsedTimeMillis()","name":"ofGetElapsedTimeMillis","returns":"uint64_t","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the elapsed time in milliseconds.</p>\n<p>This returns the elapsed time since ofResetElapsedTimeCounter() was called.\nUsually ofResetElapsedTimeCounter() is called automatically once during\nprogram startup.</p>\n<p><strong>Returns</strong>: the elapsed time in milliseconds (1000 milliseconds = 1 second).</p>\n","desc":"","counter":0},{"syntax":"ofGetElapsedTimef()","name":"ofGetElapsedTimef","returns":"float","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the elapsed time in seconds.</p>\n<p>This returns the elapsed time since ofResetElapsedTimeCounter() was called.\nUsually ofResetElapsedTimeCounter() is called automatically once during\nprogram startup.</p>\n<p><strong>Returns</strong>: the floating point elapsed time in seconds.</p>\n","desc":"<p>returns the elapsed time since the application started in seconds as a float</p>\n","counter":0},{"syntax":"ofGetEnv(&var)","name":"ofGetEnv","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>var","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the value of a given environment variable.\n\\note The available environment variables differ between operating systems.</p>\n<p><strong>Returns</strong>: the environmnt variable's value or an empty string if not found.</p>\n","desc":"","counter":0},{"syntax":"ofGetFrameNum()","name":"ofGetFrameNum","returns":"uint64_t","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the number of frames rendered since the program started.</p>\n<p><strong>Returns</strong>: the number of frames rendered since the program started.</p>\n","desc":"","counter":0},{"syntax":"ofGetHours()","name":"ofGetHours","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the hour of the day.</p>\n<p><strong>Returns</strong>: the hour of the day [0-23].</p>\n","desc":"","counter":0},{"syntax":"ofGetMinutes()","name":"ofGetMinutes","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get minutes after the hour.</p>\n<p><strong>Returns</strong>: the minutes after the hour [0-59].</p>\n","desc":"","counter":0},{"syntax":"ofGetMonth()","name":"ofGetMonth","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the current month.</p>\n<p><strong>Returns</strong>: the current month [1-12].</p>\n","desc":"","counter":0},{"syntax":"ofGetSeconds()","name":"ofGetSeconds","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\section System Time\nGet the seconds after the minute.</p>\n<p><strong>Returns</strong>: the seconds after the minute [0-59].</p>\n","desc":"","counter":0},{"syntax":"ofGetSystemTimeMicros()","name":"ofGetSystemTimeMicros","returns":"uint64_t","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the system time in microseconds.</p>\n<p><strong>Returns</strong>: the system time in microseconds.</p>\n","desc":"","counter":0},{"syntax":"ofGetSystemTimeMillis()","name":"ofGetSystemTimeMillis","returns":"uint64_t","returns_description":null,"parameters":null,"version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the system time in milliseconds.</p>\n<p><strong>Returns</strong>: the system time in milliseconds.</p>\n","desc":"","counter":0},{"syntax":"ofGetTargetPlatform()","name":"ofGetTargetPlatform","returns":"ofTargetPlatform","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the target platform of the current system.</p>\n<p><strong>Returns</strong>: the current ofTargetPlatform.</p>\n","desc":"","counter":0},{"syntax":"ofGetTimestampString(&timestampFormat)","name":"ofGetTimestampString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>timestampFormat","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Formats the current system time according to the given format.</p>\n<p>The format string is used as a template to format the date and\nis copied character by character except for the following special\ncharacters, which are replaced by the corresponding value.</p>\n<table>\n<thead>\n<tr>\n<th><strong>specifier</strong></th>\n<th><strong>Replaced by</strong></th>\n<th><strong>Example</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%a</td>\n<td>Abbreviated weekday name</td>\n<td>Thu</td>\n</tr>\n<tr>\n<td>%A</td>\n<td>Full weekday name</td>\n<td>Thursday</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>Abbreviated month name</td>\n<td>Aug</td>\n</tr>\n<tr>\n<td>%B</td>\n<td>Full month name</td>\n<td>August</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>Date and time representation</td>\n<td>Thu Aug 23 14:55:02 2001</td>\n</tr>\n<tr>\n<td>%C</td>\n<td>Year divided by 100 and truncated to integer (00-99)</td>\n<td>20</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>Day of the month, zero-padded (01-31)</td>\n<td>23</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>Short MM/DD/YY date, equivalent to %m/%d/%y</td>\n<td>08/23/01</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>Day of the month, space-padded ( 1-31)</td>\n<td>23</td>\n</tr>\n<tr>\n<td>%F</td>\n<td>Short YYYY-MM-DD date, equivalent to %Y-%m-%d</td>\n<td>2001-08-23</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>Week-based year, last two digits (00-99)</td>\n<td>01</td>\n</tr>\n<tr>\n<td>%G</td>\n<td>Week-based year</td>\n<td>2001</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>Abbreviated month name (same as %b)</td>\n<td>Aug</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>Hour in 24h format (00-23)</td>\n<td>14</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>Hour in 12h format (01-12)</td>\n<td>02</td>\n</tr>\n<tr>\n<td>%j</td>\n<td>Day of the year (001-366)</td>\n<td>235</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>Month as a decimal number (01-12)</td>\n<td>08</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>Minute (00-59)</td>\n<td>55</td>\n</tr>\n<tr>\n<td>%n</td>\n<td>New-line character</td>\n<td>('\\n')</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>AM or PM designation</td>\n<td>PM</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>12-hour clock time</td>\n<td>02:55:02 pm</td>\n</tr>\n<tr>\n<td>%R</td>\n<td>24-hour HH:MM time, equivalent to %H:%M</td>\n<td>14:55</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>Second (00-61)</td>\n<td>02</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>Horizontal-tab character</td>\n<td>('\\t')</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>ISO 8601 time format (HH:MM:SS), equivalent to %H:%M:%S</td>\n<td>14:55:02</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>ISO 8601 weekday as number with Monday as 1 (1-7)</td>\n<td>4</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>Week number with the first Sunday as the first day of week one (00-53)</td>\n<td>33</td>\n</tr>\n<tr>\n<td>%V</td>\n<td>ISO 8601 week number (01-53)</td>\n<td>34</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>Weekday as a decimal number with Sunday as 0 (0-6)</td>\n<td>4</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>Week number with the first Monday as the first day of week one (00-53)</td>\n<td>34</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>Date representation</td>\n<td>08/23/01</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>Time representation</td>\n<td>14:55:02</td>\n</tr>\n<tr>\n<td>%y</td>\n<td>Year, last two digits (00-99)</td>\n<td>01</td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>Year</td>\n<td>2001</td>\n</tr>\n<tr>\n<td>%z</td>\n<td>ISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100) If timezone cannot be determined, no characters</td>\n<td>+100</td>\n</tr>\n<tr>\n<td>%Z</td>\n<td>Timezone name or abbreviation. If timezone cannot be determined, no characters</td>\n<td>CDT</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>A % sign</td>\n<td>%</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Parameters:</strong></p>\n<p>timestampFormat The formatting pattern.</p>\n<p><strong>Returns</strong>: the formatted timestamp as a string.</p>\n<p><strong>Warning</strong>: an invalid timestampFormat may crash windows apps.</p>\n","desc":"","counter":1},{"syntax":"ofGetTimestampString()","name":"ofGetTimestampString","returns":"string","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Formats the current system time according to the given format.</p>\n<p>The default timestamp format is &quot;%Y-%m-%d-%H-%M-%S-%i&quot; (e.g.\n2011-01-15-18-29-35-299).</p>\n<p><strong>Returns</strong>: the current time as a string with the default format.</p>\n","desc":""},{"syntax":"ofGetUnixTime()","name":"ofGetUnixTime","returns":"unsigned int","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the number of seconds since Midnight, January 1, 1970.</p>\n<p>Resolution is in seconds.</p>\n<p><strong>Returns</strong>: the number of seconds since Midnight, January 1, 1970 (epoch time).</p>\n","desc":"","counter":0},{"syntax":"ofGetVersionInfo()","name":"ofGetVersionInfo","returns":"string","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\section openFrameworks Version\nGet the current version of openFrameworks as a string.</p>\n<p>openFrameworks uses the semantic versioning system.</p>\n<p><strong>See also</strong>: http://semver.org/</p>\n<p><strong>Returns</strong>: The string representation of the version (e.g. <code>0.9.0</code>).</p>\n","desc":"","counter":0},{"syntax":"ofGetVersionMajor()","name":"ofGetVersionMajor","returns":"unsigned int","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the major version number of openFrameworks.</p>\n<p>openFrameworks uses the semantic versioning system.</p>\n<p><strong>See also</strong>: http://semver.org/</p>\n<p><strong>Returns</strong>: The major version number.</p>\n","desc":"","counter":0},{"syntax":"ofGetVersionMinor()","name":"ofGetVersionMinor","returns":"unsigned int","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the minor version number of openFrameworks.</p>\n<p>openFrameworks uses the semantic versioning system.</p>\n<p><strong>See also</strong>: http://semver.org/</p>\n<p><strong>Returns</strong>: The minor version number.</p>\n","desc":"","counter":0},{"syntax":"ofGetVersionPatch()","name":"ofGetVersionPatch","returns":"unsigned int","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the patch version number of openFrameworks.</p>\n<p>openFrameworks uses the semantic versioning system.</p>\n<p><strong>See also</strong>: http://semver.org/</p>\n<p><strong>Returns</strong>: The patch version number.</p>\n","desc":"","counter":0},{"syntax":"ofGetVersionPreRelease()","name":"ofGetVersionPreRelease","returns":"string","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the pre-release version of openFrameworks.</p>\n<p>openFrameworks uses the semantic versioning system.</p>\n<p>For pre-release versions of openFrameworks, including development versions,\nthis string will describe the pre-release state. Examples might include\n&quot;master&quot;, &quot;rc1&quot;, &quot;rc2&quot;, etc.  For all stable releases, this string will be\nempty.</p>\n<p><strong>See also</strong>: http://semver.org/</p>\n<p><strong>Returns</strong>: The pre-release version string.</p>\n","desc":"","counter":0},{"syntax":"ofGetWeekday()","name":"ofGetWeekday","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the current weekday.</p>\n<p>Values 0 = Sunday, 1 = Monday, ..., 6 = Saturday.</p>\n<p><strong>Returns</strong>: the current weekday [0-6].</p>\n","desc":"","counter":0},{"syntax":"ofGetYear()","name":"ofGetYear","returns":"int","returns_description":null,"parameters":null,"version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the current year.</p>\n<p><strong>Returns</strong>: the current year.</p>\n","desc":"","counter":0},{"syntax":"ofHexToChar(&charHexString)","name":"ofHexToChar","returns":"char","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>charHexString","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string representing an char in hexadecimal to a char.</p>\n<p>Converts a hexadecimal representation of an char (e.g., <code>&quot;61&quot;</code>) to an actual\n<code>char</code> (e.g., <code>a</code>).</p>\n<p><strong>Parameters:</strong></p>\n<p>charHexString The string representing an char in hexadecimal.</p>\n<p><strong>Returns</strong>: the char represented by the string.</p>\n","desc":"<p>Converts a hexadecimal representation of an char (e.g., &quot;61&quot;) to an actual char (e.g., a).</p>\n","counter":0},{"syntax":"ofHexToFloat(&floatHexString)","name":"ofHexToFloat","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>floatHexString","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string representing an float in hexadecimal to a float.</p>\n<p>Converts a hexadecimal representation of an float (little-endian, 32-bit\nIEEE 754, e.g., <code>&quot;43000000&quot;</code>) to an actual float (e.g., <code>128.f</code>).</p>\n<p><strong>Parameters:</strong></p>\n<p>floatHexString The string representing an float in hexadecimal.</p>\n<p><strong>Returns</strong>: the float represented by the string.</p>\n","desc":"<p>Converts a hexadecimal representation of an float (little-endian, 32-bit IEEE 754, e.g., &quot;4060000000000000&quot;) to an actual float (e.g., 128.f).</p>\n","counter":0},{"syntax":"ofHexToInt(&intHexString)","name":"ofHexToInt","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>intHexString","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string representing an integer in hexadecimal to a string.</p>\n<p>Converts a hexadecimal representation of an int (little-endian, 32-bit,\ne.g., <code>&quot;0xbadf00d&quot;</code> or <code>&quot;badf00d&quot;</code>) to an actual <code>int</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>intHexString The string representing an integer in hexadecimal.</p>\n<p><strong>Returns</strong>: the integer represented by the string.</p>\n","desc":"<p>Converts a hexadecimal representation of an int (little-endian, 32-bit, e.g., &quot;0xbadf00d&quot; or &quot;badf00d&quot;) to an actual int.</p>\n","counter":0},{"syntax":"ofHexToString(&stringHexString)","name":"ofHexToString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>stringHexString","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string representing an string in hexadecimal to a string.</p>\n<p>Converts a hexadecimal representation of an string (e.g.,\n<code>&quot;61626364656667&quot;</code>) to an actual string (<code>&quot;abcdefg&quot;</code>).</p>\n<p><strong>Parameters:</strong></p>\n<p>stringHexString The string representing an string in hexadecimal.</p>\n<p><strong>Returns</strong>: the string represented by the string.</p>\n","desc":"<p>Converts a hexadecimal representation of an string (e.g., &quot;61626364656667&quot;) to an actual string (&quot;abcdefg&quot;);</p>\n","counter":0},{"syntax":"ofIsStringInString(&haystack, &needle)","name":"ofIsStringInString","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>haystack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>needle","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Check if string contains another string.</p>\n<p>Example:</p>\n<pre><code class=\"language-{.cpp}\">    std<span class=\"token operator\">::</span>string haystack <span class=\"token operator\">=</span> <span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Outputs 1.</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Outputs 1.</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span> <span class=\"token string\">\"something else\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Outputs 0.</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>haystack The string to check for occurrence in.</p>\n<p>needle The string to check for.</p>\n","desc":"<p>Checks if the string needle exists in the string haystack.</p>\n<pre><code class=\"language-{.cpp}\">    string haystack <span class=\"token operator\">=</span> <span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outputs 1</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outputs 1</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span> <span class=\"token string\">\"something else\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outputs 0</span>\n</code></pre>\n","counter":0},{"syntax":"ofJoinString(&stringElements, &delimiter)","name":"ofJoinString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>stringElements<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>delimiter","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Join a vector of strings together into one string.</p>\n<p><strong>Parameters:</strong></p>\n<p>stringElements The vector of strings to join.</p>\n<p>delimiter The delimiter to put betweeen each string.</p>\n","desc":"<p>Turns a stringElements into a single string, with an instance of delimiter between all the elements.</p>\n","counter":0},{"syntax":"ofLaunchBrowser(&url, uriEncodeQuery = false)","name":"ofLaunchBrowser","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> uriEncodeQuery<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofRandomize(&values)","name":"ofRandomize","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>values","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\section Vectors\nRandomly reorder the values in a vector.\n\\tparam T the type contained by the vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to modify.</p>\n<p><strong>See also</strong>: http://www.cplusplus.com/reference/algorithm/random_shuffle/</p>\n","desc":"","counter":0},{"syntax":"ofRemove(&values, shouldErase)","name":"ofRemove","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>values<span class=\"token punctuation\">,</span> BoolFunction shouldErase","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"ofResetElapsedTimeCounter()","name":"ofResetElapsedTimeCounter","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\section Elapsed Time\nReset the elapsed time counter.</p>\n<p>This method resets the times returned by ofGetElapsedTimef(),\nofGetElapsedTimeMillis() and ofGetElapsedTimeMicros() to zero.</p>\n<p>\\note This is called on the first frame during app startup.</p>\n","desc":"","counter":0},{"syntax":"ofRestoreWorkingDirectoryToDefault()","name":"ofRestoreWorkingDirectoryToDefault","returns":"bool","returns_description":null,"parameters":null,"version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Reset the working directory to the platform default.</p>\n<p>The default working directory is where the application was started from\nor the exe directory in case of osx bundles. GLUT might change the default\nworking directory to the resources directory in the bundle in osx. This\nwill restore it to the exe dir or whatever was the current dir when the\napplication was started</p>\n","desc":"","counter":0},{"syntax":"ofSaveFrame(bUseViewport = false)","name":"ofSaveFrame","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bUseViewport<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Saves the current frame as a PNG image.</p>\n<p>The PNG image will be named according to an internal counter in sequence.\nThe count will be restarted each time the program is restarted.</p>\n<p><strong>Parameters:</strong></p>\n<p>bUseViewport Set to true if the current viewport should be used.</p>\n","desc":"","counter":0},{"syntax":"ofSaveScreen(&filename)","name":"ofSaveScreen","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>filename","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\section Frame Saving\nSaves the current screen image to a file on disk.</p>\n<p>Example:</p>\n<pre><code class=\"language-{.cpp}\">\t\t<span class=\"token function\">ofSaveScreen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"screen.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Will save screen.png in the /data folder.</span>\n</code></pre>\n<p>The output file type will be deduced from the given file name.</p>\n<p><strong>Parameters:</strong></p>\n<p>filename The image output file.</p>\n","desc":"<p>Saves the current screen image into a given file name (string filename).\nExample:</p>\n<pre><code class=\"language-{.cpp}\">\nstring filename<span class=\"token punctuation\">;</span>\nfilename <span class=\"token operator\">=</span> <span class=\"token string\">\"screen1.png\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSaveScreen</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","counter":0},{"syntax":"ofSaveViewport(&filename)","name":"ofSaveViewport","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>filename","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Saves the current viewport as an image.</p>\n<p>The output file type will be deduced from the given file name.</p>\n<p><strong>Parameters:</strong></p>\n<p>filename The image output file.</p>\n","desc":"","counter":0},{"syntax":"ofSetDataPathRoot(&root)","name":"ofSetDataPathRoot","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>root","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the relative path to the data/ folder from the executable.</p>\n<p>This method can be useful when users want to embed the data as a resource\nfolder within an *.app bundle on OSX or perhaps work from a shared data\nfolder in the user's Documents directory.</p>\n<p><strong>Warning</strong>: The provided path must have a trailing slash (/).</p>\n<p><strong>Parameters:</strong></p>\n<p>root The path to the data/ folder relative to the app executable.</p>\n","desc":"","counter":0},{"syntax":"ofSleepMillis(millis)","name":"ofSleepMillis","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> millis","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sleeps the current thread for the specified amount of milliseconds.</p>\n<p><strong>Parameters:</strong></p>\n<p>millis The number of millseconds to sleep.</p>\n","desc":"","counter":0},{"syntax":"ofSort(&values)","name":"ofSort","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>values","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sort a vector of values into ascending order.</p>\n<p>The elements are compared using operator&lt; for the first version.\nEquivalent elements are not guaranteed to keep their original relative\norder.</p>\n<p>\\tparam T the type contained by the vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to be sorted.</p>\n<p><strong>See also</strong>: http://www.cplusplus.com/reference/algorithm/sort/</p>\n","desc":"","counter":1},{"syntax":"ofSort(&values, compare)","name":"ofSort","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>values<span class=\"token punctuation\">,</span> BoolFunction compare","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"syntax":"ofSplitString()","name":"ofSplitString","returns":"int","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Splits source using delimiter and returns the separate tokens. In modern versions of openFrameworks, delimiter can be a multi-character string. In older versions of openFrameworks, delimiter was interpreted as multiple single-character delimiters.</p>\n","counter":0},{"syntax":"ofStringReplace(&input, &searchStr, &replaceStr)","name":"ofStringReplace","returns":"void","returns_description":null,"parameters":"string <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>searchStr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>replaceStr","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Replace all occurrences of a string with another string.\n\\note The input string is passed by reference, so it will be modified.</p>\n<p><strong>Parameters:</strong></p>\n<p>input The string to run the replacement on.</p>\n<p>searchStr The string to be replaced.</p>\n<p>replaceStr The string to put in place.</p>\n","desc":"<p>Searches input for instances of searchStr and replaces them with replaceStr.</p>\n<pre><code class=\"language-{.cpp}\">string message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, world!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"goodbye\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outputs \"goodbye, world!\"</span>\n</code></pre>\n","counter":0},{"syntax":"ofStringTimesInString(&haystack, &needle)","name":"ofStringTimesInString","returns":"size_t","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>haystack<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>needle","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Check how many times a string contains another string.</p>\n<p><strong>Parameters:</strong></p>\n<p>haystack The string to check for occurrence in .</p>\n<p>needle The string to check for.</p>\n","desc":"","counter":0},{"syntax":"ofSystem(&command)","name":"ofSystem","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>command","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Executes a system command. Similar to run a command in terminal.\n\\note Will block until the executed program/command has finished.</p>\n<p><strong>Returns</strong>: the system command output as string.</p>\n","desc":"<p>Executes an application or a system command and returns its output as string. Will block until the executed program/command has finished.</p>\n","counter":0},{"syntax":"ofTo(&str)","name":"ofTo","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>str","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofToBinary(&value)","name":"ofToBinary","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts any datatype value to a string of only 1s and 0s.</p>\n<p>The corresponding string of 1s and 0s corresponds to the way value is stored\nin memory.</p>\n<p>\\tparam T The data type of the value to convert to a binary string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The data to convert to a binary string.</p>\n<p><strong>Returns</strong>: a binary string.</p>\n","desc":"<p>Converts any datatype value to a string of only 1s and 0s corresponding to the way value is stored in memory.</p>\n","counter":2},{"syntax":"ofToBinary(&value)","name":"ofToBinary","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts a string value to a string of only 1s and 0s.</p>\n<p>The corresponding string of 1s and 0s corresponds to the way value is stored\nin memory.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The string to convert to a binary string.</p>\n<p><strong>Returns</strong>: a binary string.</p>\n","desc":"<p>Converts a string value to a string of only 1s and 0s corresponding to the way value is stored in memory.</p>\n"},{"syntax":"ofToBinary(*value)","name":"ofToBinary","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts a c-style string to a string of only 1s and 0s.</p>\n<p>The corresponding string of 1s and 0s corresponds to the way value is stored\nin memory.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The c-style string to convert to a binary string.</p>\n<p><strong>Returns</strong>: a binary string.</p>\n","desc":"<p>Converts any C-style string value to a string of only 1s and 0s corresponding to the way value is stored in memory.</p>\n"},{"syntax":"ofToBool(&boolString)","name":"ofToBool","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>boolString","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string to a boolean.</p>\n<p>Converts a std::string representation of a boolean (e.g., <code>&quot;TRUE&quot;</code>) to an\nactual <code>bool</code> using a case-insensitive comparison against the words <code>&quot;true&quot;</code>\nand <code>&quot;false&quot;</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>boolString The string representation of the boolean.</p>\n<p><strong>Returns</strong>: the boolean represented by the string or 0 on failure.</p>\n","desc":"<p>Converts a string representation boolString (e.g., &quot;TRUE&quot;) to an actual bool using a case-insensitive comparison against the words &quot;true&quot; and &quot;false&quot;.</p>\n","counter":0},{"syntax":"ofToChar(&charString)","name":"ofToChar","returns":"char","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>charString","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string representation of a char to a actual char.</p>\n<p>Converts a string representation of a single char (e.g., <code>&quot;c&quot;</code>) to an\nactual <code>char</code>.</p>\n<p>\\note Multi-byte chars and multi-char strings are not supported.</p>\n<p><strong>Parameters:</strong></p>\n<p>charString The char string to convert.</p>\n<p><strong>Returns</strong>: The string as a char or 0 on failure.</p>\n","desc":"<p>Converts a string representation of a single char (e.g., &quot; c &quot;) to an actual char.</p>\n","counter":0},{"syntax":"ofToDataPath(&path, absolute = false)","name":"ofToDataPath","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> absolute<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Make a path relative to the location of the data/ folder.</p>\n<p>This funtion returns path unchanged if ofDisableDataPath() was called first.</p>\n<p>By default, a relative path is returned. Users requiring absolute paths for\n(e.g. for non-openFrameworks functions), can specify that an absolute path\nbe returned.</p>\n<p><strong>Parameters:</strong></p>\n<p>path The path to make relative to the data/ folder.</p>\n<p>absolute Set to true to return an absolute path.</p>\n<p><strong>Returns</strong>: the new path, unless paths were disabled with ofDisableDataPath().</p>\n","desc":"<p>openFrameworks now treats all files in the data/ folder as being at the same level as your app. When a file is loaded using openFrameworks classes (like ofVideoPlayer) the file path is run through this function to turn it into a relative path for the executible. As windows, mac and linux all have different relative paths, it is important to use this function if you have written your own class or addon for openFrameworks and you wish to be able to load files from the data/ folder.</p>\n<p>The optional parameter makeAbsolute, if set to true (false by default) returns the generated path as an absolute path starting from the root of your filesystem instead of from the folder your application is run from.</p>\n","counter":0},{"syntax":"ofToDouble(&doubleString)","name":"ofToDouble","returns":"double","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>doubleString","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string to a double.</p>\n<p>Converts a std::string representation of a double (e.g., <code>&quot;3.14&quot;</code>) to an\nactual <code>double</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>doubleString The string representation of the double.</p>\n<p><strong>Returns</strong>: the double represented by the string or 0 on failure.</p>\n","desc":"","counter":0},{"syntax":"ofToFloat(&floatString)","name":"ofToFloat","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>floatString","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string to a float.</p>\n<p>Converts a std::string representation of a float (e.g., <code>&quot;3.14&quot;</code>) to an\nactual <code>float</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>floatString string representation of the float.</p>\n<p><strong>Returns</strong>: the float represented by the string or 0 on failure.</p>\n","desc":"<p>Converts a string representation floatString (e.g., &quot;3.14&quot;) to an actual float.</p>\n","counter":0},{"syntax":"ofToHex(&value)","name":"ofToHex","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts any value to its equivalent hexadecimal representation.</p>\n<p>The hexadecimal representation corresponds to the way a number is stored in\nmemory.</p>\n<p>\\tparam T The data type of the value to convert to a hexadecimal string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a hexadecimal string.</p>\n<p><strong>Returns</strong>: the hexadecimal string representation of the value.</p>\n","desc":"<p>Converts any value to its equivalent hexadecimal representation corresponding to the way it is stored in memory.</p>\n","counter":2},{"syntax":"ofToHex(&value)","name":"ofToHex","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string to a hexadecimal string.</p>\n<p>Converts a string (e.g., <code>&quot;abc&quot;</code>) to its equivalent hexadecimal\nrepresentation (e.g., <code>&quot;616263&quot;</code>).</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a hexadecimal string.</p>\n<p><strong>Returns</strong>: a hexadecimal string.</p>\n","desc":"<p>Converts a string (e.g., &quot;abc&quot;) to its equivalent hexadecimal representation (e.g., &quot;616263&quot;).</p>\n"},{"syntax":"ofToHex(*value)","name":"ofToHex","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a c-style string to a hexadecimal string.</p>\n<p>Converts a string (e.g., <code>&quot;abc&quot;</code>) to its equivalent hexadecimal\nrepresentation (e.g., <code>&quot;616263&quot;</code>).</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a hexadecimal string.</p>\n<p><strong>Returns</strong>: a hexadecimal string.</p>\n","desc":"<p>Converts a c-style string (e.g., &quot;abc&quot;) to its equivalent hexadecimal representation (e.g., &quot;616263&quot;).</p>\n"},{"syntax":"ofToInt(&intString)","name":"ofToInt","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>intString","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\section Number Conversion\nConvert a string to an integer.</p>\n<p>Converts a <code>std::string</code> representation of an int (e.g., <code>&quot;3&quot;</code>) to an actual\n<code>int</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>intString The string representation of the integer.</p>\n<p><strong>Returns</strong>: the integer represented by the string or 0 on failure.</p>\n","desc":"<p>Converts a string representation of an int (e.g., &quot;2012&quot;) to an actual int.</p>\n","counter":0},{"syntax":"ofToInt64(&intString)","name":"ofToInt64","returns":"int64_t","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>intString","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a string to a int64_t.</p>\n<p>Converts a <code>std::string</code> representation of a long integer\n(e.g., <code>&quot;9223372036854775807&quot;</code>) to an actual <code>int64_t</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>intString The string representation of the long integer.</p>\n<p><strong>Returns</strong>: the long integer represented by the string or 0 on failure.</p>\n","desc":"","counter":0},{"syntax":"ofToLower(&src, &locale)","name":"ofToLower","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>locale","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts all characters in a string to lowercase.</p>\n<p>This function expects a UTF-8 encoded multi-byte string to be passed.\nResulting strings will be returned as UTF-8 encoded multi-byte strings.</p>\n<pre><code class=\"language-{.cpp}\">    std<span class=\"token operator\">::</span>string enthusiasticGreeting <span class=\"token operator\">=</span> <span class=\"token string\">\"HELLO, WORLD!\"</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>string politeGreeting <span class=\"token operator\">=</span> <span class=\"token function\">ofToLower</span><span class=\"token punctuation\">(</span>enthusiasticGreeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> politeGreeting<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Returns \"hello, world!\"</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>src The UTF-8 encoded string to convert to lowercase.</p>\n<p><strong>Returns</strong>: the UTF-8 encoded string as all lowercase characters.</p>\n","desc":"<p>Converts all characters in the string src to lowercase.</p>\n","counter":0},{"syntax":"ofToString(&value)","name":"ofToString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>value","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\section String Conversion\nConvert a value to a string.</p>\n<p>ofToString does its best to convert any value to a string. If the data type\nimplements a stream &lt;&lt; operator, then it will be converted.</p>\n<p>Example:</p>\n<pre><code class=\"language-{.cpp}\">\t\tstd<span class=\"token operator\">::</span>string str <span class=\"token operator\">=</span> <span class=\"token string\">\"framerate is \"</span><span class=\"token punctuation\">;</span>\n\t\tstr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetFrameRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" fps\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// The string now containes something like \"framerate is 60 fps\".</span>\n</code></pre>\n<p>\\tparam T The data type of the value to convert to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a string.</p>\n<p><strong>Returns</strong>: A string representing the value or an empty string on failure.</p>\n","desc":"","counter":4},{"syntax":"ofToString(&value, precision)","name":"ofToString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> precision","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a value to a string with a specific precision.</p>\n<p>Like sprintf &quot;%4f&quot; format, in this example precision=4</p>\n<p>\\tparam T The data type of the value to convert to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a string.</p>\n<p>precision The precision to use when converting to a string.</p>\n<p><strong>Returns</strong>: The string representation of the value.</p>\n","desc":""},{"syntax":"ofToString(&value, precision, width, fill)","name":"ofToString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> precision<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> fill","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a value to a string with a specific precision, width and filll</p>\n<p>Like sprintf &quot;%04.2d&quot; or &quot;%04.2f&quot; format, in this example precision=2, width=4, fill='0'</p>\n<p>\\tparam T The data type of the value to convert to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a string.</p>\n<p>precision The precision to use when converting to a string.</p>\n<p>width The width of the value to use when converting to a string.</p>\n<p>fill The character to use when padding the converted string.</p>\n<p><strong>Returns</strong>: The string representation of the value.</p>\n","desc":""},{"syntax":"ofToString(&value, width, fill)","name":"ofToString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> fill","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a value to a string with a specific width and fill</p>\n<p>Like sprintf &quot;% 4d&quot; or &quot;% 4f&quot; format, in this example width=4, fill=' '</p>\n<p>\\tparam T The data type of the value to convert to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a string.</p>\n<p>width The width of the value to use when converting to a string.</p>\n<p>fill The character to use when padding the converted string.</p>\n<p><strong>Returns</strong>: The string representation of the value.</p>\n","desc":""},{"syntax":"ofToString(&values)","name":"ofToString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>values","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a vector of values to a comma-delimited string.</p>\n<p>This method will take any vector of values and output a list of the values\nas a comma-delimited string.</p>\n<p>\\tparam T The data type held by the vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to be converted to a string.</p>\n<p><strong>Returns</strong>: a comma-delimited string representation of the intput values.</p>\n","desc":"<p>Converts a vector of values to a single string representation.</p>\n<pre><code class=\"language-{.cpp}\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span></code></pre>\n"},{"syntax":"ofToUpper(&src, &locale)","name":"ofToUpper","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>locale","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts all characters in the string to uppercase.</p>\n<p>This function expects a UTF-8 encoded multi-byte string to be passed.\nResulting strings will be returned as UTF-8 encoded multi-byte strings.</p>\n<pre><code class=\"language-{.cpp}\">    std<span class=\"token operator\">::</span>string politeGreeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>string enthusiasticGreeting <span class=\"token operator\">=</span> <span class=\"token function\">ofToUpper</span><span class=\"token punctuation\">(</span>politeGreeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> enthusiasticGreeting<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Returns \"HELLO, WORLD!\"</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>src The UTF-8 encoded string to convert to uppercase.</p>\n<p><strong>Returns</strong>: the UTF-8 encoded string as all uppercase characters.</p>\n","desc":"<p>Converts all characters in the string src to uppercase.</p>\n<pre><code class=\"language-{.cpp}\">    string politeGreeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span>\n    string enthusiasticGreeting <span class=\"token operator\">=</span> <span class=\"token function\">ofToUpper</span><span class=\"token punctuation\">(</span>politeGreeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> enthusiasticGreeting<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// returns \"HELLO, WORLD!\"</span>\n</code></pre>\n","counter":0},{"syntax":"ofTrim(&src, &locale)","name":"ofTrim","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>locale","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofTrimBack(&src, &locale)","name":"ofTrimBack","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>locale","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofTrimFront(&src, &locale)","name":"ofTrimFront","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>locale","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofUTF8Append(&str, utf8)","name":"ofUTF8Append","returns":"void","returns_description":null,"parameters":"string <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">,</span> uint32_t utf8","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofUTF8Erase(&str, start, len)","name":"ofUTF8Erase","returns":"void","returns_description":null,"parameters":"string <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">,</span> size_t start<span class=\"token punctuation\">,</span> size_t len","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofUTF8Insert(&str, pos, utf8)","name":"ofUTF8Insert","returns":"void","returns_description":null,"parameters":"string <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">,</span> size_t pos<span class=\"token punctuation\">,</span> uint32_t utf8","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofUTF8Length(&str)","name":"ofUTF8Length","returns":"size_t","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>str","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofUTF8Substring(&str, start, len)","name":"ofUTF8Substring","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">,</span> size_t start<span class=\"token punctuation\">,</span> size_t len","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofUTF8ToString(utf8)","name":"ofUTF8ToString","returns":"string","returns_description":null,"parameters":"uint32_t utf8","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofVAArgsToString(*format)","name":"ofVAArgsToString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a variable length argument to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>format a printf-style format string.</p>\n<p><strong>Returns</strong>: A string representation of the argument list.</p>\n","desc":"","counter":1},{"syntax":"ofVAArgsToString(*format, args)","name":"ofVAArgsToString","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> va_list args","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a variable length argument to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>format A printf-style format string.</p>\n<p>args A variable argument list.</p>\n<p><strong>Returns</strong>: A string representation of the argument list.</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<!--\n_visible: True_\n_advanced: False_\n-->\n<p>##Description</p>\n<!----------------------------------------------------------------------------->\n<p>###char ofBinaryToChar(&amp;value)</p>\n<!--\n_syntax: ofBinaryToChar(&value)_\n_name: ofBinaryToChar_\n_returns: char_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a binary string to an char.</p>\n<p>Interprets a string consisting only of 1s and 0s as an char and returns\nthe corresponding int value.</p>\n<p>\\value The binary string.</p>\n<p><strong>Returns</strong>: the char represented by the string or 0 on failure.</p>\n<p>_description: _</p>\n<p>Interprets a string consisting only of 1s and 0s as a char, and returns the corresponding char value.</p>\n<!----------------------------------------------------------------------------->\n<p>###float ofBinaryToFloat(&amp;value)</p>\n<!--\n_syntax: ofBinaryToFloat(&value)_\n_name: ofBinaryToFloat_\n_returns: float_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a binary string to a float.</p>\n<p>Interprets a string consisting only of 1s and 0s as an a float\n(little-endian, 32-bit IEEE 754), and returns the corresponding float value.</p>\n<p>\\value The binary string.</p>\n<p><strong>Returns</strong>: the float represented by the string or 0 on failure.</p>\n<p>_description: _</p>\n<p>Interprets a string consisting only of 1s and 0s as a float (little-endian, 32-bit IEEE 754), and returns the corresponding float value.</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofBinaryToInt(&amp;value)</p>\n<!--\n_syntax: ofBinaryToInt(&value)_\n_name: ofBinaryToInt_\n_returns: int_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a binary string to an int.</p>\n<p>Interprets a string consisting only of 1s and 0s as an int (little-endian,\n32-bit), and returns the corresponding int value.</p>\n<p>\\value The binary string.</p>\n<p><strong>Returns</strong>: the integer represented by the string or 0 on failure.</p>\n<p>_description: _</p>\n<p>Interprets a string consisting only of 1s and 0s as an int (little-endian, 32-bit), and returns the corresponding int value.</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofBinaryToString(&amp;value)</p>\n<!--\n_syntax: ofBinaryToString(&value)_\n_name: ofBinaryToString_\n_returns: string_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a binary string to ASCII characters.</p>\n<p>Interprets a string consisting only of 1s and 0s as 8-bit ASCII characters\nand returns the corresponding string.</p>\n<p>\\value The binary string.</p>\n<p><strong>Returns</strong>: the ASCII string represented by the string.</p>\n<p>_description: _</p>\n<p>Interprets a string consisting only of 1s and 0s as 8-bit ASCII characters, and returns the corresponding string.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool ofContains(&amp;values, &amp;target)</p>\n<!--\n_syntax: ofContains(&values, &target)_\n_name: ofContains_\n_returns: bool_\n_returns_description: _\n_parameters: const int &values, const T &target_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Search for a target value in a vector of values.\n\\tparam T the type contained by the vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to be searched.</p>\n<p>target The target value to be found.</p>\n<p><strong>Returns</strong>: true if at least one value equal to the target value is found.</p>\n<p>_description: _</p>\n<p>returns true if the vector values contains target</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofDisableDataPath()</p>\n<!--\n_syntax: ofDisableDataPath()_\n_name: ofDisableDataPath_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n<p>_inlined_description: _</p>\n<p>Disable the use of the data path.</p>\n<p>This function causes ofToDataPath() to ignore the relative path set\nwith ofSetDataPathRoot().</p>\n<p>_description: _</p>\n<p>Disables the conversion of paths to realtive to data/</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofEnableDataPath()</p>\n<!--\n_syntax: ofEnableDataPath()_\n_name: ofEnableDataPath_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n<p>_inlined_description: _</p>\n<p>\\section Data Path\nEnable the use of the data path.</p>\n<p>This function causes ofToDataPath() to respect the relative path set\nwith ofSetDataPathRoot().  This is enabled by default.</p>\n<p>_description: _</p>\n<p>Enables the conversion of paths to relative to data/  This is enabled by default.</p>\n<!----------------------------------------------------------------------------->\n<p>###size_t ofFind(&amp;values, &amp;target)</p>\n<!--\n_syntax: ofFind(&values, &target)_\n_name: ofFind_\n_returns: size_t_\n_returns_description: _\n_parameters: const int &values, const T &target_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Search for a target value in a vector of values.\n\\tparam T the type contained by the vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to be searched.</p>\n<p>target The target value to be found.</p>\n<p><strong>Returns</strong>: true the index of the first target value found.</p>\n<p><strong>See also</strong>: http://www.cplusplus.com/reference/iterator/distance/</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###const char * ofFromString(&amp;value)</p>\n<!--\n_syntax: ofFromString(&value)_\n_name: ofFromString_\n_returns: const char *_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string represetnation to another string.</p>\n<p>Equivalent to calling the <code>.c_str()</code> on a std::string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The string value to convert to another string.</p>\n<p><strong>Returns</strong>: the string converted to a c-style string.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T ofFromString(&amp;value)</p>\n<!--\n_syntax: ofFromString(&value)_\n_name: ofFromString_\n_returns: T_\n_returns_description: _\n_parameters: const string &value_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string represetnation to another type.</p>\n<p>Often, this method will be used to convert a string to a numerical type.</p>\n<p>\\tparam T The target data type.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The string value to convert to type T.</p>\n<p><strong>Returns</strong>: the string converted to the target data type T.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofFromString(&amp;value)</p>\n<!--\n_syntax: ofFromString(&value)_\n_name: ofFromString_\n_returns: string_\n_returns_description: _\n_parameters: const string &value_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string represetnation to another string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The string value to convert to another string.</p>\n<p><strong>Returns</strong>: the string converted to another string.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofTime ofGetCurrentTime()</p>\n<!--\n_syntax: ofGetCurrentTime()_\n_name: ofGetCurrentTime_\n_returns: ofTime_\n_returns_description: _\n_parameters: _\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the system time.</p>\n<p><strong>Returns</strong>: the system time.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofGetDay()</p>\n<!--\n_syntax: ofGetDay()_\n_name: ofGetDay_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the current day within the month.</p>\n<p><strong>Returns</strong>: the day witin the month [1-31].</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###uint64_t ofGetElapsedTimeMicros()</p>\n<!--\n_syntax: ofGetElapsedTimeMicros()_\n_name: ofGetElapsedTimeMicros_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the elapsed time in microseconds.</p>\n<p>This returns the elapsed time since ofResetElapsedTimeCounter() was called.\nUsually ofResetElapsedTimeCounter() is called automatically upon program\nstartup.</p>\n<p><strong>Returns</strong>: the elapsed time in microseconds (1000000 microseconds = 1 second).</p>\n<p>_description: _</p>\n<p>returns the elapsed time since the application started in microseconds (1000000 microsecs = 1 second)</p>\n<!----------------------------------------------------------------------------->\n<p>###uint64_t ofGetElapsedTimeMillis()</p>\n<!--\n_syntax: ofGetElapsedTimeMillis()_\n_name: ofGetElapsedTimeMillis_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the elapsed time in milliseconds.</p>\n<p>This returns the elapsed time since ofResetElapsedTimeCounter() was called.\nUsually ofResetElapsedTimeCounter() is called automatically once during\nprogram startup.</p>\n<p><strong>Returns</strong>: the elapsed time in milliseconds (1000 milliseconds = 1 second).</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float ofGetElapsedTimef()</p>\n<!--\n_syntax: ofGetElapsedTimef()_\n_name: ofGetElapsedTimef_\n_returns: float_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the elapsed time in seconds.</p>\n<p>This returns the elapsed time since ofResetElapsedTimeCounter() was called.\nUsually ofResetElapsedTimeCounter() is called automatically once during\nprogram startup.</p>\n<p><strong>Returns</strong>: the floating point elapsed time in seconds.</p>\n<p>_description: _</p>\n<p>returns the elapsed time since the application started in seconds as a float</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofGetEnv(&amp;var)</p>\n<!--\n_syntax: ofGetEnv(&var)_\n_name: ofGetEnv_\n_returns: string_\n_returns_description: _\n_parameters: const string &var_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the value of a given environment variable.\n\\note The available environment variables differ between operating systems.</p>\n<p><strong>Returns</strong>: the environmnt variable's value or an empty string if not found.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###uint64_t ofGetFrameNum()</p>\n<!--\n_syntax: ofGetFrameNum()_\n_name: ofGetFrameNum_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the number of frames rendered since the program started.</p>\n<p><strong>Returns</strong>: the number of frames rendered since the program started.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofGetHours()</p>\n<!--\n_syntax: ofGetHours()_\n_name: ofGetHours_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the hour of the day.</p>\n<p><strong>Returns</strong>: the hour of the day [0-23].</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofGetMinutes()</p>\n<!--\n_syntax: ofGetMinutes()_\n_name: ofGetMinutes_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get minutes after the hour.</p>\n<p><strong>Returns</strong>: the minutes after the hour [0-59].</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofGetMonth()</p>\n<!--\n_syntax: ofGetMonth()_\n_name: ofGetMonth_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the current month.</p>\n<p><strong>Returns</strong>: the current month [1-12].</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofGetSeconds()</p>\n<!--\n_syntax: ofGetSeconds()_\n_name: ofGetSeconds_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\section System Time\nGet the seconds after the minute.</p>\n<p><strong>Returns</strong>: the seconds after the minute [0-59].</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###uint64_t ofGetSystemTimeMicros()</p>\n<!--\n_syntax: ofGetSystemTimeMicros()_\n_name: ofGetSystemTimeMicros_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the system time in microseconds.</p>\n<p><strong>Returns</strong>: the system time in microseconds.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###uint64_t ofGetSystemTimeMillis()</p>\n<!--\n_syntax: ofGetSystemTimeMillis()_\n_name: ofGetSystemTimeMillis_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the system time in milliseconds.</p>\n<p><strong>Returns</strong>: the system time in milliseconds.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofTargetPlatform ofGetTargetPlatform()</p>\n<!--\n_syntax: ofGetTargetPlatform()_\n_name: ofGetTargetPlatform_\n_returns: ofTargetPlatform_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the target platform of the current system.</p>\n<p><strong>Returns</strong>: the current ofTargetPlatform.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofGetTimestampString(&amp;timestampFormat)</p>\n<!--\n_syntax: ofGetTimestampString(&timestampFormat)_\n_name: ofGetTimestampString_\n_returns: string_\n_returns_description: _\n_parameters: const string &timestampFormat_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Formats the current system time according to the given format.</p>\n<p>The format string is used as a template to format the date and\nis copied character by character except for the following special\ncharacters, which are replaced by the corresponding value.</p>\n<table>\n<thead>\n<tr>\n<th><strong>specifier</strong></th>\n<th><strong>Replaced by</strong></th>\n<th><strong>Example</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%a</td>\n<td>Abbreviated weekday name</td>\n<td>Thu</td>\n</tr>\n<tr>\n<td>%A</td>\n<td>Full weekday name</td>\n<td>Thursday</td>\n</tr>\n<tr>\n<td>%b</td>\n<td>Abbreviated month name</td>\n<td>Aug</td>\n</tr>\n<tr>\n<td>%B</td>\n<td>Full month name</td>\n<td>August</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>Date and time representation</td>\n<td>Thu Aug 23 14:55:02 2001</td>\n</tr>\n<tr>\n<td>%C</td>\n<td>Year divided by 100 and truncated to integer (00-99)</td>\n<td>20</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>Day of the month, zero-padded (01-31)</td>\n<td>23</td>\n</tr>\n<tr>\n<td>%D</td>\n<td>Short MM/DD/YY date, equivalent to %m/%d/%y</td>\n<td>08/23/01</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>Day of the month, space-padded ( 1-31)</td>\n<td>23</td>\n</tr>\n<tr>\n<td>%F</td>\n<td>Short YYYY-MM-DD date, equivalent to %Y-%m-%d</td>\n<td>2001-08-23</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>Week-based year, last two digits (00-99)</td>\n<td>01</td>\n</tr>\n<tr>\n<td>%G</td>\n<td>Week-based year</td>\n<td>2001</td>\n</tr>\n<tr>\n<td>%h</td>\n<td>Abbreviated month name (same as %b)</td>\n<td>Aug</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>Hour in 24h format (00-23)</td>\n<td>14</td>\n</tr>\n<tr>\n<td>%I</td>\n<td>Hour in 12h format (01-12)</td>\n<td>02</td>\n</tr>\n<tr>\n<td>%j</td>\n<td>Day of the year (001-366)</td>\n<td>235</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>Month as a decimal number (01-12)</td>\n<td>08</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>Minute (00-59)</td>\n<td>55</td>\n</tr>\n<tr>\n<td>%n</td>\n<td>New-line character</td>\n<td>('\\n')</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>AM or PM designation</td>\n<td>PM</td>\n</tr>\n<tr>\n<td>%r</td>\n<td>12-hour clock time</td>\n<td>02:55:02 pm</td>\n</tr>\n<tr>\n<td>%R</td>\n<td>24-hour HH:MM time, equivalent to %H:%M</td>\n<td>14:55</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>Second (00-61)</td>\n<td>02</td>\n</tr>\n<tr>\n<td>%t</td>\n<td>Horizontal-tab character</td>\n<td>('\\t')</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>ISO 8601 time format (HH:MM:SS), equivalent to %H:%M:%S</td>\n<td>14:55:02</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>ISO 8601 weekday as number with Monday as 1 (1-7)</td>\n<td>4</td>\n</tr>\n<tr>\n<td>%U</td>\n<td>Week number with the first Sunday as the first day of week one (00-53)</td>\n<td>33</td>\n</tr>\n<tr>\n<td>%V</td>\n<td>ISO 8601 week number (01-53)</td>\n<td>34</td>\n</tr>\n<tr>\n<td>%w</td>\n<td>Weekday as a decimal number with Sunday as 0 (0-6)</td>\n<td>4</td>\n</tr>\n<tr>\n<td>%W</td>\n<td>Week number with the first Monday as the first day of week one (00-53)</td>\n<td>34</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>Date representation</td>\n<td>08/23/01</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>Time representation</td>\n<td>14:55:02</td>\n</tr>\n<tr>\n<td>%y</td>\n<td>Year, last two digits (00-99)</td>\n<td>01</td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>Year</td>\n<td>2001</td>\n</tr>\n<tr>\n<td>%z</td>\n<td>ISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100) If timezone cannot be determined, no characters</td>\n<td>+100</td>\n</tr>\n<tr>\n<td>%Z</td>\n<td>Timezone name or abbreviation. If timezone cannot be determined, no characters</td>\n<td>CDT</td>\n</tr>\n<tr>\n<td>%%</td>\n<td>A % sign</td>\n<td>%</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Parameters:</strong></p>\n<p>timestampFormat The formatting pattern.</p>\n<p><strong>Returns</strong>: the formatted timestamp as a string.</p>\n<p><strong>Warning</strong>: an invalid timestampFormat may crash windows apps.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofGetTimestampString()</p>\n<!--\n_syntax: ofGetTimestampString()_\n_name: ofGetTimestampString_\n_returns: string_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Formats the current system time according to the given format.</p>\n<p>The default timestamp format is &quot;%Y-%m-%d-%H-%M-%S-%i&quot; (e.g.\n2011-01-15-18-29-35-299).</p>\n<p><strong>Returns</strong>: the current time as a string with the default format.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###unsigned int ofGetUnixTime()</p>\n<!--\n_syntax: ofGetUnixTime()_\n_name: ofGetUnixTime_\n_returns: unsigned int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the number of seconds since Midnight, January 1, 1970.</p>\n<p>Resolution is in seconds.</p>\n<p><strong>Returns</strong>: the number of seconds since Midnight, January 1, 1970 (epoch time).</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofGetVersionInfo()</p>\n<!--\n_syntax: ofGetVersionInfo()_\n_name: ofGetVersionInfo_\n_returns: string_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\section openFrameworks Version\nGet the current version of openFrameworks as a string.</p>\n<p>openFrameworks uses the semantic versioning system.</p>\n<p><strong>See also</strong>: http://semver.org/</p>\n<p><strong>Returns</strong>: The string representation of the version (e.g. <code>0.9.0</code>).</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###unsigned int ofGetVersionMajor()</p>\n<!--\n_syntax: ofGetVersionMajor()_\n_name: ofGetVersionMajor_\n_returns: unsigned int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the major version number of openFrameworks.</p>\n<p>openFrameworks uses the semantic versioning system.</p>\n<p><strong>See also</strong>: http://semver.org/</p>\n<p><strong>Returns</strong>: The major version number.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###unsigned int ofGetVersionMinor()</p>\n<!--\n_syntax: ofGetVersionMinor()_\n_name: ofGetVersionMinor_\n_returns: unsigned int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the minor version number of openFrameworks.</p>\n<p>openFrameworks uses the semantic versioning system.</p>\n<p><strong>See also</strong>: http://semver.org/</p>\n<p><strong>Returns</strong>: The minor version number.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###unsigned int ofGetVersionPatch()</p>\n<!--\n_syntax: ofGetVersionPatch()_\n_name: ofGetVersionPatch_\n_returns: unsigned int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the patch version number of openFrameworks.</p>\n<p>openFrameworks uses the semantic versioning system.</p>\n<p><strong>See also</strong>: http://semver.org/</p>\n<p><strong>Returns</strong>: The patch version number.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofGetVersionPreRelease()</p>\n<!--\n_syntax: ofGetVersionPreRelease()_\n_name: ofGetVersionPreRelease_\n_returns: string_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the pre-release version of openFrameworks.</p>\n<p>openFrameworks uses the semantic versioning system.</p>\n<p>For pre-release versions of openFrameworks, including development versions,\nthis string will describe the pre-release state. Examples might include\n&quot;master&quot;, &quot;rc1&quot;, &quot;rc2&quot;, etc.  For all stable releases, this string will be\nempty.</p>\n<p><strong>See also</strong>: http://semver.org/</p>\n<p><strong>Returns</strong>: The pre-release version string.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofGetWeekday()</p>\n<!--\n_syntax: ofGetWeekday()_\n_name: ofGetWeekday_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the current weekday.</p>\n<p>Values 0 = Sunday, 1 = Monday, ..., 6 = Saturday.</p>\n<p><strong>Returns</strong>: the current weekday [0-6].</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofGetYear()</p>\n<!--\n_syntax: ofGetYear()_\n_name: ofGetYear_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the current year.</p>\n<p><strong>Returns</strong>: the current year.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###char ofHexToChar(&amp;charHexString)</p>\n<!--\n_syntax: ofHexToChar(&charHexString)_\n_name: ofHexToChar_\n_returns: char_\n_returns_description: _\n_parameters: const string &charHexString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string representing an char in hexadecimal to a char.</p>\n<p>Converts a hexadecimal representation of an char (e.g., <code>&quot;61&quot;</code>) to an actual\n<code>char</code> (e.g., <code>a</code>).</p>\n<p><strong>Parameters:</strong></p>\n<p>charHexString The string representing an char in hexadecimal.</p>\n<p><strong>Returns</strong>: the char represented by the string.</p>\n<p>_description: _</p>\n<p>Converts a hexadecimal representation of an char (e.g., &quot;61&quot;) to an actual char (e.g., a).</p>\n<!----------------------------------------------------------------------------->\n<p>###float ofHexToFloat(&amp;floatHexString)</p>\n<!--\n_syntax: ofHexToFloat(&floatHexString)_\n_name: ofHexToFloat_\n_returns: float_\n_returns_description: _\n_parameters: const string &floatHexString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string representing an float in hexadecimal to a float.</p>\n<p>Converts a hexadecimal representation of an float (little-endian, 32-bit\nIEEE 754, e.g., <code>&quot;43000000&quot;</code>) to an actual float (e.g., <code>128.f</code>).</p>\n<p><strong>Parameters:</strong></p>\n<p>floatHexString The string representing an float in hexadecimal.</p>\n<p><strong>Returns</strong>: the float represented by the string.</p>\n<p>_description: _</p>\n<p>Converts a hexadecimal representation of an float (little-endian, 32-bit IEEE 754, e.g., &quot;4060000000000000&quot;) to an actual float (e.g., 128.f).</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofHexToInt(&amp;intHexString)</p>\n<!--\n_syntax: ofHexToInt(&intHexString)_\n_name: ofHexToInt_\n_returns: int_\n_returns_description: _\n_parameters: const string &intHexString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string representing an integer in hexadecimal to a string.</p>\n<p>Converts a hexadecimal representation of an int (little-endian, 32-bit,\ne.g., <code>&quot;0xbadf00d&quot;</code> or <code>&quot;badf00d&quot;</code>) to an actual <code>int</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>intHexString The string representing an integer in hexadecimal.</p>\n<p><strong>Returns</strong>: the integer represented by the string.</p>\n<p>_description: _</p>\n<p>Converts a hexadecimal representation of an int (little-endian, 32-bit, e.g., &quot;0xbadf00d&quot; or &quot;badf00d&quot;) to an actual int.</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofHexToString(&amp;stringHexString)</p>\n<!--\n_syntax: ofHexToString(&stringHexString)_\n_name: ofHexToString_\n_returns: string_\n_returns_description: _\n_parameters: const string &stringHexString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string representing an string in hexadecimal to a string.</p>\n<p>Converts a hexadecimal representation of an string (e.g.,\n<code>&quot;61626364656667&quot;</code>) to an actual string (<code>&quot;abcdefg&quot;</code>).</p>\n<p><strong>Parameters:</strong></p>\n<p>stringHexString The string representing an string in hexadecimal.</p>\n<p><strong>Returns</strong>: the string represented by the string.</p>\n<p>_description: _</p>\n<p>Converts a hexadecimal representation of an string (e.g., &quot;61626364656667&quot;) to an actual string (&quot;abcdefg&quot;);</p>\n<!----------------------------------------------------------------------------->\n<p>###bool ofIsStringInString(&amp;haystack, &amp;needle)</p>\n<!--\n_syntax: ofIsStringInString(&haystack, &needle)_\n_name: ofIsStringInString_\n_returns: bool_\n_returns_description: _\n_parameters: const string &haystack, const string &needle_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check if string contains another string.</p>\n<p>Example:</p>\n<pre><code class=\"language-{.cpp}\">    std<span class=\"token operator\">::</span>string haystack <span class=\"token operator\">=</span> <span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Outputs 1.</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Outputs 1.</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span> <span class=\"token string\">\"something else\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Outputs 0.</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>haystack The string to check for occurrence in.</p>\n<p>needle The string to check for.</p>\n<p>_description: _</p>\n<p>Checks if the string needle exists in the string haystack.</p>\n<pre><code class=\"language-{.cpp}\">    string haystack <span class=\"token operator\">=</span> <span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outputs 1</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outputs 1</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofIsStringInString</span><span class=\"token punctuation\">(</span>haystack<span class=\"token punctuation\">,</span> <span class=\"token string\">\"something else\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outputs 0</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###string ofJoinString(&amp;stringElements, &amp;delimiter)</p>\n<!--\n_syntax: ofJoinString(&stringElements, &delimiter)_\n_name: ofJoinString_\n_returns: string_\n_returns_description: _\n_parameters: const int &stringElements, const string &delimiter_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Join a vector of strings together into one string.</p>\n<p><strong>Parameters:</strong></p>\n<p>stringElements The vector of strings to join.</p>\n<p>delimiter The delimiter to put betweeen each string.</p>\n<p>_description: _</p>\n<p>Turns a stringElements into a single string, with an instance of delimiter between all the elements.</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofLaunchBrowser(&amp;url, uriEncodeQuery = false)</p>\n<!--\n_syntax: ofLaunchBrowser(&url, uriEncodeQuery = false)_\n_name: ofLaunchBrowser_\n_returns: void_\n_returns_description: _\n_parameters: const string &url, bool uriEncodeQuery=false_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofRandomize(&amp;values)</p>\n<!--\n_syntax: ofRandomize(&values)_\n_name: ofRandomize_\n_returns: void_\n_returns_description: _\n_parameters: int &values_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\section Vectors\nRandomly reorder the values in a vector.\n\\tparam T the type contained by the vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to modify.</p>\n<p><strong>See also</strong>: http://www.cplusplus.com/reference/algorithm/random_shuffle/</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofRemove(&amp;values, shouldErase)</p>\n<!--\n_syntax: ofRemove(&values, shouldErase)_\n_name: ofRemove_\n_returns: void_\n_returns_description: _\n_parameters: int &values, BoolFunction shouldErase_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Conditionally remove values from a vector.</p>\n<p>Values are removed if, when passed to the BoolFunction, the BoolFunction\nfunction returns true.  The given BoolFunction can be a custom function\nor a built-in function.</p>\n<p>Example of a custom function to remove odd numbers from a std::vector<int>\nof integers:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">bool</span> <span class=\"token function\">IsOdd</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To call the function, one might use:</p>\n<pre><code class=\"language-{.cpp}\">std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> myInts<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Fill the vector with integers.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    myInts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">ofRemove</span><span class=\"token punctuation\">(</span>myInts<span class=\"token punctuation\">,</span> IsOdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The resulting vector will contain the following values:</p>\n<p>0, 2, 4, 6, 8</p>\n<p>\\tparam T the type contained by the vector.\n\\tparam BoolFunction the boolean function used to erase.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to modify.</p>\n<p>shouldErase A boolean function as described above.</p>\n<p><strong>See also</strong>: http://www.cplusplus.com/reference/algorithm/remove_if/</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofResetElapsedTimeCounter()</p>\n<!--\n_syntax: ofResetElapsedTimeCounter()_\n_name: ofResetElapsedTimeCounter_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\section Elapsed Time\nReset the elapsed time counter.</p>\n<p>This method resets the times returned by ofGetElapsedTimef(),\nofGetElapsedTimeMillis() and ofGetElapsedTimeMicros() to zero.</p>\n<p>\\note This is called on the first frame during app startup.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool ofRestoreWorkingDirectoryToDefault()</p>\n<!--\n_syntax: ofRestoreWorkingDirectoryToDefault()_\n_name: ofRestoreWorkingDirectoryToDefault_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Reset the working directory to the platform default.</p>\n<p>The default working directory is where the application was started from\nor the exe directory in case of osx bundles. GLUT might change the default\nworking directory to the resources directory in the bundle in osx. This\nwill restore it to the exe dir or whatever was the current dir when the\napplication was started</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofSaveFrame(bUseViewport = false)</p>\n<!--\n_syntax: ofSaveFrame(bUseViewport = false)_\n_name: ofSaveFrame_\n_returns: void_\n_returns_description: _\n_parameters: bool bUseViewport=false_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Saves the current frame as a PNG image.</p>\n<p>The PNG image will be named according to an internal counter in sequence.\nThe count will be restarted each time the program is restarted.</p>\n<p><strong>Parameters:</strong></p>\n<p>bUseViewport Set to true if the current viewport should be used.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofSaveScreen(&amp;filename)</p>\n<!--\n_syntax: ofSaveScreen(&filename)_\n_name: ofSaveScreen_\n_returns: void_\n_returns_description: _\n_parameters: const string &filename_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\section Frame Saving\nSaves the current screen image to a file on disk.</p>\n<p>Example:</p>\n<pre><code class=\"language-{.cpp}\">\t\t<span class=\"token function\">ofSaveScreen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"screen.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Will save screen.png in the /data folder.</span>\n</code></pre>\n<p>The output file type will be deduced from the given file name.</p>\n<p><strong>Parameters:</strong></p>\n<p>filename The image output file.</p>\n<p>_description: _</p>\n<p>Saves the current screen image into a given file name (string filename).\nExample:</p>\n<pre><code class=\"language-{.cpp}\">\nstring filename<span class=\"token punctuation\">;</span>\nfilename <span class=\"token operator\">=</span> <span class=\"token string\">\"screen1.png\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSaveScreen</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void ofSaveViewport(&amp;filename)</p>\n<!--\n_syntax: ofSaveViewport(&filename)_\n_name: ofSaveViewport_\n_returns: void_\n_returns_description: _\n_parameters: const string &filename_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Saves the current viewport as an image.</p>\n<p>The output file type will be deduced from the given file name.</p>\n<p><strong>Parameters:</strong></p>\n<p>filename The image output file.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofSetDataPathRoot(&amp;root)</p>\n<!--\n_syntax: ofSetDataPathRoot(&root)_\n_name: ofSetDataPathRoot_\n_returns: void_\n_returns_description: _\n_parameters: const filesystem::path &root_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the relative path to the data/ folder from the executable.</p>\n<p>This method can be useful when users want to embed the data as a resource\nfolder within an *.app bundle on OSX or perhaps work from a shared data\nfolder in the user's Documents directory.</p>\n<p><strong>Warning</strong>: The provided path must have a trailing slash (/).</p>\n<p><strong>Parameters:</strong></p>\n<p>root The path to the data/ folder relative to the app executable.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofSleepMillis(millis)</p>\n<!--\n_syntax: ofSleepMillis(millis)_\n_name: ofSleepMillis_\n_returns: void_\n_returns_description: _\n_parameters: int millis_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Sleeps the current thread for the specified amount of milliseconds.</p>\n<p><strong>Parameters:</strong></p>\n<p>millis The number of millseconds to sleep.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofSort(&amp;values)</p>\n<!--\n_syntax: ofSort(&values)_\n_name: ofSort_\n_returns: void_\n_returns_description: _\n_parameters: int &values_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Sort a vector of values into ascending order.</p>\n<p>The elements are compared using operator&lt; for the first version.\nEquivalent elements are not guaranteed to keep their original relative\norder.</p>\n<p>\\tparam T the type contained by the vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to be sorted.</p>\n<p><strong>See also</strong>: http://www.cplusplus.com/reference/algorithm/sort/</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofSort(&amp;values, compare)</p>\n<!--\n_syntax: ofSort(&values, compare)_\n_name: ofSort_\n_returns: void_\n_returns_description: _\n_parameters: int &values, BoolFunction compare_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Sort a vector of values into an order defined by a comparator.</p>\n<p>Example of a custom function to sort descending of integers:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">bool</span> <span class=\"token function\">sortDescending</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This binary function must accept two elements in the range as arguments and\nreturn a value convertible to bool. The value returned indicates whether the\nelement passed as first argument is considered to go before the second in\nthe specific strict weak ordering it defines.  The function shall not modify\nany of its arguments.  This can either be a function pointer or a function\nobject.</p>\n<p>To call the function, one might use:</p>\n<pre><code class=\"language-{.cpp}\">std<span class=\"token operator\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> myInts<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Fill the vector with integers.</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    myInts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">ofSort</span><span class=\"token punctuation\">(</span>myInts<span class=\"token punctuation\">,</span> sortDescending<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The resulting vector will contain the following values:</p>\n<p>9, 8, 7, 6, 5, 4, 3, 2, 1, 0.</p>\n<p>\\tparam T the type contained by the vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to be sorted.</p>\n<p>compare The comparison function.</p>\n<p><strong>See also</strong>: http://www.cplusplus.com/reference/algorithm/sort/</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofSplitString()</p>\n<!--\n_syntax: ofSplitString()_\n_name: ofSplitString_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\section String Manipulation\nSplits a string using a delimiter.</p>\n<p>ofSplitString splits a string and returns the collection of string\ntokens inside of a std::vector<a href=\"std::string\">std::string</a>.</p>\n<p>A useful application is to use delimiter <code>&quot; &quot;</code>:</p>\n<pre><code class=\"language-{.cpp}\">result <span class=\"token operator\">=</span> <span class=\"token function\">ofSplitString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"of rocks\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// result[0] = \"of\"</span>\n<span class=\"token comment\" spellcheck=\"true\">// result[1] = \"rocks\"</span>\n</code></pre>\n<p>Like this a big string can be &quot;cut&quot; and turned it into a collection of\nwords. The user can also ignore empty tokens.  Empty tokens occur when a\nthere are multiple delimiters in a row (e.g. &quot;of,rocks,,!&quot;).  The user can\nalso &quot;trim&quot; the tokens. This will remove whitespace from before and after\neach token.  This might be useful when a delimted string is padded with\nwith spaces (e.g. &quot;of    ,   rocks   ,!&quot;).</p>\n<p><strong>Parameters:</strong></p>\n<p>source The string to split.</p>\n<p>delimiter The delimiter string.</p>\n<p>ignoreEmpty Set to true to remove empty tokens.</p>\n<p>trim Set to true to trim the resulting tokens.</p>\n<p><strong>Returns</strong>: A vector of strings split with the delimiter.</p>\n<p>_description: _</p>\n<p>Splits source using delimiter and returns the separate tokens. In modern versions of openFrameworks, delimiter can be a multi-character string. In older versions of openFrameworks, delimiter was interpreted as multiple single-character delimiters.</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofStringReplace(&amp;input, &amp;searchStr, &amp;replaceStr)</p>\n<!--\n_syntax: ofStringReplace(&input, &searchStr, &replaceStr)_\n_name: ofStringReplace_\n_returns: void_\n_returns_description: _\n_parameters: string &input, const string &searchStr, const string &replaceStr_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Replace all occurrences of a string with another string.\n\\note The input string is passed by reference, so it will be modified.</p>\n<p><strong>Parameters:</strong></p>\n<p>input The string to run the replacement on.</p>\n<p>searchStr The string to be replaced.</p>\n<p>replaceStr The string to put in place.</p>\n<p>_description: _</p>\n<p>Searches input for instances of searchStr and replaces them with replaceStr.</p>\n<pre><code class=\"language-{.cpp}\">string message <span class=\"token operator\">=</span> <span class=\"token string\">\"hello, world!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofStringReplace</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"goodbye\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outputs \"goodbye, world!\"</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###size_t ofStringTimesInString(&amp;haystack, &amp;needle)</p>\n<!--\n_syntax: ofStringTimesInString(&haystack, &needle)_\n_name: ofStringTimesInString_\n_returns: size_t_\n_returns_description: _\n_parameters: const string &haystack, const string &needle_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check how many times a string contains another string.</p>\n<p><strong>Parameters:</strong></p>\n<p>haystack The string to check for occurrence in .</p>\n<p>needle The string to check for.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofSystem(&amp;command)</p>\n<!--\n_syntax: ofSystem(&command)_\n_name: ofSystem_\n_returns: string_\n_returns_description: _\n_parameters: const string &command_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Executes a system command. Similar to run a command in terminal.\n\\note Will block until the executed program/command has finished.</p>\n<p><strong>Returns</strong>: the system command output as string.</p>\n<p>_description: _</p>\n<p>Executes an application or a system command and returns its output as string. Will block until the executed program/command has finished.</p>\n<!----------------------------------------------------------------------------->\n<p>###T ofTo(&amp;str)</p>\n<!--\n_syntax: ofTo(&str)_\n_name: ofTo_\n_returns: T_\n_returns_description: _\n_parameters: const string &str_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToBinary(&amp;value)</p>\n<!--\n_syntax: ofToBinary(&value)_\n_name: ofToBinary_\n_returns: string_\n_returns_description: _\n_parameters: const T &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts any datatype value to a string of only 1s and 0s.</p>\n<p>The corresponding string of 1s and 0s corresponds to the way value is stored\nin memory.</p>\n<p>\\tparam T The data type of the value to convert to a binary string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The data to convert to a binary string.</p>\n<p><strong>Returns</strong>: a binary string.</p>\n<p>_description: _</p>\n<p>Converts any datatype value to a string of only 1s and 0s corresponding to the way value is stored in memory.</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToBinary(&amp;value)</p>\n<!--\n_syntax: ofToBinary(&value)_\n_name: ofToBinary_\n_returns: string_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts a string value to a string of only 1s and 0s.</p>\n<p>The corresponding string of 1s and 0s corresponds to the way value is stored\nin memory.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The string to convert to a binary string.</p>\n<p><strong>Returns</strong>: a binary string.</p>\n<p>_description: _</p>\n<p>Converts a string value to a string of only 1s and 0s corresponding to the way value is stored in memory.</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToBinary(*value)</p>\n<!--\n_syntax: ofToBinary(*value)_\n_name: ofToBinary_\n_returns: string_\n_returns_description: _\n_parameters: const char *value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts a c-style string to a string of only 1s and 0s.</p>\n<p>The corresponding string of 1s and 0s corresponds to the way value is stored\nin memory.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The c-style string to convert to a binary string.</p>\n<p><strong>Returns</strong>: a binary string.</p>\n<p>_description: _</p>\n<p>Converts any C-style string value to a string of only 1s and 0s corresponding to the way value is stored in memory.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool ofToBool(&amp;boolString)</p>\n<!--\n_syntax: ofToBool(&boolString)_\n_name: ofToBool_\n_returns: bool_\n_returns_description: _\n_parameters: const string &boolString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string to a boolean.</p>\n<p>Converts a std::string representation of a boolean (e.g., <code>&quot;TRUE&quot;</code>) to an\nactual <code>bool</code> using a case-insensitive comparison against the words <code>&quot;true&quot;</code>\nand <code>&quot;false&quot;</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>boolString The string representation of the boolean.</p>\n<p><strong>Returns</strong>: the boolean represented by the string or 0 on failure.</p>\n<p>_description: _</p>\n<p>Converts a string representation boolString (e.g., &quot;TRUE&quot;) to an actual bool using a case-insensitive comparison against the words &quot;true&quot; and &quot;false&quot;.</p>\n<!----------------------------------------------------------------------------->\n<p>###char ofToChar(&amp;charString)</p>\n<!--\n_syntax: ofToChar(&charString)_\n_name: ofToChar_\n_returns: char_\n_returns_description: _\n_parameters: const string &charString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string representation of a char to a actual char.</p>\n<p>Converts a string representation of a single char (e.g., <code>&quot;c&quot;</code>) to an\nactual <code>char</code>.</p>\n<p>\\note Multi-byte chars and multi-char strings are not supported.</p>\n<p><strong>Parameters:</strong></p>\n<p>charString The char string to convert.</p>\n<p><strong>Returns</strong>: The string as a char or 0 on failure.</p>\n<p>_description: _</p>\n<p>Converts a string representation of a single char (e.g., &quot; c &quot;) to an actual char.</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToDataPath(&amp;path, absolute = false)</p>\n<!--\n_syntax: ofToDataPath(&path, absolute = false)_\n_name: ofToDataPath_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &path, bool absolute=false_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Make a path relative to the location of the data/ folder.</p>\n<p>This funtion returns path unchanged if ofDisableDataPath() was called first.</p>\n<p>By default, a relative path is returned. Users requiring absolute paths for\n(e.g. for non-openFrameworks functions), can specify that an absolute path\nbe returned.</p>\n<p><strong>Parameters:</strong></p>\n<p>path The path to make relative to the data/ folder.</p>\n<p>absolute Set to true to return an absolute path.</p>\n<p><strong>Returns</strong>: the new path, unless paths were disabled with ofDisableDataPath().</p>\n<p>_description: _</p>\n<p>openFrameworks now treats all files in the data/ folder as being at the same level as your app. When a file is loaded using openFrameworks classes (like ofVideoPlayer) the file path is run through this function to turn it into a relative path for the executible. As windows, mac and linux all have different relative paths, it is important to use this function if you have written your own class or addon for openFrameworks and you wish to be able to load files from the data/ folder.</p>\n<p>The optional parameter makeAbsolute, if set to true (false by default) returns the generated path as an absolute path starting from the root of your filesystem instead of from the folder your application is run from.</p>\n<!----------------------------------------------------------------------------->\n<p>###double ofToDouble(&amp;doubleString)</p>\n<!--\n_syntax: ofToDouble(&doubleString)_\n_name: ofToDouble_\n_returns: double_\n_returns_description: _\n_parameters: const string &doubleString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string to a double.</p>\n<p>Converts a std::string representation of a double (e.g., <code>&quot;3.14&quot;</code>) to an\nactual <code>double</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>doubleString The string representation of the double.</p>\n<p><strong>Returns</strong>: the double represented by the string or 0 on failure.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float ofToFloat(&amp;floatString)</p>\n<!--\n_syntax: ofToFloat(&floatString)_\n_name: ofToFloat_\n_returns: float_\n_returns_description: _\n_parameters: const string &floatString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string to a float.</p>\n<p>Converts a std::string representation of a float (e.g., <code>&quot;3.14&quot;</code>) to an\nactual <code>float</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>floatString string representation of the float.</p>\n<p><strong>Returns</strong>: the float represented by the string or 0 on failure.</p>\n<p>_description: _</p>\n<p>Converts a string representation floatString (e.g., &quot;3.14&quot;) to an actual float.</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToHex(&amp;value)</p>\n<!--\n_syntax: ofToHex(&value)_\n_name: ofToHex_\n_returns: string_\n_returns_description: _\n_parameters: const T &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts any value to its equivalent hexadecimal representation.</p>\n<p>The hexadecimal representation corresponds to the way a number is stored in\nmemory.</p>\n<p>\\tparam T The data type of the value to convert to a hexadecimal string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a hexadecimal string.</p>\n<p><strong>Returns</strong>: the hexadecimal string representation of the value.</p>\n<p>_description: _</p>\n<p>Converts any value to its equivalent hexadecimal representation corresponding to the way it is stored in memory.</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToHex(&amp;value)</p>\n<!--\n_syntax: ofToHex(&value)_\n_name: ofToHex_\n_returns: string_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string to a hexadecimal string.</p>\n<p>Converts a string (e.g., <code>&quot;abc&quot;</code>) to its equivalent hexadecimal\nrepresentation (e.g., <code>&quot;616263&quot;</code>).</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a hexadecimal string.</p>\n<p><strong>Returns</strong>: a hexadecimal string.</p>\n<p>_description: _</p>\n<p>Converts a string (e.g., &quot;abc&quot;) to its equivalent hexadecimal representation (e.g., &quot;616263&quot;).</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToHex(*value)</p>\n<!--\n_syntax: ofToHex(*value)_\n_name: ofToHex_\n_returns: string_\n_returns_description: _\n_parameters: const char *value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a c-style string to a hexadecimal string.</p>\n<p>Converts a string (e.g., <code>&quot;abc&quot;</code>) to its equivalent hexadecimal\nrepresentation (e.g., <code>&quot;616263&quot;</code>).</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a hexadecimal string.</p>\n<p><strong>Returns</strong>: a hexadecimal string.</p>\n<p>_description: _</p>\n<p>Converts a c-style string (e.g., &quot;abc&quot;) to its equivalent hexadecimal representation (e.g., &quot;616263&quot;).</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofToInt(&amp;intString)</p>\n<!--\n_syntax: ofToInt(&intString)_\n_name: ofToInt_\n_returns: int_\n_returns_description: _\n_parameters: const string &intString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\section Number Conversion\nConvert a string to an integer.</p>\n<p>Converts a <code>std::string</code> representation of an int (e.g., <code>&quot;3&quot;</code>) to an actual\n<code>int</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>intString The string representation of the integer.</p>\n<p><strong>Returns</strong>: the integer represented by the string or 0 on failure.</p>\n<p>_description: _</p>\n<p>Converts a string representation of an int (e.g., &quot;2012&quot;) to an actual int.</p>\n<!----------------------------------------------------------------------------->\n<p>###int64_t ofToInt64(&amp;intString)</p>\n<!--\n_syntax: ofToInt64(&intString)_\n_name: ofToInt64_\n_returns: int64_t_\n_returns_description: _\n_parameters: const string &intString_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a string to a int64_t.</p>\n<p>Converts a <code>std::string</code> representation of a long integer\n(e.g., <code>&quot;9223372036854775807&quot;</code>) to an actual <code>int64_t</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>intString The string representation of the long integer.</p>\n<p><strong>Returns</strong>: the long integer represented by the string or 0 on failure.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToLower(&amp;src, &amp;locale)</p>\n<!--\n_syntax: ofToLower(&src, &locale)_\n_name: ofToLower_\n_returns: string_\n_returns_description: _\n_parameters: const string &src, const string &locale_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts all characters in a string to lowercase.</p>\n<p>This function expects a UTF-8 encoded multi-byte string to be passed.\nResulting strings will be returned as UTF-8 encoded multi-byte strings.</p>\n<pre><code class=\"language-{.cpp}\">    std<span class=\"token operator\">::</span>string enthusiasticGreeting <span class=\"token operator\">=</span> <span class=\"token string\">\"HELLO, WORLD!\"</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>string politeGreeting <span class=\"token operator\">=</span> <span class=\"token function\">ofToLower</span><span class=\"token punctuation\">(</span>enthusiasticGreeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> politeGreeting<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Returns \"hello, world!\"</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>src The UTF-8 encoded string to convert to lowercase.</p>\n<p><strong>Returns</strong>: the UTF-8 encoded string as all lowercase characters.</p>\n<p>_description: _</p>\n<p>Converts all characters in the string src to lowercase.</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToString(&amp;value)</p>\n<!--\n_syntax: ofToString(&value)_\n_name: ofToString_\n_returns: string_\n_returns_description: _\n_parameters: const T &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\section String Conversion\nConvert a value to a string.</p>\n<p>ofToString does its best to convert any value to a string. If the data type\nimplements a stream &lt;&lt; operator, then it will be converted.</p>\n<p>Example:</p>\n<pre><code class=\"language-{.cpp}\">\t\tstd<span class=\"token operator\">::</span>string str <span class=\"token operator\">=</span> <span class=\"token string\">\"framerate is \"</span><span class=\"token punctuation\">;</span>\n\t\tstr <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetFrameRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" fps\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// The string now containes something like \"framerate is 60 fps\".</span>\n</code></pre>\n<p>\\tparam T The data type of the value to convert to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a string.</p>\n<p><strong>Returns</strong>: A string representing the value or an empty string on failure.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToString(&amp;value, precision)</p>\n<!--\n_syntax: ofToString(&value, precision)_\n_name: ofToString_\n_returns: string_\n_returns_description: _\n_parameters: const T &value, int precision_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a value to a string with a specific precision.</p>\n<p>Like sprintf &quot;%4f&quot; format, in this example precision=4</p>\n<p>\\tparam T The data type of the value to convert to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a string.</p>\n<p>precision The precision to use when converting to a string.</p>\n<p><strong>Returns</strong>: The string representation of the value.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToString(&amp;value, precision, width, fill)</p>\n<!--\n_syntax: ofToString(&value, precision, width, fill)_\n_name: ofToString_\n_returns: string_\n_returns_description: _\n_parameters: const T &value, int precision, int width, char fill_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a value to a string with a specific precision, width and filll</p>\n<p>Like sprintf &quot;%04.2d&quot; or &quot;%04.2f&quot; format, in this example precision=2, width=4, fill='0'</p>\n<p>\\tparam T The data type of the value to convert to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a string.</p>\n<p>precision The precision to use when converting to a string.</p>\n<p>width The width of the value to use when converting to a string.</p>\n<p>fill The character to use when padding the converted string.</p>\n<p><strong>Returns</strong>: The string representation of the value.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToString(&amp;value, width, fill)</p>\n<!--\n_syntax: ofToString(&value, width, fill)_\n_name: ofToString_\n_returns: string_\n_returns_description: _\n_parameters: const T &value, int width, char fill_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a value to a string with a specific width and fill</p>\n<p>Like sprintf &quot;% 4d&quot; or &quot;% 4f&quot; format, in this example width=4, fill=' '</p>\n<p>\\tparam T The data type of the value to convert to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>value The value to convert to a string.</p>\n<p>width The width of the value to use when converting to a string.</p>\n<p>fill The character to use when padding the converted string.</p>\n<p><strong>Returns</strong>: The string representation of the value.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofToString(&amp;values)</p>\n<!--\n_syntax: ofToString(&values)_\n_name: ofToString_\n_returns: string_\n_returns_description: _\n_parameters: const int &values_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a vector of values to a comma-delimited string.</p>\n<p>This method will take any vector of values and output a list of the values\nas a comma-delimited string.</p>\n<p>\\tparam T The data type held by the vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>values The vector of values to be converted to a string.</p>\n<p><strong>Returns</strong>: a comma-delimited string representation of the intput values.</p>\n<p>_description: _</p>\n<p>Converts a vector of values to a single string representation.</p>\n<pre><code class=\"language-{.cpp}\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">;</span>\nvec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvec<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// prints \"{1, 2, 3}\"</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###string ofToUpper(&amp;src, &amp;locale)</p>\n<!--\n_syntax: ofToUpper(&src, &locale)_\n_name: ofToUpper_\n_returns: string_\n_returns_description: _\n_parameters: const string &src, const string &locale_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts all characters in the string to uppercase.</p>\n<p>This function expects a UTF-8 encoded multi-byte string to be passed.\nResulting strings will be returned as UTF-8 encoded multi-byte strings.</p>\n<pre><code class=\"language-{.cpp}\">    std<span class=\"token operator\">::</span>string politeGreeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token operator\">::</span>string enthusiasticGreeting <span class=\"token operator\">=</span> <span class=\"token function\">ofToUpper</span><span class=\"token punctuation\">(</span>politeGreeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> enthusiasticGreeting<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Returns \"HELLO, WORLD!\"</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>src The UTF-8 encoded string to convert to uppercase.</p>\n<p><strong>Returns</strong>: the UTF-8 encoded string as all uppercase characters.</p>\n<p>_description: _</p>\n<p>Converts all characters in the string src to uppercase.</p>\n<pre><code class=\"language-{.cpp}\">    string politeGreeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">;</span>\n    string enthusiasticGreeting <span class=\"token operator\">=</span> <span class=\"token function\">ofToUpper</span><span class=\"token punctuation\">(</span>politeGreeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> enthusiasticGreeting<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// returns \"HELLO, WORLD!\"</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###string ofTrim(&amp;src, &amp;locale)</p>\n<!--\n_syntax: ofTrim(&src, &locale)_\n_name: ofTrim_\n_returns: string_\n_returns_description: _\n_parameters: const string &src, const string &locale_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofTrimBack(&amp;src, &amp;locale)</p>\n<!--\n_syntax: ofTrimBack(&src, &locale)_\n_name: ofTrimBack_\n_returns: string_\n_returns_description: _\n_parameters: const string &src, const string &locale_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofTrimFront(&amp;src, &amp;locale)</p>\n<!--\n_syntax: ofTrimFront(&src, &locale)_\n_name: ofTrimFront_\n_returns: string_\n_returns_description: _\n_parameters: const string &src, const string &locale_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofUTF8Append(&amp;str, utf8)</p>\n<!--\n_syntax: ofUTF8Append(&str, utf8)_\n_name: ofUTF8Append_\n_returns: void_\n_returns_description: _\n_parameters: string &str, uint32_t utf8_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofUTF8Erase(&amp;str, start, len)</p>\n<!--\n_syntax: ofUTF8Erase(&str, start, len)_\n_name: ofUTF8Erase_\n_returns: void_\n_returns_description: _\n_parameters: string &str, size_t start, size_t len_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofUTF8Insert(&amp;str, pos, utf8)</p>\n<!--\n_syntax: ofUTF8Insert(&str, pos, utf8)_\n_name: ofUTF8Insert_\n_returns: void_\n_returns_description: _\n_parameters: string &str, size_t pos, uint32_t utf8_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###size_t ofUTF8Length(&amp;str)</p>\n<!--\n_syntax: ofUTF8Length(&str)_\n_name: ofUTF8Length_\n_returns: size_t_\n_returns_description: _\n_parameters: const string &str_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofUTF8Substring(&amp;str, start, len)</p>\n<!--\n_syntax: ofUTF8Substring(&str, start, len)_\n_name: ofUTF8Substring_\n_returns: string_\n_returns_description: _\n_parameters: const string &str, size_t start, size_t len_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofUTF8ToString(utf8)</p>\n<!--\n_syntax: ofUTF8ToString(utf8)_\n_name: ofUTF8ToString_\n_returns: string_\n_returns_description: _\n_parameters: uint32_t utf8_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofVAArgsToString(*format)</p>\n<!--\n_syntax: ofVAArgsToString(*format)_\n_name: ofVAArgsToString_\n_returns: string_\n_returns_description: _\n_parameters: const char *format_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a variable length argument to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>format a printf-style format string.</p>\n<p><strong>Returns</strong>: A string representation of the argument list.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string ofVAArgsToString(*format, args)</p>\n<!--\n_syntax: ofVAArgsToString(*format, args)_\n_name: ofVAArgsToString_\n_returns: string_\n_returns_description: _\n_parameters: const char *format, va_list args_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Convert a variable length argument to a string.</p>\n<p><strong>Parameters:</strong></p>\n<p>format A printf-style format string.</p>\n<p>args A variable argument list.</p>\n<p><strong>Returns</strong>: A string representation of the argument list.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###char ofBinaryToChar(&value)\n\n<!--\n_syntax: ofBinaryToChar(&value)_\n_name: ofBinaryToChar_\n_returns: char_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a binary string to an char.\n\nInterprets a string consisting only of 1s and 0s as an char and returns\nthe corresponding int value.\n\n\\value The binary string.\n\n**Returns**: the char represented by the string or 0 on failure.\n\n\n\n\n\n_description: _\n\nInterprets a string consisting only of 1s and 0s as a char, and returns the corresponding char value.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float ofBinaryToFloat(&value)\n\n<!--\n_syntax: ofBinaryToFloat(&value)_\n_name: ofBinaryToFloat_\n_returns: float_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a binary string to a float.\n\nInterprets a string consisting only of 1s and 0s as an a float\n(little-endian, 32-bit IEEE 754), and returns the corresponding float value.\n\n\\value The binary string.\n\n**Returns**: the float represented by the string or 0 on failure.\n\n\n\n\n\n_description: _\n\nInterprets a string consisting only of 1s and 0s as a float (little-endian, 32-bit IEEE 754), and returns the corresponding float value.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofBinaryToInt(&value)\n\n<!--\n_syntax: ofBinaryToInt(&value)_\n_name: ofBinaryToInt_\n_returns: int_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a binary string to an int.\n\nInterprets a string consisting only of 1s and 0s as an int (little-endian,\n32-bit), and returns the corresponding int value.\n\n\\value The binary string.\n\n**Returns**: the integer represented by the string or 0 on failure.\n\n\n\n\n\n_description: _\n\nInterprets a string consisting only of 1s and 0s as an int (little-endian, 32-bit), and returns the corresponding int value.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofBinaryToString(&value)\n\n<!--\n_syntax: ofBinaryToString(&value)_\n_name: ofBinaryToString_\n_returns: string_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a binary string to ASCII characters.\n\nInterprets a string consisting only of 1s and 0s as 8-bit ASCII characters\nand returns the corresponding string.\n\n\\value The binary string.\n\n**Returns**: the ASCII string represented by the string.\n\n\n\n\n\n_description: _\n\nInterprets a string consisting only of 1s and 0s as 8-bit ASCII characters, and returns the corresponding string.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool ofContains(&values, &target)\n\n<!--\n_syntax: ofContains(&values, &target)_\n_name: ofContains_\n_returns: bool_\n_returns_description: _\n_parameters: const int &values, const T &target_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSearch for a target value in a vector of values.\n\\tparam T the type contained by the vector.\n\n**Parameters:**\n\nvalues The vector of values to be searched.\n\ntarget The target value to be found.\n\n**Returns**: true if at least one value equal to the target value is found.\n\n\n\n\n\n_description: _\n\nreturns true if the vector values contains target\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofDisableDataPath()\n\n<!--\n_syntax: ofDisableDataPath()_\n_name: ofDisableDataPath_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nDisable the use of the data path.\n\nThis function causes ofToDataPath() to ignore the relative path set\nwith ofSetDataPathRoot().\n\n\n\n\n\n_description: _\n\nDisables the conversion of paths to realtive to data/\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofEnableDataPath()\n\n<!--\n_syntax: ofEnableDataPath()_\n_name: ofEnableDataPath_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\\section Data Path\nEnable the use of the data path.\n\nThis function causes ofToDataPath() to respect the relative path set\nwith ofSetDataPathRoot().  This is enabled by default.\n\n\n\n\n\n_description: _\n\nEnables the conversion of paths to relative to data/  This is enabled by default.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t ofFind(&values, &target)\n\n<!--\n_syntax: ofFind(&values, &target)_\n_name: ofFind_\n_returns: size_t_\n_returns_description: _\n_parameters: const int &values, const T &target_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSearch for a target value in a vector of values.\n\\tparam T the type contained by the vector.\n\n**Parameters:**\n\nvalues The vector of values to be searched.\n\ntarget The target value to be found.\n\n**Returns**: true the index of the first target value found.\n\n**See also**: http://www.cplusplus.com/reference/iterator/distance/\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const char * ofFromString(&value)\n\n<!--\n_syntax: ofFromString(&value)_\n_name: ofFromString_\n_returns: const char *_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string represetnation to another string.\n\nEquivalent to calling the `.c_str()` on a std::string.\n\n\n**Parameters:**\n\nvalue The string value to convert to another string.\n\n**Returns**: the string converted to a c-style string.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T ofFromString(&value)\n\n<!--\n_syntax: ofFromString(&value)_\n_name: ofFromString_\n_returns: T_\n_returns_description: _\n_parameters: const string &value_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string represetnation to another type.\n\nOften, this method will be used to convert a string to a numerical type.\n\n\\tparam T The target data type.\n\n**Parameters:**\n\nvalue The string value to convert to type T.\n\n**Returns**: the string converted to the target data type T.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofFromString(&value)\n\n<!--\n_syntax: ofFromString(&value)_\n_name: ofFromString_\n_returns: string_\n_returns_description: _\n_parameters: const string &value_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string represetnation to another string.\n\n**Parameters:**\n\nvalue The string value to convert to another string.\n\n**Returns**: the string converted to another string.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTime ofGetCurrentTime()\n\n<!--\n_syntax: ofGetCurrentTime()_\n_name: ofGetCurrentTime_\n_returns: ofTime_\n_returns_description: _\n_parameters: _\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the system time.\n\n**Returns**: the system time.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetDay()\n\n<!--\n_syntax: ofGetDay()_\n_name: ofGetDay_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the current day within the month.\n\n**Returns**: the day witin the month [1-31].\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###uint64_t ofGetElapsedTimeMicros()\n\n<!--\n_syntax: ofGetElapsedTimeMicros()_\n_name: ofGetElapsedTimeMicros_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the elapsed time in microseconds.\n\nThis returns the elapsed time since ofResetElapsedTimeCounter() was called.\nUsually ofResetElapsedTimeCounter() is called automatically upon program\nstartup.\n\n\n**Returns**: the elapsed time in microseconds (1000000 microseconds = 1 second).\n\n\n\n\n\n_description: _\n\nreturns the elapsed time since the application started in microseconds (1000000 microsecs = 1 second)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###uint64_t ofGetElapsedTimeMillis()\n\n<!--\n_syntax: ofGetElapsedTimeMillis()_\n_name: ofGetElapsedTimeMillis_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the elapsed time in milliseconds.\n\nThis returns the elapsed time since ofResetElapsedTimeCounter() was called.\nUsually ofResetElapsedTimeCounter() is called automatically once during\nprogram startup.\n\n\n**Returns**: the elapsed time in milliseconds (1000 milliseconds = 1 second).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float ofGetElapsedTimef()\n\n<!--\n_syntax: ofGetElapsedTimef()_\n_name: ofGetElapsedTimef_\n_returns: float_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the elapsed time in seconds.\n\nThis returns the elapsed time since ofResetElapsedTimeCounter() was called.\nUsually ofResetElapsedTimeCounter() is called automatically once during\nprogram startup.\n\n\n**Returns**: the floating point elapsed time in seconds.\n\n\n\n\n\n_description: _\n\nreturns the elapsed time since the application started in seconds as a float\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofGetEnv(&var)\n\n<!--\n_syntax: ofGetEnv(&var)_\n_name: ofGetEnv_\n_returns: string_\n_returns_description: _\n_parameters: const string &var_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the value of a given environment variable.\n\\note The available environment variables differ between operating systems.\n\n**Returns**: the environmnt variable's value or an empty string if not found.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###uint64_t ofGetFrameNum()\n\n<!--\n_syntax: ofGetFrameNum()_\n_name: ofGetFrameNum_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the number of frames rendered since the program started.\n\n**Returns**: the number of frames rendered since the program started.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetHours()\n\n<!--\n_syntax: ofGetHours()_\n_name: ofGetHours_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the hour of the day.\n\n**Returns**: the hour of the day [0-23].\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetMinutes()\n\n<!--\n_syntax: ofGetMinutes()_\n_name: ofGetMinutes_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet minutes after the hour.\n\n**Returns**: the minutes after the hour [0-59].\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetMonth()\n\n<!--\n_syntax: ofGetMonth()_\n_name: ofGetMonth_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the current month.\n\n**Returns**: the current month [1-12].\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetSeconds()\n\n<!--\n_syntax: ofGetSeconds()_\n_name: ofGetSeconds_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\section System Time\nGet the seconds after the minute.\n\n**Returns**: the seconds after the minute [0-59].\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###uint64_t ofGetSystemTimeMicros()\n\n<!--\n_syntax: ofGetSystemTimeMicros()_\n_name: ofGetSystemTimeMicros_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the system time in microseconds.\n\n**Returns**: the system time in microseconds.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###uint64_t ofGetSystemTimeMillis()\n\n<!--\n_syntax: ofGetSystemTimeMillis()_\n_name: ofGetSystemTimeMillis_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the system time in milliseconds.\n\n**Returns**: the system time in milliseconds.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTargetPlatform ofGetTargetPlatform()\n\n<!--\n_syntax: ofGetTargetPlatform()_\n_name: ofGetTargetPlatform_\n_returns: ofTargetPlatform_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the target platform of the current system.\n\n**Returns**: the current ofTargetPlatform.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofGetTimestampString(&timestampFormat)\n\n<!--\n_syntax: ofGetTimestampString(&timestampFormat)_\n_name: ofGetTimestampString_\n_returns: string_\n_returns_description: _\n_parameters: const string &timestampFormat_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFormats the current system time according to the given format.\n\nThe format string is used as a template to format the date and\nis copied character by character except for the following special\ncharacters, which are replaced by the corresponding value.\n\n| **specifier** | **Replaced by** | **Example** |\n|---|---|---|\n| %a |\tAbbreviated weekday name |\tThu |\n| %A |\tFull weekday name | \tThursday |\n| %b |\tAbbreviated month name |\tAug |\n| %B |\tFull month name |\tAugust |\n| %c |\tDate and time representation |\tThu Aug 23 14:55:02 2001 |\n| %C |\tYear divided by 100 and truncated to integer (00-99) |\t20 |\n| %d |\tDay of the month, zero-padded (01-31) |\t23 |\n| %D |\tShort MM/DD/YY date, equivalent to %m/%d/%y |\t08/23/01 |\n| %e |\tDay of the month, space-padded ( 1-31) |\t23 |\n| %F |\tShort YYYY-MM-DD date, equivalent to %Y-%m-%d |\t2001-08-23 |\n| %g |\tWeek-based year, last two digits (00-99) |\t01 |\n| %G |\tWeek-based year |\t2001 |\n| %h |\tAbbreviated month name (same as %b) |\tAug |\n| %H |\tHour in 24h format (00-23) |\t14 |\n| %I |\tHour in 12h format (01-12) |\t02 |\n| %j |\tDay of the year (001-366) |\t235 |\n| %m |\tMonth as a decimal number (01-12) |\t08 |\n| %M |\tMinute (00-59) |\t55 |\n| %n |\tNew-line character | ('\\n') |\n| %p |\tAM or PM designation |\tPM |\n| %r |\t12-hour clock time |\t02:55:02 pm |\n| %R |\t24-hour HH:MM time, equivalent to %H:%M |\t14:55 |\n| %S |\tSecond (00-61) |\t02 |\n| %t |\tHorizontal-tab character | ('\\t') |\n| %T |\tISO 8601 time format (HH:MM:SS), equivalent to %H:%M:%S |\t14:55:02 |\n| %u |\tISO 8601 weekday as number with Monday as 1 (1-7) |\t4 |\n| %U |\tWeek number with the first Sunday as the first day of week one (00-53) |\t33 |\n| %V |\tISO 8601 week number (01-53) |\t34 |\n| %w |\tWeekday as a decimal number with Sunday as 0 (0-6) |\t4 |\n| %W |\tWeek number with the first Monday as the first day of week one (00-53) |\t34 |\n| %x |\tDate representation |\t08/23/01 |\n| %X |\tTime representation |\t14:55:02 |\n| %y |\tYear, last two digits (00-99) |\t01 |\n| %Y |\tYear |\t2001 |\n| %z |\tISO 8601 offset from UTC in timezone (1 minute=1, 1 hour=100) If timezone cannot be determined, no characters |\t+100 |\n| %Z |\tTimezone name or abbreviation. If timezone cannot be determined, no characters |\tCDT |\n| %% |\tA % sign |\t% |\n\n\n**Parameters:**\n\ntimestampFormat The formatting pattern.\n\n**Returns**: the formatted timestamp as a string.\n\n**Warning**: an invalid timestampFormat may crash windows apps.\n\n\n\n\n\n_description: _\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofGetTimestampString()\n\n<!--\n_syntax: ofGetTimestampString()_\n_name: ofGetTimestampString_\n_returns: string_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFormats the current system time according to the given format.\n\nThe default timestamp format is \"%Y-%m-%d-%H-%M-%S-%i\" (e.g.\n2011-01-15-18-29-35-299).\n\n\n**Returns**: the current time as a string with the default format.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###unsigned int ofGetUnixTime()\n\n<!--\n_syntax: ofGetUnixTime()_\n_name: ofGetUnixTime_\n_returns: unsigned int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the number of seconds since Midnight, January 1, 1970.\n\nResolution is in seconds.\n\n\n**Returns**: the number of seconds since Midnight, January 1, 1970 (epoch time).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofGetVersionInfo()\n\n<!--\n_syntax: ofGetVersionInfo()_\n_name: ofGetVersionInfo_\n_returns: string_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\section openFrameworks Version\nGet the current version of openFrameworks as a string.\n\nopenFrameworks uses the semantic versioning system.\n\n\n**See also**: http://semver.org/\n\n**Returns**: The string representation of the version (e.g. `0.9.0`).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###unsigned int ofGetVersionMajor()\n\n<!--\n_syntax: ofGetVersionMajor()_\n_name: ofGetVersionMajor_\n_returns: unsigned int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the major version number of openFrameworks.\n\nopenFrameworks uses the semantic versioning system.\n\n\n**See also**: http://semver.org/\n\n**Returns**: The major version number.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###unsigned int ofGetVersionMinor()\n\n<!--\n_syntax: ofGetVersionMinor()_\n_name: ofGetVersionMinor_\n_returns: unsigned int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the minor version number of openFrameworks.\n\nopenFrameworks uses the semantic versioning system.\n\n\n**See also**: http://semver.org/\n\n**Returns**: The minor version number.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###unsigned int ofGetVersionPatch()\n\n<!--\n_syntax: ofGetVersionPatch()_\n_name: ofGetVersionPatch_\n_returns: unsigned int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the patch version number of openFrameworks.\n\nopenFrameworks uses the semantic versioning system.\n\n\n**See also**: http://semver.org/\n\n**Returns**: The patch version number.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofGetVersionPreRelease()\n\n<!--\n_syntax: ofGetVersionPreRelease()_\n_name: ofGetVersionPreRelease_\n_returns: string_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the pre-release version of openFrameworks.\n\nopenFrameworks uses the semantic versioning system.\n\nFor pre-release versions of openFrameworks, including development versions,\nthis string will describe the pre-release state. Examples might include\n\"master\", \"rc1\", \"rc2\", etc.  For all stable releases, this string will be\nempty.\n\n\n**See also**: http://semver.org/\n\n**Returns**: The pre-release version string.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetWeekday()\n\n<!--\n_syntax: ofGetWeekday()_\n_name: ofGetWeekday_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the current weekday.\n\nValues 0 = Sunday, 1 = Monday, ..., 6 = Saturday.\n\n\n**Returns**: the current weekday [0-6].\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofGetYear()\n\n<!--\n_syntax: ofGetYear()_\n_name: ofGetYear_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the current year.\n\n**Returns**: the current year.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###char ofHexToChar(&charHexString)\n\n<!--\n_syntax: ofHexToChar(&charHexString)_\n_name: ofHexToChar_\n_returns: char_\n_returns_description: _\n_parameters: const string &charHexString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string representing an char in hexadecimal to a char.\n\nConverts a hexadecimal representation of an char (e.g., `\"61\"`) to an actual\n`char` (e.g., `a`).\n\n\n**Parameters:**\n\ncharHexString The string representing an char in hexadecimal.\n\n**Returns**: the char represented by the string.\n\n\n\n\n\n_description: _\n\nConverts a hexadecimal representation of an char (e.g., \"61\") to an actual char (e.g., a).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float ofHexToFloat(&floatHexString)\n\n<!--\n_syntax: ofHexToFloat(&floatHexString)_\n_name: ofHexToFloat_\n_returns: float_\n_returns_description: _\n_parameters: const string &floatHexString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string representing an float in hexadecimal to a float.\n\nConverts a hexadecimal representation of an float (little-endian, 32-bit\nIEEE 754, e.g., `\"43000000\"`) to an actual float (e.g., `128.f`).\n\n\n**Parameters:**\n\nfloatHexString The string representing an float in hexadecimal.\n\n**Returns**: the float represented by the string.\n\n\n\n\n\n_description: _\n\nConverts a hexadecimal representation of an float (little-endian, 32-bit IEEE 754, e.g., \"4060000000000000\") to an actual float (e.g., 128.f).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofHexToInt(&intHexString)\n\n<!--\n_syntax: ofHexToInt(&intHexString)_\n_name: ofHexToInt_\n_returns: int_\n_returns_description: _\n_parameters: const string &intHexString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string representing an integer in hexadecimal to a string.\n\nConverts a hexadecimal representation of an int (little-endian, 32-bit,\ne.g., `\"0xbadf00d\"` or `\"badf00d\"`) to an actual `int`.\n\n\n**Parameters:**\n\nintHexString The string representing an integer in hexadecimal.\n\n**Returns**: the integer represented by the string.\n\n\n\n\n\n_description: _\n\nConverts a hexadecimal representation of an int (little-endian, 32-bit, e.g., \"0xbadf00d\" or \"badf00d\") to an actual int.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofHexToString(&stringHexString)\n\n<!--\n_syntax: ofHexToString(&stringHexString)_\n_name: ofHexToString_\n_returns: string_\n_returns_description: _\n_parameters: const string &stringHexString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string representing an string in hexadecimal to a string.\n\nConverts a hexadecimal representation of an string (e.g.,\n`\"61626364656667\"`) to an actual string (`\"abcdefg\"`).\n\n\n**Parameters:**\n\nstringHexString The string representing an string in hexadecimal.\n\n**Returns**: the string represented by the string.\n\n\n\n\n\n_description: _\n\nConverts a hexadecimal representation of an string (e.g., \"61626364656667\") to an actual string (\"abcdefg\");\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool ofIsStringInString(&haystack, &needle)\n\n<!--\n_syntax: ofIsStringInString(&haystack, &needle)_\n_name: ofIsStringInString_\n_returns: bool_\n_returns_description: _\n_parameters: const string &haystack, const string &needle_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck if string contains another string.\n\nExample:\n~~~{.cpp}\n    std::string haystack = \"foobar\";\n    ofLog() << ofIsStringInString(haystack, \"foo\"); // Outputs 1.\n    ofLog() << ofIsStringInString(haystack,\"bar\"); // Outputs 1.\n    ofLog() << ofIsStringInString(haystack, \"something else\"); // Outputs 0.\n~~~\n\n**Parameters:**\n\nhaystack The string to check for occurrence in.\n\nneedle The string to check for.\n\n\n\n\n\n_description: _\n\nChecks if the string needle exists in the string haystack.\n\n~~~{.cpp}\n    string haystack = \"foobar\";\n    ofLog() << ofIsStringInString(haystack, \"foo\"); // outputs 1\n    ofLog() << ofIsStringInString(haystack,\"bar\"); // outputs 1\n    ofLog() << ofIsStringInString(haystack, \"something else\"); // outputs 0\n~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofJoinString(&stringElements, &delimiter)\n\n<!--\n_syntax: ofJoinString(&stringElements, &delimiter)_\n_name: ofJoinString_\n_returns: string_\n_returns_description: _\n_parameters: const int &stringElements, const string &delimiter_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nJoin a vector of strings together into one string.\n\n**Parameters:**\n\nstringElements The vector of strings to join.\n\ndelimiter The delimiter to put betweeen each string.\n\n\n\n\n\n_description: _\n\nTurns a stringElements into a single string, with an instance of delimiter between all the elements.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofLaunchBrowser(&url, uriEncodeQuery = false)\n\n<!--\n_syntax: ofLaunchBrowser(&url, uriEncodeQuery = false)_\n_name: ofLaunchBrowser_\n_returns: void_\n_returns_description: _\n_parameters: const string &url, bool uriEncodeQuery=false_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRandomize(&values)\n\n<!--\n_syntax: ofRandomize(&values)_\n_name: ofRandomize_\n_returns: void_\n_returns_description: _\n_parameters: int &values_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\section Vectors\nRandomly reorder the values in a vector.\n\\tparam T the type contained by the vector.\n\n**Parameters:**\n\nvalues The vector of values to modify.\n\n**See also**: http://www.cplusplus.com/reference/algorithm/random_shuffle/\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRemove(&values, shouldErase)\n\n<!--\n_syntax: ofRemove(&values, shouldErase)_\n_name: ofRemove_\n_returns: void_\n_returns_description: _\n_parameters: int &values, BoolFunction shouldErase_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConditionally remove values from a vector.\n\nValues are removed if, when passed to the BoolFunction, the BoolFunction\nfunction returns true.  The given BoolFunction can be a custom function\nor a built-in function.\n\nExample of a custom function to remove odd numbers from a std::vector<int>\nof integers:\n\n~~~~{.cpp}\nbool IsOdd(int i) {\n    return ((i % 2) == 1);\n}\n~~~~\n\nTo call the function, one might use:\n\n~~~~{.cpp}\nstd::vector<int> myInts;\n\n// Fill the vector with integers.\nfor (int i = 0; i < 10; ++i)\n{\n    myInts.push_back(i);\n}\n\nofRemove(myInts, IsOdd);\n~~~~\n\nThe resulting vector will contain the following values:\n\n   0, 2, 4, 6, 8\n\n\\tparam T the type contained by the vector.\n\\tparam BoolFunction the boolean function used to erase.\n\n**Parameters:**\n\nvalues The vector of values to modify.\n\nshouldErase A boolean function as described above.\n\n**See also**: http://www.cplusplus.com/reference/algorithm/remove_if/\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofResetElapsedTimeCounter()\n\n<!--\n_syntax: ofResetElapsedTimeCounter()_\n_name: ofResetElapsedTimeCounter_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\section Elapsed Time\nReset the elapsed time counter.\n\nThis method resets the times returned by ofGetElapsedTimef(),\nofGetElapsedTimeMillis() and ofGetElapsedTimeMicros() to zero.\n\n\\note This is called on the first frame during app startup.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool ofRestoreWorkingDirectoryToDefault()\n\n<!--\n_syntax: ofRestoreWorkingDirectoryToDefault()_\n_name: ofRestoreWorkingDirectoryToDefault_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReset the working directory to the platform default.\n\nThe default working directory is where the application was started from\nor the exe directory in case of osx bundles. GLUT might change the default\nworking directory to the resources directory in the bundle in osx. This\nwill restore it to the exe dir or whatever was the current dir when the\napplication was started\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSaveFrame(bUseViewport = false)\n\n<!--\n_syntax: ofSaveFrame(bUseViewport = false)_\n_name: ofSaveFrame_\n_returns: void_\n_returns_description: _\n_parameters: bool bUseViewport=false_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSaves the current frame as a PNG image.\n\nThe PNG image will be named according to an internal counter in sequence.\nThe count will be restarted each time the program is restarted.\n\n\n**Parameters:**\n\nbUseViewport Set to true if the current viewport should be used.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSaveScreen(&filename)\n\n<!--\n_syntax: ofSaveScreen(&filename)_\n_name: ofSaveScreen_\n_returns: void_\n_returns_description: _\n_parameters: const string &filename_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\section Frame Saving\nSaves the current screen image to a file on disk.\n\nExample:\n~~~~{.cpp}\n\t\tofSaveScreen(\"screen.png\"); // Will save screen.png in the /data folder.\n~~~~\n\nThe output file type will be deduced from the given file name.\n\n\n**Parameters:**\n\nfilename The image output file.\n\n\n\n\n\n_description: _\n\nSaves the current screen image into a given file name (string filename).\nExample:\n~~~~{.cpp}\n\nstring filename;\nfilename = \"screen1.png\";\nofSaveScreen(filename);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSaveViewport(&filename)\n\n<!--\n_syntax: ofSaveViewport(&filename)_\n_name: ofSaveViewport_\n_returns: void_\n_returns_description: _\n_parameters: const string &filename_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSaves the current viewport as an image.\n\nThe output file type will be deduced from the given file name.\n\n\n**Parameters:**\n\nfilename The image output file.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSetDataPathRoot(&root)\n\n<!--\n_syntax: ofSetDataPathRoot(&root)_\n_name: ofSetDataPathRoot_\n_returns: void_\n_returns_description: _\n_parameters: const filesystem::path &root_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the relative path to the data/ folder from the executable.\n\nThis method can be useful when users want to embed the data as a resource\nfolder within an *.app bundle on OSX or perhaps work from a shared data\nfolder in the user's Documents directory.\n\n\n**Warning**: The provided path must have a trailing slash (/).\n\n**Parameters:**\n\nroot The path to the data/ folder relative to the app executable.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSleepMillis(millis)\n\n<!--\n_syntax: ofSleepMillis(millis)_\n_name: ofSleepMillis_\n_returns: void_\n_returns_description: _\n_parameters: int millis_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSleeps the current thread for the specified amount of milliseconds.\n\n**Parameters:**\n\nmillis The number of millseconds to sleep.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSort(&values)\n\n<!--\n_syntax: ofSort(&values)_\n_name: ofSort_\n_returns: void_\n_returns_description: _\n_parameters: int &values_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSort a vector of values into ascending order.\n\nThe elements are compared using operator< for the first version.\nEquivalent elements are not guaranteed to keep their original relative\norder.\n\n\\tparam T the type contained by the vector.\n\n**Parameters:**\n\nvalues The vector of values to be sorted.\n\n**See also**: http://www.cplusplus.com/reference/algorithm/sort/\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofSort(&values, compare)\n\n<!--\n_syntax: ofSort(&values, compare)_\n_name: ofSort_\n_returns: void_\n_returns_description: _\n_parameters: int &values, BoolFunction compare_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSort a vector of values into an order defined by a comparator.\n\nExample of a custom function to sort descending of integers:\n\n~~~~{.cpp}\nbool sortDescending(int i, int j)\n{\n    return (j < i);\n}\n~~~~\n\nThis binary function must accept two elements in the range as arguments and\nreturn a value convertible to bool. The value returned indicates whether the\nelement passed as first argument is considered to go before the second in\nthe specific strict weak ordering it defines.  The function shall not modify\nany of its arguments.  This can either be a function pointer or a function\nobject.\n\nTo call the function, one might use:\n\n~~~~{.cpp}\nstd::vector<int> myInts;\n\n// Fill the vector with integers.\nfor (int i = 0; i < 10; ++i)\n{\n    myInts.push_back(i);\n}\n\nofSort(myInts, sortDescending);\n~~~~\n\nThe resulting vector will contain the following values:\n\n   9, 8, 7, 6, 5, 4, 3, 2, 1, 0.\n\n\\tparam T the type contained by the vector.\n\n**Parameters:**\n\nvalues The vector of values to be sorted.\n\ncompare The comparison function.\n\n**See also**: http://www.cplusplus.com/reference/algorithm/sort/\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofSplitString()\n\n<!--\n_syntax: ofSplitString()_\n_name: ofSplitString_\n_returns: int_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\section String Manipulation\nSplits a string using a delimiter.\n\nofSplitString splits a string and returns the collection of string\ntokens inside of a std::vector<std::string>.\n\nA useful application is to use delimiter `\" \"`:\n\n~~~~{.cpp}\nresult = ofSplitString(\"of rocks\", \" \");\n// result[0] = \"of\"\n// result[1] = \"rocks\"\n~~~~\n\nLike this a big string can be \"cut\" and turned it into a collection of\nwords. The user can also ignore empty tokens.  Empty tokens occur when a\nthere are multiple delimiters in a row (e.g. \"of,rocks,,!\").  The user can\nalso \"trim\" the tokens. This will remove whitespace from before and after\neach token.  This might be useful when a delimted string is padded with\nwith spaces (e.g. \"of    ,   rocks   ,!\").\n\n\n**Parameters:**\n\nsource The string to split.\n\ndelimiter The delimiter string.\n\nignoreEmpty Set to true to remove empty tokens.\n\ntrim Set to true to trim the resulting tokens.\n\n**Returns**: A vector of strings split with the delimiter.\n\n\n\n\n\n_description: _\n\nSplits source using delimiter and returns the separate tokens. In modern versions of openFrameworks, delimiter can be a multi-character string. In older versions of openFrameworks, delimiter was interpreted as multiple single-character delimiters.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofStringReplace(&input, &searchStr, &replaceStr)\n\n<!--\n_syntax: ofStringReplace(&input, &searchStr, &replaceStr)_\n_name: ofStringReplace_\n_returns: void_\n_returns_description: _\n_parameters: string &input, const string &searchStr, const string &replaceStr_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReplace all occurrences of a string with another string.\n\\note The input string is passed by reference, so it will be modified.\n\n**Parameters:**\n\ninput The string to run the replacement on.\n\nsearchStr The string to be replaced.\n\nreplaceStr The string to put in place.\n\n\n\n\n\n_description: _\n\nSearches input for instances of searchStr and replaces them with replaceStr.\n\n~~~~{.cpp}\nstring message = \"hello, world!\";\nofStringReplace(message,\"hello\",\"goodbye\");\nofLog() << message; // outputs \"goodbye, world!\"\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t ofStringTimesInString(&haystack, &needle)\n\n<!--\n_syntax: ofStringTimesInString(&haystack, &needle)_\n_name: ofStringTimesInString_\n_returns: size_t_\n_returns_description: _\n_parameters: const string &haystack, const string &needle_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck how many times a string contains another string.\n\n**Parameters:**\n\nhaystack The string to check for occurrence in .\n\nneedle The string to check for.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofSystem(&command)\n\n<!--\n_syntax: ofSystem(&command)_\n_name: ofSystem_\n_returns: string_\n_returns_description: _\n_parameters: const string &command_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nExecutes a system command. Similar to run a command in terminal.\n\\note Will block until the executed program/command has finished.\n\n**Returns**: the system command output as string.\n\n\n\n\n\n_description: _\n\nExecutes an application or a system command and returns its output as string. Will block until the executed program/command has finished.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T ofTo(&str)\n\n<!--\n_syntax: ofTo(&str)_\n_name: ofTo_\n_returns: T_\n_returns_description: _\n_parameters: const string &str_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToBinary(&value)\n\n<!--\n_syntax: ofToBinary(&value)_\n_name: ofToBinary_\n_returns: string_\n_returns_description: _\n_parameters: const T &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts any datatype value to a string of only 1s and 0s.\n\nThe corresponding string of 1s and 0s corresponds to the way value is stored\nin memory.\n\n\\tparam T The data type of the value to convert to a binary string.\n\n**Parameters:**\n\nvalue The data to convert to a binary string.\n\n**Returns**: a binary string.\n\n\n\n\n\n_description: _\n\nConverts any datatype value to a string of only 1s and 0s corresponding to the way value is stored in memory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToBinary(&value)\n\n<!--\n_syntax: ofToBinary(&value)_\n_name: ofToBinary_\n_returns: string_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts a string value to a string of only 1s and 0s.\n\nThe corresponding string of 1s and 0s corresponds to the way value is stored\nin memory.\n\n\n**Parameters:**\n\nvalue The string to convert to a binary string.\n\n**Returns**: a binary string.\n\n\n\n\n\n_description: _\n\nConverts a string value to a string of only 1s and 0s corresponding to the way value is stored in memory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToBinary(*value)\n\n<!--\n_syntax: ofToBinary(*value)_\n_name: ofToBinary_\n_returns: string_\n_returns_description: _\n_parameters: const char *value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts a c-style string to a string of only 1s and 0s.\n\nThe corresponding string of 1s and 0s corresponds to the way value is stored\nin memory.\n\n\n**Parameters:**\n\nvalue The c-style string to convert to a binary string.\n\n**Returns**: a binary string.\n\n\n\n\n\n_description: _\n\nConverts any C-style string value to a string of only 1s and 0s corresponding to the way value is stored in memory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool ofToBool(&boolString)\n\n<!--\n_syntax: ofToBool(&boolString)_\n_name: ofToBool_\n_returns: bool_\n_returns_description: _\n_parameters: const string &boolString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string to a boolean.\n\nConverts a std::string representation of a boolean (e.g., `\"TRUE\"`) to an\nactual `bool` using a case-insensitive comparison against the words `\"true\"`\nand `\"false\"`.\n\n\n**Parameters:**\n\nboolString The string representation of the boolean.\n\n**Returns**: the boolean represented by the string or 0 on failure.\n\n\n\n\n\n_description: _\n\nConverts a string representation boolString (e.g., \"TRUE\") to an actual bool using a case-insensitive comparison against the words \"true\" and \"false\".\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###char ofToChar(&charString)\n\n<!--\n_syntax: ofToChar(&charString)_\n_name: ofToChar_\n_returns: char_\n_returns_description: _\n_parameters: const string &charString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string representation of a char to a actual char.\n\nConverts a string representation of a single char (e.g., `\"c\"`) to an\nactual `char`.\n\n\\note Multi-byte chars and multi-char strings are not supported.\n\n\n**Parameters:**\n\ncharString The char string to convert.\n\n**Returns**: The string as a char or 0 on failure.\n\n\n\n\n\n_description: _\n\nConverts a string representation of a single char (e.g., \" c \") to an actual char.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToDataPath(&path, absolute = false)\n\n<!--\n_syntax: ofToDataPath(&path, absolute = false)_\n_name: ofToDataPath_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &path, bool absolute=false_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMake a path relative to the location of the data/ folder.\n\nThis funtion returns path unchanged if ofDisableDataPath() was called first.\n\nBy default, a relative path is returned. Users requiring absolute paths for\n(e.g. for non-openFrameworks functions), can specify that an absolute path\nbe returned.\n\n\n**Parameters:**\n\npath The path to make relative to the data/ folder.\n\nabsolute Set to true to return an absolute path.\n\n**Returns**: the new path, unless paths were disabled with ofDisableDataPath().\n\n\n\n\n\n_description: _\n\nopenFrameworks now treats all files in the data/ folder as being at the same level as your app. When a file is loaded using openFrameworks classes (like ofVideoPlayer) the file path is run through this function to turn it into a relative path for the executible. As windows, mac and linux all have different relative paths, it is important to use this function if you have written your own class or addon for openFrameworks and you wish to be able to load files from the data/ folder.\n\nThe optional parameter makeAbsolute, if set to true (false by default) returns the generated path as an absolute path starting from the root of your filesystem instead of from the folder your application is run from.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###double ofToDouble(&doubleString)\n\n<!--\n_syntax: ofToDouble(&doubleString)_\n_name: ofToDouble_\n_returns: double_\n_returns_description: _\n_parameters: const string &doubleString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string to a double.\n\nConverts a std::string representation of a double (e.g., `\"3.14\"`) to an\nactual `double`.\n\n\n**Parameters:**\n\ndoubleString The string representation of the double.\n\n**Returns**: the double represented by the string or 0 on failure.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float ofToFloat(&floatString)\n\n<!--\n_syntax: ofToFloat(&floatString)_\n_name: ofToFloat_\n_returns: float_\n_returns_description: _\n_parameters: const string &floatString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string to a float.\n\nConverts a std::string representation of a float (e.g., `\"3.14\"`) to an\nactual `float`.\n\n\n**Parameters:**\n\nfloatString string representation of the float.\n\n**Returns**: the float represented by the string or 0 on failure.\n\n\n\n\n\n_description: _\n\nConverts a string representation floatString (e.g., \"3.14\") to an actual float.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToHex(&value)\n\n<!--\n_syntax: ofToHex(&value)_\n_name: ofToHex_\n_returns: string_\n_returns_description: _\n_parameters: const T &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts any value to its equivalent hexadecimal representation.\n\nThe hexadecimal representation corresponds to the way a number is stored in\nmemory.\n\n\\tparam T The data type of the value to convert to a hexadecimal string.\n\n**Parameters:**\n\nvalue The value to convert to a hexadecimal string.\n\n**Returns**: the hexadecimal string representation of the value.\n\n\n\n\n\n_description: _\n\nConverts any value to its equivalent hexadecimal representation corresponding to the way it is stored in memory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToHex(&value)\n\n<!--\n_syntax: ofToHex(&value)_\n_name: ofToHex_\n_returns: string_\n_returns_description: _\n_parameters: const string &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string to a hexadecimal string.\n\nConverts a string (e.g., `\"abc\"`) to its equivalent hexadecimal\nrepresentation (e.g., `\"616263\"`).\n\n\n**Parameters:**\n\nvalue The value to convert to a hexadecimal string.\n\n**Returns**: a hexadecimal string.\n\n\n\n\n\n_description: _\n\nConverts a string (e.g., \"abc\") to its equivalent hexadecimal representation (e.g., \"616263\").\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToHex(*value)\n\n<!--\n_syntax: ofToHex(*value)_\n_name: ofToHex_\n_returns: string_\n_returns_description: _\n_parameters: const char *value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a c-style string to a hexadecimal string.\n\nConverts a string (e.g., `\"abc\"`) to its equivalent hexadecimal\nrepresentation (e.g., `\"616263\"`).\n\n\n**Parameters:**\n\nvalue The value to convert to a hexadecimal string.\n\n**Returns**: a hexadecimal string.\n\n\n\n\n\n_description: _\n\nConverts a c-style string (e.g., \"abc\") to its equivalent hexadecimal representation (e.g., \"616263\").\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofToInt(&intString)\n\n<!--\n_syntax: ofToInt(&intString)_\n_name: ofToInt_\n_returns: int_\n_returns_description: _\n_parameters: const string &intString_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\section Number Conversion\nConvert a string to an integer.\n\nConverts a `std::string` representation of an int (e.g., `\"3\"`) to an actual\n`int`.\n\n\n**Parameters:**\n\nintString The string representation of the integer.\n\n**Returns**: the integer represented by the string or 0 on failure.\n\n\n\n\n\n_description: _\n\nConverts a string representation of an int (e.g., \"2012\") to an actual int.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int64_t ofToInt64(&intString)\n\n<!--\n_syntax: ofToInt64(&intString)_\n_name: ofToInt64_\n_returns: int64_t_\n_returns_description: _\n_parameters: const string &intString_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a string to a int64_t.\n\nConverts a `std::string` representation of a long integer\n(e.g., `\"9223372036854775807\"`) to an actual `int64_t`.\n\n\n**Parameters:**\n\nintString The string representation of the long integer.\n\n**Returns**: the long integer represented by the string or 0 on failure.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToLower(&src, &locale)\n\n<!--\n_syntax: ofToLower(&src, &locale)_\n_name: ofToLower_\n_returns: string_\n_returns_description: _\n_parameters: const string &src, const string &locale_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts all characters in a string to lowercase.\n\nThis function expects a UTF-8 encoded multi-byte string to be passed.\nResulting strings will be returned as UTF-8 encoded multi-byte strings.\n\n~~~~{.cpp}\n    std::string enthusiasticGreeting = \"HELLO, WORLD!\";\n    std::string politeGreeting = ofToLower(enthusiasticGreeting);\n    ofLog() << politeGreeting; // Returns \"hello, world!\"\n~~~~\n\n\n**Parameters:**\n\nsrc The UTF-8 encoded string to convert to lowercase.\n\n**Returns**: the UTF-8 encoded string as all lowercase characters.\n\n\n\n\n\n_description: _\n\nConverts all characters in the string src to lowercase.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToString(&value)\n\n<!--\n_syntax: ofToString(&value)_\n_name: ofToString_\n_returns: string_\n_returns_description: _\n_parameters: const T &value_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\section String Conversion\nConvert a value to a string.\n\nofToString does its best to convert any value to a string. If the data type\nimplements a stream << operator, then it will be converted.\n\nExample:\n~~~~{.cpp}\n\t\tstd::string str = \"framerate is \";\n\t\tstr += ofToString(ofGetFrameRate()) + \" fps\";\n\t\t// The string now containes something like \"framerate is 60 fps\".\n~~~~\n\n\\tparam T The data type of the value to convert to a string.\n\n**Parameters:**\n\nvalue The value to convert to a string.\n\n**Returns**: A string representing the value or an empty string on failure.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToString(&value, precision)\n\n<!--\n_syntax: ofToString(&value, precision)_\n_name: ofToString_\n_returns: string_\n_returns_description: _\n_parameters: const T &value, int precision_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a value to a string with a specific precision.\n\nLike sprintf \"%4f\" format, in this example precision=4\n\n\\tparam T The data type of the value to convert to a string.\n\n**Parameters:**\n\nvalue The value to convert to a string.\n\nprecision The precision to use when converting to a string.\n\n**Returns**: The string representation of the value.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToString(&value, precision, width, fill)\n\n<!--\n_syntax: ofToString(&value, precision, width, fill)_\n_name: ofToString_\n_returns: string_\n_returns_description: _\n_parameters: const T &value, int precision, int width, char fill_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a value to a string with a specific precision, width and filll\n\nLike sprintf \"%04.2d\" or \"%04.2f\" format, in this example precision=2, width=4, fill='0'\n\n\\tparam T The data type of the value to convert to a string.\n\n**Parameters:**\n\nvalue The value to convert to a string.\n\nprecision The precision to use when converting to a string.\n\nwidth The width of the value to use when converting to a string.\n\nfill The character to use when padding the converted string.\n\n**Returns**: The string representation of the value.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToString(&value, width, fill)\n\n<!--\n_syntax: ofToString(&value, width, fill)_\n_name: ofToString_\n_returns: string_\n_returns_description: _\n_parameters: const T &value, int width, char fill_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a value to a string with a specific width and fill\n\nLike sprintf \"% 4d\" or \"% 4f\" format, in this example width=4, fill=' '\n\n\\tparam T The data type of the value to convert to a string.\n\n**Parameters:**\n\nvalue The value to convert to a string.\n\nwidth The width of the value to use when converting to a string.\n\nfill The character to use when padding the converted string.\n\n**Returns**: The string representation of the value.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToString(&values)\n\n<!--\n_syntax: ofToString(&values)_\n_name: ofToString_\n_returns: string_\n_returns_description: _\n_parameters: const int &values_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a vector of values to a comma-delimited string.\n\nThis method will take any vector of values and output a list of the values\nas a comma-delimited string.\n\n\\tparam T The data type held by the vector.\n\n**Parameters:**\n\nvalues The vector of values to be converted to a string.\n\n**Returns**: a comma-delimited string representation of the intput values.\n\n\n\n\n\n_description: _\n\nConverts a vector of values to a single string representation.\n~~~~{.cpp}\nvector<int> vec;\nvec.push_back(1);\nvec.push_back(2);\nvec.push_back(3);\ncout << ofToString(vec) << endl; // prints \"{1, 2, 3}\"\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofToUpper(&src, &locale)\n\n<!--\n_syntax: ofToUpper(&src, &locale)_\n_name: ofToUpper_\n_returns: string_\n_returns_description: _\n_parameters: const string &src, const string &locale_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts all characters in the string to uppercase.\n\nThis function expects a UTF-8 encoded multi-byte string to be passed.\nResulting strings will be returned as UTF-8 encoded multi-byte strings.\n\n~~~~{.cpp}\n    std::string politeGreeting = \"Hello, World!\";\n    std::string enthusiasticGreeting = ofToUpper(politeGreeting);\n    ofLog() << enthusiasticGreeting; // Returns \"HELLO, WORLD!\"\n~~~~\n\n\n**Parameters:**\n\nsrc The UTF-8 encoded string to convert to uppercase.\n\n**Returns**: the UTF-8 encoded string as all uppercase characters.\n\n\n\n\n\n_description: _\n\nConverts all characters in the string src to uppercase.\n\n~~~~{.cpp}\n    string politeGreeting = \"Hello, World!\";\n    string enthusiasticGreeting = ofToUpper(politeGreeting);\n    ofLog() << enthusiasticGreeting; // returns \"HELLO, WORLD!\"\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofTrim(&src, &locale)\n\n<!--\n_syntax: ofTrim(&src, &locale)_\n_name: ofTrim_\n_returns: string_\n_returns_description: _\n_parameters: const string &src, const string &locale_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofTrimBack(&src, &locale)\n\n<!--\n_syntax: ofTrimBack(&src, &locale)_\n_name: ofTrimBack_\n_returns: string_\n_returns_description: _\n_parameters: const string &src, const string &locale_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofTrimFront(&src, &locale)\n\n<!--\n_syntax: ofTrimFront(&src, &locale)_\n_name: ofTrimFront_\n_returns: string_\n_returns_description: _\n_parameters: const string &src, const string &locale_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofUTF8Append(&str, utf8)\n\n<!--\n_syntax: ofUTF8Append(&str, utf8)_\n_name: ofUTF8Append_\n_returns: void_\n_returns_description: _\n_parameters: string &str, uint32_t utf8_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofUTF8Erase(&str, start, len)\n\n<!--\n_syntax: ofUTF8Erase(&str, start, len)_\n_name: ofUTF8Erase_\n_returns: void_\n_returns_description: _\n_parameters: string &str, size_t start, size_t len_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofUTF8Insert(&str, pos, utf8)\n\n<!--\n_syntax: ofUTF8Insert(&str, pos, utf8)_\n_name: ofUTF8Insert_\n_returns: void_\n_returns_description: _\n_parameters: string &str, size_t pos, uint32_t utf8_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t ofUTF8Length(&str)\n\n<!--\n_syntax: ofUTF8Length(&str)_\n_name: ofUTF8Length_\n_returns: size_t_\n_returns_description: _\n_parameters: const string &str_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofUTF8Substring(&str, start, len)\n\n<!--\n_syntax: ofUTF8Substring(&str, start, len)_\n_name: ofUTF8Substring_\n_returns: string_\n_returns_description: _\n_parameters: const string &str, size_t start, size_t len_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofUTF8ToString(utf8)\n\n<!--\n_syntax: ofUTF8ToString(utf8)_\n_name: ofUTF8ToString_\n_returns: string_\n_returns_description: _\n_parameters: uint32_t utf8_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofVAArgsToString(*format)\n\n<!--\n_syntax: ofVAArgsToString(*format)_\n_name: ofVAArgsToString_\n_returns: string_\n_returns_description: _\n_parameters: const char *format_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a variable length argument to a string.\n\n**Parameters:**\n\nformat a printf-style format string.\n\n**Returns**: A string representation of the argument list.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string ofVAArgsToString(*format, args)\n\n<!--\n_syntax: ofVAArgsToString(*format, args)_\n_name: ofVAArgsToString_\n_returns: string_\n_returns_description: _\n_parameters: const char *format, va_list args_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a variable length argument to a string.\n\n**Parameters:**\n\nformat A printf-style format string.\n\nargs A variable argument list.\n\n**Returns**: A string representation of the argument list.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}