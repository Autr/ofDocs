{"data":[{"page":{"entry":{"name":"ofLog","filename":"ofLog.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/utils/ofLog.markdown","path":"/documentation/utils/ofLog","route":"/documentation/utils/ofLog.markdown","dir":"../ofSite/documentation/utils","ext":"markdown","type":"page","id":2465,"parent":2446,"breadcrumbs":[2446,1968],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>ofLog provides an interface for writing text output from your app. It's basically a more useful version of cout or printf where output can be filtered and written to the console or to a file.</p>\n<p>Sometimes you want to be able to see when something has happened inside the code, but don't need to draw something visually. Oftentimes it's more then enough to print out the state of a few variables when debugging. Other times you need to know if a crash happened while your app was running somewhere, so you log messages and variables to a file you can read after the program crashes.</p>\n<p>####Log Levels</p>\n<p>You can also set the logging level so only messages above a certain priority are shown. This is useful if you want see lots of messages when debugging, but then set a higher level so only warnings and errors appear for users. See <a href=\"./ofLog.html#functions\">ofSetLogLevel(logLevel)</a> for more detail.</p>\n<p>Log levels are (in order of priority):</p>\n<pre><code>OF_LOG_VERBOSE\nOF_LOG_NOTICE\nOF_LOG_WARNING\nOF_LOG_ERROR\nOF_LOG_FATAL_ERROR\nOF_LOG_SILENT\n</code></pre>\n<p><strong>Note</strong>: OF_LOG_SILENT is a special value which disables <strong>all</strong> messages.</p>\n<p>####Usage</p>\n<p>There are 2 ways you can use ofLog:</p>\n<p>####Functional: as a function taking a message</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// send a single string message, setting the log level</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the number is \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// the legacy printf style</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the number is %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n</code></pre>\n<p>See <a href=\"./ofLog.html#methods\">ofLog(logLevel, &amp;message) &amp; ofLog(logLevel, format*, ...)</a> for more details.</p>\n<p>####Stream: as a stream using the &lt;&lt; stream operator</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// the stream style, setting the log level</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"the number is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// this is the same as the last line, but only sends at log level notice</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"the number is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// there are also log level specific stream objects,</span>\n<span class=\"token comment\" spellcheck=\"true\">// one for each level except OF_LOG_SILENT</span>\n<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a verbose print\"</span>\n<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a regular notice print\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"uh oh, a warning\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"oh no, an error occurred!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLogFatalError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"accckkk, a fatal error!!\"</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p><strong>Note</strong>: The log level specific stream objects also take a string argument for the &quot;module&quot;. A module is a string that is added to the beginning of the log line and can be used to separate logging messages by setting an independent log level for <strong>that module only</strong>. This module-specific log level has no effect on other modules. See <a href=\"./ofLog.html#functions\">ofSetLogLevel(module, logLevel)</a> for more detail.</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// log to a module called \"Hello\"</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a warning print\"</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p><strong>Warning</strong>: It is important to understand that the log level specific stream objects take the module name as an argument and the log messages via the &lt;&lt; operator. Putting your message as a string argument inside the parentheses uses that message as a <em>module</em> and so nothing will be printed:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// this prints a warning message</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a warning print\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// !!! this does not print a message as the string \"a warning print\" is the module argument !!!</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a warning print\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// this prints a warning message to the \"Hello\" module</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a warning print\"</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>####Log Message Redirection</p>\n<p>Last, it's useful to be able to record log messages to a file or send them to a custom destination. For log redirection see ofLogToFile(), ofLogToConsole(), &amp; ofSetLoggerChannel() in the <a href=\"./ofLog.html#functions\">ofLog functions</a>.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"_log(level, &module, &message)","name":"_log","returns":"void","returns_description":null,"parameters":"ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>message","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"<p>Print a log line.</p>\n<p><strong>Parameters:</strong></p>\n<p>level The log level.</p>\n<p>module The target module.</p>\n<p>message The log message.</p>\n","desc":"","counter":0},{"short":"","desc":""},{"syntax":"checkLog(level, &module)","name":"checkLog","returns":"bool","returns_description":null,"parameters":"ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>module","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"<p>Determine if the given module is active at the given log level.</p>\n<p><strong>Parameters:</strong></p>\n<p>level The log level.</p>\n<p>module The target module.</p>\n<p><strong>Returns</strong>: true if the given module is active at the given log level.</p>\n","desc":"","counter":0},{"short":"<p>Get the current logging channel.</p>\n","desc":""},{"syntax":"getPadding()","name":"getPadding","returns":"string &","returns_description":null,"parameters":null,"access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofLog(&)","name":"ofLog","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofLog <span class=\"token operator\">&amp;</span>","access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"","desc":"","counter":3},{"syntax":"ofLog()","name":"ofLog","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Start logging on notice level.</p>\n<p>ofLog provides a streaming log interface by accepting variables via\nthe <code>std::ostream</code> operator <code>&lt;&lt;</code> similar to <code>std::cout</code> and\n<code>std::cerr</code>.</p>\n<p>It builds a string and logs it when the stream is finished. A\nnewline is printed automatically and all the stream controls\n(<code>std::endl</code>, <code>std::flush</code>, <code>std::hex</code>, etc)\nwork normally.</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// Converts primitive types (int, float, etc) to strings automatically.</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>The log level is <code>OF_LOG_NOTICE</code> by default.</p>\n","desc":"<p>ofLog provides a streaming log interface by accepting variables via the ostream operator &lt;&lt; similar to cout and cerr.</p>\n<p>It builds a string and logs it when the stream is finished. A newline is printed automatically and all the stream controls (endl, flush, hex, etc) work normally.</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// converts incoming primitive types (int, float, etc) to strings automatically</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>The log level is explicitly OF_LOG_NOTICE.</p>\n<p>See <a href=\"./ofLog.html#functions\">ofSetLogLevel(logLevel)</a> for more info on log levels.</p>\n"},{"syntax":"ofLog(level)","name":"ofLog","returns":null,"returns_description":null,"parameters":"ofLogLevel level","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Start logging on a specific ofLogLevel.</p>\n<p>Example:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// Set the log level.</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>You can use the derived convenience classes as an alternative for specific log levels:</p>\n<pre><code>ofLogVerbose()\nofLogNotice()\nofLogWarning()\nofLogError()\nofLogFatalError()\n</code></pre>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// Set the log level.</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// This is the same as above.</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>level The ofLogLevel for this log message.</p>\n","desc":"<p>The same as the ofLog() stream interface, except it accepts a log level.</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// set the log level</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>You can use the derived convenience classes as an alternative for specific log levels:</p>\n<pre><code>ofLogVerbose()\nofLogNotice()\nofLogWarning()\nofLogError()\nofLogFatalError()\n</code></pre>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// set the log level</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// this is the same as above</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>See <a href=\"./ofLog.html#functions\">ofSetLogLevel()</a> for more info on log levels.</p>\n"},{"syntax":"ofLog(level, &message)","name":"ofLog","returns":null,"returns_description":null,"parameters":"ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>message","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Log a string at a specific log level.</p>\n<p>Supply the logging message as a parameter to the function\ninstead of as a stream.</p>\n<p>The string message can be concatenated using the\nofToString(const T&amp; value) conversion function:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// Build a single string message.</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the number is \"</span>\n<span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" and I have a float too \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">123.45f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>level The ofLogLevel for this log message.</p>\n<p>message The log message.</p>\n","desc":"<p>Logs a string at a specific log level.</p>\n<p>The string message can be concatenated using the ofToString() conversion function in <a href=\"./ofUtils.html#functions\">ofUtils</a>:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// build a single string message</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the number is \"</span> \n<span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" and I have a float too \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">123.45f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>See <a href=\"./ofLog.html#functions\">ofSetLogLevel(logLevel)</a> for more info on log levels.</p>\n"},{"syntax":"operator<<(&value)","name":"operator<<","returns":"ofLog &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"<p>Define flexible stream operator.</p>\n<p>This allows the class to use the &lt;&lt; std::ostream to read data of\nalmost any type.</p>\n<p>\\tparam T the data type to be streamed.</p>\n<p><strong>Parameters:</strong></p>\n<p>value the data to be streamed.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n","desc":"","counter":1},{"syntax":"operator<<(func)","name":"operator<<","returns":"ofLog &","returns_description":null,"parameters":"ostream <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ostream <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> func","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Define flexible stream operator.</p>\n<p>This allows the class to use the &lt;&lt; std::ostream to catch function\npointers such as std::endl and std::hex.</p>\n<p><strong>Parameters:</strong></p>\n<p>func A function pointer that takes a std::ostream as an argument.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n","desc":""},{"syntax":"operator=(&from)","name":"operator=","returns":"ofLog &","returns_description":null,"parameters":"ofLog <span class=\"token operator\">&amp;</span>from","access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setAutoSpace(autoSpace)","name":"setAutoSpace","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> autoSpace","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Let the logger automaticly add spaces between messages.</p>\n<p>Default is <code>false</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>autoSpace Set to true to add spaces between messages</p>\n","desc":"","counter":0},{"short":"<p>Set the logging channel destinations for messages.</p>\n<p>This can be used to output to files instead of stdout.</p>\n<p><strong>See also</strong>: ofFileLoggerChannel ofConsoleLoggerChannel</p>\n<p><strong>Parameters:</strong></p>\n<p>channel The channel to log to.</p>\n","desc":"<p>Sets the logging channel that receives log messages. This is analogous to ofSetLoggerChannel().</p>\n<p>See <a href=\"./ofLog.html#functions\">ofSetLoggerChannel()</a> for more detail.</p>\n"},{"syntax":"~ofLog()","name":"~ofLog","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"<p>Destroy the ofLog.</p>\n<p>This destructor does the actual printing via std::ostream.</p>\n","desc":"","counter":0},{"name":"bAutoSpace","type":"bool","access":"private","version_started":"0071","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; Should space be added between messages?</p>\n","desc":""},{"name":"bPrinted","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"False","constant":"True","advanced":"False","short":"<p>&lt; Has the message been printed in the constructor?</p>\n","desc":""},{"name":"level","type":"ofLogLevel","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"False","constant":"True","advanced":"False","short":"<p>&lt; Log level.</p>\n","desc":""},{"name":"message","type":"std","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"False","constant":"False","advanced":"False","short":"<p>&lt; Temporary buffer.</p>\n","desc":""},{"name":"module","type":"string","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"False","constant":"True","advanced":"False","short":"<p>&lt; The destination module for this message.</p>\n","desc":""},{}],"document":"<p>#class ofLog</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>ofLog provides an interface for writing text output from your app. It's basically a more useful version of cout or printf where output can be filtered and written to the console or to a file.</p>\n<p>Sometimes you want to be able to see when something has happened inside the code, but don't need to draw something visually. Oftentimes it's more then enough to print out the state of a few variables when debugging. Other times you need to know if a crash happened while your app was running somewhere, so you log messages and variables to a file you can read after the program crashes.</p>\n<p>####Log Levels</p>\n<p>You can also set the logging level so only messages above a certain priority are shown. This is useful if you want see lots of messages when debugging, but then set a higher level so only warnings and errors appear for users. See <a href=\"./ofLog.html#functions\">ofSetLogLevel(logLevel)</a> for more detail.</p>\n<p>Log levels are (in order of priority):</p>\n<pre><code>OF_LOG_VERBOSE\nOF_LOG_NOTICE\nOF_LOG_WARNING\nOF_LOG_ERROR\nOF_LOG_FATAL_ERROR\nOF_LOG_SILENT\n</code></pre>\n<p><strong>Note</strong>: OF_LOG_SILENT is a special value which disables <strong>all</strong> messages.</p>\n<p>####Usage</p>\n<p>There are 2 ways you can use ofLog:</p>\n<p>####Functional: as a function taking a message</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// send a single string message, setting the log level</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the number is \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// the legacy printf style</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the number is %d\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n</code></pre>\n<p>See <a href=\"./ofLog.html#methods\">ofLog(logLevel, &amp;message) &amp; ofLog(logLevel, format*, ...)</a> for more details.</p>\n<p>####Stream: as a stream using the &lt;&lt; stream operator</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// the stream style, setting the log level</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"the number is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// this is the same as the last line, but only sends at log level notice</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"the number is \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// there are also log level specific stream objects,</span>\n<span class=\"token comment\" spellcheck=\"true\">// one for each level except OF_LOG_SILENT</span>\n<span class=\"token function\">ofLogVerbose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a verbose print\"</span>\n<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a regular notice print\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"uh oh, a warning\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"oh no, an error occurred!\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofLogFatalError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"accckkk, a fatal error!!\"</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p><strong>Note</strong>: The log level specific stream objects also take a string argument for the &quot;module&quot;. A module is a string that is added to the beginning of the log line and can be used to separate logging messages by setting an independent log level for <strong>that module only</strong>. This module-specific log level has no effect on other modules. See <a href=\"./ofLog.html#functions\">ofSetLogLevel(module, logLevel)</a> for more detail.</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// log to a module called \"Hello\"</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a warning print\"</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p><strong>Warning</strong>: It is important to understand that the log level specific stream objects take the module name as an argument and the log messages via the &lt;&lt; operator. Putting your message as a string argument inside the parentheses uses that message as a <em>module</em> and so nothing will be printed:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// this prints a warning message</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a warning print\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// !!! this does not print a message as the string \"a warning print\" is the module argument !!!</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a warning print\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// this prints a warning message to the \"Hello\" module</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a warning print\"</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>####Log Message Redirection</p>\n<p>Last, it's useful to be able to record log messages to a file or send them to a custom destination. For log redirection see ofLogToFile(), ofLogToConsole(), &amp; ofSetLoggerChannel() in the <a href=\"./ofLog.html#functions\">ofLog functions</a>.</p>\n<p>##Methods</p>\n<p>###void _log(level, &amp;module, &amp;message)</p>\n<!--\n_syntax: _log(level, &module, &message)_\n_name: _log_\n_returns: void_\n_returns_description: _\n_parameters: ofLogLevel level, const string &module, const string &message_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Print a log line.</p>\n<p><strong>Parameters:</strong></p>\n<p>level The log level.</p>\n<p>module The target module.</p>\n<p>message The log message.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###shared_ptr&lt; ofBaseLoggerChannel &gt; &amp; channel()</p>\n<!--\n_syntax: channel()_\n_name: channel_\n_returns: shared_ptr< ofBaseLoggerChannel > &_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool checkLog(level, &amp;module)</p>\n<!--\n_syntax: checkLog(level, &module)_\n_name: checkLog_\n_returns: bool_\n_returns_description: _\n_parameters: ofLogLevel level, const string &module_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Determine if the given module is active at the given log level.</p>\n<p><strong>Parameters:</strong></p>\n<p>level The log level.</p>\n<p>module The target module.</p>\n<p><strong>Returns</strong>: true if the given module is active at the given log level.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###shared_ptr&lt; ofBaseLoggerChannel &gt; getChannel()</p>\n<!--\n_syntax: getChannel()_\n_name: getChannel_\n_returns: shared_ptr< ofBaseLoggerChannel >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the current logging channel.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string &amp; getPadding()</p>\n<!--\n_syntax: getPadding()_\n_name: getPadding_\n_returns: string &_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofLog(&amp;)</h3>\n<!--\n_syntax: ofLog(&)_\n_name: ofLog_\n_returns: _\n_returns_description: _\n_parameters: const ofLog &_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofLog()</h3>\n<!--\n_syntax: ofLog()_\n_name: ofLog_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Start logging on notice level.</p>\n<p>ofLog provides a streaming log interface by accepting variables via\nthe <code>std::ostream</code> operator <code>&lt;&lt;</code> similar to <code>std::cout</code> and\n<code>std::cerr</code>.</p>\n<p>It builds a string and logs it when the stream is finished. A\nnewline is printed automatically and all the stream controls\n(<code>std::endl</code>, <code>std::flush</code>, <code>std::hex</code>, etc)\nwork normally.</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// Converts primitive types (int, float, etc) to strings automatically.</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>The log level is <code>OF_LOG_NOTICE</code> by default.</p>\n<p>_description: _</p>\n<p>ofLog provides a streaming log interface by accepting variables via the ostream operator &lt;&lt; similar to cout and cerr.</p>\n<p>It builds a string and logs it when the stream is finished. A newline is printed automatically and all the stream controls (endl, flush, hex, etc) work normally.</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// converts incoming primitive types (int, float, etc) to strings automatically</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>The log level is explicitly OF_LOG_NOTICE.</p>\n<p>See <a href=\"./ofLog.html#functions\">ofSetLogLevel(logLevel)</a> for more info on log levels.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofLog(level)</h3>\n<!--\n_syntax: ofLog(level)_\n_name: ofLog_\n_returns: _\n_returns_description: _\n_parameters: ofLogLevel level_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Start logging on a specific ofLogLevel.</p>\n<p>Example:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// Set the log level.</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>You can use the derived convenience classes as an alternative for specific log levels:</p>\n<pre><code>ofLogVerbose()\nofLogNotice()\nofLogWarning()\nofLogError()\nofLogFatalError()\n</code></pre>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// Set the log level.</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// This is the same as above.</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>level The ofLogLevel for this log message.</p>\n<p>_description: _</p>\n<p>The same as the ofLog() stream interface, except it accepts a log level.</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// set the log level</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>You can use the derived convenience classes as an alternative for specific log levels:</p>\n<pre><code>ofLogVerbose()\nofLogNotice()\nofLogWarning()\nofLogError()\nofLogFatalError()\n</code></pre>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// set the log level</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_WARNING<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// this is the same as above</span>\n<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"a string\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">100</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">20.234f</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>See <a href=\"./ofLog.html#functions\">ofSetLogLevel()</a> for more info on log levels.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofLog(level, &amp;message)</h3>\n<!--\n_syntax: ofLog(level, &message)_\n_name: ofLog_\n_returns: _\n_returns_description: _\n_parameters: ofLogLevel level, const string &message_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Log a string at a specific log level.</p>\n<p>Supply the logging message as a parameter to the function\ninstead of as a stream.</p>\n<p>The string message can be concatenated using the\nofToString(const T&amp; value) conversion function:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// Build a single string message.</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the number is \"</span>\n<span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" and I have a float too \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">123.45f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>level The ofLogLevel for this log message.</p>\n<p>message The log message.</p>\n<p>_description: _</p>\n<p>Logs a string at a specific log level.</p>\n<p>The string message can be concatenated using the ofToString() conversion function in <a href=\"./ofUtils.html#functions\">ofUtils</a>:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// build a single string message</span>\n<span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_NOTICE<span class=\"token punctuation\">,</span> <span class=\"token string\">\"the number is \"</span> \n<span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" and I have a float too \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token number\">123.45f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>See <a href=\"./ofLog.html#functions\">ofSetLogLevel(logLevel)</a> for more info on log levels.</p>\n<!----------------------------------------------------------------------------->\n<p>###ofLog &amp; operator&lt;&lt;(&amp;value)</p>\n<!--\n_syntax: operator<<(&value)_\n_name: operator<<_\n_returns: ofLog &_\n_returns_description: _\n_parameters: const T &value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Define flexible stream operator.</p>\n<p>This allows the class to use the &lt;&lt; std::ostream to read data of\nalmost any type.</p>\n<p>\\tparam T the data type to be streamed.</p>\n<p><strong>Parameters:</strong></p>\n<p>value the data to be streamed.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofLog &amp; operator&lt;&lt;(func)</p>\n<!--\n_syntax: operator<<(func)_\n_name: operator<<_\n_returns: ofLog &_\n_returns_description: _\n_parameters: ostream &(*)(ostream &) func_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Define flexible stream operator.</p>\n<p>This allows the class to use the &lt;&lt; std::ostream to catch function\npointers such as std::endl and std::hex.</p>\n<p><strong>Parameters:</strong></p>\n<p>func A function pointer that takes a std::ostream as an argument.</p>\n<p><strong>Returns</strong>: A reference to itself.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofLog &amp; operator=(&amp;from)</p>\n<!--\n_syntax: operator=(&from)_\n_name: operator=_\n_returns: ofLog &_\n_returns_description: _\n_parameters: ofLog &from_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setAutoSpace(autoSpace)</p>\n<!--\n_syntax: setAutoSpace(autoSpace)_\n_name: setAutoSpace_\n_returns: void_\n_returns_description: _\n_parameters: bool autoSpace_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Let the logger automaticly add spaces between messages.</p>\n<p>Default is <code>false</code>.</p>\n<p><strong>Parameters:</strong></p>\n<p>autoSpace Set to true to add spaces between messages</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setChannel(channel)</p>\n<!--\n_syntax: setChannel(channel)_\n_name: setChannel_\n_returns: void_\n_returns_description: _\n_parameters: shared_ptr< ofBaseLoggerChannel > channel_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the logging channel destinations for messages.</p>\n<p>This can be used to output to files instead of stdout.</p>\n<p><strong>See also</strong>: ofFileLoggerChannel ofConsoleLoggerChannel</p>\n<p><strong>Parameters:</strong></p>\n<p>channel The channel to log to.</p>\n<p>_description: _</p>\n<p>Sets the logging channel that receives log messages. This is analogous to ofSetLoggerChannel().</p>\n<p>See <a href=\"./ofLog.html#functions\">ofSetLoggerChannel()</a> for more detail.</p>\n<!----------------------------------------------------------------------------->\n<h3>~ofLog()</h3>\n<!--\n_syntax: ~ofLog()_\n_name: ~ofLog_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Destroy the ofLog.</p>\n<p>This destructor does the actual printing via std::ostream.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###bool bAutoSpace</p>\n<!--\n_name: bAutoSpace_\n_type: bool_\n_access: private_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>&lt; Should space be added between messages?</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool bPrinted</p>\n<!--\n_name: bPrinted_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: False_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>&lt; Has the message been printed in the constructor?</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofLogLevel level</p>\n<!--\n_name: level_\n_type: ofLogLevel_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: False_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>&lt; Log level.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###std message</p>\n<!--\n_name: message_\n_type: std_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: False_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>&lt; Temporary buffer.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string module</p>\n<!--\n_name: module_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: False_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>&lt; The destination module for this message.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofLog\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nofLog provides an interface for writing text output from your app. It's basically a more useful version of cout or printf where output can be filtered and written to the console or to a file. \n\nSometimes you want to be able to see when something has happened inside the code, but don't need to draw something visually. Oftentimes it's more then enough to print out the state of a few variables when debugging. Other times you need to know if a crash happened while your app was running somewhere, so you log messages and variables to a file you can read after the program crashes.\n\n####Log Levels\n\nYou can also set the logging level so only messages above a certain priority are shown. This is useful if you want see lots of messages when debugging, but then set a higher level so only warnings and errors appear for users. See [ofSetLogLevel(logLevel)](./ofLog.html#functions) for more detail.\n\nLog levels are (in order of priority):\n\n\tOF_LOG_VERBOSE\n\tOF_LOG_NOTICE\n\tOF_LOG_WARNING\n\tOF_LOG_ERROR\n\tOF_LOG_FATAL_ERROR\n\tOF_LOG_SILENT\n\n**Note**: OF_LOG_SILENT is a special value which disables **all** messages.\n\n####Usage\n\nThere are 2 ways you can use ofLog:\n\n####Functional: as a function taking a message\n\n~~~~{.cpp}\n\n// send a single string message, setting the log level\nofLog(OF_LOG_NOTICE, \"the number is \" + ofToString(10));\n\n// the legacy printf style\nofLog(OF_LOG_NOTICE, \"the number is %d\", 10); \n\n~~~~\n\nSee [ofLog(logLevel, &message) & ofLog(logLevel, format*, ...)](./ofLog.html#methods) for more details.\n\n####Stream: as a stream using the << stream operator\n\n~~~~{.cpp}\n\n// the stream style, setting the log level\nofLog(OF_LOG_NOTICE) << \"the number is \" << 10;\n\n// this is the same as the last line, but only sends at log level notice\nofLog() << \"the number is \" << 10;\n\n// there are also log level specific stream objects,\n// one for each level except OF_LOG_SILENT\nofLogVerbose() << \"a verbose print\"\nofLogNotice() << \"a regular notice print\";\nofLogWarning() << \"uh oh, a warning\";\nofLogError() << \"oh no, an error occurred!\";\nofLogFatalError() << \"accckkk, a fatal error!!\";\n\n~~~~\n\n**Note**: The log level specific stream objects also take a string argument for the \"module\". A module is a string that is added to the beginning of the log line and can be used to separate logging messages by setting an independent log level for **that module only**. This module-specific log level has no effect on other modules. See [ofSetLogLevel(module, logLevel)](./ofLog.html#functions) for more detail.\n\n~~~~{.cpp}\n\n// log to a module called \"Hello\"\nofLogWarning(\"Hello\") << \"a warning print\";\n\n~~~~\n\n**Warning**: It is important to understand that the log level specific stream objects take the module name as an argument and the log messages via the << operator. Putting your message as a string argument inside the parentheses uses that message as a *module* and so nothing will be printed:\n\n~~~~{.cpp}\n\n// this prints a warning message\nofLogWarning() << \"a warning print\";\n\n// !!! this does not print a message as the string \"a warning print\" is the module argument !!!\nofLogWarning(\"a warning print\");\n\n// this prints a warning message to the \"Hello\" module\nofLogWarning(\"Hello\") << \"a warning print\";\n\n~~~~\n\n####Log Message Redirection\n\nLast, it's useful to be able to record log messages to a file or send them to a custom destination. For log redirection see ofLogToFile(), ofLogToConsole(), & ofSetLoggerChannel() in the [ofLog functions](./ofLog.html#functions).\n\n\n\n\n\n##Methods\n\n\n\n###void _log(level, &module, &message)\n\n<!--\n_syntax: _log(level, &module, &message)_\n_name: _log_\n_returns: void_\n_returns_description: _\n_parameters: ofLogLevel level, const string &module, const string &message_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPrint a log line.\n\n**Parameters:**\n\nlevel The log level.\n\nmodule The target module.\n\nmessage The log message.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< ofBaseLoggerChannel > & channel()\n\n<!--\n_syntax: channel()_\n_name: channel_\n_returns: shared_ptr< ofBaseLoggerChannel > &_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool checkLog(level, &module)\n\n<!--\n_syntax: checkLog(level, &module)_\n_name: checkLog_\n_returns: bool_\n_returns_description: _\n_parameters: ofLogLevel level, const string &module_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermine if the given module is active at the given log level.\n\n**Parameters:**\n\nlevel The log level.\n\nmodule The target module.\n\n**Returns**: true if the given module is active at the given log level.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< ofBaseLoggerChannel > getChannel()\n\n<!--\n_syntax: getChannel()_\n_name: getChannel_\n_returns: shared_ptr< ofBaseLoggerChannel >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the current logging channel.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string & getPadding()\n\n<!--\n_syntax: getPadding()_\n_name: getPadding_\n_returns: string &_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofLog(&)\n\n<!--\n_syntax: ofLog(&)_\n_name: ofLog_\n_returns: _\n_returns_description: _\n_parameters: const ofLog &_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofLog()\n\n<!--\n_syntax: ofLog()_\n_name: ofLog_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStart logging on notice level.\n\nofLog provides a streaming log interface by accepting variables via\nthe `std::ostream` operator `<<` similar to `std::cout` and\n`std::cerr`.\n\nIt builds a string and logs it when the stream is finished. A\nnewline is printed automatically and all the stream controls\n(`std::endl`, `std::flush`, `std::hex`, etc)\nwork normally.\n\n~~~~{.cpp}\n\n// Converts primitive types (int, float, etc) to strings automatically.\nofLog() << \"a string \" << 100 << 20.234f;\n\n~~~~\n\nThe log level is `OF_LOG_NOTICE` by default.\n\n\n\n\n\n_description: _\n\nofLog provides a streaming log interface by accepting variables via the ostream operator << similar to cout and cerr.\n\nIt builds a string and logs it when the stream is finished. A newline is printed automatically and all the stream controls (endl, flush, hex, etc) work normally.\n\n~~~~{.cpp}\n\n// converts incoming primitive types (int, float, etc) to strings automatically\nofLog() << \"a string\" << 100 << 20.234f;\n\n~~~~\n\nThe log level is explicitly OF_LOG_NOTICE.\n\nSee [ofSetLogLevel(logLevel)](./ofLog.html#functions) for more info on log levels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofLog(level)\n\n<!--\n_syntax: ofLog(level)_\n_name: ofLog_\n_returns: _\n_returns_description: _\n_parameters: ofLogLevel level_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStart logging on a specific ofLogLevel.\n\nExample:\n~~~~{.cpp}\n\n// Set the log level.\nofLog(OF_LOG_WARNING) << \"a string \" << 100 << 20.234f;\n\n~~~~\n\nYou can use the derived convenience classes as an alternative for specific log levels:\n\n\tofLogVerbose()\n\tofLogNotice()\n\tofLogWarning()\n\tofLogError()\n\tofLogFatalError()\n\n~~~~{.cpp}\n\n// Set the log level.\nofLog(OF_LOG_WARNING) << \"a string \" << 100 << 20.234f;\n\n// This is the same as above.\nofLogWarning() << \"a string \" << 100 << 20.234f;\n\n~~~~\n\n\n**Parameters:**\n\nlevel The ofLogLevel for this log message.\n\n\n\n\n\n_description: _\n\nThe same as the ofLog() stream interface, except it accepts a log level. \n\n~~~~{.cpp}\n\n// set the log level\nofLog(OF_LOG_WARNING) << \"a string\" << 100 << 20.234f;\n\n~~~~\n\nYou can use the derived convenience classes as an alternative for specific log levels: \n\n\tofLogVerbose()\n\tofLogNotice()\n\tofLogWarning()\n\tofLogError()\n\tofLogFatalError()\n\n~~~~{.cpp}\n\n// set the log level\nofLog(OF_LOG_WARNING) << \"a string\" << 100 << 20.234f;\n\n// this is the same as above\nofLogWarning() << \"a string\" << 100 << 20.234f;\n\n~~~~\n\nSee [ofSetLogLevel()](./ofLog.html#functions) for more info on log levels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofLog(level, &message)\n\n<!--\n_syntax: ofLog(level, &message)_\n_name: ofLog_\n_returns: _\n_returns_description: _\n_parameters: ofLogLevel level, const string &message_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLog a string at a specific log level.\n\nSupply the logging message as a parameter to the function\ninstead of as a stream.\n\nThe string message can be concatenated using the\nofToString(const T& value) conversion function:\n\n~~~~{.cpp}\n\n// Build a single string message.\nofLog(OF_LOG_NOTICE, \"the number is \"\n+ ofToString(10) + \" and I have a float too \" + ofToString(123.45f));\n\n~~~~\n\n\n**Parameters:**\n\nlevel The ofLogLevel for this log message.\n\nmessage The log message.\n\n\n\n\n\n_description: _\n\nLogs a string at a specific log level.\n\nThe string message can be concatenated using the ofToString() conversion function in [ofUtils](./ofUtils.html#functions):\n\n~~~~{.cpp}\n\n// build a single string message\nofLog(OF_LOG_NOTICE, \"the number is \" \n+ ofToString(10) + \" and I have a float too \" + ofToString(123.45f));\n\n~~~~\n\nSee [ofSetLogLevel(logLevel)](./ofLog.html#functions) for more info on log levels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofLog & operator<<(&value)\n\n<!--\n_syntax: operator<<(&value)_\n_name: operator<<_\n_returns: ofLog &_\n_returns_description: _\n_parameters: const T &value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDefine flexible stream operator.\n\nThis allows the class to use the << std::ostream to read data of\nalmost any type.\n\n\\tparam T the data type to be streamed.\n\n**Parameters:**\n\nvalue the data to be streamed.\n\n**Returns**: A reference to itself.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofLog & operator<<(func)\n\n<!--\n_syntax: operator<<(func)_\n_name: operator<<_\n_returns: ofLog &_\n_returns_description: _\n_parameters: ostream &(*)(ostream &) func_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDefine flexible stream operator.\n\nThis allows the class to use the << std::ostream to catch function\npointers such as std::endl and std::hex.\n\n\n**Parameters:**\n\nfunc A function pointer that takes a std::ostream as an argument.\n\n**Returns**: A reference to itself.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofLog & operator=(&from)\n\n<!--\n_syntax: operator=(&from)_\n_name: operator=_\n_returns: ofLog &_\n_returns_description: _\n_parameters: ofLog &from_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAutoSpace(autoSpace)\n\n<!--\n_syntax: setAutoSpace(autoSpace)_\n_name: setAutoSpace_\n_returns: void_\n_returns_description: _\n_parameters: bool autoSpace_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLet the logger automaticly add spaces between messages.\n\nDefault is `false`.\n\n\n**Parameters:**\n\nautoSpace Set to true to add spaces between messages\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setChannel(channel)\n\n<!--\n_syntax: setChannel(channel)_\n_name: setChannel_\n_returns: void_\n_returns_description: _\n_parameters: shared_ptr< ofBaseLoggerChannel > channel_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the logging channel destinations for messages.\n\nThis can be used to output to files instead of stdout.\n\n\n**See also**: ofFileLoggerChannel ofConsoleLoggerChannel\n\n**Parameters:**\n\nchannel The channel to log to.\n\n\n\n\n\n_description: _\n\nSets the logging channel that receives log messages. This is analogous to ofSetLoggerChannel().\n\nSee [ofSetLoggerChannel()](./ofLog.html#functions) for more detail.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofLog()\n\n<!--\n_syntax: ~ofLog()_\n_name: ~ofLog_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDestroy the ofLog.\n\nThis destructor does the actual printing via std::ostream.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bAutoSpace\n\n<!--\n_name: bAutoSpace_\n_type: bool_\n_access: private_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< Should space be added between messages?\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bPrinted\n\n<!--\n_name: bPrinted_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: False_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< Has the message been printed in the constructor?\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofLogLevel level\n\n<!--\n_name: level_\n_type: ofLogLevel_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: False_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< Log level.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###std message\n\n<!--\n_name: message_\n_type: std_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: False_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< Temporary buffer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string module\n\n<!--\n_name: module_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: False_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< The destination module for this message.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}