{"data":[{"page":{"entry":{"name":"ofDirectory","filename":"ofDirectory.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/utils/ofDirectory.markdown","path":"/documentation/utils/ofDirectory","route":"/documentation/utils/ofDirectory.markdown","dir":"../ofSite/documentation/utils","ext":"markdown","type":"page","id":2455,"parent":2446,"breadcrumbs":[2446,1968],"siblings":[],"translations":{}},"description":{"short":"<p>Path to a directory. Can be used to query file and directory\ncontents.</p>\n","full":"<p>ofDirectory is a class for reading and manipulating directories on the file system through openFrameworks.</p>\n<p>Here is a common way to use it:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token comment\" spellcheck=\"true\">//some path, may be absolute or relative to bin/data</span>\nstring path <span class=\"token operator\">=</span> <span class=\"token string\">\"/my/path/file\"</span><span class=\"token punctuation\">;</span> \nofDirectory <span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//only show png files</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">allowExt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//populate the directory object</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//go through and print out all the paths</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"allowExt(&extension)","name":"allowExt","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>extension","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Allow a file extension when listing the contents the current\ndirectory path.</p>\n<p>Setting an allowed extension enables a whitelist mode which only lists\nextensions which have been explicitly allowed.</p>\n<p><strong>Parameters:</strong></p>\n<p>extension file type extension ie. &quot;jpg&quot;, &quot;png&quot;, &quot;txt&quot;, etc</p>\n","desc":"<p>Adds an allowed extension to the list of filters when listing directories. Use this to set any number of filters before calling listDir().</p>\n<p>For example if you wanted to only get images in a directory, you may set several filters:</p>\n<pre><code class=\"language-{.cpp}\">string path <span class=\"token operator\">=</span> <span class=\"token string\">\"/path/to/images\"</span><span class=\"token punctuation\">;</span>\nofDirectory <span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">allowExt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">allowExt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">allowExt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gif\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","counter":0},{"short":"","desc":""},{"syntax":"canExecute()","name":"canExecute","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Check if the current path is executable.</p>\n<p><strong>Returns</strong>: true if executable</p>\n","desc":"<p>Returns true if the current directory is executable. An executable directory can be entered into with command such as cd.</p>\n","counter":0},{"syntax":"canRead()","name":"canRead","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Check if the current path is readable.</p>\n<p><strong>Returns</strong>: true if readable</p>\n","desc":"<p>Returns true if the open directory can be read.</p>\n","counter":0},{"syntax":"canWrite()","name":"canWrite","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Check if the current path is writeable.</p>\n<p><strong>Returns</strong>: true if writable</p>\n","desc":"<p>Returns true if the open directory can be written to.</p>\n","counter":0},{"syntax":"close()","name":"close","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Close the currently open path.</p>\n","desc":"<p>Closes the directory.</p>\n","counter":0},{"syntax":"copyTo(&path, bRelativeToData = true, overwrite = false)","name":"copyTo","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Copy the current file or directory path to a new path.</p>\n<p>Copies relative to the data path &amp; does <em>not</em> overwrite by default\ndoes not change the current path &amp; assumes the new path is in the data\ndirectory.</p>\n<p><strong>Parameters:</strong></p>\n<p>path destination file or directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p>overwrite set to true if you want to overwrite the file or\ndirectory at the new path</p>\n<p><strong>Returns</strong>: true if the copy was successful</p>\n","desc":"<p>Copies the directory into path.  If bRelativeToData is set to false then path should be absolute. If overwrite is set to true any existing files with the same name will be overwritten by the copy.</p>\n","counter":0},{"syntax":"create(recursive = false)","name":"create","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> recursive<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a directory at the current path.</p>\n<p><strong>Parameters:</strong></p>\n<p>bRecursive set to true to automatically create nested directories\nas required</p>\n","desc":"<p>Creates the directory if it doesn't exist already. A common reason to use create is to ensure that you are able to write files to a known path, like so</p>\n<pre><code class=\"language-{.cpp}\">string path <span class=\"token operator\">=</span> <span class=\"token string\">\"/path/to/file\"</span><span class=\"token punctuation\">;</span>\nofDirectory <span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dir<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tdir<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//now you can be sure that path exists</span>\n</code></pre>\n<p>The recursive boolean flag will indicate if you'd like to create directories all the directories required to reach the given path.  In our example, if &quot;/path/to&quot; didn't already exist, the call to create() would also create these. If recursive were set to false, the directory would not be created.</p>\n","counter":0},{"syntax":"createDirectory(&dirPath, bRelativeToData = true, recursive = false)","name":"createDirectory","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>dirPath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> recursive<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Create a directory at a given path.</p>\n<p>Creates relative to the data path by default.</p>\n<p><strong>Parameters:</strong></p>\n<p>dirPath directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p>bRecursive set to true to automatically create nested directories\nas required</p>\n<p><strong>Returns</strong>: true if directory was created successfully</p>\n","desc":"<p>Static method to create a directory at a given path.</p>\n","counter":0},{"syntax":"doesDirectoryExist(&dirPath, bRelativeToData = true)","name":"doesDirectoryExist","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>dirPath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Check if a directory exists at a given path.</p>\n<p>Assumes directory path is relative to the data path by default.</p>\n<p><strong>Parameters:</strong></p>\n<p>dirPath directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p><strong>Returns</strong>: true if the directory exists</p>\n","desc":"<p>Returns true if the directory at dirPath exists.</p>\n","counter":0},{"short":"","desc":""},{"syntax":"exists()","name":"exists","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Check if a directory exists at the current path.</p>\n<p><strong>Returns</strong>: true if exists</p>\n","desc":"<p>Returns true if the open directory exists. Great to be used in conjunction with ofDirectory::create()</p>\n","counter":0},{"syntax":"getAbsolutePath()","name":"getAbsolutePath","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"getFile(position, mode = Reference, binary = true)","name":"getFile","returns":"ofFile","returns_description":null,"parameters":"size_t position<span class=\"token punctuation\">,</span> ofFile<span class=\"token operator\">::</span>Mode mode<span class=\"token operator\">=</span>Reference<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> binary<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"short":"<p>Get files and directories in the directory contents list.</p>\n<p>Directory contents are automatically listed.</p>\n<p><strong>Returns</strong>: vector of files in the directory</p>\n","desc":"<p>Returns a vector of ofFile objects populated by a prior call to listDir().  The files are opened in ofFile::Reference mode.</p>\n"},{"syntax":"getName(position)","name":"getName","returns":"string","returns_description":null,"parameters":"size_t position","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Returns the file name,(eg &quot;mypicture.png&quot;) with extension but not the enclosing path at a given index. Position must be less than the result of numFiles().</p>\n","counter":0},{"syntax":"getOriginalDirectory()","name":"getOriginalDirectory","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: the current path</p>\n","desc":"","counter":0},{"syntax":"getPath(position)","name":"getPath","returns":"string","returns_description":null,"parameters":"size_t position","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Returns the absolute path,(eg &quot;/path/to/files/mypicture.png&quot;). Position must be less than the result of size().</p>\n","counter":0},{"syntax":"getShowHidden()","name":"getShowHidden","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Returns if hidden files are set to be shown or not.</p>\n","counter":0},{"syntax":"getSorted()","name":"getSorted","returns":"ofDirectory","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get a sorted ofDirectory instance using the current path.</p>\n<p><strong>Returns</strong>: sorted ofDirectory instance</p>\n","desc":"","counter":0},{"syntax":"isDirectory()","name":"isDirectory","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Check if the current path is indeed a directory and not a file.</p>\n<p><strong>Returns</strong>: true if a directory</p>\n","desc":"<p>Returns true if the given path is actually a directory.</p>\n","counter":0},{"syntax":"isDirectoryEmpty(&dirPath, bRelativeToData = true)","name":"isDirectoryEmpty","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>dirPath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Check if a directory at a given path is empty.</p>\n<p>Assumes directory path is relative to the data path by default.</p>\n<p><strong>Parameters:</strong></p>\n<p>dirPath directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p><strong>Returns</strong>: true if the directory is empty aka contains no files or\ndirectories</p>\n","desc":"<p>Returns true if the directory at dirPath is empty.</p>\n","counter":0},{"syntax":"isHidden()","name":"isHidden","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Returns true if the directory is hidden in the file system.</p>\n","counter":0},{"syntax":"listDir(&path)","name":"listDir","returns":"size_t","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Open and read the contents of a directory.</p>\n<p>Uses allowed extension whitelist to ignore unwanted file types if\nallowExt() has been called.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n<p><strong>Returns</strong>: number of paths found</p>\n","desc":"<p>Opens and populates the directory with files.  Returns the number of files found.</p>\n","counter":1},{"syntax":"listDir()","name":"listDir","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Open and read the contents of the current directory.</p>\n<p>Uses allowed extension whitelist to ignore unwanted file types if\nallowExt() has been called.</p>\n<p><strong>Returns</strong>: number of paths found</p>\n","desc":"<p>Populates the directory with files. Call this after opening a directory and setting filters. After this call, size(), getPath(position), and getName(position) can be used to access the contents of the directory.</p>\n"},{"syntax":"moveTo(&path, bRelativeToData = true, overwrite = false)","name":"moveTo","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Move the current file or directory path to a new path.</p>\n<p>Moves relative to the data path &amp; does <em>not</em> overwrite by default\ndoes not change the current path &amp; assumes the new path is in the data\ndirectory.</p>\n<p><strong>Parameters:</strong></p>\n<p>path destination file or directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p>overwrite set to true if you want to overwrite the file or\ndirectory at the new path</p>\n<p><strong>Returns</strong>: true if the copy was successful</p>\n","desc":"<p>Moves the directory into another directory at path.  If bRelativeToData is set to false then path should be absolute. If overwrite is set to true any existing files with the same name will be overwritten by the move.</p>\n","counter":0},{"syntax":"ofDirectory(&path)","name":"ofDirectory","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create an ofDirectory instance and attempt to open the path.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n","desc":"<p>Constructs a directory object and calls open() on the provided path.  The contents of the path are not accessible until listDir() is called.</p>\n","counter":1},{"syntax":"ofDirectory()","name":"ofDirectory","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create an ofDirectory instance</p>\n<p>Does not refer to a specific directory until you either open or create\na directory path.</p>\n","desc":"<p>Constructs an empty directory object.</p>\n"},{"syntax":"open(&path)","name":"open","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Open a directory path, clears the current file list.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n","desc":"<p>Opens a path. At this point you can see if the directory exists by calling exists() but the contents of the path are not accessible until listDir() is called.</p>\n","counter":0},{"syntax":"openFromCWD(&path)","name":"openFromCWD","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Open a directory path relative to the current working directory without calling ofToDataPath internally, clears the current file list.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n","desc":"","counter":0},{"syntax":"operator!=(&dir)","name":"operator!=","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span>dir","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns true if this directory and another have different paths.</p>\n","counter":0},{"syntax":"operator<(&dir)","name":"operator<","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span>dir","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns true if the right hand side directory is alphabetically after the left hand side directory.</p>\n","counter":0},{"syntax":"operator<=(&dir)","name":"operator<=","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span>dir","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns true if the right hand side directory is alphabetically after or equal to the left hand side directory.</p>\n","counter":0},{"syntax":"operator==(&dir)","name":"operator==","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofDirectory <span class=\"token operator\">&amp;</span>dir","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns true if this directory and another have the same path.</p>\n","counter":0},{"short":"","desc":"<p>Returns true if the left hand side directory is alphabetically after the right hand side directory.</p>\n"},{"short":"","desc":"<p>Returns true if the left hand side directory is alphabetically after or equal to the right hand side directory;</p>\n"},{"syntax":"operator[](position)","name":"operator[]","returns":"ofFile","returns_description":null,"parameters":"size_t position","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Operator for accessing files with array notation syntax. Call is equivalent to ofFile::getFile(position).</p>\n","counter":0},{"syntax":"path()","name":"path","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the current path.</p>\n<p><strong>Returns</strong>: current path</p>\n","desc":"<p>Returns the currently opened path.</p>\n","counter":0},{"short":"","desc":""},{"syntax":"remove(recursive)","name":"remove","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> recursive","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Removes the file or directory at the current path.</p>\n<p>Does not remove non-empty directories by default.</p>\n<p><strong>Warning</strong>: Be careful! This deletes a file or folder. :)</p>\n<p><strong>Parameters:</strong></p>\n<p>recursive set to true to remove a non-empty directory and its\ncontents</p>\n<p><strong>Returns</strong>: true if the path was removed successfully</p>\n","desc":"<p>Deletes the directory. If recursive is set to false and this directory contains others the remove will fail.</p>\n","counter":0},{"syntax":"removeDirectory(&path, deleteIfNotEmpty, bRelativeToData = true)","name":"removeDirectory","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> deleteIfNotEmpty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>remove a directory at a given path</p>\n<p><strong>Parameters:</strong></p>\n<p>deleteIfNotEmpty set to true if you want to recursively delete\nthe directory <em>and</em> its contents</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p><strong>Returns</strong>: true if the path was removed successfully</p>\n","desc":"<p>Removes a directory. If deleteIfNotEmpty is set to false and the directory contains files the call will fail.</p>\n","counter":0},{"syntax":"renameTo(&path, bRelativeToData = true, overwrite = false)","name":"renameTo","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> overwrite<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rename the current file or directory path to a new path.</p>\n<p>Renames relative to the data path &amp; does <em>not</em> overwrite by default\ndoes not change the current path &amp; assumes the new path is in the data\ndirectory.</p>\n<p><strong>Parameters:</strong></p>\n<p>path destination file or directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data folder</p>\n<p>overwrite set to true if you want to overwrite the file or\ndirectory at the new path</p>\n<p><strong>Returns</strong>: true if the copy was successful</p>\n","desc":"<p>Renames the directory to the path path.  If bRelativeToData is set to false then path should be absolute. If overwrite is set to true any existing files with the same name will be overwritten by the rename.</p>\n","counter":0},{"short":"","desc":""},{"syntax":"reset()","name":"reset","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Closes the directory.</p>\n<p>This is for backwards compatibility with ofxDirList.</p>\n","desc":"<p>Resets the current directory. Equivalent to close().</p>\n","counter":0},{"syntax":"setExecutable(executable = true)","name":"setExecutable","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> executable<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the executable flag of the current path.</p>\n<p><strong>Parameters:</strong></p>\n<p>executable set to true to make path executable</p>\n","desc":"<p>Enables or disables execution on the current open directory. If the directory is executable then it can be entered through commands such as cd.</p>\n","counter":0},{"syntax":"setReadable(readable = true)","name":"setReadable","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> readable<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the readable flag of the current path.</p>\n<p><strong>Parameters:</strong></p>\n<p>readable set to true to make path readable</p>\n","desc":"","counter":0},{"syntax":"setShowHidden(showHidden)","name":"setShowHidden","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> showHidden","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Sets whether or not the call to listDir() will return hidden files.</p>\n","counter":0},{"syntax":"setWriteable(writeable = true)","name":"setWriteable","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> writeable<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the writable flag of the current path.</p>\n<p><strong>Parameters:</strong></p>\n<p>writable set to true to make path writable</p>\n","desc":"<p>Enables or disables writeable on the current open directory.</p>\n","counter":0},{"syntax":"size()","name":"size","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the number of paths in the current directory list.</p>\n<p><strong>Warning</strong>: Call listDir() before using this function or it will return 0\nsince the directory list will be empty.</p>\n<p><strong>Returns</strong>: number of paths</p>\n","desc":"<p>Returns the number of files contained within the directory. Set after listDir() is called.</p>\n","counter":0},{"syntax":"sort()","name":"sort","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sort the directory contents list alphabetically.</p>\n<p><strong>Warning</strong>: Call listDir() before using this function or there will be\nnothing to sort.</p>\n","desc":"<p>Sorts the contents of the directory by filename.</p>\n","counter":0},{"syntax":"sortByDate()","name":"sortByDate","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sort the directory contents list by date.</p>\n<p><strong>Warning</strong>: Call listDir() before using this function or there will be\nnothing to sort.</p>\n","desc":"","counter":0},{"short":"","desc":""},{"name":"files","type":"ofFile","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"myDir","type":"Poco","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"originalDirectory","type":"string","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"showHidden","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofDirectory</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>Path to a directory. Can be used to query file and directory\ncontents.</p>\n<p>##Description</p>\n<p>ofDirectory is a class for reading and manipulating directories on the file system through openFrameworks.</p>\n<p>Here is a common way to use it:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token comment\" spellcheck=\"true\">//some path, may be absolute or relative to bin/data</span>\nstring path <span class=\"token operator\">=</span> <span class=\"token string\">\"/my/path/file\"</span><span class=\"token punctuation\">;</span> \nofDirectory <span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//only show png files</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">allowExt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//populate the directory object</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//go through and print out all the paths</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofLogNotice</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>##Methods</p>\n<p>###void allowExt(&amp;extension)</p>\n<!--\n_syntax: allowExt(&extension)_\n_name: allowExt_\n_returns: void_\n_returns_description: _\n_parameters: const string &extension_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Allow a file extension when listing the contents the current\ndirectory path.</p>\n<p>Setting an allowed extension enables a whitelist mode which only lists\nextensions which have been explicitly allowed.</p>\n<p><strong>Parameters:</strong></p>\n<p>extension file type extension ie. &quot;jpg&quot;, &quot;png&quot;, &quot;txt&quot;, etc</p>\n<p>_description: _</p>\n<p>Adds an allowed extension to the list of filters when listing directories. Use this to set any number of filters before calling listDir().</p>\n<p>For example if you wanted to only get images in a directory, you may set several filters:</p>\n<pre><code class=\"language-{.cpp}\">string path <span class=\"token operator\">=</span> <span class=\"token string\">\"/path/to/images\"</span><span class=\"token punctuation\">;</span>\nofDirectory <span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">allowExt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">allowExt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">allowExt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gif\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndir<span class=\"token punctuation\">.</span><span class=\"token function\">listDir</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; ofFile &gt;::const_iterator begin()</p>\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: vector< ofFile >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool canExecute()</p>\n<!--\n_syntax: canExecute()_\n_name: canExecute_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check if the current path is executable.</p>\n<p><strong>Returns</strong>: true if executable</p>\n<p>_description: _</p>\n<p>Returns true if the current directory is executable. An executable directory can be entered into with command such as cd.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool canRead()</p>\n<!--\n_syntax: canRead()_\n_name: canRead_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check if the current path is readable.</p>\n<p><strong>Returns</strong>: true if readable</p>\n<p>_description: _</p>\n<p>Returns true if the open directory can be read.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool canWrite()</p>\n<!--\n_syntax: canWrite()_\n_name: canWrite_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check if the current path is writeable.</p>\n<p><strong>Returns</strong>: true if writable</p>\n<p>_description: _</p>\n<p>Returns true if the open directory can be written to.</p>\n<!----------------------------------------------------------------------------->\n<p>###void close()</p>\n<!--\n_syntax: close()_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Close the currently open path.</p>\n<p>_description: _</p>\n<p>Closes the directory.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool copyTo(&amp;path, bRelativeToData = true, overwrite = false)</p>\n<!--\n_syntax: copyTo(&path, bRelativeToData = true, overwrite = false)_\n_name: copyTo_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &path, bool bRelativeToData=true, bool overwrite=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Copy the current file or directory path to a new path.</p>\n<p>Copies relative to the data path &amp; does <em>not</em> overwrite by default\ndoes not change the current path &amp; assumes the new path is in the data\ndirectory.</p>\n<p><strong>Parameters:</strong></p>\n<p>path destination file or directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p>overwrite set to true if you want to overwrite the file or\ndirectory at the new path</p>\n<p><strong>Returns</strong>: true if the copy was successful</p>\n<p>_description: _</p>\n<p>Copies the directory into path.  If bRelativeToData is set to false then path should be absolute. If overwrite is set to true any existing files with the same name will be overwritten by the copy.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool create(recursive = false)</p>\n<!--\n_syntax: create(recursive = false)_\n_name: create_\n_returns: bool_\n_returns_description: _\n_parameters: bool recursive=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create a directory at the current path.</p>\n<p><strong>Parameters:</strong></p>\n<p>bRecursive set to true to automatically create nested directories\nas required</p>\n<p>_description: _</p>\n<p>Creates the directory if it doesn't exist already. A common reason to use create is to ensure that you are able to write files to a known path, like so</p>\n<pre><code class=\"language-{.cpp}\">string path <span class=\"token operator\">=</span> <span class=\"token string\">\"/path/to/file\"</span><span class=\"token punctuation\">;</span>\nofDirectory <span class=\"token function\">dir</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dir<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tdir<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\" spellcheck=\"true\">//now you can be sure that path exists</span>\n</code></pre>\n<p>The recursive boolean flag will indicate if you'd like to create directories all the directories required to reach the given path.  In our example, if &quot;/path/to&quot; didn't already exist, the call to create() would also create these. If recursive were set to false, the directory would not be created.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool createDirectory(&amp;dirPath, bRelativeToData = true, recursive = false)</p>\n<!--\n_syntax: createDirectory(&dirPath, bRelativeToData = true, recursive = false)_\n_name: createDirectory_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &dirPath, bool bRelativeToData=true, bool recursive=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create a directory at a given path.</p>\n<p>Creates relative to the data path by default.</p>\n<p><strong>Parameters:</strong></p>\n<p>dirPath directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p>bRecursive set to true to automatically create nested directories\nas required</p>\n<p><strong>Returns</strong>: true if directory was created successfully</p>\n<p>_description: _</p>\n<p>Static method to create a directory at a given path.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool doesDirectoryExist(&amp;dirPath, bRelativeToData = true)</p>\n<!--\n_syntax: doesDirectoryExist(&dirPath, bRelativeToData = true)_\n_name: doesDirectoryExist_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &dirPath, bool bRelativeToData=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check if a directory exists at a given path.</p>\n<p>Assumes directory path is relative to the data path by default.</p>\n<p><strong>Parameters:</strong></p>\n<p>dirPath directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p><strong>Returns</strong>: true if the directory exists</p>\n<p>_description: _</p>\n<p>Returns true if the directory at dirPath exists.</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; ofFile &gt;::const_iterator end()</p>\n<!--\n_syntax: end()_\n_name: end_\n_returns: vector< ofFile >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool exists()</p>\n<!--\n_syntax: exists()_\n_name: exists_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check if a directory exists at the current path.</p>\n<p><strong>Returns</strong>: true if exists</p>\n<p>_description: _</p>\n<p>Returns true if the open directory exists. Great to be used in conjunction with ofDirectory::create()</p>\n<!----------------------------------------------------------------------------->\n<p>###string getAbsolutePath()</p>\n<!--\n_syntax: getAbsolutePath()_\n_name: getAbsolutePath_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the absolute, full path of the directory,\nie. &quot;images&quot; -&gt; &quot;/Users/mickey/of/apps/myApps/Donald/bin/data/images&quot;.</p>\n<p>\\return current path as an absolute path</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofFile getFile(position, mode = Reference, binary = true)</p>\n<!--\n_syntax: getFile(position, mode = Reference, binary = true)_\n_name: getFile_\n_returns: ofFile_\n_returns_description: _\n_parameters: size_t position, ofFile::Mode mode=Reference, bool binary=true_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Open an ofFile instance using the path a given position in the\ndirectory contents list.</p>\n<p>Opens as a binary file with readonly access by default.</p>\n<p><strong>Warning</strong>: Call listDir() before using this function or the directory\ncontents list will be empty.\n\\throw Throws an out of bounds exception if position &gt;= the number of\nlisted directory contents.</p>\n<p><strong>Parameters:</strong></p>\n<p>position array index in the directory contents list</p>\n<p>mode file access mode depending on how you plan to use the file\n(read only, read write, etc)</p>\n<p>binary set to false if you are working with a text file &amp; want\nlines split at endline characters automatically</p>\n<p><strong>Returns</strong>: ofFile instance</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###const vector&lt; ofFile &gt; &amp; getFiles()</p>\n<!--\n_syntax: getFiles()_\n_name: getFiles_\n_returns: const vector< ofFile > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get files and directories in the directory contents list.</p>\n<p>Directory contents are automatically listed.</p>\n<p><strong>Returns</strong>: vector of files in the directory</p>\n<p>_description: _</p>\n<p>Returns a vector of ofFile objects populated by a prior call to listDir().  The files are opened in ofFile::Reference mode.</p>\n<!----------------------------------------------------------------------------->\n<p>###string getName(position)</p>\n<!--\n_syntax: getName(position)_\n_name: getName_\n_returns: string_\n_returns_description: _\n_parameters: size_t position_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the filename at a given position in the directory contents\nlist, ie. &quot;duck.jpg&quot;.</p>\n<p><strong>Warning</strong>: Call listDir() before using this function or the directory\ncontents list will be empty.\n\\throws Throws an out of bounds exception if position &gt;= the number of\nlisted directory contents.</p>\n<p><strong>Parameters:</strong></p>\n<p>position array index in the directory contents list</p>\n<p><strong>Returns</strong>: file or directory name</p>\n<p>_description: _</p>\n<p>Returns the file name,(eg &quot;mypicture.png&quot;) with extension but not the enclosing path at a given index. Position must be less than the result of numFiles().</p>\n<!----------------------------------------------------------------------------->\n<p>###string getOriginalDirectory()</p>\n<!--\n_syntax: getOriginalDirectory()_\n_name: getOriginalDirectory_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the current path</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string getPath(position)</p>\n<!--\n_syntax: getPath(position)_\n_name: getPath_\n_returns: string_\n_returns_description: _\n_parameters: size_t position_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the full path of the file or directory at a given position in\nthe directory contents list.</p>\n<p><strong>Warning</strong>: Call listDir() before using this function or the directory\ncontents list will be empty.\n\\throws Throws an out of bounds exception if position &gt;= the number of\nlisted directory contents.</p>\n<p><strong>Parameters:</strong></p>\n<p>position array index in the directory contents list</p>\n<p><strong>Returns</strong>: file or directory name including the current path</p>\n<p>_description: _</p>\n<p>Returns the absolute path,(eg &quot;/path/to/files/mypicture.png&quot;). Position must be less than the result of size().</p>\n<!----------------------------------------------------------------------------->\n<p>###bool getShowHidden()</p>\n<!--\n_syntax: getShowHidden()_\n_name: getShowHidden_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check whether hidden files &amp; directories are included when\nlisting files.</p>\n<p>Mac &amp; Linux denote hidden directories by prepending a period\n-&gt; &quot;.hello&quot;.</p>\n<p><strong>Returns</strong>: true if hidden files are shown</p>\n<p>_description: _</p>\n<p>Returns if hidden files are set to be shown or not.</p>\n<!----------------------------------------------------------------------------->\n<p>###ofDirectory getSorted()</p>\n<!--\n_syntax: getSorted()_\n_name: getSorted_\n_returns: ofDirectory_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get a sorted ofDirectory instance using the current path.</p>\n<p><strong>Returns</strong>: sorted ofDirectory instance</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isDirectory()</p>\n<!--\n_syntax: isDirectory()_\n_name: isDirectory_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check if the current path is indeed a directory and not a file.</p>\n<p><strong>Returns</strong>: true if a directory</p>\n<p>_description: _</p>\n<p>Returns true if the given path is actually a directory.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isDirectoryEmpty(&amp;dirPath, bRelativeToData = true)</p>\n<!--\n_syntax: isDirectoryEmpty(&dirPath, bRelativeToData = true)_\n_name: isDirectoryEmpty_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &dirPath, bool bRelativeToData=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check if a directory at a given path is empty.</p>\n<p>Assumes directory path is relative to the data path by default.</p>\n<p><strong>Parameters:</strong></p>\n<p>dirPath directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p><strong>Returns</strong>: true if the directory is empty aka contains no files or\ndirectories</p>\n<p>_description: _</p>\n<p>Returns true if the directory at dirPath is empty.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isHidden()</p>\n<!--\n_syntax: isHidden()_\n_name: isHidden_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Check if the current path is hidden.</p>\n<p>Works on Mac &amp; Linux which denote hidden directories by prepending\na period -&gt; &quot;.hello&quot;, however always returns false on Windows.</p>\n<p><strong>Returns</strong>: true if hidden</p>\n<p>_description: _</p>\n<p>Returns true if the directory is hidden in the file system.</p>\n<!----------------------------------------------------------------------------->\n<p>###size_t listDir(&amp;path)</p>\n<!--\n_syntax: listDir(&path)_\n_name: listDir_\n_returns: size_t_\n_returns_description: _\n_parameters: const string &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Open and read the contents of a directory.</p>\n<p>Uses allowed extension whitelist to ignore unwanted file types if\nallowExt() has been called.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n<p><strong>Returns</strong>: number of paths found</p>\n<p>_description: _</p>\n<p>Opens and populates the directory with files.  Returns the number of files found.</p>\n<!----------------------------------------------------------------------------->\n<p>###size_t listDir()</p>\n<!--\n_syntax: listDir()_\n_name: listDir_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Open and read the contents of the current directory.</p>\n<p>Uses allowed extension whitelist to ignore unwanted file types if\nallowExt() has been called.</p>\n<p><strong>Returns</strong>: number of paths found</p>\n<p>_description: _</p>\n<p>Populates the directory with files. Call this after opening a directory and setting filters. After this call, size(), getPath(position), and getName(position) can be used to access the contents of the directory.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool moveTo(&amp;path, bRelativeToData = true, overwrite = false)</p>\n<!--\n_syntax: moveTo(&path, bRelativeToData = true, overwrite = false)_\n_name: moveTo_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &path, bool bRelativeToData=true, bool overwrite=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Move the current file or directory path to a new path.</p>\n<p>Moves relative to the data path &amp; does <em>not</em> overwrite by default\ndoes not change the current path &amp; assumes the new path is in the data\ndirectory.</p>\n<p><strong>Parameters:</strong></p>\n<p>path destination file or directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p>overwrite set to true if you want to overwrite the file or\ndirectory at the new path</p>\n<p><strong>Returns</strong>: true if the copy was successful</p>\n<p>_description: _</p>\n<p>Moves the directory into another directory at path.  If bRelativeToData is set to false then path should be absolute. If overwrite is set to true any existing files with the same name will be overwritten by the move.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofDirectory(&amp;path)</h3>\n<!--\n_syntax: ofDirectory(&path)_\n_name: ofDirectory_\n_returns: _\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create an ofDirectory instance and attempt to open the path.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n<p>_description: _</p>\n<p>Constructs a directory object and calls open() on the provided path.  The contents of the path are not accessible until listDir() is called.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofDirectory()</h3>\n<!--\n_syntax: ofDirectory()_\n_name: ofDirectory_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create an ofDirectory instance</p>\n<p>Does not refer to a specific directory until you either open or create\na directory path.</p>\n<p>_description: _</p>\n<p>Constructs an empty directory object.</p>\n<!----------------------------------------------------------------------------->\n<p>###void open(&amp;path)</p>\n<!--\n_syntax: open(&path)_\n_name: open_\n_returns: void_\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Open a directory path, clears the current file list.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n<p>_description: _</p>\n<p>Opens a path. At this point you can see if the directory exists by calling exists() but the contents of the path are not accessible until listDir() is called.</p>\n<!----------------------------------------------------------------------------->\n<p>###void openFromCWD(&amp;path)</p>\n<!--\n_syntax: openFromCWD(&path)_\n_name: openFromCWD_\n_returns: void_\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Open a directory path relative to the current working directory without calling ofToDataPath internally, clears the current file list.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool operator!=(&amp;dir)</p>\n<!--\n_syntax: operator!=(&dir)_\n_name: operator!=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns true if this directory and another have different paths.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool operator&lt;(&amp;dir)</p>\n<!--\n_syntax: operator<(&dir)_\n_name: operator<_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns true if the right hand side directory is alphabetically after the left hand side directory.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool operator&lt;=(&amp;dir)</p>\n<!--\n_syntax: operator<=(&dir)_\n_name: operator<=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns true if the right hand side directory is alphabetically after or equal to the left hand side directory.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool operator==(&amp;dir)</p>\n<!--\n_syntax: operator==(&dir)_\n_name: operator==_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns true if this directory and another have the same path.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool operator&gt;(&amp;dir)</p>\n<!--\n_syntax: operator>(&dir)_\n_name: operator>_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns true if the left hand side directory is alphabetically after the right hand side directory.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool operator&gt;=(&amp;dir)</p>\n<!--\n_syntax: operator>=(&dir)_\n_name: operator>=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns true if the left hand side directory is alphabetically after or equal to the right hand side directory;</p>\n<!----------------------------------------------------------------------------->\n<p>###ofFile operator<a href=\"position\"></a></p>\n<!--\n_syntax: operator[](position)_\n_name: operator[]_\n_returns: ofFile_\n_returns_description: _\n_parameters: size_t position_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Access directory contents via th array operator.</p>\n<p><strong>Warning</strong>: Call listDir() before using this function or the directory\ncontents list will be empty.\n\\throw Throws an out of bounds exception if position &gt;= the number of\nlisted directory contents.</p>\n<p><strong>Parameters:</strong></p>\n<p>position array index in the directory contents list</p>\n<p><strong>Returns</strong>: opened ofFile instance</p>\n<p>_description: _</p>\n<p>Operator for accessing files with array notation syntax. Call is equivalent to ofFile::getFile(position).</p>\n<!----------------------------------------------------------------------------->\n<p>###string path()</p>\n<!--\n_syntax: path()_\n_name: path_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the current path.</p>\n<p><strong>Returns</strong>: current path</p>\n<p>_description: _</p>\n<p>Returns the currently opened path.</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; ofFile &gt;::const_reverse_iterator rbegin()</p>\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: vector< ofFile >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool remove(recursive)</p>\n<!--\n_syntax: remove(recursive)_\n_name: remove_\n_returns: bool_\n_returns_description: _\n_parameters: bool recursive_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Removes the file or directory at the current path.</p>\n<p>Does not remove non-empty directories by default.</p>\n<p><strong>Warning</strong>: Be careful! This deletes a file or folder. :)</p>\n<p><strong>Parameters:</strong></p>\n<p>recursive set to true to remove a non-empty directory and its\ncontents</p>\n<p><strong>Returns</strong>: true if the path was removed successfully</p>\n<p>_description: _</p>\n<p>Deletes the directory. If recursive is set to false and this directory contains others the remove will fail.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool removeDirectory(&amp;path, deleteIfNotEmpty, bRelativeToData = true)</p>\n<!--\n_syntax: removeDirectory(&path, deleteIfNotEmpty, bRelativeToData = true)_\n_name: removeDirectory_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &path, bool deleteIfNotEmpty, bool bRelativeToData=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>remove a directory at a given path</p>\n<p><strong>Parameters:</strong></p>\n<p>deleteIfNotEmpty set to true if you want to recursively delete\nthe directory <em>and</em> its contents</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data directory</p>\n<p><strong>Returns</strong>: true if the path was removed successfully</p>\n<p>_description: _</p>\n<p>Removes a directory. If deleteIfNotEmpty is set to false and the directory contains files the call will fail.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool renameTo(&amp;path, bRelativeToData = true, overwrite = false)</p>\n<!--\n_syntax: renameTo(&path, bRelativeToData = true, overwrite = false)_\n_name: renameTo_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &path, bool bRelativeToData=true, bool overwrite=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Rename the current file or directory path to a new path.</p>\n<p>Renames relative to the data path &amp; does <em>not</em> overwrite by default\ndoes not change the current path &amp; assumes the new path is in the data\ndirectory.</p>\n<p><strong>Parameters:</strong></p>\n<p>path destination file or directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data folder</p>\n<p>overwrite set to true if you want to overwrite the file or\ndirectory at the new path</p>\n<p><strong>Returns</strong>: true if the copy was successful</p>\n<p>_description: _</p>\n<p>Renames the directory to the path path.  If bRelativeToData is set to false then path should be absolute. If overwrite is set to true any existing files with the same name will be overwritten by the rename.</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; ofFile &gt;::const_reverse_iterator rend()</p>\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: vector< ofFile >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void reset()</p>\n<!--\n_syntax: reset()_\n_name: reset_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Closes the directory.</p>\n<p>This is for backwards compatibility with ofxDirList.</p>\n<p>_description: _</p>\n<p>Resets the current directory. Equivalent to close().</p>\n<!----------------------------------------------------------------------------->\n<p>###void setExecutable(executable = true)</p>\n<!--\n_syntax: setExecutable(executable = true)_\n_name: setExecutable_\n_returns: void_\n_returns_description: _\n_parameters: bool executable=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the executable flag of the current path.</p>\n<p><strong>Parameters:</strong></p>\n<p>executable set to true to make path executable</p>\n<p>_description: _</p>\n<p>Enables or disables execution on the current open directory. If the directory is executable then it can be entered through commands such as cd.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setReadable(readable = true)</p>\n<!--\n_syntax: setReadable(readable = true)_\n_name: setReadable_\n_returns: void_\n_returns_description: _\n_parameters: bool readable=true_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the readable flag of the current path.</p>\n<p><strong>Parameters:</strong></p>\n<p>readable set to true to make path readable</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setShowHidden(showHidden)</p>\n<!--\n_syntax: setShowHidden(showHidden)_\n_name: setShowHidden_\n_returns: void_\n_returns_description: _\n_parameters: bool showHidden_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Show hidden files &amp; directories when listing files?</p>\n<p>Mac &amp; Linux denote hidden directories by prepending a period\n-&gt; &quot;.hello&quot;.</p>\n<p><strong>Parameters:</strong></p>\n<p>showHidden set to true to show hidden files</p>\n<p>_description: _</p>\n<p>Sets whether or not the call to listDir() will return hidden files.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setWriteable(writeable = true)</p>\n<!--\n_syntax: setWriteable(writeable = true)_\n_name: setWriteable_\n_returns: void_\n_returns_description: _\n_parameters: bool writeable=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the writable flag of the current path.</p>\n<p><strong>Parameters:</strong></p>\n<p>writable set to true to make path writable</p>\n<p>_description: _</p>\n<p>Enables or disables writeable on the current open directory.</p>\n<!----------------------------------------------------------------------------->\n<p>###size_t size()</p>\n<!--\n_syntax: size()_\n_name: size_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the number of paths in the current directory list.</p>\n<p><strong>Warning</strong>: Call listDir() before using this function or it will return 0\nsince the directory list will be empty.</p>\n<p><strong>Returns</strong>: number of paths</p>\n<p>_description: _</p>\n<p>Returns the number of files contained within the directory. Set after listDir() is called.</p>\n<!----------------------------------------------------------------------------->\n<p>###void sort()</p>\n<!--\n_syntax: sort()_\n_name: sort_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Sort the directory contents list alphabetically.</p>\n<p><strong>Warning</strong>: Call listDir() before using this function or there will be\nnothing to sort.</p>\n<p>_description: _</p>\n<p>Sorts the contents of the directory by filename.</p>\n<!----------------------------------------------------------------------------->\n<p>###void sortByDate()</p>\n<!--\n_syntax: sortByDate()_\n_name: sortByDate_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Sort the directory contents list by date.</p>\n<p><strong>Warning</strong>: Call listDir() before using this function or there will be\nnothing to sort.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###vector&lt; string &gt; extensions</p>\n<!--\n_name: extensions_\n_type: vector< string >_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofFile files</p>\n<!--\n_name: files_\n_type: ofFile_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###Poco myDir</p>\n<!--\n_name: myDir_\n_type: Poco_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string originalDirectory</p>\n<!--\n_name: originalDirectory_\n_type: string_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool showHidden</p>\n<!--\n_name: showHidden_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofDirectory\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\nPath to a directory. Can be used to query file and directory\ncontents.\n\n\n\n\n\n\n##Description\n\nofDirectory is a class for reading and manipulating directories on the file system through openFrameworks.\n\nHere is a common way to use it:\n\n~~~~{.cpp}\n//some path, may be absolute or relative to bin/data\nstring path = \"/my/path/file\"; \nofDirectory dir(path);\n//only show png files\ndir.allowExt(\"png\");\n//populate the directory object\ndir.listDir();\n\n//go through and print out all the paths\nfor(int i = 0; i < dir.size(); i++){\n\tofLogNotice(dir.getPath(i));\n}\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###void allowExt(&extension)\n\n<!--\n_syntax: allowExt(&extension)_\n_name: allowExt_\n_returns: void_\n_returns_description: _\n_parameters: const string &extension_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAllow a file extension when listing the contents the current\ndirectory path.\n\nSetting an allowed extension enables a whitelist mode which only lists\nextensions which have been explicitly allowed.\n\n\n**Parameters:**\n\nextension file type extension ie. \"jpg\", \"png\", \"txt\", etc\n\n\n\n\n\n_description: _\n\nAdds an allowed extension to the list of filters when listing directories. Use this to set any number of filters before calling listDir().\n\nFor example if you wanted to only get images in a directory, you may set several filters:\n\n~~~~{.cpp}\nstring path = \"/path/to/images\";\nofDirectory dir(path);\ndir.allowExt(\"png\");\ndir.allowExt(\"jpg\");\ndir.allowExt(\"gif\");\ndir.listDir();\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofFile >::const_iterator begin()\n\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: vector< ofFile >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool canExecute()\n\n<!--\n_syntax: canExecute()_\n_name: canExecute_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck if the current path is executable.\n\n\n**Returns**: true if executable\n\n\n\n\n\n_description: _\n\nReturns true if the current directory is executable. An executable directory can be entered into with command such as cd.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool canRead()\n\n<!--\n_syntax: canRead()_\n_name: canRead_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck if the current path is readable.\n\n\n**Returns**: true if readable\n\n\n\n\n\n_description: _\n\nReturns true if the open directory can be read.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool canWrite()\n\n<!--\n_syntax: canWrite()_\n_name: canWrite_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck if the current path is writeable.\n\n\n**Returns**: true if writable\n\n\n\n\n\n_description: _\n\nReturns true if the open directory can be written to.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void close()\n\n<!--\n_syntax: close()_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClose the currently open path.\n\n\n\n\n\n_description: _\n\nCloses the directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool copyTo(&path, bRelativeToData = true, overwrite = false)\n\n<!--\n_syntax: copyTo(&path, bRelativeToData = true, overwrite = false)_\n_name: copyTo_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &path, bool bRelativeToData=true, bool overwrite=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCopy the current file or directory path to a new path.\n\nCopies relative to the data path & does *not* overwrite by default\ndoes not change the current path & assumes the new path is in the data\ndirectory.\n\n\n**Parameters:**\n\npath destination file or directory path\n\nbRelativeToData set to false if you are working with paths that\nare *not* in the data directory\n\noverwrite set to true if you want to overwrite the file or\ndirectory at the new path\n\n**Returns**: true if the copy was successful\n\n\n\n\n\n_description: _\n\nCopies the directory into path.  If bRelativeToData is set to false then path should be absolute. If overwrite is set to true any existing files with the same name will be overwritten by the copy.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool create(recursive = false)\n\n<!--\n_syntax: create(recursive = false)_\n_name: create_\n_returns: bool_\n_returns_description: _\n_parameters: bool recursive=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a directory at the current path.\n\n\n**Parameters:**\n\nbRecursive set to true to automatically create nested directories\nas required\n\n\n\n\n\n_description: _\n\nCreates the directory if it doesn't exist already. A common reason to use create is to ensure that you are able to write files to a known path, like so\n\n~~~~{.cpp}\nstring path = \"/path/to/file\";\nofDirectory dir(path);\nif(!dir.exists()){\n\tdir.create(true);\n}\n//now you can be sure that path exists\n~~~~\n\nThe recursive boolean flag will indicate if you'd like to create directories all the directories required to reach the given path.  In our example, if \"/path/to\" didn't already exist, the call to create() would also create these. If recursive were set to false, the directory would not be created.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool createDirectory(&dirPath, bRelativeToData = true, recursive = false)\n\n<!--\n_syntax: createDirectory(&dirPath, bRelativeToData = true, recursive = false)_\n_name: createDirectory_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &dirPath, bool bRelativeToData=true, bool recursive=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a directory at a given path.\n\nCreates relative to the data path by default.\n\n\n**Parameters:**\n\ndirPath directory path\n\nbRelativeToData set to false if you are working with paths that\nare *not* in the data directory\n\nbRecursive set to true to automatically create nested directories\nas required\n\n**Returns**: true if directory was created successfully\n\n\n\n\n\n_description: _\n\nStatic method to create a directory at a given path. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool doesDirectoryExist(&dirPath, bRelativeToData = true)\n\n<!--\n_syntax: doesDirectoryExist(&dirPath, bRelativeToData = true)_\n_name: doesDirectoryExist_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &dirPath, bool bRelativeToData=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck if a directory exists at a given path.\n\nAssumes directory path is relative to the data path by default.\n\n\n**Parameters:**\n\ndirPath directory path\n\nbRelativeToData set to false if you are working with paths that\nare *not* in the data directory\n\n**Returns**: true if the directory exists\n\n\n\n\n\n_description: _\n\nReturns true if the directory at dirPath exists.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofFile >::const_iterator end()\n\n<!--\n_syntax: end()_\n_name: end_\n_returns: vector< ofFile >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool exists()\n\n<!--\n_syntax: exists()_\n_name: exists_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck if a directory exists at the current path.\n\n\n**Returns**: true if exists\n\n\n\n\n\n_description: _\n\nReturns true if the open directory exists. Great to be used in conjunction with ofDirectory::create()\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getAbsolutePath()\n\n<!--\n_syntax: getAbsolutePath()_\n_name: getAbsolutePath_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the absolute, full path of the directory,\nie. \"images\" -> \"/Users/mickey/of/apps/myApps/Donald/bin/data/images\".\n\n\\return current path as an absolute path\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFile getFile(position, mode = Reference, binary = true)\n\n<!--\n_syntax: getFile(position, mode = Reference, binary = true)_\n_name: getFile_\n_returns: ofFile_\n_returns_description: _\n_parameters: size_t position, ofFile::Mode mode=Reference, bool binary=true_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOpen an ofFile instance using the path a given position in the\ndirectory contents list.\n\nOpens as a binary file with readonly access by default.\n\n\n**Warning**: Call listDir() before using this function or the directory\ncontents list will be empty.\n\\throw Throws an out of bounds exception if position >= the number of\nlisted directory contents.\n\n**Parameters:**\n\nposition array index in the directory contents list\n\nmode file access mode depending on how you plan to use the file\n(read only, read write, etc)\n\nbinary set to false if you are working with a text file & want\nlines split at endline characters automatically\n\n**Returns**: ofFile instance\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const vector< ofFile > & getFiles()\n\n<!--\n_syntax: getFiles()_\n_name: getFiles_\n_returns: const vector< ofFile > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet files and directories in the directory contents list.\n\nDirectory contents are automatically listed.\n\n\n**Returns**: vector of files in the directory\n\n\n\n\n\n_description: _\n\nReturns a vector of ofFile objects populated by a prior call to listDir().  The files are opened in ofFile::Reference mode.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getName(position)\n\n<!--\n_syntax: getName(position)_\n_name: getName_\n_returns: string_\n_returns_description: _\n_parameters: size_t position_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the filename at a given position in the directory contents\nlist, ie. \"duck.jpg\".\n\n\n**Warning**: Call listDir() before using this function or the directory\ncontents list will be empty.\n\\throws Throws an out of bounds exception if position >= the number of\nlisted directory contents.\n\n**Parameters:**\n\nposition array index in the directory contents list\n\n**Returns**: file or directory name\n\n\n\n\n\n_description: _\n\nReturns the file name,(eg \"mypicture.png\") with extension but not the enclosing path at a given index. Position must be less than the result of numFiles().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getOriginalDirectory()\n\n<!--\n_syntax: getOriginalDirectory()_\n_name: getOriginalDirectory_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the current path\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getPath(position)\n\n<!--\n_syntax: getPath(position)_\n_name: getPath_\n_returns: string_\n_returns_description: _\n_parameters: size_t position_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the full path of the file or directory at a given position in\nthe directory contents list.\n\n\n**Warning**: Call listDir() before using this function or the directory\ncontents list will be empty.\n\\throws Throws an out of bounds exception if position >= the number of\nlisted directory contents.\n\n**Parameters:**\n\nposition array index in the directory contents list\n\n**Returns**: file or directory name including the current path\n\n\n\n\n\n_description: _\n\nReturns the absolute path,(eg \"/path/to/files/mypicture.png\"). Position must be less than the result of size().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getShowHidden()\n\n<!--\n_syntax: getShowHidden()_\n_name: getShowHidden_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck whether hidden files & directories are included when\nlisting files.\n\nMac & Linux denote hidden directories by prepending a period\n-> \".hello\".\n\n\n**Returns**: true if hidden files are shown\n\n\n\n\n\n_description: _\n\nReturns if hidden files are set to be shown or not.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofDirectory getSorted()\n\n<!--\n_syntax: getSorted()_\n_name: getSorted_\n_returns: ofDirectory_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a sorted ofDirectory instance using the current path.\n\n\n**Returns**: sorted ofDirectory instance\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isDirectory()\n\n<!--\n_syntax: isDirectory()_\n_name: isDirectory_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck if the current path is indeed a directory and not a file.\n\n\n**Returns**: true if a directory\n\n\n\n\n\n_description: _\n\nReturns true if the given path is actually a directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isDirectoryEmpty(&dirPath, bRelativeToData = true)\n\n<!--\n_syntax: isDirectoryEmpty(&dirPath, bRelativeToData = true)_\n_name: isDirectoryEmpty_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &dirPath, bool bRelativeToData=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck if a directory at a given path is empty.\n\nAssumes directory path is relative to the data path by default.\n\n\n**Parameters:**\n\ndirPath directory path\n\nbRelativeToData set to false if you are working with paths that\nare *not* in the data directory\n\n**Returns**: true if the directory is empty aka contains no files or\ndirectories\n\n\n\n\n\n_description: _\n\nReturns true if the directory at dirPath is empty.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isHidden()\n\n<!--\n_syntax: isHidden()_\n_name: isHidden_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck if the current path is hidden.\n\nWorks on Mac & Linux which denote hidden directories by prepending\na period -> \".hello\", however always returns false on Windows.\n\n\n**Returns**: true if hidden\n\n\n\n\n\n_description: _\n\nReturns true if the directory is hidden in the file system. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t listDir(&path)\n\n<!--\n_syntax: listDir(&path)_\n_name: listDir_\n_returns: size_t_\n_returns_description: _\n_parameters: const string &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOpen and read the contents of a directory.\n\nUses allowed extension whitelist to ignore unwanted file types if\nallowExt() has been called.\n\n\n**Parameters:**\n\npath directory path\n\n**Returns**: number of paths found\n\n\n\n\n\n_description: _\n\nOpens and populates the directory with files.  Returns the number of files found.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t listDir()\n\n<!--\n_syntax: listDir()_\n_name: listDir_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOpen and read the contents of the current directory.\n\nUses allowed extension whitelist to ignore unwanted file types if\nallowExt() has been called.\n\n\n**Returns**: number of paths found\n\n\n\n\n\n_description: _\n\nPopulates the directory with files. Call this after opening a directory and setting filters. After this call, size(), getPath(position), and getName(position) can be used to access the contents of the directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool moveTo(&path, bRelativeToData = true, overwrite = false)\n\n<!--\n_syntax: moveTo(&path, bRelativeToData = true, overwrite = false)_\n_name: moveTo_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &path, bool bRelativeToData=true, bool overwrite=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMove the current file or directory path to a new path.\n\nMoves relative to the data path & does *not* overwrite by default\ndoes not change the current path & assumes the new path is in the data\ndirectory.\n\n\n**Parameters:**\n\npath destination file or directory path\n\nbRelativeToData set to false if you are working with paths that\nare *not* in the data directory\n\noverwrite set to true if you want to overwrite the file or\ndirectory at the new path\n\n**Returns**: true if the copy was successful\n\n\n\n\n\n_description: _\n\nMoves the directory into another directory at path.  If bRelativeToData is set to false then path should be absolute. If overwrite is set to true any existing files with the same name will be overwritten by the move.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofDirectory(&path)\n\n<!--\n_syntax: ofDirectory(&path)_\n_name: ofDirectory_\n_returns: _\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate an ofDirectory instance and attempt to open the path.\n\n\n**Parameters:**\n\npath directory path\n\n\n\n\n\n_description: _\n\nConstructs a directory object and calls open() on the provided path.  The contents of the path are not accessible until listDir() is called.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofDirectory()\n\n<!--\n_syntax: ofDirectory()_\n_name: ofDirectory_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate an ofDirectory instance\n\nDoes not refer to a specific directory until you either open or create\na directory path.\n\n\n\n\n\n_description: _\n\nConstructs an empty directory object.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void open(&path)\n\n<!--\n_syntax: open(&path)_\n_name: open_\n_returns: void_\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOpen a directory path, clears the current file list.\n\n\n**Parameters:**\n\npath directory path\n\n\n\n\n\n_description: _\n\nOpens a path. At this point you can see if the directory exists by calling exists() but the contents of the path are not accessible until listDir() is called.\n\n\t\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void openFromCWD(&path)\n\n<!--\n_syntax: openFromCWD(&path)_\n_name: openFromCWD_\n_returns: void_\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOpen a directory path relative to the current working directory without calling ofToDataPath internally, clears the current file list.\n\n\n**Parameters:**\n\npath directory path\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator!=(&dir)\n\n<!--\n_syntax: operator!=(&dir)_\n_name: operator!=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns true if this directory and another have different paths.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator<(&dir)\n\n<!--\n_syntax: operator<(&dir)_\n_name: operator<_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns true if the right hand side directory is alphabetically after the left hand side directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator<=(&dir)\n\n<!--\n_syntax: operator<=(&dir)_\n_name: operator<=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns true if the right hand side directory is alphabetically after or equal to the left hand side directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator==(&dir)\n\n<!--\n_syntax: operator==(&dir)_\n_name: operator==_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns true if this directory and another have the same path.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator>(&dir)\n\n<!--\n_syntax: operator>(&dir)_\n_name: operator>_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns true if the left hand side directory is alphabetically after the right hand side directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator>=(&dir)\n\n<!--\n_syntax: operator>=(&dir)_\n_name: operator>=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofDirectory &dir_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns true if the left hand side directory is alphabetically after or equal to the right hand side directory;\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFile operator[](position)\n\n<!--\n_syntax: operator[](position)_\n_name: operator[]_\n_returns: ofFile_\n_returns_description: _\n_parameters: size_t position_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAccess directory contents via th array operator.\n\n\n**Warning**: Call listDir() before using this function or the directory\ncontents list will be empty.\n\\throw Throws an out of bounds exception if position >= the number of\nlisted directory contents.\n\n**Parameters:**\n\nposition array index in the directory contents list\n\n**Returns**: opened ofFile instance\n\n\n\n\n\n_description: _\n\nOperator for accessing files with array notation syntax. Call is equivalent to ofFile::getFile(position).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string path()\n\n<!--\n_syntax: path()_\n_name: path_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the current path.\n\n\n**Returns**: current path\n\n\n\n\n\n_description: _\n\nReturns the currently opened path.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofFile >::const_reverse_iterator rbegin()\n\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: vector< ofFile >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool remove(recursive)\n\n<!--\n_syntax: remove(recursive)_\n_name: remove_\n_returns: bool_\n_returns_description: _\n_parameters: bool recursive_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemoves the file or directory at the current path.\n\nDoes not remove non-empty directories by default.\n\n\n**Warning**: Be careful! This deletes a file or folder. :)\n\n**Parameters:**\n\nrecursive set to true to remove a non-empty directory and its\ncontents\n\n**Returns**: true if the path was removed successfully\n\n\n\n\n\n_description: _\n\nDeletes the directory. If recursive is set to false and this directory contains others the remove will fail.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool removeDirectory(&path, deleteIfNotEmpty, bRelativeToData = true)\n\n<!--\n_syntax: removeDirectory(&path, deleteIfNotEmpty, bRelativeToData = true)_\n_name: removeDirectory_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &path, bool deleteIfNotEmpty, bool bRelativeToData=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nremove a directory at a given path\n\n\n**Parameters:**\n\ndeleteIfNotEmpty set to true if you want to recursively delete\nthe directory *and* its contents\n\nbRelativeToData set to false if you are working with paths that\nare *not* in the data directory\n\n**Returns**: true if the path was removed successfully\n\n\n\n\n\n_description: _\n\nRemoves a directory. If deleteIfNotEmpty is set to false and the directory contains files the call will fail.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool renameTo(&path, bRelativeToData = true, overwrite = false)\n\n<!--\n_syntax: renameTo(&path, bRelativeToData = true, overwrite = false)_\n_name: renameTo_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &path, bool bRelativeToData=true, bool overwrite=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRename the current file or directory path to a new path.\n\nRenames relative to the data path & does *not* overwrite by default\ndoes not change the current path & assumes the new path is in the data\ndirectory.\n\n\n**Parameters:**\n\npath destination file or directory path\n\nbRelativeToData set to false if you are working with paths that\nare *not* in the data folder\n\noverwrite set to true if you want to overwrite the file or\ndirectory at the new path\n\n**Returns**: true if the copy was successful\n\n\n\n\n\n_description: _\n\nRenames the directory to the path path.  If bRelativeToData is set to false then path should be absolute. If overwrite is set to true any existing files with the same name will be overwritten by the rename.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofFile >::const_reverse_iterator rend()\n\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: vector< ofFile >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void reset()\n\n<!--\n_syntax: reset()_\n_name: reset_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCloses the directory.\n\nThis is for backwards compatibility with ofxDirList.\n\n\n\n\n\n_description: _\n\nResets the current directory. Equivalent to close().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setExecutable(executable = true)\n\n<!--\n_syntax: setExecutable(executable = true)_\n_name: setExecutable_\n_returns: void_\n_returns_description: _\n_parameters: bool executable=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the executable flag of the current path.\n\n\n**Parameters:**\n\nexecutable set to true to make path executable\n\n\n\n\n\n_description: _\n\nEnables or disables execution on the current open directory. If the directory is executable then it can be entered through commands such as cd.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setReadable(readable = true)\n\n<!--\n_syntax: setReadable(readable = true)_\n_name: setReadable_\n_returns: void_\n_returns_description: _\n_parameters: bool readable=true_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the readable flag of the current path.\n\n\n**Parameters:**\n\nreadable set to true to make path readable\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setShowHidden(showHidden)\n\n<!--\n_syntax: setShowHidden(showHidden)_\n_name: setShowHidden_\n_returns: void_\n_returns_description: _\n_parameters: bool showHidden_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nShow hidden files & directories when listing files?\n\nMac & Linux denote hidden directories by prepending a period\n-> \".hello\".\n\n\n**Parameters:**\n\nshowHidden set to true to show hidden files\n\n\n\n\n\n_description: _\n\nSets whether or not the call to listDir() will return hidden files.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setWriteable(writeable = true)\n\n<!--\n_syntax: setWriteable(writeable = true)_\n_name: setWriteable_\n_returns: void_\n_returns_description: _\n_parameters: bool writeable=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the writable flag of the current path.\n\n\n**Parameters:**\n\nwritable set to true to make path writable\n\n\n\n\n\n_description: _\n\nEnables or disables writeable on the current open directory.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t size()\n\n<!--\n_syntax: size()_\n_name: size_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the number of paths in the current directory list.\n\n\n**Warning**: Call listDir() before using this function or it will return 0\nsince the directory list will be empty.\n\n**Returns**: number of paths\n\n\n\n\n\n_description: _\n\nReturns the number of files contained within the directory. Set after listDir() is called.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sort()\n\n<!--\n_syntax: sort()_\n_name: sort_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSort the directory contents list alphabetically.\n\n\n**Warning**: Call listDir() before using this function or there will be\nnothing to sort.\n\n\n\n\n\n_description: _\n\nSorts the contents of the directory by filename.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void sortByDate()\n\n<!--\n_syntax: sortByDate()_\n_name: sortByDate_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSort the directory contents list by date.\n\n\n**Warning**: Call listDir() before using this function or there will be\nnothing to sort.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###vector< string > extensions\n\n<!--\n_name: extensions_\n_type: vector< string >_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFile files\n\n<!--\n_name: files_\n_type: ofFile_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###Poco myDir\n\n<!--\n_name: myDir_\n_type: Poco_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string originalDirectory\n\n<!--\n_name: originalDirectory_\n_type: string_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool showHidden\n\n<!--\n_name: showHidden_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}