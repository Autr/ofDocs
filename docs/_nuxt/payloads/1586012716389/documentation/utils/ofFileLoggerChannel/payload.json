{"data":[{"page":{"entry":{"name":"ofFileLoggerChannel","filename":"ofFileLoggerChannel.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/utils/ofFileLoggerChannel.markdown","path":"/documentation/utils/ofFileLoggerChannel","route":"/documentation/utils/ofFileLoggerChannel.markdown","dir":"../ofSite/documentation/utils","ext":"markdown","type":"page","id":2458,"parent":2446,"breadcrumbs":[2446,1968],"siblings":[],"translations":{}},"description":{"short":"<p>A logger channel that logs its messages to a log file.</p>\n","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"True","istemplated":"False","extends":"ofBaseLoggerChannel"},"methods":[{"syntax":"close()","name":"close","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>CLose the log file.</p>\n","desc":"","counter":0},{"syntax":"log(level, &module, &message)","name":"log","returns":"void","returns_description":null,"parameters":"ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>message","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"log(level, &module, *format, args)","name":"log","returns":"void","returns_description":null,"parameters":"ofLogLevel level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>module<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> va_list args","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofFileLoggerChannel(&path, append)","name":"ofFileLoggerChannel","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> append","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create an ofFileLoggerChannel with parameters.</p>\n<p><strong>Parameters:</strong></p>\n<p>path The file path for the log file.</p>\n<p>append True if the log data should be added to an existing file.</p>\n","desc":"","counter":1},{"syntax":"ofFileLoggerChannel()","name":"ofFileLoggerChannel","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create an ofFileLoggerChannel.</p>\n","desc":""},{"syntax":"setFile(&path, append = false)","name":"setFile","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> append<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the log file.</p>\n<p><strong>Parameters:</strong></p>\n<p>path The file path for the log file.</p>\n<p>append True if the log data should be added to an existing file.</p>\n","desc":"","counter":0},{"syntax":"~ofFileLoggerChannel()","name":"~ofFileLoggerChannel","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Destroy the file logger channel.</p>\n","desc":"","counter":0},{"name":"file","type":"ofFile","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; The location of the log file.</p>\n","desc":""},{}],"document":"<p>#class ofFileLoggerChannel</p>\n<!--\n_visible: True_\n_advanced: True_\n_istemplated: False_\n_extends: ofBaseLoggerChannel_\n-->\n<p>##InlineDescription</p>\n<p>A logger channel that logs its messages to a log file.</p>\n<p>##Description</p>\n<p>##Methods</p>\n<p>###void close()</p>\n<!--\n_syntax: close()_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>CLose the log file.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void log(level, &amp;module, &amp;message)</p>\n<!--\n_syntax: log(level, &module, &message)_\n_name: log_\n_returns: void_\n_returns_description: _\n_parameters: ofLogLevel level, const string &module, const string &message_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void log(level, &amp;module, *format, args)</p>\n<!--\n_syntax: log(level, &module, *format, args)_\n_name: log_\n_returns: void_\n_returns_description: _\n_parameters: ofLogLevel level, const string &module, const char *format, va_list args_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofFileLoggerChannel(&amp;path, append)</h3>\n<!--\n_syntax: ofFileLoggerChannel(&path, append)_\n_name: ofFileLoggerChannel_\n_returns: _\n_returns_description: _\n_parameters: const filesystem::path &path, bool append_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create an ofFileLoggerChannel with parameters.</p>\n<p><strong>Parameters:</strong></p>\n<p>path The file path for the log file.</p>\n<p>append True if the log data should be added to an existing file.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofFileLoggerChannel()</h3>\n<!--\n_syntax: ofFileLoggerChannel()_\n_name: ofFileLoggerChannel_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create an ofFileLoggerChannel.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setFile(&amp;path, append = false)</p>\n<!--\n_syntax: setFile(&path, append = false)_\n_name: setFile_\n_returns: void_\n_returns_description: _\n_parameters: const filesystem::path &path, bool append=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the log file.</p>\n<p><strong>Parameters:</strong></p>\n<p>path The file path for the log file.</p>\n<p>append True if the log data should be added to an existing file.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>~ofFileLoggerChannel()</h3>\n<!--\n_syntax: ~ofFileLoggerChannel()_\n_name: ~ofFileLoggerChannel_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Destroy the file logger channel.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###ofFile file</p>\n<!--\n_name: file_\n_type: ofFile_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>&lt; The location of the log file.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofFileLoggerChannel\n\n\n<!--\n_visible: True_\n_advanced: True_\n_istemplated: False_\n_extends: ofBaseLoggerChannel_\n-->\n\n##InlineDescription\n\nA logger channel that logs its messages to a log file.\n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n###void close()\n\n<!--\n_syntax: close()_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCLose the log file.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void log(level, &module, &message)\n\n<!--\n_syntax: log(level, &module, &message)_\n_name: log_\n_returns: void_\n_returns_description: _\n_parameters: ofLogLevel level, const string &module, const string &message_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void log(level, &module, *format, args)\n\n<!--\n_syntax: log(level, &module, *format, args)_\n_name: log_\n_returns: void_\n_returns_description: _\n_parameters: ofLogLevel level, const string &module, const char *format, va_list args_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofFileLoggerChannel(&path, append)\n\n<!--\n_syntax: ofFileLoggerChannel(&path, append)_\n_name: ofFileLoggerChannel_\n_returns: _\n_returns_description: _\n_parameters: const filesystem::path &path, bool append_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate an ofFileLoggerChannel with parameters.\n\n**Parameters:**\n\npath The file path for the log file.\n\nappend True if the log data should be added to an existing file.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofFileLoggerChannel()\n\n<!--\n_syntax: ofFileLoggerChannel()_\n_name: ofFileLoggerChannel_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate an ofFileLoggerChannel.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFile(&path, append = false)\n\n<!--\n_syntax: setFile(&path, append = false)_\n_name: setFile_\n_returns: void_\n_returns_description: _\n_parameters: const filesystem::path &path, bool append=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the log file.\n\n**Parameters:**\n\npath The file path for the log file.\n\nappend True if the log data should be added to an existing file.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofFileLoggerChannel()\n\n<!--\n_syntax: ~ofFileLoggerChannel()_\n_name: ~ofFileLoggerChannel_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDestroy the file logger channel.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###ofFile file\n\n<!--\n_name: file_\n_type: ofFile_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< The location of the log file.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}