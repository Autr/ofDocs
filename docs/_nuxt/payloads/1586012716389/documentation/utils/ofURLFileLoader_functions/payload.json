{"data":[{"page":{"entry":{"name":"ofURLFileLoader (functions)","filename":"ofURLFileLoader_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/utils/ofURLFileLoader_functions.markdown","path":"/documentation/utils/ofURLFileLoader_functions","route":"/documentation/utils/ofURLFileLoader_functions.markdown","dir":"../ofSite/documentation/utils","ext":"markdown","type":"page","id":2477,"parent":2446,"breadcrumbs":[2446,1968],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"ofLoadURL(&url)","name":"ofLoadURL","returns":"ofHttpResponse","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>url","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>make an HTTP GET request\nblocks until a response is returned or the request times out</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p><strong>Returns</strong>: HTTP response</p>\n","desc":"<p>Loads content from the specified URL. It makes a synchronous HTTP request and returns the response as an instance of the <code>ofHttpResponse</code> class.</p>\n<p>For example, this will retrieve the contents of a text file and print the output to the console.</p>\n<pre><code class=\"language-{.cpp}\">ofHttpResponse resp <span class=\"token operator\">=</span> <span class=\"token function\">ofLoadURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.google.com/robots.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> resp<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n","counter":0},{"syntax":"ofLoadURLAsync(&url, &name)","name":"ofLoadURLAsync","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>name","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>make an asynchronous HTTP GET request\nwill not block, placed in a queue and run using a background thread</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>name optional key to use when sorting requests\n\\return unique id for the active HTTP request</p>\n","desc":"<p>Loads content asynchronously from the specified URL and\nreturns the ID of the process. You need to listen for URL notifications\nin <code>testApp::urlResponse(ofHttpResponse&amp;)</code></p>\n<p>Step 1. Declare urlResponse in the header of the class which should receive\nnotifications:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">testApp</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseApp <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">urlResponse</span><span class=\"token punctuation\">(</span>ofHttpResponse <span class=\"token operator\">&amp;</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Step 2. Define urlResponse in the class which should receive notifications:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">urlResponse</span><span class=\"token punctuation\">(</span>ofHttpResponse <span class=\"token operator\">&amp;</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"async_req\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        img<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        loading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> response<span class=\"token punctuation\">.</span>error <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> loading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Step 3. Enable URL notifications</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ofRegisterURLNotification</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Step 4. Submit the asynchronous request</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token function\">ofLoadURLAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.openframeworks.cc/images/ofw-logo.png\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">\"async_req\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Examples based on <a href=\"http://www.slideshare.net/roxlu/openframworks-007-utils\">http://www.slideshare.net/roxlu/openframworks-007-utils</a></p>\n","counter":0},{"syntax":"ofRegisterURLNotification(*obj)","name":"ofRegisterURLNotification","returns":"void","returns_description":null,"parameters":"T <span class=\"token operator\">*</span>obj","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Registers a listener to receive notifications from <code>ofLoadURLAsync()</code> .</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ofRegisterURLNotification</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","counter":0},{"syntax":"ofRemoveAllURLRequests()","name":"ofRemoveAllURLRequests","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>remove all active HTTP requests from the queue</p>\n","desc":"<p>Removes all asynchronously loaded URL requests initiated by\n<code>ofLoadURLAsync()</code> .</p>\n","counter":0},{"syntax":"ofRemoveURLRequest(id)","name":"ofRemoveURLRequest","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> id","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>remove an active HTTP request from the queue</p>\n<p><strong>Parameters:</strong></p>\n<p>unique HTTP request id</p>\n","desc":"<p>Removes a single request initiated by <code>ofLoadURLAsync()</code> . The request is\nspecified by its ID.</p>\n","counter":0},{"syntax":"ofSaveURLAsync(&url, &path)","name":"ofSaveURLAsync","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>make an asynchronous HTTP request and save the response data to a file\nwill not block, placed in a queue and run using a background thread</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>path file path to save to</p>\n<p><strong>Returns</strong>: unique id for the active HTTP request</p>\n","desc":"<p>Asynchronously saves a file from a URL. The returned int is the id of\nthe request. This allows you to remove the request if it keeps failing, and also\nto identify when it has finished.</p>\n","counter":0},{"syntax":"ofSaveURLTo(&url, &path)","name":"ofSaveURLTo","returns":"ofHttpResponse","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>make an HTTP GET request and save the response data to a file\nblocks until a response is returned or the request times out</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>path file path to save to\n\\return HTTP response on success or failure</p>\n","desc":"<p>Retrieves a file from a remote URL and saves it locally. This is a synchronous method.</p>\n<p>See also: <code>ofSaveURLAsync()</code></p>\n","counter":0},{"syntax":"ofStopURLLoader()","name":"ofStopURLLoader","returns":"void","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>stop &amp; remove all active and waiting HTTP requests</p>\n","desc":"","counter":0},{"syntax":"ofURLResponseEvent()","name":"ofURLResponseEvent","returns":"int &","returns_description":null,"parameters":null,"version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Used internally for registering and unregistering URL notifications, and\nalso by <code>ofThreadedImageLoader</code> and <code>ofURLFileLoader</code>.</p>\n","counter":0},{"syntax":"ofUnregisterURLNotification(*obj)","name":"ofUnregisterURLNotification","returns":"void","returns_description":null,"parameters":"T <span class=\"token operator\">*</span>obj","version_started":null,"version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Unregisters a notification for an <code>ofLoadURLAsync()</code> operation.</p>\n","counter":0},{}],"document":"<p>#functions</p>\n<!--\n_visible: True_\n_advanced: False_\n-->\n<p>##Description</p>\n<!----------------------------------------------------------------------------->\n<p>###ofHttpResponse ofLoadURL(&amp;url)</p>\n<!--\n_syntax: ofLoadURL(&url)_\n_name: ofLoadURL_\n_returns: ofHttpResponse_\n_returns_description: _\n_parameters: const string &url_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>make an HTTP GET request\nblocks until a response is returned or the request times out</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p><strong>Returns</strong>: HTTP response</p>\n<p>_description: _</p>\n<p>Loads content from the specified URL. It makes a synchronous HTTP request and returns the response as an instance of the <code>ofHttpResponse</code> class.</p>\n<p>For example, this will retrieve the contents of a text file and print the output to the console.</p>\n<pre><code class=\"language-{.cpp}\">ofHttpResponse resp <span class=\"token operator\">=</span> <span class=\"token function\">ofLoadURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.google.com/robots.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> resp<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###int ofLoadURLAsync(&amp;url, &amp;name)</p>\n<!--\n_syntax: ofLoadURLAsync(&url, &name)_\n_name: ofLoadURLAsync_\n_returns: int_\n_returns_description: _\n_parameters: const string &url, const string &name_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>make an asynchronous HTTP GET request\nwill not block, placed in a queue and run using a background thread</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>name optional key to use when sorting requests\n\\return unique id for the active HTTP request</p>\n<p>_description: _</p>\n<p>Loads content asynchronously from the specified URL and\nreturns the ID of the process. You need to listen for URL notifications\nin <code>testApp::urlResponse(ofHttpResponse&amp;)</code></p>\n<p>Step 1. Declare urlResponse in the header of the class which should receive\nnotifications:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">testApp</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofBaseApp <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">void</span> <span class=\"token function\">urlResponse</span><span class=\"token punctuation\">(</span>ofHttpResponse <span class=\"token operator\">&amp;</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Step 2. Define urlResponse in the class which should receive notifications:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">urlResponse</span><span class=\"token punctuation\">(</span>ofHttpResponse <span class=\"token operator\">&amp;</span> response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> response<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">\"async_req\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        img<span class=\"token punctuation\">.</span><span class=\"token function\">loadImage</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        loading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> response<span class=\"token punctuation\">.</span>error <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> loading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Step 3. Enable URL notifications</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ofRegisterURLNotification</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Step 4. Submit the asynchronous request</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token function\">ofLoadURLAsync</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.openframeworks.cc/images/ofw-logo.png\"</span><span class=\"token punctuation\">,</span>\n                        <span class=\"token string\">\"async_req\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Examples based on <a href=\"http://www.slideshare.net/roxlu/openframworks-007-utils\">http://www.slideshare.net/roxlu/openframworks-007-utils</a></p>\n<!----------------------------------------------------------------------------->\n<p>###void ofRegisterURLNotification(*obj)</p>\n<!--\n_syntax: ofRegisterURLNotification(*obj)_\n_name: ofRegisterURLNotification_\n_returns: void_\n_returns_description: _\n_parameters: T *obj_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Registers a listener to receive notifications from <code>ofLoadURLAsync()</code> .</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ofRegisterURLNotification</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void ofRemoveAllURLRequests()</p>\n<!--\n_syntax: ofRemoveAllURLRequests()_\n_name: ofRemoveAllURLRequests_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>remove all active HTTP requests from the queue</p>\n<p>_description: _</p>\n<p>Removes all asynchronously loaded URL requests initiated by\n<code>ofLoadURLAsync()</code> .</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofRemoveURLRequest(id)</p>\n<!--\n_syntax: ofRemoveURLRequest(id)_\n_name: ofRemoveURLRequest_\n_returns: void_\n_returns_description: _\n_parameters: int id_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>remove an active HTTP request from the queue</p>\n<p><strong>Parameters:</strong></p>\n<p>unique HTTP request id</p>\n<p>_description: _</p>\n<p>Removes a single request initiated by <code>ofLoadURLAsync()</code> . The request is\nspecified by its ID.</p>\n<!----------------------------------------------------------------------------->\n<p>###int ofSaveURLAsync(&amp;url, &amp;path)</p>\n<!--\n_syntax: ofSaveURLAsync(&url, &path)_\n_name: ofSaveURLAsync_\n_returns: int_\n_returns_description: _\n_parameters: const string &url, const filesystem::path &path_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>make an asynchronous HTTP request and save the response data to a file\nwill not block, placed in a queue and run using a background thread</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>path file path to save to</p>\n<p><strong>Returns</strong>: unique id for the active HTTP request</p>\n<p>_description: _</p>\n<p>Asynchronously saves a file from a URL. The returned int is the id of\nthe request. This allows you to remove the request if it keeps failing, and also\nto identify when it has finished.</p>\n<!----------------------------------------------------------------------------->\n<p>###ofHttpResponse ofSaveURLTo(&amp;url, &amp;path)</p>\n<!--\n_syntax: ofSaveURLTo(&url, &path)_\n_name: ofSaveURLTo_\n_returns: ofHttpResponse_\n_returns_description: _\n_parameters: const string &url, const filesystem::path &path_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>make an HTTP GET request and save the response data to a file\nblocks until a response is returned or the request times out</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>path file path to save to\n\\return HTTP response on success or failure</p>\n<p>_description: _</p>\n<p>Retrieves a file from a remote URL and saves it locally. This is a synchronous method.</p>\n<p>See also: <code>ofSaveURLAsync()</code></p>\n<!----------------------------------------------------------------------------->\n<p>###void ofStopURLLoader()</p>\n<!--\n_syntax: ofStopURLLoader()_\n_name: ofStopURLLoader_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>stop &amp; remove all active and waiting HTTP requests</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int &amp; ofURLResponseEvent()</p>\n<!--\n_syntax: ofURLResponseEvent()_\n_name: ofURLResponseEvent_\n_returns: int &_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Used internally for registering and unregistering URL notifications, and\nalso by <code>ofThreadedImageLoader</code> and <code>ofURLFileLoader</code>.</p>\n<!----------------------------------------------------------------------------->\n<p>###void ofUnregisterURLNotification(*obj)</p>\n<!--\n_syntax: ofUnregisterURLNotification(*obj)_\n_name: ofUnregisterURLNotification_\n_returns: void_\n_returns_description: _\n_parameters: T *obj_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Unregisters a notification for an <code>ofLoadURLAsync()</code> operation.</p>\n<!----------------------------------------------------------------------------->\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofHttpResponse ofLoadURL(&url)\n\n<!--\n_syntax: ofLoadURL(&url)_\n_name: ofLoadURL_\n_returns: ofHttpResponse_\n_returns_description: _\n_parameters: const string &url_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nmake an HTTP GET request\nblocks until a response is returned or the request times out\n\n**Parameters:**\n\nurl HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"\n\n**Returns**: HTTP response\n\n\n\n\n\n_description: _\n\nLoads content from the specified URL. It makes a synchronous HTTP request and returns the response as an instance of the `ofHttpResponse` class.\n\nFor example, this will retrieve the contents of a text file and print the output to the console.\n\n~~~~{.cpp}\nofHttpResponse resp = ofLoadURL(\"http://www.google.com/robots.txt\");\ncout << resp.data << endl;\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofLoadURLAsync(&url, &name)\n\n<!--\n_syntax: ofLoadURLAsync(&url, &name)_\n_name: ofLoadURLAsync_\n_returns: int_\n_returns_description: _\n_parameters: const string &url, const string &name_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nmake an asynchronous HTTP GET request\nwill not block, placed in a queue and run using a background thread\n\n**Parameters:**\n\nurl HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"\n\nname optional key to use when sorting requests\n\\return unique id for the active HTTP request\n\n\n\n\n\n_description: _\n\nLoads content asynchronously from the specified URL and\nreturns the ID of the process. You need to listen for URL notifications\nin `testApp::urlResponse(ofHttpResponse&)`\n\nStep 1. Declare urlResponse in the header of the class which should receive\nnotifications:\n\n~~~~{.cpp}\nclass testApp : public ofBaseApp {\n    public:\n        void urlResponse(ofHttpResponse & response);\n}\n~~~~\n\nStep 2. Define urlResponse in the class which should receive notifications:\n\n~~~~{.cpp}\nvoid testApp::urlResponse(ofHttpResponse & response) {\n    if (response.status==200 && response.request.name == \"async_req\") {\n        img.loadImage(response.data);\n        loading = false;\n    } else {\n      cout << response.status << \" \" << response.error << endl;\n      if (response.status != -1) loading = false;\n    }\n}\n~~~~\n\nStep 3. Enable URL notifications\n\n~~~~{.cpp}\nvoid testApp::setup() {\n  ofRegisterURLNotification(this);\n}\n~~~~\n\nStep 4. Submit the asynchronous request\n~~~~{.cpp}\nint id = ofLoadURLAsync(\"http://www.openframeworks.cc/images/ofw-logo.png\",\n                        \"async_req\");\n~~~~\n\nExamples based on [http://www.slideshare.net/roxlu/openframworks-007-utils](http://www.slideshare.net/roxlu/openframworks-007-utils)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRegisterURLNotification(*obj)\n\n<!--\n_syntax: ofRegisterURLNotification(*obj)_\n_name: ofRegisterURLNotification_\n_returns: void_\n_returns_description: _\n_parameters: T *obj_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRegisters a listener to receive notifications from `ofLoadURLAsync()` .\n\n~~~~{.cpp}\nvoid testApp::setup() {\n  ofRegisterURLNotification(this);\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRemoveAllURLRequests()\n\n<!--\n_syntax: ofRemoveAllURLRequests()_\n_name: ofRemoveAllURLRequests_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nremove all active HTTP requests from the queue\n\n\n\n\n\n_description: _\n\nRemoves all asynchronously loaded URL requests initiated by\n`ofLoadURLAsync()` .\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofRemoveURLRequest(id)\n\n<!--\n_syntax: ofRemoveURLRequest(id)_\n_name: ofRemoveURLRequest_\n_returns: void_\n_returns_description: _\n_parameters: int id_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nremove an active HTTP request from the queue\n\n**Parameters:**\n\nunique HTTP request id\n\n\n\n\n\n_description: _\n\nRemoves a single request initiated by `ofLoadURLAsync()` . The request is\nspecified by its ID.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ofSaveURLAsync(&url, &path)\n\n<!--\n_syntax: ofSaveURLAsync(&url, &path)_\n_name: ofSaveURLAsync_\n_returns: int_\n_returns_description: _\n_parameters: const string &url, const filesystem::path &path_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nmake an asynchronous HTTP request and save the response data to a file\nwill not block, placed in a queue and run using a background thread\n\n**Parameters:**\n\nurl HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"\n\npath file path to save to\n\n**Returns**: unique id for the active HTTP request\n\n\n\n\n\n_description: _\n\nAsynchronously saves a file from a URL. The returned int is the id of\nthe request. This allows you to remove the request if it keeps failing, and also\nto identify when it has finished.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofHttpResponse ofSaveURLTo(&url, &path)\n\n<!--\n_syntax: ofSaveURLTo(&url, &path)_\n_name: ofSaveURLTo_\n_returns: ofHttpResponse_\n_returns_description: _\n_parameters: const string &url, const filesystem::path &path_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nmake an HTTP GET request and save the response data to a file\nblocks until a response is returned or the request times out\n\n**Parameters:**\n\nurl HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"\n\npath file path to save to\n\\return HTTP response on success or failure\n\n\n\n\n\n_description: _\n\nRetrieves a file from a remote URL and saves it locally. This is a synchronous method.\n\nSee also: `ofSaveURLAsync()`\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofStopURLLoader()\n\n<!--\n_syntax: ofStopURLLoader()_\n_name: ofStopURLLoader_\n_returns: void_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nstop & remove all active and waiting HTTP requests\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int & ofURLResponseEvent()\n\n<!--\n_syntax: ofURLResponseEvent()_\n_name: ofURLResponseEvent_\n_returns: int &_\n_returns_description: _\n_parameters: _\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nUsed internally for registering and unregistering URL notifications, and\nalso by `ofThreadedImageLoader` and `ofURLFileLoader`.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ofUnregisterURLNotification(*obj)\n\n<!--\n_syntax: ofUnregisterURLNotification(*obj)_\n_name: ofUnregisterURLNotification_\n_returns: void_\n_returns_description: _\n_parameters: T *obj_\n_version_started: _\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nUnregisters a notification for an `ofLoadURLAsync()` operation.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}