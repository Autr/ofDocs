{"data":[{"page":{"entry":{"name":"ofURLFileLoader","filename":"ofURLFileLoader.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/utils/ofURLFileLoader.markdown","path":"/documentation/utils/ofURLFileLoader","route":"/documentation/utils/ofURLFileLoader.markdown","dir":"../ofSite/documentation/utils","ext":"markdown","type":"page","id":2478,"parent":2446,"breadcrumbs":[2446,1968],"siblings":[],"translations":{}},"description":{"short":"<p>loads a file from a URL using an HTTP request</p>\n","full":"<p>This class provides several convenient methods for making HTTP requests.</p>\n<pre><code class=\"language-{.cpp}\">ofHttpResponse resp <span class=\"token operator\">=</span> <span class=\"token function\">ofLoadURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.google.com/robots.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> resp<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>clear all active HTTP requests from the queue</p>\n","desc":"","counter":0},{"syntax":"get(&url)","name":"get","returns":"ofHttpResponse","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>url","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>make an HTTP request\nblocks until a response is returned or the request times out</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;\n\\return HTTP response on success or failure</p>\n","desc":"","counter":0},{"syntax":"getAsync(&url, &name)","name":"getAsync","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>name","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>make an asynchronous HTTP request\nwill not block, placed in a queue and run using a background thread</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>name optional key to use when sorting requests\n\\return unique id for the active HTTP request</p>\n","desc":"","counter":0},{"syntax":"handleRequest(&request)","name":"handleRequest","returns":"ofHttpResponse","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofHttpRequest <span class=\"token operator\">&amp;</span>request","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>blocks until a response is returned or the request times out\n\\return HTTP response on success or failure</p>\n","desc":"","counter":0},{"syntax":"handleRequestAsync(&request)","name":"handleRequestAsync","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofHttpRequest <span class=\"token operator\">&amp;</span>request","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>this is a non-blocking version of handleRequest that will return a response in the urlResponse callback\n\\return unique id of the active HTTP request</p>\n","desc":"","counter":0},{"syntax":"ofURLFileLoader()","name":"ofURLFileLoader","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"remove(id)","name":"remove","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> id","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>remove an active HTTP request from the queue</p>\n<p><strong>Parameters:</strong></p>\n<p>unique HTTP request id</p>\n","desc":"","counter":0},{"syntax":"saveAsync(&url, &path)","name":"saveAsync","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>make an asynchronous HTTP request and save the response data to a file\nwill not block, placed in a queue and run using a background thread</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>path file path to save to</p>\n<p><strong>Returns</strong>: unique id for the active HTTP request</p>\n","desc":"","counter":0},{"syntax":"saveTo(&url, &path)","name":"saveTo","returns":"ofHttpResponse","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>make an HTTP request and save the response data to a file\nblocks until a response is returned or the request times out</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>path file path to save to\n\\return HTTP response on success or failure</p>\n","desc":"","counter":0},{"syntax":"stop()","name":"stop","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>stop &amp; remove all active and waiting HTTP requests</p>\n","desc":"","counter":0},{"short":"","desc":""},{}],"document":"<p>#class ofURLFileLoader</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>loads a file from a URL using an HTTP request</p>\n<p>##Description</p>\n<p>This class provides several convenient methods for making HTTP requests.</p>\n<pre><code class=\"language-{.cpp}\">ofHttpResponse resp <span class=\"token operator\">=</span> <span class=\"token function\">ofLoadURL</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.google.com/robots.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncout <span class=\"token operator\">&lt;&lt;</span> resp<span class=\"token punctuation\">.</span>data <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>##Methods</p>\n<p>###void clear()</p>\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>clear all active HTTP requests from the queue</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofHttpResponse get(&amp;url)</p>\n<!--\n_syntax: get(&url)_\n_name: get_\n_returns: ofHttpResponse_\n_returns_description: _\n_parameters: const string &url_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>make an HTTP request\nblocks until a response is returned or the request times out</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;\n\\return HTTP response on success or failure</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int getAsync(&amp;url, &amp;name)</p>\n<!--\n_syntax: getAsync(&url, &name)_\n_name: getAsync_\n_returns: int_\n_returns_description: _\n_parameters: const string &url, const string &name_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>make an asynchronous HTTP request\nwill not block, placed in a queue and run using a background thread</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>name optional key to use when sorting requests\n\\return unique id for the active HTTP request</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofHttpResponse handleRequest(&amp;request)</p>\n<!--\n_syntax: handleRequest(&request)_\n_name: handleRequest_\n_returns: ofHttpResponse_\n_returns_description: _\n_parameters: const ofHttpRequest &request_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>blocks until a response is returned or the request times out\n\\return HTTP response on success or failure</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int handleRequestAsync(&amp;request)</p>\n<!--\n_syntax: handleRequestAsync(&request)_\n_name: handleRequestAsync_\n_returns: int_\n_returns_description: _\n_parameters: const ofHttpRequest &request_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>this is a non-blocking version of handleRequest that will return a response in the urlResponse callback\n\\return unique id of the active HTTP request</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofURLFileLoader()</h3>\n<!--\n_syntax: ofURLFileLoader()_\n_name: ofURLFileLoader_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void remove(id)</p>\n<!--\n_syntax: remove(id)_\n_name: remove_\n_returns: void_\n_returns_description: _\n_parameters: int id_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>remove an active HTTP request from the queue</p>\n<p><strong>Parameters:</strong></p>\n<p>unique HTTP request id</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int saveAsync(&amp;url, &amp;path)</p>\n<!--\n_syntax: saveAsync(&url, &path)_\n_name: saveAsync_\n_returns: int_\n_returns_description: _\n_parameters: const string &url, const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>make an asynchronous HTTP request and save the response data to a file\nwill not block, placed in a queue and run using a background thread</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>path file path to save to</p>\n<p><strong>Returns</strong>: unique id for the active HTTP request</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofHttpResponse saveTo(&amp;url, &amp;path)</p>\n<!--\n_syntax: saveTo(&url, &path)_\n_name: saveTo_\n_returns: ofHttpResponse_\n_returns_description: _\n_parameters: const string &url, const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>make an HTTP request and save the response data to a file\nblocks until a response is returned or the request times out</p>\n<p><strong>Parameters:</strong></p>\n<p>url HTTP url to request, ie. &quot;http://somewebsite.com/someapi/someimage.jpg&quot;</p>\n<p>path file path to save to\n\\return HTTP response on success or failure</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void stop()</p>\n<!--\n_syntax: stop()_\n_name: stop_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>stop &amp; remove all active and waiting HTTP requests</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###shared_ptr&lt; ofBaseURLFileLoader &gt; impl</p>\n<!--\n_name: impl_\n_type: shared_ptr< ofBaseURLFileLoader >_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofURLFileLoader\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\nloads a file from a URL using an HTTP request\n\n\n\n\n\n##Description\n\nThis class provides several convenient methods for making HTTP requests.\n\n~~~~{.cpp}\nofHttpResponse resp = ofLoadURL(\"http://www.google.com/robots.txt\");\ncout << resp.data << endl;\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nclear all active HTTP requests from the queue\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofHttpResponse get(&url)\n\n<!--\n_syntax: get(&url)_\n_name: get_\n_returns: ofHttpResponse_\n_returns_description: _\n_parameters: const string &url_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nmake an HTTP request\nblocks until a response is returned or the request times out\n\n**Parameters:**\n\nurl HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"\n\\return HTTP response on success or failure\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getAsync(&url, &name)\n\n<!--\n_syntax: getAsync(&url, &name)_\n_name: getAsync_\n_returns: int_\n_returns_description: _\n_parameters: const string &url, const string &name_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nmake an asynchronous HTTP request\nwill not block, placed in a queue and run using a background thread\n\n**Parameters:**\n\nurl HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"\n\nname optional key to use when sorting requests\n\\return unique id for the active HTTP request\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofHttpResponse handleRequest(&request)\n\n<!--\n_syntax: handleRequest(&request)_\n_name: handleRequest_\n_returns: ofHttpResponse_\n_returns_description: _\n_parameters: const ofHttpRequest &request_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nblocks until a response is returned or the request times out\n\\return HTTP response on success or failure\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int handleRequestAsync(&request)\n\n<!--\n_syntax: handleRequestAsync(&request)_\n_name: handleRequestAsync_\n_returns: int_\n_returns_description: _\n_parameters: const ofHttpRequest &request_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nthis is a non-blocking version of handleRequest that will return a response in the urlResponse callback\n\\return unique id of the active HTTP request\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofURLFileLoader()\n\n<!--\n_syntax: ofURLFileLoader()_\n_name: ofURLFileLoader_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void remove(id)\n\n<!--\n_syntax: remove(id)_\n_name: remove_\n_returns: void_\n_returns_description: _\n_parameters: int id_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nremove an active HTTP request from the queue\n\n**Parameters:**\n\nunique HTTP request id\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int saveAsync(&url, &path)\n\n<!--\n_syntax: saveAsync(&url, &path)_\n_name: saveAsync_\n_returns: int_\n_returns_description: _\n_parameters: const string &url, const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nmake an asynchronous HTTP request and save the response data to a file\nwill not block, placed in a queue and run using a background thread\n\n**Parameters:**\n\nurl HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"\n\npath file path to save to\n\n**Returns**: unique id for the active HTTP request\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofHttpResponse saveTo(&url, &path)\n\n<!--\n_syntax: saveTo(&url, &path)_\n_name: saveTo_\n_returns: ofHttpResponse_\n_returns_description: _\n_parameters: const string &url, const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nmake an HTTP request and save the response data to a file\nblocks until a response is returned or the request times out\n\n**Parameters:**\n\nurl HTTP url to request, ie. \"http://somewebsite.com/someapi/someimage.jpg\"\n\npath file path to save to\n\\return HTTP response on success or failure\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void stop()\n\n<!--\n_syntax: stop()_\n_name: stop_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nstop & remove all active and waiting HTTP requests\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###shared_ptr< ofBaseURLFileLoader > impl\n\n<!--\n_name: impl_\n_type: shared_ptr< ofBaseURLFileLoader >_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}