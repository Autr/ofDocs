{"data":[{"page":{"entry":{"name":"detailfunc_trigonometric (functions)","filename":"detail_func_trigonometric_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/detail_func_trigonometric_functions.markdown","path":"/documentation/glm/detail_func_trigonometric_functions","route":"/documentation/glm/detail_func_trigonometric_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":2242,"parent":2235,"breadcrumbs":[2235,1968],"siblings":[],"translations":{}},"description":{},"methods":[null,{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{}],"document":"<p>#functions</p>\n<!--\n_visible: True_\n_advanced: False_\n-->\n<p>##Description</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::acos(T, &amp;x = P)</p>\n<!--\n_syntax: glm::acos(T, &x = P)_\n_name: glm::acos_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Arc cosine. Returns an angle whose sine is x.\nThe range of values returned by this function is [0, PI].\nResults are undefined if |x| &gt; 1.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/acos.xml\">GLSL acos man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::acosh(T, &amp;x = P)</p>\n<!--\n_syntax: glm::acosh(T, &x = P)_\n_name: glm::acosh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Arc hyperbolic cosine; returns the non-negative inverse\nof cosh. Results are undefined if x &lt; 1.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/acosh.xml\">GLSL acosh man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::asin(T, &amp;x = P)</p>\n<!--\n_syntax: glm::asin(T, &x = P)_\n_name: glm::asin_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Arc sine. Returns an angle whose sine is x.\nThe range of values returned by this function is [-PI/2, PI/2].\nResults are undefined if |x| &gt; 1.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/asin.xml\">GLSL asin man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::asinh(T, &amp;x = P)</p>\n<!--\n_syntax: glm::asinh(T, &x = P)_\n_name: glm::asinh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Arc hyperbolic sine; returns the inverse of sinh.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/asinh.xml\">GLSL asinh man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::atan(T, &amp;y = P, T, &amp;x = P)</p>\n<!--\n_syntax: glm::atan(T, &y = P, T, &x = P)_\n_name: glm::atan_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &y=P, const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Arc tangent. Returns an angle whose tangent is y/x.\nThe signs of x and y are used to determine what\nquadrant the angle is in. The range of values returned\nby this function is [-PI, PI]. Results are undefined\nif x and y are both 0.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/atan.xml\">GLSL atan man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::atan(T, &amp;y_over_x = P)</p>\n<!--\n_syntax: glm::atan(T, &y_over_x = P)_\n_name: glm::atan_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &y_over_x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Arc tangent. Returns an angle whose tangent is y_over_x.\nThe range of values returned by this function is [-PI/2, PI/2].</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/atan.xml\">GLSL atan man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::atanh(T, &amp;x = P)</p>\n<!--\n_syntax: glm::atanh(T, &x = P)_\n_name: glm::atanh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Arc hyperbolic tangent; returns the inverse of tanh.\nResults are undefined if abs(x) &gt;= 1.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/atanh.xml\">GLSL atanh man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::cos(T, &amp;angle = P)</p>\n<!--\n_syntax: glm::cos(T, &angle = P)_\n_name: glm::cos_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>The standard trigonometric cosine function.\nThe values returned by this function will range from [-1, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/cos.xml\">GLSL cos man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::cosh(T, &amp;angle = P)</p>\n<!--\n_syntax: glm::cosh(T, &angle = P)_\n_name: glm::cosh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the hyperbolic cosine function, (exp(x) + exp(-x)) / 2</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/cosh.xml\">GLSL cosh man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::degrees(T, &amp;radians = P)</p>\n<!--\n_syntax: glm::degrees(T, &radians = P)_\n_name: glm::degrees_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &radians=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts radians to degrees and returns the result.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/degrees.xml\">GLSL degrees man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::radians(T, &amp;degrees = P)</p>\n<!--\n_syntax: glm::radians(T, &degrees = P)_\n_name: glm::radians_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &degrees=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts degrees to radians and returns the result.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/radians.xml\">GLSL radians man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::sin(T, &amp;angle = P)</p>\n<!--\n_syntax: glm::sin(T, &angle = P)_\n_name: glm::sin_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>The standard trigonometric sine function.\nThe values returned by this function will range from [-1, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/sin.xml\">GLSL sin man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::sinh(T, &amp;angle = P)</p>\n<!--\n_syntax: glm::sinh(T, &angle = P)_\n_name: glm::sinh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the hyperbolic sine function, (exp(x) - exp(-x)) / 2</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/sinh.xml\">GLSL sinh man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::tan(T, &amp;angle = P)</p>\n<!--\n_syntax: glm::tan(T, &angle = P)_\n_name: glm::tan_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>The standard trigonometric tangent function.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/tan.xml\">GLSL tan man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::tanh(T, &amp;angle = P)</p>\n<!--\n_syntax: glm::tanh(T, &angle = P)_\n_name: glm::tanh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the hyperbolic tangent function, sinh(angle) / cosh(angle)</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/tanh.xml\">GLSL tanh man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::acos(T, &x = P)\n\n<!--\n_syntax: glm::acos(T, &x = P)_\n_name: glm::acos_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nArc cosine. Returns an angle whose sine is x.\nThe range of values returned by this function is [0, PI].\nResults are undefined if |x| > 1.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/acos.xml\">GLSL acos man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::acosh(T, &x = P)\n\n<!--\n_syntax: glm::acosh(T, &x = P)_\n_name: glm::acosh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nArc hyperbolic cosine; returns the non-negative inverse\nof cosh. Results are undefined if x < 1.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/acosh.xml\">GLSL acosh man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::asin(T, &x = P)\n\n<!--\n_syntax: glm::asin(T, &x = P)_\n_name: glm::asin_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nArc sine. Returns an angle whose sine is x.\nThe range of values returned by this function is [-PI/2, PI/2].\nResults are undefined if |x| > 1.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/asin.xml\">GLSL asin man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::asinh(T, &x = P)\n\n<!--\n_syntax: glm::asinh(T, &x = P)_\n_name: glm::asinh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nArc hyperbolic sine; returns the inverse of sinh.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/asinh.xml\">GLSL asinh man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::atan(T, &y = P, T, &x = P)\n\n<!--\n_syntax: glm::atan(T, &y = P, T, &x = P)_\n_name: glm::atan_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &y=P, const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nArc tangent. Returns an angle whose tangent is y/x.\nThe signs of x and y are used to determine what\nquadrant the angle is in. The range of values returned\nby this function is [-PI, PI]. Results are undefined\nif x and y are both 0.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/atan.xml\">GLSL atan man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::atan(T, &y_over_x = P)\n\n<!--\n_syntax: glm::atan(T, &y_over_x = P)_\n_name: glm::atan_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &y_over_x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nArc tangent. Returns an angle whose tangent is y_over_x.\nThe range of values returned by this function is [-PI/2, PI/2].\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/atan.xml\">GLSL atan man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::atanh(T, &x = P)\n\n<!--\n_syntax: glm::atanh(T, &x = P)_\n_name: glm::atanh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nArc hyperbolic tangent; returns the inverse of tanh.\nResults are undefined if abs(x) >= 1.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/atanh.xml\">GLSL atanh man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::cos(T, &angle = P)\n\n<!--\n_syntax: glm::cos(T, &angle = P)_\n_name: glm::cos_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe standard trigonometric cosine function.\nThe values returned by this function will range from [-1, 1].\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/cos.xml\">GLSL cos man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::cosh(T, &angle = P)\n\n<!--\n_syntax: glm::cosh(T, &angle = P)_\n_name: glm::cosh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the hyperbolic cosine function, (exp(x) + exp(-x)) / 2\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/cosh.xml\">GLSL cosh man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::degrees(T, &radians = P)\n\n<!--\n_syntax: glm::degrees(T, &radians = P)_\n_name: glm::degrees_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &radians=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts radians to degrees and returns the result.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/degrees.xml\">GLSL degrees man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::radians(T, &degrees = P)\n\n<!--\n_syntax: glm::radians(T, &degrees = P)_\n_name: glm::radians_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &degrees=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts degrees to radians and returns the result.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/radians.xml\">GLSL radians man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::sin(T, &angle = P)\n\n<!--\n_syntax: glm::sin(T, &angle = P)_\n_name: glm::sin_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe standard trigonometric sine function.\nThe values returned by this function will range from [-1, 1].\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/sin.xml\">GLSL sin man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::sinh(T, &angle = P)\n\n<!--\n_syntax: glm::sinh(T, &angle = P)_\n_name: glm::sinh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the hyperbolic sine function, (exp(x) - exp(-x)) / 2\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/sinh.xml\">GLSL sinh man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::tan(T, &angle = P)\n\n<!--\n_syntax: glm::tan(T, &angle = P)_\n_name: glm::tan_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe standard trigonometric tangent function.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/tan.xml\">GLSL tan man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::tanh(T, &angle = P)\n\n<!--\n_syntax: glm::tanh(T, &angle = P)_\n_name: glm::tanh_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &angle=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the hyperbolic tangent function, sinh(angle) / cosh(angle)\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/tanh.xml\">GLSL tanh man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.1 Angle and Trigonometry Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}