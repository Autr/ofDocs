{"data":[{"page":{"entry":{"name":"detailfunc_common (functions)","filename":"detail_func_common_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/detail_func_common_functions.markdown","path":"/documentation/glm/detail_func_common_functions","route":"/documentation/glm/detail_func_common_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":2236,"parent":2235,"breadcrumbs":[2235,1968],"siblings":[],"translations":{}},"description":{},"methods":[null,{"short":"","desc":""},{"syntax":"glm::abs(x)","name":"glm::abs","returns":"genType","returns_description":null,"parameters":"genType x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"glm::clamp(x, minVal, maxVal)","name":"glm::clamp","returns":"genType","returns_description":null,"parameters":"genType x<span class=\"token punctuation\">,</span> genType minVal<span class=\"token punctuation\">,</span> genType maxVal","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::floatBitsToInt(&v)","name":"glm::floatBitsToInt","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"desc":""},{"syntax":"glm::floatBitsToUint(&v)","name":"glm::floatBitsToUint","returns":"glm::uint","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"desc":""},{"desc":""},{"syntax":"glm::fma(&a, &b, &c)","name":"glm::fma","returns":"genType","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> genType <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> genType <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> genType <span class=\"token operator\">&amp;</span>c","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"short":"","desc":""},{"syntax":"glm::fract(x)","name":"glm::fract","returns":"genType","returns_description":null,"parameters":"genType x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::frexp(&x, &exp)","name":"glm::frexp","returns":"genType","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> genType <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> genIType <span class=\"token operator\">&amp;</span>exp","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::intBitsToFloat(&v)","name":"glm::intBitsToFloat","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"desc":""},{"desc":""},{"desc":""},{"syntax":"glm::ldexp(&x, &exp)","name":"glm::ldexp","returns":"genType","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> genType <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> genIType <span class=\"token operator\">&amp;</span>exp","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"glm::max(x, y)","name":"glm::max","returns":"genType","returns_description":null,"parameters":"genType x<span class=\"token punctuation\">,</span> genType y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"glm::min(x, y)","name":"glm::min","returns":"genType","returns_description":null,"parameters":"genType x<span class=\"token punctuation\">,</span> genType y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"desc":""},{"short":"","desc":""},{"syntax":"glm::mix(x, y, a)","name":"glm::mix","returns":"genTypeT","returns_description":null,"parameters":"genTypeT x<span class=\"token punctuation\">,</span> genTypeT y<span class=\"token punctuation\">,</span> genTypeU a","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"glm::mod(x, y)","name":"glm::mod","returns":"genType","returns_description":null,"parameters":"genType x<span class=\"token punctuation\">,</span> genType y","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::modf(x, &i)","name":"glm::modf","returns":"genType","returns_description":null,"parameters":"genType x<span class=\"token punctuation\">,</span> genType <span class=\"token operator\">&amp;</span>i","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"desc":""},{"desc":""},{"desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"glm::smoothstep(edge0, edge1, x)","name":"glm::smoothstep","returns":"genType","returns_description":null,"parameters":"genType edge0<span class=\"token punctuation\">,</span> genType edge1<span class=\"token punctuation\">,</span> genType x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"desc":""},{"desc":""},{"syntax":"glm::step(edge, x)","name":"glm::step","returns":"genType","returns_description":null,"parameters":"genType edge<span class=\"token punctuation\">,</span> genType x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"desc":""},{"syntax":"glm::uintBitsToFloat(&v)","name":"glm::uintBitsToFloat","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>uint <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"desc":""},{}],"document":"<p>#functions</p>\n<!--\n_visible: True_\n_advanced: False_\n-->\n<p>##Description</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::abs(T, &amp;x = P)</p>\n<!--\n_syntax: glm::abs(T, &x = P)_\n_name: glm::abs_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::abs(x)</p>\n<!--\n_syntax: glm::abs(x)_\n_name: glm::abs_\n_returns: genType_\n_returns_description: _\n_parameters: genType x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns x if x &gt;= 0; otherwise, it returns -x.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType floating-point or signed integer; scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/abs.xml\">GLSL abs man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::ceil(T, &amp;x = P)</p>\n<!--\n_syntax: glm::ceil(T, &x = P)_\n_name: glm::ceil_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a value equal to the nearest integer\nthat is greater than or equal to x.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/ceil.xml\">GLSL ceil man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::clamp(T, &amp;x = P, T, &amp;minVal = P, T, &amp;maxVal = P)</p>\n<!--\n_syntax: glm::clamp(T, &x = P, T, &minVal = P, T, &maxVal = P)_\n_name: glm::clamp_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &minVal=P, const vecType< T, P > &maxVal=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::clamp(T, &amp;x = P, minVal, maxVal)</p>\n<!--\n_syntax: glm::clamp(T, &x = P, minVal, maxVal)_\n_name: glm::clamp_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, T minVal, T maxVal_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::clamp(x, minVal, maxVal)</p>\n<!--\n_syntax: glm::clamp(x, minVal, maxVal)_\n_name: glm::clamp_\n_returns: genType_\n_returns_description: _\n_parameters: genType x, genType minVal, genType maxVal_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns min(max(x, minVal), maxVal) for each component in x\nusing the floating-point values minVal and maxVal.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer; scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/clamp.xml\">GLSL clamp man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int glm::floatBitsToInt(&amp;v)</p>\n<!--\n_syntax: glm::floatBitsToInt(&v)_\n_name: glm::floatBitsToInt_\n_returns: int_\n_returns_description: _\n_parameters: const float &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a signed integer value representing\nthe encoding of a floating-point value. The floating-point\nvalue's bit-level representation is preserved.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToInt.xml\">GLSL floatBitsToInt man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; int, P &gt; glm::floatBitsToInt(float, &amp;v = P)</p>\n<!--\n_syntax: glm::floatBitsToInt(float, &v = P)_\n_name: glm::floatBitsToInt_\n_returns: vecType< int, P >_\n_returns_description: _\n_parameters: const vecType< float, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a signed integer value representing\nthe encoding of a floating-point value. The floatingpoint\nvalue's bit-level representation is preserved.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToInt.xml\">GLSL floatBitsToInt man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::uint glm::floatBitsToUint(&amp;v)</p>\n<!--\n_syntax: glm::floatBitsToUint(&v)_\n_name: glm::floatBitsToUint_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const float &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a unsigned integer value representing\nthe encoding of a floating-point value. The floatingpoint\nvalue's bit-level representation is preserved.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToUint.xml\">GLSL floatBitsToUint man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; glm::uint, P &gt; glm::floatBitsToUint(float, &amp;v = P)</p>\n<!--\n_syntax: glm::floatBitsToUint(float, &v = P)_\n_name: glm::floatBitsToUint_\n_returns: vecType< glm::uint, P >_\n_returns_description: _\n_parameters: const vecType< float, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a unsigned integer value representing\nthe encoding of a floating-point value. The floatingpoint\nvalue's bit-level representation is preserved.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToUint.xml\">GLSL floatBitsToUint man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::floor(T, &amp;x = P)</p>\n<!--\n_syntax: glm::floor(T, &x = P)_\n_name: glm::floor_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a value equal to the nearest integer that is less then or equal to x.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/floor.xml\">GLSL floor man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::fma(&amp;a, &amp;b, &amp;c)</p>\n<!--\n_syntax: glm::fma(&a, &b, &c)_\n_name: glm::fma_\n_returns: genType_\n_returns_description: _\n_parameters: const genType &a, const genType &b, const genType &c_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Computes and returns a * b + c.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/fma.xml\">GLSL fma man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::fract(T, &amp;x = P)</p>\n<!--\n_syntax: glm::fract(T, &x = P)_\n_name: glm::fract_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::fract(x)</p>\n<!--\n_syntax: glm::fract(x)_\n_name: glm::fract_\n_returns: genType_\n_returns_description: _\n_parameters: genType x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Return x - floor(x).</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/fract.xml\">GLSL fract man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::frexp(&amp;x, &amp;exp)</p>\n<!--\n_syntax: glm::frexp(&x, &exp)_\n_name: glm::frexp_\n_returns: genType_\n_returns_description: _\n_parameters: const genType &x, genIType &exp_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Splits x into a floating-point significand in the range\n[0.5, 1.0) and an integral exponent of two, such that:\nx = significand * exp(2, exponent)</p>\n<p>The significand is returned by the function and the\nexponent is returned in the parameter exp. For a\nfloating-point value of zero, the significant and exponent\nare both zero. For a floating-point value that is an\ninfinity or is not a number, the results are undefined.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/frexp.xml\">GLSL frexp man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float glm::intBitsToFloat(&amp;v)</p>\n<!--\n_syntax: glm::intBitsToFloat(&v)_\n_name: glm::intBitsToFloat_\n_returns: float_\n_returns_description: _\n_parameters: const int &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a floating-point value corresponding to a signed\ninteger encoding of a floating-point value.\nIf an inf or NaN is passed in, it will not signal, and the\nresulting floating point value is unspecified. Otherwise,\nthe bit-level representation is preserved.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/intBitsToFloat.xml\">GLSL intBitsToFloat man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; float, P &gt; glm::intBitsToFloat(int, &amp;v = P)</p>\n<!--\n_syntax: glm::intBitsToFloat(int, &v = P)_\n_name: glm::intBitsToFloat_\n_returns: vecType< float, P >_\n_returns_description: _\n_parameters: const vecType< int, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a floating-point value corresponding to a signed\ninteger encoding of a floating-point value.\nIf an inf or NaN is passed in, it will not signal, and the\nresulting floating point value is unspecified. Otherwise,\nthe bit-level representation is preserved.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/intBitsToFloat.xml\">GLSL intBitsToFloat man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; bool, P &gt; glm::isinf(T, &amp;x = P)</p>\n<!--\n_syntax: glm::isinf(T, &x = P)_\n_name: glm::isinf_\n_returns: vecType< bool, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns true if x holds a positive infinity or negative\ninfinity representation in the underlying implementation's\nset of floating point representations. Returns false\notherwise, including for implementations with no infinity\nrepresentations.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/isinf.xml\">GLSL isinf man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; bool, P &gt; glm::isnan(T, &amp;x = P)</p>\n<!--\n_syntax: glm::isnan(T, &x = P)_\n_name: glm::isnan_\n_returns: vecType< bool, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns true if x holds a NaN (not a number)\nrepresentation in the underlying implementation's set of\nfloating point representations. Returns false otherwise,\nincluding for implementations with no NaN\nrepresentations.</p>\n<p>/!\\ When using compiler fast math, this function may fail.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/isnan.xml\">GLSL isnan man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::ldexp(&amp;x, &amp;exp)</p>\n<!--\n_syntax: glm::ldexp(&x, &exp)_\n_name: glm::ldexp_\n_returns: genType_\n_returns_description: _\n_parameters: const genType &x, const genIType &exp_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Builds a floating-point number from x and the\ncorresponding integral exponent of two in exp, returning:\nsignificand * exp(2, exponent)</p>\n<p>If this product is too large to be represented in the\nfloating-point type, the result is undefined.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/ldexp.xml\">GLSL ldexp man page</a>;</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::max(T, &amp;x = P, T, &amp;y = P)</p>\n<!--\n_syntax: glm::max(T, &x = P, T, &y = P)_\n_name: glm::max_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::max(T, &amp;x = P, y)</p>\n<!--\n_syntax: glm::max(T, &x = P, y)_\n_name: glm::max_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, T y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::max(x, y)</p>\n<!--\n_syntax: glm::max(x, y)_\n_name: glm::max_\n_returns: genType_\n_returns_description: _\n_parameters: genType x, genType y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns y if x &lt; y; otherwise, it returns x.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer; scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/max.xml\">GLSL max man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::min(T, &amp;x = P, T, &amp;y = P)</p>\n<!--\n_syntax: glm::min(T, &x = P, T, &y = P)_\n_name: glm::min_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::min(T, &amp;x = P, y)</p>\n<!--\n_syntax: glm::min(T, &x = P, y)_\n_name: glm::min_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, T y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::min(x, y)</p>\n<!--\n_syntax: glm::min(x, y)_\n_name: glm::min_\n_returns: genType_\n_returns_description: _\n_parameters: genType x, genType y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns y if y &lt; x; otherwise, it returns x.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer; scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/min.xml\">GLSL min man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::mix(T, &amp;x = P, T, &amp;y = P, U, &amp;a = P)</p>\n<!--\n_syntax: glm::mix(T, &x = P, T, &y = P, U, &a = P)_\n_name: glm::mix_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &y=P, const vecType< U, P > &a=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>If genTypeU is a floating scalar or vector:\nReturns x * (1.0 - a) + y * a, i.e., the linear blend of\nx and y using the floating-point value a.\nThe value for a is not restricted to the range [0, 1].</p>\n<p>If genTypeU is a boolean scalar or vector:\nSelects which vector each returned component comes\nfrom. For a component of <a> that is false, the\ncorresponding component of x is returned. For a\ncomponent of a that is true, the corresponding\ncomponent of y is returned. Components of x and y that\nare not selected are allowed to be invalid floating point\nvalues and will have no effect on the results. Thus, this\nprovides different functionality than\ngenType mix(genType x, genType y, genType(a))\nwhere a is a Boolean vector.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/mix.xml\">GLSL mix man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p><strong>Parameters:</strong></p>\n<p>x Value to interpolate.</p>\n<p>y Value to interpolate.</p>\n<p>a Interpolant.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genTypeT Floating point scalar or vector.</p>\n<p>genTypeU Floating point or boolean scalar or vector. It can't be a vector if it is the length of genTypeT.</p>\n<pre><code class=\"language-cpp\">\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;glm/glm.hpp></span></span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">float</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> b<span class=\"token punctuation\">;</span>\nglm<span class=\"token operator\">::</span>dvec3 e<span class=\"token punctuation\">;</span>\nglm<span class=\"token operator\">::</span>dvec3 f<span class=\"token punctuation\">;</span>\nglm<span class=\"token operator\">::</span>vec4 g<span class=\"token punctuation\">;</span>\nglm<span class=\"token operator\">::</span>vec4 h<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nglm<span class=\"token operator\">::</span>vec4 r <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">mix</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Interpolate with a floating-point scalar two vectors.</span>\nglm<span class=\"token operator\">::</span>vec4 s <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">mix</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Teturns g or h;</span>\nglm<span class=\"token operator\">::</span>dvec3 t <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">mix</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Types of the third parameter is not required to match with the first and the second.</span>\nglm<span class=\"token operator\">::</span>vec4 u <span class=\"token operator\">=</span> glm<span class=\"token operator\">::</span><span class=\"token function\">mix</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> h<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// Interpolations can be perform per component with a vector for the last parameter.</span>\n\n</code></pre>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::mix(T, &amp;x = P, T, &amp;y = P, a)</p>\n<!--\n_syntax: glm::mix(T, &x = P, T, &y = P, a)_\n_name: glm::mix_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &y=P, U a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genTypeT glm::mix(x, y, a)</p>\n<!--\n_syntax: glm::mix(x, y, a)_\n_name: glm::mix_\n_returns: genTypeT_\n_returns_description: _\n_parameters: genTypeT x, genTypeT y, genTypeU a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::mod(T, &amp;x = P, T, &amp;y = P)</p>\n<!--\n_syntax: glm::mod(T, &x = P, T, &y = P)_\n_name: glm::mod_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::mod(T, &amp;x = P, y)</p>\n<!--\n_syntax: glm::mod(T, &x = P, y)_\n_name: glm::mod_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, T y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::mod(x, y)</p>\n<!--\n_syntax: glm::mod(x, y)_\n_name: glm::mod_\n_returns: genType_\n_returns_description: _\n_parameters: genType x, genType y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Modulus. Returns x - y * floor(x / y)\nfor each component in x using the floating point value y.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/mod.xml\">GLSL mod man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::modf(x, &amp;i)</p>\n<!--\n_syntax: glm::modf(x, &i)_\n_name: glm::modf_\n_returns: genType_\n_returns_description: _\n_parameters: genType x, genType &i_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the fractional part of x and sets i to the integer\npart (as a whole number floating point value). Both the\nreturn value and the output parameter will have the same\nsign as x.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/modf.xml\">GLSL modf man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::round(T, &amp;x = P)</p>\n<!--\n_syntax: glm::round(T, &x = P)_\n_name: glm::round_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a value equal to the nearest integer to x.\nThe fraction 0.5 will round in a direction chosen by the\nimplementation, presumably the direction that is fastest.\nThis includes the possibility that round(x) returns the\nsame value as roundEven(x) for all values of x.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/round.xml\">GLSL round man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::roundEven(T, &amp;x = P)</p>\n<!--\n_syntax: glm::roundEven(T, &x = P)_\n_name: glm::roundEven_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a value equal to the nearest integer to x.\nA fractional part of 0.5 will round toward the nearest even\ninteger. (Both 3.5 and 4.5 for x will return 4.0.)</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/roundEven.xml\">GLSL roundEven man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p><strong>See also</strong>: <a href=\"http://developer.amd.com/documentation/articles/pages/New-Round-to-Even-Technique.aspx\">New round to even technique</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::sign(T, &amp;x = P)</p>\n<!--\n_syntax: glm::sign(T, &x = P)_\n_name: glm::sign_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns 1.0 if x &gt; 0, 0.0 if x == 0, or -1.0 if x &lt; 0.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or signed integer; scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/sign.xml\">GLSL sign man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::smoothstep(T, &amp;edge0 = P, T, &amp;edge1 = P, T, &amp;x = P)</p>\n<!--\n_syntax: glm::smoothstep(T, &edge0 = P, T, &edge1 = P, T, &x = P)_\n_name: glm::smoothstep_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &edge0=P, const vecType< T, P > &edge1=P, const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::smoothstep(edge0, edge1, T, &amp;x = P)</p>\n<!--\n_syntax: glm::smoothstep(edge0, edge1, T, &x = P)_\n_name: glm::smoothstep_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: T edge0, T edge1, const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::smoothstep(edge0, edge1, x)</p>\n<!--\n_syntax: glm::smoothstep(edge0, edge1, x)_\n_name: glm::smoothstep_\n_returns: genType_\n_returns_description: _\n_parameters: genType edge0, genType edge1, genType x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns 0.0 if x &lt;= edge0 and 1.0 if x &gt;= edge1 and\nperforms smooth Hermite interpolation between 0 and 1\nwhen edge0 &lt; x &lt; edge1. This is useful in cases where\nyou would want a threshold function with a smooth\ntransition. This is equivalent to:\ngenType t;\nt = clamp ((x - edge0) / (edge1 - edge0), 0, 1);\nreturn t * t * (3 - 2 * t);\nResults are undefined if edge0 &gt;= edge1.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/smoothstep.xml\">GLSL smoothstep man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::step(T, &amp;edge = P, T, &amp;x = P)</p>\n<!--\n_syntax: glm::step(T, &edge = P, T, &x = P)_\n_name: glm::step_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &edge=P, const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns 0.0 if x &lt; edge, otherwise it returns 1.0.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/step.xml\">GLSL step man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::step(edge, T, &amp;x = P)</p>\n<!--\n_syntax: glm::step(edge, T, &x = P)_\n_name: glm::step_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: T edge, const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns 0.0 if x &lt; edge, otherwise it returns 1.0.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/step.xml\">GLSL step man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###genType glm::step(edge, x)</p>\n<!--\n_syntax: glm::step(edge, x)_\n_name: glm::step_\n_returns: genType_\n_returns_description: _\n_parameters: genType edge, genType x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns 0.0 if x &lt; edge, otherwise it returns 1.0 for each component of a genType.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/step.xml\">GLSL step man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; T, P &gt; glm::trunc(T, &amp;x = P)</p>\n<!--\n_syntax: glm::trunc(T, &x = P)_\n_name: glm::trunc_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a value equal to the nearest integer to x\nwhose absolute value is not larger than the absolute value of x.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/trunc.xml\">GLSL trunc man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float glm::uintBitsToFloat(&amp;v)</p>\n<!--\n_syntax: glm::uintBitsToFloat(&v)_\n_name: glm::uintBitsToFloat_\n_returns: float_\n_returns_description: _\n_parameters: const glm::uint &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a floating-point value corresponding to a\nunsigned integer encoding of a floating-point value.\nIf an inf or NaN is passed in, it will not signal, and the\nresulting floating point value is unspecified. Otherwise,\nthe bit-level representation is preserved.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/uintBitsToFloat.xml\">GLSL uintBitsToFloat man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vecType&lt; float, P &gt; glm::uintBitsToFloat(glm::uint, &amp;v = P)</p>\n<!--\n_syntax: glm::uintBitsToFloat(glm::uint, &v = P)_\n_name: glm::uintBitsToFloat_\n_returns: vecType< float, P >_\n_returns_description: _\n_parameters: const vecType< glm::uint, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a floating-point value corresponding to a\nunsigned integer encoding of a floating-point value.\nIf an inf or NaN is passed in, it will not signal, and the\nresulting floating point value is unspecified. Otherwise,\nthe bit-level representation is preserved.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/uintBitsToFloat.xml\">GLSL uintBitsToFloat man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::abs(T, &x = P)\n\n<!--\n_syntax: glm::abs(T, &x = P)_\n_name: glm::abs_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::abs(x)\n\n<!--\n_syntax: glm::abs(x)_\n_name: glm::abs_\n_returns: genType_\n_returns_description: _\n_parameters: genType x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns x if x >= 0; otherwise, it returns -x.\n\n\n**Type parameters:**\n\ngenType floating-point or signed integer; scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/abs.xml\">GLSL abs man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::ceil(T, &x = P)\n\n<!--\n_syntax: glm::ceil(T, &x = P)_\n_name: glm::ceil_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a value equal to the nearest integer\nthat is greater than or equal to x.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/ceil.xml\">GLSL ceil man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::clamp(T, &x = P, T, &minVal = P, T, &maxVal = P)\n\n<!--\n_syntax: glm::clamp(T, &x = P, T, &minVal = P, T, &maxVal = P)_\n_name: glm::clamp_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &minVal=P, const vecType< T, P > &maxVal=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::clamp(T, &x = P, minVal, maxVal)\n\n<!--\n_syntax: glm::clamp(T, &x = P, minVal, maxVal)_\n_name: glm::clamp_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, T minVal, T maxVal_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::clamp(x, minVal, maxVal)\n\n<!--\n_syntax: glm::clamp(x, minVal, maxVal)_\n_name: glm::clamp_\n_returns: genType_\n_returns_description: _\n_parameters: genType x, genType minVal, genType maxVal_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns min(max(x, minVal), maxVal) for each component in x\nusing the floating-point values minVal and maxVal.\n\n\n**Type parameters:**\n\ngenType Floating-point or integer; scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/clamp.xml\">GLSL clamp man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int glm::floatBitsToInt(&v)\n\n<!--\n_syntax: glm::floatBitsToInt(&v)_\n_name: glm::floatBitsToInt_\n_returns: int_\n_returns_description: _\n_parameters: const float &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a signed integer value representing\nthe encoding of a floating-point value. The floating-point\nvalue's bit-level representation is preserved.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToInt.xml\">GLSL floatBitsToInt man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< int, P > glm::floatBitsToInt(float, &v = P)\n\n<!--\n_syntax: glm::floatBitsToInt(float, &v = P)_\n_name: glm::floatBitsToInt_\n_returns: vecType< int, P >_\n_returns_description: _\n_parameters: const vecType< float, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a signed integer value representing\nthe encoding of a floating-point value. The floatingpoint\nvalue's bit-level representation is preserved.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToInt.xml\">GLSL floatBitsToInt man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint glm::floatBitsToUint(&v)\n\n<!--\n_syntax: glm::floatBitsToUint(&v)_\n_name: glm::floatBitsToUint_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const float &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a unsigned integer value representing\nthe encoding of a floating-point value. The floatingpoint\nvalue's bit-level representation is preserved.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToUint.xml\">GLSL floatBitsToUint man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< glm::uint, P > glm::floatBitsToUint(float, &v = P)\n\n<!--\n_syntax: glm::floatBitsToUint(float, &v = P)_\n_name: glm::floatBitsToUint_\n_returns: vecType< glm::uint, P >_\n_returns_description: _\n_parameters: const vecType< float, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a unsigned integer value representing\nthe encoding of a floating-point value. The floatingpoint\nvalue's bit-level representation is preserved.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/floatBitsToUint.xml\">GLSL floatBitsToUint man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::floor(T, &x = P)\n\n<!--\n_syntax: glm::floor(T, &x = P)_\n_name: glm::floor_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a value equal to the nearest integer that is less then or equal to x.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/floor.xml\">GLSL floor man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::fma(&a, &b, &c)\n\n<!--\n_syntax: glm::fma(&a, &b, &c)_\n_name: glm::fma_\n_returns: genType_\n_returns_description: _\n_parameters: const genType &a, const genType &b, const genType &c_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nComputes and returns a * b + c.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/fma.xml\">GLSL fma man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::fract(T, &x = P)\n\n<!--\n_syntax: glm::fract(T, &x = P)_\n_name: glm::fract_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::fract(x)\n\n<!--\n_syntax: glm::fract(x)_\n_name: glm::fract_\n_returns: genType_\n_returns_description: _\n_parameters: genType x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn x - floor(x).\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/fract.xml\">GLSL fract man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::frexp(&x, &exp)\n\n<!--\n_syntax: glm::frexp(&x, &exp)_\n_name: glm::frexp_\n_returns: genType_\n_returns_description: _\n_parameters: const genType &x, genIType &exp_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSplits x into a floating-point significand in the range\n[0.5, 1.0) and an integral exponent of two, such that:\nx = significand * exp(2, exponent)\n\nThe significand is returned by the function and the\nexponent is returned in the parameter exp. For a\nfloating-point value of zero, the significant and exponent\nare both zero. For a floating-point value that is an\ninfinity or is not a number, the results are undefined.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/frexp.xml\">GLSL frexp man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::intBitsToFloat(&v)\n\n<!--\n_syntax: glm::intBitsToFloat(&v)_\n_name: glm::intBitsToFloat_\n_returns: float_\n_returns_description: _\n_parameters: const int &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a floating-point value corresponding to a signed\ninteger encoding of a floating-point value.\nIf an inf or NaN is passed in, it will not signal, and the\nresulting floating point value is unspecified. Otherwise,\nthe bit-level representation is preserved.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/intBitsToFloat.xml\">GLSL intBitsToFloat man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< float, P > glm::intBitsToFloat(int, &v = P)\n\n<!--\n_syntax: glm::intBitsToFloat(int, &v = P)_\n_name: glm::intBitsToFloat_\n_returns: vecType< float, P >_\n_returns_description: _\n_parameters: const vecType< int, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a floating-point value corresponding to a signed\ninteger encoding of a floating-point value.\nIf an inf or NaN is passed in, it will not signal, and the\nresulting floating point value is unspecified. Otherwise,\nthe bit-level representation is preserved.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/intBitsToFloat.xml\">GLSL intBitsToFloat man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< bool, P > glm::isinf(T, &x = P)\n\n<!--\n_syntax: glm::isinf(T, &x = P)_\n_name: glm::isinf_\n_returns: vecType< bool, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if x holds a positive infinity or negative\ninfinity representation in the underlying implementation's\nset of floating point representations. Returns false\notherwise, including for implementations with no infinity\nrepresentations.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/isinf.xml\">GLSL isinf man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< bool, P > glm::isnan(T, &x = P)\n\n<!--\n_syntax: glm::isnan(T, &x = P)_\n_name: glm::isnan_\n_returns: vecType< bool, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if x holds a NaN (not a number)\nrepresentation in the underlying implementation's set of\nfloating point representations. Returns false otherwise,\nincluding for implementations with no NaN\nrepresentations.\n\n/!\\ When using compiler fast math, this function may fail.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/isnan.xml\">GLSL isnan man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::ldexp(&x, &exp)\n\n<!--\n_syntax: glm::ldexp(&x, &exp)_\n_name: glm::ldexp_\n_returns: genType_\n_returns_description: _\n_parameters: const genType &x, const genIType &exp_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuilds a floating-point number from x and the\ncorresponding integral exponent of two in exp, returning:\nsignificand * exp(2, exponent)\n\nIf this product is too large to be represented in the\nfloating-point type, the result is undefined.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/ldexp.xml\">GLSL ldexp man page</a>;\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::max(T, &x = P, T, &y = P)\n\n<!--\n_syntax: glm::max(T, &x = P, T, &y = P)_\n_name: glm::max_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::max(T, &x = P, y)\n\n<!--\n_syntax: glm::max(T, &x = P, y)_\n_name: glm::max_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, T y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::max(x, y)\n\n<!--\n_syntax: glm::max(x, y)_\n_name: glm::max_\n_returns: genType_\n_returns_description: _\n_parameters: genType x, genType y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns y if x < y; otherwise, it returns x.\n\n\n**Type parameters:**\n\ngenType Floating-point or integer; scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/max.xml\">GLSL max man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::min(T, &x = P, T, &y = P)\n\n<!--\n_syntax: glm::min(T, &x = P, T, &y = P)_\n_name: glm::min_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::min(T, &x = P, y)\n\n<!--\n_syntax: glm::min(T, &x = P, y)_\n_name: glm::min_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, T y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::min(x, y)\n\n<!--\n_syntax: glm::min(x, y)_\n_name: glm::min_\n_returns: genType_\n_returns_description: _\n_parameters: genType x, genType y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns y if y < x; otherwise, it returns x.\n\n\n**Type parameters:**\n\ngenType Floating-point or integer; scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/min.xml\">GLSL min man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::mix(T, &x = P, T, &y = P, U, &a = P)\n\n<!--\n_syntax: glm::mix(T, &x = P, T, &y = P, U, &a = P)_\n_name: glm::mix_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &y=P, const vecType< U, P > &a=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nIf genTypeU is a floating scalar or vector:\nReturns x * (1.0 - a) + y * a, i.e., the linear blend of\nx and y using the floating-point value a.\nThe value for a is not restricted to the range [0, 1].\n\nIf genTypeU is a boolean scalar or vector:\nSelects which vector each returned component comes\nfrom. For a component of <a> that is false, the\ncorresponding component of x is returned. For a\ncomponent of a that is true, the corresponding\ncomponent of y is returned. Components of x and y that\nare not selected are allowed to be invalid floating point\nvalues and will have no effect on the results. Thus, this\nprovides different functionality than\ngenType mix(genType x, genType y, genType(a))\nwhere a is a Boolean vector.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/mix.xml\">GLSL mix man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n**Parameters:**\n\nx Value to interpolate.\n\ny Value to interpolate.\n\na Interpolant.\n\n\n**Type parameters:**\n\ngenTypeT Floating point scalar or vector.\n\ngenTypeU Floating point or boolean scalar or vector. It can't be a vector if it is the length of genTypeT.\n\n```cpp\n\n#include <glm/glm.hpp>\n...\nfloat a;\nbool b;\nglm::dvec3 e;\nglm::dvec3 f;\nglm::vec4 g;\nglm::vec4 h;\n...\nglm::vec4 r = glm::mix(g, h, a); // Interpolate with a floating-point scalar two vectors.\nglm::vec4 s = glm::mix(g, h, b); // Teturns g or h;\nglm::dvec3 t = glm::mix(e, f, a); // Types of the third parameter is not required to match with the first and the second.\nglm::vec4 u = glm::mix(g, h, r); // Interpolations can be perform per component with a vector for the last parameter.\n\n```\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::mix(T, &x = P, T, &y = P, a)\n\n<!--\n_syntax: glm::mix(T, &x = P, T, &y = P, a)_\n_name: glm::mix_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &y=P, U a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genTypeT glm::mix(x, y, a)\n\n<!--\n_syntax: glm::mix(x, y, a)_\n_name: glm::mix_\n_returns: genTypeT_\n_returns_description: _\n_parameters: genTypeT x, genTypeT y, genTypeU a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::mod(T, &x = P, T, &y = P)\n\n<!--\n_syntax: glm::mod(T, &x = P, T, &y = P)_\n_name: glm::mod_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, const vecType< T, P > &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::mod(T, &x = P, y)\n\n<!--\n_syntax: glm::mod(T, &x = P, y)_\n_name: glm::mod_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P, T y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::mod(x, y)\n\n<!--\n_syntax: glm::mod(x, y)_\n_name: glm::mod_\n_returns: genType_\n_returns_description: _\n_parameters: genType x, genType y_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nModulus. Returns x - y * floor(x / y)\nfor each component in x using the floating point value y.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/mod.xml\">GLSL mod man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::modf(x, &i)\n\n<!--\n_syntax: glm::modf(x, &i)_\n_name: glm::modf_\n_returns: genType_\n_returns_description: _\n_parameters: genType x, genType &i_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the fractional part of x and sets i to the integer\npart (as a whole number floating point value). Both the\nreturn value and the output parameter will have the same\nsign as x.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/modf.xml\">GLSL modf man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::round(T, &x = P)\n\n<!--\n_syntax: glm::round(T, &x = P)_\n_name: glm::round_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a value equal to the nearest integer to x.\nThe fraction 0.5 will round in a direction chosen by the\nimplementation, presumably the direction that is fastest.\nThis includes the possibility that round(x) returns the\nsame value as roundEven(x) for all values of x.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/round.xml\">GLSL round man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::roundEven(T, &x = P)\n\n<!--\n_syntax: glm::roundEven(T, &x = P)_\n_name: glm::roundEven_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a value equal to the nearest integer to x.\nA fractional part of 0.5 will round toward the nearest even\ninteger. (Both 3.5 and 4.5 for x will return 4.0.)\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/roundEven.xml\">GLSL roundEven man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n**See also**: <a href=\"http://developer.amd.com/documentation/articles/pages/New-Round-to-Even-Technique.aspx\">New round to even technique</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::sign(T, &x = P)\n\n<!--\n_syntax: glm::sign(T, &x = P)_\n_name: glm::sign_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns 1.0 if x > 0, 0.0 if x == 0, or -1.0 if x < 0.\n\n\n**Type parameters:**\n\ngenType Floating-point or signed integer; scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/sign.xml\">GLSL sign man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::smoothstep(T, &edge0 = P, T, &edge1 = P, T, &x = P)\n\n<!--\n_syntax: glm::smoothstep(T, &edge0 = P, T, &edge1 = P, T, &x = P)_\n_name: glm::smoothstep_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &edge0=P, const vecType< T, P > &edge1=P, const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::smoothstep(edge0, edge1, T, &x = P)\n\n<!--\n_syntax: glm::smoothstep(edge0, edge1, T, &x = P)_\n_name: glm::smoothstep_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: T edge0, T edge1, const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::smoothstep(edge0, edge1, x)\n\n<!--\n_syntax: glm::smoothstep(edge0, edge1, x)_\n_name: glm::smoothstep_\n_returns: genType_\n_returns_description: _\n_parameters: genType edge0, genType edge1, genType x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns 0.0 if x <= edge0 and 1.0 if x >= edge1 and\nperforms smooth Hermite interpolation between 0 and 1\nwhen edge0 < x < edge1. This is useful in cases where\nyou would want a threshold function with a smooth\ntransition. This is equivalent to:\ngenType t;\nt = clamp ((x - edge0) / (edge1 - edge0), 0, 1);\nreturn t * t * (3 - 2 * t);\nResults are undefined if edge0 >= edge1.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/smoothstep.xml\">GLSL smoothstep man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::step(T, &edge = P, T, &x = P)\n\n<!--\n_syntax: glm::step(T, &edge = P, T, &x = P)_\n_name: glm::step_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &edge=P, const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns 0.0 if x < edge, otherwise it returns 1.0.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/step.xml\">GLSL step man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::step(edge, T, &x = P)\n\n<!--\n_syntax: glm::step(edge, T, &x = P)_\n_name: glm::step_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: T edge, const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns 0.0 if x < edge, otherwise it returns 1.0.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/step.xml\">GLSL step man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::step(edge, x)\n\n<!--\n_syntax: glm::step(edge, x)_\n_name: glm::step_\n_returns: genType_\n_returns_description: _\n_parameters: genType edge, genType x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns 0.0 if x < edge, otherwise it returns 1.0 for each component of a genType.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/step.xml\">GLSL step man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::trunc(T, &x = P)\n\n<!--\n_syntax: glm::trunc(T, &x = P)_\n_name: glm::trunc_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a value equal to the nearest integer to x\nwhose absolute value is not larger than the absolute value of x.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/trunc.xml\">GLSL trunc man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::uintBitsToFloat(&v)\n\n<!--\n_syntax: glm::uintBitsToFloat(&v)_\n_name: glm::uintBitsToFloat_\n_returns: float_\n_returns_description: _\n_parameters: const glm::uint &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a floating-point value corresponding to a\nunsigned integer encoding of a floating-point value.\nIf an inf or NaN is passed in, it will not signal, and the\nresulting floating point value is unspecified. Otherwise,\nthe bit-level representation is preserved.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/uintBitsToFloat.xml\">GLSL uintBitsToFloat man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< float, P > glm::uintBitsToFloat(glm::uint, &v = P)\n\n<!--\n_syntax: glm::uintBitsToFloat(glm::uint, &v = P)_\n_name: glm::uintBitsToFloat_\n_returns: vecType< float, P >_\n_returns_description: _\n_parameters: const vecType< glm::uint, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a floating-point value corresponding to a\nunsigned integer encoding of a floating-point value.\nIf an inf or NaN is passed in, it will not signal, and the\nresulting floating point value is unspecified. Otherwise,\nthe bit-level representation is preserved.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/uintBitsToFloat.xml\">GLSL uintBitsToFloat man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.3 Common Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}