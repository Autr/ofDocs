{"data":[{"page":{"entry":{"name":"detailfunc_packing (functions)","filename":"detail_func_packing_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/detail_func_packing_functions.markdown","path":"/documentation/glm/detail_func_packing_functions","route":"/documentation/glm/detail_func_packing_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":2241,"parent":2235,"breadcrumbs":[2235,1968],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"glm::packDouble2x32(&v)","name":"glm::packDouble2x32","returns":"double","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>uvec2 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::packHalf2x16(&v)","name":"glm::packHalf2x16","returns":"glm::uint","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::packSnorm2x16(&v)","name":"glm::packSnorm2x16","returns":"glm::uint","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::packSnorm4x8(&v)","name":"glm::packSnorm4x8","returns":"glm::uint","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::packUnorm2x16(&v)","name":"glm::packUnorm2x16","returns":"glm::uint","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::packUnorm4x8(&v)","name":"glm::packUnorm4x8","returns":"glm::uint","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::unpackDouble2x32(v)","name":"glm::unpackDouble2x32","returns":"glm::uvec2","returns_description":null,"parameters":"<span class=\"token keyword\">double</span> v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::unpackHalf2x16(v)","name":"glm::unpackHalf2x16","returns":"glm::vec2","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::unpackSnorm2x16(p)","name":"glm::unpackSnorm2x16","returns":"glm::vec2","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::unpackSnorm4x8(p)","name":"glm::unpackSnorm4x8","returns":"glm::vec4","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::unpackUnorm2x16(p)","name":"glm::unpackUnorm2x16","returns":"glm::vec2","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::unpackUnorm4x8(p)","name":"glm::unpackUnorm4x8","returns":"glm::vec4","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>uint p","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{}],"document":"<p>#functions</p>\n<!--\n_visible: True_\n_advanced: False_\n-->\n<p>##Description</p>\n<!----------------------------------------------------------------------------->\n<p>###double glm::packDouble2x32(&amp;v)</p>\n<!--\n_syntax: glm::packDouble2x32(&v)_\n_name: glm::packDouble2x32_\n_returns: double_\n_returns_description: _\n_parameters: const glm::uvec2 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a double-precision value obtained by packing the components of v into a 64-bit value.\nIf an IEEE 754 Inf or NaN is created, it will not signal, and the resulting floating point value is unspecified.\nOtherwise, the bit- level representation of v is preserved.\nThe first vector component specifies the 32 least significant bits;\nthe second component specifies the 32 most significant bits.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packDouble2x32.xml\">GLSL packDouble2x32 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::uint glm::packHalf2x16(&amp;v)</p>\n<!--\n_syntax: glm::packHalf2x16(&v)_\n_name: glm::packHalf2x16_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const glm::vec2 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns an unsigned integer obtained by converting the components of a two-component floating-point vector\nto the 16-bit floating-point representation found in the OpenGL Specification,\nand then packing these two 16- bit integers into a 32-bit unsigned integer.\nThe first vector component specifies the 16 least-significant bits of the result;\nthe second component specifies the 16 most-significant bits.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml\">GLSL packHalf2x16 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::uint glm::packSnorm2x16(&amp;v)</p>\n<!--\n_syntax: glm::packSnorm2x16(&v)_\n_name: glm::packSnorm2x16_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const glm::vec2 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackSnorm2x16: round(clamp(v, -1, +1) * 32767.0)</p>\n<p>The first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm2x16.xml\">GLSL packSnorm2x16 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::uint glm::packSnorm4x8(&amp;v)</p>\n<!--\n_syntax: glm::packSnorm4x8(&v)_\n_name: glm::packSnorm4x8_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackSnorm4x8:\tround(clamp(c, -1, +1) * 127.0)</p>\n<p>The first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml\">GLSL packSnorm4x8 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::uint glm::packUnorm2x16(&amp;v)</p>\n<!--\n_syntax: glm::packUnorm2x16(&v)_\n_name: glm::packUnorm2x16_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const glm::vec2 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackUnorm2x16: round(clamp(c, 0, +1) * 65535.0)</p>\n<p>The first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm2x16.xml\">GLSL packUnorm2x16 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::uint glm::packUnorm4x8(&amp;v)</p>\n<!--\n_syntax: glm::packUnorm4x8(&v)_\n_name: glm::packUnorm4x8_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>First, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.\nThen, the results are packed into the returned 32-bit unsigned integer.</p>\n<p>The conversion for component c of v to fixed point is done as follows:\npackUnorm4x8:\tround(clamp(c, 0, +1) * 255.0)</p>\n<p>The first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml\">GLSL packUnorm4x8 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::uvec2 glm::unpackDouble2x32(v)</p>\n<!--\n_syntax: glm::unpackDouble2x32(v)_\n_name: glm::unpackDouble2x32_\n_returns: glm::uvec2_\n_returns_description: _\n_parameters: double v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a two-component unsigned integer vector representation of v.\nThe bit-level representation of v is preserved.\nThe first component of the vector contains the 32 least significant bits of the double;\nthe second component consists the 32 most significant bits.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackDouble2x32.xml\">GLSL unpackDouble2x32 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::vec2 glm::unpackHalf2x16(v)</p>\n<!--\n_syntax: glm::unpackHalf2x16(v)_\n_name: glm::unpackHalf2x16_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: glm::uint v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a two-component floating-point vector with components obtained by unpacking a 32-bit unsigned integer into a pair of 16-bit values,\ninterpreting those values as 16-bit floating-point numbers according to the OpenGL Specification,\nand converting them to 32-bit floating-point values.\nThe first component of the vector is obtained from the 16 least-significant bits of v;\nthe second component is obtained from the 16 most-significant bits of v.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml\">GLSL unpackHalf2x16 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::vec2 glm::unpackSnorm2x16(p)</p>\n<!--\n_syntax: glm::unpackSnorm2x16(p)_\n_name: glm::unpackSnorm2x16_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: glm::uint p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm2x16: clamp(f / 32767.0, -1, +1)</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm2x16.xml\">GLSL unpackSnorm2x16 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::vec4 glm::unpackSnorm4x8(p)</p>\n<!--\n_syntax: glm::unpackSnorm4x8(p)_\n_name: glm::unpackSnorm4x8_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: glm::uint p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm4x8: clamp(f / 127.0, -1, +1)</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml\">GLSL unpackSnorm4x8 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::vec2 glm::unpackUnorm2x16(p)</p>\n<!--\n_syntax: glm::unpackUnorm2x16(p)_\n_name: glm::unpackUnorm2x16_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: glm::uint p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnorm2x16: f / 65535.0</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml\">GLSL unpackUnorm2x16 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::vec4 glm::unpackUnorm4x8(p)</p>\n<!--\n_syntax: glm::unpackUnorm4x8(p)_\n_name: glm::unpackUnorm4x8_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: glm::uint p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>First, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.</p>\n<p>The conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnorm4x8: f / 255.0</p>\n<p>The first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.</p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml\">GLSL unpackUnorm4x8 man page</a></p>\n<p><strong>See also</strong>: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a></p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###double glm::packDouble2x32(&v)\n\n<!--\n_syntax: glm::packDouble2x32(&v)_\n_name: glm::packDouble2x32_\n_returns: double_\n_returns_description: _\n_parameters: const glm::uvec2 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a double-precision value obtained by packing the components of v into a 64-bit value.\nIf an IEEE 754 Inf or NaN is created, it will not signal, and the resulting floating point value is unspecified.\nOtherwise, the bit- level representation of v is preserved.\nThe first vector component specifies the 32 least significant bits;\nthe second component specifies the 32 most significant bits.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packDouble2x32.xml\">GLSL packDouble2x32 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint glm::packHalf2x16(&v)\n\n<!--\n_syntax: glm::packHalf2x16(&v)_\n_name: glm::packHalf2x16_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const glm::vec2 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns an unsigned integer obtained by converting the components of a two-component floating-point vector\nto the 16-bit floating-point representation found in the OpenGL Specification,\nand then packing these two 16- bit integers into a 32-bit unsigned integer.\nThe first vector component specifies the 16 least-significant bits of the result;\nthe second component specifies the 16 most-significant bits.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packHalf2x16.xml\">GLSL packHalf2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint glm::packSnorm2x16(&v)\n\n<!--\n_syntax: glm::packSnorm2x16(&v)_\n_name: glm::packSnorm2x16_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const glm::vec2 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.\nThen, the results are packed into the returned 32-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackSnorm2x16: round(clamp(v, -1, +1) * 32767.0)\n\nThe first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm2x16.xml\">GLSL packSnorm2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint glm::packSnorm4x8(&v)\n\n<!--\n_syntax: glm::packSnorm4x8(&v)_\n_name: glm::packSnorm4x8_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.\nThen, the results are packed into the returned 32-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackSnorm4x8:\tround(clamp(c, -1, +1) * 127.0)\n\nThe first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packSnorm4x8.xml\">GLSL packSnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint glm::packUnorm2x16(&v)\n\n<!--\n_syntax: glm::packUnorm2x16(&v)_\n_name: glm::packUnorm2x16_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const glm::vec2 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.\nThen, the results are packed into the returned 32-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackUnorm2x16: round(clamp(c, 0, +1) * 65535.0)\n\nThe first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm2x16.xml\">GLSL packUnorm2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uint glm::packUnorm4x8(&v)\n\n<!--\n_syntax: glm::packUnorm4x8(&v)_\n_name: glm::packUnorm4x8_\n_returns: glm::uint_\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, converts each component of the normalized floating-point value v into 8- or 16-bit integer values.\nThen, the results are packed into the returned 32-bit unsigned integer.\n\nThe conversion for component c of v to fixed point is done as follows:\npackUnorm4x8:\tround(clamp(c, 0, +1) * 255.0)\n\nThe first component of the vector will be written to the least significant bits of the output;\nthe last component will be written to the most significant bits.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/packUnorm4x8.xml\">GLSL packUnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::uvec2 glm::unpackDouble2x32(v)\n\n<!--\n_syntax: glm::unpackDouble2x32(v)_\n_name: glm::unpackDouble2x32_\n_returns: glm::uvec2_\n_returns_description: _\n_parameters: double v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a two-component unsigned integer vector representation of v.\nThe bit-level representation of v is preserved.\nThe first component of the vector contains the 32 least significant bits of the double;\nthe second component consists the 32 most significant bits.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackDouble2x32.xml\">GLSL unpackDouble2x32 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 glm::unpackHalf2x16(v)\n\n<!--\n_syntax: glm::unpackHalf2x16(v)_\n_name: glm::unpackHalf2x16_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: glm::uint v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a two-component floating-point vector with components obtained by unpacking a 32-bit unsigned integer into a pair of 16-bit values,\ninterpreting those values as 16-bit floating-point numbers according to the OpenGL Specification,\nand converting them to 32-bit floating-point values.\nThe first component of the vector is obtained from the 16 least-significant bits of v;\nthe second component is obtained from the 16 most-significant bits of v.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackHalf2x16.xml\">GLSL unpackHalf2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 glm::unpackSnorm2x16(p)\n\n<!--\n_syntax: glm::unpackSnorm2x16(p)_\n_name: glm::unpackSnorm2x16_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: glm::uint p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm2x16: clamp(f / 32767.0, -1, +1)\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm2x16.xml\">GLSL unpackSnorm2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec4 glm::unpackSnorm4x8(p)\n\n<!--\n_syntax: glm::unpackSnorm4x8(p)_\n_name: glm::unpackSnorm4x8_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: glm::uint p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackSnorm4x8: clamp(f / 127.0, -1, +1)\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackSnorm4x8.xml\">GLSL unpackSnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 glm::unpackUnorm2x16(p)\n\n<!--\n_syntax: glm::unpackUnorm2x16(p)_\n_name: glm::unpackUnorm2x16_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: glm::uint p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnorm2x16: f / 65535.0\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm2x16.xml\">GLSL unpackUnorm2x16 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec4 glm::unpackUnorm4x8(p)\n\n<!--\n_syntax: glm::unpackUnorm4x8(p)_\n_name: glm::unpackUnorm4x8_\n_returns: glm::vec4_\n_returns_description: _\n_parameters: glm::uint p_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFirst, unpacks a single 32-bit unsigned integer p into a pair of 16-bit unsigned integers, four 8-bit unsigned integers, or four 8-bit signed integers.\nThen, each component is converted to a normalized floating-point value to generate the returned two- or four-component vector.\n\nThe conversion for unpacked fixed-point value f to floating point is done as follows:\nunpackUnorm4x8: f / 255.0\n\nThe first component of the returned vector will be extracted from the least significant bits of the input;\nthe last component will be extracted from the most significant bits.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/unpackUnorm4x8.xml\">GLSL unpackUnorm4x8 man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.4 Floating-Point Pack and Unpack Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}