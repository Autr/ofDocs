{"data":[{"page":{"entry":{"name":"gtxdual_quaternion (functions)","filename":"gtx_dual_quaternion_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/gtx_dual_quaternion_functions.markdown","path":"/documentation/glm/gtx_dual_quaternion_functions","route":"/documentation/glm/gtx_dual_quaternion_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":2283,"parent":2235,"breadcrumbs":[2235,1968],"siblings":[],"translations":{}},"description":{},"methods":[null,{"short":"<p>Converts a 2 * 4 matrix (matrix which holds real and dual parts) to a quaternion.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n","desc":""},{"short":"<p>Converts a 3 * 4 matrix (augmented matrix rotation + translation) to a quaternion.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n","desc":""},{"short":"<p>Returns the q inverse.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n","desc":""},{"short":"<p>Returns the linear interpolation of two dual quaternion.</p>\n<p><strong>See also</strong>: gtc_dual_quaternion</p>\n","desc":""},{"short":"<p>Converts a quaternion to a 2 * 4 matrix.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n","desc":""},{"short":"<p>Converts a quaternion to a 3 * 4 matrix.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n","desc":""},{"short":"<p>Returns the normalized quaternion.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<!--\n_visible: True_\n_advanced: False_\n-->\n<p>##Description</p>\n<!----------------------------------------------------------------------------->\n<p>###tdualquat&lt; T, P &gt; glm::dualquat_cast(&amp;x = P)</p>\n<!--\n_syntax: glm::dualquat_cast(&x = P)_\n_name: glm::dualquat_cast_\n_returns: tdualquat< T, P >_\n_returns_description: _\n_parameters: const glm::mat2x4 &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts a 2 * 4 matrix (matrix which holds real and dual parts) to a quaternion.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tdualquat&lt; T, P &gt; glm::dualquat_cast(&amp;x = P)</p>\n<!--\n_syntax: glm::dualquat_cast(&x = P)_\n_name: glm::dualquat_cast_\n_returns: tdualquat< T, P >_\n_returns_description: _\n_parameters: const glm::mat3x4 &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts a 3 * 4 matrix (augmented matrix rotation + translation) to a quaternion.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tdualquat&lt; T, P &gt; glm::inverse(T, &amp;q = P)</p>\n<!--\n_syntax: glm::inverse(T, &q = P)_\n_name: glm::inverse_\n_returns: tdualquat< T, P >_\n_returns_description: _\n_parameters: const tdualquat< T, P > &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the q inverse.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tdualquat&lt; T, P &gt; glm::lerp(T, &amp;x = P, T, &amp;y = P, &amp;a)</p>\n<!--\n_syntax: glm::lerp(T, &x = P, T, &y = P, &a)_\n_name: glm::lerp_\n_returns: tdualquat< T, P >_\n_returns_description: _\n_parameters: const tdualquat< T, P > &x=P, const tdualquat< T, P > &y=P, const T &a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the linear interpolation of two dual quaternion.</p>\n<p><strong>See also</strong>: gtc_dual_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::mat2x4 glm::mat2x4_cast(T, &amp;x = P)</p>\n<!--\n_syntax: glm::mat2x4_cast(T, &x = P)_\n_name: glm::mat2x4_cast_\n_returns: glm::mat2x4_\n_returns_description: _\n_parameters: const tdualquat< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts a quaternion to a 2 * 4 matrix.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::mat3x4 glm::mat3x4_cast(T, &amp;x = P)</p>\n<!--\n_syntax: glm::mat3x4_cast(T, &x = P)_\n_name: glm::mat3x4_cast_\n_returns: glm::mat3x4_\n_returns_description: _\n_parameters: const tdualquat< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts a quaternion to a 3 * 4 matrix.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tdualquat&lt; T, P &gt; glm::normalize(T, &amp;q = P)</p>\n<!--\n_syntax: glm::normalize(T, &q = P)_\n_name: glm::normalize_\n_returns: tdualquat< T, P >_\n_returns_description: _\n_parameters: const tdualquat< T, P > &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the normalized quaternion.</p>\n<p><strong>See also</strong>: gtx_dual_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tdualquat< T, P > glm::dualquat_cast(&x = P)\n\n<!--\n_syntax: glm::dualquat_cast(&x = P)_\n_name: glm::dualquat_cast_\n_returns: tdualquat< T, P >_\n_returns_description: _\n_parameters: const glm::mat2x4 &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts a 2 * 4 matrix (matrix which holds real and dual parts) to a quaternion.\n\n\n**See also**: gtx_dual_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tdualquat< T, P > glm::dualquat_cast(&x = P)\n\n<!--\n_syntax: glm::dualquat_cast(&x = P)_\n_name: glm::dualquat_cast_\n_returns: tdualquat< T, P >_\n_returns_description: _\n_parameters: const glm::mat3x4 &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts a 3 * 4 matrix (augmented matrix rotation + translation) to a quaternion.\n\n\n**See also**: gtx_dual_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tdualquat< T, P > glm::inverse(T, &q = P)\n\n<!--\n_syntax: glm::inverse(T, &q = P)_\n_name: glm::inverse_\n_returns: tdualquat< T, P >_\n_returns_description: _\n_parameters: const tdualquat< T, P > &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the q inverse.\n\n\n**See also**: gtx_dual_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tdualquat< T, P > glm::lerp(T, &x = P, T, &y = P, &a)\n\n<!--\n_syntax: glm::lerp(T, &x = P, T, &y = P, &a)_\n_name: glm::lerp_\n_returns: tdualquat< T, P >_\n_returns_description: _\n_parameters: const tdualquat< T, P > &x=P, const tdualquat< T, P > &y=P, const T &a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the linear interpolation of two dual quaternion.\n\n\n**See also**: gtc_dual_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat2x4 glm::mat2x4_cast(T, &x = P)\n\n<!--\n_syntax: glm::mat2x4_cast(T, &x = P)_\n_name: glm::mat2x4_cast_\n_returns: glm::mat2x4_\n_returns_description: _\n_parameters: const tdualquat< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts a quaternion to a 2 * 4 matrix.\n\n\n**See also**: gtx_dual_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat3x4 glm::mat3x4_cast(T, &x = P)\n\n<!--\n_syntax: glm::mat3x4_cast(T, &x = P)_\n_name: glm::mat3x4_cast_\n_returns: glm::mat3x4_\n_returns_description: _\n_parameters: const tdualquat< T, P > &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts a quaternion to a 3 * 4 matrix.\n\n\n**See also**: gtx_dual_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tdualquat< T, P > glm::normalize(T, &q = P)\n\n<!--\n_syntax: glm::normalize(T, &q = P)_\n_name: glm::normalize_\n_returns: tdualquat< T, P >_\n_returns_description: _\n_parameters: const tdualquat< T, P > &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the normalized quaternion.\n\n\n**See also**: gtx_dual_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}