{"data":[{"page":{"entry":{"name":"gtcquaternion (functions)","filename":"gtc_quaternion_functions.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/glm/gtc_quaternion_functions.markdown","path":"/documentation/glm/gtc_quaternion_functions","route":"/documentation/glm/gtc_quaternion_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":2269,"parent":2235,"breadcrumbs":[2235,1968],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"glm::angle(&x = P)","name":"glm::angle","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the quaternion rotation angle.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"syntax":"glm::angleAxis(&angle, &axis = P)","name":"glm::angleAxis","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Build a quaternion from an angle and a normalized axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>angle Angle expressed in radians.</p>\n<p>axis Axis of the quaternion, must be normalized.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"syntax":"glm::axis(&x = P)","name":"glm::axis","returns":"glm::vec3","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the q rotation axis.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"syntax":"glm::conjugate(&q = P)","name":"glm::conjugate","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the q conjugate.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"short":"<p>Returns dot product of q1 and q2, i.e., q1[0] * q2[0] + q1[1] * q2[1] + ...</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":""},{"short":"<p>Returns the component-wise comparison of result x == y.</p>\n<p><strong>Type parameters:</strong></p>\n<p>quatType Floating-point quaternion types.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":""},{"syntax":"glm::eulerAngles(&x = P)","name":"glm::eulerAngles","returns":"glm::vec3","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns euler angles, pitch as x, yaw as y, roll as z.\nThe result is expressed in radians if GLM_FORCE_RADIANS is defined or degrees otherwise.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"desc":""},{"desc":""},{"syntax":"glm::inverse(&q = P)","name":"glm::inverse","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the q inverse.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"short":"<p>Returns true if x holds a positive infinity or negative\ninfinity representation in the underlying implementation's\nset of floating point representations. Returns false\notherwise, including for implementations with no infinity\nrepresentations.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n","desc":""},{"short":"<p>Returns true if x holds a NaN (not a number)\nrepresentation in the underlying implementation's set of\nfloating point representations. Returns false otherwise,\nincluding for implementations with no NaN\nrepresentations.</p>\n<p>/!\\ When using compiler fast math, this function may fail.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n","desc":""},{"syntax":"glm::length(&q = P)","name":"glm::length","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the length of the quaternion.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"syntax":"glm::lerp(&x = P, &y = P, a)","name":"glm::lerp","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>y<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> T a","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Linear interpolation of two quaternions.\nThe interpolation is oriented.</p>\n<p><strong>Parameters:</strong></p>\n<p>x A quaternion</p>\n<p>y A quaternion</p>\n<p>a Interpolation factor. The interpolation is defined in the range [0, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the quaternion. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"short":"<p>Returns the component-wise comparison result of x &lt; y.</p>\n<p><strong>Type parameters:</strong></p>\n<p>quatType Floating-point quaternion types.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":""},{"short":"<p>Returns the component-wise comparison of result x &lt;= y.</p>\n<p><strong>Type parameters:</strong></p>\n<p>quatType Floating-point quaternion types.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":""},{"syntax":"glm::mat3_cast(&x = P)","name":"glm::mat3_cast","returns":"glm::mat3","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts a quaternion to a 3 * 3 matrix.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"syntax":"glm::mat4_cast(&x = P)","name":"glm::mat4_cast","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts a quaternion to a 4 * 4 matrix.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"syntax":"glm::mix(&x = P, &y = P, a)","name":"glm::mix","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>y<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> T a","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"glm::normalize(&q = P)","name":"glm::normalize","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the normalized quaternion.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"short":"<p>Returns the component-wise comparison of result x != y.</p>\n<p><strong>Type parameters:</strong></p>\n<p>quatType Floating-point quaternion types.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":""},{"syntax":"glm::pitch(&x = P)","name":"glm::pitch","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns pitch value of euler angles expressed in radians.</p>\n<p><strong>See also</strong>: gtx_quaternion</p>\n","desc":"","counter":0},{"syntax":"glm::quat_cast(&x = P)","name":"glm::quat_cast","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat3 <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts a 3 * 3 matrix to a quaternion.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":1},{"syntax":"glm::quat_cast(&x = P)","name":"glm::quat_cast","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts a 4 * 4 matrix to a quaternion.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":""},{"syntax":"glm::roll(&x = P)","name":"glm::roll","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns roll value of euler angles expressed in radians.</p>\n<p><strong>See also</strong>: gtx_quaternion</p>\n","desc":"","counter":0},{"syntax":"glm::rotate(&q = P, &angle, &axis = P)","name":"glm::rotate","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates a quaternion from a vector of 3 components axis and an angle.</p>\n<p><strong>Parameters:</strong></p>\n<p>q Source orientation</p>\n<p>angle Angle expressed in radians.</p>\n<p>axis Axis of the rotation</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"syntax":"glm::slerp(&x = P, &y = P, a)","name":"glm::slerp","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>y<span class=\"token operator\">=</span>P<span class=\"token punctuation\">,</span> T a","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Spherical linear interpolation of two quaternions.\nThe interpolation always take the short path and the rotation is performed at constant speed.</p>\n<p><strong>Parameters:</strong></p>\n<p>x A quaternion</p>\n<p>y A quaternion</p>\n<p>a Interpolation factor. The interpolation is defined beyond the range [0, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the quaternion. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n","desc":"","counter":0},{"syntax":"glm::yaw(&x = P)","name":"glm::yaw","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>x<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns yaw value of euler angles expressed in radians.</p>\n<p><strong>See also</strong>: gtx_quaternion</p>\n","desc":"","counter":0},{}],"document":"<p>#functions</p>\n<!--\n_visible: True_\n_advanced: False_\n-->\n<p>##Description</p>\n<!----------------------------------------------------------------------------->\n<p>###T glm::angle(&amp;x = P)</p>\n<!--\n_syntax: glm::angle(&x = P)_\n_name: glm::angle_\n_returns: T_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the quaternion rotation angle.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::quat glm::angleAxis(&amp;angle, &amp;axis = P)</p>\n<!--\n_syntax: glm::angleAxis(&angle, &axis = P)_\n_name: glm::angleAxis_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const T &angle, const glm::vec3 &axis=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Build a quaternion from an angle and a normalized axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>angle Angle expressed in radians.</p>\n<p>axis Axis of the quaternion, must be normalized.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::vec3 glm::axis(&amp;x = P)</p>\n<!--\n_syntax: glm::axis(&x = P)_\n_name: glm::axis_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the q rotation axis.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::quat glm::conjugate(&amp;q = P)</p>\n<!--\n_syntax: glm::conjugate(&q = P)_\n_name: glm::conjugate_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the q conjugate.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T glm::dot(T, &amp;x = P, T, &amp;y = P)</p>\n<!--\n_syntax: glm::dot(T, &x = P, T, &y = P)_\n_name: glm::dot_\n_returns: T_\n_returns_description: _\n_parameters: const quatType< T, P > &x=P, const quatType< T, P > &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns dot product of q1 and q2, i.e., q1[0] * q2[0] + q1[1] * q2[1] + ...</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tvec4&lt; bool, P &gt; glm::equal(&amp;x = P, &amp;y = P)</p>\n<!--\n_syntax: glm::equal(&x = P, &y = P)_\n_name: glm::equal_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the component-wise comparison of result x == y.</p>\n<p><strong>Type parameters:</strong></p>\n<p>quatType Floating-point quaternion types.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::vec3 glm::eulerAngles(&amp;x = P)</p>\n<!--\n_syntax: glm::eulerAngles(&x = P)_\n_name: glm::eulerAngles_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns euler angles, pitch as x, yaw as y, roll as z.\nThe result is expressed in radians if GLM_FORCE_RADIANS is defined or degrees otherwise.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tvec4&lt; bool, P &gt; glm::greaterThan(&amp;x = P, &amp;y = P)</p>\n<!--\n_syntax: glm::greaterThan(&x = P, &y = P)_\n_name: glm::greaterThan_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the component-wise comparison of result x &gt; y.</p>\n<p><strong>Type parameters:</strong></p>\n<p>quatType Floating-point quaternion types.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tvec4&lt; bool, P &gt; glm::greaterThanEqual(&amp;x = P, &amp;y = P)</p>\n<!--\n_syntax: glm::greaterThanEqual(&x = P, &y = P)_\n_name: glm::greaterThanEqual_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the component-wise comparison of result x &gt;= y.</p>\n<p><strong>Type parameters:</strong></p>\n<p>quatType Floating-point quaternion types.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::quat glm::inverse(&amp;q = P)</p>\n<!--\n_syntax: glm::inverse(&q = P)_\n_name: glm::inverse_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the q inverse.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tvec4&lt; bool, P &gt; glm::isinf(&amp;x = P)</p>\n<!--\n_syntax: glm::isinf(&x = P)_\n_name: glm::isinf_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns true if x holds a positive infinity or negative\ninfinity representation in the underlying implementation's\nset of floating point representations. Returns false\notherwise, including for implementations with no infinity\nrepresentations.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tvec4&lt; bool, P &gt; glm::isnan(&amp;x = P)</p>\n<!--\n_syntax: glm::isnan(&x = P)_\n_name: glm::isnan_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns true if x holds a NaN (not a number)\nrepresentation in the underlying implementation's set of\nfloating point representations. Returns false otherwise,\nincluding for implementations with no NaN\nrepresentations.</p>\n<p>/!\\ When using compiler fast math, this function may fail.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point scalar or vector types.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T glm::length(&amp;q = P)</p>\n<!--\n_syntax: glm::length(&q = P)_\n_name: glm::length_\n_returns: T_\n_returns_description: _\n_parameters: const glm::quat &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the length of the quaternion.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::quat glm::lerp(&amp;x = P, &amp;y = P, a)</p>\n<!--\n_syntax: glm::lerp(&x = P, &y = P, a)_\n_name: glm::lerp_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P, T a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Linear interpolation of two quaternions.\nThe interpolation is oriented.</p>\n<p><strong>Parameters:</strong></p>\n<p>x A quaternion</p>\n<p>y A quaternion</p>\n<p>a Interpolation factor. The interpolation is defined in the range [0, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the quaternion. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tvec4&lt; bool, P &gt; glm::lessThan(&amp;x = P, &amp;y = P)</p>\n<!--\n_syntax: glm::lessThan(&x = P, &y = P)_\n_name: glm::lessThan_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the component-wise comparison result of x &lt; y.</p>\n<p><strong>Type parameters:</strong></p>\n<p>quatType Floating-point quaternion types.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tvec4&lt; bool, P &gt; glm::lessThanEqual(&amp;x = P, &amp;y = P)</p>\n<!--\n_syntax: glm::lessThanEqual(&x = P, &y = P)_\n_name: glm::lessThanEqual_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the component-wise comparison of result x &lt;= y.</p>\n<p><strong>Type parameters:</strong></p>\n<p>quatType Floating-point quaternion types.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::mat3 glm::mat3_cast(&amp;x = P)</p>\n<!--\n_syntax: glm::mat3_cast(&x = P)_\n_name: glm::mat3_cast_\n_returns: glm::mat3_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts a quaternion to a 3 * 3 matrix.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::mat4 glm::mat4_cast(&amp;x = P)</p>\n<!--\n_syntax: glm::mat4_cast(&x = P)_\n_name: glm::mat4_cast_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts a quaternion to a 4 * 4 matrix.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::quat glm::mix(&amp;x = P, &amp;y = P, a)</p>\n<!--\n_syntax: glm::mix(&x = P, &y = P, a)_\n_name: glm::mix_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P, T a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Spherical linear interpolation of two quaternions.\nThe interpolation is oriented and the rotation is performed at constant speed.\nFor short path spherical linear interpolation, use the slerp function.</p>\n<p><strong>Parameters:</strong></p>\n<p>x A quaternion</p>\n<p>y A quaternion</p>\n<p>a Interpolation factor. The interpolation is defined beyond the range [0, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the quaternion. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p><strong>See also</strong>: - slerp(tquat&lt;T, P&gt; const &amp; x, tquat&lt;T, P&gt; const &amp; y, T const &amp; a)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::quat glm::normalize(&amp;q = P)</p>\n<!--\n_syntax: glm::normalize(&q = P)_\n_name: glm::normalize_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the normalized quaternion.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###tvec4&lt; bool, P &gt; glm::notEqual(&amp;x = P, &amp;y = P)</p>\n<!--\n_syntax: glm::notEqual(&x = P, &y = P)_\n_name: glm::notEqual_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the component-wise comparison of result x != y.</p>\n<p><strong>Type parameters:</strong></p>\n<p>quatType Floating-point quaternion types.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T glm::pitch(&amp;x = P)</p>\n<!--\n_syntax: glm::pitch(&x = P)_\n_name: glm::pitch_\n_returns: T_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns pitch value of euler angles expressed in radians.</p>\n<p><strong>See also</strong>: gtx_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::quat glm::quat_cast(&amp;x = P)</p>\n<!--\n_syntax: glm::quat_cast(&x = P)_\n_name: glm::quat_cast_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::mat3 &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts a 3 * 3 matrix to a quaternion.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::quat glm::quat_cast(&amp;x = P)</p>\n<!--\n_syntax: glm::quat_cast(&x = P)_\n_name: glm::quat_cast_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::mat4 &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Converts a 4 * 4 matrix to a quaternion.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T glm::roll(&amp;x = P)</p>\n<!--\n_syntax: glm::roll(&x = P)_\n_name: glm::roll_\n_returns: T_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns roll value of euler angles expressed in radians.</p>\n<p><strong>See also</strong>: gtx_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::quat glm::rotate(&amp;q = P, &amp;angle, &amp;axis = P)</p>\n<!--\n_syntax: glm::rotate(&q = P, &angle, &axis = P)_\n_name: glm::rotate_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &q=P, const T &angle, const glm::vec3 &axis=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Rotates a quaternion from a vector of 3 components axis and an angle.</p>\n<p><strong>Parameters:</strong></p>\n<p>q Source orientation</p>\n<p>angle Angle expressed in radians.</p>\n<p>axis Axis of the rotation</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::quat glm::slerp(&amp;x = P, &amp;y = P, a)</p>\n<!--\n_syntax: glm::slerp(&x = P, &y = P, a)_\n_name: glm::slerp_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P, T a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Spherical linear interpolation of two quaternions.\nThe interpolation always take the short path and the rotation is performed at constant speed.</p>\n<p><strong>Parameters:</strong></p>\n<p>x A quaternion</p>\n<p>y A quaternion</p>\n<p>a Interpolation factor. The interpolation is defined beyond the range [0, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the quaternion. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtc_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T glm::yaw(&amp;x = P)</p>\n<!--\n_syntax: glm::yaw(&x = P)_\n_name: glm::yaw_\n_returns: T_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns yaw value of euler angles expressed in radians.</p>\n<p><strong>See also</strong>: gtx_quaternion</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T glm::angle(&x = P)\n\n<!--\n_syntax: glm::angle(&x = P)_\n_name: glm::angle_\n_returns: T_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the quaternion rotation angle.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::angleAxis(&angle, &axis = P)\n\n<!--\n_syntax: glm::angleAxis(&angle, &axis = P)_\n_name: glm::angleAxis_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const T &angle, const glm::vec3 &axis=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuild a quaternion from an angle and a normalized axis.\n\n\n**Parameters:**\n\nangle Angle expressed in radians.\n\naxis Axis of the quaternion, must be normalized.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 glm::axis(&x = P)\n\n<!--\n_syntax: glm::axis(&x = P)_\n_name: glm::axis_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the q rotation axis.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::conjugate(&q = P)\n\n<!--\n_syntax: glm::conjugate(&q = P)_\n_name: glm::conjugate_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the q conjugate.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T glm::dot(T, &x = P, T, &y = P)\n\n<!--\n_syntax: glm::dot(T, &x = P, T, &y = P)_\n_name: glm::dot_\n_returns: T_\n_returns_description: _\n_parameters: const quatType< T, P > &x=P, const quatType< T, P > &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns dot product of q1 and q2, i.e., q1[0] * q2[0] + q1[1] * q2[1] + ...\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tvec4< bool, P > glm::equal(&x = P, &y = P)\n\n<!--\n_syntax: glm::equal(&x = P, &y = P)_\n_name: glm::equal_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the component-wise comparison of result x == y.\n\n\n**Type parameters:**\n\nquatType Floating-point quaternion types.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 glm::eulerAngles(&x = P)\n\n<!--\n_syntax: glm::eulerAngles(&x = P)_\n_name: glm::eulerAngles_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns euler angles, pitch as x, yaw as y, roll as z.\nThe result is expressed in radians if GLM_FORCE_RADIANS is defined or degrees otherwise.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tvec4< bool, P > glm::greaterThan(&x = P, &y = P)\n\n<!--\n_syntax: glm::greaterThan(&x = P, &y = P)_\n_name: glm::greaterThan_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the component-wise comparison of result x > y.\n\n\n**Type parameters:**\n\nquatType Floating-point quaternion types.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tvec4< bool, P > glm::greaterThanEqual(&x = P, &y = P)\n\n<!--\n_syntax: glm::greaterThanEqual(&x = P, &y = P)_\n_name: glm::greaterThanEqual_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the component-wise comparison of result x >= y.\n\n\n**Type parameters:**\n\nquatType Floating-point quaternion types.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::inverse(&q = P)\n\n<!--\n_syntax: glm::inverse(&q = P)_\n_name: glm::inverse_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the q inverse.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tvec4< bool, P > glm::isinf(&x = P)\n\n<!--\n_syntax: glm::isinf(&x = P)_\n_name: glm::isinf_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if x holds a positive infinity or negative\ninfinity representation in the underlying implementation's\nset of floating point representations. Returns false\notherwise, including for implementations with no infinity\nrepresentations.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tvec4< bool, P > glm::isnan(&x = P)\n\n<!--\n_syntax: glm::isnan(&x = P)_\n_name: glm::isnan_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if x holds a NaN (not a number)\nrepresentation in the underlying implementation's set of\nfloating point representations. Returns false otherwise,\nincluding for implementations with no NaN\nrepresentations.\n\n/!\\ When using compiler fast math, this function may fail.\n\n\n**Type parameters:**\n\ngenType Floating-point scalar or vector types.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T glm::length(&q = P)\n\n<!--\n_syntax: glm::length(&q = P)_\n_name: glm::length_\n_returns: T_\n_returns_description: _\n_parameters: const glm::quat &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the length of the quaternion.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::lerp(&x = P, &y = P, a)\n\n<!--\n_syntax: glm::lerp(&x = P, &y = P, a)_\n_name: glm::lerp_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P, T a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLinear interpolation of two quaternions.\nThe interpolation is oriented.\n\n\n**Parameters:**\n\nx A quaternion\n\ny A quaternion\n\na Interpolation factor. The interpolation is defined in the range [0, 1].\n\n**Type parameters:**\n\nT Value type used to build the quaternion. Supported: half, float or double.\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tvec4< bool, P > glm::lessThan(&x = P, &y = P)\n\n<!--\n_syntax: glm::lessThan(&x = P, &y = P)_\n_name: glm::lessThan_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the component-wise comparison result of x < y.\n\n\n**Type parameters:**\n\nquatType Floating-point quaternion types.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tvec4< bool, P > glm::lessThanEqual(&x = P, &y = P)\n\n<!--\n_syntax: glm::lessThanEqual(&x = P, &y = P)_\n_name: glm::lessThanEqual_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the component-wise comparison of result x <= y.\n\n\n**Type parameters:**\n\nquatType Floating-point quaternion types.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat3 glm::mat3_cast(&x = P)\n\n<!--\n_syntax: glm::mat3_cast(&x = P)_\n_name: glm::mat3_cast_\n_returns: glm::mat3_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts a quaternion to a 3 * 3 matrix.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 glm::mat4_cast(&x = P)\n\n<!--\n_syntax: glm::mat4_cast(&x = P)_\n_name: glm::mat4_cast_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts a quaternion to a 4 * 4 matrix.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::mix(&x = P, &y = P, a)\n\n<!--\n_syntax: glm::mix(&x = P, &y = P, a)_\n_name: glm::mix_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P, T a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSpherical linear interpolation of two quaternions.\nThe interpolation is oriented and the rotation is performed at constant speed.\nFor short path spherical linear interpolation, use the slerp function.\n\n\n**Parameters:**\n\nx A quaternion\n\ny A quaternion\n\na Interpolation factor. The interpolation is defined beyond the range [0, 1].\n\n**Type parameters:**\n\nT Value type used to build the quaternion. Supported: half, float or double.\n\n**See also**: gtc_quaternion\n\n**See also**: - slerp(tquat<T, P> const & x, tquat<T, P> const & y, T const & a)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::normalize(&q = P)\n\n<!--\n_syntax: glm::normalize(&q = P)_\n_name: glm::normalize_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &q=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the normalized quaternion.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###tvec4< bool, P > glm::notEqual(&x = P, &y = P)\n\n<!--\n_syntax: glm::notEqual(&x = P, &y = P)_\n_name: glm::notEqual_\n_returns: tvec4< bool, P >_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the component-wise comparison of result x != y.\n\n\n**Type parameters:**\n\nquatType Floating-point quaternion types.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T glm::pitch(&x = P)\n\n<!--\n_syntax: glm::pitch(&x = P)_\n_name: glm::pitch_\n_returns: T_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns pitch value of euler angles expressed in radians.\n\n\n**See also**: gtx_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::quat_cast(&x = P)\n\n<!--\n_syntax: glm::quat_cast(&x = P)_\n_name: glm::quat_cast_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::mat3 &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts a 3 * 3 matrix to a quaternion.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::quat_cast(&x = P)\n\n<!--\n_syntax: glm::quat_cast(&x = P)_\n_name: glm::quat_cast_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::mat4 &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConverts a 4 * 4 matrix to a quaternion.\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T glm::roll(&x = P)\n\n<!--\n_syntax: glm::roll(&x = P)_\n_name: glm::roll_\n_returns: T_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns roll value of euler angles expressed in radians.\n\n\n**See also**: gtx_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::rotate(&q = P, &angle, &axis = P)\n\n<!--\n_syntax: glm::rotate(&q = P, &angle, &axis = P)_\n_name: glm::rotate_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &q=P, const T &angle, const glm::vec3 &axis=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates a quaternion from a vector of 3 components axis and an angle.\n\n\n**Parameters:**\n\nq Source orientation\n\nangle Angle expressed in radians.\n\naxis Axis of the rotation\n\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::slerp(&x = P, &y = P, a)\n\n<!--\n_syntax: glm::slerp(&x = P, &y = P, a)_\n_name: glm::slerp_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const glm::quat &x=P, const glm::quat &y=P, T a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSpherical linear interpolation of two quaternions.\nThe interpolation always take the short path and the rotation is performed at constant speed.\n\n\n**Parameters:**\n\nx A quaternion\n\ny A quaternion\n\na Interpolation factor. The interpolation is defined beyond the range [0, 1].\n\n**Type parameters:**\n\nT Value type used to build the quaternion. Supported: half, float or double.\n\n**See also**: gtc_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T glm::yaw(&x = P)\n\n<!--\n_syntax: glm::yaw(&x = P)_\n_name: glm::yaw_\n_returns: T_\n_returns_description: _\n_parameters: const glm::quat &x=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns yaw value of euler angles expressed in radians.\n\n\n**See also**: gtx_quaternion\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}