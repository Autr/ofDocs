{"data":[{"page":{"entry":{"name":"ofxKinectContext","filename":"ofxKinectContext.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/addons/ofxKinect/ofxKinectContext.markdown","path":"/documentation/addons/ofxKinect/ofxKinectContext","route":"/documentation/addons/ofxKinect/ofxKinectContext.markdown","dir":"../ofSite/documentation/addons/ofxKinect","ext":"markdown","type":"page","id":2073,"parent":2069,"breadcrumbs":[2069,1993,1968],"siblings":[],"translations":{}},"description":{"short":"<p>wrapper for the freenect context</p>\n<p>do not use this directly</p>\n","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"True","istemplated":"False"},"methods":[{"syntax":"buildDeviceList()","name":"buildDeviceList","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>(re)build the list of devices</p>\n","desc":"","counter":0},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>clear the freenect context closes all currently connected devices</p>\n","desc":"","counter":0},{"syntax":"close(&kinect)","name":"close","returns":"void","returns_description":null,"parameters":"ofxKinect <span class=\"token operator\">&amp;</span>kinect","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>close a kinect device</p>\n","desc":"","counter":0},{"syntax":"closeAll()","name":"closeAll","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>closes all currently connected kinects</p>\n","desc":"","counter":0},{"syntax":"getContext()","name":"getContext","returns":"freenect_context *","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>get the raw pointer</p>\n","desc":"","counter":0},{"syntax":"getDeviceIndex(id)","name":"getDeviceIndex","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> id","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>get the deviceList index from an id returns -1 if not found</p>\n","desc":"","counter":1},{"syntax":"getDeviceIndex(serial)","name":"getDeviceIndex","returns":"int","returns_description":null,"parameters":"string serial","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>get the deviceList index from an id returns -1 if not found</p>\n","desc":""},{"syntax":"getKinect(*dev)","name":"getKinect","returns":"ofxKinect *","returns_description":null,"parameters":"freenect_device <span class=\"token operator\">*</span>dev","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>get the kinect object from a device pointer returns NULL if not found</p>\n","desc":"","counter":0},{"syntax":"init()","name":"init","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>init the freenect context</p>\n","desc":"","counter":0},{"syntax":"isConnected(id)","name":"isConnected","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> id","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>is a device with this id already connected?</p>\n","desc":"","counter":1},{"syntax":"isConnected(serial)","name":"isConnected","returns":"bool","returns_description":null,"parameters":"string serial","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>is a device with this serial already connected?</p>\n","desc":""},{"syntax":"isInited()","name":"isInited","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>is the context inited?</p>\n","desc":"","counter":0},{"syntax":"listDevices(verbose = false)","name":"listDevices","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> verbose<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>print the device list</p>\n","desc":"","counter":0},{"syntax":"nextAvailableId()","name":"nextAvailableId","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>get the id of the next available device, returns -1 if nothing found</p>\n","desc":"","counter":0},{"syntax":"nextAvailableSerial()","name":"nextAvailableSerial","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>get the serial number of the next available device, returns an empty string &quot;&quot; if nothing found</p>\n","desc":"","counter":0},{"syntax":"numAvailable()","name":"numAvailable","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>get the number of available devices (not connected)</p>\n","desc":"","counter":0},{"syntax":"numConnected()","name":"numConnected","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>get the number of currently connected devices</p>\n","desc":"","counter":0},{"syntax":"numTotal()","name":"numTotal","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>get the total number of devices</p>\n","desc":"","counter":0},{"syntax":"ofxKinectContext()","name":"ofxKinectContext","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"open(&kinect, id = -1)","name":"open","returns":"bool","returns_description":null,"parameters":"ofxKinect <span class=\"token operator\">&amp;</span>kinect<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span>","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>open a kinect device an id of -1 will open the first available</p>\n","desc":"","counter":1},{"syntax":"open(&kinect, serial)","name":"open","returns":"bool","returns_description":null,"parameters":"ofxKinect <span class=\"token operator\">&amp;</span>kinect<span class=\"token punctuation\">,</span> string serial","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>open a kinect device by it's unique serial number</p>\n","desc":""},{"syntax":"~ofxKinectContext()","name":"~ofxKinectContext","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"name":"bInited","type":"bool ","access":"private","version_started":"0.8.0","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","desc":""},{"desc":""},{"name":"kinectContext","type":"freenect_context * ","access":"private","version_started":"0.8.0","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","desc":""},{"desc":""},{}],"document":"<p>#class ofxKinectContext</p>\n<!--\n_visible: True_\n_advanced: True_\n_istemplated: False_\n-->\n<p>##InlineDescription</p>\n<p>wrapper for the freenect context</p>\n<p>do not use this directly</p>\n<p>##Description</p>\n<p>##Methods</p>\n<p>###void buildDeviceList()</p>\n<!--\n_syntax: buildDeviceList()_\n_name: buildDeviceList_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>(re)build the list of devices</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void clear()</p>\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>clear the freenect context closes all currently connected devices</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void close(&amp;kinect)</p>\n<!--\n_syntax: close(&kinect)_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: ofxKinect &kinect_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>close a kinect device</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void closeAll()</p>\n<!--\n_syntax: closeAll()_\n_name: closeAll_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>closes all currently connected kinects</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###freenect_context * getContext()</p>\n<!--\n_syntax: getContext()_\n_name: getContext_\n_returns: freenect_context *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>get the raw pointer</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int getDeviceIndex(id)</p>\n<!--\n_syntax: getDeviceIndex(id)_\n_name: getDeviceIndex_\n_returns: int_\n_returns_description: _\n_parameters: int id_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>get the deviceList index from an id returns -1 if not found</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int getDeviceIndex(serial)</p>\n<!--\n_syntax: getDeviceIndex(serial)_\n_name: getDeviceIndex_\n_returns: int_\n_returns_description: _\n_parameters: string serial_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>get the deviceList index from an id returns -1 if not found</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofxKinect * getKinect(*dev)</p>\n<!--\n_syntax: getKinect(*dev)_\n_name: getKinect_\n_returns: ofxKinect *_\n_returns_description: _\n_parameters: freenect_device *dev_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>get the kinect object from a device pointer returns NULL if not found</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool init()</p>\n<!--\n_syntax: init()_\n_name: init_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>init the freenect context</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isConnected(id)</p>\n<!--\n_syntax: isConnected(id)_\n_name: isConnected_\n_returns: bool_\n_returns_description: _\n_parameters: int id_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>is a device with this id already connected?</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isConnected(serial)</p>\n<!--\n_syntax: isConnected(serial)_\n_name: isConnected_\n_returns: bool_\n_returns_description: _\n_parameters: string serial_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>is a device with this serial already connected?</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isInited()</p>\n<!--\n_syntax: isInited()_\n_name: isInited_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>is the context inited?</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void listDevices(verbose = false)</p>\n<!--\n_syntax: listDevices(verbose = false)_\n_name: listDevices_\n_returns: void_\n_returns_description: _\n_parameters: bool verbose=false_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>print the device list</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int nextAvailableId()</p>\n<!--\n_syntax: nextAvailableId()_\n_name: nextAvailableId_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>get the id of the next available device, returns -1 if nothing found</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string nextAvailableSerial()</p>\n<!--\n_syntax: nextAvailableSerial()_\n_name: nextAvailableSerial_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>get the serial number of the next available device, returns an empty string &quot;&quot; if nothing found</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int numAvailable()</p>\n<!--\n_syntax: numAvailable()_\n_name: numAvailable_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>get the number of available devices (not connected)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int numConnected()</p>\n<!--\n_syntax: numConnected()_\n_name: numConnected_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>get the number of currently connected devices</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int numTotal()</p>\n<!--\n_syntax: numTotal()_\n_name: numTotal_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>get the total number of devices</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofxKinectContext()</h3>\n<!--\n_syntax: ofxKinectContext()_\n_name: ofxKinectContext_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool open(&amp;kinect, id = -1)</p>\n<!--\n_syntax: open(&kinect, id = -1)_\n_name: open_\n_returns: bool_\n_returns_description: _\n_parameters: ofxKinect &kinect, int id=-1_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>open a kinect device an id of -1 will open the first available</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool open(&amp;kinect, serial)</p>\n<!--\n_syntax: open(&kinect, serial)_\n_name: open_\n_returns: bool_\n_returns_description: _\n_parameters: ofxKinect &kinect, string serial_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>open a kinect device by it's unique serial number</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>~ofxKinectContext()</h3>\n<!--\n_syntax: ~ofxKinectContext()_\n_name: ~ofxKinectContext_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###bool  bInited</p>\n<!--\n_name: bInited_\n_type: bool _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###std::vector&lt;  KinectPair &gt;  deviceList</p>\n<!--\n_name: deviceList_\n_type: std::vector<  KinectPair > _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###freenect_context *  kinectContext</p>\n<!--\n_name: kinectContext_\n_type: freenect_context * _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###std::map&lt; int,  ofxKinect * &gt;  kinects</p>\n<!--\n_name: kinects_\n_type: std::map< int,  ofxKinect * > _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofxKinectContext\n\n\n<!--\n_visible: True_\n_advanced: True_\n_istemplated: False_\n-->\n\n##InlineDescription\n\n\nwrapper for the freenect context\n\ndo not use this directly \n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n###void buildDeviceList()\n\n<!--\n_syntax: buildDeviceList()_\n_name: buildDeviceList_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n(re)build the list of devices \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\nclear the freenect context closes all currently connected devices \n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void close(&kinect)\n\n<!--\n_syntax: close(&kinect)_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: ofxKinect &kinect_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nclose a kinect device \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void closeAll()\n\n<!--\n_syntax: closeAll()_\n_name: closeAll_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\ncloses all currently connected kinects \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###freenect_context * getContext()\n\n<!--\n_syntax: getContext()_\n_name: getContext_\n_returns: freenect_context *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nget the raw pointer \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getDeviceIndex(id)\n\n<!--\n_syntax: getDeviceIndex(id)_\n_name: getDeviceIndex_\n_returns: int_\n_returns_description: _\n_parameters: int id_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\nget the deviceList index from an id returns -1 if not found \n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getDeviceIndex(serial)\n\n<!--\n_syntax: getDeviceIndex(serial)_\n_name: getDeviceIndex_\n_returns: int_\n_returns_description: _\n_parameters: string serial_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\nget the deviceList index from an id returns -1 if not found \n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofxKinect * getKinect(*dev)\n\n<!--\n_syntax: getKinect(*dev)_\n_name: getKinect_\n_returns: ofxKinect *_\n_returns_description: _\n_parameters: freenect_device *dev_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\nget the kinect object from a device pointer returns NULL if not found \n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool init()\n\n<!--\n_syntax: init()_\n_name: init_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\ninit the freenect context \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isConnected(id)\n\n<!--\n_syntax: isConnected(id)_\n_name: isConnected_\n_returns: bool_\n_returns_description: _\n_parameters: int id_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nis a device with this id already connected? \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isConnected(serial)\n\n<!--\n_syntax: isConnected(serial)_\n_name: isConnected_\n_returns: bool_\n_returns_description: _\n_parameters: string serial_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nis a device with this serial already connected? \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isInited()\n\n<!--\n_syntax: isInited()_\n_name: isInited_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nis the context inited? \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void listDevices(verbose = false)\n\n<!--\n_syntax: listDevices(verbose = false)_\n_name: listDevices_\n_returns: void_\n_returns_description: _\n_parameters: bool verbose=false_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nprint the device list \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int nextAvailableId()\n\n<!--\n_syntax: nextAvailableId()_\n_name: nextAvailableId_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\nget the id of the next available device, returns -1 if nothing found \n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string nextAvailableSerial()\n\n<!--\n_syntax: nextAvailableSerial()_\n_name: nextAvailableSerial_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\nget the serial number of the next available device, returns an empty string \"\" if nothing found \n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int numAvailable()\n\n<!--\n_syntax: numAvailable()_\n_name: numAvailable_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nget the number of available devices (not connected) \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int numConnected()\n\n<!--\n_syntax: numConnected()_\n_name: numConnected_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nget the number of currently connected devices \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int numTotal()\n\n<!--\n_syntax: numTotal()_\n_name: numTotal_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nget the total number of devices \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxKinectContext()\n\n<!--\n_syntax: ofxKinectContext()_\n_name: ofxKinectContext_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool open(&kinect, id = -1)\n\n<!--\n_syntax: open(&kinect, id = -1)_\n_name: open_\n_returns: bool_\n_returns_description: _\n_parameters: ofxKinect &kinect, int id=-1_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\nopen a kinect device an id of -1 will open the first available \n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool open(&kinect, serial)\n\n<!--\n_syntax: open(&kinect, serial)_\n_name: open_\n_returns: bool_\n_returns_description: _\n_parameters: ofxKinect &kinect, string serial_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nopen a kinect device by it's unique serial number \n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofxKinectContext()\n\n<!--\n_syntax: ~ofxKinectContext()_\n_name: ~ofxKinectContext_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool  bInited\n\n<!--\n_name: bInited_\n_type: bool _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###std::vector<  KinectPair >  deviceList\n\n<!--\n_name: deviceList_\n_type: std::vector<  KinectPair > _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###freenect_context *  kinectContext\n\n<!--\n_name: kinectContext_\n_type: freenect_context * _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###std::map< int,  ofxKinect * >  kinects\n\n<!--\n_name: kinects_\n_type: std::map< int,  ofxKinect * > _\n_access: private_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_description: _\n\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}