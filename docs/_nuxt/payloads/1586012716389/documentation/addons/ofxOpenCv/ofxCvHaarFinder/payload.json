{"data":[{"page":{"entry":{"name":"ofxCvHaarFinder","filename":"ofxCvHaarFinder.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/addons/ofxOpenCv/ofxCvHaarFinder.markdown","path":"/documentation/addons/ofxOpenCv/ofxCvHaarFinder","route":"/documentation/addons/ofxOpenCv/ofxCvHaarFinder.markdown","dir":"../ofSite/documentation/addons/ofxOpenCv","ext":"markdown","type":"page","id":2104,"parent":2084,"breadcrumbs":[2084,1993,1968],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>ofxCvHaarFinder allows you to check an image for a match to a Haar classifier. The Haar Classifier is a data file generated from a training process where an application is &quot;taught&quot; how to recognize something in different contexts. This can be things like recognizing whether a certain sound is a word being spoken by a user, whether a gesture is a certain shape, or, in the image shown below, whether a pattern of pixels constitute a face.</p>\n<p><img src=\"face_detection.jpg\" alt=\"face detection\" title=\"Face detection on a photograph\"></p>\n<p>A very basic set-up of an application using ofxCvHaarFinder would look like so:</p>\n<pre><code class=\"language-{.cpp}\">app<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   haarFinder<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haarcascade.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// must be in /data/</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   haarFinder<span class=\"token punctuation\">.</span><span class=\"token function\">findHaarObjects</span><span class=\"token punctuation\">(</span>imageToExamine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> haarFinder<span class=\"token punctuation\">.</span>blobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span> haarFinder<span class=\"token punctuation\">.</span>blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"draw(x, y)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draws any detected objects to the screen with a rectangle, like so:</p>\n<p><img src=\"draw_facedetection.jpg\" alt=\"Draw faces\" title=\"Detecting faces.\"></p>\n","counter":0},{"syntax":"findHaarObjects(&, x, y, w, h, minWidth = 0, minHeight = 0)","name":"findHaarObjects","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minWidth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minHeight<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Takes an input ofxCvGrayscaleImage object and allows you to set the minimum width and height of areas that should be returned and a region of interest as an ofRectangle that you would like to limit haar finding to.</p>\n","counter":4},{"syntax":"findHaarObjects(&input, &roi, minWidth = 0, minHeight = 0)","name":"findHaarObjects","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">,</span> ofRectangle <span class=\"token operator\">&amp;</span>roi<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minWidth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minHeight<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Takes an input ofxCvGrayscaleImage object and allows you to set the minimum width and height of areas that should be returned and a region of interest as an ofRectangle that you would like to limit haar finding to.</p>\n<pre><code class=\"language-{.cpp}\">colorImg<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>vidGrabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngrayImage <span class=\"token operator\">=</span> colorImg<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// convert our color image to a grayscale image</span>\n\nfaceFinder<span class=\"token punctuation\">.</span><span class=\"token function\">findHaarObjects</span><span class=\"token punctuation\">(</span>grayImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> faceFinder<span class=\"token punctuation\">.</span>blobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofRectangle roi <span class=\"token operator\">=</span> faceFinder<span class=\"token punctuation\">.</span>blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect<span class=\"token punctuation\">;</span>\n\teyeFinder<span class=\"token punctuation\">.</span><span class=\"token function\">findHaarObjects</span><span class=\"token punctuation\">(</span>grayImage<span class=\"token punctuation\">,</span> roi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"findHaarObjects(&input, minWidth = 0, minHeight = 0)","name":"findHaarObjects","returns":"int","returns_description":null,"parameters":"ofImage <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minWidth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minHeight<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Takes an input ofImage object and allows you to set the minimum width and height of areas that should be returned.</p>\n<pre><code class=\"language-{.cpp}\">camera<span class=\"token punctuation\">.</span><span class=\"token function\">grabFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>camera<span class=\"token punctuation\">.</span><span class=\"token function\">isFrameNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\timg<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>grab<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfinder<span class=\"token punctuation\">.</span><span class=\"token function\">findHaarObjects</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"findHaarObjects(&input, minWidth = 0, minHeight = 0)","name":"findHaarObjects","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minWidth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minHeight<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Takes an input ofxCvGrayscaleImage object and allows you to set the minimum width and height of areas that should be returned.</p>\n"},{"syntax":"findHaarObjects(&input, minWidth = 0, minHeight = 0)","name":"findHaarObjects","returns":"int","returns_description":null,"parameters":"ofPixels <span class=\"token operator\">&amp;</span>input<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minWidth<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> minHeight<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Takes an input ofPixels object and allows you to set the minimum width and height of areas that should be returned.</p>\n"},{"syntax":"getHeight()","name":"getHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the height of the image area that is being examined.</p>\n","counter":0},{"syntax":"getWidth()","name":"getWidth","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the width of the image area that is being examined.</p>\n","counter":0},{"syntax":"ofxCvHaarFinder(&finder)","name":"ofxCvHaarFinder","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvHaarFinder <span class=\"token operator\">&amp;</span>finder","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy constructor.</p>\n","counter":1},{"syntax":"ofxCvHaarFinder()","name":"ofxCvHaarFinder","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Constructor.</p>\n"},{"syntax":"setNeighbors(neighbors)","name":"setNeighbors","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> neighbors","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Minimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, that might be useful if you want to do a customized grouping.</p>\n","counter":0},{"syntax":"setScaleHaar(scaleHaar)","name":"setScaleHaar","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> scaleHaar","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setup(haarFile)","name":"setup","returns":"void","returns_description":null,"parameters":"string haarFile","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This loads a Haar cascade file into the finder. This needs to be done before the Haar finder can be used with images.</p>\n","counter":0},{"syntax":"~ofxCvHaarFinder()","name":"~ofxCvHaarFinder","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Destructor.</p>\n","counter":0},{"name":"blobs","type":"ofxCvBlob","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":"<p>Provides access to the all the blobs detected in the last run of findHaarObjects() via a vector&lt;ofxCvBlob</p>\n"},{"name":"cascade","type":"CvHaarClassifierCascade *","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"haarFile","type":"string","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"img","type":"ofxCvGrayscaleImage","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"neighbors","type":"unsigned","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"scaleHaar","type":"float","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofxCvHaarFinder</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>ofxCvHaarFinder allows you to check an image for a match to a Haar classifier. The Haar Classifier is a data file generated from a training process where an application is &quot;taught&quot; how to recognize something in different contexts. This can be things like recognizing whether a certain sound is a word being spoken by a user, whether a gesture is a certain shape, or, in the image shown below, whether a pattern of pixels constitute a face.</p>\n<p><img src=\"face_detection.jpg\" alt=\"face detection\" title=\"Face detection on a photograph\"></p>\n<p>A very basic set-up of an application using ofxCvHaarFinder would look like so:</p>\n<pre><code class=\"language-{.cpp}\">app<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   haarFinder<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haarcascade.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// must be in /data/</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   haarFinder<span class=\"token punctuation\">.</span><span class=\"token function\">findHaarObjects</span><span class=\"token punctuation\">(</span>imageToExamine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\napp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> haarFinder<span class=\"token punctuation\">.</span>blobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span> haarFinder<span class=\"token punctuation\">.</span>blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre>\n<p>##Methods</p>\n<p>###void draw(x, y)</p>\n<!--\n_syntax: draw(x, y)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draws any detected objects to the screen with a rectangle, like so:</p>\n<p><img src=\"draw_facedetection.jpg\" alt=\"Draw faces\" title=\"Detecting faces.\"></p>\n<!----------------------------------------------------------------------------->\n<p>###int findHaarObjects(&amp;, x, y, w, h, minWidth = 0, minHeight = 0)</p>\n<!--\n_syntax: findHaarObjects(&, x, y, w, h, minWidth = 0, minHeight = 0)_\n_name: findHaarObjects_\n_returns: int_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &, int x, int y, int w, int h, int minWidth=0, int minHeight=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Takes an input ofxCvGrayscaleImage object and allows you to set the minimum width and height of areas that should be returned and a region of interest as an ofRectangle that you would like to limit haar finding to.</p>\n<!----------------------------------------------------------------------------->\n<p>###int findHaarObjects(&amp;input, &amp;roi, minWidth = 0, minHeight = 0)</p>\n<!--\n_syntax: findHaarObjects(&input, &roi, minWidth = 0, minHeight = 0)_\n_name: findHaarObjects_\n_returns: int_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &input, ofRectangle &roi, int minWidth=0, int minHeight=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Takes an input ofxCvGrayscaleImage object and allows you to set the minimum width and height of areas that should be returned and a region of interest as an ofRectangle that you would like to limit haar finding to.</p>\n<pre><code class=\"language-{.cpp}\">colorImg<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>vidGrabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngrayImage <span class=\"token operator\">=</span> colorImg<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// convert our color image to a grayscale image</span>\n\nfaceFinder<span class=\"token punctuation\">.</span><span class=\"token function\">findHaarObjects</span><span class=\"token punctuation\">(</span>grayImage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> faceFinder<span class=\"token punctuation\">.</span>blobs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tofRectangle roi <span class=\"token operator\">=</span> faceFinder<span class=\"token punctuation\">.</span>blobs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>boundingRect<span class=\"token punctuation\">;</span>\n\teyeFinder<span class=\"token punctuation\">.</span><span class=\"token function\">findHaarObjects</span><span class=\"token punctuation\">(</span>grayImage<span class=\"token punctuation\">,</span> roi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###int findHaarObjects(&amp;input, minWidth = 0, minHeight = 0)</p>\n<!--\n_syntax: findHaarObjects(&input, minWidth = 0, minHeight = 0)_\n_name: findHaarObjects_\n_returns: int_\n_returns_description: _\n_parameters: ofImage &input, int minWidth=0, int minHeight=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Takes an input ofImage object and allows you to set the minimum width and height of areas that should be returned.</p>\n<pre><code class=\"language-{.cpp}\">camera<span class=\"token punctuation\">.</span><span class=\"token function\">grabFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>camera<span class=\"token punctuation\">.</span><span class=\"token function\">isFrameNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\timg<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>grab<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tfinder<span class=\"token punctuation\">.</span><span class=\"token function\">findHaarObjects</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###int findHaarObjects(&amp;input, minWidth = 0, minHeight = 0)</p>\n<!--\n_syntax: findHaarObjects(&input, minWidth = 0, minHeight = 0)_\n_name: findHaarObjects_\n_returns: int_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &input, int minWidth=0, int minHeight=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Takes an input ofxCvGrayscaleImage object and allows you to set the minimum width and height of areas that should be returned.</p>\n<!----------------------------------------------------------------------------->\n<p>###int findHaarObjects(&amp;input, minWidth = 0, minHeight = 0)</p>\n<!--\n_syntax: findHaarObjects(&input, minWidth = 0, minHeight = 0)_\n_name: findHaarObjects_\n_returns: int_\n_returns_description: _\n_parameters: ofPixels &input, int minWidth=0, int minHeight=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Takes an input ofPixels object and allows you to set the minimum width and height of areas that should be returned.</p>\n<!----------------------------------------------------------------------------->\n<p>###float getHeight()</p>\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the height of the image area that is being examined.</p>\n<!----------------------------------------------------------------------------->\n<p>###float getWidth()</p>\n<!--\n_syntax: getWidth()_\n_name: getWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the width of the image area that is being examined.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofxCvHaarFinder(&amp;finder)</h3>\n<!--\n_syntax: ofxCvHaarFinder(&finder)_\n_name: ofxCvHaarFinder_\n_returns: _\n_returns_description: _\n_parameters: const ofxCvHaarFinder &finder_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy constructor.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofxCvHaarFinder()</h3>\n<!--\n_syntax: ofxCvHaarFinder()_\n_name: ofxCvHaarFinder_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Constructor.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setNeighbors(neighbors)</p>\n<!--\n_syntax: setNeighbors(neighbors)_\n_name: setNeighbors_\n_returns: void_\n_returns_description: _\n_parameters: unsigned int neighbors_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Minimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, that might be useful if you want to do a customized grouping.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setScaleHaar(scaleHaar)</p>\n<!--\n_syntax: setScaleHaar(scaleHaar)_\n_name: setScaleHaar_\n_returns: void_\n_returns_description: _\n_parameters: float scaleHaar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setup(haarFile)</p>\n<!--\n_syntax: setup(haarFile)_\n_name: setup_\n_returns: void_\n_returns_description: _\n_parameters: string haarFile_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This loads a Haar cascade file into the finder. This needs to be done before the Haar finder can be used with images.</p>\n<!----------------------------------------------------------------------------->\n<h3>~ofxCvHaarFinder()</h3>\n<!--\n_syntax: ~ofxCvHaarFinder()_\n_name: ~ofxCvHaarFinder_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Destructor.</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###ofxCvBlob blobs</p>\n<!--\n_name: blobs_\n_type: ofxCvBlob_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Provides access to the all the blobs detected in the last run of findHaarObjects() via a vector<ofxCvBlob>.</p>\n<!----------------------------------------------------------------------------->\n<p>###CvHaarClassifierCascade * cascade</p>\n<!--\n_name: cascade_\n_type: CvHaarClassifierCascade *_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string haarFile</p>\n<!--\n_name: haarFile_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofxCvGrayscaleImage img</p>\n<!--\n_name: img_\n_type: ofxCvGrayscaleImage_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###unsigned neighbors</p>\n<!--\n_name: neighbors_\n_type: unsigned_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float scaleHaar</p>\n<!--\n_name: scaleHaar_\n_type: float_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofxCvHaarFinder\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nofxCvHaarFinder allows you to check an image for a match to a Haar classifier. The Haar Classifier is a data file generated from a training process where an application is \"taught\" how to recognize something in different contexts. This can be things like recognizing whether a certain sound is a word being spoken by a user, whether a gesture is a certain shape, or, in the image shown below, whether a pattern of pixels constitute a face.\n\n![face detection](face_detection.jpg \"Face detection on a photograph\")\n\nA very basic set-up of an application using ofxCvHaarFinder would look like so:\n\n~~~~{.cpp}\napp::setup() {\n   haarFinder.setup(\"haarcascade.xml\"); // must be in /data/\n}\n\napp::update() {\n   haarFinder.findHaarObjects(imageToExamine);\n}\n\napp::draw() {\n  for(int i = 0; i < haarFinder.blobs.size(); i++) {\n     ofDrawRectangle( haarFinder.blobs[i].boundingRect );\n  }\n}\n\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###void draw(x, y)\n\n<!--\n_syntax: draw(x, y)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraws any detected objects to the screen with a rectangle, like so:\n\n![Draw faces](draw_facedetection.jpg \"Detecting faces.\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int findHaarObjects(&, x, y, w, h, minWidth = 0, minHeight = 0)\n\n<!--\n_syntax: findHaarObjects(&, x, y, w, h, minWidth = 0, minHeight = 0)_\n_name: findHaarObjects_\n_returns: int_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &, int x, int y, int w, int h, int minWidth=0, int minHeight=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nTakes an input ofxCvGrayscaleImage object and allows you to set the minimum width and height of areas that should be returned and a region of interest as an ofRectangle that you would like to limit haar finding to.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int findHaarObjects(&input, &roi, minWidth = 0, minHeight = 0)\n\n<!--\n_syntax: findHaarObjects(&input, &roi, minWidth = 0, minHeight = 0)_\n_name: findHaarObjects_\n_returns: int_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &input, ofRectangle &roi, int minWidth=0, int minHeight=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nTakes an input ofxCvGrayscaleImage object and allows you to set the minimum width and height of areas that should be returned and a region of interest as an ofRectangle that you would like to limit haar finding to.\n\n~~~~{.cpp}\ncolorImg.setFromPixels(vidGrabber.getPixels());\ngrayImage = colorImg; // convert our color image to a grayscale image\n\nfaceFinder.findHaarObjects(grayImage);\n\nfor(int i = 0; i < faceFinder.blobs.size(); i++) {\n\tofRectangle roi = faceFinder.blobs[i].boundingRect;\n\teyeFinder.findHaarObjects(grayImage, roi);\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int findHaarObjects(&input, minWidth = 0, minHeight = 0)\n\n<!--\n_syntax: findHaarObjects(&input, minWidth = 0, minHeight = 0)_\n_name: findHaarObjects_\n_returns: int_\n_returns_description: _\n_parameters: ofImage &input, int minWidth=0, int minHeight=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nTakes an input ofImage object and allows you to set the minimum width and height of areas that should be returned.\n\n~~~~{.cpp}\ncamera.grabFrame();\nif(camera.isFrameNew())\n{\n\timg.setFromPixels(grab.getPixels());\n\tfinder.findHaarObjects(img);\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int findHaarObjects(&input, minWidth = 0, minHeight = 0)\n\n<!--\n_syntax: findHaarObjects(&input, minWidth = 0, minHeight = 0)_\n_name: findHaarObjects_\n_returns: int_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &input, int minWidth=0, int minHeight=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nTakes an input ofxCvGrayscaleImage object and allows you to set the minimum width and height of areas that should be returned.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int findHaarObjects(&input, minWidth = 0, minHeight = 0)\n\n<!--\n_syntax: findHaarObjects(&input, minWidth = 0, minHeight = 0)_\n_name: findHaarObjects_\n_returns: int_\n_returns_description: _\n_parameters: ofPixels &input, int minWidth=0, int minHeight=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nTakes an input ofPixels object and allows you to set the minimum width and height of areas that should be returned.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHeight()\n\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the height of the image area that is being examined.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getWidth()\n\n<!--\n_syntax: getWidth()_\n_name: getWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the width of the image area that is being examined.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvHaarFinder(&finder)\n\n<!--\n_syntax: ofxCvHaarFinder(&finder)_\n_name: ofxCvHaarFinder_\n_returns: _\n_returns_description: _\n_parameters: const ofxCvHaarFinder &finder_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy constructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvHaarFinder()\n\n<!--\n_syntax: ofxCvHaarFinder()_\n_name: ofxCvHaarFinder_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConstructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setNeighbors(neighbors)\n\n<!--\n_syntax: setNeighbors(neighbors)_\n_name: setNeighbors_\n_returns: void_\n_returns_description: _\n_parameters: unsigned int neighbors_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMinimum number (minus 1) of neighbor rectangles that makes up an object. All the groups of a smaller number of rectangles than min_neighbors-1 are rejected. If min_neighbors is 0, the function does not any grouping at all and returns all the detected candidate rectangles, that might be useful if you want to do a customized grouping.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setScaleHaar(scaleHaar)\n\n<!--\n_syntax: setScaleHaar(scaleHaar)_\n_name: setScaleHaar_\n_returns: void_\n_returns_description: _\n_parameters: float scaleHaar_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setup(haarFile)\n\n<!--\n_syntax: setup(haarFile)_\n_name: setup_\n_returns: void_\n_returns_description: _\n_parameters: string haarFile_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis loads a Haar cascade file into the finder. This needs to be done before the Haar finder can be used with images.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofxCvHaarFinder()\n\n<!--\n_syntax: ~ofxCvHaarFinder()_\n_name: ~ofxCvHaarFinder_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDestructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###ofxCvBlob blobs\n\n<!--\n_name: blobs_\n_type: ofxCvBlob_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nProvides access to the all the blobs detected in the last run of findHaarObjects() via a vector<ofxCvBlob>.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###CvHaarClassifierCascade * cascade\n\n<!--\n_name: cascade_\n_type: CvHaarClassifierCascade *_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string haarFile\n\n<!--\n_name: haarFile_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofxCvGrayscaleImage img\n\n<!--\n_name: img_\n_type: ofxCvGrayscaleImage_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###unsigned neighbors\n\n<!--\n_name: neighbors_\n_type: unsigned_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float scaleHaar\n\n<!--\n_name: scaleHaar_\n_type: float_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}