{"data":[{"page":{"entry":{"name":"ofxCvGrayscaleImage","filename":"ofxCvGrayscaleImage.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/addons/ofxOpenCv/ofxCvGrayscaleImage.markdown","path":"/documentation/addons/ofxOpenCv/ofxCvGrayscaleImage","route":"/documentation/addons/ofxOpenCv/ofxCvGrayscaleImage.markdown","dir":"../ofSite/documentation/addons/ofxOpenCv","ext":"markdown","type":"page","id":2103,"parent":2084,"breadcrumbs":[2084,1993,1968],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>This represents an OpenCV friendly image in grayscale, i.e. without any color data. This is useful because many of the image processing and analysis routines in OpenCV (or OF for that matter) don't require color information. Less information to sort through means faster image analysis and faster applications. You can convert an ofxCvColorImage to an ofxCvGrayscaleImage using the = operator like so:</p>\n<pre><code class=\"language-{.cpp}\">grayscaleImg <span class=\"token operator\">=</span> colorImg<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>A common routine that you'll see is something like the following:</p>\n<pre><code class=\"language-{.cpp}\">colorImg<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>vidGrabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngrayImage <span class=\"token operator\">=</span> colorImg<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// convert our color image to a grayscale image</span>\n</code></pre>\n<p>The ofxCvGrayscaleImage can then be passed to a ofxCvContourFinder instance for contour and blob detection.</p>\n<pre><code class=\"language-{.cpp}\">contourFinder<span class=\"token punctuation\">.</span><span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>grayscaleImage<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">340</span><span class=\"token operator\">*</span><span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"ofxCvImage"},"methods":[{"syntax":"absDiff(&mom)","name":"absDiff","returns":"void","returns_description":null,"parameters":"ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Makes a diff of the current image and the mom image. This alters the pixels of the ofxCvGrayscaleImage instance.</p>\n<pre><code class=\"language-{.cpp}\">current<span class=\"token punctuation\">.</span><span class=\"token function\">absDiff</span><span class=\"token punctuation\">(</span>incoming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The below image shows how the diff process operates:</p>\n<p><img src=\"absdiff.png\" alt=\"Image diff\" title=\"Diffing two images\"></p>\n","counter":1},{"syntax":"absDiff(&mom, &dad)","name":"absDiff","returns":"void","returns_description":null,"parameters":"ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">,</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>dad","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the pixels of the images ofxCvGrayscaleImage instance to a diff of the &amp;mom and &amp;dad instance.</p>\n<p><img src=\"absdiff.png\" alt=\"Image diff\" title=\"Diffing two images\"></p>\n"},{"syntax":"adaptiveThreshold(blockSize, offset = 0, invert = false, gauss = false)","name":"adaptiveThreshold","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> blockSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> invert<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> gauss<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Increases the contrast of the image by blocks, the larger the block, the larger the area that is thresholded at one time. Invert flips the values of the image, making black into white and vice versa. gauss determines whether the image is to be thresholded usinga Gaussian method or simply a plain thresholding. Below you can see the result of using adaptive threshold with two different values.</p>\n<pre><code class=\"language-{.cpp}\">left<span class=\"token punctuation\">.</span><span class=\"token function\">adaptiveThreshold</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nright<span class=\"token punctuation\">.</span><span class=\"token function\">adaptiveThreshold</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"threshold.png\" alt=\"Threshold\" title=\"Thresholding an image\"></p>\n","counter":0},{"syntax":"allocatePixels(w, h)","name":"allocatePixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"allocateTexture()","name":"allocateTexture","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"blurHeavily()","name":"blurHeavily","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Blurs the image using a pre-determine blur amount.</p>\n","counter":0},{"syntax":"brightnessContrast(brightness, contrast)","name":"brightnessContrast","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> brightness<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> contrast","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the brightness and contrast of an image.</p>\n","counter":0},{"syntax":"contrastStretch()","name":"contrastStretch","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This increases the contrast of the image remapping the brightest points in the image to white and the darkest points in the image to black. Generally on a ofxCvGrayscaleImage it isn't particularly noticeable, though it can have a large effect mathematically.</p>\n","counter":0},{"syntax":"convertToRange(min, max)","name":"convertToRange","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Maps the pixels of an image to the min and max range passed in.</p>\n<pre><code class=\"language-{.cpp}\">\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>grabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will leave unaltered</span>\nsecond <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// change it</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">convertToRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super low contrast</span>\n\n</code></pre>\n<p><img src=\"convertToRange.png\" alt=\"Image convert to range\" title=\"Converting the range of an image\"></p>\n","counter":0},{"syntax":"dilate_3x3()","name":"dilate_3x3","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"erode_3x3()","name":"erode_3x3","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"init()","name":"init","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofxCvGrayscaleImage()","name":"ofxCvGrayscaleImage","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Constructor.</p>\n","counter":1},{"syntax":"ofxCvGrayscaleImage(&mom)","name":"ofxCvGrayscaleImage","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy constructor, allows you copy one ofxCvGrayscaleImage into another.</p>\n"},{"syntax":"operator=(&_pixels)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPixels <span class=\"token operator\">&amp;</span>_pixels","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies a IplImage into a ofxCvGrayscaleImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> iplImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n","counter":5},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies one ofxCvGrayscaleImage to another ofxCvGrayscaleImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">imageOne <span class=\"token operator\">=</span> imageTwo<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvColorImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies a ofxCvColorImage into a ofxCvGrayscaleImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> colorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvFloatImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies a ofxCvFloatImage into a ofxCvGrayscaleImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> floatColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvShortImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies a ofxCvShortImage into a ofxCvGrayscaleImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> shortColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n"},{"syntax":"operator=(*mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>mom","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"resize(w, h)","name":"resize","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Resizes the image to the w, h passed in.</p>\n","counter":0},{"syntax":"scaleIntoMe(&mom, interpolationMethod)","name":"scaleIntoMe","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> interpolationMethod","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Scales the image passed in to be the size of the current image,</p>\n<pre><code class=\"language-{.cpp}\">\nofxCvImage first<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofxCvImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">scaleIntoMe</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// first is now 320,240</span>\n\n</code></pre>\n","counter":0},{"syntax":"set(value)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. the values are 1.0 to 255.0.</p>\n","counter":0},{"syntax":"setFromColorImage(&mom)","name":"setFromColorImage","returns":"void","returns_description":null,"parameters":"ofxCvColorImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the grayscale image from an ofxCvColorImage.</p>\n","counter":0},{"syntax":"setFromFloatImage(&mom)","name":"setFromFloatImage","returns":"void","returns_description":null,"parameters":"ofxCvFloatImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the grayscale image from an ofxCvFloatImage.</p>\n","counter":0},{"syntax":"setFromPixels(*_pixels, w, h)","name":"setFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in a ofxCvGrayscaleImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image. The array is assumed to contain grayscale values.</p>\n","counter":0},{"syntax":"setRoiFromPixels(*_pixels, w, h)","name":"setRoiFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This allows you to set the ROI on the image from an ofPixels instance. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n","counter":0},{"syntax":"threshold(value, invert = false)","name":"threshold","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> invert<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Increases the contrast of the image. The value is the threshold level applied to the image, for instance:</p>\n<pre><code class=\"language-{.cpp}\">altered<span class=\"token punctuation\">.</span><span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super high contrast</span>\n</code></pre>\n<p><img src=\"threshold.png\" alt=\"Threshold\" title=\"Thresholding an image\"></p>\n","counter":0},{"syntax":"~ofxCvGrayscaleImage()","name":"~ofxCvGrayscaleImage","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Destructor.</p>\n","counter":0},{"name":"briConLutMatrix","type":"CvMat *","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofxCvGrayscaleImage</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: ofxCvImage_\n-->\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>This represents an OpenCV friendly image in grayscale, i.e. without any color data. This is useful because many of the image processing and analysis routines in OpenCV (or OF for that matter) don't require color information. Less information to sort through means faster image analysis and faster applications. You can convert an ofxCvColorImage to an ofxCvGrayscaleImage using the = operator like so:</p>\n<pre><code class=\"language-{.cpp}\">grayscaleImg <span class=\"token operator\">=</span> colorImg<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>A common routine that you'll see is something like the following:</p>\n<pre><code class=\"language-{.cpp}\">colorImg<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>vidGrabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ngrayImage <span class=\"token operator\">=</span> colorImg<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// convert our color image to a grayscale image</span>\n</code></pre>\n<p>The ofxCvGrayscaleImage can then be passed to a ofxCvContourFinder instance for contour and blob detection.</p>\n<pre><code class=\"language-{.cpp}\">contourFinder<span class=\"token punctuation\">.</span><span class=\"token function\">findContours</span><span class=\"token punctuation\">(</span>grayscaleImage<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">340</span><span class=\"token operator\">*</span><span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>##Methods</p>\n<p>###void absDiff(&amp;mom)</p>\n<!--\n_syntax: absDiff(&mom)_\n_name: absDiff_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvGrayscaleImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Makes a diff of the current image and the mom image. This alters the pixels of the ofxCvGrayscaleImage instance.</p>\n<pre><code class=\"language-{.cpp}\">current<span class=\"token punctuation\">.</span><span class=\"token function\">absDiff</span><span class=\"token punctuation\">(</span>incoming<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The below image shows how the diff process operates:</p>\n<p><img src=\"absdiff.png\" alt=\"Image diff\" title=\"Diffing two images\"></p>\n<!----------------------------------------------------------------------------->\n<p>###void absDiff(&amp;mom, &amp;dad)</p>\n<!--\n_syntax: absDiff(&mom, &dad)_\n_name: absDiff_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvGrayscaleImage &mom, ofxCvGrayscaleImage &dad_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the pixels of the images ofxCvGrayscaleImage instance to a diff of the &amp;mom and &amp;dad instance.</p>\n<p><img src=\"absdiff.png\" alt=\"Image diff\" title=\"Diffing two images\"></p>\n<!----------------------------------------------------------------------------->\n<p>###void adaptiveThreshold(blockSize, offset = 0, invert = false, gauss = false)</p>\n<!--\n_syntax: adaptiveThreshold(blockSize, offset = 0, invert = false, gauss = false)_\n_name: adaptiveThreshold_\n_returns: void_\n_returns_description: _\n_parameters: int blockSize, int offset=0, bool invert=false, bool gauss=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Increases the contrast of the image by blocks, the larger the block, the larger the area that is thresholded at one time. Invert flips the values of the image, making black into white and vice versa. gauss determines whether the image is to be thresholded usinga Gaussian method or simply a plain thresholding. Below you can see the result of using adaptive threshold with two different values.</p>\n<pre><code class=\"language-{.cpp}\">left<span class=\"token punctuation\">.</span><span class=\"token function\">adaptiveThreshold</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nright<span class=\"token punctuation\">.</span><span class=\"token function\">adaptiveThreshold</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"threshold.png\" alt=\"Threshold\" title=\"Thresholding an image\"></p>\n<!----------------------------------------------------------------------------->\n<p>###void allocatePixels(w, h)</p>\n<!--\n_syntax: allocatePixels(w, h)_\n_name: allocatePixels_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void allocateTexture()</p>\n<!--\n_syntax: allocateTexture()_\n_name: allocateTexture_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void blurHeavily()</p>\n<!--\n_syntax: blurHeavily()_\n_name: blurHeavily_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Blurs the image using a pre-determine blur amount.</p>\n<!----------------------------------------------------------------------------->\n<p>###void brightnessContrast(brightness, contrast)</p>\n<!--\n_syntax: brightnessContrast(brightness, contrast)_\n_name: brightnessContrast_\n_returns: void_\n_returns_description: _\n_parameters: float brightness, float contrast_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the brightness and contrast of an image.</p>\n<!----------------------------------------------------------------------------->\n<p>###void contrastStretch()</p>\n<!--\n_syntax: contrastStretch()_\n_name: contrastStretch_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This increases the contrast of the image remapping the brightest points in the image to white and the darkest points in the image to black. Generally on a ofxCvGrayscaleImage it isn't particularly noticeable, though it can have a large effect mathematically.</p>\n<!----------------------------------------------------------------------------->\n<p>###void convertToRange(min, max)</p>\n<!--\n_syntax: convertToRange(min, max)_\n_name: convertToRange_\n_returns: void_\n_returns_description: _\n_parameters: float min, float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Maps the pixels of an image to the min and max range passed in.</p>\n<pre><code class=\"language-{.cpp}\">\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>grabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will leave unaltered</span>\nsecond <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// change it</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">convertToRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super low contrast</span>\n\n</code></pre>\n<p><img src=\"convertToRange.png\" alt=\"Image convert to range\" title=\"Converting the range of an image\"></p>\n<!----------------------------------------------------------------------------->\n<p>###void dilate_3x3()</p>\n<!--\n_syntax: dilate_3x3()_\n_name: dilate_3x3_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void erode_3x3()</p>\n<!--\n_syntax: erode_3x3()_\n_name: erode_3x3_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void init()</p>\n<!--\n_syntax: init()_\n_name: init_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofxCvGrayscaleImage()</h3>\n<!--\n_syntax: ofxCvGrayscaleImage()_\n_name: ofxCvGrayscaleImage_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Constructor.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofxCvGrayscaleImage(&amp;mom)</h3>\n<!--\n_syntax: ofxCvGrayscaleImage(&mom)_\n_name: ofxCvGrayscaleImage_\n_returns: _\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy constructor, allows you copy one ofxCvGrayscaleImage into another.</p>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(&amp;_pixels)</p>\n<!--\n_syntax: operator=(&_pixels)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofPixels &_pixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies a IplImage into a ofxCvGrayscaleImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> iplImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(&amp;mom)</p>\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies one ofxCvGrayscaleImage to another ofxCvGrayscaleImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">imageOne <span class=\"token operator\">=</span> imageTwo<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(&amp;mom)</p>\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvColorImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies a ofxCvColorImage into a ofxCvGrayscaleImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> colorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(&amp;mom)</p>\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvFloatImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies a ofxCvFloatImage into a ofxCvGrayscaleImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> floatColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(&amp;mom)</p>\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvShortImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies a ofxCvShortImage into a ofxCvGrayscaleImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> shortColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(*mom)</p>\n<!--\n_syntax: operator=(*mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const int *mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void resize(w, h)</p>\n<!--\n_syntax: resize(w, h)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Resizes the image to the w, h passed in.</p>\n<!----------------------------------------------------------------------------->\n<p>###void scaleIntoMe(&amp;mom, interpolationMethod)</p>\n<!--\n_syntax: scaleIntoMe(&mom, interpolationMethod)_\n_name: scaleIntoMe_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom, int interpolationMethod_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Scales the image passed in to be the size of the current image,</p>\n<pre><code class=\"language-{.cpp}\">\nofxCvImage first<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofxCvImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">scaleIntoMe</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// first is now 320,240</span>\n\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void set(value)</p>\n<!--\n_syntax: set(value)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. the values are 1.0 to 255.0.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setFromColorImage(&amp;mom)</p>\n<!--\n_syntax: setFromColorImage(&mom)_\n_name: setFromColorImage_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvColorImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the grayscale image from an ofxCvColorImage.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setFromFloatImage(&amp;mom)</p>\n<!--\n_syntax: setFromFloatImage(&mom)_\n_name: setFromFloatImage_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvFloatImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the grayscale image from an ofxCvFloatImage.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setFromPixels(*_pixels, w, h)</p>\n<!--\n_syntax: setFromPixels(*_pixels, w, h)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in a ofxCvGrayscaleImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image. The array is assumed to contain grayscale values.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setRoiFromPixels(*_pixels, w, h)</p>\n<!--\n_syntax: setRoiFromPixels(*_pixels, w, h)_\n_name: setRoiFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This allows you to set the ROI on the image from an ofPixels instance. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n<!----------------------------------------------------------------------------->\n<p>###void threshold(value, invert = false)</p>\n<!--\n_syntax: threshold(value, invert = false)_\n_name: threshold_\n_returns: void_\n_returns_description: _\n_parameters: int value, bool invert=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Increases the contrast of the image. The value is the threshold level applied to the image, for instance:</p>\n<pre><code class=\"language-{.cpp}\">altered<span class=\"token punctuation\">.</span><span class=\"token function\">threshold</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super high contrast</span>\n</code></pre>\n<p><img src=\"threshold.png\" alt=\"Threshold\" title=\"Thresholding an image\"></p>\n<!----------------------------------------------------------------------------->\n<h3>~ofxCvGrayscaleImage()</h3>\n<!--\n_syntax: ~ofxCvGrayscaleImage()_\n_name: ~ofxCvGrayscaleImage_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Destructor.</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###CvMat * briConLutMatrix</p>\n<!--\n_name: briConLutMatrix_\n_type: CvMat *_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofxCvGrayscaleImage\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: ofxCvImage_\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nThis represents an OpenCV friendly image in grayscale, i.e. without any color data. This is useful because many of the image processing and analysis routines in OpenCV (or OF for that matter) don't require color information. Less information to sort through means faster image analysis and faster applications. You can convert an ofxCvColorImage to an ofxCvGrayscaleImage using the = operator like so:\n\n~~~~{.cpp}\ngrayscaleImg = colorImg;\n~~~~\n\nA common routine that you'll see is something like the following:\n\n~~~~{.cpp}\ncolorImg.setFromPixels(vidGrabber.getPixels());\ngrayImage = colorImg; // convert our color image to a grayscale image\n~~~~\n\nThe ofxCvGrayscaleImage can then be passed to a ofxCvContourFinder instance for contour and blob detection.\n\n~~~~{.cpp}\ncontourFinder.findContours(grayscaleImage, 5, (340*240)/4, 4, false, true);\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###void absDiff(&mom)\n\n<!--\n_syntax: absDiff(&mom)_\n_name: absDiff_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvGrayscaleImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMakes a diff of the current image and the mom image. This alters the pixels of the ofxCvGrayscaleImage instance. \n\n~~~~{.cpp}\ncurrent.absDiff(incoming);\n~~~~\n\nThe below image shows how the diff process operates:\n\n![Image diff](absdiff.png \"Diffing two images\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void absDiff(&mom, &dad)\n\n<!--\n_syntax: absDiff(&mom, &dad)_\n_name: absDiff_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvGrayscaleImage &mom, ofxCvGrayscaleImage &dad_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the pixels of the images ofxCvGrayscaleImage instance to a diff of the &mom and &dad instance.\n\n![Image diff](absdiff.png \"Diffing two images\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void adaptiveThreshold(blockSize, offset = 0, invert = false, gauss = false)\n\n<!--\n_syntax: adaptiveThreshold(blockSize, offset = 0, invert = false, gauss = false)_\n_name: adaptiveThreshold_\n_returns: void_\n_returns_description: _\n_parameters: int blockSize, int offset=0, bool invert=false, bool gauss=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIncreases the contrast of the image by blocks, the larger the block, the larger the area that is thresholded at one time. Invert flips the values of the image, making black into white and vice versa. gauss determines whether the image is to be thresholded usinga Gaussian method or simply a plain thresholding. Below you can see the result of using adaptive threshold with two different values.\n\n~~~~{.cpp}\nleft.adaptiveThreshold(20);\nright.adaptiveThreshold(50);\n~~~~\n\n![Threshold](threshold.png \"Thresholding an image\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void allocatePixels(w, h)\n\n<!--\n_syntax: allocatePixels(w, h)_\n_name: allocatePixels_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void allocateTexture()\n\n<!--\n_syntax: allocateTexture()_\n_name: allocateTexture_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void blurHeavily()\n\n<!--\n_syntax: blurHeavily()_\n_name: blurHeavily_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nBlurs the image using a pre-determine blur amount.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void brightnessContrast(brightness, contrast)\n\n<!--\n_syntax: brightnessContrast(brightness, contrast)_\n_name: brightnessContrast_\n_returns: void_\n_returns_description: _\n_parameters: float brightness, float contrast_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the brightness and contrast of an image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void contrastStretch()\n\n<!--\n_syntax: contrastStretch()_\n_name: contrastStretch_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis increases the contrast of the image remapping the brightest points in the image to white and the darkest points in the image to black. Generally on a ofxCvGrayscaleImage it isn't particularly noticeable, though it can have a large effect mathematically.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertToRange(min, max)\n\n<!--\n_syntax: convertToRange(min, max)_\n_name: convertToRange_\n_returns: void_\n_returns_description: _\n_parameters: float min, float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMaps the pixels of an image to the min and max range passed in.\n\n~~~~{.cpp}\n\ncolors.setFromPixels(grabber.getPixels());\n\nfirst = colors; // will leave unaltered\nsecond = colors; // change it\nsecond.convertToRange(100, 140); // super low contrast\n\n~~~~\n\n![Image convert to range](convertToRange.png \"Converting the range of an image\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void dilate_3x3()\n\n<!--\n_syntax: dilate_3x3()_\n_name: dilate_3x3_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void erode_3x3()\n\n<!--\n_syntax: erode_3x3()_\n_name: erode_3x3_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void init()\n\n<!--\n_syntax: init()_\n_name: init_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvGrayscaleImage()\n\n<!--\n_syntax: ofxCvGrayscaleImage()_\n_name: ofxCvGrayscaleImage_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConstructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvGrayscaleImage(&mom)\n\n<!--\n_syntax: ofxCvGrayscaleImage(&mom)_\n_name: ofxCvGrayscaleImage_\n_returns: _\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy constructor, allows you copy one ofxCvGrayscaleImage into another.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&_pixels)\n\n<!--\n_syntax: operator=(&_pixels)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofPixels &_pixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies a IplImage into a ofxCvGrayscaleImage using the = symbol.\n\n~~~~{.cpp}\ngrayImage = iplImage; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies one ofxCvGrayscaleImage to another ofxCvGrayscaleImage using the = symbol.\n\n~~~~{.cpp}\nimageOne = imageTwo; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvColorImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies a ofxCvColorImage into a ofxCvGrayscaleImage using the = symbol.\n\n~~~~{.cpp}\ngrayImage = colorImage; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvFloatImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies a ofxCvFloatImage into a ofxCvGrayscaleImage using the = symbol.\n\n~~~~{.cpp}\ngrayImage = floatColorImage; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvShortImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies a ofxCvShortImage into a ofxCvGrayscaleImage using the = symbol.\n\n~~~~{.cpp}\ngrayImage = shortColorImage; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(*mom)\n\n<!--\n_syntax: operator=(*mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const int *mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resize(w, h)\n\n<!--\n_syntax: resize(w, h)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nResizes the image to the w, h passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleIntoMe(&mom, interpolationMethod)\n\n<!--\n_syntax: scaleIntoMe(&mom, interpolationMethod)_\n_name: scaleIntoMe_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom, int interpolationMethod_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nScales the image passed in to be the size of the current image, \n\n~~~~{.cpp}\n\nofxCvImage first;\nfirst.allocate(640, 480);\nofxCvImage second;\nsecond.allocate(320, 240);\n\nsecond.scaleIntoMe(first); // first is now 320,240\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(value)\n\n<!--\n_syntax: set(value)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. the values are 1.0 to 255.0.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromColorImage(&mom)\n\n<!--\n_syntax: setFromColorImage(&mom)_\n_name: setFromColorImage_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvColorImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the grayscale image from an ofxCvColorImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromFloatImage(&mom)\n\n<!--\n_syntax: setFromFloatImage(&mom)_\n_name: setFromFloatImage_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvFloatImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the grayscale image from an ofxCvFloatImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setFromPixels(*_pixels, w, h)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in a ofxCvGrayscaleImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image. The array is assumed to contain grayscale values.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRoiFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setRoiFromPixels(*_pixels, w, h)_\n_name: setRoiFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis allows you to set the ROI on the image from an ofPixels instance. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void threshold(value, invert = false)\n\n<!--\n_syntax: threshold(value, invert = false)_\n_name: threshold_\n_returns: void_\n_returns_description: _\n_parameters: int value, bool invert=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIncreases the contrast of the image. The value is the threshold level applied to the image, for instance:\n\n~~~~{.cpp}\naltered.threshold(30); // super high contrast\n~~~~\n\n![Threshold](threshold.png \"Thresholding an image\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofxCvGrayscaleImage()\n\n<!--\n_syntax: ~ofxCvGrayscaleImage()_\n_name: ~ofxCvGrayscaleImage_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDestructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###CvMat * briConLutMatrix\n\n<!--\n_name: briConLutMatrix_\n_type: CvMat *_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}