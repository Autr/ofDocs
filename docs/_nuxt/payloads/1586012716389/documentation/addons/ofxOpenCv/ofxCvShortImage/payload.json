{"data":[{"page":{"entry":{"name":"ofxCvShortImage","filename":"ofxCvShortImage.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/addons/ofxOpenCv/ofxCvShortImage.markdown","path":"/documentation/addons/ofxOpenCv/ofxCvShortImage","route":"/documentation/addons/ofxOpenCv/ofxCvShortImage.markdown","dir":"../ofSite/documentation/addons/ofxOpenCv","ext":"markdown","type":"page","id":2106,"parent":2084,"breadcrumbs":[2084,1993,1968],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>The ofxCvShortImage represents the color data of each pixel as unsigned char variables or values between 0 and 255. They are a slightly smaller (i.e. less data heavy) way of representing the data in an image but they also have less precision than ofxCvFloatImage. Usually when you're capturing from a camera or video into OpenCV, you're using ofxCvShortImage. Keep in mind though that most of the image operations in OpenCV expect a grayscale image, which you can construct using the ofxCvGrayscaleImage.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"ofxCvImage"},"methods":[{"syntax":"addWeighted(&mom, f)","name":"addWeighted","returns":"void","returns_description":null,"parameters":"ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies the pixel data of an ofxCvGrayscaleImage into the pixel data of the ofxCvShortImage.</p>\n","counter":0},{"syntax":"allocatePixels(w, h)","name":"allocatePixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"allocateTexture()","name":"allocateTexture","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Clears the pixel data of the image. The image must be allocated again with a call to allocate() before it can be used.</p>\n","counter":0},{"syntax":"contrastStretch()","name":"contrastStretch","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This increases the contrast of the image remapping the brightest points in the image to white and the darkest points in the image to black.</p>\n","counter":0},{"syntax":"convertGrayToShort(*grayImg, *floatImg)","name":"convertGrayToShort","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>grayImg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>floatImg","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"convertShortToGray(*floatImg, *grayImg)","name":"convertShortToGray","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>floatImg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>grayImg","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"convertToRange(min, max)","name":"convertToRange","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Maps the pixels of an image to the min and max range passed in.</p>\n<pre><code class=\"language-{.cpp}\">\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>grabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will leave unaltered</span>\nsecond <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// change it</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">convertToRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super low contrast</span>\n\n</code></pre>\n<p><img src=\"convertToRange.png\" alt=\"Image convert to range\" title=\"Converting the range of an image\"></p>\n","counter":0},{"syntax":"flagImageChanged()","name":"flagImageChanged","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Marks the image as changed so that the ofTexture can be updated, if the image contains one.</p>\n","counter":0},{"syntax":"getCv8BitsImage()","name":"getCv8BitsImage","returns":"int *","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getCv8BitsRoiImage()","name":"getCv8BitsRoiImage","returns":"int *","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getRoiShortPixelsRef()","name":"getRoiShortPixelsRef","returns":"ofShortPixels &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the pixel data of the instance as a ofShortPixels reference. This allows you to directly manipulate the pixels of the ofxCvShortImage.</p>\n","counter":0},{"syntax":"getShortPixelsRef()","name":"getShortPixelsRef","returns":"ofShortPixels &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the pixel data of the instance as a ofShortPixels instance.</p>\n","counter":0},{"syntax":"init()","name":"init","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofxCvShortImage()","name":"ofxCvShortImage","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Constructor.</p>\n","counter":1},{"syntax":"ofxCvShortImage(&mom)","name":"ofxCvShortImage","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvShortImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy constructor, which allows you to this:</p>\n<pre><code class=\"language-{.cpp}\">ofxCvShortImage old<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// allocate old</span>\nofxCvShortImage <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"operator=(*_pixels)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the ofxCvShortImage from the pixels pointer. Be sure that the pixels are the same size and dimensions as the ofxCvShortImage.</p>\n","counter":5},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies ofxCvGrayscaleImage to the ofxCvShortImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">imageOne <span class=\"token operator\">=</span> imageTwo<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvColorImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies a ofxCvColorImage into a ofxCvShortImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> colorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvFloatImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>opies a ofxCvFloatImage into a ofxCvShortImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> floatColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvShortImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies a ofxCvShortImage into a ofxCvShortImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> shortColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n"},{"syntax":"operator=(*mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>mom","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"resize(w, h)","name":"resize","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Resizes the image to the w, h passed in.</p>\n","counter":0},{"syntax":"scaleIntoMe(&mom, interpolationMethod)","name":"scaleIntoMe","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> interpolationMethod","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Scales the image passed in to be the size of the current image,</p>\n<pre><code class=\"language-{.cpp}\">\nofxCvImage first<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofxCvImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">scaleIntoMe</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// first is now 320,240</span>\n\n</code></pre>\n","counter":0},{"syntax":"set(value)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. Possible values are 0 to 255.</p>\n","counter":0},{"syntax":"setFromPixels(*_pixels, w, h)","name":"setFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in a ofxCvShortImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image. The array is assumed to contain color values.</p>\n","counter":0},{"syntax":"setRoiFromPixels(*_pixels, w, h)","name":"setRoiFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This allows you to set the ROI on the image from an ofPixels instance. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n","counter":0},{"name":"bShortPixelsDirty","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"cvGrayscaleDirty","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"cvGrayscaleImage","type":"IplImage *","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"shortPixels","type":"ofShortPixels","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofxCvShortImage</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: ofxCvImage_\n-->\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>The ofxCvShortImage represents the color data of each pixel as unsigned char variables or values between 0 and 255. They are a slightly smaller (i.e. less data heavy) way of representing the data in an image but they also have less precision than ofxCvFloatImage. Usually when you're capturing from a camera or video into OpenCV, you're using ofxCvShortImage. Keep in mind though that most of the image operations in OpenCV expect a grayscale image, which you can construct using the ofxCvGrayscaleImage.</p>\n<p>##Methods</p>\n<p>###void addWeighted(&amp;mom, f)</p>\n<!--\n_syntax: addWeighted(&mom, f)_\n_name: addWeighted_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvGrayscaleImage &mom, float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies the pixel data of an ofxCvGrayscaleImage into the pixel data of the ofxCvShortImage.</p>\n<!----------------------------------------------------------------------------->\n<p>###void allocatePixels(w, h)</p>\n<!--\n_syntax: allocatePixels(w, h)_\n_name: allocatePixels_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void allocateTexture()</p>\n<!--\n_syntax: allocateTexture()_\n_name: allocateTexture_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void clear()</p>\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Clears the pixel data of the image. The image must be allocated again with a call to allocate() before it can be used.</p>\n<!----------------------------------------------------------------------------->\n<p>###void contrastStretch()</p>\n<!--\n_syntax: contrastStretch()_\n_name: contrastStretch_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This increases the contrast of the image remapping the brightest points in the image to white and the darkest points in the image to black.</p>\n<!----------------------------------------------------------------------------->\n<p>###void convertGrayToShort(*grayImg, *floatImg)</p>\n<!--\n_syntax: convertGrayToShort(*grayImg, *floatImg)_\n_name: convertGrayToShort_\n_returns: void_\n_returns_description: _\n_parameters: int *grayImg, int *floatImg_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void convertShortToGray(*floatImg, *grayImg)</p>\n<!--\n_syntax: convertShortToGray(*floatImg, *grayImg)_\n_name: convertShortToGray_\n_returns: void_\n_returns_description: _\n_parameters: int *floatImg, int *grayImg_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void convertToRange(min, max)</p>\n<!--\n_syntax: convertToRange(min, max)_\n_name: convertToRange_\n_returns: void_\n_returns_description: _\n_parameters: float min, float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Maps the pixels of an image to the min and max range passed in.</p>\n<pre><code class=\"language-{.cpp}\">\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>grabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will leave unaltered</span>\nsecond <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// change it</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">convertToRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super low contrast</span>\n\n</code></pre>\n<p><img src=\"convertToRange.png\" alt=\"Image convert to range\" title=\"Converting the range of an image\"></p>\n<!----------------------------------------------------------------------------->\n<p>###void flagImageChanged()</p>\n<!--\n_syntax: flagImageChanged()_\n_name: flagImageChanged_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Marks the image as changed so that the ofTexture can be updated, if the image contains one.</p>\n<!----------------------------------------------------------------------------->\n<p>###int * getCv8BitsImage()</p>\n<!--\n_syntax: getCv8BitsImage()_\n_name: getCv8BitsImage_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int * getCv8BitsRoiImage()</p>\n<!--\n_syntax: getCv8BitsRoiImage()_\n_name: getCv8BitsRoiImage_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofShortPixels &amp; getRoiShortPixelsRef()</p>\n<!--\n_syntax: getRoiShortPixelsRef()_\n_name: getRoiShortPixelsRef_\n_returns: ofShortPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the pixel data of the instance as a ofShortPixels reference. This allows you to directly manipulate the pixels of the ofxCvShortImage.</p>\n<!----------------------------------------------------------------------------->\n<p>###ofShortPixels &amp; getShortPixelsRef()</p>\n<!--\n_syntax: getShortPixelsRef()_\n_name: getShortPixelsRef_\n_returns: ofShortPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the pixel data of the instance as a ofShortPixels instance.</p>\n<!----------------------------------------------------------------------------->\n<p>###void init()</p>\n<!--\n_syntax: init()_\n_name: init_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofxCvShortImage()</h3>\n<!--\n_syntax: ofxCvShortImage()_\n_name: ofxCvShortImage_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Constructor.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofxCvShortImage(&amp;mom)</h3>\n<!--\n_syntax: ofxCvShortImage(&mom)_\n_name: ofxCvShortImage_\n_returns: _\n_returns_description: _\n_parameters: const ofxCvShortImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy constructor, which allows you to this:</p>\n<pre><code class=\"language-{.cpp}\">ofxCvShortImage old<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// allocate old</span>\nofxCvShortImage <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(*_pixels)</p>\n<!--\n_syntax: operator=(*_pixels)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: unsigned char *_pixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the ofxCvShortImage from the pixels pointer. Be sure that the pixels are the same size and dimensions as the ofxCvShortImage.</p>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(&amp;mom)</p>\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies ofxCvGrayscaleImage to the ofxCvShortImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">imageOne <span class=\"token operator\">=</span> imageTwo<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(&amp;mom)</p>\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvColorImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies a ofxCvColorImage into a ofxCvShortImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> colorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(&amp;mom)</p>\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvFloatImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>opies a ofxCvFloatImage into a ofxCvShortImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> floatColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(&amp;mom)</p>\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvShortImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies a ofxCvShortImage into a ofxCvShortImage using the = symbol.</p>\n<pre><code class=\"language-{.cpp}\">grayImage <span class=\"token operator\">=</span> shortColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void operator=(*mom)</p>\n<!--\n_syntax: operator=(*mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const int *mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void resize(w, h)</p>\n<!--\n_syntax: resize(w, h)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Resizes the image to the w, h passed in.</p>\n<!----------------------------------------------------------------------------->\n<p>###void scaleIntoMe(&amp;mom, interpolationMethod)</p>\n<!--\n_syntax: scaleIntoMe(&mom, interpolationMethod)_\n_name: scaleIntoMe_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom, int interpolationMethod_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Scales the image passed in to be the size of the current image,</p>\n<pre><code class=\"language-{.cpp}\">\nofxCvImage first<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofxCvImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">scaleIntoMe</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// first is now 320,240</span>\n\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void set(value)</p>\n<!--\n_syntax: set(value)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. Possible values are 0 to 255.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setFromPixels(*_pixels, w, h)</p>\n<!--\n_syntax: setFromPixels(*_pixels, w, h)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in a ofxCvShortImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image. The array is assumed to contain color values.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setRoiFromPixels(*_pixels, w, h)</p>\n<!--\n_syntax: setRoiFromPixels(*_pixels, w, h)_\n_name: setRoiFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This allows you to set the ROI on the image from an ofPixels instance. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###bool bShortPixelsDirty</p>\n<!--\n_name: bShortPixelsDirty_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool cvGrayscaleDirty</p>\n<!--\n_name: cvGrayscaleDirty_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###IplImage * cvGrayscaleImage</p>\n<!--\n_name: cvGrayscaleImage_\n_type: IplImage *_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofShortPixels shortPixels</p>\n<!--\n_name: shortPixels_\n_type: ofShortPixels_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofxCvShortImage\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: ofxCvImage_\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nThe ofxCvShortImage represents the color data of each pixel as unsigned char variables or values between 0 and 255. They are a slightly smaller (i.e. less data heavy) way of representing the data in an image but they also have less precision than ofxCvFloatImage. Usually when you're capturing from a camera or video into OpenCV, you're using ofxCvShortImage. Keep in mind though that most of the image operations in OpenCV expect a grayscale image, which you can construct using the ofxCvGrayscaleImage.\n\n\n\n\n\n##Methods\n\n\n\n###void addWeighted(&mom, f)\n\n<!--\n_syntax: addWeighted(&mom, f)_\n_name: addWeighted_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvGrayscaleImage &mom, float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies the pixel data of an ofxCvGrayscaleImage into the pixel data of the ofxCvShortImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void allocatePixels(w, h)\n\n<!--\n_syntax: allocatePixels(w, h)_\n_name: allocatePixels_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void allocateTexture()\n\n<!--\n_syntax: allocateTexture()_\n_name: allocateTexture_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nClears the pixel data of the image. The image must be allocated again with a call to allocate() before it can be used.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void contrastStretch()\n\n<!--\n_syntax: contrastStretch()_\n_name: contrastStretch_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis increases the contrast of the image remapping the brightest points in the image to white and the darkest points in the image to black.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertGrayToShort(*grayImg, *floatImg)\n\n<!--\n_syntax: convertGrayToShort(*grayImg, *floatImg)_\n_name: convertGrayToShort_\n_returns: void_\n_returns_description: _\n_parameters: int *grayImg, int *floatImg_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertShortToGray(*floatImg, *grayImg)\n\n<!--\n_syntax: convertShortToGray(*floatImg, *grayImg)_\n_name: convertShortToGray_\n_returns: void_\n_returns_description: _\n_parameters: int *floatImg, int *grayImg_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertToRange(min, max)\n\n<!--\n_syntax: convertToRange(min, max)_\n_name: convertToRange_\n_returns: void_\n_returns_description: _\n_parameters: float min, float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMaps the pixels of an image to the min and max range passed in.\n\n~~~~{.cpp}\n\ncolors.setFromPixels(grabber.getPixels());\n\nfirst = colors; // will leave unaltered\nsecond = colors; // change it\nsecond.convertToRange(100, 140); // super low contrast\n\n~~~~\n\n![Image convert to range](convertToRange.png \"Converting the range of an image\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void flagImageChanged()\n\n<!--\n_syntax: flagImageChanged()_\n_name: flagImageChanged_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMarks the image as changed so that the ofTexture can be updated, if the image contains one.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getCv8BitsImage()\n\n<!--\n_syntax: getCv8BitsImage()_\n_name: getCv8BitsImage_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getCv8BitsRoiImage()\n\n<!--\n_syntax: getCv8BitsRoiImage()_\n_name: getCv8BitsRoiImage_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofShortPixels & getRoiShortPixelsRef()\n\n<!--\n_syntax: getRoiShortPixelsRef()_\n_name: getRoiShortPixelsRef_\n_returns: ofShortPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the pixel data of the instance as a ofShortPixels reference. This allows you to directly manipulate the pixels of the ofxCvShortImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofShortPixels & getShortPixelsRef()\n\n<!--\n_syntax: getShortPixelsRef()_\n_name: getShortPixelsRef_\n_returns: ofShortPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the pixel data of the instance as a ofShortPixels instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void init()\n\n<!--\n_syntax: init()_\n_name: init_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvShortImage()\n\n<!--\n_syntax: ofxCvShortImage()_\n_name: ofxCvShortImage_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConstructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvShortImage(&mom)\n\n<!--\n_syntax: ofxCvShortImage(&mom)_\n_name: ofxCvShortImage_\n_returns: _\n_returns_description: _\n_parameters: const ofxCvShortImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy constructor, which allows you to this:\n\n~~~~{.cpp}\nofxCvShortImage old;\n// allocate old\nofxCvShortImage new(old);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(*_pixels)\n\n<!--\n_syntax: operator=(*_pixels)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: unsigned char *_pixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the ofxCvShortImage from the pixels pointer. Be sure that the pixels are the same size and dimensions as the ofxCvShortImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies ofxCvGrayscaleImage to the ofxCvShortImage using the = symbol.\n\n~~~~{.cpp}\nimageOne = imageTwo; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvColorImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies a ofxCvColorImage into a ofxCvShortImage using the = symbol.\n\n~~~~{.cpp}\ngrayImage = colorImage; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvFloatImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nopies a ofxCvFloatImage into a ofxCvShortImage using the = symbol.\n\n~~~~{.cpp}\ngrayImage = floatColorImage; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvShortImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies a ofxCvShortImage into a ofxCvShortImage using the = symbol.\n\n~~~~{.cpp}\ngrayImage = shortColorImage; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(*mom)\n\n<!--\n_syntax: operator=(*mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const int *mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resize(w, h)\n\n<!--\n_syntax: resize(w, h)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nResizes the image to the w, h passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleIntoMe(&mom, interpolationMethod)\n\n<!--\n_syntax: scaleIntoMe(&mom, interpolationMethod)_\n_name: scaleIntoMe_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom, int interpolationMethod_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nScales the image passed in to be the size of the current image, \n\n~~~~{.cpp}\n\nofxCvImage first;\nfirst.allocate(640, 480);\nofxCvImage second;\nsecond.allocate(320, 240);\n\nsecond.scaleIntoMe(first); // first is now 320,240\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(value)\n\n<!--\n_syntax: set(value)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. Possible values are 0 to 255.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setFromPixels(*_pixels, w, h)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in a ofxCvShortImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image. The array is assumed to contain color values.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRoiFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setRoiFromPixels(*_pixels, w, h)_\n_name: setRoiFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis allows you to set the ROI on the image from an ofPixels instance. Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bShortPixelsDirty\n\n<!--\n_name: bShortPixelsDirty_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool cvGrayscaleDirty\n\n<!--\n_name: cvGrayscaleDirty_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###IplImage * cvGrayscaleImage\n\n<!--\n_name: cvGrayscaleImage_\n_type: IplImage *_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofShortPixels shortPixels\n\n<!--\n_name: shortPixels_\n_type: ofShortPixels_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}