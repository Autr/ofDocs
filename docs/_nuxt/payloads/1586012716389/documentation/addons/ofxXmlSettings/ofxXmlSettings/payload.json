{"data":[{"page":{"entry":{"name":"ofxXmlSettings","filename":"ofxXmlSettings.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/addons/ofxXmlSettings/ofxXmlSettings.markdown","path":"/documentation/addons/ofxXmlSettings/ofxXmlSettings","route":"/documentation/addons/ofxXmlSettings/ofxXmlSettings.markdown","dir":"../ofSite/documentation/addons/ofxXmlSettings","ext":"markdown","type":"page","id":2146,"parent":2143,"breadcrumbs":[2143,1993,1968],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>ofxXmlSettings addon allows for reading and writing of xml files in openFrameworks. Most commonly xml settings are used for storing settings between closing and launching apps. XML has the advantage of being easy for people to read and edit but still convenient for manipulating with code.</p>\n<p>An xml document is composed of tags with values and other tags inside of them. A tag has a name, attributes, values. If a tag contains other tags they are called its children. If a tag is inside of another, the enclosing tag is called its parent. The tags next to one another are siblings.</p>\n<pre><code class=\"language-{.xml}\"><span class=\"token operator\">&lt;</span>parentTagName</code></pre>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"addAttribute(&tag, &attribute, &value)","name":"addAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds a new attribute to the tag with with the given string value.</p>\n","counter":5},{"syntax":"addAttribute(&tag, &attribute, &value, which = 0)","name":"addAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds a new attribute to the tag with the given string value.</p>\n"},{"syntax":"addAttribute(&tag, &attribute, value)","name":"addAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds a new attribute to the tag with with the given int value.</p>\n"},{"syntax":"addAttribute(&tag, &attribute, value)","name":"addAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds a new attribute to the tag with with the given double value.</p>\n"},{"syntax":"addAttribute(&tag, &attribute, value, which = 0)","name":"addAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds a new attribute to the tag with with the given int value. If the tag doesn't exist it is created. If an attribute at index 'which' already exists its value replaced by the provided value</p>\n"},{"syntax":"addAttribute(&tag, &attribute, value, which = 0)","name":"addAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds a new attribute to the tag with the given double value.</p>\n"},{"syntax":"addTag(&tag)","name":"addTag","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds an empty tag at the current document level. If you want to add children tags, call pushTag afterwords to begin editing the document with the new tag as root.</p>\n<p>Return the number of tags with the same name at the current level.</p>\n","counter":0},{"syntax":"addValue(&tag, &value)","name":"addValue","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds a tag with tag name and string value to the document, returning the number of tags with the same name.</p>\n","counter":2},{"syntax":"addValue(&tag, value)","name":"addValue","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds a tag with tag name and integer value to the document, returning the number of tags with the same name.</p>\n<p>addValue and setValue are very similar, both add new tags to the current document with the given name and value.  The distinction is that if tags exist with the same name at the current document level, addValue will create additional tags, while setValue will replace contents of the tags based on the 'which' parameter.</p>\n"},{"syntax":"addValue(&tag, value)","name":"addValue","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds a tag with tag name and double value to the document, returning the number of tags with the same name.</p>\n"},{"syntax":"attributeExists(&tag, &attribute, which = 0)","name":"attributeExists","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns true if a tag has any attributes.</p>\n","counter":0},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Removes all tags at the current document level.</p>\n","counter":0},{"syntax":"clearTagAttributes(&tag, which = 0)","name":"clearTagAttributes","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Clears all attributes from the given tag name and tag index which.</p>\n","counter":0},{"syntax":"clearTagContents(&tag, which = 0)","name":"clearTagContents","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>If the given tag exists at the current pushTag level set its contents to empty.</p>\n","counter":0},{"syntax":"copyXmlToString(&str)","name":"copyXmlToString","returns":"void","returns_description":null,"parameters":"__cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>str","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies the contents of the ofxXmlSettings into the string str.</p>\n","counter":0},{"syntax":"getAttribute(&tag, &attribute, &defaultValue, which = 0)","name":"getAttribute","returns":"__cxx11::string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the value of the attribute on tag at index which as a string.</p>\n","counter":2},{"syntax":"getAttribute(&tag, &attribute, defaultValue, which = 0)","name":"getAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the value of the attribute on tag at index which as an int.</p>\n"},{"syntax":"getAttribute(&tag, &attribute, defaultValue, which = 0)","name":"getAttribute","returns":"double","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the value of the attribute on tag at index which as a double.</p>\n"},{"syntax":"getAttributeNames(&tag, &outNames, which = 0)","name":"getAttributeNames","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>outNames<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns an array of strings containing all attribute names on the tag.  This is useful in conjunction with a loop to get all values of the tags one by one with calls to getAttribute.</p>\n","counter":0},{"syntax":"getElementForAttribute()","name":"getElementForAttribute","returns":"int *","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getNumAttributes(&tag, which = 0)","name":"getNumAttributes","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the number of attributes on a tag at index which.</p>\n","counter":0},{"syntax":"getNumTags(&tag)","name":"getNumTags","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the number of tags with the given name at the current document level. Useful for iterating through a list of sibling tags with the same name.</p>\n","counter":0},{"syntax":"getPushLevel()","name":"getPushLevel","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>getPushLevel returns the number of tags that have been pushed. Starting at 0 when the file is first populated (eg a call to loadFile). Each time pushTag is called push level increases by one. Each time popTag is called it decreases.</p>\n","counter":0},{"syntax":"getValue(&tag, &defaultValue, which = 0)","name":"getValue","returns":"__cxx11::string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the value stored by the requested tag as a string. Refer above for description of how this method works.</p>\n","counter":2},{"syntax":"getValue(&tag, defaultValue, which = 0)","name":"getValue","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the value stored by the requested tag. The data type returned depends on the type provided as the defaultArgument. For example, if the tag is:</p>\n<pre><code class=\"language-{.xml}\"><span class=\"token operator\">&lt;</span>myTag</code></pre>\n"},{"syntax":"getValue(&tag, defaultValue, which = 0)","name":"getValue","returns":"double","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> defaultValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the value stored by the requested tag as a double. Refer above for description of how this method works.</p>\n"},{"syntax":"load(&path)","name":"load","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"loadFile(&xmlFile)","name":"loadFile","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>xmlFile","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Loads and parses the xml file at the given path.  Returns true if the file is found and is correctly formatted xml.</p>\n","counter":0},{"syntax":"loadFromBuffer(buffer)","name":"loadFromBuffer","returns":"bool","returns_description":null,"parameters":"__cxx11<span class=\"token operator\">::</span>string buffer","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Populates the ofxXmlSettings object from a string of containing xml.</p>\n","counter":0},{"syntax":"ofxXmlSettings(&xmlFile)","name":"ofxXmlSettings","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>xmlFile","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Initializes an xml settings object and loads the file at xmlFile path.</p>\n","counter":1},{"syntax":"ofxXmlSettings()","name":"ofxXmlSettings","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Default constructor for ofxXmlSettings.  Initializes an empty object with no file set or loaded and no contents.</p>\n"},{"syntax":"popTag()","name":"popTag","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>popTag restores the current document root after a call to pushTag.</p>\n","counter":0},{"syntax":"pushTag(&tag, which = 0)","name":"pushTag","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Pushing and Popping operations are used to set the current document level. Most of the methods in ofxXmlSettings are done in relationship to just the top level tags, so pushing tags is necessary to go deeper into documents. Every pushTag should be matched with a popTag after operations at that level are finished.</p>\n<p>pushingTag pushes the given tag which is then treated as the tag as as the document root.</p>\n","counter":0},{"syntax":"readDoubleAttribute(&tag, &attribute, &outValue, which)","name":"readDoubleAttribute","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token operator\">&amp;</span>outValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"readIntAttribute(&tag, &attribute, &valueString, which)","name":"readIntAttribute","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>valueString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"readStringAttribute(&tag, &attribute, &outValue, which)","name":"readStringAttribute","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>outValue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"readTag(&tag, &valHandle, which = 0)","name":"readTag","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>valHandle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"removeAttribute(&tag, &attribute, which = 0)","name":"removeAttribute","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Removes the attribute from tag name at index specified by 'which'.</p>\n","counter":0},{"syntax":"removeTag(&tag, which = 0)","name":"removeTag","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Removes a tag from the current level. This differs from clearing it in that the entire tag is removed, rather than just its contents being set to empty.</p>\n","counter":0},{"syntax":"save(&path)","name":"save","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"saveFile(&xmlFile)","name":"saveFile","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>xmlFile","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Saves the current state of the xml settings object to file at xmlFile path.</p>\n","counter":1},{"syntax":"saveFile()","name":"saveFile","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Saves the current state of the xml file to its current path. The current path is defined by whatever path was specified when loadFile(xmlFile) or saveFile(xmlFile) was last called.</p>\n"},{"syntax":"setAttribute(&tag, &attribute, &value)","name":"setAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Refer to addAttribute</p>\n","counter":5},{"syntax":"setAttribute(&tag, &attribute, &value, which = 0)","name":"setAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Refer to addAttribute</p>\n"},{"syntax":"setAttribute(&tag, &attribute, value)","name":"setAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Refer to addAttribute</p>\n"},{"syntax":"setAttribute(&tag, &attribute, value)","name":"setAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Refer to addAttribute</p>\n"},{"syntax":"setAttribute(&tag, &attribute, value, which = 0)","name":"setAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the value of the attribute on tag as a double.</p>\n"},{"syntax":"setAttribute(&tag, &attribute, value, which = 0)","name":"setAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Refer to addAttribute</p>\n"},{"syntax":"setValue(&tag, &value, which = 0)","name":"setValue","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the value of a tag to a string value.  If the tag already exists, the current value is replaced with value otherwise a new tag is created.</p>\n<p>The number of tags with the same name at the current document level is returned.</p>\n","counter":2},{"syntax":"setValue(&tag, value, which = 0)","name":"setValue","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the value of a tag to an integer value.  If the tag already exists, the current value is replaced with value. Otherwise a new tag is created.</p>\n<p>The number of tags with the same name at the current document level is returned.</p>\n"},{"syntax":"setValue(&tag, value, which = 0)","name":"setValue","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the value of a tag to an integer value.  If the tag already exists, the current value is replaced with value otherwise a new tag is created.</p>\n<p>The number of tags with the same name at the current document level is returned.</p>\n"},{"syntax":"setVerbose(_verbose)","name":"setVerbose","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> _verbose","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"","desc":"","counter":0},{"syntax":"tagExists(&tag, which = 0)","name":"tagExists","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns true if the given tag exists at the current pushTag level.</p>\n","counter":0},{"syntax":"writeAttribute(&tag, &attribute, &valueString, which = 0)","name":"writeAttribute","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>attribute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>valueString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"writeTag(&tag, &valueString, which = 0)","name":"writeTag","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> __cxx11<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>valueString<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"~ofxXmlSettings()","name":"~ofxXmlSettings","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"","desc":"","counter":0},{"name":"bDocLoaded","type":"bool","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"doc","type":"TiXmlDocument","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"level","type":"int","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"storedHandle","type":"TiXmlHandle","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofxXmlSettings</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>ofxXmlSettings addon allows for reading and writing of xml files in openFrameworks. Most commonly xml settings are used for storing settings between closing and launching apps. XML has the advantage of being easy for people to read and edit but still convenient for manipulating with code.</p>\n<p>An xml document is composed of tags with values and other tags inside of them. A tag has a name, attributes, values. If a tag contains other tags they are called its children. If a tag is inside of another, the enclosing tag is called its parent. The tags next to one another are siblings.</p>\n<pre><code class=\"language-{.xml}\"><span class=\"token operator\">&lt;</span>parentTagName<span class=\"token operator\">></span>\n\t<span class=\"token operator\">&lt;</span>tagName attributeName<span class=\"token operator\">=</span><span class=\"token string\">\"attributeValue\"</span><span class=\"token operator\">></span>TagValue<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>tagName<span class=\"token operator\">></span>\n\t<span class=\"token operator\">&lt;</span>siblingTag <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>parentName<span class=\"token operator\">></span> \n</code></pre>\n<p>A very simple example for saving and loading values using ofxXmlSettings variable would look like this:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token comment\" spellcheck=\"true\">//put some some settings into a file</span>\nofxXmlSettings settings<span class=\"token punctuation\">;</span>\nsettings<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings:blinkRate\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsettings<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings:gravity\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsettings<span class=\"token punctuation\">.</span><span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings:sceneName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"field\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsettings<span class=\"token punctuation\">.</span><span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//puts settings.xml file in the bin/data folder</span>\n</code></pre>\n<p>The file this generates would look like this</p>\n<pre><code class=\"language-{.xml}\"><span class=\"token operator\">&lt;</span>settings<span class=\"token operator\">></span>\n\t<span class=\"token operator\">&lt;</span>blinkRate<span class=\"token operator\">></span><span class=\"token number\">10</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>blinkRate<span class=\"token operator\">></span>\n\t<span class=\"token operator\">&lt;</span>gravity<span class=\"token operator\">></span><span class=\"token number\">9.8</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>gravity<span class=\"token operator\">></span>\n\t<span class=\"token operator\">&lt;</span>sceneName<span class=\"token operator\">></span>field<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>sceneName<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>settings<span class=\"token operator\">></span>\n</code></pre>\n<p>To load the file again, use a snippet like the following</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token comment\" spellcheck=\"true\">//now load that same file and get the values out</span>\nofxXmlSettings settings<span class=\"token punctuation\">;</span>\nsettings<span class=\"token punctuation\">.</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> blinkRate <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings:blinkRate\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> gravity <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings:gravity\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstring sceneName <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"settings:sceneName\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"defaultScene\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>A more complex example involving saving an array.</p>\n<pre><code class=\"language-{.cpp}\">ofxXmlSettings positions<span class=\"token punctuation\">;</span>\npositions<span class=\"token punctuation\">.</span><span class=\"token function\">addTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npositions<span class=\"token punctuation\">.</span><span class=\"token function\">pushTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//points is a vector&lt;ofPoint> that we want to save to a file</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> points<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//each position tag represents one point</span>\n\tpositions<span class=\"token punctuation\">.</span><span class=\"token function\">addTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpositions<span class=\"token punctuation\">.</span><span class=\"token function\">pushTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position\"</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//so set the three values in the file</span>\n\tpositions<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">,</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpositions<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Y\"</span><span class=\"token punctuation\">,</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpositions<span class=\"token punctuation\">.</span><span class=\"token function\">addValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span> points<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpositions<span class=\"token punctuation\">.</span><span class=\"token function\">popTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//pop position</span>\n<span class=\"token punctuation\">}</span>\npositions<span class=\"token punctuation\">.</span><span class=\"token function\">popTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//pop position</span>\npositions<span class=\"token punctuation\">.</span><span class=\"token function\">saveFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positions.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//This is how you would load that very same file\t</span>\nofxXmlSettings settings<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>settings<span class=\"token punctuation\">.</span><span class=\"token function\">loadFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positions.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tsettings<span class=\"token punctuation\">.</span><span class=\"token function\">pushTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"positions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> numberOfSavedPoints <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span><span class=\"token function\">getNumTags</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numberOfSavedPoints<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tsettings<span class=\"token punctuation\">.</span><span class=\"token function\">pushTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"position\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tofPoint p<span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"X\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Y\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tp<span class=\"token punctuation\">.</span>z <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t\tpoints<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsettings<span class=\"token punctuation\">.</span><span class=\"token function\">popTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\tsettings<span class=\"token punctuation\">.</span><span class=\"token function\">popTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//pop position</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Position file did not load!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>What is this &quot;which&quot; argument I see everywhere used for?</p>\n<p>Most of the time you can ignore this and treat it as if it weren't there. But if specified it selects the nth tag with the same tag name at the current root of the document Normally this just means the top level tags in the document - but if you use the pushTag and popTag you can temporarily set the root of the document to be that specified tag. The main idea is to allow you to have multiple tags with the same name.</p>\n<p>Here is an example:</p>\n<pre><code class=\"language-{.xml}\"><span class=\"token operator\">&lt;</span>time<span class=\"token operator\">></span><span class=\"token number\">102229</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>time<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n<span class=\"token operator\">&lt;</span>time<span class=\"token operator\">></span><span class=\"token number\">298292</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>time<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> which <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token operator\">&lt;</span>time<span class=\"token operator\">></span><span class=\"token number\">393393</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>time<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> which <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token operator\">&lt;</span>time<span class=\"token operator\">></span><span class=\"token number\">447373</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>time<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> which <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n</code></pre>\n<p>But if we wanted to group these into multiple <recording> tags and have multiple time values inside\nwe can use push and pop to move into the recording tags as if they were the document root</p>\n<pre><code class=\"language-{.xml}\"><span class=\"token operator\">&lt;</span>recording<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> we temporarily push into here with <span class=\"token function\">pushTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recording\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">&lt;</span>time<span class=\"token operator\">></span><span class=\"token number\">19222</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>time<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> to set <span class=\"token keyword\">this</span> we call <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19222</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">(</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">&lt;</span>time<span class=\"token operator\">></span><span class=\"token number\">23232</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>time<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> to set <span class=\"token keyword\">this</span> we call <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23232</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">(</span> which <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>recording<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> we pop back out here with <span class=\"token function\">popTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre><code class=\"language-{.xml}\"><span class=\"token operator\">&lt;</span>recording<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> we temporarily push into here with <span class=\"token function\">pushTag</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"recording\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> now we use <span class=\"token number\">1</span> to select the 2nd recording tag\n\t<span class=\"token operator\">&lt;</span>time<span class=\"token operator\">></span><span class=\"token number\">33342</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>time<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33342</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">(</span> which <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n\t<span class=\"token operator\">&lt;</span>time<span class=\"token operator\">></span><span class=\"token number\">22722</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>time<span class=\"token operator\">></span>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span> <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22722</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token punctuation\">(</span> which <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>recording<span class=\"token operator\">></span>\n</code></pre>\n<p>##Methods</p>\n<p>###int addAttribute(&amp;tag, &amp;attribute, &amp;value)</p>\n<!--\n_syntax: addAttribute(&tag, &attribute, &value)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds a new attribute to the tag with with the given string value.</p>\n<!----------------------------------------------------------------------------->\n<p>###int addAttribute(&amp;tag, &amp;attribute, &amp;value, which = 0)</p>\n<!--\n_syntax: addAttribute(&tag, &attribute, &value, which = 0)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds a new attribute to the tag with the given string value.</p>\n<!----------------------------------------------------------------------------->\n<p>###int addAttribute(&amp;tag, &amp;attribute, value)</p>\n<!--\n_syntax: addAttribute(&tag, &attribute, value)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds a new attribute to the tag with with the given int value.</p>\n<!----------------------------------------------------------------------------->\n<p>###int addAttribute(&amp;tag, &amp;attribute, value)</p>\n<!--\n_syntax: addAttribute(&tag, &attribute, value)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds a new attribute to the tag with with the given double value.</p>\n<!----------------------------------------------------------------------------->\n<p>###int addAttribute(&amp;tag, &amp;attribute, value, which = 0)</p>\n<!--\n_syntax: addAttribute(&tag, &attribute, value, which = 0)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds a new attribute to the tag with with the given int value. If the tag doesn't exist it is created. If an attribute at index 'which' already exists its value replaced by the provided value</p>\n<!----------------------------------------------------------------------------->\n<p>###int addAttribute(&amp;tag, &amp;attribute, value, which = 0)</p>\n<!--\n_syntax: addAttribute(&tag, &attribute, value, which = 0)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds a new attribute to the tag with the given double value.</p>\n<!----------------------------------------------------------------------------->\n<p>###int addTag(&amp;tag)</p>\n<!--\n_syntax: addTag(&tag)_\n_name: addTag_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds an empty tag at the current document level. If you want to add children tags, call pushTag afterwords to begin editing the document with the new tag as root.</p>\n<p>Return the number of tags with the same name at the current level.</p>\n<!----------------------------------------------------------------------------->\n<p>###int addValue(&amp;tag, &amp;value)</p>\n<!--\n_syntax: addValue(&tag, &value)_\n_name: addValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds a tag with tag name and string value to the document, returning the number of tags with the same name.</p>\n<!----------------------------------------------------------------------------->\n<p>###int addValue(&amp;tag, value)</p>\n<!--\n_syntax: addValue(&tag, value)_\n_name: addValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds a tag with tag name and integer value to the document, returning the number of tags with the same name.</p>\n<p>addValue and setValue are very similar, both add new tags to the current document with the given name and value.  The distinction is that if tags exist with the same name at the current document level, addValue will create additional tags, while setValue will replace contents of the tags based on the 'which' parameter.</p>\n<!----------------------------------------------------------------------------->\n<p>###int addValue(&amp;tag, value)</p>\n<!--\n_syntax: addValue(&tag, value)_\n_name: addValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, double value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds a tag with tag name and double value to the document, returning the number of tags with the same name.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool attributeExists(&amp;tag, &amp;attribute, which = 0)</p>\n<!--\n_syntax: attributeExists(&tag, &attribute, which = 0)_\n_name: attributeExists_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns true if a tag has any attributes.</p>\n<!----------------------------------------------------------------------------->\n<p>###void clear()</p>\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Removes all tags at the current document level.</p>\n<!----------------------------------------------------------------------------->\n<p>###void clearTagAttributes(&amp;tag, which = 0)</p>\n<!--\n_syntax: clearTagAttributes(&tag, which = 0)_\n_name: clearTagAttributes_\n_returns: void_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Clears all attributes from the given tag name and tag index which.</p>\n<!----------------------------------------------------------------------------->\n<p>###void clearTagContents(&amp;tag, which = 0)</p>\n<!--\n_syntax: clearTagContents(&tag, which = 0)_\n_name: clearTagContents_\n_returns: void_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>If the given tag exists at the current pushTag level set its contents to empty.</p>\n<!----------------------------------------------------------------------------->\n<p>###void copyXmlToString(&amp;str)</p>\n<!--\n_syntax: copyXmlToString(&str)_\n_name: copyXmlToString_\n_returns: void_\n_returns_description: _\n_parameters: __cxx11::string &str_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies the contents of the ofxXmlSettings into the string str.</p>\n<!----------------------------------------------------------------------------->\n<p>###__cxx11::string getAttribute(&amp;tag, &amp;attribute, &amp;defaultValue, which = 0)</p>\n<!--\n_syntax: getAttribute(&tag, &attribute, &defaultValue, which = 0)_\n_name: getAttribute_\n_returns: __cxx11::string_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the value of the attribute on tag at index which as a string.</p>\n<!----------------------------------------------------------------------------->\n<p>###int getAttribute(&amp;tag, &amp;attribute, defaultValue, which = 0)</p>\n<!--\n_syntax: getAttribute(&tag, &attribute, defaultValue, which = 0)_\n_name: getAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the value of the attribute on tag at index which as an int.</p>\n<!----------------------------------------------------------------------------->\n<p>###double getAttribute(&amp;tag, &amp;attribute, defaultValue, which = 0)</p>\n<!--\n_syntax: getAttribute(&tag, &attribute, defaultValue, which = 0)_\n_name: getAttribute_\n_returns: double_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the value of the attribute on tag at index which as a double.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool getAttributeNames(&amp;tag, &amp;outNames, which = 0)</p>\n<!--\n_syntax: getAttributeNames(&tag, &outNames, which = 0)_\n_name: getAttributeNames_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int &outNames, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns an array of strings containing all attribute names on the tag.  This is useful in conjunction with a loop to get all values of the tags one by one with calls to getAttribute.</p>\n<!----------------------------------------------------------------------------->\n<p>###int * getElementForAttribute()</p>\n<!--\n_syntax: getElementForAttribute()_\n_name: getElementForAttribute_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int getNumAttributes(&amp;tag, which = 0)</p>\n<!--\n_syntax: getNumAttributes(&tag, which = 0)_\n_name: getNumAttributes_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the number of attributes on a tag at index which.</p>\n<!----------------------------------------------------------------------------->\n<p>###int getNumTags(&amp;tag)</p>\n<!--\n_syntax: getNumTags(&tag)_\n_name: getNumTags_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the number of tags with the given name at the current document level. Useful for iterating through a list of sibling tags with the same name.</p>\n<!----------------------------------------------------------------------------->\n<p>###int getPushLevel()</p>\n<!--\n_syntax: getPushLevel()_\n_name: getPushLevel_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>getPushLevel returns the number of tags that have been pushed. Starting at 0 when the file is first populated (eg a call to loadFile). Each time pushTag is called push level increases by one. Each time popTag is called it decreases.</p>\n<!----------------------------------------------------------------------------->\n<p>###__cxx11::string getValue(&amp;tag, &amp;defaultValue, which = 0)</p>\n<!--\n_syntax: getValue(&tag, &defaultValue, which = 0)_\n_name: getValue_\n_returns: __cxx11::string_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the value stored by the requested tag as a string. Refer above for description of how this method works.</p>\n<!----------------------------------------------------------------------------->\n<p>###int getValue(&amp;tag, defaultValue, which = 0)</p>\n<!--\n_syntax: getValue(&tag, defaultValue, which = 0)_\n_name: getValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the value stored by the requested tag. The data type returned depends on the type provided as the defaultArgument. For example, if the tag is:</p>\n<pre><code class=\"language-{.xml}\"><span class=\"token operator\">&lt;</span>myTag<span class=\"token operator\">></span><span class=\"token number\">9.8</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>myTag<span class=\"token operator\">></span>   \n</code></pre>\n<p>The value can be interpreted in three different ways, as a float, int, or string by changing the default type provided to the call.</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token comment\" spellcheck=\"true\">//returns \"9.8\"</span>\nstring myString <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myTag\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//returns the integer value 9</span>\n<span class=\"token keyword\">int</span> myInt <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myTag\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//returns the double value 9.8</span>\n<span class=\"token keyword\">double</span> myDouble <span class=\"token operator\">=</span> settings<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myTag\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###double getValue(&amp;tag, defaultValue, which = 0)</p>\n<!--\n_syntax: getValue(&tag, defaultValue, which = 0)_\n_name: getValue_\n_returns: double_\n_returns_description: _\n_parameters: const __cxx11::string &tag, double defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the value stored by the requested tag as a double. Refer above for description of how this method works.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool load(&amp;path)</p>\n<!--\n_syntax: load(&path)_\n_name: load_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &path_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool loadFile(&amp;xmlFile)</p>\n<!--\n_syntax: loadFile(&xmlFile)_\n_name: loadFile_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &xmlFile_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Loads and parses the xml file at the given path.  Returns true if the file is found and is correctly formatted xml.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool loadFromBuffer(buffer)</p>\n<!--\n_syntax: loadFromBuffer(buffer)_\n_name: loadFromBuffer_\n_returns: bool_\n_returns_description: _\n_parameters: __cxx11::string buffer_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Populates the ofxXmlSettings object from a string of containing xml.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofxXmlSettings(&amp;xmlFile)</h3>\n<!--\n_syntax: ofxXmlSettings(&xmlFile)_\n_name: ofxXmlSettings_\n_returns: _\n_returns_description: _\n_parameters: const __cxx11::string &xmlFile_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Initializes an xml settings object and loads the file at xmlFile path.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofxXmlSettings()</h3>\n<!--\n_syntax: ofxXmlSettings()_\n_name: ofxXmlSettings_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Default constructor for ofxXmlSettings.  Initializes an empty object with no file set or loaded and no contents.</p>\n<!----------------------------------------------------------------------------->\n<p>###int popTag()</p>\n<!--\n_syntax: popTag()_\n_name: popTag_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>popTag restores the current document root after a call to pushTag.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool pushTag(&amp;tag, which = 0)</p>\n<!--\n_syntax: pushTag(&tag, which = 0)_\n_name: pushTag_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Pushing and Popping operations are used to set the current document level. Most of the methods in ofxXmlSettings are done in relationship to just the top level tags, so pushing tags is necessary to go deeper into documents. Every pushTag should be matched with a popTag after operations at that level are finished.</p>\n<p>pushingTag pushes the given tag which is then treated as the tag as as the document root.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool readDoubleAttribute(&amp;tag, &amp;attribute, &amp;outValue, which)</p>\n<!--\n_syntax: readDoubleAttribute(&tag, &attribute, &outValue, which)_\n_name: readDoubleAttribute_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double &outValue, int which_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool readIntAttribute(&amp;tag, &amp;attribute, &amp;valueString, which)</p>\n<!--\n_syntax: readIntAttribute(&tag, &attribute, &valueString, which)_\n_name: readIntAttribute_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int &valueString, int which_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool readStringAttribute(&amp;tag, &amp;attribute, &amp;outValue, which)</p>\n<!--\n_syntax: readStringAttribute(&tag, &attribute, &outValue, which)_\n_name: readStringAttribute_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, __cxx11::string &outValue, int which_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool readTag(&amp;tag, &amp;valHandle, which = 0)</p>\n<!--\n_syntax: readTag(&tag, &valHandle, which = 0)_\n_name: readTag_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int &valHandle, int which=0_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void removeAttribute(&amp;tag, &amp;attribute, which = 0)</p>\n<!--\n_syntax: removeAttribute(&tag, &attribute, which = 0)_\n_name: removeAttribute_\n_returns: void_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Removes the attribute from tag name at index specified by 'which'.</p>\n<!----------------------------------------------------------------------------->\n<p>###void removeTag(&amp;tag, which = 0)</p>\n<!--\n_syntax: removeTag(&tag, which = 0)_\n_name: removeTag_\n_returns: void_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Removes a tag from the current level. This differs from clearing it in that the entire tag is removed, rather than just its contents being set to empty.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool save(&amp;path)</p>\n<!--\n_syntax: save(&path)_\n_name: save_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &path_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool saveFile(&amp;xmlFile)</p>\n<!--\n_syntax: saveFile(&xmlFile)_\n_name: saveFile_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &xmlFile_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Saves the current state of the xml settings object to file at xmlFile path.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool saveFile()</p>\n<!--\n_syntax: saveFile()_\n_name: saveFile_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Saves the current state of the xml file to its current path. The current path is defined by whatever path was specified when loadFile(xmlFile) or saveFile(xmlFile) was last called.</p>\n<!----------------------------------------------------------------------------->\n<p>###int setAttribute(&amp;tag, &amp;attribute, &amp;value)</p>\n<!--\n_syntax: setAttribute(&tag, &attribute, &value)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Refer to addAttribute</p>\n<!----------------------------------------------------------------------------->\n<p>###int setAttribute(&amp;tag, &amp;attribute, &amp;value, which = 0)</p>\n<!--\n_syntax: setAttribute(&tag, &attribute, &value, which = 0)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Refer to addAttribute</p>\n<!----------------------------------------------------------------------------->\n<p>###int setAttribute(&amp;tag, &amp;attribute, value)</p>\n<!--\n_syntax: setAttribute(&tag, &attribute, value)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Refer to addAttribute</p>\n<!----------------------------------------------------------------------------->\n<p>###int setAttribute(&amp;tag, &amp;attribute, value)</p>\n<!--\n_syntax: setAttribute(&tag, &attribute, value)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Refer to addAttribute</p>\n<!----------------------------------------------------------------------------->\n<p>###int setAttribute(&amp;tag, &amp;attribute, value, which = 0)</p>\n<!--\n_syntax: setAttribute(&tag, &attribute, value, which = 0)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the value of the attribute on tag as a double.</p>\n<!----------------------------------------------------------------------------->\n<p>###int setAttribute(&amp;tag, &amp;attribute, value, which = 0)</p>\n<!--\n_syntax: setAttribute(&tag, &attribute, value, which = 0)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Refer to addAttribute</p>\n<!----------------------------------------------------------------------------->\n<p>###int setValue(&amp;tag, &amp;value, which = 0)</p>\n<!--\n_syntax: setValue(&tag, &value, which = 0)_\n_name: setValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the value of a tag to a string value.  If the tag already exists, the current value is replaced with value otherwise a new tag is created.</p>\n<p>The number of tags with the same name at the current document level is returned.</p>\n<!----------------------------------------------------------------------------->\n<p>###int setValue(&amp;tag, value, which = 0)</p>\n<!--\n_syntax: setValue(&tag, value, which = 0)_\n_name: setValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the value of a tag to an integer value.  If the tag already exists, the current value is replaced with value. Otherwise a new tag is created.</p>\n<p>The number of tags with the same name at the current document level is returned.</p>\n<!----------------------------------------------------------------------------->\n<p>###int setValue(&amp;tag, value, which = 0)</p>\n<!--\n_syntax: setValue(&tag, value, which = 0)_\n_name: setValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, double value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the value of a tag to an integer value.  If the tag already exists, the current value is replaced with value otherwise a new tag is created.</p>\n<p>The number of tags with the same name at the current document level is returned.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setVerbose(_verbose)</p>\n<!--\n_syntax: setVerbose(_verbose)_\n_name: setVerbose_\n_returns: void_\n_returns_description: _\n_parameters: bool _verbose_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool tagExists(&amp;tag, which = 0)</p>\n<!--\n_syntax: tagExists(&tag, which = 0)_\n_name: tagExists_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns true if the given tag exists at the current pushTag level.</p>\n<!----------------------------------------------------------------------------->\n<p>###int writeAttribute(&amp;tag, &amp;attribute, &amp;valueString, which = 0)</p>\n<!--\n_syntax: writeAttribute(&tag, &attribute, &valueString, which = 0)_\n_name: writeAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &valueString, int which=0_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int writeTag(&amp;tag, &amp;valueString, which = 0)</p>\n<!--\n_syntax: writeTag(&tag, &valueString, which = 0)_\n_name: writeTag_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &valueString, int which=0_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>~ofxXmlSettings()</h3>\n<!--\n_syntax: ~ofxXmlSettings()_\n_name: ~ofxXmlSettings_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###bool bDocLoaded</p>\n<!--\n_name: bDocLoaded_\n_type: bool_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###TiXmlDocument doc</p>\n<!--\n_name: doc_\n_type: TiXmlDocument_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int level</p>\n<!--\n_name: level_\n_type: int_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###TiXmlHandle storedHandle</p>\n<!--\n_name: storedHandle_\n_type: TiXmlHandle_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofxXmlSettings\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nofxXmlSettings addon allows for reading and writing of xml files in openFrameworks. Most commonly xml settings are used for storing settings between closing and launching apps. XML has the advantage of being easy for people to read and edit but still convenient for manipulating with code.\n\nAn xml document is composed of tags with values and other tags inside of them. A tag has a name, attributes, values. If a tag contains other tags they are called its children. If a tag is inside of another, the enclosing tag is called its parent. The tags next to one another are siblings.  \n\n~~~~{.xml}\n<parentTagName>\n\t<tagName attributeName=\"attributeValue\">TagValue</tagName>\n\t<siblingTag />\n</parentName> \n~~~~\n\nA very simple example for saving and loading values using ofxXmlSettings variable would look like this:\n~~~~{.cpp}\n//put some some settings into a file\nofxXmlSettings settings;\nsettings.setValue(\"settings:blinkRate\", 10);\nsettings.setValue(\"settings:gravity\", 9.8);\nsettings.setValue(\"settings:sceneName\", \"field\");\nsettings.saveFile(\"settings.xml\"); //puts settings.xml file in the bin/data folder\n~~~~\n\nThe file this generates would look like this\n~~~~{.xml}\n<settings>\n\t<blinkRate>10</blinkRate>\n\t<gravity>9.8</gravity>\n\t<sceneName>field</sceneName>\n</settings>\n~~~~\n\nTo load the file again, use a snippet like the following\n~~~~{.cpp}\n//now load that same file and get the values out\nofxXmlSettings settings;\nsettings.loadFile(\"settings.xml\");\nint blinkRate = settings.getValue(\"settings:blinkRate\", 0.0);\nfloat gravity = settings.getValue(\"settings:gravity\", 0);\nstring sceneName = settings.getValue(\"settings:sceneName\", \"defaultScene\");\n~~~~\n\nA more complex example involving saving an array.\n~~~~{.cpp}\nofxXmlSettings positions;\npositions.addTag(\"positions\");\npositions.pushTag(\"positions\");\n//points is a vector<ofPoint> that we want to save to a file\nfor(int i = 0; i < points.size(); i++){\n\t//each position tag represents one point\n\tpositions.addTag(\"position\");\n\tpositions.pushTag(\"position\",i);\n\t//so set the three values in the file\n\tpositions.addValue(\"X\", points[i].x);\n\tpositions.addValue(\"Y\", points[i].y);\n\tpositions.addValue(\"Z\", points[i].z);\n\tpositions.popTag();//pop position\n}\npositions.popTag(); //pop position\npositions.saveFile(\"positions.xml\");\n\n//This is how you would load that very same file\t\nofxXmlSettings settings;\nif(settings.loadFile(\"positions.xml\")){\n\tsettings.pushTag(\"positions\");\n\tint numberOfSavedPoints = settings.getNumTags(\"position\");\n\tfor(int i = 0; i < numberOfSavedPoints; i++){\n\t\tsettings.pushTag(\"position\", i);\n\t\t\n\t\tofPoint p;\n\t\tp.x = settings.getValue(\"X\", 0);\n\t\tp.y = settings.getValue(\"Y\", 0);\n\t\tp.z = settings.getValue(\"Z\", 0);\n\t\t\n\t\tpoints.push_back(p);\n\t\tsettings.popTag();\n\t}\n\t\n\tsettings.popTag(); //pop position\n}\nelse{\n\tofLogError(\"Position file did not load!\");\n}\n~~~~\n\nWhat is this \"which\" argument I see everywhere used for?\n\nMost of the time you can ignore this and treat it as if it weren't there. But if specified it selects the nth tag with the same tag name at the current root of the document Normally this just means the top level tags in the document - but if you use the pushTag and popTag you can temporarily set the root of the document to be that specified tag. The main idea is to allow you to have multiple tags with the same name.\n\nHere is an example:\n\n~~~~{.xml}\n<time>102229</time>  <-- which = 0\n<time>298292</time>  <-- which = 1\n<time>393393</time>  <-- which = 2\n<time>447373</time>  <-- which = 3\n~~~~\n\nBut if we wanted to group these into multiple <recording> tags and have multiple time values inside\nwe can use push and pop to move into the recording tags as if they were the document root\n~~~~{.xml}\n<recording> <-- we temporarily push into here with pushTag(\"recording\", 0);\n\t<time>19222</time>  <-- to set this we call setValue(\"time\", 19222, 0);   ( which = 0 )\n\t<time>23232</time>  <-- to set this we call setValue(\"time\", 23232, 1);   ( which = 1 )\n</recording> <-- we pop back out here with popTag();\n~~~~\n\n~~~~{.xml}\n<recording>  <-- we temporarily push into here with pushTag(\"recording\", 1); <-- now we use 1 to select the 2nd recording tag\n\t<time>33342</time>  <-- setValue(\"time\", 33342, 0);   ( which = 0 )\n\t<time>22722</time>  <-- setValue(\"time\", 22722, 0);   ( which = 1 )\n</recording>\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###int addAttribute(&tag, &attribute, &value)\n\n<!--\n_syntax: addAttribute(&tag, &attribute, &value)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds a new attribute to the tag with with the given string value.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int addAttribute(&tag, &attribute, &value, which = 0)\n\n<!--\n_syntax: addAttribute(&tag, &attribute, &value, which = 0)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds a new attribute to the tag with the given string value. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int addAttribute(&tag, &attribute, value)\n\n<!--\n_syntax: addAttribute(&tag, &attribute, value)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds a new attribute to the tag with with the given int value.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int addAttribute(&tag, &attribute, value)\n\n<!--\n_syntax: addAttribute(&tag, &attribute, value)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds a new attribute to the tag with with the given double value.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int addAttribute(&tag, &attribute, value, which = 0)\n\n<!--\n_syntax: addAttribute(&tag, &attribute, value, which = 0)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds a new attribute to the tag with with the given int value. If the tag doesn't exist it is created. If an attribute at index 'which' already exists its value replaced by the provided value\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int addAttribute(&tag, &attribute, value, which = 0)\n\n<!--\n_syntax: addAttribute(&tag, &attribute, value, which = 0)_\n_name: addAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds a new attribute to the tag with the given double value. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int addTag(&tag)\n\n<!--\n_syntax: addTag(&tag)_\n_name: addTag_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds an empty tag at the current document level. If you want to add children tags, call pushTag afterwords to begin editing the document with the new tag as root.\n\nReturn the number of tags with the same name at the current level.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int addValue(&tag, &value)\n\n<!--\n_syntax: addValue(&tag, &value)_\n_name: addValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds a tag with tag name and string value to the document, returning the number of tags with the same name.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int addValue(&tag, value)\n\n<!--\n_syntax: addValue(&tag, value)_\n_name: addValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds a tag with tag name and integer value to the document, returning the number of tags with the same name.\n\naddValue and setValue are very similar, both add new tags to the current document with the given name and value.  The distinction is that if tags exist with the same name at the current document level, addValue will create additional tags, while setValue will replace contents of the tags based on the 'which' parameter.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int addValue(&tag, value)\n\n<!--\n_syntax: addValue(&tag, value)_\n_name: addValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, double value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds a tag with tag name and double value to the document, returning the number of tags with the same name.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool attributeExists(&tag, &attribute, which = 0)\n\n<!--\n_syntax: attributeExists(&tag, &attribute, which = 0)_\n_name: attributeExists_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns true if a tag has any attributes.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRemoves all tags at the current document level.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearTagAttributes(&tag, which = 0)\n\n<!--\n_syntax: clearTagAttributes(&tag, which = 0)_\n_name: clearTagAttributes_\n_returns: void_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nClears all attributes from the given tag name and tag index which.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearTagContents(&tag, which = 0)\n\n<!--\n_syntax: clearTagContents(&tag, which = 0)_\n_name: clearTagContents_\n_returns: void_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nIf the given tag exists at the current pushTag level set its contents to empty.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void copyXmlToString(&str)\n\n<!--\n_syntax: copyXmlToString(&str)_\n_name: copyXmlToString_\n_returns: void_\n_returns_description: _\n_parameters: __cxx11::string &str_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies the contents of the ofxXmlSettings into the string str.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###__cxx11::string getAttribute(&tag, &attribute, &defaultValue, which = 0)\n\n<!--\n_syntax: getAttribute(&tag, &attribute, &defaultValue, which = 0)_\n_name: getAttribute_\n_returns: __cxx11::string_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the value of the attribute on tag at index which as a string.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getAttribute(&tag, &attribute, defaultValue, which = 0)\n\n<!--\n_syntax: getAttribute(&tag, &attribute, defaultValue, which = 0)_\n_name: getAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the value of the attribute on tag at index which as an int.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###double getAttribute(&tag, &attribute, defaultValue, which = 0)\n\n<!--\n_syntax: getAttribute(&tag, &attribute, defaultValue, which = 0)_\n_name: getAttribute_\n_returns: double_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the value of the attribute on tag at index which as a double.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getAttributeNames(&tag, &outNames, which = 0)\n\n<!--\n_syntax: getAttributeNames(&tag, &outNames, which = 0)_\n_name: getAttributeNames_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int &outNames, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns an array of strings containing all attribute names on the tag.  This is useful in conjunction with a loop to get all values of the tags one by one with calls to getAttribute.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getElementForAttribute()\n\n<!--\n_syntax: getElementForAttribute()_\n_name: getElementForAttribute_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumAttributes(&tag, which = 0)\n\n<!--\n_syntax: getNumAttributes(&tag, which = 0)_\n_name: getNumAttributes_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the number of attributes on a tag at index which.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumTags(&tag)\n\n<!--\n_syntax: getNumTags(&tag)_\n_name: getNumTags_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the number of tags with the given name at the current document level. Useful for iterating through a list of sibling tags with the same name.  \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getPushLevel()\n\n<!--\n_syntax: getPushLevel()_\n_name: getPushLevel_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\ngetPushLevel returns the number of tags that have been pushed. Starting at 0 when the file is first populated (eg a call to loadFile). Each time pushTag is called push level increases by one. Each time popTag is called it decreases.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###__cxx11::string getValue(&tag, &defaultValue, which = 0)\n\n<!--\n_syntax: getValue(&tag, &defaultValue, which = 0)_\n_name: getValue_\n_returns: __cxx11::string_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the value stored by the requested tag as a string. Refer above for description of how this method works.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getValue(&tag, defaultValue, which = 0)\n\n<!--\n_syntax: getValue(&tag, defaultValue, which = 0)_\n_name: getValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the value stored by the requested tag. The data type returned depends on the type provided as the defaultArgument. For example, if the tag is:\n~~~~{.xml}\n<myTag>9.8</myTag>   \n~~~~\n\nThe value can be interpreted in three different ways, as a float, int, or string by changing the default type provided to the call.\n\n~~~~{.cpp}\n//returns \"9.8\"\nstring myString = settings.getValue(\"myTag\", \"\");\n//returns the integer value 9\nint myInt = settings.getValue(\"myTag\", 0);\n//returns the double value 9.8\ndouble myDouble = settings.getValue(\"myTag\", 0.0);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###double getValue(&tag, defaultValue, which = 0)\n\n<!--\n_syntax: getValue(&tag, defaultValue, which = 0)_\n_name: getValue_\n_returns: double_\n_returns_description: _\n_parameters: const __cxx11::string &tag, double defaultValue, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the value stored by the requested tag as a double. Refer above for description of how this method works.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool load(&path)\n\n<!--\n_syntax: load(&path)_\n_name: load_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &path_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool loadFile(&xmlFile)\n\n<!--\n_syntax: loadFile(&xmlFile)_\n_name: loadFile_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &xmlFile_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nLoads and parses the xml file at the given path.  Returns true if the file is found and is correctly formatted xml.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool loadFromBuffer(buffer)\n\n<!--\n_syntax: loadFromBuffer(buffer)_\n_name: loadFromBuffer_\n_returns: bool_\n_returns_description: _\n_parameters: __cxx11::string buffer_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nPopulates the ofxXmlSettings object from a string of containing xml.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxXmlSettings(&xmlFile)\n\n<!--\n_syntax: ofxXmlSettings(&xmlFile)_\n_name: ofxXmlSettings_\n_returns: _\n_returns_description: _\n_parameters: const __cxx11::string &xmlFile_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nInitializes an xml settings object and loads the file at xmlFile path.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxXmlSettings()\n\n<!--\n_syntax: ofxXmlSettings()_\n_name: ofxXmlSettings_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDefault constructor for ofxXmlSettings.  Initializes an empty object with no file set or loaded and no contents.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int popTag()\n\n<!--\n_syntax: popTag()_\n_name: popTag_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\npopTag restores the current document root after a call to pushTag.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool pushTag(&tag, which = 0)\n\n<!--\n_syntax: pushTag(&tag, which = 0)_\n_name: pushTag_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nPushing and Popping operations are used to set the current document level. Most of the methods in ofxXmlSettings are done in relationship to just the top level tags, so pushing tags is necessary to go deeper into documents. Every pushTag should be matched with a popTag after operations at that level are finished.  \n\npushingTag pushes the given tag which is then treated as the tag as as the document root.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool readDoubleAttribute(&tag, &attribute, &outValue, which)\n\n<!--\n_syntax: readDoubleAttribute(&tag, &attribute, &outValue, which)_\n_name: readDoubleAttribute_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double &outValue, int which_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool readIntAttribute(&tag, &attribute, &valueString, which)\n\n<!--\n_syntax: readIntAttribute(&tag, &attribute, &valueString, which)_\n_name: readIntAttribute_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int &valueString, int which_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool readStringAttribute(&tag, &attribute, &outValue, which)\n\n<!--\n_syntax: readStringAttribute(&tag, &attribute, &outValue, which)_\n_name: readStringAttribute_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, __cxx11::string &outValue, int which_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool readTag(&tag, &valHandle, which = 0)\n\n<!--\n_syntax: readTag(&tag, &valHandle, which = 0)_\n_name: readTag_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int &valHandle, int which=0_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void removeAttribute(&tag, &attribute, which = 0)\n\n<!--\n_syntax: removeAttribute(&tag, &attribute, which = 0)_\n_name: removeAttribute_\n_returns: void_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRemoves the attribute from tag name at index specified by 'which'.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void removeTag(&tag, which = 0)\n\n<!--\n_syntax: removeTag(&tag, which = 0)_\n_name: removeTag_\n_returns: void_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRemoves a tag from the current level. This differs from clearing it in that the entire tag is removed, rather than just its contents being set to empty.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool save(&path)\n\n<!--\n_syntax: save(&path)_\n_name: save_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &path_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool saveFile(&xmlFile)\n\n<!--\n_syntax: saveFile(&xmlFile)_\n_name: saveFile_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &xmlFile_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSaves the current state of the xml settings object to file at xmlFile path.  \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool saveFile()\n\n<!--\n_syntax: saveFile()_\n_name: saveFile_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSaves the current state of the xml file to its current path. The current path is defined by whatever path was specified when loadFile(xmlFile) or saveFile(xmlFile) was last called.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int setAttribute(&tag, &attribute, &value)\n\n<!--\n_syntax: setAttribute(&tag, &attribute, &value)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRefer to addAttribute\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int setAttribute(&tag, &attribute, &value, which = 0)\n\n<!--\n_syntax: setAttribute(&tag, &attribute, &value, which = 0)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRefer to addAttribute\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int setAttribute(&tag, &attribute, value)\n\n<!--\n_syntax: setAttribute(&tag, &attribute, value)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRefer to addAttribute\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int setAttribute(&tag, &attribute, value)\n\n<!--\n_syntax: setAttribute(&tag, &attribute, value)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRefer to addAttribute\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int setAttribute(&tag, &attribute, value, which = 0)\n\n<!--\n_syntax: setAttribute(&tag, &attribute, value, which = 0)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, int value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the value of the attribute on tag as a double.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int setAttribute(&tag, &attribute, value, which = 0)\n\n<!--\n_syntax: setAttribute(&tag, &attribute, value, which = 0)_\n_name: setAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, double value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRefer to addAttribute\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int setValue(&tag, &value, which = 0)\n\n<!--\n_syntax: setValue(&tag, &value, which = 0)_\n_name: setValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the value of a tag to a string value.  If the tag already exists, the current value is replaced with value otherwise a new tag is created.\n\nThe number of tags with the same name at the current document level is returned.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int setValue(&tag, value, which = 0)\n\n<!--\n_syntax: setValue(&tag, value, which = 0)_\n_name: setValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the value of a tag to an integer value.  If the tag already exists, the current value is replaced with value. Otherwise a new tag is created.\n\nThe number of tags with the same name at the current document level is returned.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int setValue(&tag, value, which = 0)\n\n<!--\n_syntax: setValue(&tag, value, which = 0)_\n_name: setValue_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, double value, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the value of a tag to an integer value.  If the tag already exists, the current value is replaced with value otherwise a new tag is created.\n\nThe number of tags with the same name at the current document level is returned.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVerbose(_verbose)\n\n<!--\n_syntax: setVerbose(_verbose)_\n_name: setVerbose_\n_returns: void_\n_returns_description: _\n_parameters: bool _verbose_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool tagExists(&tag, which = 0)\n\n<!--\n_syntax: tagExists(&tag, which = 0)_\n_name: tagExists_\n_returns: bool_\n_returns_description: _\n_parameters: const __cxx11::string &tag, int which=0_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns true if the given tag exists at the current pushTag level.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int writeAttribute(&tag, &attribute, &valueString, which = 0)\n\n<!--\n_syntax: writeAttribute(&tag, &attribute, &valueString, which = 0)_\n_name: writeAttribute_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &attribute, const __cxx11::string &valueString, int which=0_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int writeTag(&tag, &valueString, which = 0)\n\n<!--\n_syntax: writeTag(&tag, &valueString, which = 0)_\n_name: writeTag_\n_returns: int_\n_returns_description: _\n_parameters: const __cxx11::string &tag, const __cxx11::string &valueString, int which=0_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofxXmlSettings()\n\n<!--\n_syntax: ~ofxXmlSettings()_\n_name: ~ofxXmlSettings_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bDocLoaded\n\n<!--\n_name: bDocLoaded_\n_type: bool_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###TiXmlDocument doc\n\n<!--\n_name: doc_\n_type: TiXmlDocument_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int level\n\n<!--\n_name: level_\n_type: int_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###TiXmlHandle storedHandle\n\n<!--\n_name: storedHandle_\n_type: TiXmlHandle_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}