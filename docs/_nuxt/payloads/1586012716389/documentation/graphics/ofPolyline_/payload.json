{"data":[{"page":{"entry":{"name":"ofPolyline","filename":"ofPolyline_.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/graphics/ofPolyline_.markdown","path":"/documentation/graphics/ofPolyline_","route":"/documentation/graphics/ofPolyline_.markdown","dir":"../ofSite/documentation/graphics","ext":"markdown","type":"page","id":2355,"parent":2325,"breadcrumbs":[2325,1968],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>ofPolyLine allows you to combine multiple points into a single vector data object that can be drawn to the screen, manipulated point by point, and combined with other ofPolyline instances. It is less complex than the <a href=\"ofPath.html\">ofPath</a> and generally represents a single line or vector shape rather than multiple lines or shapes.</p>\n<p>You can add points to an ofPolyline by adding vertices. By default these vertices are ofVec3f types, meaning you also need to specify a z-value, even when drawing in 2D:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> TWO_PI<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// make a heart</span>\n\t<span class=\"token keyword\">float</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\n\tline<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ti<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">0.005</span><span class=\"token operator\">*</span>HALF_PI<span class=\"token operator\">*</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// close the shape</span>\n</code></pre>\n<p>or you can draw lines or curves:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">&lt;</span> TWO_PI <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tangle <span class=\"token operator\">+</span><span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>ofPolyline also includes methods to get the closest point, determine whether a point is inside shape, and resample shapes. Along with the ofPath class, it's the best way to draw and manipulate 2D and 3D vector graphics that you'll need to update and manipulate frequently.</p>\n<p>If you use the lineTo or curveTo or bezierTo functions, you move the drawing point, so that drawing a line to 100,100 means a line from 0,0 to 100, 100. The next line would be a line from 100,100 to wherever you go next. Storing this position means that you can easily create continuous drawings without difficulty.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"True","extends":null},"methods":[{"syntax":"addVertex(&p)","name":"addVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a point using an T at the end of the ofPolyline.</p>\n","desc":"<p>Adds a point using an ofPoint at the end of the ofPolyline.</p>\n","counter":1},{"syntax":"addVertex(x, y, z)","name":"addVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a point using floats at the end of the ofPolyline.</p>\n","desc":"<p>Adds a point using floats instead of an ofPoint at the end of the ofPolyline.</p>\n"},{"desc":""},{"syntax":"addVertices(*verts, numverts)","name":"addVertices","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">*</span>verts<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numverts","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds multiple points at the end of the ofPolyline using a pointer to\nan array of T objects.</p>\n","desc":"<p>Adds multiple points at the end of the ofPolyline using a pointer to an array of ofPoint objects.</p>\n<pre><code class=\"language-{.cpp}\">ofPoint<span class=\"token operator\">*</span> verts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ofPoint<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// make a pentagon</span>\n<span class=\"token keyword\">float</span> size <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> X1 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> X2 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> Y1 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> Y2 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\nverts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nverts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>X1<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>Y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nverts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>X2<span class=\"token punctuation\">,</span> Y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nverts<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span>X2<span class=\"token punctuation\">,</span> Y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nverts<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span>X1<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>Y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofPolyline p<span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">addVertices</span><span class=\"token punctuation\">(</span>verts<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","counter":0},{"syntax":"arc(&center, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)","name":"arc","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds an arc around the T <code>center</code> with the width of\n<code>radiusX</code> and the height of <code>radiusY</code>.</p>\n<p>The <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles\nof the arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of\nline segments a circle would be drawn with. A partial arc will be\ndrawn with the same resolution: if circleResolution == 20, a half-\ncircle will be drawn with 10 segments.</p>\n<p>If there are already vertexes in the ofPolyline the arc will extend\nthem; a line will be created from the endmost point on the ofPolyline\nto the beginning point of the arc.</p>\n<pre><code class=\"language-{.cpp}\">ofPolyline polyline1<span class=\"token punctuation\">,</span> polyline2<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// draw an line, then an semi-circle in red</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nT <span class=\"token function\">point2</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>point2<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"graphics/ofpolyline_arc.jpg\" alt=\"Arc Example\"></p>\n","desc":"<p>Draws an arc around the ofPoint <code>center</code> with the width of <code>radiusX</code> and the height of <code>radiusY</code>.\nThe <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of line segments a circle would be drawn with.\nA partial arc will be drawn with the same resolution: if circleResolution == 20, a half-circle will be drawn with 10 segments.</p>\n<p>If there are already vertices in the ofPolyline the arc will extend them;\na line will be created from the endmost point on the ofPolyline to the beginning point of the arc.</p>\n<p>Example:</p>\n<pre><code class=\"language-{.cpp}\">ofPolyline polyline1<span class=\"token punctuation\">,</span> polyline2<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// draw an circle with a diameter of 100 in blue</span>\nofPoint <span class=\"token function\">point1</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline1<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>point1<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">360</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>blue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline1<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// draw an line, then an semi-circle in red</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofPoint <span class=\"token function\">point2</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>point2<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"ofpolyline_arc.png\" alt=\"Arc Example\"></p>\n","counter":3},{"syntax":"arc(&center, radiusX, radiusY, angleBegin, angleEnd, clockwise, circleResolution = 20)","name":"arc","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> clockwise<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds an arc around the T <code>center</code> with the width of <code>radiusX</code>\nand the height of <code>radiusY</code> to the polyline.</p>\n<p>The <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of\nthe arc in degrees measured clockwise from the x-axis.</p>\n<p>The <code>clockwise</code> boolean sets the drawing direction.  Passing 'false' to\nit will draw the arc counter-clockwise.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of\nline segments a circle would be drawn with.</p>\n<p>If the arc doesn't start at the same point the last vertex finished a\nstraight line will be created to join both</p>\n","desc":"<p>Draws an arc around the ofPoint <code>center</code> with the width of <code>radiusX</code> and the height of <code>radiusY</code>.\nThe <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.\nThe <code>clockwise</code> boolean sets the drawing direction.  Passing 'false' to it will draw the arc counter-clockwise.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of line segments a circle would be drawn with.</p>\n"},{"syntax":"arc(x, y, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)","name":"arc","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds an arc around the coordinates (<code>x</code>,<code>y</code>) with the width of\n<code>radiusX</code> and the height of <code>radiusY</code>.</p>\n<p>The <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles\nof the arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number\nof line segments a circle would be drawn with.</p>\n","desc":"<p>Draws an arc around the coordinates (<code>x</code>,<code>y</code>) with the width of <code>radiusX</code> and the height of <code>radiusY</code>.\nThe <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of line segments a circle would be drawn with.</p>\n"},{"syntax":"arc(x, y, z, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)","name":"arc","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds an arc around the coordinates (<code>x</code>,<code>y</code>,<code>z</code>) with the width of\n<code>radiusX</code> and the height of <code>radiusY</code>.</p>\n<p>The <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of\nthe arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of\nline segments a circle would be drawn with.</p>\n","desc":"<p>Draws an arc around the coordinates (<code>x</code>,<code>y</code>,<code>z</code>) with the width of <code>radiusX</code> and the height of <code>radiusY</code>.\nThe <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of line segments a circle would be drawn with.</p>\n"},{"syntax":"arcNegative(&center, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)","name":"arcNegative","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>center<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":2},{"syntax":"arcNegative(x, y, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)","name":"arcNegative","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"arcNegative(x, y, z, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)","name":"arcNegative","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> circleResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"bezierTo(&cp1, &cp2, &to, curveResolution = 20)","name":"bezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>cp2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by T cp1 and cp2, that ends at T\nto.</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"bezier.jpg\" alt=\"polyline bezier\">\nThe control points are shown in red.</p>\n","desc":"<p>Creates a cubic bezier line from the current drawing point with the 2 control points indicated by ofPoint cp1 and cp2, that ends at ofPoint to. For instance, the following:</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Creates this:\n<img src=\"bezier.png\" alt=\"polyline bezier\">\nThe control points are shown in yellow.</p>\n","counter":2},{"syntax":"bezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution = 20)","name":"bezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by the coordinates cx1, cy1 and cx2, cy2,\nthat ends at the coordinates x, y.</p>\n","desc":"<p>Creates a cubic bezier line from the current drawing point with the 2 control points indicated by the coordinates cx1, cy1 and cx2, cy2, that ends at the coordinates x, y.</p>\n"},{"syntax":"bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution = 20)","name":"bezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a cubic bezier line in 3D space from the current drawing point\nwith the 2 control points indicated by the coordinates cx1, cy1, cz1\nand cx2, cy2, cz2, that ends at the coordinates x, y, z.</p>\n","desc":"<p>Creates a cubic bezier line in 3D space from the current drawing point with the 2 control points indicated by the coordinates cx1, cy1, cz1 and cx2, cy2, cz2, that ends at the coordinates x, y, z.</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> cx <span class=\"token operator\">=</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> cy <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> step <span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> TWO_PI<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tline<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tline<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span> cx <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token number\">-100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n\t\t\t\t\t   cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n\t\t\t\t\t   cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"calcData(index, &tangent, &angle, &rotation, &normal)","name":"calcData","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> T <span class=\"token operator\">&amp;</span>tangent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>angle<span class=\"token punctuation\">,</span> T <span class=\"token operator\">&amp;</span>rotation<span class=\"token punctuation\">,</span> T <span class=\"token operator\">&amp;</span>normal","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Removes all the points from the ofPolyline.</p>\n","desc":"<p>Removes all the points from the ofPolyline.</p>\n","counter":0},{"syntax":"close()","name":"close","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Closes the ofPolyline, meaning that all the vertices will be linked\nand can be &quot;walked&quot;.</p>\n","desc":"<p>Closes the ofPolyline, meaning that all the vertices will be linked and can be &quot;walked&quot;.</p>\n","counter":0},{"syntax":"curveTo(&to, curveResolution = 20)","name":"curveTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a curve to an T object passed in</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">&lt;</span> TWO_PI <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tangle <span class=\"token operator\">+</span><span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>\\note You need at least 4 points to be able to use curveTo()</p>\n<p><strong>See also</strong>: <a href=\"http://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\">Catmull-Rom splines wiki</a></p>\n","desc":"<p>Draws a curve to an ofPoint object passed in:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">&lt;</span> TWO_PI <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tangle <span class=\"token operator\">+</span><span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>You need at least 4 points to be able to draw with curveTo, here's an explanation of why this happens:</p>\n<p>If we have an empty <code>ofPolyline</code> <code>p</code>, and we do:</p>\n<pre><code>p.lineTo(v0); \np.lineTo(v1); \np.lineTo(v2); \np.lineTo(v3); \n</code></pre>\n<p>We end up with a line that starts at <code>v0</code>, heads to <code>v1</code>, then heads to <code>v2</code> and finally ends at <code>v3</code>.  But if we had instead done:</p>\n<pre><code>p.curveTo(v0); \np.curveTo(v1); \np.curveTo(v2); \np.curveTo(v3); \n</code></pre>\n<p>We end up with a curve that goes from <code>v1</code> to <code>v2</code>.  That might seem initially puzzling...</p>\n<p>So, we have to dive under the hood.  The <code>curveTo(...)</code> method makes Catmull-Rom splines <a href=\"http://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\">wiki</a>.  The relevant bit to understand is that this type of spline is defined by four points:</p>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Catmull-Rom_Spline.png/220px-Catmull-Rom_Spline.png\" alt=\"\"></p>\n<p>P1 and P2 are the endpoints of our curve, while P0 and P3 are the control that define the shape of the curve.</p>\n<p>When using <code>curveTo(...)</code> with <code>ofPolyline</code>, there's an internal vector that stores P0, P1, P2 and P3.  When our <code>ofPolyline</code> is empty then the internal vector is also empty.  When we call:</p>\n<pre><code>p.curveTo(v0); // Internal vector is [v0], so only P0 is defined \np.curveTo(v1); // Internal vector is [v0, v1], so only P0 and P1 are defined\np.curveTo(v2); // Internal vector is [v0, v1, v2], so only P0, P1 and P2 are defined\np.curveTo(v3); // Internal vector is [v0, v1, v2, v3], so all points are defined\n</code></pre>\n<p>Only once all of those points (P0 through P4) have been defined, then a spline has been fully defined and vertices can finally be added to our <code>ofPolyline</code>.  When <code>curveTo(v3)</code> is called above, then the curve between P1 (<code>v1</code>) and P2 (<code>v2</code>) is sampled (at a resolution defined by the optional parameter <code>curveResolution</code>).  That sampling slides along the curve and adds vertices to your <code>ofPolyline</code>.</p>\n<p>The curve doesn't start at <code>v0</code> and end at <code>v3</code> because those points are acting as the control points (i.e. the points connected by dotted lines in the image above).</p>\n<p>And now that we have P0 through P4 defined, when we call <code>curveTo(...)</code> next:</p>\n<pre><code>curveTo(v4); // Internal vector becomes [v1, v2, v3, v4]\n</code></pre>\n<p>The oldest point, <code>v0</code>, was bumped and everything shifted down.  The sampling occurs again, but this time it is between <code>v2</code> and <code>v3</code>.</p>\n","counter":1},{"syntax":"curveTo(x, y, z, curveResolution = 20)","name":"curveTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a curve to the x,y,z points passed in with the optional\nresolution.</p>\n","desc":"<p>Draws a curve to the x,y,z points passed in with the optional resolution.</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">&lt;</span> TWO_PI <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpolyline<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpolyline<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tangle <span class=\"token operator\">+</span><span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"draw()","name":"draw","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw the line using the current renderer</p>\n","desc":"<p>Draw the line using the current renderer.</p>\n","counter":0},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"flagHasChanged()","name":"flagHasChanged","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"short":"","desc":""},{"syntax":"getArea()","name":"getArea","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the precise area bounded by the line</p>\n","desc":"","counter":0},{"syntax":"getBoundingBox()","name":"getBoundingBox","returns":"ofRectangle","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the bounding box of the polyline , taking into account\nall the points to determine the extents of the polyline.</p>\n","desc":"","counter":0},{"syntax":"getCentroid2D()","name":"getCentroid2D","returns":"T","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the center of the area bounded by the line</p>\n","desc":"","counter":0},{"syntax":"getClosestPoint(&target, *nearestIndex)","name":"getClosestPoint","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>nearestIndex","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the point on the line closest to the target. You can also\noptionally pass a pointer to/address of an unsigned int to get the\nindex of the closest vertex</p>\n","desc":"<p>Returns the bounding box of the shape, taking into account all the points to determine the extents of the polyline.</p>\n","counter":0},{"syntax":"getDegreesAtIndex(index)","name":"getDegreesAtIndex","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> index","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get angle (degrees) of the path at index</p>\n","desc":"<p>Get the center of the area bounded by the line.</p>\n","counter":0},{"syntax":"getDegreesAtIndexInterpolated(findex)","name":"getDegreesAtIndexInterpolated","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> findex","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get angle (degrees) at interpolated index (interpolated between\nneighboring indices)</p>\n","desc":"<p>This returns the point on the line closest to the target. You can also optionally pass a pointer to/address of an unsigned int to get the index of the closest vertex.</p>\n","counter":0},{"syntax":"getIndexAtLength(f)","name":"getIndexAtLength","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> f","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"getIndexAtPercent(f)","name":"getIndexAtPercent","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> f","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"getInterpolationParams(findex, &i1, &i2, &t)","name":"getInterpolationParams","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> findex<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>i1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>i2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>t","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getLengthAtIndex(index)","name":"getLengthAtIndex","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> index","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get length along path at index</p>\n","desc":"","counter":0},{"syntax":"getLengthAtIndexInterpolated(findex)","name":"getLengthAtIndexInterpolated","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> findex","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"getNormalAtIndex(index)","name":"getNormalAtIndex","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> index","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get normal vector at index</p>\n","desc":"","counter":0},{"syntax":"getNormalAtIndexInterpolated(findex)","name":"getNormalAtIndexInterpolated","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> findex","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get normal vector at interpolated index\n(interpolated between neighboring indices)</p>\n","desc":"","counter":0},{"syntax":"getPerimeter()","name":"getPerimeter","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Gets the size of the perimeter of the polyline, good for\ndetermining length of the line, rather than just the bounding box\nshape.</p>\n","desc":"","counter":0},{"syntax":"getPointAtIndexInterpolated(findex)","name":"getPointAtIndexInterpolated","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> findex","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"getPointAtLength(f)","name":"getPointAtLength","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> f","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"getPointAtPercent(f)","name":"getPointAtPercent","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> f","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"","counter":0},{"syntax":"getRadiansAtIndex(index)","name":"getRadiansAtIndex","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> index","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get angle (degrees) of the path at index</p>\n","desc":"","counter":0},{"syntax":"getRadiansAtIndexInterpolated(findex)","name":"getRadiansAtIndexInterpolated","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> findex","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get angle (degrees) at interpolated index (interpolated between\nneighboring indices)</p>\n","desc":"","counter":0},{"short":"<p>Resamples the line based on the count passed in. The lower the\ncount passed in, the more points will be eliminated.</p>\n<p>This doesn't add new points to the line.</p>\n","desc":"<p>This resamples the line based on the spacing passed in. The lower the count passed in, the more points will be eliminated. New points are added if necessary to match count.</p>\n"},{"short":"<p>Resamples the line based on the spacing passed in. The larger the\nspacing, the more points will be eliminated.</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">getResampledBySpacing</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"graphics/resample.jpg\" alt=\"polyline resample\"></p>\n","desc":"<p>This resamples the line based on the spacing passed in. The larger the spacing, the more points will be eliminated.</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">getResampledBySpacing</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"resample.png\" alt=\"polyline resample\"></p>\n"},{"syntax":"getRightVector()","name":"getRightVector","returns":"T","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getRotationAtIndex(index)","name":"getRotationAtIndex","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> index","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get rotation vector at index (magnitude is sine of angle)</p>\n","desc":"","counter":0},{"syntax":"getRotationAtIndexInterpolated(findex)","name":"getRotationAtIndexInterpolated","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> findex","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get rotation vector at interpolated index\n(interpolated between neighboring indices) (magnitude is sine of angle)</p>\n","desc":"","counter":0},{"short":"<p>Gets a smoothed version of the ofPolyline.</p>\n<p><code>smoothingSize</code> is the size of the smoothing window. So if\n<code>smoothingSize</code> is 2, then 2 points from the left, 1 in the center,\nand 2 on the right (5 total) will be used for smoothing each point.\n<code>smoothingShape</code> describes whether to use a triangular window (0) or\nbox window (1) or something in between (for example, .5).</p>\n","desc":""},{"syntax":"getTangentAtIndex(index)","name":"getTangentAtIndex","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> index","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get tangent vector at index</p>\n","desc":"","counter":0},{"syntax":"getTangentAtIndexInterpolated(findex)","name":"getTangentAtIndexInterpolated","returns":"T","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> findex","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get tangent vector at interpolated index\n(interpolated between neighboring indices)</p>\n","desc":"","counter":0},{"short":"<p>Gets a vector of vertices that the line contains</p>\n","desc":""},{"short":"","desc":""},{"syntax":"getWrappedIndex(index)","name":"getWrappedIndex","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> index","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get wrapped index depending on whether poly is closed or not</p>\n","desc":"","counter":0},{"syntax":"hasChanged()","name":"hasChanged","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns whether the vertices within the line have changed.</p>\n","desc":"","counter":0},{"syntax":"insertVertex(&p, index)","name":"insertVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"insertVertex(x, y, z, index)","name":"insertVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"inside(&p)","name":"inside","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Tests whether the T is within a closed ofPolyline.</p>\n","desc":"<p>Tests whether the ofPoint is within a closed ofPolyline.</p>\n","counter":1},{"short":"<p>Tests whether the T is within a closed ofPolyline.</p>\n","desc":"<p>Test whether the ofPoint is within anothe polyline, passed in as ofPolyline&amp;</p>\n"},{"syntax":"inside(x, y)","name":"inside","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Tests whether the x,y coordinates are within a closed ofPolyline.</p>\n","desc":"<p>Tests whether the x,y coordinates are within a closed ofPolyline.</p>\n"},{"short":"<p>Tests whether the x,y coordinates are within a closed ofPolyline.</p>\n","desc":"<p>Test whether the x,y point is within anothe polyline, passed in as ofPolyline&amp;</p>\n"},{"syntax":"isClosed()","name":"isClosed","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"lineTo(&to)","name":"lineTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>to","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Add a straight line from the last point added, or from 0,0 if no point\nis set, to the point indicated by the T passesd in.</p>\n","desc":"<p>Add a line from the last point added, or from 0,0 if no point is set, to the point indicated by the ofPoint passesd in.</p>\n","counter":1},{"syntax":"lineTo(x, y, z)","name":"lineTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Add a straight line from the last point added, or from 0,0 if no point\nis set, to the point indicated by the floats x,y,z passesd in.</p>\n","desc":"<p>Add a line from the last point added, or from 0,0 if no point is set, to the point indicated by the floats x,y,z passesd in.</p>\n"},{"short":"<p>Creates an ofPolyline from a vector of ofVec2f or T objects.</p>\n","desc":"<p>Creates an ofPolyline from a vector of ofVec2f or ofPoint objects.</p>\n<pre><code class=\"language-{.cpp}\">vector<span class=\"token operator\">&lt;</span>ofPoint</code></pre>\n"},{"syntax":"ofPolyline_()","name":"ofPolyline_","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Creates an ofPolyline.</p>\n","desc":"<p>Creates an ofPolyline.</p>\n","counter":0},{"syntax":"operator[](index)","name":"operator[]","returns":"const T &","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> index","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Allows you to access the points of the ofPolyline just like you would\nin an array, so to make the points of a line follow the mouse\nmovement, you could do:</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>bounds<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbounds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>bounds<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> bounds<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"","counter":1},{"syntax":"operator[](index)","name":"operator[]","returns":"T &","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> index","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>The [] operator allows you to access the points of the ofPolyline just like you would in an array, so to make the points of a line follow the mouse movement, you could do:</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>bounds<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\tbounds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>bounds<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> bounds<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"quadBezierTo(&p1, &p2, &p3, curveResolution = 20)","name":"quadBezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>p3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a quadratic bezier line in 2D space from the current drawing\npoint with the beginning indicated by the point p1, the control point\nat p2, and that ends at the point p3.</p>\n","desc":"<p>Creates a quadratic bezier line in 2D space from the current drawing point with the beginning indicated by the point p1, the control point at p2, and that ends at the point p3.</p>\n","counter":2},{"syntax":"quadBezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution = 20)","name":"quadBezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a quadratic bezier line in 2D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, the\ncontrol point at cx2, cy2, and that ends at the coordinates x, y.</p>\n","desc":"<p>Creates a quadratic bezier line in 3D space from the current drawing point with the beginning indicated by the coordinates cx1, cy1, the control point at cx2, cy2, and that ends at the coordinates x, y.</p>\n"},{"syntax":"quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution = 20)","name":"quadBezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> curveResolution<span class=\"token operator\">=</span><span class=\"token number\">20</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a quadratic bezier line in 3D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, cz1,\nthe control point at cx2, cy2, cz2, and that ends at the coordinates\nx, y, z.</p>\n<p><img src=\"graphics/curves.png\" alt=\"polyline curves\"></p>\n","desc":"<p>Creates a quadratic bezier line in 3D space from the current drawing point with the beginning indicated by the coordinates cx1, cy1, cz1, the control point at cx2, cy2, cz2, and that ends at the coordinates x, y, z.\n<img src=\"curves.png\" alt=\"polyline curves\"></p>\n"},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"resize(size)","name":"resize","returns":"void","returns_description":null,"parameters":"size_t size","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Resize the number of points in the ofPolyline to the value\npassed in.</p>\n","desc":"","counter":0},{"syntax":"rotateDeg(degrees, &axis)","name":"rotateDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>}\n\\name Transform polyline\n{</p>\n","desc":"","counter":1},{"syntax":"rotateDeg(degrees, &axis)","name":"rotateDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rotateRad(radians, &axis)","name":"rotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"rotateRad(radians, &axis)","name":"rotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"scale(x, y)","name":"scale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Change the size of the ofPolyline\nThese changes are non-reversible, so for instance\nscaling by 0,0 zeros out all data.</p>\n","desc":"","counter":0},{"syntax":"setCircleResolution(res)","name":"setCircleResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> res","access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>}</p>\n","desc":"","counter":0},{"syntax":"setClosed(tf)","name":"setClosed","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> tf","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Closes the ofPolyline, meaning that all the vertices will be linked\nand can be &quot;walked&quot;.</p>\n","desc":"","counter":0},{"syntax":"setRightVector(v)","name":"setRightVector","returns":"void","returns_description":null,"parameters":"T v","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"simplify(tolerance = 0.3f)","name":"simplify","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.3f</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Simplifies the polyline, removing un-necessary vertices.</p>\n<p><strong>Parameters:</strong></p>\n<p>tolerance determines how dis-similar points need to be to stay in the line.\nHigher tolerance means more points removed, lower tolerance means less\npoints removed.</p>\n","desc":"<p>Simplifies the polyline, removing un-necessary vertices. The tolerance determines how dis-similar points need to be to stay in the line. Higher tolerance means more points removed, lower tolerance means less points removed.</p>\n","counter":0},{"syntax":"size()","name":"size","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>The number of points in the ofPolyline.</p>\n","desc":"","counter":0},{"syntax":"translate(&p)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"translate(&p)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"updateCache(bForceUpdate = false)","name":"updateCache","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bForceUpdate<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"wrapAngle(angleRad)","name":"wrapAngle","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angleRad","access":"private","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"name":"angles","type":"int","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"area","type":"float","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bCacheIsDirty","type":"bool","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bClosed","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bHasChanged","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"centroid2D","type":"T","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"circlePoints","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"curveVertices","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"lengths","type":"int","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"normals","type":"int","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"points","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"rightVector","type":"T","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"rotations","type":"int","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"tangents","type":"int","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofPolyline_</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: True_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>ofPolyLine allows you to combine multiple points into a single vector data object that can be drawn to the screen, manipulated point by point, and combined with other ofPolyline instances. It is less complex than the <a href=\"ofPath.html\">ofPath</a> and generally represents a single line or vector shape rather than multiple lines or shapes.</p>\n<p>You can add points to an ofPolyline by adding vertices. By default these vertices are ofVec3f types, meaning you also need to specify a z-value, even when drawing in 2D:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> TWO_PI<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// make a heart</span>\n\t<span class=\"token keyword\">float</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span>\n\tline<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofVec3f</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ti<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">0.005</span><span class=\"token operator\">*</span>HALF_PI<span class=\"token operator\">*</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// close the shape</span>\n</code></pre>\n<p>or you can draw lines or curves:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">&lt;</span> TWO_PI <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tangle <span class=\"token operator\">+</span><span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>ofPolyline also includes methods to get the closest point, determine whether a point is inside shape, and resample shapes. Along with the ofPath class, it's the best way to draw and manipulate 2D and 3D vector graphics that you'll need to update and manipulate frequently.</p>\n<p>If you use the lineTo or curveTo or bezierTo functions, you move the drawing point, so that drawing a line to 100,100 means a line from 0,0 to 100, 100. The next line would be a line from 100,100 to wherever you go next. Storing this position means that you can easily create continuous drawings without difficulty.</p>\n<p>##Methods</p>\n<p>###void addVertex(&amp;p)</p>\n<!--\n_syntax: addVertex(&p)_\n_name: addVertex_\n_returns: void_\n_returns_description: _\n_parameters: const T &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds a point using an T at the end of the ofPolyline.</p>\n<p>_description: _</p>\n<p>Adds a point using an ofPoint at the end of the ofPolyline.</p>\n<!----------------------------------------------------------------------------->\n<p>###void addVertex(x, y, z)</p>\n<!--\n_syntax: addVertex(x, y, z)_\n_name: addVertex_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds a point using floats at the end of the ofPolyline.</p>\n<p>_description: _</p>\n<p>Adds a point using floats instead of an ofPoint at the end of the ofPolyline.</p>\n<!----------------------------------------------------------------------------->\n<p>###void addVertices(&amp;verts)</p>\n<!--\n_syntax: addVertices(&verts)_\n_name: addVertices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< T > &verts_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Add multiple points at the end of the ofPolyline using a vector of\nT objects</p>\n<pre><code class=\"language-{.cpp}\">\t<span class=\"token comment\" spellcheck=\"true\">// make a pentagon</span>\n\t<span class=\"token keyword\">float</span> size <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> X1 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> X2 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> Y1 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> Y2 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\n\tvector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> verts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">{</span><span class=\"token operator\">-</span>X1<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>Y1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">{</span><span class=\"token operator\">-</span>X2<span class=\"token punctuation\">,</span> Y2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">{</span>X2<span class=\"token punctuation\">,</span> Y2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t\t<span class=\"token punctuation\">{</span>X1<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>Y1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tofPolyline p<span class=\"token punctuation\">;</span>\n\tp<span class=\"token punctuation\">.</span><span class=\"token function\">addVertices</span><span class=\"token punctuation\">(</span>verts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void addVertices(*verts, numverts)</p>\n<!--\n_syntax: addVertices(*verts, numverts)_\n_name: addVertices_\n_returns: void_\n_returns_description: _\n_parameters: const T *verts, int numverts_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds multiple points at the end of the ofPolyline using a pointer to\nan array of T objects.</p>\n<p>_description: _</p>\n<p>Adds multiple points at the end of the ofPolyline using a pointer to an array of ofPoint objects.</p>\n<pre><code class=\"language-{.cpp}\">ofPoint<span class=\"token operator\">*</span> verts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> ofPoint<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// make a pentagon</span>\n<span class=\"token keyword\">float</span> size <span class=\"token operator\">=</span> <span class=\"token number\">80</span><span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> X1 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> X2 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> Y1 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> Y2 <span class=\"token operator\">=</span> <span class=\"token number\">0.125</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">;</span>\nverts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nverts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>X1<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>Y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nverts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>X2<span class=\"token punctuation\">,</span> Y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nverts<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span>X2<span class=\"token punctuation\">,</span> Y2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nverts<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span>X1<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>Y1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofPolyline p<span class=\"token punctuation\">;</span>\np<span class=\"token punctuation\">.</span><span class=\"token function\">addVertices</span><span class=\"token punctuation\">(</span>verts<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void arc(&amp;center, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)</p>\n<!--\n_syntax: arc(&center, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const T &center, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds an arc around the T <code>center</code> with the width of\n<code>radiusX</code> and the height of <code>radiusY</code>.</p>\n<p>The <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles\nof the arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of\nline segments a circle would be drawn with. A partial arc will be\ndrawn with the same resolution: if circleResolution == 20, a half-\ncircle will be drawn with 10 segments.</p>\n<p>If there are already vertexes in the ofPolyline the arc will extend\nthem; a line will be created from the endmost point on the ofPolyline\nto the beginning point of the arc.</p>\n<pre><code class=\"language-{.cpp}\">ofPolyline polyline1<span class=\"token punctuation\">,</span> polyline2<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// draw an line, then an semi-circle in red</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nT <span class=\"token function\">point2</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>point2<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"graphics/ofpolyline_arc.jpg\" alt=\"Arc Example\"></p>\n<p>_description: _</p>\n<p>Draws an arc around the ofPoint <code>center</code> with the width of <code>radiusX</code> and the height of <code>radiusY</code>.\nThe <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of line segments a circle would be drawn with.\nA partial arc will be drawn with the same resolution: if circleResolution == 20, a half-circle will be drawn with 10 segments.</p>\n<p>If there are already vertices in the ofPolyline the arc will extend them;\na line will be created from the endmost point on the ofPolyline to the beginning point of the arc.</p>\n<p>Example:</p>\n<pre><code class=\"language-{.cpp}\">ofPolyline polyline1<span class=\"token punctuation\">,</span> polyline2<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// draw an circle with a diameter of 100 in blue</span>\nofPoint <span class=\"token function\">point1</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline1<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>point1<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">360</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>blue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline1<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// draw an line, then an semi-circle in red</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofPoint <span class=\"token function\">point2</span><span class=\"token punctuation\">(</span><span class=\"token number\">450</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span>point2<span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">180</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span>ofColor<span class=\"token operator\">::</span>red<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npolyline2<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"ofpolyline_arc.png\" alt=\"Arc Example\"></p>\n<!----------------------------------------------------------------------------->\n<p>###void arc(&amp;center, radiusX, radiusY, angleBegin, angleEnd, clockwise, circleResolution = 20)</p>\n<!--\n_syntax: arc(&center, radiusX, radiusY, angleBegin, angleEnd, clockwise, circleResolution = 20)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const T &center, float radiusX, float radiusY, float angleBegin, float angleEnd, bool clockwise, int circleResolution=20_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds an arc around the T <code>center</code> with the width of <code>radiusX</code>\nand the height of <code>radiusY</code> to the polyline.</p>\n<p>The <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of\nthe arc in degrees measured clockwise from the x-axis.</p>\n<p>The <code>clockwise</code> boolean sets the drawing direction.  Passing 'false' to\nit will draw the arc counter-clockwise.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of\nline segments a circle would be drawn with.</p>\n<p>If the arc doesn't start at the same point the last vertex finished a\nstraight line will be created to join both</p>\n<p>_description: _</p>\n<p>Draws an arc around the ofPoint <code>center</code> with the width of <code>radiusX</code> and the height of <code>radiusY</code>.\nThe <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.\nThe <code>clockwise</code> boolean sets the drawing direction.  Passing 'false' to it will draw the arc counter-clockwise.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of line segments a circle would be drawn with.</p>\n<!----------------------------------------------------------------------------->\n<p>###void arc(x, y, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)</p>\n<!--\n_syntax: arc(x, y, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds an arc around the coordinates (<code>x</code>,<code>y</code>) with the width of\n<code>radiusX</code> and the height of <code>radiusY</code>.</p>\n<p>The <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles\nof the arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number\nof line segments a circle would be drawn with.</p>\n<p>_description: _</p>\n<p>Draws an arc around the coordinates (<code>x</code>,<code>y</code>) with the width of <code>radiusX</code> and the height of <code>radiusY</code>.\nThe <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of line segments a circle would be drawn with.</p>\n<!----------------------------------------------------------------------------->\n<p>###void arc(x, y, z, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)</p>\n<!--\n_syntax: arc(x, y, z, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds an arc around the coordinates (<code>x</code>,<code>y</code>,<code>z</code>) with the width of\n<code>radiusX</code> and the height of <code>radiusY</code>.</p>\n<p>The <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of\nthe arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of\nline segments a circle would be drawn with.</p>\n<p>_description: _</p>\n<p>Draws an arc around the coordinates (<code>x</code>,<code>y</code>,<code>z</code>) with the width of <code>radiusX</code> and the height of <code>radiusY</code>.\nThe <code>angleBegin</code> and <code>angleEnd</code> indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.</p>\n<p>Optionally, you can specify <code>circleResolution</code>, which is the number of line segments a circle would be drawn with.</p>\n<!----------------------------------------------------------------------------->\n<p>###void arcNegative(&amp;center, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)</p>\n<!--\n_syntax: arcNegative(&center, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: const T &center, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void arcNegative(x, y, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)</p>\n<!--\n_syntax: arcNegative(x, y, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void arcNegative(x, y, z, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)</p>\n<!--\n_syntax: arcNegative(x, y, z, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###typename vector&lt; T &gt;::iterator begin()</p>\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: typename vector< T >::iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###typename vector&lt; T &gt;::const_iterator begin()</p>\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: typename vector< T >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void bezierTo(&amp;cp1, &amp;cp2, &amp;to, curveResolution = 20)</p>\n<!--\n_syntax: bezierTo(&cp1, &cp2, &to, curveResolution = 20)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const T &cp1, const T &cp2, const T &to, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by T cp1 and cp2, that ends at T\nto.</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"bezier.jpg\" alt=\"polyline bezier\">\nThe control points are shown in red.</p>\n<p>_description: _</p>\n<p>Creates a cubic bezier line from the current drawing point with the 2 control points indicated by ofPoint cp1 and cp2, that ends at ofPoint to. For instance, the following:</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Creates this:\n<img src=\"bezier.png\" alt=\"polyline bezier\">\nThe control points are shown in yellow.</p>\n<!----------------------------------------------------------------------------->\n<p>###void bezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution = 20)</p>\n<!--\n_syntax: bezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution = 20)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cx2, float cy2, float x, float y, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by the coordinates cx1, cy1 and cx2, cy2,\nthat ends at the coordinates x, y.</p>\n<p>_description: _</p>\n<p>Creates a cubic bezier line from the current drawing point with the 2 control points indicated by the coordinates cx1, cy1 and cx2, cy2, that ends at the coordinates x, y.</p>\n<!----------------------------------------------------------------------------->\n<p>###void bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution = 20)</p>\n<!--\n_syntax: bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution = 20)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cz1, float cx2, float cy2, float cz2, float x, float y, float z, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds a cubic bezier line in 3D space from the current drawing point\nwith the 2 control points indicated by the coordinates cx1, cy1, cz1\nand cx2, cy2, cz2, that ends at the coordinates x, y, z.</p>\n<p>_description: _</p>\n<p>Creates a cubic bezier line in 3D space from the current drawing point with the 2 control points indicated by the coordinates cx1, cy1, cz1 and cx2, cy2, cz2, that ends at the coordinates x, y, z.</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> cx <span class=\"token operator\">=</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> cy <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> step <span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> TWO_PI<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tline<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\tline<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span> cx <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token number\">-100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n\t\t\t\t\t   cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n\t\t\t\t\t   cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void calcData(index, &amp;tangent, &amp;angle, &amp;rotation, &amp;normal)</p>\n<!--\n_syntax: calcData(index, &tangent, &angle, &rotation, &normal)_\n_name: calcData_\n_returns: void_\n_returns_description: _\n_parameters: int index, T &tangent, float &angle, T &rotation, T &normal_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void clear()</p>\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Removes all the points from the ofPolyline.</p>\n<p>_description: _</p>\n<p>Removes all the points from the ofPolyline.</p>\n<!----------------------------------------------------------------------------->\n<p>###void close()</p>\n<!--\n_syntax: close()_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Closes the ofPolyline, meaning that all the vertices will be linked\nand can be &quot;walked&quot;.</p>\n<p>_description: _</p>\n<p>Closes the ofPolyline, meaning that all the vertices will be linked and can be &quot;walked&quot;.</p>\n<!----------------------------------------------------------------------------->\n<p>###void curveTo(&amp;to, curveResolution = 20)</p>\n<!--\n_syntax: curveTo(&to, curveResolution = 20)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: const T &to, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds a curve to an T object passed in</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">&lt;</span> TWO_PI <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tangle <span class=\"token operator\">+</span><span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>\\note You need at least 4 points to be able to use curveTo()</p>\n<p><strong>See also</strong>: <a href=\"http://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\">Catmull-Rom splines wiki</a></p>\n<p>_description: _</p>\n<p>Draws a curve to an ofPoint object passed in:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">&lt;</span> TWO_PI <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tb<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tangle <span class=\"token operator\">+</span><span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>You need at least 4 points to be able to draw with curveTo, here's an explanation of why this happens:</p>\n<p>If we have an empty <code>ofPolyline</code> <code>p</code>, and we do:</p>\n<pre><code>p.lineTo(v0); \np.lineTo(v1); \np.lineTo(v2); \np.lineTo(v3); \n</code></pre>\n<p>We end up with a line that starts at <code>v0</code>, heads to <code>v1</code>, then heads to <code>v2</code> and finally ends at <code>v3</code>.  But if we had instead done:</p>\n<pre><code>p.curveTo(v0); \np.curveTo(v1); \np.curveTo(v2); \np.curveTo(v3); \n</code></pre>\n<p>We end up with a curve that goes from <code>v1</code> to <code>v2</code>.  That might seem initially puzzling...</p>\n<p>So, we have to dive under the hood.  The <code>curveTo(...)</code> method makes Catmull-Rom splines <a href=\"http://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\">wiki</a>.  The relevant bit to understand is that this type of spline is defined by four points:</p>\n<p><img src=\"http://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Catmull-Rom_Spline.png/220px-Catmull-Rom_Spline.png\" alt=\"\"></p>\n<p>P1 and P2 are the endpoints of our curve, while P0 and P3 are the control that define the shape of the curve.</p>\n<p>When using <code>curveTo(...)</code> with <code>ofPolyline</code>, there's an internal vector that stores P0, P1, P2 and P3.  When our <code>ofPolyline</code> is empty then the internal vector is also empty.  When we call:</p>\n<pre><code>p.curveTo(v0); // Internal vector is [v0], so only P0 is defined \np.curveTo(v1); // Internal vector is [v0, v1], so only P0 and P1 are defined\np.curveTo(v2); // Internal vector is [v0, v1, v2], so only P0, P1 and P2 are defined\np.curveTo(v3); // Internal vector is [v0, v1, v2, v3], so all points are defined\n</code></pre>\n<p>Only once all of those points (P0 through P4) have been defined, then a spline has been fully defined and vertices can finally be added to our <code>ofPolyline</code>.  When <code>curveTo(v3)</code> is called above, then the curve between P1 (<code>v1</code>) and P2 (<code>v2</code>) is sampled (at a resolution defined by the optional parameter <code>curveResolution</code>).  That sampling slides along the curve and adds vertices to your <code>ofPolyline</code>.</p>\n<p>The curve doesn't start at <code>v0</code> and end at <code>v3</code> because those points are acting as the control points (i.e. the points connected by dotted lines in the image above).</p>\n<p>And now that we have P0 through P4 defined, when we call <code>curveTo(...)</code> next:</p>\n<pre><code>curveTo(v4); // Internal vector becomes [v1, v2, v3, v4]\n</code></pre>\n<p>The oldest point, <code>v0</code>, was bumped and everything shifted down.  The sampling occurs again, but this time it is between <code>v2</code> and <code>v3</code>.</p>\n<!----------------------------------------------------------------------------->\n<p>###void curveTo(x, y, z, curveResolution = 20)</p>\n<!--\n_syntax: curveTo(x, y, z, curveResolution = 20)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds a curve to the x,y,z points passed in with the optional\nresolution.</p>\n<p>_description: _</p>\n<p>Draws a curve to the x,y,z points passed in with the optional resolution.</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>angle <span class=\"token operator\">&lt;</span> TWO_PI <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpolyline<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tpolyline<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token operator\">*</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tangle <span class=\"token operator\">+</span><span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void draw()</p>\n<!--\n_syntax: draw()_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Draw the line using the current renderer</p>\n<p>_description: _</p>\n<p>Draw the line using the current renderer.</p>\n<!----------------------------------------------------------------------------->\n<p>###typename vector&lt; T &gt;::iterator end()</p>\n<!--\n_syntax: end()_\n_name: end_\n_returns: typename vector< T >::iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###typename vector&lt; T &gt;::const_iterator end()</p>\n<!--\n_syntax: end()_\n_name: end_\n_returns: typename vector< T >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void flagHasChanged()</p>\n<!--\n_syntax: flagHasChanged()_\n_name: flagHasChanged_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofPolyline_&lt; T &gt; fromRectangle(&amp;rect)</p>\n<!--\n_syntax: fromRectangle(&rect)_\n_name: fromRectangle_\n_returns: ofPolyline_< T >_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float getArea()</p>\n<!--\n_syntax: getArea()_\n_name: getArea_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Gets the precise area bounded by the line</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofRectangle getBoundingBox()</p>\n<!--\n_syntax: getBoundingBox()_\n_name: getBoundingBox_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the bounding box of the polyline , taking into account\nall the points to determine the extents of the polyline.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T getCentroid2D()</p>\n<!--\n_syntax: getCentroid2D()_\n_name: getCentroid2D_\n_returns: T_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the center of the area bounded by the line</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T getClosestPoint(&amp;target, *nearestIndex)</p>\n<!--\n_syntax: getClosestPoint(&target, *nearestIndex)_\n_name: getClosestPoint_\n_returns: T_\n_returns_description: _\n_parameters: const T &target, unsigned int *nearestIndex_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Gets the point on the line closest to the target. You can also\noptionally pass a pointer to/address of an unsigned int to get the\nindex of the closest vertex</p>\n<p>_description: _</p>\n<p>Returns the bounding box of the shape, taking into account all the points to determine the extents of the polyline.</p>\n<!----------------------------------------------------------------------------->\n<p>###float getDegreesAtIndex(index)</p>\n<!--\n_syntax: getDegreesAtIndex(index)_\n_name: getDegreesAtIndex_\n_returns: float_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get angle (degrees) of the path at index</p>\n<p>_description: _</p>\n<p>Get the center of the area bounded by the line.</p>\n<!----------------------------------------------------------------------------->\n<p>###float getDegreesAtIndexInterpolated(findex)</p>\n<!--\n_syntax: getDegreesAtIndexInterpolated(findex)_\n_name: getDegreesAtIndexInterpolated_\n_returns: float_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get angle (degrees) at interpolated index (interpolated between\nneighboring indices)</p>\n<p>_description: _</p>\n<p>This returns the point on the line closest to the target. You can also optionally pass a pointer to/address of an unsigned int to get the index of the closest vertex.</p>\n<!----------------------------------------------------------------------------->\n<p>###float getIndexAtLength(f)</p>\n<!--\n_syntax: getIndexAtLength(f)_\n_name: getIndexAtLength_\n_returns: float_\n_returns_description: _\n_parameters: float f_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get (interpolated) index at given length along the path</p>\n<p>Includes info on percentage along segment, e.g. <code>ret=5.75</code> =&gt;\n75% along the path between 5th and 6th points</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float getIndexAtPercent(f)</p>\n<!--\n_syntax: getIndexAtPercent(f)_\n_name: getIndexAtPercent_\n_returns: float_\n_returns_description: _\n_parameters: float f_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get (interpolated) index at given percentage along the path</p>\n<p>Includes info on percentage along segment, e.g. <code>ret=5.75</code>\n=&gt; 75% along the path between 5th and 6th points</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void getInterpolationParams(findex, &amp;i1, &amp;i2, &amp;t)</p>\n<!--\n_syntax: getInterpolationParams(findex, &i1, &i2, &t)_\n_name: getInterpolationParams_\n_returns: void_\n_returns_description: _\n_parameters: float findex, int &i1, int &i2, float &t_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float getLengthAtIndex(index)</p>\n<!--\n_syntax: getLengthAtIndex(index)_\n_name: getLengthAtIndex_\n_returns: float_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get length along path at index</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float getLengthAtIndexInterpolated(findex)</p>\n<!--\n_syntax: getLengthAtIndexInterpolated(findex)_\n_name: getLengthAtIndexInterpolated_\n_returns: float_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get length along path at interpolated index (e.g. <code>f=5.75</code> =&gt; 75% along\nthe path between 5th and 6th points)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T getNormalAtIndex(index)</p>\n<!--\n_syntax: getNormalAtIndex(index)_\n_name: getNormalAtIndex_\n_returns: T_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get normal vector at index</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T getNormalAtIndexInterpolated(findex)</p>\n<!--\n_syntax: getNormalAtIndexInterpolated(findex)_\n_name: getNormalAtIndexInterpolated_\n_returns: T_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get normal vector at interpolated index\n(interpolated between neighboring indices)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float getPerimeter()</p>\n<!--\n_syntax: getPerimeter()_\n_name: getPerimeter_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Gets the size of the perimeter of the polyline, good for\ndetermining length of the line, rather than just the bounding box\nshape.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T getPointAtIndexInterpolated(findex)</p>\n<!--\n_syntax: getPointAtIndexInterpolated(findex)_\n_name: getPointAtIndexInterpolated_\n_returns: T_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get point along the path at interpolated index (e.g. <code>f=5.75</code> =&gt;\n75% along the path between 5th and 6th points)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T getPointAtLength(f)</p>\n<!--\n_syntax: getPointAtLength(f)_\n_name: getPointAtLength_\n_returns: T_\n_returns_description: _\n_parameters: float f_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get point long the path at a given length (e.g. <code>f=150</code> =&gt; 150\nunits along the path)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T getPointAtPercent(f)</p>\n<!--\n_syntax: getPointAtPercent(f)_\n_name: getPointAtPercent_\n_returns: T_\n_returns_description: _\n_parameters: float f_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get point along the path at a given percentage (e.g. <code>f=0.25</code>\n=&gt; 25% along the path)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float getRadiansAtIndex(index)</p>\n<!--\n_syntax: getRadiansAtIndex(index)_\n_name: getRadiansAtIndex_\n_returns: float_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get angle (degrees) of the path at index</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float getRadiansAtIndexInterpolated(findex)</p>\n<!--\n_syntax: getRadiansAtIndexInterpolated(findex)_\n_name: getRadiansAtIndexInterpolated_\n_returns: float_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get angle (degrees) at interpolated index (interpolated between\nneighboring indices)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofPolyline_&lt; T &gt; getResampledByCount(count)</p>\n<!--\n_syntax: getResampledByCount(count)_\n_name: getResampledByCount_\n_returns: ofPolyline_< T >_\n_returns_description: _\n_parameters: int count_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Resamples the line based on the count passed in. The lower the\ncount passed in, the more points will be eliminated.</p>\n<p>This doesn't add new points to the line.</p>\n<p>_description: _</p>\n<p>This resamples the line based on the spacing passed in. The lower the count passed in, the more points will be eliminated. New points are added if necessary to match count.</p>\n<!----------------------------------------------------------------------------->\n<p>###ofPolyline_&lt; T &gt; getResampledBySpacing(spacing)</p>\n<!--\n_syntax: getResampledBySpacing(spacing)_\n_name: getResampledBySpacing_\n_returns: ofPolyline_< T >_\n_returns_description: _\n_parameters: float spacing_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Resamples the line based on the spacing passed in. The larger the\nspacing, the more points will be eliminated.</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">getResampledBySpacing</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"graphics/resample.jpg\" alt=\"polyline resample\"></p>\n<p>_description: _</p>\n<p>This resamples the line based on the spacing passed in. The larger the spacing, the more points will be eliminated.</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">getResampledBySpacing</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"resample.png\" alt=\"polyline resample\"></p>\n<!----------------------------------------------------------------------------->\n<p>###T getRightVector()</p>\n<!--\n_syntax: getRightVector()_\n_name: getRightVector_\n_returns: T_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T getRotationAtIndex(index)</p>\n<!--\n_syntax: getRotationAtIndex(index)_\n_name: getRotationAtIndex_\n_returns: T_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get rotation vector at index (magnitude is sine of angle)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T getRotationAtIndexInterpolated(findex)</p>\n<!--\n_syntax: getRotationAtIndexInterpolated(findex)_\n_name: getRotationAtIndexInterpolated_\n_returns: T_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get rotation vector at interpolated index\n(interpolated between neighboring indices) (magnitude is sine of angle)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofPolyline_&lt; T &gt; getSmoothed(smoothingSize, smoothingShape)</p>\n<!--\n_syntax: getSmoothed(smoothingSize, smoothingShape)_\n_name: getSmoothed_\n_returns: ofPolyline_< T >_\n_returns_description: _\n_parameters: int smoothingSize, float smoothingShape_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Gets a smoothed version of the ofPolyline.</p>\n<p><code>smoothingSize</code> is the size of the smoothing window. So if\n<code>smoothingSize</code> is 2, then 2 points from the left, 1 in the center,\nand 2 on the right (5 total) will be used for smoothing each point.\n<code>smoothingShape</code> describes whether to use a triangular window (0) or\nbox window (1) or something in between (for example, .5).</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T getTangentAtIndex(index)</p>\n<!--\n_syntax: getTangentAtIndex(index)_\n_name: getTangentAtIndex_\n_returns: T_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get tangent vector at index</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T getTangentAtIndexInterpolated(findex)</p>\n<!--\n_syntax: getTangentAtIndexInterpolated(findex)_\n_name: getTangentAtIndexInterpolated_\n_returns: T_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get tangent vector at interpolated index\n(interpolated between neighboring indices)</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; T &gt; &amp; getVertices()</p>\n<!--\n_syntax: getVertices()_\n_name: getVertices_\n_returns: vector< T > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Gets a vector of vertices that the line contains</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###const vector&lt; T &gt; &amp; getVertices()</p>\n<!--\n_syntax: getVertices()_\n_name: getVertices_\n_returns: const vector< T > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int getWrappedIndex(index)</p>\n<!--\n_syntax: getWrappedIndex(index)_\n_name: getWrappedIndex_\n_returns: int_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get wrapped index depending on whether poly is closed or not</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool hasChanged()</p>\n<!--\n_syntax: hasChanged()_\n_name: hasChanged_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns whether the vertices within the line have changed.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void insertVertex(&amp;p, index)</p>\n<!--\n_syntax: insertVertex(&p, index)_\n_name: insertVertex_\n_returns: void_\n_returns_description: _\n_parameters: const T &p, int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void insertVertex(x, y, z, index)</p>\n<!--\n_syntax: insertVertex(x, y, z, index)_\n_name: insertVertex_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool inside(&amp;p)</p>\n<!--\n_syntax: inside(&p)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: const T &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Tests whether the T is within a closed ofPolyline.</p>\n<p>_description: _</p>\n<p>Tests whether the ofPoint is within a closed ofPolyline.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool inside(&amp;p, &amp;polyline)</p>\n<!--\n_syntax: inside(&p, &polyline)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: const T &p, const ofPolyline_< T > &polyline_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Tests whether the T is within a closed ofPolyline.</p>\n<p>_description: _</p>\n<p>Test whether the ofPoint is within anothe polyline, passed in as ofPolyline&amp;</p>\n<!----------------------------------------------------------------------------->\n<p>###bool inside(x, y)</p>\n<!--\n_syntax: inside(x, y)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Tests whether the x,y coordinates are within a closed ofPolyline.</p>\n<p>_description: _</p>\n<p>Tests whether the x,y coordinates are within a closed ofPolyline.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool inside(x, y, &amp;polyline)</p>\n<!--\n_syntax: inside(x, y, &polyline)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: float x, float y, const ofPolyline_< T > &polyline_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Tests whether the x,y coordinates are within a closed ofPolyline.</p>\n<p>_description: _</p>\n<p>Test whether the x,y point is within anothe polyline, passed in as ofPolyline&amp;</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isClosed()</p>\n<!--\n_syntax: isClosed()_\n_name: isClosed_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void lineTo(&amp;to)</p>\n<!--\n_syntax: lineTo(&to)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: const T &to_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Add a straight line from the last point added, or from 0,0 if no point\nis set, to the point indicated by the T passesd in.</p>\n<p>_description: _</p>\n<p>Add a line from the last point added, or from 0,0 if no point is set, to the point indicated by the ofPoint passesd in.</p>\n<!----------------------------------------------------------------------------->\n<p>###void lineTo(x, y, z)</p>\n<!--\n_syntax: lineTo(x, y, z)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Add a straight line from the last point added, or from 0,0 if no point\nis set, to the point indicated by the floats x,y,z passesd in.</p>\n<p>_description: _</p>\n<p>Add a line from the last point added, or from 0,0 if no point is set, to the point indicated by the floats x,y,z passesd in.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofPolyline_(&amp;verts)</h3>\n<!--\n_syntax: ofPolyline_(&verts)_\n_name: ofPolyline__\n_returns: _\n_returns_description: _\n_parameters: const vector< T > &verts_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Creates an ofPolyline from a vector of ofVec2f or T objects.</p>\n<p>_description: _</p>\n<p>Creates an ofPolyline from a vector of ofVec2f or ofPoint objects.</p>\n<pre><code class=\"language-{.cpp}\">vector<span class=\"token operator\">&lt;</span>ofPoint<span class=\"token operator\">></span> pts<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> TWO_PI<span class=\"token operator\">+</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpts<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tj<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\tofPolyline <span class=\"token function\">cp</span><span class=\"token punctuation\">(</span>pts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>There is an easier way to draw circles though, using the arc() method.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofPolyline_()</h3>\n<!--\n_syntax: ofPolyline_()_\n_name: ofPolyline__\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Creates an ofPolyline.</p>\n<p>_description: _</p>\n<p>Creates an ofPolyline.</p>\n<!----------------------------------------------------------------------------->\n<p>###const T &amp; operator<a href=\"index\"></a></p>\n<!--\n_syntax: operator[](index)_\n_name: operator[]_\n_returns: const T &_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Allows you to access the points of the ofPolyline just like you would\nin an array, so to make the points of a line follow the mouse\nmovement, you could do:</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>bounds<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbounds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>bounds<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> bounds<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T &amp; operator<a href=\"index\"></a></p>\n<!--\n_syntax: operator[](index)_\n_name: operator[]_\n_returns: T &_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>The [] operator allows you to access the points of the ofPolyline just like you would in an array, so to make the points of a line follow the mouse movement, you could do:</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> i<span class=\"token operator\">&lt;</span>bounds<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> <span class=\"token function\">atan2</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> line<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n\tbounds<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>bounds<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> bounds<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>angle<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void quadBezierTo(&amp;p1, &amp;p2, &amp;p3, curveResolution = 20)</p>\n<!--\n_syntax: quadBezierTo(&p1, &p2, &p3, curveResolution = 20)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const T &p1, const T &p2, const T &p3, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds a quadratic bezier line in 2D space from the current drawing\npoint with the beginning indicated by the point p1, the control point\nat p2, and that ends at the point p3.</p>\n<p>_description: _</p>\n<p>Creates a quadratic bezier line in 2D space from the current drawing point with the beginning indicated by the point p1, the control point at p2, and that ends at the point p3.</p>\n<!----------------------------------------------------------------------------->\n<p>###void quadBezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution = 20)</p>\n<!--\n_syntax: quadBezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution = 20)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cx2, float cy2, float x, float y, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds a quadratic bezier line in 2D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, the\ncontrol point at cx2, cy2, and that ends at the coordinates x, y.</p>\n<p>_description: _</p>\n<p>Creates a quadratic bezier line in 3D space from the current drawing point with the beginning indicated by the coordinates cx1, cy1, the control point at cx2, cy2, and that ends at the coordinates x, y.</p>\n<!----------------------------------------------------------------------------->\n<p>###void quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution = 20)</p>\n<!--\n_syntax: quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution = 20)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cz1, float cx2, float cy2, float cz2, float x, float y, float z, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Adds a quadratic bezier line in 3D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, cz1,\nthe control point at cx2, cy2, cz2, and that ends at the coordinates\nx, y, z.</p>\n<p><img src=\"graphics/curves.png\" alt=\"polyline curves\"></p>\n<p>_description: _</p>\n<p>Creates a quadratic bezier line in 3D space from the current drawing point with the beginning indicated by the coordinates cx1, cy1, cz1, the control point at cx2, cy2, cz2, and that ends at the coordinates x, y, z.\n<img src=\"curves.png\" alt=\"polyline curves\"></p>\n<!----------------------------------------------------------------------------->\n<p>###typename vector&lt; T &gt;::reverse_iterator rbegin()</p>\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: typename vector< T >::reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###typename vector&lt; T &gt;::const_reverse_iterator rbegin()</p>\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: typename vector< T >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###typename vector&lt; T &gt;::reverse_iterator rend()</p>\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: typename vector< T >::reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###typename vector&lt; T &gt;::const_reverse_iterator rend()</p>\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: typename vector< T >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void resize(size)</p>\n<!--\n_syntax: resize(size)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: size_t size_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Resize the number of points in the ofPolyline to the value\npassed in.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rotateDeg(degrees, &amp;axis)</p>\n<!--\n_syntax: rotateDeg(degrees, &axis)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, const glm::vec3 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>}\n\\name Transform polyline\n{</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rotateDeg(degrees, &amp;axis)</p>\n<!--\n_syntax: rotateDeg(degrees, &axis)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, const glm::vec2 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rotateRad(radians, &amp;axis)</p>\n<!--\n_syntax: rotateRad(radians, &axis)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians, const glm::vec3 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rotateRad(radians, &amp;axis)</p>\n<!--\n_syntax: rotateRad(radians, &axis)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians, const glm::vec2 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void scale(x, y)</p>\n<!--\n_syntax: scale(x, y)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Change the size of the ofPolyline\nThese changes are non-reversible, so for instance\nscaling by 0,0 zeros out all data.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setCircleResolution(res)</p>\n<!--\n_syntax: setCircleResolution(res)_\n_name: setCircleResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>}</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setClosed(tf)</p>\n<!--\n_syntax: setClosed(tf)_\n_name: setClosed_\n_returns: void_\n_returns_description: _\n_parameters: bool tf_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Closes the ofPolyline, meaning that all the vertices will be linked\nand can be &quot;walked&quot;.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setRightVector(v)</p>\n<!--\n_syntax: setRightVector(v)_\n_name: setRightVector_\n_returns: void_\n_returns_description: _\n_parameters: T v_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void simplify(tolerance = 0.3f)</p>\n<!--\n_syntax: simplify(tolerance = 0.3f)_\n_name: simplify_\n_returns: void_\n_returns_description: _\n_parameters: float tolerance=0.3f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Simplifies the polyline, removing un-necessary vertices.</p>\n<p><strong>Parameters:</strong></p>\n<p>tolerance determines how dis-similar points need to be to stay in the line.\nHigher tolerance means more points removed, lower tolerance means less\npoints removed.</p>\n<p>_description: _</p>\n<p>Simplifies the polyline, removing un-necessary vertices. The tolerance determines how dis-similar points need to be to stay in the line. Higher tolerance means more points removed, lower tolerance means less points removed.</p>\n<!----------------------------------------------------------------------------->\n<p>###size_t size()</p>\n<!--\n_syntax: size()_\n_name: size_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>The number of points in the ofPolyline.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void translate(&amp;p)</p>\n<!--\n_syntax: translate(&p)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void translate(&amp;p)</p>\n<!--\n_syntax: translate(&p)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void updateCache(bForceUpdate = false)</p>\n<!--\n_syntax: updateCache(bForceUpdate = false)_\n_name: updateCache_\n_returns: void_\n_returns_description: _\n_parameters: bool bForceUpdate=false_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float wrapAngle(angleRad)</p>\n<!--\n_syntax: wrapAngle(angleRad)_\n_name: wrapAngle_\n_returns: float_\n_returns_description: _\n_parameters: float angleRad_\n_access: private_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###int angles</p>\n<!--\n_name: angles_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float area</p>\n<!--\n_name: area_\n_type: float_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool bCacheIsDirty</p>\n<!--\n_name: bCacheIsDirty_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool bClosed</p>\n<!--\n_name: bClosed_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool bHasChanged</p>\n<!--\n_name: bHasChanged_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T centroid2D</p>\n<!--\n_name: centroid2D_\n_type: T_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int circlePoints</p>\n<!--\n_name: circlePoints_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int curveVertices</p>\n<!--\n_name: curveVertices_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int lengths</p>\n<!--\n_name: lengths_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int normals</p>\n<!--\n_name: normals_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int points</p>\n<!--\n_name: points_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###T rightVector</p>\n<!--\n_name: rightVector_\n_type: T_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int rotations</p>\n<!--\n_name: rotations_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int tangents</p>\n<!--\n_name: tangents_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofPolyline_\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: True_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nofPolyLine allows you to combine multiple points into a single vector data object that can be drawn to the screen, manipulated point by point, and combined with other ofPolyline instances. It is less complex than the [ofPath](ofPath.html) and generally represents a single line or vector shape rather than multiple lines or shapes.\n\nYou can add points to an ofPolyline by adding vertices. By default these vertices are ofVec3f types, meaning you also need to specify a z-value, even when drawing in 2D:\n~~~~{.cpp}\nfloat i = 0;\nwhile (i < TWO_PI) { // make a heart\n\tfloat r = (2-2*sin(i) + sin(i)*sqrt(abs(cos(i))) / (sin(i)+1.4)) * -80;\n\tfloat x = ofGetWidth()/2 + cos(i) * r;\n\tfloat y = ofGetHeight()/2 + sin(i) * r;\n\tline.addVertex(ofVec3f(x,y,0));\n\ti+=0.005*HALF_PI*0.5;\n}\nline.close(); // close the shape\n~~~~\nor you can draw lines or curves:\n~~~~{.cpp}\nfloat angle = 0;\nwhile (angle < TWO_PI ) {\n\tb.curveTo(100*cos(angle), 0, 100*sin(angle));\n\tb.curveTo(300*cos(angle), 300, 300*sin(angle));\n\tangle += TWO_PI / 30;\n}\n~~~~\nofPolyline also includes methods to get the closest point, determine whether a point is inside shape, and resample shapes. Along with the ofPath class, it's the best way to draw and manipulate 2D and 3D vector graphics that you'll need to update and manipulate frequently.\n\nIf you use the lineTo or curveTo or bezierTo functions, you move the drawing point, so that drawing a line to 100,100 means a line from 0,0 to 100, 100. The next line would be a line from 100,100 to wherever you go next. Storing this position means that you can easily create continuous drawings without difficulty.\n\n\n\n\n\n##Methods\n\n\n\n###void addVertex(&p)\n\n<!--\n_syntax: addVertex(&p)_\n_name: addVertex_\n_returns: void_\n_returns_description: _\n_parameters: const T &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a point using an T at the end of the ofPolyline.\n\n\n\n\n\n_description: _\n\nAdds a point using an ofPoint at the end of the ofPolyline.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addVertex(x, y, z)\n\n<!--\n_syntax: addVertex(x, y, z)_\n_name: addVertex_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a point using floats at the end of the ofPolyline.\n\n\n\n\n\n_description: _\n\nAdds a point using floats instead of an ofPoint at the end of the ofPolyline.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addVertices(&verts)\n\n<!--\n_syntax: addVertices(&verts)_\n_name: addVertices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< T > &verts_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd multiple points at the end of the ofPolyline using a vector of\nT objects\n\n~~~~{.cpp}\n\t// make a pentagon\n\tfloat size = 80.f;\n\tfloat X1 = 0.125*sqrt(10 + 2*sqrt(5)) * size;\n\tfloat X2 = 0.125*sqrt(10 - 2*sqrt(5)) * size;\n\tfloat Y1 = 0.125*(sqrt(5) - 1) * size;\n\tfloat Y2 = 0.125*(sqrt(5) + 1) * size;\n\tvector<T> verts = {\n\t\t\t{0, -0.5 * size, 0.f),\n\t\t\t{-X1, -Y1, 0.f},\n\t\t\t{-X2, Y2, 0.f},\n\t\t\t{X2, Y2, 0.f},\n\t\t\t{X1, -Y1, 0.f},\n\t\t};\n\tofPolyline p;\n\tp.addVertices(verts);\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addVertices(*verts, numverts)\n\n<!--\n_syntax: addVertices(*verts, numverts)_\n_name: addVertices_\n_returns: void_\n_returns_description: _\n_parameters: const T *verts, int numverts_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds multiple points at the end of the ofPolyline using a pointer to\nan array of T objects.\n\n\n\n\n\n_description: _\n\nAdds multiple points at the end of the ofPolyline using a pointer to an array of ofPoint objects.\n~~~~{.cpp}\nofPoint* verts = new ofPoint[5];\n// make a pentagon\nfloat size = 80.f;\nfloat X1 = 0.125*sqrt(10 + 2*sqrt(5)) * size;\nfloat X2 = 0.125*sqrt(10 - 2*sqrt(5)) * size;\nfloat Y1 = 0.125*(sqrt(5) - 1) * size;\nfloat Y2 = 0.125*(sqrt(5) + 1) * size;\nverts[0] = ofPoint(0, -0.5 * size);\nverts[1] = ofPoint(-X1, -Y1);\nverts[2] = ofPoint(-X2, Y2);\nverts[3] = ofPoint(X2, Y2);\nverts[4] = ofPoint(X1, -Y1);\nofPolyline p;\np.addVertices(verts, 5);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arc(&center, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)\n\n<!--\n_syntax: arc(&center, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const T &center, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds an arc around the T `center` with the width of\n`radiusX` and the height of `radiusY`.\n\nThe `angleBegin` and `angleEnd` indicate the start and end angles\nof the arc in degrees measured clockwise from the x-axis.\n\nOptionally, you can specify `circleResolution`, which is the number of\nline segments a circle would be drawn with. A partial arc will be\ndrawn with the same resolution: if circleResolution == 20, a half-\ncircle will be drawn with 10 segments.\n\nIf there are already vertexes in the ofPolyline the arc will extend\nthem; a line will be created from the endmost point on the ofPolyline\nto the beginning point of the arc.\n\n~~~~{.cpp}\nofPolyline polyline1, polyline2;\n\n// draw an line, then an semi-circle in red\npolyline2.lineTo(300, 50);\nT point2(450,120);\npolyline2.arc(point2,100,100,0,180);\nofSetColor(ofColor::red);\npolyline2.draw();\n~~~~\n\n![Arc Example](graphics/ofpolyline_arc.jpg)\n\n\n\n\n\n_description: _\n\nDraws an arc around the ofPoint ``center`` with the width of ``radiusX`` and the height of ``radiusY``. \nThe ``angleBegin`` and ``angleEnd`` indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.\n\nOptionally, you can specify ``circleResolution``, which is the number of line segments a circle would be drawn with.\nA partial arc will be drawn with the same resolution: if circleResolution == 20, a half-circle will be drawn with 10 segments.\n\t\nIf there are already vertices in the ofPolyline the arc will extend them;\na line will be created from the endmost point on the ofPolyline to the beginning point of the arc.\n\nExample:\n~~~~{.cpp}\nofPolyline polyline1, polyline2;\n\n// draw an circle with a diameter of 100 in blue\nofPoint point1(150,120);\npolyline1.arc(point1,100,100,0,360);\nofSetColor(ofColor::blue);\npolyline1.draw();\n\n// draw an line, then an semi-circle in red\npolyline2.lineTo(300, 50);\nofPoint point2(450,120);\npolyline2.arc(point2,100,100,0,180);\nofSetColor(ofColor::red);\npolyline2.draw();\n~~~~\n\n![Arc Example](ofpolyline_arc.png)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arc(&center, radiusX, radiusY, angleBegin, angleEnd, clockwise, circleResolution = 20)\n\n<!--\n_syntax: arc(&center, radiusX, radiusY, angleBegin, angleEnd, clockwise, circleResolution = 20)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const T &center, float radiusX, float radiusY, float angleBegin, float angleEnd, bool clockwise, int circleResolution=20_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds an arc around the T `center` with the width of `radiusX`\nand the height of `radiusY` to the polyline.\n\nThe `angleBegin` and `angleEnd` indicate the start and end angles of\nthe arc in degrees measured clockwise from the x-axis.\n\nThe `clockwise` boolean sets the drawing direction.  Passing 'false' to\nit will draw the arc counter-clockwise.\n\nOptionally, you can specify `circleResolution`, which is the number of\nline segments a circle would be drawn with.\n\nIf the arc doesn't start at the same point the last vertex finished a\nstraight line will be created to join both\n\n\n\n\n\n_description: _\n\nDraws an arc around the ofPoint ``center`` with the width of ``radiusX`` and the height of ``radiusY``.\nThe ``angleBegin`` and ``angleEnd`` indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.\nThe ``clockwise`` boolean sets the drawing direction.  Passing 'false' to it will draw the arc counter-clockwise.\n\nOptionally, you can specify ``circleResolution``, which is the number of line segments a circle would be drawn with.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arc(x, y, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)\n\n<!--\n_syntax: arc(x, y, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds an arc around the coordinates (`x`,`y`) with the width of\n`radiusX` and the height of `radiusY`.\n\nThe `angleBegin` and `angleEnd` indicate the start and end angles\nof the arc in degrees measured clockwise from the x-axis.\n\nOptionally, you can specify `circleResolution`, which is the number\nof line segments a circle would be drawn with.\n\n\n\n\n\n_description: _\n\nDraws an arc around the coordinates (``x``,``y``) with the width of ``radiusX`` and the height of ``radiusY``.\nThe ``angleBegin`` and ``angleEnd`` indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.\n\nOptionally, you can specify ``circleResolution``, which is the number of line segments a circle would be drawn with.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arc(x, y, z, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)\n\n<!--\n_syntax: arc(x, y, z, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds an arc around the coordinates (`x`,`y`,`z`) with the width of\n`radiusX` and the height of `radiusY`.\n\nThe `angleBegin` and `angleEnd` indicate the start and end angles of\nthe arc in degrees measured clockwise from the x-axis.\n\nOptionally, you can specify `circleResolution`, which is the number of\nline segments a circle would be drawn with.\n\n\n\n\n\n_description: _\n\nDraws an arc around the coordinates (``x``,``y``,``z``) with the width of ``radiusX`` and the height of ``radiusY``.\nThe ``angleBegin`` and ``angleEnd`` indicate the start and end angles of the arc in degrees measured clockwise from the x-axis.\n\nOptionally, you can specify ``circleResolution``, which is the number of line segments a circle would be drawn with.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arcNegative(&center, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)\n\n<!--\n_syntax: arcNegative(&center, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: const T &center, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arcNegative(x, y, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)\n\n<!--\n_syntax: arcNegative(x, y, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arcNegative(x, y, z, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)\n\n<!--\n_syntax: arcNegative(x, y, z, radiusX, radiusY, angleBegin, angleEnd, circleResolution = 20)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radiusX, float radiusY, float angleBegin, float angleEnd, int circleResolution=20_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename vector< T >::iterator begin()\n\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: typename vector< T >::iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename vector< T >::const_iterator begin()\n\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: typename vector< T >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void bezierTo(&cp1, &cp2, &to, curveResolution = 20)\n\n<!--\n_syntax: bezierTo(&cp1, &cp2, &to, curveResolution = 20)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const T &cp1, const T &cp2, const T &to, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by T cp1 and cp2, that ends at T\nto.\n\n~~~~{.cpp}\nline.addVertex(T(200, 400));\nline.bezierTo(100, 100, 800, 100, 700, 400);\n~~~~\n![polyline bezier](bezier.jpg)\nThe control points are shown in red.\n\n\n\n\n\n_description: _\n\nCreates a cubic bezier line from the current drawing point with the 2 control points indicated by ofPoint cp1 and cp2, that ends at ofPoint to. For instance, the following:\n~~~~{.cpp}\nline.addVertex(ofPoint(200, 400));\nline.bezierTo(100, 100, 800, 100, 700, 400);\n~~~~\nCreates this:\n![polyline bezier](bezier.png)\nThe control points are shown in yellow.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void bezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution = 20)\n\n<!--\n_syntax: bezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution = 20)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cx2, float cy2, float x, float y, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by the coordinates cx1, cy1 and cx2, cy2,\nthat ends at the coordinates x, y.\n\n\n\n\n\n_description: _\n\nCreates a cubic bezier line from the current drawing point with the 2 control points indicated by the coordinates cx1, cy1 and cx2, cy2, that ends at the coordinates x, y.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution = 20)\n\n<!--\n_syntax: bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution = 20)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cz1, float cx2, float cy2, float cz2, float x, float y, float z, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a cubic bezier line in 3D space from the current drawing point\nwith the 2 control points indicated by the coordinates cx1, cy1, cz1\nand cx2, cy2, cz2, that ends at the coordinates x, y, z.\n\n\n\n\n\n_description: _\n\nCreates a cubic bezier line in 3D space from the current drawing point with the 2 control points indicated by the coordinates cx1, cy1, cz1 and cx2, cy2, cz2, that ends at the coordinates x, y, z.\n~~~~{.cpp}\nfloat cx = ofGetWidth()/2;\nfloat cy = 200;\nfloat step = TWO_PI / 60;\nfor (float i = 0.0; i < TWO_PI; i+=step) {\n\t\n\t\n\tif(i == 0.0) {\n\t\tline.addVertex(cx + (400*cos(i)), cy+400, 400 * sin(i));\n\t} else {\n\t\tline.bezierTo( cx - (200*cos(i)), cy-100, 400 * sin(i), \n\t\t\t\t\t   cx + (200*cos(i)), cy+600, 400 * sin(i), \n\t\t\t\t\t   cx + (400*cos(i)), cy+400, 400 * sin(i));\n\t}\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void calcData(index, &tangent, &angle, &rotation, &normal)\n\n<!--\n_syntax: calcData(index, &tangent, &angle, &rotation, &normal)_\n_name: calcData_\n_returns: void_\n_returns_description: _\n_parameters: int index, T &tangent, float &angle, T &rotation, T &normal_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemoves all the points from the ofPolyline.\n\n\n\n\n\n_description: _\n\nRemoves all the points from the ofPolyline.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void close()\n\n<!--\n_syntax: close()_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCloses the ofPolyline, meaning that all the vertices will be linked\nand can be \"walked\".\n\n\n\n\n\n_description: _\n\nCloses the ofPolyline, meaning that all the vertices will be linked and can be \"walked\".\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void curveTo(&to, curveResolution = 20)\n\n<!--\n_syntax: curveTo(&to, curveResolution = 20)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: const T &to, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a curve to an T object passed in\n\n~~~~{.cpp}\nfloat angle = 0;\nwhile (angle < TWO_PI ) {\n\tb.curveTo( T(100*cos(angle), 100*sin(angle)));\n\tb.curveTo( T(300*cos(angle), 300*sin(angle)));\n\tangle += TWO_PI / 30;\n}\n~~~~\n\n\\note You need at least 4 points to be able to use curveTo()\n\n**See also**: [Catmull-Rom splines wiki](http://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline)\n\n\n\n\n\n_description: _\n\nDraws a curve to an ofPoint object passed in:\n~~~~{.cpp}\nfloat angle = 0;\nwhile (angle < TWO_PI ) {\n\tb.curveTo( ofPoint(100*cos(angle), 100*sin(angle)));\n\tb.curveTo( ofPoint(300*cos(angle), 300*sin(angle)));\n\tangle += TWO_PI / 30;\n}\n~~~~\n\nYou need at least 4 points to be able to draw with curveTo, here's an explanation of why this happens:\n\nIf we have an empty `ofPolyline` `p`, and we do:\n\n    p.lineTo(v0); \n    p.lineTo(v1); \n    p.lineTo(v2); \n    p.lineTo(v3); \n\nWe end up with a line that starts at `v0`, heads to `v1`, then heads to `v2` and finally ends at `v3`.  But if we had instead done:\n\n    p.curveTo(v0); \n    p.curveTo(v1); \n    p.curveTo(v2); \n    p.curveTo(v3); \n\nWe end up with a curve that goes from `v1` to `v2`.  That might seem initially puzzling...\n\nSo, we have to dive under the hood.  The `curveTo(...)` method makes Catmull-Rom splines [wiki](http://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline).  The relevant bit to understand is that this type of spline is defined by four points:\n\n![](http://upload.wikimedia.org/wikipedia/commons/thumb/4/42/Catmull-Rom_Spline.png/220px-Catmull-Rom_Spline.png)\n\nP1 and P2 are the endpoints of our curve, while P0 and P3 are the control that define the shape of the curve.\n\nWhen using `curveTo(...)` with `ofPolyline`, there's an internal vector that stores P0, P1, P2 and P3.  When our `ofPolyline` is empty then the internal vector is also empty.  When we call:\n\n    p.curveTo(v0); // Internal vector is [v0], so only P0 is defined \n    p.curveTo(v1); // Internal vector is [v0, v1], so only P0 and P1 are defined\n    p.curveTo(v2); // Internal vector is [v0, v1, v2], so only P0, P1 and P2 are defined\n    p.curveTo(v3); // Internal vector is [v0, v1, v2, v3], so all points are defined\n\nOnly once all of those points (P0 through P4) have been defined, then a spline has been fully defined and vertices can finally be added to our `ofPolyline`.  When `curveTo(v3)` is called above, then the curve between P1 (`v1`) and P2 (`v2`) is sampled (at a resolution defined by the optional parameter `curveResolution`).  That sampling slides along the curve and adds vertices to your `ofPolyline`.  \n\nThe curve doesn't start at `v0` and end at `v3` because those points are acting as the control points (i.e. the points connected by dotted lines in the image above).\n\nAnd now that we have P0 through P4 defined, when we call `curveTo(...)` next:\n\n    curveTo(v4); // Internal vector becomes [v1, v2, v3, v4]\n\nThe oldest point, `v0`, was bumped and everything shifted down.  The sampling occurs again, but this time it is between `v2` and `v3`.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void curveTo(x, y, z, curveResolution = 20)\n\n<!--\n_syntax: curveTo(x, y, z, curveResolution = 20)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a curve to the x,y,z points passed in with the optional\nresolution.\n\n\n\n\n\n_description: _\n\nDraws a curve to the x,y,z points passed in with the optional resolution.\n~~~~{.cpp}\nfloat angle = 0;\nwhile (angle < TWO_PI ) {\n\tpolyline.curveTo(100*cos(angle), 0, 100*sin(angle));\n\tpolyline.curveTo(300*cos(angle), 300, 300*sin(angle));\n\tangle += TWO_PI / 30;\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw()\n\n<!--\n_syntax: draw()_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw the line using the current renderer\n\n\n\n\n\n_description: _\n\nDraw the line using the current renderer.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename vector< T >::iterator end()\n\n<!--\n_syntax: end()_\n_name: end_\n_returns: typename vector< T >::iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename vector< T >::const_iterator end()\n\n<!--\n_syntax: end()_\n_name: end_\n_returns: typename vector< T >::const_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void flagHasChanged()\n\n<!--\n_syntax: flagHasChanged()_\n_name: flagHasChanged_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPolyline_< T > fromRectangle(&rect)\n\n<!--\n_syntax: fromRectangle(&rect)_\n_name: fromRectangle_\n_returns: ofPolyline_< T >_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getArea()\n\n<!--\n_syntax: getArea()_\n_name: getArea_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the precise area bounded by the line\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle getBoundingBox()\n\n<!--\n_syntax: getBoundingBox()_\n_name: getBoundingBox_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the bounding box of the polyline , taking into account\nall the points to determine the extents of the polyline.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getCentroid2D()\n\n<!--\n_syntax: getCentroid2D()_\n_name: getCentroid2D_\n_returns: T_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the center of the area bounded by the line\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getClosestPoint(&target, *nearestIndex)\n\n<!--\n_syntax: getClosestPoint(&target, *nearestIndex)_\n_name: getClosestPoint_\n_returns: T_\n_returns_description: _\n_parameters: const T &target, unsigned int *nearestIndex_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the point on the line closest to the target. You can also\noptionally pass a pointer to/address of an unsigned int to get the\nindex of the closest vertex\n\n\n\n\n\n_description: _\n\nReturns the bounding box of the shape, taking into account all the points to determine the extents of the polyline.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getDegreesAtIndex(index)\n\n<!--\n_syntax: getDegreesAtIndex(index)_\n_name: getDegreesAtIndex_\n_returns: float_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet angle (degrees) of the path at index\n\n\n\n\n\n_description: _\n\nGet the center of the area bounded by the line.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getDegreesAtIndexInterpolated(findex)\n\n<!--\n_syntax: getDegreesAtIndexInterpolated(findex)_\n_name: getDegreesAtIndexInterpolated_\n_returns: float_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet angle (degrees) at interpolated index (interpolated between\nneighboring indices)\n\n\n\n\n\n_description: _\n\nThis returns the point on the line closest to the target. You can also optionally pass a pointer to/address of an unsigned int to get the index of the closest vertex.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getIndexAtLength(f)\n\n<!--\n_syntax: getIndexAtLength(f)_\n_name: getIndexAtLength_\n_returns: float_\n_returns_description: _\n_parameters: float f_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet (interpolated) index at given length along the path\n\nIncludes info on percentage along segment, e.g. `ret=5.75` =>\n75% along the path between 5th and 6th points\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getIndexAtPercent(f)\n\n<!--\n_syntax: getIndexAtPercent(f)_\n_name: getIndexAtPercent_\n_returns: float_\n_returns_description: _\n_parameters: float f_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet (interpolated) index at given percentage along the path\n\nIncludes info on percentage along segment, e.g. `ret=5.75`\n=> 75% along the path between 5th and 6th points\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void getInterpolationParams(findex, &i1, &i2, &t)\n\n<!--\n_syntax: getInterpolationParams(findex, &i1, &i2, &t)_\n_name: getInterpolationParams_\n_returns: void_\n_returns_description: _\n_parameters: float findex, int &i1, int &i2, float &t_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getLengthAtIndex(index)\n\n<!--\n_syntax: getLengthAtIndex(index)_\n_name: getLengthAtIndex_\n_returns: float_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet length along path at index\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getLengthAtIndexInterpolated(findex)\n\n<!--\n_syntax: getLengthAtIndexInterpolated(findex)_\n_name: getLengthAtIndexInterpolated_\n_returns: float_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet length along path at interpolated index (e.g. `f=5.75` => 75% along\nthe path between 5th and 6th points)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getNormalAtIndex(index)\n\n<!--\n_syntax: getNormalAtIndex(index)_\n_name: getNormalAtIndex_\n_returns: T_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet normal vector at index\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getNormalAtIndexInterpolated(findex)\n\n<!--\n_syntax: getNormalAtIndexInterpolated(findex)_\n_name: getNormalAtIndexInterpolated_\n_returns: T_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet normal vector at interpolated index\n(interpolated between neighboring indices)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getPerimeter()\n\n<!--\n_syntax: getPerimeter()_\n_name: getPerimeter_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets the size of the perimeter of the polyline, good for\ndetermining length of the line, rather than just the bounding box\nshape.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getPointAtIndexInterpolated(findex)\n\n<!--\n_syntax: getPointAtIndexInterpolated(findex)_\n_name: getPointAtIndexInterpolated_\n_returns: T_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet point along the path at interpolated index (e.g. `f=5.75` =>\n75% along the path between 5th and 6th points)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getPointAtLength(f)\n\n<!--\n_syntax: getPointAtLength(f)_\n_name: getPointAtLength_\n_returns: T_\n_returns_description: _\n_parameters: float f_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet point long the path at a given length (e.g. `f=150` => 150\nunits along the path)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getPointAtPercent(f)\n\n<!--\n_syntax: getPointAtPercent(f)_\n_name: getPointAtPercent_\n_returns: T_\n_returns_description: _\n_parameters: float f_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet point along the path at a given percentage (e.g. `f=0.25`\n=> 25% along the path)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getRadiansAtIndex(index)\n\n<!--\n_syntax: getRadiansAtIndex(index)_\n_name: getRadiansAtIndex_\n_returns: float_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet angle (degrees) of the path at index\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getRadiansAtIndexInterpolated(findex)\n\n<!--\n_syntax: getRadiansAtIndexInterpolated(findex)_\n_name: getRadiansAtIndexInterpolated_\n_returns: float_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet angle (degrees) at interpolated index (interpolated between\nneighboring indices)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPolyline_< T > getResampledByCount(count)\n\n<!--\n_syntax: getResampledByCount(count)_\n_name: getResampledByCount_\n_returns: ofPolyline_< T >_\n_returns_description: _\n_parameters: int count_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nResamples the line based on the count passed in. The lower the\ncount passed in, the more points will be eliminated.\n\nThis doesn't add new points to the line.\n\n\n\n\n\n_description: _\n\nThis resamples the line based on the spacing passed in. The lower the count passed in, the more points will be eliminated. New points are added if necessary to match count.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPolyline_< T > getResampledBySpacing(spacing)\n\n<!--\n_syntax: getResampledBySpacing(spacing)_\n_name: getResampledBySpacing_\n_returns: ofPolyline_< T >_\n_returns_description: _\n_parameters: float spacing_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nResamples the line based on the spacing passed in. The larger the\nspacing, the more points will be eliminated.\n\n~~~~{.cpp}\nline.draw();\nofTranslate(400, 0);\nline.getResampledBySpacing(100).draw();\n~~~~\n![polyline resample](graphics/resample.jpg)\n\n\n\n\n\n_description: _\n\nThis resamples the line based on the spacing passed in. The larger the spacing, the more points will be eliminated.\n~~~~{.cpp}\nline.draw();\nofTranslate(400, 0);\nline.getResampledBySpacing(100).draw();\n~~~~\n![polyline resample](resample.png)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getRightVector()\n\n<!--\n_syntax: getRightVector()_\n_name: getRightVector_\n_returns: T_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getRotationAtIndex(index)\n\n<!--\n_syntax: getRotationAtIndex(index)_\n_name: getRotationAtIndex_\n_returns: T_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet rotation vector at index (magnitude is sine of angle)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getRotationAtIndexInterpolated(findex)\n\n<!--\n_syntax: getRotationAtIndexInterpolated(findex)_\n_name: getRotationAtIndexInterpolated_\n_returns: T_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet rotation vector at interpolated index\n(interpolated between neighboring indices) (magnitude is sine of angle)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPolyline_< T > getSmoothed(smoothingSize, smoothingShape)\n\n<!--\n_syntax: getSmoothed(smoothingSize, smoothingShape)_\n_name: getSmoothed_\n_returns: ofPolyline_< T >_\n_returns_description: _\n_parameters: int smoothingSize, float smoothingShape_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets a smoothed version of the ofPolyline.\n\n`smoothingSize` is the size of the smoothing window. So if\n`smoothingSize` is 2, then 2 points from the left, 1 in the center,\nand 2 on the right (5 total) will be used for smoothing each point.\n`smoothingShape` describes whether to use a triangular window (0) or\nbox window (1) or something in between (for example, .5).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getTangentAtIndex(index)\n\n<!--\n_syntax: getTangentAtIndex(index)_\n_name: getTangentAtIndex_\n_returns: T_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet tangent vector at index\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getTangentAtIndexInterpolated(findex)\n\n<!--\n_syntax: getTangentAtIndexInterpolated(findex)_\n_name: getTangentAtIndexInterpolated_\n_returns: T_\n_returns_description: _\n_parameters: float findex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet tangent vector at interpolated index\n(interpolated between neighboring indices)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< T > & getVertices()\n\n<!--\n_syntax: getVertices()_\n_name: getVertices_\n_returns: vector< T > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGets a vector of vertices that the line contains\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const vector< T > & getVertices()\n\n<!--\n_syntax: getVertices()_\n_name: getVertices_\n_returns: const vector< T > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getWrappedIndex(index)\n\n<!--\n_syntax: getWrappedIndex(index)_\n_name: getWrappedIndex_\n_returns: int_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet wrapped index depending on whether poly is closed or not\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasChanged()\n\n<!--\n_syntax: hasChanged()_\n_name: hasChanged_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns whether the vertices within the line have changed.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void insertVertex(&p, index)\n\n<!--\n_syntax: insertVertex(&p, index)_\n_name: insertVertex_\n_returns: void_\n_returns_description: _\n_parameters: const T &p, int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void insertVertex(x, y, z, index)\n\n<!--\n_syntax: insertVertex(x, y, z, index)_\n_name: insertVertex_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, int index_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool inside(&p)\n\n<!--\n_syntax: inside(&p)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: const T &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTests whether the T is within a closed ofPolyline.\n\n\n\n\n\n_description: _\n\nTests whether the ofPoint is within a closed ofPolyline.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool inside(&p, &polyline)\n\n<!--\n_syntax: inside(&p, &polyline)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: const T &p, const ofPolyline_< T > &polyline_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTests whether the T is within a closed ofPolyline.\n\n\n\n\n\n_description: _\n\nTest whether the ofPoint is within anothe polyline, passed in as ofPolyline&\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool inside(x, y)\n\n<!--\n_syntax: inside(x, y)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTests whether the x,y coordinates are within a closed ofPolyline.\n\n\n\n\n\n_description: _\n\nTests whether the x,y coordinates are within a closed ofPolyline.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool inside(x, y, &polyline)\n\n<!--\n_syntax: inside(x, y, &polyline)_\n_name: inside_\n_returns: bool_\n_returns_description: _\n_parameters: float x, float y, const ofPolyline_< T > &polyline_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTests whether the x,y coordinates are within a closed ofPolyline.\n\n\n\n\n\n_description: _\n\nTest whether the x,y point is within anothe polyline, passed in as ofPolyline&\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isClosed()\n\n<!--\n_syntax: isClosed()_\n_name: isClosed_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void lineTo(&to)\n\n<!--\n_syntax: lineTo(&to)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: const T &to_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd a straight line from the last point added, or from 0,0 if no point\nis set, to the point indicated by the T passesd in.\n\n\n\n\n\n_description: _\n\nAdd a line from the last point added, or from 0,0 if no point is set, to the point indicated by the ofPoint passesd in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void lineTo(x, y, z)\n\n<!--\n_syntax: lineTo(x, y, z)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd a straight line from the last point added, or from 0,0 if no point\nis set, to the point indicated by the floats x,y,z passesd in.\n\n\n\n\n\n_description: _\n\nAdd a line from the last point added, or from 0,0 if no point is set, to the point indicated by the floats x,y,z passesd in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofPolyline_(&verts)\n\n<!--\n_syntax: ofPolyline_(&verts)_\n_name: ofPolyline__\n_returns: _\n_returns_description: _\n_parameters: const vector< T > &verts_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates an ofPolyline from a vector of ofVec2f or T objects.\n\n\n\n\n\n_description: _\n\nCreates an ofPolyline from a vector of ofVec2f or ofPoint objects.\n~~~~{.cpp}\nvector<ofPoint> pts;\n\tfloat j = 0;\n\twhile(j < TWO_PI+0.1) {\n\t\tpts.push_back( ofPoint(cos(j) * 100, sin(j) * 100));\n\t\tj+=0.1;\n\t}\n\tofPolyline cp(pts);\n~~~~\nThere is an easier way to draw circles though, using the arc() method.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofPolyline_()\n\n<!--\n_syntax: ofPolyline_()_\n_name: ofPolyline__\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates an ofPolyline.\n\n\n\n\n\n_description: _\n\nCreates an ofPolyline.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const T & operator[](index)\n\n<!--\n_syntax: operator[](index)_\n_name: operator[]_\n_returns: const T &_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAllows you to access the points of the ofPolyline just like you would\nin an array, so to make the points of a line follow the mouse\nmovement, you could do:\n\n~~~~{.cpp}\nline[0].set(mouseX, mouseY);\nint i = 1;\nwhile ( i<bounds.size()) {\n\tfloat angle = atan2(line[i-1].y - line[i].y, line[i-1].x - line[i].x);\n\tbounds[i].set(bounds[i-1].x - cos(angle) * 20, bounds[i-1].y - sin(angle) * 20);\n\ti++;\n}\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T & operator[](index)\n\n<!--\n_syntax: operator[](index)_\n_name: operator[]_\n_returns: T &_\n_returns_description: _\n_parameters: int index_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThe [] operator allows you to access the points of the ofPolyline just like you would in an array, so to make the points of a line follow the mouse movement, you could do:\n~~~~{.cpp}\nline[0].set(mouseX, mouseY);\nint i = 1;\nwhile ( i<bounds.size()) {\n\t\n\tfloat angle = atan2(line[i-1].y - line[i].y, line[i-1].x - line[i].x);  \n\tbounds[i].set(bounds[i-1].x - cos(angle) * 20, bounds[i-1].y - sin(angle) * 20);\n\t\n\ti++;\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void quadBezierTo(&p1, &p2, &p3, curveResolution = 20)\n\n<!--\n_syntax: quadBezierTo(&p1, &p2, &p3, curveResolution = 20)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const T &p1, const T &p2, const T &p3, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a quadratic bezier line in 2D space from the current drawing\npoint with the beginning indicated by the point p1, the control point\nat p2, and that ends at the point p3.\n\n\n\n\n\n_description: _\n\nCreates a quadratic bezier line in 2D space from the current drawing point with the beginning indicated by the point p1, the control point at p2, and that ends at the point p3.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void quadBezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution = 20)\n\n<!--\n_syntax: quadBezierTo(cx1, cy1, cx2, cy2, x, y, curveResolution = 20)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cx2, float cy2, float x, float y, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a quadratic bezier line in 2D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, the\ncontrol point at cx2, cy2, and that ends at the coordinates x, y.\n\n\n\n\n\n_description: _\n\nCreates a quadratic bezier line in 3D space from the current drawing point with the beginning indicated by the coordinates cx1, cy1, the control point at cx2, cy2, and that ends at the coordinates x, y.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution = 20)\n\n<!--\n_syntax: quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z, curveResolution = 20)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cz1, float cx2, float cy2, float cz2, float x, float y, float z, int curveResolution=20_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a quadratic bezier line in 3D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, cz1,\nthe control point at cx2, cy2, cz2, and that ends at the coordinates\nx, y, z.\n\n![polyline curves](graphics/curves.png)\n\n\n\n\n\n_description: _\n\nCreates a quadratic bezier line in 3D space from the current drawing point with the beginning indicated by the coordinates cx1, cy1, cz1, the control point at cx2, cy2, cz2, and that ends at the coordinates x, y, z.\n![polyline curves](curves.png)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename vector< T >::reverse_iterator rbegin()\n\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: typename vector< T >::reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename vector< T >::const_reverse_iterator rbegin()\n\n<!--\n_syntax: rbegin()_\n_name: rbegin_\n_returns: typename vector< T >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename vector< T >::reverse_iterator rend()\n\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: typename vector< T >::reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename vector< T >::const_reverse_iterator rend()\n\n<!--\n_syntax: rend()_\n_name: rend_\n_returns: typename vector< T >::const_reverse_iterator_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resize(size)\n\n<!--\n_syntax: resize(size)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: size_t size_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nResize the number of points in the ofPolyline to the value\npassed in.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateDeg(degrees, &axis)\n\n<!--\n_syntax: rotateDeg(degrees, &axis)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, const glm::vec3 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\\name Transform polyline\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateDeg(degrees, &axis)\n\n<!--\n_syntax: rotateDeg(degrees, &axis)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, const glm::vec2 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateRad(radians, &axis)\n\n<!--\n_syntax: rotateRad(radians, &axis)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians, const glm::vec3 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateRad(radians, &axis)\n\n<!--\n_syntax: rotateRad(radians, &axis)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians, const glm::vec2 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scale(x, y)\n\n<!--\n_syntax: scale(x, y)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nChange the size of the ofPolyline\nThese changes are non-reversible, so for instance\nscaling by 0,0 zeros out all data.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCircleResolution(res)\n\n<!--\n_syntax: setCircleResolution(res)_\n_name: setCircleResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setClosed(tf)\n\n<!--\n_syntax: setClosed(tf)_\n_name: setClosed_\n_returns: void_\n_returns_description: _\n_parameters: bool tf_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCloses the ofPolyline, meaning that all the vertices will be linked\nand can be \"walked\".\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRightVector(v)\n\n<!--\n_syntax: setRightVector(v)_\n_name: setRightVector_\n_returns: void_\n_returns_description: _\n_parameters: T v_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void simplify(tolerance = 0.3f)\n\n<!--\n_syntax: simplify(tolerance = 0.3f)_\n_name: simplify_\n_returns: void_\n_returns_description: _\n_parameters: float tolerance=0.3f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSimplifies the polyline, removing un-necessary vertices.\n\n\n**Parameters:**\n\ntolerance determines how dis-similar points need to be to stay in the line.\nHigher tolerance means more points removed, lower tolerance means less\npoints removed.\n\n\n\n\n\n_description: _\n\nSimplifies the polyline, removing un-necessary vertices. The tolerance determines how dis-similar points need to be to stay in the line. Higher tolerance means more points removed, lower tolerance means less points removed.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t size()\n\n<!--\n_syntax: size()_\n_name: size_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe number of points in the ofPolyline.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(&p)\n\n<!--\n_syntax: translate(&p)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(&p)\n\n<!--\n_syntax: translate(&p)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateCache(bForceUpdate = false)\n\n<!--\n_syntax: updateCache(bForceUpdate = false)_\n_name: updateCache_\n_returns: void_\n_returns_description: _\n_parameters: bool bForceUpdate=false_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float wrapAngle(angleRad)\n\n<!--\n_syntax: wrapAngle(angleRad)_\n_name: wrapAngle_\n_returns: float_\n_returns_description: _\n_parameters: float angleRad_\n_access: private_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###int angles\n\n<!--\n_name: angles_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float area\n\n<!--\n_name: area_\n_type: float_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bCacheIsDirty\n\n<!--\n_name: bCacheIsDirty_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bClosed\n\n<!--\n_name: bClosed_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bHasChanged\n\n<!--\n_name: bHasChanged_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T centroid2D\n\n<!--\n_name: centroid2D_\n_type: T_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int circlePoints\n\n<!--\n_name: circlePoints_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int curveVertices\n\n<!--\n_name: curveVertices_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int lengths\n\n<!--\n_name: lengths_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int normals\n\n<!--\n_name: normals_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int points\n\n<!--\n_name: points_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T rightVector\n\n<!--\n_name: rightVector_\n_type: T_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int rotations\n\n<!--\n_name: rotations_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int tangents\n\n<!--\n_name: tangents_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}