{"data":[{"page":{"entry":{"name":"ofTrueTypeFont","filename":"ofTrueTypeFont.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/graphics/ofTrueTypeFont.markdown","path":"/documentation/graphics/ofTrueTypeFont","route":"/documentation/graphics/ofTrueTypeFont.markdown","dir":"../ofSite/documentation/graphics","ext":"markdown","type":"page","id":2362,"parent":2325,"breadcrumbs":[2325,1968],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>The ofTrueTypeFont class provides an interface to load fonts into openFrameworks. The fonts are converted to textures, and can be drawn on screen. There are some options when you load the font - what size the font is rendered at, wether or not it is anti-aliased, and whether the font object will be the full character set or a subset (i.e., extended ASCII, which can include diacritics like umlauts, or ASCII). The default is anti-aliased, non-full character set. The library uses freetype, which has certain patent problems in regards to true type hinting, especially at small sizes, so non-anti-aliased type doesn't always render beautifully. But we find it quite adequate, and at larger sizes it seems to works well.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"createStringMesh(&s, x, y, vFlipped)","name":"createStringMesh","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlipped","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This function, which is used internally, builds a mesh representation of the font.  This function is used by ofTrueTypeFont::getStringMesh().</p>\n","counter":0},{"syntax":"drawChar(c, x, y, vFlipped)","name":"drawChar","returns":"void","returns_description":null,"parameters":"uint32_t c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlipped","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This function draws a character at position x,y.  It uses the texture representation of the font.</p>\n","counter":0},{"syntax":"drawCharAsShape(c, x, y, vFlipped, filled)","name":"drawCharAsShape","returns":"void","returns_description":null,"parameters":"uint32_t c<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vFlipped<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> filled","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This function draws a character at position x,y.  It uses the path of the font, which involves</p>\n","counter":0},{"syntax":"drawString(&s, x, y)","name":"drawString","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a string s at position x,y</p>\n<p><strong>Parameters:</strong></p>\n<p>s String to draw</p>\n<p>x X position of string</p>\n<p>y Y position of string</p>\n","desc":"<p>Draws a string with that typeface, on screen, at point(x,y). For example, you can write some text on screen like this:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// in the h file:</span>\nofTrueTypeFont myfont<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// in setup:</span>\nmyfont<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arial.ttf\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// in draw:</span>\nmyfont<span class=\"token punctuation\">.</span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi!!\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Your strings can even be multiline:</p>\n<pre><code class=\"language-{.cpp}\">\nmyfont<span class=\"token punctuation\">.</span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a test of\\nmultiline text\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Or:</p>\n<pre><code class=\"language-{.cpp}\">\nmyfont<span class=\"token punctuation\">.</span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span>R\"<span class=\"token punctuation\">(</span>a test of\nmultiline text<span class=\"token punctuation\">)</span>\"<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>you can also using dynamically gengerated strings. For example, to print the frame rate:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token keyword\">char</span> fpsStr<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// an array of chars</span>\n<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>fpsStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"frame rate: %f\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetFrameRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyfont<span class=\"token punctuation\">.</span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span>fpsStr<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","counter":0},{"syntax":"drawStringAsShapes(&s, x, y)","name":"drawStringAsShapes","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws the string as if it was geometrical shapes.</p>\n<p>Uses the information contained in ofTTFContour and ofTTFCharacter.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position of shapes</p>\n<p>y Y position of shapes</p>\n","desc":"<p>drawStringAsShapes function draws the s string as if it was a geometrical shapes using the information contained in ofTTFContour and ofTTFCharacter. Parameters x and y sets the position of the shape.</p>\n","counter":0},{"syntax":"finishLibraries()","name":"finishLibraries","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getAscenderHeight()","name":"getAscenderHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the ascender distance for this font.</p>\n<p>The ascender is the vertical distance from the baseline to the highest &quot;character&quot; coordinate.\nThe meaning of &quot;character&quot; coordinate depends on the font. Some fonts take accents into account,\nothers do not, and still others define it simply to be the highest coordinate over all glyphs.</p>\n<p><strong>Returns</strong>: the font ascender height in pixels.</p>\n","desc":"","counter":0},{"syntax":"getCharacterAsPoints(character, vflip = true, filled = true)","name":"getCharacterAsPoints","returns":"ofPath","returns_description":null,"parameters":"uint32_t character<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> filled<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\todo</p>\n","desc":"","counter":0},{"syntax":"getDescenderHeight()","name":"getDescenderHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the descender distance for this font.</p>\n<p>The descender is the vertical distance from the baseline to the lowest &quot;character&quot; coordinate.\nThe meaning of &quot;character&quot; coordinate depends on the font. Some fonts take accents into account,\nothers do not, and still others define it simply to be the lowest coordinate over all glyphs.\nThis value will be negative for descenders below the baseline (which is typical).</p>\n<p><strong>Returns</strong>: the font descender height in pixels.</p>\n","desc":"","counter":0},{"syntax":"getFirstGlyphPosForTexture(&str, vflip)","name":"getFirstGlyphPosForTexture","returns":"glm::vec2","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getFontTexture()","name":"getFontTexture","returns":"const ofTexture &","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the texture (as a reference) that ofTrueTypeFont uses internally.  When you load in a font, it parses the ttf (or .otf) file and rasterizes it to a texture for fast drawing.  This gives you low level access to that texture.</p>\n","counter":0},{"syntax":"getGlyphBBox()","name":"getGlyphBBox","returns":"const ofRectangle &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the global bounding box for this font.</p>\n<p>The global bounding box is the rectangle inside of which all glyphs in the font can fit.\nGlyphs are drawn starting from (0,0) in the returned box (though note that the box can\nextend in any direction out from the origin).</p>\n<p><strong>Returns</strong>: the font descender height in pixels.</p>\n","desc":"","counter":0},{"syntax":"getGlyphProperties(glyph)","name":"getGlyphProperties","returns":"const ofTrueTypeFont::glyphProps &","returns_description":null,"parameters":"uint32_t glyph","access":"protected","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getKerning(c, prevC)","name":"getKerning","returns":"int","returns_description":null,"parameters":"uint32_t c<span class=\"token punctuation\">,</span> uint32_t prevC","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getLetterSpacing()","name":"getLetterSpacing","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns letter spacing of font object.</p>\n<p>You can control this by the ofTrueTypeFont::setLetterSpacing() function. 1.0 = default spacing,\nless then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.</p>\n<p><strong>Returns</strong>: the letter spacing of font object.</p>\n","desc":"<p>Returns the letter spacing of the font object.  You can control this by the ofTrueTypeFont::setLetterSpacing() function.  1.0 = default spacing, less then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.</p>\n","counter":0},{"syntax":"getLineHeight()","name":"getLineHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Computes line height based on font size.</p>\n<p><strong>Returns</strong>: the current line height.</p>\n","desc":"<p>The line height is computed, based on the font size, and can be adjusted. Useful if you are print multi-line text.  This function returns the current line height.</p>\n","counter":0},{"syntax":"getNumCharacters()","name":"getNumCharacters","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the number of characters in the loaded character set.</p>\n<p>If you allocate the font using different parameters, you can load in partial\nand full character sets, this helps you know how many characters it can represent.</p>\n<p><strong>Returns</strong>: Number of characters in loaded character set.</p>\n","desc":"<p>Returns the number of characters this font represents.  If you allocate the font using different parameters, you can load in partial and full character sets, this helps you know how many characters it can represent.</p>\n","counter":0},{"syntax":"getSize()","name":"getSize","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the size of the font.</p>\n<p><strong>Returns</strong>: Size of font, set when font was loaded.</p>\n","desc":"<p>Returns the size of the font.  This is set when you load in the font.</p>\n","counter":0},{"syntax":"getSpaceSize()","name":"getSpaceSize","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a variable that represents how wide spaces are.</p>\n<p>It's a scalar for the width of the letter 'p', so 1.0 means that a space will be the size of the lower\ncase 'p' of that font. 2.0 means that it's 2 times the size of the lower case 'p', etc.</p>\n<p><strong>Returns</strong>: the width of the space.</p>\n","desc":"<p>This is a variable to represent how wide spaces are sized.   It's a scalar for the width of the letter 'p', so 1.0 means that a space will be the size of the lower case 'p' of that font.  2.0 means that it's 2 times the size of the lower case 'p', etc.</p>\n","counter":0},{"syntax":"getStringAsPoints()","name":"getStringAsPoints","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This returns a vector of ofTTFCharacters (which is actually an ofPath) for a given string.  This means you can get access to the point data / outlines of the letter forms.</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofBackground</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    font<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vag.ttf\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// get the string as paths</span>\n    <span class=\"token keyword\">bool</span> vflip <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// OF flips y coordinate in the default perspective, </span>\n                       <span class=\"token comment\" spellcheck=\"true\">// should be false if using a camera for example</span>\n    <span class=\"token keyword\">bool</span> filled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// or false for contours</span>\n    vector <span class=\"token operator\">&lt;</span> ofPath </code></pre>\n","counter":0},{"syntax":"getStringBoundingBox(&s, x, y, vflip = true)","name":"getStringBoundingBox","returns":"ofRectangle","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the bounding box of a string as a rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The string to get bounding box of.</p>\n<p>x X position of returned rectangle.</p>\n<p>y Y position of returned rectangle.</p>\n<p><strong>Returns</strong>: the bounding box of a string as a rectangle.</p>\n","desc":"<p>Returns the bounding box of a string as a rectangle, useful if you want to position the type or calculate the size of graphics that relate to the font.</p>\n<p>e.g:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">//in setup()</span>\n\nfranklinBook<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"frabk.ttf\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//in update()</span>\n\n<span class=\"token keyword\">char</span> tempString<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nofRectangle rect <span class=\"token operator\">=</span> franklinBook<span class=\"token punctuation\">.</span><span class=\"token function\">getStringBoundingBox</span><span class=\"token punctuation\">(</span>tempString<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//in draw</span>\n\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xcccccc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","counter":0},{"syntax":"getStringMesh(&s, x, y, vflip = true)","name":"getStringMesh","returns":"const ofMesh &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the string as an ofMesh.   Note: this is a mesh that contains vertices and texture coordinates for the textured font, not the points of the font that are returned via any of the get points functions.</p>\n","counter":0},{"syntax":"getStringTexture(&s, vflip = true)","name":"getStringTexture","returns":"ofTexture","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> vflip<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"hasFullCharacterSet()","name":"hasFullCharacterSet","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Does the font have a full character set?</p>\n<p><strong>Returns</strong>: true if the font was allocated with a full character set.</p>\n","desc":"<p>Returns true or false if this font was allocated with a full character set.</p>\n","counter":0},{"syntax":"indexForGlyph(glyph)","name":"indexForGlyph","returns":"size_t","returns_description":null,"parameters":"uint32_t glyph","access":"protected","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"initLibraries()","name":"initLibraries","returns":"bool","returns_description":null,"parameters":null,"access":"private","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"isAntiAliased()","name":"isAntiAliased","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Is the font anti-aliased?</p>\n<p><strong>Returns</strong>: true if the font was set to be anti-aliased.</p>\n","desc":"<p>Returns true of false if the font is set to be anti-aliased.  This is set when you load.</p>\n","counter":0},{"syntax":"isLoaded()","name":"isLoaded","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Has the font been loaded successfully?</p>\n<p><strong>Returns</strong>: true if the font was loaded.</p>\n","desc":"<p>Returns true or false if the font is loaded properly.</p>\n","counter":0},{"syntax":"isValidGlyph(uint32_t)","name":"isValidGlyph","returns":"bool","returns_description":null,"parameters":"uint32_t ","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"short":"","desc":""},{"syntax":"load(&filename, fontsize, _bAntiAliased = true, _bFullCharacterSet = true, makeContours = false, simplifyAmt = 0.3f, dpi = 0)","name":"load","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>filename<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> fontsize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> _bAntiAliased<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> _bFullCharacterSet<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> makeContours<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> simplifyAmt<span class=\"token operator\">=</span><span class=\"token number\">0.3f</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> dpi<span class=\"token operator\">=</span><span class=\"token number\">0</span>","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Loads the font specified by filename, allows you to control size, aliasing, and other parameters.</p>\n<p>loads a font, and allows you to set the following parameters: the filename, the size, if the font is anti-aliased,\nif it has a full character set, if you need it to have contours (for getStringPoints) and parameters that control\nthe simplification amount for those contours and the dpi of the font.</p>\n<p>default (without dpi), non-full char set, anti aliased, 96 dpi</p>\n<p><strong>Parameters:</strong></p>\n<p>filename The name of the font file to load.</p>\n<p>fontsize The size in pixels to load the font.</p>\n<p>_bAntiAliased true if the font should be anti-aliased.</p>\n<p>_bFullCharacterSet true if the full character set should be cached.</p>\n<p>makeControus true if the vector contours should be cached.</p>\n<p>simplifyAmt the amount to simplify the vector contours.  Larger number means more simplified.</p>\n<p>dpi the dots per inch used to specify rendering size.</p>\n<p><strong>Returns</strong>: true if the font was loaded correctly.</p>\n","desc":"","counter":1},{"syntax":"load(&settings)","name":"load","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofTrueTypeFontSettings <span class=\"token operator\">&amp;</span>settings","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"loadGlyph(utf8)","name":"loadGlyph","returns":"ofTrueTypeFont::glyph","returns_description":null,"parameters":"uint32_t utf8","access":"protected","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofTrueTypeFont(&&mom)","name":"ofTrueTypeFont","returns":null,"returns_description":null,"parameters":"ofTrueTypeFont <span class=\"token operator\">&amp;&amp;</span>mom","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":2},{"syntax":"ofTrueTypeFont(&mom)","name":"ofTrueTypeFont","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofTrueTypeFont <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofTrueTypeFont()","name":"ofTrueTypeFont","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"<p>Construct a default ofTrueTypeFont.</p>\n","desc":""},{"syntax":"operator=(&&mom)","name":"operator=","returns":"ofTrueTypeFont &","returns_description":null,"parameters":"ofTrueTypeFont <span class=\"token operator\">&amp;&amp;</span>mom","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"operator=(&mom)","name":"operator=","returns":"ofTrueTypeFont &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofTrueTypeFont <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"reloadTextures()","name":"reloadTextures","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setDirection(direction)","name":"setDirection","returns":"void","returns_description":null,"parameters":"ofTrueTypeFontDirection direction","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: current font direction</p>\n","desc":"","counter":0},{"syntax":"setGlobalDpi(newDpi)","name":"setGlobalDpi","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> newDpi","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Set the default dpi for all typefaces.</p>\n","desc":"","counter":0},{"syntax":"setLetterSpacing(spacing)","name":"setLetterSpacing","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> spacing","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the letter spacing of the font object.</p>\n<p>1.0 = default spacing, less then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.</p>\n<p><strong>Parameters:</strong></p>\n<p>spacing Spacing of font object.</p>\n","desc":"<p>Sets the letter spacing of the font object.  1.0 = default spacing, less then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.</p>\n","counter":0},{"syntax":"setLineHeight(height)","name":"setLineHeight","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> height","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets line height for text drawn on screen.</p>\n<p>Note the line height is automatically computed based on the font size, when you load in the font.</p>\n<p><strong>Parameters:</strong></p>\n<p>height Line height for text drawn on screen.</p>\n","desc":"<p>Sets the line height for text that is drawn on screen.   Note the line height is automatically computed based on the font size, when you load in the font.</p>\n","counter":0},{"syntax":"setSpaceSize(size)","name":"setSpaceSize","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> size","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the size of the space ' ' character.</p>\n<p>This number, which defaults to 1.0, scales the width of the letter 'p' for the space.</p>\n<p><strong>Parameters:</strong></p>\n<p>size Scales the width of the letter 'p' for the space.</p>\n","desc":"<p>Sets the size of the space ' ' character.  This number, which defaults to 1.0, scales the width of the letter 'p' for the space.</p>\n","counter":0},{"syntax":"stringHeight(&s)","name":"stringHeight","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the string height.</p>\n<p>This is essentially the height component of the ofTrueTypeFont::getStringBoundingBox() rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The string to get the height of.</p>\n<p><strong>Returns</strong>: the string height.</p>\n","desc":"<p>Returns the string height.  This is essentially the height component of the ofTrueTypeFont::getStringBoundingBox() rectangle.</p>\n","counter":0},{"syntax":"stringWidth(&s)","name":"stringWidth","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the string width.</p>\n<p>This is essentially the width component of the ofTrueTypeFont::getStringBoundingBox() rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The string to get the width of.</p>\n<p><strong>Returns</strong>: the string width.</p>\n","desc":"<p>Returns the string width.  This is essentially the width component of the ofTrueTypeFont::getStringBoundingBox() rectangle.</p>\n","counter":0},{"syntax":"unloadTextures()","name":"unloadTextures","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"~ofTrueTypeFont()","name":"~ofTrueTypeFont","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"<p>Destroy the ofTrueTypeFont.</p>\n","desc":"<p>The destructor for the font object will clear the resources, such as textures, that have been allocated.</p>\n","counter":0},{"name":"ascenderHeight","type":"float","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bLoadedOk","type":"bool","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>\\cond INTERNAL</p>\n","desc":"<p>bLoadedOk is a boolean variable containing true if the font was successfully loaded.</p>\n"},{"short":"","desc":""},{"short":"","desc":""},{"name":"charOutlinesNonVFlipped","type":"ofTTFCharacter","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"name":"cps","type":"charProps *","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"descenderHeight","type":"float","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"face","type":"FT_Face","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"fontUnitScale","type":"float","access":"protected","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"glyphBBox","type":"ofRectangle","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"glyphIndexMap","type":"int","access":"protected","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"invalidProps","type":"const ofTrueTypeFont::glyphProps","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"letterSpacing","type":"float","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"lineHeight","type":"float","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"settings","type":"ofTrueTypeFontSettings","access":"protected","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"spaceSize","type":"float","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"stringQuads","type":"ofMesh","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"texAtlas","type":"ofTexture","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofTrueTypeFont</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>The ofTrueTypeFont class provides an interface to load fonts into openFrameworks. The fonts are converted to textures, and can be drawn on screen. There are some options when you load the font - what size the font is rendered at, wether or not it is anti-aliased, and whether the font object will be the full character set or a subset (i.e., extended ASCII, which can include diacritics like umlauts, or ASCII). The default is anti-aliased, non-full character set. The library uses freetype, which has certain patent problems in regards to true type hinting, especially at small sizes, so non-anti-aliased type doesn't always render beautifully. But we find it quite adequate, and at larger sizes it seems to works well.</p>\n<p>##Methods</p>\n<p>###void createStringMesh(&amp;s, x, y, vFlipped)</p>\n<!--\n_syntax: createStringMesh(&s, x, y, vFlipped)_\n_name: createStringMesh_\n_returns: void_\n_returns_description: _\n_parameters: const string &s, float x, float y, bool vFlipped_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This function, which is used internally, builds a mesh representation of the font.  This function is used by ofTrueTypeFont::getStringMesh().</p>\n<!----------------------------------------------------------------------------->\n<p>###void drawChar(c, x, y, vFlipped)</p>\n<!--\n_syntax: drawChar(c, x, y, vFlipped)_\n_name: drawChar_\n_returns: void_\n_returns_description: _\n_parameters: uint32_t c, float x, float y, bool vFlipped_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This function draws a character at position x,y.  It uses the texture representation of the font.</p>\n<!----------------------------------------------------------------------------->\n<p>###void drawCharAsShape(c, x, y, vFlipped, filled)</p>\n<!--\n_syntax: drawCharAsShape(c, x, y, vFlipped, filled)_\n_name: drawCharAsShape_\n_returns: void_\n_returns_description: _\n_parameters: uint32_t c, float x, float y, bool vFlipped, bool filled_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This function draws a character at position x,y.  It uses the path of the font, which involves</p>\n<!----------------------------------------------------------------------------->\n<p>###void drawString(&amp;s, x, y)</p>\n<!--\n_syntax: drawString(&s, x, y)_\n_name: drawString_\n_returns: void_\n_returns_description: _\n_parameters: const string &s, float x, float y_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Draw a string s at position x,y</p>\n<p><strong>Parameters:</strong></p>\n<p>s String to draw</p>\n<p>x X position of string</p>\n<p>y Y position of string</p>\n<p>_description: _</p>\n<p>Draws a string with that typeface, on screen, at point(x,y). For example, you can write some text on screen like this:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">// in the h file:</span>\nofTrueTypeFont myfont<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// in setup:</span>\nmyfont<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"arial.ttf\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// in draw:</span>\nmyfont<span class=\"token punctuation\">.</span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi!!\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Your strings can even be multiline:</p>\n<pre><code class=\"language-{.cpp}\">\nmyfont<span class=\"token punctuation\">.</span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a test of\\nmultiline text\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Or:</p>\n<pre><code class=\"language-{.cpp}\">\nmyfont<span class=\"token punctuation\">.</span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span>R\"<span class=\"token punctuation\">(</span>a test of\nmultiline text<span class=\"token punctuation\">)</span>\"<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>you can also using dynamically gengerated strings. For example, to print the frame rate:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token keyword\">char</span> fpsStr<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// an array of chars</span>\n<span class=\"token function\">sprintf</span><span class=\"token punctuation\">(</span>fpsStr<span class=\"token punctuation\">,</span> <span class=\"token string\">\"frame rate: %f\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetFrameRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyfont<span class=\"token punctuation\">.</span><span class=\"token function\">drawString</span><span class=\"token punctuation\">(</span>fpsStr<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void drawStringAsShapes(&amp;s, x, y)</p>\n<!--\n_syntax: drawStringAsShapes(&s, x, y)_\n_name: drawStringAsShapes_\n_returns: void_\n_returns_description: _\n_parameters: const string &s, float x, float y_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Draws the string as if it was geometrical shapes.</p>\n<p>Uses the information contained in ofTTFContour and ofTTFCharacter.</p>\n<p><strong>Parameters:</strong></p>\n<p>x X position of shapes</p>\n<p>y Y position of shapes</p>\n<p>_description: _</p>\n<p>drawStringAsShapes function draws the s string as if it was a geometrical shapes using the information contained in ofTTFContour and ofTTFCharacter. Parameters x and y sets the position of the shape.</p>\n<!----------------------------------------------------------------------------->\n<p>###void finishLibraries()</p>\n<!--\n_syntax: finishLibraries()_\n_name: finishLibraries_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float getAscenderHeight()</p>\n<!--\n_syntax: getAscenderHeight()_\n_name: getAscenderHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the ascender distance for this font.</p>\n<p>The ascender is the vertical distance from the baseline to the highest &quot;character&quot; coordinate.\nThe meaning of &quot;character&quot; coordinate depends on the font. Some fonts take accents into account,\nothers do not, and still others define it simply to be the highest coordinate over all glyphs.</p>\n<p><strong>Returns</strong>: the font ascender height in pixels.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofPath getCharacterAsPoints(character, vflip = true, filled = true)</p>\n<!--\n_syntax: getCharacterAsPoints(character, vflip = true, filled = true)_\n_name: getCharacterAsPoints_\n_returns: ofPath_\n_returns_description: _\n_parameters: uint32_t character, bool vflip=true, bool filled=true_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\todo</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float getDescenderHeight()</p>\n<!--\n_syntax: getDescenderHeight()_\n_name: getDescenderHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the descender distance for this font.</p>\n<p>The descender is the vertical distance from the baseline to the lowest &quot;character&quot; coordinate.\nThe meaning of &quot;character&quot; coordinate depends on the font. Some fonts take accents into account,\nothers do not, and still others define it simply to be the lowest coordinate over all glyphs.\nThis value will be negative for descenders below the baseline (which is typical).</p>\n<p><strong>Returns</strong>: the font descender height in pixels.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::vec2 getFirstGlyphPosForTexture(&amp;str, vflip)</p>\n<!--\n_syntax: getFirstGlyphPosForTexture(&str, vflip)_\n_name: getFirstGlyphPosForTexture_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: const string &str, bool vflip_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###const ofTexture &amp; getFontTexture()</p>\n<!--\n_syntax: getFontTexture()_\n_name: getFontTexture_\n_returns: const ofTexture &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the texture (as a reference) that ofTrueTypeFont uses internally.  When you load in a font, it parses the ttf (or .otf) file and rasterizes it to a texture for fast drawing.  This gives you low level access to that texture.</p>\n<!----------------------------------------------------------------------------->\n<p>###const ofRectangle &amp; getGlyphBBox()</p>\n<!--\n_syntax: getGlyphBBox()_\n_name: getGlyphBBox_\n_returns: const ofRectangle &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the global bounding box for this font.</p>\n<p>The global bounding box is the rectangle inside of which all glyphs in the font can fit.\nGlyphs are drawn starting from (0,0) in the returned box (though note that the box can\nextend in any direction out from the origin).</p>\n<p><strong>Returns</strong>: the font descender height in pixels.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###const ofTrueTypeFont::glyphProps &amp; getGlyphProperties(glyph)</p>\n<!--\n_syntax: getGlyphProperties(glyph)_\n_name: getGlyphProperties_\n_returns: const ofTrueTypeFont::glyphProps &_\n_returns_description: _\n_parameters: uint32_t glyph_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int getKerning(c, prevC)</p>\n<!--\n_syntax: getKerning(c, prevC)_\n_name: getKerning_\n_returns: int_\n_returns_description: _\n_parameters: uint32_t c, uint32_t prevC_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float getLetterSpacing()</p>\n<!--\n_syntax: getLetterSpacing()_\n_name: getLetterSpacing_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns letter spacing of font object.</p>\n<p>You can control this by the ofTrueTypeFont::setLetterSpacing() function. 1.0 = default spacing,\nless then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.</p>\n<p><strong>Returns</strong>: the letter spacing of font object.</p>\n<p>_description: _</p>\n<p>Returns the letter spacing of the font object.  You can control this by the ofTrueTypeFont::setLetterSpacing() function.  1.0 = default spacing, less then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.</p>\n<!----------------------------------------------------------------------------->\n<p>###float getLineHeight()</p>\n<!--\n_syntax: getLineHeight()_\n_name: getLineHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Computes line height based on font size.</p>\n<p><strong>Returns</strong>: the current line height.</p>\n<p>_description: _</p>\n<p>The line height is computed, based on the font size, and can be adjusted. Useful if you are print multi-line text.  This function returns the current line height.</p>\n<!----------------------------------------------------------------------------->\n<p>###size_t getNumCharacters()</p>\n<!--\n_syntax: getNumCharacters()_\n_name: getNumCharacters_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the number of characters in the loaded character set.</p>\n<p>If you allocate the font using different parameters, you can load in partial\nand full character sets, this helps you know how many characters it can represent.</p>\n<p><strong>Returns</strong>: Number of characters in loaded character set.</p>\n<p>_description: _</p>\n<p>Returns the number of characters this font represents.  If you allocate the font using different parameters, you can load in partial and full character sets, this helps you know how many characters it can represent.</p>\n<!----------------------------------------------------------------------------->\n<p>###int getSize()</p>\n<!--\n_syntax: getSize()_\n_name: getSize_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the size of the font.</p>\n<p><strong>Returns</strong>: Size of font, set when font was loaded.</p>\n<p>_description: _</p>\n<p>Returns the size of the font.  This is set when you load in the font.</p>\n<!----------------------------------------------------------------------------->\n<p>###float getSpaceSize()</p>\n<!--\n_syntax: getSpaceSize()_\n_name: getSpaceSize_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns a variable that represents how wide spaces are.</p>\n<p>It's a scalar for the width of the letter 'p', so 1.0 means that a space will be the size of the lower\ncase 'p' of that font. 2.0 means that it's 2 times the size of the lower case 'p', etc.</p>\n<p><strong>Returns</strong>: the width of the space.</p>\n<p>_description: _</p>\n<p>This is a variable to represent how wide spaces are sized.   It's a scalar for the width of the letter 'p', so 1.0 means that a space will be the size of the lower case 'p' of that font.  2.0 means that it's 2 times the size of the lower case 'p', etc.</p>\n<!----------------------------------------------------------------------------->\n<p>###int getStringAsPoints()</p>\n<!--\n_syntax: getStringAsPoints()_\n_name: getStringAsPoints_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This returns a vector of ofTTFCharacters (which is actually an ofPath) for a given string.  This means you can get access to the point data / outlines of the letter forms.</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofBackground</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    font<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"vag.ttf\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> testApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// get the string as paths</span>\n    <span class=\"token keyword\">bool</span> vflip <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// OF flips y coordinate in the default perspective, </span>\n                       <span class=\"token comment\" spellcheck=\"true\">// should be false if using a camera for example</span>\n    <span class=\"token keyword\">bool</span> filled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// or false for contours</span>\n    vector <span class=\"token operator\">&lt;</span> ofPath <span class=\"token operator\">></span> paths <span class=\"token operator\">=</span> font<span class=\"token punctuation\">.</span><span class=\"token function\">getStringAsPoints</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello!\"</span><span class=\"token punctuation\">,</span> vflip<span class=\"token punctuation\">,</span> filled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">ofPushMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> paths<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// for every character break it out to polylines</span>\n\n        vector <span class=\"token operator\">&lt;</span>ofPolyline<span class=\"token operator\">></span> polylines <span class=\"token operator\">=</span> paths<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOutline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// for every polyline, draw every fifth point</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> polylines<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> polylines<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>         <span class=\"token comment\" spellcheck=\"true\">// draw every \"fifth\" point</span>\n                <span class=\"token function\">ofDrawCircle</span><span class=\"token punctuation\">(</span> polylines<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">ofPopMatrix</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###ofRectangle getStringBoundingBox(&amp;s, x, y, vflip = true)</p>\n<!--\n_syntax: getStringBoundingBox(&s, x, y, vflip = true)_\n_name: getStringBoundingBox_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: const string &s, float x, float y, bool vflip=true_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the bounding box of a string as a rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The string to get bounding box of.</p>\n<p>x X position of returned rectangle.</p>\n<p>y Y position of returned rectangle.</p>\n<p><strong>Returns</strong>: the bounding box of a string as a rectangle.</p>\n<p>_description: _</p>\n<p>Returns the bounding box of a string as a rectangle, useful if you want to position the type or calculate the size of graphics that relate to the font.</p>\n<p>e.g:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token comment\" spellcheck=\"true\">//in setup()</span>\n\nfranklinBook<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"frabk.ttf\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//in update()</span>\n\n<span class=\"token keyword\">char</span> tempString<span class=\"token punctuation\">[</span><span class=\"token number\">255</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nofRectangle rect <span class=\"token operator\">=</span> franklinBook<span class=\"token punctuation\">.</span><span class=\"token function\">getStringBoundingBox</span><span class=\"token punctuation\">(</span>tempString<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//in draw</span>\n\n<span class=\"token function\">ofSetColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xcccccc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">ofDrawRectangle</span><span class=\"token punctuation\">(</span>rect<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> rect<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###const ofMesh &amp; getStringMesh(&amp;s, x, y, vflip = true)</p>\n<!--\n_syntax: getStringMesh(&s, x, y, vflip = true)_\n_name: getStringMesh_\n_returns: const ofMesh &_\n_returns_description: _\n_parameters: const string &s, float x, float y, bool vflip=true_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the string as an ofMesh.   Note: this is a mesh that contains vertices and texture coordinates for the textured font, not the points of the font that are returned via any of the get points functions.</p>\n<!----------------------------------------------------------------------------->\n<p>###ofTexture getStringTexture(&amp;s, vflip = true)</p>\n<!--\n_syntax: getStringTexture(&s, vflip = true)_\n_name: getStringTexture_\n_returns: ofTexture_\n_returns_description: _\n_parameters: const string &s, bool vflip=true_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool hasFullCharacterSet()</p>\n<!--\n_syntax: hasFullCharacterSet()_\n_name: hasFullCharacterSet_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Does the font have a full character set?</p>\n<p><strong>Returns</strong>: true if the font was allocated with a full character set.</p>\n<p>_description: _</p>\n<p>Returns true or false if this font was allocated with a full character set.</p>\n<!----------------------------------------------------------------------------->\n<p>###size_t indexForGlyph(glyph)</p>\n<!--\n_syntax: indexForGlyph(glyph)_\n_name: indexForGlyph_\n_returns: size_t_\n_returns_description: _\n_parameters: uint32_t glyph_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool initLibraries()</p>\n<!--\n_syntax: initLibraries()_\n_name: initLibraries_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isAntiAliased()</p>\n<!--\n_syntax: isAntiAliased()_\n_name: isAntiAliased_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Is the font anti-aliased?</p>\n<p><strong>Returns</strong>: true if the font was set to be anti-aliased.</p>\n<p>_description: _</p>\n<p>Returns true of false if the font is set to be anti-aliased.  This is set when you load.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isLoaded()</p>\n<!--\n_syntax: isLoaded()_\n_name: isLoaded_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Has the font been loaded successfully?</p>\n<p><strong>Returns</strong>: true if the font was loaded.</p>\n<p>_description: _</p>\n<p>Returns true or false if the font is loaded properly.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isValidGlyph(uint32_t)</p>\n<!--\n_syntax: isValidGlyph(uint32_t)_\n_name: isValidGlyph_\n_returns: bool_\n_returns_description: _\n_parameters: uint32_t _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void iterateString(&amp;str, x, y, vFlipped, (uint32_t, f)</p>\n<!--\n_syntax: iterateString(&str, x, y, vFlipped, (uint32_t, f)_\n_name: iterateString_\n_returns: void_\n_returns_description: _\n_parameters: const string &str, float x, float y, bool vFlipped, function< void (uint32_t, glm::vec2) > f_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool load(&amp;filename, fontsize, _bAntiAliased = true, _bFullCharacterSet = true, makeContours = false, simplifyAmt = 0.3f, dpi = 0)</p>\n<!--\n_syntax: load(&filename, fontsize, _bAntiAliased = true, _bFullCharacterSet = true, makeContours = false, simplifyAmt = 0.3f, dpi = 0)_\n_name: load_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &filename, int fontsize, bool _bAntiAliased=true, bool _bFullCharacterSet=true, bool makeContours=false, float simplifyAmt=0.3f, int dpi=0_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Loads the font specified by filename, allows you to control size, aliasing, and other parameters.</p>\n<p>loads a font, and allows you to set the following parameters: the filename, the size, if the font is anti-aliased,\nif it has a full character set, if you need it to have contours (for getStringPoints) and parameters that control\nthe simplification amount for those contours and the dpi of the font.</p>\n<p>default (without dpi), non-full char set, anti aliased, 96 dpi</p>\n<p><strong>Parameters:</strong></p>\n<p>filename The name of the font file to load.</p>\n<p>fontsize The size in pixels to load the font.</p>\n<p>_bAntiAliased true if the font should be anti-aliased.</p>\n<p>_bFullCharacterSet true if the full character set should be cached.</p>\n<p>makeControus true if the vector contours should be cached.</p>\n<p>simplifyAmt the amount to simplify the vector contours.  Larger number means more simplified.</p>\n<p>dpi the dots per inch used to specify rendering size.</p>\n<p><strong>Returns</strong>: true if the font was loaded correctly.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool load(&amp;settings)</p>\n<!--\n_syntax: load(&settings)_\n_name: load_\n_returns: bool_\n_returns_description: _\n_parameters: const ofTrueTypeFontSettings &settings_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofTrueTypeFont::glyph loadGlyph(utf8)</p>\n<!--\n_syntax: loadGlyph(utf8)_\n_name: loadGlyph_\n_returns: ofTrueTypeFont::glyph_\n_returns_description: _\n_parameters: uint32_t utf8_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofTrueTypeFont(&amp;&amp;mom)</h3>\n<!--\n_syntax: ofTrueTypeFont(&&mom)_\n_name: ofTrueTypeFont_\n_returns: _\n_returns_description: _\n_parameters: ofTrueTypeFont &&mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofTrueTypeFont(&amp;mom)</h3>\n<!--\n_syntax: ofTrueTypeFont(&mom)_\n_name: ofTrueTypeFont_\n_returns: _\n_returns_description: _\n_parameters: const ofTrueTypeFont &mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofTrueTypeFont()</h3>\n<!--\n_syntax: ofTrueTypeFont()_\n_name: ofTrueTypeFont_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Construct a default ofTrueTypeFont.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofTrueTypeFont &amp; operator=(&amp;&amp;mom)</p>\n<!--\n_syntax: operator=(&&mom)_\n_name: operator=_\n_returns: ofTrueTypeFont &_\n_returns_description: _\n_parameters: ofTrueTypeFont &&mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofTrueTypeFont &amp; operator=(&amp;mom)</p>\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: ofTrueTypeFont &_\n_returns_description: _\n_parameters: const ofTrueTypeFont &mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void reloadTextures()</p>\n<!--\n_syntax: reloadTextures()_\n_name: reloadTextures_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setDirection(direction)</p>\n<!--\n_syntax: setDirection(direction)_\n_name: setDirection_\n_returns: void_\n_returns_description: _\n_parameters: ofTrueTypeFontDirection direction_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: current font direction</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setGlobalDpi(newDpi)</p>\n<!--\n_syntax: setGlobalDpi(newDpi)_\n_name: setGlobalDpi_\n_returns: void_\n_returns_description: _\n_parameters: int newDpi_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the default dpi for all typefaces.</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setLetterSpacing(spacing)</p>\n<!--\n_syntax: setLetterSpacing(spacing)_\n_name: setLetterSpacing_\n_returns: void_\n_returns_description: _\n_parameters: float spacing_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Sets the letter spacing of the font object.</p>\n<p>1.0 = default spacing, less then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.</p>\n<p><strong>Parameters:</strong></p>\n<p>spacing Spacing of font object.</p>\n<p>_description: _</p>\n<p>Sets the letter spacing of the font object.  1.0 = default spacing, less then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setLineHeight(height)</p>\n<!--\n_syntax: setLineHeight(height)_\n_name: setLineHeight_\n_returns: void_\n_returns_description: _\n_parameters: float height_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Sets line height for text drawn on screen.</p>\n<p>Note the line height is automatically computed based on the font size, when you load in the font.</p>\n<p><strong>Parameters:</strong></p>\n<p>height Line height for text drawn on screen.</p>\n<p>_description: _</p>\n<p>Sets the line height for text that is drawn on screen.   Note the line height is automatically computed based on the font size, when you load in the font.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setSpaceSize(size)</p>\n<!--\n_syntax: setSpaceSize(size)_\n_name: setSpaceSize_\n_returns: void_\n_returns_description: _\n_parameters: float size_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Sets the size of the space ' ' character.</p>\n<p>This number, which defaults to 1.0, scales the width of the letter 'p' for the space.</p>\n<p><strong>Parameters:</strong></p>\n<p>size Scales the width of the letter 'p' for the space.</p>\n<p>_description: _</p>\n<p>Sets the size of the space ' ' character.  This number, which defaults to 1.0, scales the width of the letter 'p' for the space.</p>\n<!----------------------------------------------------------------------------->\n<p>###float stringHeight(&amp;s)</p>\n<!--\n_syntax: stringHeight(&s)_\n_name: stringHeight_\n_returns: float_\n_returns_description: _\n_parameters: const string &s_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the string height.</p>\n<p>This is essentially the height component of the ofTrueTypeFont::getStringBoundingBox() rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The string to get the height of.</p>\n<p><strong>Returns</strong>: the string height.</p>\n<p>_description: _</p>\n<p>Returns the string height.  This is essentially the height component of the ofTrueTypeFont::getStringBoundingBox() rectangle.</p>\n<!----------------------------------------------------------------------------->\n<p>###float stringWidth(&amp;s)</p>\n<!--\n_syntax: stringWidth(&s)_\n_name: stringWidth_\n_returns: float_\n_returns_description: _\n_parameters: const string &s_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Returns the string width.</p>\n<p>This is essentially the width component of the ofTrueTypeFont::getStringBoundingBox() rectangle.</p>\n<p><strong>Parameters:</strong></p>\n<p>s The string to get the width of.</p>\n<p><strong>Returns</strong>: the string width.</p>\n<p>_description: _</p>\n<p>Returns the string width.  This is essentially the width component of the ofTrueTypeFont::getStringBoundingBox() rectangle.</p>\n<!----------------------------------------------------------------------------->\n<p>###void unloadTextures()</p>\n<!--\n_syntax: unloadTextures()_\n_name: unloadTextures_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>~ofTrueTypeFont()</h3>\n<!--\n_syntax: ~ofTrueTypeFont()_\n_name: ~ofTrueTypeFont_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Destroy the ofTrueTypeFont.</p>\n<p>_description: _</p>\n<p>The destructor for the font object will clear the resources, such as textures, that have been allocated.</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###float ascenderHeight</p>\n<!--\n_name: ascenderHeight_\n_type: float_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool bLoadedOk</p>\n<!--\n_name: bLoadedOk_\n_type: bool_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>\\cond INTERNAL</p>\n<p>_description: _</p>\n<p>bLoadedOk is a boolean variable containing true if the font was successfully loaded.</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; ofTTFCharacter &gt; charOutlines</p>\n<!--\n_name: charOutlines_\n_type: vector< ofTTFCharacter >_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; ofTTFCharacter &gt; charOutlinesContour</p>\n<!--\n_name: charOutlinesContour_\n_type: vector< ofTTFCharacter >_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofTTFCharacter charOutlinesNonVFlipped</p>\n<!--\n_name: charOutlinesNonVFlipped_\n_type: ofTTFCharacter_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###vector&lt; ofTTFCharacter &gt; charOutlinesNonVFlippedContour</p>\n<!--\n_name: charOutlinesNonVFlippedContour_\n_type: vector< ofTTFCharacter >_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###charProps * cps</p>\n<!--\n_name: cps_\n_type: charProps *_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float descenderHeight</p>\n<!--\n_name: descenderHeight_\n_type: float_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###FT_Face face</p>\n<!--\n_name: face_\n_type: FT_Face_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float fontUnitScale</p>\n<!--\n_name: fontUnitScale_\n_type: float_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofRectangle glyphBBox</p>\n<!--\n_name: glyphBBox_\n_type: ofRectangle_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int glyphIndexMap</p>\n<!--\n_name: glyphIndexMap_\n_type: int_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###const ofTrueTypeFont::glyphProps invalidProps</p>\n<!--\n_name: invalidProps_\n_type: const ofTrueTypeFont::glyphProps_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float letterSpacing</p>\n<!--\n_name: letterSpacing_\n_type: float_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float lineHeight</p>\n<!--\n_name: lineHeight_\n_type: float_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofTrueTypeFontSettings settings</p>\n<!--\n_name: settings_\n_type: ofTrueTypeFontSettings_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float spaceSize</p>\n<!--\n_name: spaceSize_\n_type: float_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMesh stringQuads</p>\n<!--\n_name: stringQuads_\n_type: ofMesh_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofTexture texAtlas</p>\n<!--\n_name: texAtlas_\n_type: ofTexture_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofTrueTypeFont\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nThe ofTrueTypeFont class provides an interface to load fonts into openFrameworks. The fonts are converted to textures, and can be drawn on screen. There are some options when you load the font - what size the font is rendered at, wether or not it is anti-aliased, and whether the font object will be the full character set or a subset (i.e., extended ASCII, which can include diacritics like umlauts, or ASCII). The default is anti-aliased, non-full character set. The library uses freetype, which has certain patent problems in regards to true type hinting, especially at small sizes, so non-anti-aliased type doesn't always render beautifully. But we find it quite adequate, and at larger sizes it seems to works well.\n\n\n\n\n\n##Methods\n\n\n\n###void createStringMesh(&s, x, y, vFlipped)\n\n<!--\n_syntax: createStringMesh(&s, x, y, vFlipped)_\n_name: createStringMesh_\n_returns: void_\n_returns_description: _\n_parameters: const string &s, float x, float y, bool vFlipped_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis function, which is used internally, builds a mesh representation of the font.  This function is used by ofTrueTypeFont::getStringMesh().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawChar(c, x, y, vFlipped)\n\n<!--\n_syntax: drawChar(c, x, y, vFlipped)_\n_name: drawChar_\n_returns: void_\n_returns_description: _\n_parameters: uint32_t c, float x, float y, bool vFlipped_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis function draws a character at position x,y.  It uses the texture representation of the font.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawCharAsShape(c, x, y, vFlipped, filled)\n\n<!--\n_syntax: drawCharAsShape(c, x, y, vFlipped, filled)_\n_name: drawCharAsShape_\n_returns: void_\n_returns_description: _\n_parameters: uint32_t c, float x, float y, bool vFlipped, bool filled_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis function draws a character at position x,y.  It uses the path of the font, which involves\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawString(&s, x, y)\n\n<!--\n_syntax: drawString(&s, x, y)_\n_name: drawString_\n_returns: void_\n_returns_description: _\n_parameters: const string &s, float x, float y_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a string s at position x,y\n\n**Parameters:**\n\ns String to draw\n\nx X position of string\n\ny Y position of string\n\n\n\n\n\n_description: _\n\nDraws a string with that typeface, on screen, at point(x,y). For example, you can write some text on screen like this:\n~~~~{.cpp}\n\n// in the h file:\nofTrueTypeFont myfont;\n.....\n\n// in setup:\nmyfont.load(\"arial.ttf\", 32);\n\n// in draw:\nmyfont.drawString(\"hi!!\", 100,100);\n~~~~\n\nYour strings can even be multiline:\n~~~~{.cpp}\n\nmyfont.drawString(\"a test of\\nmultiline text\", 300,300);\n~~~~\n\nOr:\n~~~~{.cpp}\n\nmyfont.drawString(R\"(a test of\nmultiline text)\", 300,300);\n~~~~\n\n\nyou can also using dynamically gengerated strings. For example, to print the frame rate:\n~~~~{.cpp}\n\nchar fpsStr[255]; // an array of chars\nsprintf(fpsStr, \"frame rate: %f\", ofGetFrameRate());\nmyfont.drawString(fpsStr, 100,100);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawStringAsShapes(&s, x, y)\n\n<!--\n_syntax: drawStringAsShapes(&s, x, y)_\n_name: drawStringAsShapes_\n_returns: void_\n_returns_description: _\n_parameters: const string &s, float x, float y_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws the string as if it was geometrical shapes.\n\nUses the information contained in ofTTFContour and ofTTFCharacter.\n\n\n**Parameters:**\n\nx X position of shapes\n\ny Y position of shapes\n\n\n\n\n\n_description: _\n\ndrawStringAsShapes function draws the s string as if it was a geometrical shapes using the information contained in ofTTFContour and ofTTFCharacter. Parameters x and y sets the position of the shape.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void finishLibraries()\n\n<!--\n_syntax: finishLibraries()_\n_name: finishLibraries_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getAscenderHeight()\n\n<!--\n_syntax: getAscenderHeight()_\n_name: getAscenderHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the ascender distance for this font.\n\nThe ascender is the vertical distance from the baseline to the highest \"character\" coordinate.\nThe meaning of \"character\" coordinate depends on the font. Some fonts take accents into account,\nothers do not, and still others define it simply to be the highest coordinate over all glyphs.\n\n\n**Returns**: the font ascender height in pixels.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPath getCharacterAsPoints(character, vflip = true, filled = true)\n\n<!--\n_syntax: getCharacterAsPoints(character, vflip = true, filled = true)_\n_name: getCharacterAsPoints_\n_returns: ofPath_\n_returns_description: _\n_parameters: uint32_t character, bool vflip=true, bool filled=true_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\todo\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getDescenderHeight()\n\n<!--\n_syntax: getDescenderHeight()_\n_name: getDescenderHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the descender distance for this font.\n\nThe descender is the vertical distance from the baseline to the lowest \"character\" coordinate.\nThe meaning of \"character\" coordinate depends on the font. Some fonts take accents into account,\nothers do not, and still others define it simply to be the lowest coordinate over all glyphs.\nThis value will be negative for descenders below the baseline (which is typical).\n\n\n**Returns**: the font descender height in pixels.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 getFirstGlyphPosForTexture(&str, vflip)\n\n<!--\n_syntax: getFirstGlyphPosForTexture(&str, vflip)_\n_name: getFirstGlyphPosForTexture_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: const string &str, bool vflip_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofTexture & getFontTexture()\n\n<!--\n_syntax: getFontTexture()_\n_name: getFontTexture_\n_returns: const ofTexture &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the texture (as a reference) that ofTrueTypeFont uses internally.  When you load in a font, it parses the ttf (or .otf) file and rasterizes it to a texture for fast drawing.  This gives you low level access to that texture.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofRectangle & getGlyphBBox()\n\n<!--\n_syntax: getGlyphBBox()_\n_name: getGlyphBBox_\n_returns: const ofRectangle &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the global bounding box for this font.\n\nThe global bounding box is the rectangle inside of which all glyphs in the font can fit.\nGlyphs are drawn starting from (0,0) in the returned box (though note that the box can\nextend in any direction out from the origin).\n\n\n**Returns**: the font descender height in pixels.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofTrueTypeFont::glyphProps & getGlyphProperties(glyph)\n\n<!--\n_syntax: getGlyphProperties(glyph)_\n_name: getGlyphProperties_\n_returns: const ofTrueTypeFont::glyphProps &_\n_returns_description: _\n_parameters: uint32_t glyph_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getKerning(c, prevC)\n\n<!--\n_syntax: getKerning(c, prevC)_\n_name: getKerning_\n_returns: int_\n_returns_description: _\n_parameters: uint32_t c, uint32_t prevC_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getLetterSpacing()\n\n<!--\n_syntax: getLetterSpacing()_\n_name: getLetterSpacing_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns letter spacing of font object.\n\nYou can control this by the ofTrueTypeFont::setLetterSpacing() function. 1.0 = default spacing,\nless then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.\n\n\n**Returns**: the letter spacing of font object.\n\n\n\n\n\n_description: _\n\nReturns the letter spacing of the font object.  You can control this by the ofTrueTypeFont::setLetterSpacing() function.  1.0 = default spacing, less then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getLineHeight()\n\n<!--\n_syntax: getLineHeight()_\n_name: getLineHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nComputes line height based on font size.\n\n**Returns**: the current line height.\n\n\n\n\n\n_description: _\n\nThe line height is computed, based on the font size, and can be adjusted. Useful if you are print multi-line text.  This function returns the current line height.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getNumCharacters()\n\n<!--\n_syntax: getNumCharacters()_\n_name: getNumCharacters_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the number of characters in the loaded character set.\n\nIf you allocate the font using different parameters, you can load in partial\nand full character sets, this helps you know how many characters it can represent.\n\n\n**Returns**: Number of characters in loaded character set.\n\n\n\n\n\n_description: _\n\nReturns the number of characters this font represents.  If you allocate the font using different parameters, you can load in partial and full character sets, this helps you know how many characters it can represent.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getSize()\n\n<!--\n_syntax: getSize()_\n_name: getSize_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the size of the font.\n\n**Returns**: Size of font, set when font was loaded.\n\n\n\n\n\n_description: _\n\nReturns the size of the font.  This is set when you load in the font.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getSpaceSize()\n\n<!--\n_syntax: getSpaceSize()_\n_name: getSpaceSize_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a variable that represents how wide spaces are.\n\nIt's a scalar for the width of the letter 'p', so 1.0 means that a space will be the size of the lower\ncase 'p' of that font. 2.0 means that it's 2 times the size of the lower case 'p', etc.\n\n\n**Returns**: the width of the space.\n\n\n\n\n\n_description: _\n\nThis is a variable to represent how wide spaces are sized.   It's a scalar for the width of the letter 'p', so 1.0 means that a space will be the size of the lower case 'p' of that font.  2.0 means that it's 2 times the size of the lower case 'p', etc.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getStringAsPoints()\n\n<!--\n_syntax: getStringAsPoints()_\n_name: getStringAsPoints_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis returns a vector of ofTTFCharacters (which is actually an ofPath) for a given string.  This means you can get access to the point data / outlines of the letter forms.\n\n~~~~{.cpp}\n\n//--------------------------------------------------------------\nvoid testApp::setup(){\n\n    ofBackground(0);\n    font.load(\"vag.ttf\", 100, false, false, true);\n\n}\n\n//--------------------------------------------------------------\nvoid testApp::update(){\n\n}\n\n//--------------------------------------------------------------\nvoid testApp::draw(){\n\n    // get the string as paths\n    bool vflip = true; // OF flips y coordinate in the default perspective, \n                       // should be false if using a camera for example\n    bool filled = true; // or false for contours\n    vector < ofPath > paths = font.getStringAsPoints(\"hello!\", vflip, filled);\n\n    ofPushMatrix();\n    ofTranslate(ofGetWidth()/2, ofGetHeight()/2);\n\n    for (int i = 0; i < paths.size(); i++){\n\n        // for every character break it out to polylines\n\n        vector <ofPolyline> polylines = paths[i].getOutline();\n\n        // for every polyline, draw every fifth point\n\n        for (int j = 0; j < polylines.size(); j++){\n            for (int k = 0; k < polylines[j].size(); k+=5){         // draw every \"fifth\" point\n                ofDrawCircle( polylines[j][k], 3);\n            }\n        }\n    }\n\n    ofPopMatrix();\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle getStringBoundingBox(&s, x, y, vflip = true)\n\n<!--\n_syntax: getStringBoundingBox(&s, x, y, vflip = true)_\n_name: getStringBoundingBox_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: const string &s, float x, float y, bool vflip=true_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the bounding box of a string as a rectangle.\n\n**Parameters:**\n\ns The string to get bounding box of.\n\nx X position of returned rectangle.\n\ny Y position of returned rectangle.\n\n**Returns**: the bounding box of a string as a rectangle.\n\n\n\n\n\n_description: _\n\nReturns the bounding box of a string as a rectangle, useful if you want to position the type or calculate the size of graphics that relate to the font.\n\ne.g:\n~~~~{.cpp}\n\n//in setup()\n\nfranklinBook.load(\"frabk.ttf\", 32);\n\n//in update()\n\nchar tempString[255];\nofRectangle rect = franklinBook.getStringBoundingBox(tempString, 0,0);\n\n//in draw\n\nofSetColor(0xcccccc);\nofDrawRectangle(rect.x, rect.y, rect.width, rect.height);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofMesh & getStringMesh(&s, x, y, vflip = true)\n\n<!--\n_syntax: getStringMesh(&s, x, y, vflip = true)_\n_name: getStringMesh_\n_returns: const ofMesh &_\n_returns_description: _\n_parameters: const string &s, float x, float y, bool vflip=true_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the string as an ofMesh.   Note: this is a mesh that contains vertices and texture coordinates for the textured font, not the points of the font that are returned via any of the get points functions.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTexture getStringTexture(&s, vflip = true)\n\n<!--\n_syntax: getStringTexture(&s, vflip = true)_\n_name: getStringTexture_\n_returns: ofTexture_\n_returns_description: _\n_parameters: const string &s, bool vflip=true_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasFullCharacterSet()\n\n<!--\n_syntax: hasFullCharacterSet()_\n_name: hasFullCharacterSet_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDoes the font have a full character set?\n\n**Returns**: true if the font was allocated with a full character set.\n\n\n\n\n\n_description: _\n\nReturns true or false if this font was allocated with a full character set.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t indexForGlyph(glyph)\n\n<!--\n_syntax: indexForGlyph(glyph)_\n_name: indexForGlyph_\n_returns: size_t_\n_returns_description: _\n_parameters: uint32_t glyph_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool initLibraries()\n\n<!--\n_syntax: initLibraries()_\n_name: initLibraries_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isAntiAliased()\n\n<!--\n_syntax: isAntiAliased()_\n_name: isAntiAliased_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nIs the font anti-aliased?\n\n**Returns**: true if the font was set to be anti-aliased.\n\n\n\n\n\n_description: _\n\nReturns true of false if the font is set to be anti-aliased.  This is set when you load.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isLoaded()\n\n<!--\n_syntax: isLoaded()_\n_name: isLoaded_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nHas the font been loaded successfully?\n\n**Returns**: true if the font was loaded.\n\n\n\n\n\n_description: _\n\nReturns true or false if the font is loaded properly.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isValidGlyph(uint32_t)\n\n<!--\n_syntax: isValidGlyph(uint32_t)_\n_name: isValidGlyph_\n_returns: bool_\n_returns_description: _\n_parameters: uint32_t _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void iterateString(&str, x, y, vFlipped, (uint32_t, f)\n\n<!--\n_syntax: iterateString(&str, x, y, vFlipped, (uint32_t, f)_\n_name: iterateString_\n_returns: void_\n_returns_description: _\n_parameters: const string &str, float x, float y, bool vFlipped, function< void (uint32_t, glm::vec2) > f_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool load(&filename, fontsize, _bAntiAliased = true, _bFullCharacterSet = true, makeContours = false, simplifyAmt = 0.3f, dpi = 0)\n\n<!--\n_syntax: load(&filename, fontsize, _bAntiAliased = true, _bFullCharacterSet = true, makeContours = false, simplifyAmt = 0.3f, dpi = 0)_\n_name: load_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &filename, int fontsize, bool _bAntiAliased=true, bool _bFullCharacterSet=true, bool makeContours=false, float simplifyAmt=0.3f, int dpi=0_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLoads the font specified by filename, allows you to control size, aliasing, and other parameters.\n\nloads a font, and allows you to set the following parameters: the filename, the size, if the font is anti-aliased,\nif it has a full character set, if you need it to have contours (for getStringPoints) and parameters that control\nthe simplification amount for those contours and the dpi of the font.\n\ndefault (without dpi), non-full char set, anti aliased, 96 dpi\n\n\n**Parameters:**\n\nfilename The name of the font file to load.\n\nfontsize The size in pixels to load the font.\n\n_bAntiAliased true if the font should be anti-aliased.\n\n_bFullCharacterSet true if the full character set should be cached.\n\nmakeControus true if the vector contours should be cached.\n\nsimplifyAmt the amount to simplify the vector contours.  Larger number means more simplified.\n\ndpi the dots per inch used to specify rendering size.\n\n**Returns**: true if the font was loaded correctly.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool load(&settings)\n\n<!--\n_syntax: load(&settings)_\n_name: load_\n_returns: bool_\n_returns_description: _\n_parameters: const ofTrueTypeFontSettings &settings_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTrueTypeFont::glyph loadGlyph(utf8)\n\n<!--\n_syntax: loadGlyph(utf8)_\n_name: loadGlyph_\n_returns: ofTrueTypeFont::glyph_\n_returns_description: _\n_parameters: uint32_t utf8_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofTrueTypeFont(&&mom)\n\n<!--\n_syntax: ofTrueTypeFont(&&mom)_\n_name: ofTrueTypeFont_\n_returns: _\n_returns_description: _\n_parameters: ofTrueTypeFont &&mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofTrueTypeFont(&mom)\n\n<!--\n_syntax: ofTrueTypeFont(&mom)_\n_name: ofTrueTypeFont_\n_returns: _\n_returns_description: _\n_parameters: const ofTrueTypeFont &mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofTrueTypeFont()\n\n<!--\n_syntax: ofTrueTypeFont()_\n_name: ofTrueTypeFont_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a default ofTrueTypeFont.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTrueTypeFont & operator=(&&mom)\n\n<!--\n_syntax: operator=(&&mom)_\n_name: operator=_\n_returns: ofTrueTypeFont &_\n_returns_description: _\n_parameters: ofTrueTypeFont &&mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTrueTypeFont & operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: ofTrueTypeFont &_\n_returns_description: _\n_parameters: const ofTrueTypeFont &mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void reloadTextures()\n\n<!--\n_syntax: reloadTextures()_\n_name: reloadTextures_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setDirection(direction)\n\n<!--\n_syntax: setDirection(direction)_\n_name: setDirection_\n_returns: void_\n_returns_description: _\n_parameters: ofTrueTypeFontDirection direction_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: current font direction\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setGlobalDpi(newDpi)\n\n<!--\n_syntax: setGlobalDpi(newDpi)_\n_name: setGlobalDpi_\n_returns: void_\n_returns_description: _\n_parameters: int newDpi_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the default dpi for all typefaces.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setLetterSpacing(spacing)\n\n<!--\n_syntax: setLetterSpacing(spacing)_\n_name: setLetterSpacing_\n_returns: void_\n_returns_description: _\n_parameters: float spacing_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the letter spacing of the font object.\n\n1.0 = default spacing, less then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.\n\n**Parameters:**\n\nspacing Spacing of font object.\n\n\n\n\n\n_description: _\n\nSets the letter spacing of the font object.  1.0 = default spacing, less then 1.0 would be tighter spacing, greater then 1.0 would be wider spacing.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setLineHeight(height)\n\n<!--\n_syntax: setLineHeight(height)_\n_name: setLineHeight_\n_returns: void_\n_returns_description: _\n_parameters: float height_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets line height for text drawn on screen.\n\nNote the line height is automatically computed based on the font size, when you load in the font.\n\n\n**Parameters:**\n\nheight Line height for text drawn on screen.\n\n\n\n\n\n_description: _\n\nSets the line height for text that is drawn on screen.   Note the line height is automatically computed based on the font size, when you load in the font.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setSpaceSize(size)\n\n<!--\n_syntax: setSpaceSize(size)_\n_name: setSpaceSize_\n_returns: void_\n_returns_description: _\n_parameters: float size_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the size of the space ' ' character.\n\nThis number, which defaults to 1.0, scales the width of the letter 'p' for the space.\n\n\n**Parameters:**\n\nsize Scales the width of the letter 'p' for the space.\n\n\n\n\n\n_description: _\n\nSets the size of the space ' ' character.  This number, which defaults to 1.0, scales the width of the letter 'p' for the space.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float stringHeight(&s)\n\n<!--\n_syntax: stringHeight(&s)_\n_name: stringHeight_\n_returns: float_\n_returns_description: _\n_parameters: const string &s_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the string height.\n\nThis is essentially the height component of the ofTrueTypeFont::getStringBoundingBox() rectangle.\n\n\n**Parameters:**\n\ns The string to get the height of.\n\n**Returns**: the string height.\n\n\n\n\n\n_description: _\n\nReturns the string height.  This is essentially the height component of the ofTrueTypeFont::getStringBoundingBox() rectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float stringWidth(&s)\n\n<!--\n_syntax: stringWidth(&s)_\n_name: stringWidth_\n_returns: float_\n_returns_description: _\n_parameters: const string &s_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the string width.\n\nThis is essentially the width component of the ofTrueTypeFont::getStringBoundingBox() rectangle.\n\n\n**Parameters:**\n\ns The string to get the width of.\n\n**Returns**: the string width.\n\n\n\n\n\n_description: _\n\nReturns the string width.  This is essentially the width component of the ofTrueTypeFont::getStringBoundingBox() rectangle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void unloadTextures()\n\n<!--\n_syntax: unloadTextures()_\n_name: unloadTextures_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofTrueTypeFont()\n\n<!--\n_syntax: ~ofTrueTypeFont()_\n_name: ~ofTrueTypeFont_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDestroy the ofTrueTypeFont.\n\n\n\n\n\n_description: _\n\nThe destructor for the font object will clear the resources, such as textures, that have been allocated.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###float ascenderHeight\n\n<!--\n_name: ascenderHeight_\n_type: float_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bLoadedOk\n\n<!--\n_name: bLoadedOk_\n_type: bool_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\cond INTERNAL\n\n\n\n\n\n_description: _\n\nbLoadedOk is a boolean variable containing true if the font was successfully loaded.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofTTFCharacter > charOutlines\n\n<!--\n_name: charOutlines_\n_type: vector< ofTTFCharacter >_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofTTFCharacter > charOutlinesContour\n\n<!--\n_name: charOutlinesContour_\n_type: vector< ofTTFCharacter >_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTTFCharacter charOutlinesNonVFlipped\n\n<!--\n_name: charOutlinesNonVFlipped_\n_type: ofTTFCharacter_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofTTFCharacter > charOutlinesNonVFlippedContour\n\n<!--\n_name: charOutlinesNonVFlippedContour_\n_type: vector< ofTTFCharacter >_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###charProps * cps\n\n<!--\n_name: cps_\n_type: charProps *_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float descenderHeight\n\n<!--\n_name: descenderHeight_\n_type: float_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###FT_Face face\n\n<!--\n_name: face_\n_type: FT_Face_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float fontUnitScale\n\n<!--\n_name: fontUnitScale_\n_type: float_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle glyphBBox\n\n<!--\n_name: glyphBBox_\n_type: ofRectangle_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int glyphIndexMap\n\n<!--\n_name: glyphIndexMap_\n_type: int_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofTrueTypeFont::glyphProps invalidProps\n\n<!--\n_name: invalidProps_\n_type: const ofTrueTypeFont::glyphProps_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float letterSpacing\n\n<!--\n_name: letterSpacing_\n_type: float_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float lineHeight\n\n<!--\n_name: lineHeight_\n_type: float_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTrueTypeFontSettings settings\n\n<!--\n_name: settings_\n_type: ofTrueTypeFontSettings_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float spaceSize\n\n<!--\n_name: spaceSize_\n_type: float_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh stringQuads\n\n<!--\n_name: stringQuads_\n_type: ofMesh_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTexture texAtlas\n\n<!--\n_name: texAtlas_\n_type: ofTexture_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}