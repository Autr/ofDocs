{"data":[{"page":{"entry":{"name":"ofPath","filename":"ofPath.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/graphics/ofPath.markdown","path":"/documentation/graphics/ofPath","route":"/documentation/graphics/ofPath.markdown","dir":"../ofSite/documentation/graphics","ext":"markdown","type":"page","id":2343,"parent":2325,"breadcrumbs":[2325,1968],"siblings":[],"translations":{}},"description":{"short":"<p>ofPath is a way to create a path or multiple paths consisting of\npoints. It allows you to combine multiple paths consisting of points into\na single vector data object that can be drawn to the screen, manipulated\npoint by point, or manipulated with it's child subpaths. It is better at\nrepresenting and manipulating complex shapes than the ofPolyline and more\neasily represents multiple child lines or shapes as either ofSubPath or\nofPolyline instances. By default ofPath uses ofSubPath instances. Closing\nthe path automatically creates a new path:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// create a new ofSubPath</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">*</span> <span class=\"token number\">50</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">50</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">360</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To use ofPolyline instances, simply set the mode to POLYLINES</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>POLYLINES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","full":"<p>ofPath is a way to create a path or multiple paths consisting of points. It allows you to combine multiple paths consisting of points into a single vector data object that can be drawn to the screen, manipulated point by point, or manipulated with it's child subpaths. It is better at representing and manipulating complex shapes than the <a href=\"ofPolyline.html\">ofPolyline</a> and more easily represents multiple child lines or shapes as either ofSubPath or ofPolyline instances. By default ofPath uses ofSubPath instances. Closing the path automatically creates a new path:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">*</span> <span class=\"token number\">50</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">50</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">360</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// creates a new ofSubPath</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To use ofPolyline instances, simply set the mode to POLYLINES</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>ofPath<span class=\"token operator\">::</span>POLYLINES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"addCommand(&command)","name":"addCommand","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPath<span class=\"token operator\">::</span>Command <span class=\"token operator\">&amp;</span>command","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"append(&path)","name":"append","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPath <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"arc(&centre, radiusX, radiusY, angleBegin, angleEnd)","name":"arc","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create an arc at centre, which has the radiusX, radiusY, and begins at\nangleBegin and ends at angleEnd. To draw a circle with a radius of 50 pixels\nat 100, 100:</p>\n<p>\\note angleBegin needs to be larger than angleEnd, i.e. 0,180 is ok,\nwhile 180,0 is not.</p>\n","desc":"<p>Creates an arc at centre, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd. To draw a circle with a radius of 50 pixels at 100, 100:</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">360</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Note that angleEnd needs to be larger than angleBegin, i.e. 0, 180 is ok, while 180,0 is not.</p>\n","counter":5},{"syntax":"arc(&centre, radiusX, radiusY, angleBegin, angleEnd)","name":"arc","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"arc(&centre, radiusX, radiusY, angleBegin, angleEnd, clockwise)","name":"arc","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> clockwise","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Creates an arc at centre, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd. To draw a circle with a radius of 50 pixels at 100, 100:</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">360</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Note that angleEnd needs to be larger than angleBegin, i.e. 0, 180 is ok, while 180,0 is not.</p>\n"},{"syntax":"arc(&centre, radiusX, radiusY, angleBegin, angleEnd, clockwise)","name":"arc","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> clockwise","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"arc(x, y, radiusX, radiusY, angleBegin, angleEnd)","name":"arc","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create an arc at x,y, which has the radiusX, radiusY, and begins at\nangleBegin and ends at angleEnd. To draws a shape with a radius of 200 pixels\nat 300, 300:</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">271</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// note 271, not 270 for precision</span>\n</code></pre>\n<p><img src=\"graphics/ofPath_arc.jpg\" alt=\"ofPath arc\"></p>\n<p>\\note angleBegin needs to be larger than angleEnd, i.e. 0, 180 is ok,\nwhile 180,0 is not.</p>\n","desc":"<p>Creates an arc at x,y, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd. To draws a shape with a radius of 200 pixels at 300, 300:</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">271</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// note 271, not 270 for precision</span>\n</code></pre>\n<p><img src=\"ofPath_arc.png\" alt=\"ofPath arc\"></p>\n<p>Note that angleEnd needs to be larger than angleBegin, i.e. 0, 180 is ok, while 180,0 is not.</p>\n"},{"syntax":"arc(x, y, z, radiusX, radiusY, angleBegin, angleEnd)","name":"arc","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create an arc at x,y,z, which has the radiusX, radiusY, and begins at\nangleBegin and ends at angleEnd.</p>\n","desc":"<p>Creates an arc at x,y,z, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd.</p>\n"},{"syntax":"arcNegative(&centre, radiusX, radiusY, angleBegin, angleEnd)","name":"arcNegative","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":3},{"syntax":"arcNegative(&centre, radiusX, radiusY, angleBegin, angleEnd)","name":"arcNegative","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>centre<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"arcNegative(x, y, radiusX, radiusY, angleBegin, angleEnd)","name":"arcNegative","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"arcNegative(x, y, z, radiusX, radiusY, angleBegin, angleEnd)","name":"arcNegative","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radiusY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleBegin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> angleEnd","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"bezierTo(&cp1, &cp2, &p)","name":"bezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>cp2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by glm::vec3 <code>cp1</code> and <code>cp2</code>, that ends at glm::vec3\nto.</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"graphics/bezier.jpg\" alt=\"polyline bezier\">\nThe control points are shown in red.</p>\n","desc":"<p>Create a cubic bezier line from the current drawing point with the two control points indicated by ofPoint cp1 and ofPoint cp2, that ends at ofPoint p.</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">moveto</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Creates this:\n<img src=\"bezier.png\" alt=\"polyline bezier\">\nThe control points are shown in yellow.</p>\n","counter":3},{"syntax":"bezierTo(&cp1, &cp2, &p)","name":"bezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>cp2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Create a cubic bezier line from the current drawing point with the two control points indicated by ofPoint cp1 and ofPoint cp2, that ends at ofPoint p.</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">moveto</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Creates this:\n<img src=\"bezier.png\" alt=\"polyline bezier\">\nThe control points are shown in yellow.</p>\n"},{"syntax":"bezierTo(cx1, cy1, cx2, cy2, x, y)","name":"bezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by the coordinates cx1, cy1 and cx2, cy2,\nthat ends at the coordinates x, y.</p>\n","desc":"<p>Create a cubic bezier line from the current drawing point with the two control points indicated by the coordinates (cx1, cy1) and (cx2, cy2), that ends at the coordinate (x, y).</p>\n"},{"syntax":"bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z)","name":"bezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a cubic bezier line in 3D space from the current drawing point\nwith the 2 control points indicated by the coordinates cx1, cy1, cz1\nand cx2, cy2, cz2, that ends at the coordinates x, y, z.</p>\n","desc":"<p>Create a cubic bezier line in 3D space from the current drawing point with the two control points indicated by the coordinates (cx1, cy1, cz1) and (cx2, cy2, cz2), that ends at the coordinate (x, y, z).</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> cx <span class=\"token operator\">=</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> cy <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> step <span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> TWO_PI<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span> cx <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token number\">-100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                       cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                       cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"circle(&p, radius)","name":"circle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":3},{"syntax":"circle(&p, radius)","name":"circle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"circle(x, y, radius)","name":"circle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"circle(x, y, z, radius)","name":"circle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Remove all subpaths from the ofPath instance</p>\n","desc":"<p>Removes all subpaths from the ofPath instance.</p>\n","counter":0},{"syntax":"close()","name":"close","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Close the current subpath and create a new subpath, either an\nofPolyline or ofSubPath by calling newSubPath(), ensuring that the\nclosed path doesn't have new points added to it.</p>\n","desc":"<p>Closes the current subpath and creates a new subpath, either an ofPolyline or ofSubPath by calling newSubPath(), ensuring that the closed path doesn't have new points added to it.</p>\n","counter":0},{"syntax":"curveTo(&p)","name":"curveTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a curve to p from the current drawing position</p>\n","desc":"<p>Draws a curve to p from the current drawing position.</p>\n","counter":3},{"syntax":"curveTo(&p)","name":"curveTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draws a curve to p from the current drawing position.</p>\n"},{"syntax":"curveTo(x, y)","name":"curveTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a curve to x,y from the current drawing position</p>\n","desc":"<p>Draws a curve to x,y from the current drawing position. To draw a small rose curves at the mouse position:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> scale <span class=\"token operator\">=</span> <span class=\"token function\">ofDist</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">,</span> px<span class=\"token punctuation\">,</span> py<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> theta <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> theta <span class=\"token operator\">&lt;</span> TWO_PI<span class=\"token punctuation\">;</span> theta <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> r <span class=\"token operator\">=</span>  <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>theta <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>scale<span class=\"token operator\">/</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span>mouseX <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mouseY <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\npx <span class=\"token operator\">=</span> mouseX<span class=\"token punctuation\">;</span>\npy <span class=\"token operator\">=</span> mouseY<span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"curveTo(x, y, z)","name":"curveTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws a curve to x,y,z from the current drawing position</p>\n","desc":"<p>Draws a curve to x,y,z from the current drawing position.</p>\n"},{"syntax":"draw()","name":"draw","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws the path at 0,0. Calling draw() also calls tessellate()</p>\n","desc":"<p>Draws the path at 0,0. Calling draw() also calls tessellate().</p>\n","counter":1},{"syntax":"draw(x, y)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draws the path at x,y. Calling draw() also calls tessellate()</p>\n","desc":"<p>Draws the path at x,y. Calling draw() also calls tessellate().</p>\n"},{"syntax":"ellipse(&p, width, height)","name":"ellipse","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":3},{"syntax":"ellipse(&p, width, height)","name":"ellipse","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ellipse(x, y, width, height)","name":"ellipse","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ellipse(x, y, z, width, height)","name":"ellipse","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"flagShapeChanged()","name":"flagShapeChanged","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"generatePolylinesFromCommands()","name":"generatePolylinesFromCommands","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getCircleResolution()","name":"getCircleResolution","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getCommands()","name":"getCommands","returns":"int &","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"getCommands()","name":"getCommands","returns":"const int &","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getCurveResolution()","name":"getCurveResolution","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getFillColor()","name":"getFillColor","returns":"ofColor","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the ofColor fill of the ofPath</p>\n","desc":"<p>Returns the ofColor that the ofPath is using.</p>\n","counter":0},{"syntax":"getMode()","name":"getMode","returns":"ofPath::Mode","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getOutline()","name":"getOutline","returns":"const int &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get an ofPolyline representing the outline of the ofPath.</p>\n","desc":"<p>This returns an ofPolyline representing the outline of an ofPath.</p>\n","counter":0},{"syntax":"getStrokeColor()","name":"getStrokeColor","returns":"ofColor","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the stroke color of the ofPath</p>\n","desc":"<p>Returns the stroke color that the ofPath is using.</p>\n","counter":0},{"syntax":"getStrokeWidth()","name":"getStrokeWidth","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the stroke width of the ofPath</p>\n<p>The default value is `0</p>\n","desc":"<p>Returns the stroke width.</p>\n","counter":0},{"syntax":"getTessellation()","name":"getTessellation","returns":"const ofMesh &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getUseShapeColor()","name":"getUseShapeColor","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getWindingMode()","name":"getWindingMode","returns":"ofPolyWindingMode","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the poly winding mode currently in use.</p>\n","desc":"<p>Returns the poly winding mode currently in use.</p>\n","counter":0},{"syntax":"hasChanged()","name":"hasChanged","returns":"bool","returns_description":null,"parameters":null,"access":"private","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"hasOutline()","name":"hasOutline","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"isFilled()","name":"isFilled","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get whether the path is using a fill or not.</p>\n<p>The default value is <code>true</code></p>\n","desc":"<p>Whether the path is using a fill or not.</p>\n","counter":0},{"syntax":"lastPolyline()","name":"lastPolyline","returns":"ofPolyline &","returns_description":null,"parameters":null,"access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>}</p>\n","desc":"","counter":0},{"syntax":"lineTo(&p)","name":"lineTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a straight line from the current drawing position to the\nlocation indicated by p.</p>\n","desc":"<p>Draws a straight line from the current drawing position to the location indicated by p.</p>\n","counter":3},{"syntax":"lineTo(&p)","name":"lineTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draws a straight line from the current drawing position to the location indicated by p.</p>\n"},{"syntax":"lineTo(x, y)","name":"lineTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a straight line from the current drawing position to the\nlocation indicated by x,y.</p>\n","desc":"<p>Draws a straight line from the current drawing position to the location indicated by x,y.</p>\n"},{"syntax":"lineTo(x, y, z)","name":"lineTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw a straight line from the current drawing position to the\nlocation indicated by x,y,z.</p>\n","desc":"<p>Draws a straight line from the current drawing position to the location indicated by x,y,z.</p>\n"},{"syntax":"moveTo(&p)","name":"moveTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Move the drawing position to p. This means that a subsequent calls to,\nfor instance, lineTo() or curveTo() will connect the location p to the new\nlocation.</p>\n","desc":"<p>Moves the drawing position to p. This means that a subsequent calls to, for instance, lineTo() or curveTo() will connect the location p to the new location.</p>\n","counter":2},{"syntax":"moveTo(&p)","name":"moveTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Moves the drawing position to p. This means that a subsequent calls to, for instance, lineTo() or curveTo() will connect the location p to the new location.</p>\n"},{"syntax":"moveTo(x, y, z)","name":"moveTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Move the drawing position to x,y.z. This means that a subsequent\ncalls to, for instance, lineTo() or curveTo() will connect the\nlocation x,y,z to the new location.</p>\n","desc":"<p>Moves the drawing position to x,y.z. This means that a subsequent calls to, for instance, lineTo() or curveTo() will connect the location x,y,z to the new location.</p>\n"},{"syntax":"newSubPath()","name":"newSubPath","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a new subpath, either an ofPolyline instance or an ofSubPath\ninstance. All points added after a call to ofSubPath will be done in\nthe newly created subpath. Calling close() automatically calls create\nnewSubPath(), ensuring that the closed path doesn't have new points\nadded to it.</p>\n","desc":"<p>Creates a new subpath, either an ofPolyline instance or an ofSubPath instance. All points added after a call to ofSubPath will be done in the newly created subpath. Calling close() automatically calls create newSubPath(), ensuring that the closed path doesn't have new points added to it.</p>\n","counter":0},{"syntax":"ofPath()","name":"ofPath","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a new ofPath instance.</p>\n","desc":"<p>Creates a new ofPath instance.</p>\n","counter":0},{"syntax":"quadBezierTo(&cp1, &cp2, &p)","name":"quadBezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>cp2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a quadratic bezier line in 3D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, cz1,\nthe control point at cx2, cy2, cz2, and that ends at the coordinates\nx, y, z.\n<img src=\"graphics/curves.jpg\" alt=\"Curves\"></p>\n","desc":"<p>Create a quadratic bezier line in 3D space from the current drawing point with the control points indicated by ofPoint cp1 and ofPoint cp2,  and that ends at ofPoint p.\n<img src=\"curves.png\" alt=\"polyline curves\"></p>\n","counter":3},{"syntax":"quadBezierTo(&cp1, &cp2, &p)","name":"quadBezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>cp1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>cp2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Create a quadratic bezier line in 3D space from the current drawing point with the control points indicated by ofPoint cp1 and ofPoint cp2,  and that ends at ofPoint p.\n<img src=\"curves.png\" alt=\"polyline curves\"></p>\n"},{"syntax":"quadBezierTo(cx1, cy1, cx2, cy2, x, y)","name":"quadBezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Creates a quadratic bezier line in 2D space from the current drawing\npoint with the beginning indicated by the point p1, the control point\nat p2, and that ends at the point p3.</p>\n","desc":"<p>Creates a quadratic bezier line in 2D space from the current drawing point with the control points indicated by the coordinates (cx1, cy1) and (cx2, cy2), and that ends at the coordinate (x, y)</p>\n"},{"syntax":"quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z)","name":"quadBezierTo","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> cx1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cx2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cy2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> cz2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Creates a quadratic bezier line in 3D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, the\ncontrol point at cx2, cy2, and that ends at the coordinates x, y.</p>\n","desc":"<p>Creates a quadratic bezier line in 3D space from the current drawing point with the control points indicated by the coordinates (cx1, cy1, cz1) and (cx2, cy2, cz2), and that ends at the coordinate (x, y, z).</p>\n"},{"syntax":"rectRounded(&b, r)","name":"rectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":7},{"syntax":"rectRounded(&b, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)","name":"rectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomLeftRadius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rectRounded(&p, w, h, r)","name":"rectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rectRounded(&p, w, h, r)","name":"rectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)","name":"rectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomLeftRadius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)","name":"rectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomLeftRadius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rectRounded(x, y, w, h, r)","name":"rectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> r","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rectRounded(x, y, z, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)","name":"rectRounded","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topLeftRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> topRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomRightRadius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> bottomLeftRadius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rectangle(&p, w, h)","name":"rectangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":4},{"syntax":"rectangle(&p, w, h)","name":"rectangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rectangle(&r)","name":"rectangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>r","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rectangle(x, y, w, h)","name":"rectangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rectangle(x, y, z, w, h)","name":"rectangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rotateDeg(degrees, &axis)","name":"rotateDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"rotateDeg(degrees, &axis)","name":"rotateDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rotateRad(radians, &axis)","name":"rotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"rotateRad(radians, &axis)","name":"rotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>axis","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"scale(x, y)","name":"scale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Change the size of either the ofPolyline or ofSubPath instances that\nthe ofPath contains. These changes are non-reversible, so for instance\nscaling by 0,0 zeros out all data.</p>\n","desc":"<p>Changes the size of either the ofPolyline or ofSubPath instances that the ofPath contains. These changes are non-reversible, so for instance scaling by 0,0 zeroes out all data.</p>\n","counter":0},{"syntax":"setCircleResolution(circleResolution)","name":"setCircleResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> circleResolution","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setColor(&color)","name":"setColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>color","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the color of the path. This affects both the line if the\npath is drawn as wireframe and the fill if the path is drawn with\nfill. All subpaths are affected.</p>\n","desc":"<p>This sets the color of the path. This affects both the line if the path is drawn as wireframe and the fill if the path is drawn with fill. All subpaths are affected.</p>\n","counter":0},{"syntax":"setCurveResolution(curveResolution)","name":"setCurveResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> curveResolution","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setFillColor(&color)","name":"setFillColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>color","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the fill color of the path. This has no affect if the path is\ndrawn as wireframe.</p>\n","desc":"<p>This sets the fill color of the path. This has no affect if the path is drawn as wireframe.</p>\n","counter":0},{"syntax":"setFillHexColor(hex)","name":"setFillHexColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> hex","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the fill color of the path. This has no affect if the path is\ndrawn as wireframe.</p>\n","desc":"<p>This sets the fill color of the path. This has no affect if the path is drawn as wireframe.</p>\n","counter":0},{"syntax":"setFilled(hasFill)","name":"setFilled","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> hasFill","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set whether the path should be drawn as wireframes or filled.</p>\n","desc":"<p>Sets whether the path should be drawn as wireframes or filled.</p>\n","counter":0},{"syntax":"setHexColor(hex)","name":"setHexColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> hex","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the color of the path. This affects both the line if the path is\ndrawn as wireframe and the fill if the path is drawn with fill. All\nsubpaths are affected.</p>\n","desc":"<p>This sets the color of the path. This affects both the line if the path is drawn as wireframe and the fill if the path is drawn with fill. All subpaths are affected.</p>\n","counter":0},{"syntax":"setMode(mode)","name":"setMode","returns":"void","returns_description":null,"parameters":"ofPath<span class=\"token operator\">::</span>Mode mode","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setPolyWindingMode(mode)","name":"setPolyWindingMode","returns":"void","returns_description":null,"parameters":"ofPolyWindingMode mode","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the way that the points in the sub paths are connected.</p>\n<p>OpenGL can only render convex polygons which means that any shape that\nisn't convex, i.e. that has points which are concave, going inwards,\nneed to be tessellated into triangles so that OpenGL can render them.\nIf you're using filled shapes with your ofPath this is done\nautomatically for you.</p>\n<p>The possible options you can pass in are:</p>\n<pre><code>OF_POLY_WINDING_ODD\nOF_POLY_WINDING_NONZERO\nOF_POLY_WINDING_POSITIVE\nOF_POLY_WINDING_NEGATIVE\nOF_POLY_WINDING_ABS_GEQ_TWO\n</code></pre>\n","desc":"<p>This sets the way that the points in the sub paths are connected. OpenGL can only render convex polygons which means that any shape that isn't convex, i.e. that has points which are concave, going inwards, need to be tessellated into triangles so that OpenGL can render them. If you're using filled shapes with your ofPath this is done automatically for you. The possible options you can pass in are:</p>\n<p>OF_POLY_WINDING_ODD\nOF_POLY_WINDING_NONZERO\nOF_POLY_WINDING_POSITIVE\nOF_POLY_WINDING_NEGATIVE\nOF_POLY_WINDING_ABS_GEQ_TWO</p>\n<p><img src=\"winding_modes.gif\" alt=\"ofPath winding modes\"></p>\n<p>So adding the following points:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outer</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// inner 1</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// inner 2 (backwards)</span>\n\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outer</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// inner 1</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// inner 2 (fwds)</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">410</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">keyPressed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    mode<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> mode </code></pre>\n","counter":0},{"syntax":"setStrokeColor(&color)","name":"setStrokeColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofColor <span class=\"token operator\">&amp;</span>color","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the stroke color of the path. This has no affect if the path\nis drawn filled.</p>\n","desc":"<p>This sets the stroke color of the path. This has no affect if the path is drawn filled.</p>\n","counter":0},{"syntax":"setStrokeHexColor(hex)","name":"setStrokeHexColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> hex","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the stroke color of the path. This has no affect if the path\nis drawn filled.</p>\n","desc":"<p>This sets the stroke color of the path. This has no affect if the path is drawn filled.</p>\n","counter":0},{"syntax":"setStrokeWidth(width)","name":"setStrokeWidth","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the stroke width of the line if the ofPath is to be drawn\nnot in wireframe.</p>\n","desc":"<p>Sets the stroke width of the line if the ofPath is to be drawn not in wireframe.</p>\n","counter":0},{"syntax":"setUseShapeColor(useColor)","name":"setUseShapeColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> useColor","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"simplify(tolerance = 0.3f)","name":"simplify","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.3f</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"tessellate()","name":"tessellate","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"translate(&p)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"translate(&p)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"triangle(&p1, &p2, &p3)","name":"triangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p3","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":3},{"syntax":"triangle(&p1, &p2, &p3)","name":"triangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>p3","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"triangle(x1, y1, x2, y2, x3, y3)","name":"triangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"triangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)","name":"triangle","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> x3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y3<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z3","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"bFill","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bHasChanged","type":"bool","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bNeedsPolylinesGeneration","type":"bool","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bNeedsTessellation","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bUseShapeColor","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"cachedTessellation","type":"ofMesh","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"circleResolution","type":"int","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"commands","type":"Command","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"curveResolution","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"fillColor","type":"ofColor","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"mode","type":"Mode","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"polylines","type":"ofPolyline","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"prevCurveRes","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"strokeColor","type":"ofColor","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"strokeWidth","type":"float","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"tessellatedContour","type":"ofPolyline","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"tessellator","type":"ofTessellator","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"windingMode","type":"ofPolyWindingMode","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofPath</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>ofPath is a way to create a path or multiple paths consisting of\npoints. It allows you to combine multiple paths consisting of points into\na single vector data object that can be drawn to the screen, manipulated\npoint by point, or manipulated with it's child subpaths. It is better at\nrepresenting and manipulating complex shapes than the ofPolyline and more\neasily represents multiple child lines or shapes as either ofSubPath or\nofPolyline instances. By default ofPath uses ofSubPath instances. Closing\nthe path automatically creates a new path:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// create a new ofSubPath</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">*</span> <span class=\"token number\">50</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">50</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">360</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To use ofPolyline instances, simply set the mode to POLYLINES</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>POLYLINES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>##Description</p>\n<p>ofPath is a way to create a path or multiple paths consisting of points. It allows you to combine multiple paths consisting of points into a single vector data object that can be drawn to the screen, manipulated point by point, or manipulated with it's child subpaths. It is better at representing and manipulating complex shapes than the <a href=\"ofPolyline.html\">ofPolyline</a> and more easily represents multiple child lines or shapes as either ofSubPath or ofPolyline instances. By default ofPath uses ofSubPath instances. Closing the path automatically creates a new path:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">*</span> <span class=\"token number\">50</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">50</span> <span class=\"token operator\">+</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">40</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">360</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// creates a new ofSubPath</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To use ofPolyline instances, simply set the mode to POLYLINES</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>ofPath<span class=\"token operator\">::</span>POLYLINES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>##Methods</p>\n<p>###void addCommand(&amp;command)</p>\n<!--\n_syntax: addCommand(&command)_\n_name: addCommand_\n_returns: void_\n_returns_description: _\n_parameters: const ofPath::Command &command_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void append(&amp;path)</p>\n<!--\n_syntax: append(&path)_\n_name: append_\n_returns: void_\n_returns_description: _\n_parameters: const ofPath &path_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void arc(&amp;centre, radiusX, radiusY, angleBegin, angleEnd)</p>\n<!--\n_syntax: arc(&centre, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create an arc at centre, which has the radiusX, radiusY, and begins at\nangleBegin and ends at angleEnd. To draw a circle with a radius of 50 pixels\nat 100, 100:</p>\n<p>\\note angleBegin needs to be larger than angleEnd, i.e. 0,180 is ok,\nwhile 180,0 is not.</p>\n<p>_description: _</p>\n<p>Creates an arc at centre, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd. To draw a circle with a radius of 50 pixels at 100, 100:</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">360</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Note that angleEnd needs to be larger than angleBegin, i.e. 0, 180 is ok, while 180,0 is not.</p>\n<!----------------------------------------------------------------------------->\n<p>###void arc(&amp;centre, radiusX, radiusY, angleBegin, angleEnd)</p>\n<!--\n_syntax: arc(&centre, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void arc(&amp;centre, radiusX, radiusY, angleBegin, angleEnd, clockwise)</p>\n<!--\n_syntax: arc(&centre, radiusX, radiusY, angleBegin, angleEnd, clockwise)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd, bool clockwise_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Creates an arc at centre, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd. To draw a circle with a radius of 50 pixels at 100, 100:</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">360</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Note that angleEnd needs to be larger than angleBegin, i.e. 0, 180 is ok, while 180,0 is not.</p>\n<!----------------------------------------------------------------------------->\n<p>###void arc(&amp;centre, radiusX, radiusY, angleBegin, angleEnd, clockwise)</p>\n<!--\n_syntax: arc(&centre, radiusX, radiusY, angleBegin, angleEnd, clockwise)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd, bool clockwise_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void arc(x, y, radiusX, radiusY, angleBegin, angleEnd)</p>\n<!--\n_syntax: arc(x, y, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create an arc at x,y, which has the radiusX, radiusY, and begins at\nangleBegin and ends at angleEnd. To draws a shape with a radius of 200 pixels\nat 300, 300:</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">271</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// note 271, not 270 for precision</span>\n</code></pre>\n<p><img src=\"graphics/ofPath_arc.jpg\" alt=\"ofPath arc\"></p>\n<p>\\note angleBegin needs to be larger than angleEnd, i.e. 0, 180 is ok,\nwhile 180,0 is not.</p>\n<p>_description: _</p>\n<p>Creates an arc at x,y, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd. To draws a shape with a radius of 200 pixels at 300, 300:</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">arc</span><span class=\"token punctuation\">(</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">271</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// note 271, not 270 for precision</span>\n</code></pre>\n<p><img src=\"ofPath_arc.png\" alt=\"ofPath arc\"></p>\n<p>Note that angleEnd needs to be larger than angleBegin, i.e. 0, 180 is ok, while 180,0 is not.</p>\n<!----------------------------------------------------------------------------->\n<p>###void arc(x, y, z, radiusX, radiusY, angleBegin, angleEnd)</p>\n<!--\n_syntax: arc(x, y, z, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create an arc at x,y,z, which has the radiusX, radiusY, and begins at\nangleBegin and ends at angleEnd.</p>\n<p>_description: _</p>\n<p>Creates an arc at x,y,z, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd.</p>\n<!----------------------------------------------------------------------------->\n<p>###void arcNegative(&amp;centre, radiusX, radiusY, angleBegin, angleEnd)</p>\n<!--\n_syntax: arcNegative(&centre, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void arcNegative(&amp;centre, radiusX, radiusY, angleBegin, angleEnd)</p>\n<!--\n_syntax: arcNegative(&centre, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void arcNegative(x, y, radiusX, radiusY, angleBegin, angleEnd)</p>\n<!--\n_syntax: arcNegative(x, y, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void arcNegative(x, y, z, radiusX, radiusY, angleBegin, angleEnd)</p>\n<!--\n_syntax: arcNegative(x, y, z, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void bezierTo(&amp;cp1, &amp;cp2, &amp;p)</p>\n<!--\n_syntax: bezierTo(&cp1, &cp2, &p)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &cp1, const glm::vec3 &cp2, const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by glm::vec3 <code>cp1</code> and <code>cp2</code>, that ends at glm::vec3\nto.</p>\n<pre><code class=\"language-{.cpp}\">line<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nline<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"graphics/bezier.jpg\" alt=\"polyline bezier\">\nThe control points are shown in red.</p>\n<p>_description: _</p>\n<p>Create a cubic bezier line from the current drawing point with the two control points indicated by ofPoint cp1 and ofPoint cp2, that ends at ofPoint p.</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">moveto</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Creates this:\n<img src=\"bezier.png\" alt=\"polyline bezier\">\nThe control points are shown in yellow.</p>\n<!----------------------------------------------------------------------------->\n<p>###void bezierTo(&amp;cp1, &amp;cp2, &amp;p)</p>\n<!--\n_syntax: bezierTo(&cp1, &cp2, &p)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &cp1, const glm::vec2 &cp2, const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Create a cubic bezier line from the current drawing point with the two control points indicated by ofPoint cp1 and ofPoint cp2, that ends at ofPoint p.</p>\n<pre><code class=\"language-{.cpp}\">path<span class=\"token punctuation\">.</span><span class=\"token function\">moveto</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npath<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">800</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Creates this:\n<img src=\"bezier.png\" alt=\"polyline bezier\">\nThe control points are shown in yellow.</p>\n<!----------------------------------------------------------------------------->\n<p>###void bezierTo(cx1, cy1, cx2, cy2, x, y)</p>\n<!--\n_syntax: bezierTo(cx1, cy1, cx2, cy2, x, y)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cx2, float cy2, float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by the coordinates cx1, cy1 and cx2, cy2,\nthat ends at the coordinates x, y.</p>\n<p>_description: _</p>\n<p>Create a cubic bezier line from the current drawing point with the two control points indicated by the coordinates (cx1, cy1) and (cx2, cy2), that ends at the coordinate (x, y).</p>\n<!----------------------------------------------------------------------------->\n<p>###void bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z)</p>\n<!--\n_syntax: bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cz1, float cx2, float cy2, float cz2, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create a cubic bezier line in 3D space from the current drawing point\nwith the 2 control points indicated by the coordinates cx1, cy1, cz1\nand cx2, cy2, cz2, that ends at the coordinates x, y, z.</p>\n<p>_description: _</p>\n<p>Create a cubic bezier line in 3D space from the current drawing point with the two control points indicated by the coordinates (cx1, cy1, cz1) and (cx2, cy2, cz2), that ends at the coordinate (x, y, z).</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> cx <span class=\"token operator\">=</span> <span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> cy <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> step <span class=\"token operator\">=</span> TWO_PI <span class=\"token operator\">/</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> TWO_PI<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+</span><span class=\"token operator\">=</span>step<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span>cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">.</span><span class=\"token function\">bezierTo</span><span class=\"token punctuation\">(</span> cx <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token number\">-100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                       cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                       cx <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token operator\">*</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cy<span class=\"token operator\">+</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span> <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void circle(&amp;p, radius)</p>\n<!--\n_syntax: circle(&p, radius)_\n_name: circle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void circle(&amp;p, radius)</p>\n<!--\n_syntax: circle(&p, radius)_\n_name: circle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void circle(x, y, radius)</p>\n<!--\n_syntax: circle(x, y, radius)_\n_name: circle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void circle(x, y, z, radius)</p>\n<!--\n_syntax: circle(x, y, z, radius)_\n_name: circle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void clear()</p>\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Remove all subpaths from the ofPath instance</p>\n<p>_description: _</p>\n<p>Removes all subpaths from the ofPath instance.</p>\n<!----------------------------------------------------------------------------->\n<p>###void close()</p>\n<!--\n_syntax: close()_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Close the current subpath and create a new subpath, either an\nofPolyline or ofSubPath by calling newSubPath(), ensuring that the\nclosed path doesn't have new points added to it.</p>\n<p>_description: _</p>\n<p>Closes the current subpath and creates a new subpath, either an ofPolyline or ofSubPath by calling newSubPath(), ensuring that the closed path doesn't have new points added to it.</p>\n<!----------------------------------------------------------------------------->\n<p>###void curveTo(&amp;p)</p>\n<!--\n_syntax: curveTo(&p)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Draws a curve to p from the current drawing position</p>\n<p>_description: _</p>\n<p>Draws a curve to p from the current drawing position.</p>\n<!----------------------------------------------------------------------------->\n<p>###void curveTo(&amp;p)</p>\n<!--\n_syntax: curveTo(&p)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draws a curve to p from the current drawing position.</p>\n<!----------------------------------------------------------------------------->\n<p>###void curveTo(x, y)</p>\n<!--\n_syntax: curveTo(x, y)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Draws a curve to x,y from the current drawing position</p>\n<p>_description: _</p>\n<p>Draws a curve to x,y from the current drawing position. To draw a small rose curves at the mouse position:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">float</span> scale <span class=\"token operator\">=</span> <span class=\"token function\">ofDist</span><span class=\"token punctuation\">(</span>mouseX<span class=\"token punctuation\">,</span> mouseY<span class=\"token punctuation\">,</span> px<span class=\"token punctuation\">,</span> py<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> theta <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> theta <span class=\"token operator\">&lt;</span> TWO_PI<span class=\"token punctuation\">;</span> theta <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> r <span class=\"token operator\">=</span>  <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>theta <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>scale<span class=\"token operator\">/</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> scale<span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">curveTo</span><span class=\"token punctuation\">(</span>mouseX <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> <span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mouseY <span class=\"token operator\">+</span> r <span class=\"token operator\">*</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span>theta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\npx <span class=\"token operator\">=</span> mouseX<span class=\"token punctuation\">;</span>\npy <span class=\"token operator\">=</span> mouseY<span class=\"token punctuation\">;</span>\n</code></pre>\n<!----------------------------------------------------------------------------->\n<p>###void curveTo(x, y, z)</p>\n<!--\n_syntax: curveTo(x, y, z)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Draws a curve to x,y,z from the current drawing position</p>\n<p>_description: _</p>\n<p>Draws a curve to x,y,z from the current drawing position.</p>\n<!----------------------------------------------------------------------------->\n<p>###void draw()</p>\n<!--\n_syntax: draw()_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Draws the path at 0,0. Calling draw() also calls tessellate()</p>\n<p>_description: _</p>\n<p>Draws the path at 0,0. Calling draw() also calls tessellate().</p>\n<!----------------------------------------------------------------------------->\n<p>###void draw(x, y)</p>\n<!--\n_syntax: draw(x, y)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Draws the path at x,y. Calling draw() also calls tessellate()</p>\n<p>_description: _</p>\n<p>Draws the path at x,y. Calling draw() also calls tessellate().</p>\n<!----------------------------------------------------------------------------->\n<p>###void ellipse(&amp;p, width, height)</p>\n<!--\n_syntax: ellipse(&p, width, height)_\n_name: ellipse_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float width, float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ellipse(&amp;p, width, height)</p>\n<!--\n_syntax: ellipse(&p, width, height)_\n_name: ellipse_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float width, float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ellipse(x, y, width, height)</p>\n<!--\n_syntax: ellipse(x, y, width, height)_\n_name: ellipse_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float width, float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void ellipse(x, y, z, width, height)</p>\n<!--\n_syntax: ellipse(x, y, z, width, height)_\n_name: ellipse_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float width, float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void flagShapeChanged()</p>\n<!--\n_syntax: flagShapeChanged()_\n_name: flagShapeChanged_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void generatePolylinesFromCommands()</p>\n<!--\n_syntax: generatePolylinesFromCommands()_\n_name: generatePolylinesFromCommands_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int getCircleResolution()</p>\n<!--\n_syntax: getCircleResolution()_\n_name: getCircleResolution_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int &amp; getCommands()</p>\n<!--\n_syntax: getCommands()_\n_name: getCommands_\n_returns: int &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###const int &amp; getCommands()</p>\n<!--\n_syntax: getCommands()_\n_name: getCommands_\n_returns: const int &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int getCurveResolution()</p>\n<!--\n_syntax: getCurveResolution()_\n_name: getCurveResolution_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofColor getFillColor()</p>\n<!--\n_syntax: getFillColor()_\n_name: getFillColor_\n_returns: ofColor_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the ofColor fill of the ofPath</p>\n<p>_description: _</p>\n<p>Returns the ofColor that the ofPath is using.</p>\n<!----------------------------------------------------------------------------->\n<p>###ofPath::Mode getMode()</p>\n<!--\n_syntax: getMode()_\n_name: getMode_\n_returns: ofPath::Mode_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###const int &amp; getOutline()</p>\n<!--\n_syntax: getOutline()_\n_name: getOutline_\n_returns: const int &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get an ofPolyline representing the outline of the ofPath.</p>\n<p>_description: _</p>\n<p>This returns an ofPolyline representing the outline of an ofPath.</p>\n<!----------------------------------------------------------------------------->\n<p>###ofColor getStrokeColor()</p>\n<!--\n_syntax: getStrokeColor()_\n_name: getStrokeColor_\n_returns: ofColor_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the stroke color of the ofPath</p>\n<p>_description: _</p>\n<p>Returns the stroke color that the ofPath is using.</p>\n<!----------------------------------------------------------------------------->\n<p>###float getStrokeWidth()</p>\n<!--\n_syntax: getStrokeWidth()_\n_name: getStrokeWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the stroke width of the ofPath</p>\n<p>The default value is `0</p>\n<p>_description: _</p>\n<p>Returns the stroke width.</p>\n<!----------------------------------------------------------------------------->\n<p>###const ofMesh &amp; getTessellation()</p>\n<!--\n_syntax: getTessellation()_\n_name: getTessellation_\n_returns: const ofMesh &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool getUseShapeColor()</p>\n<!--\n_syntax: getUseShapeColor()_\n_name: getUseShapeColor_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofPolyWindingMode getWindingMode()</p>\n<!--\n_syntax: getWindingMode()_\n_name: getWindingMode_\n_returns: ofPolyWindingMode_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get the poly winding mode currently in use.</p>\n<p>_description: _</p>\n<p>Returns the poly winding mode currently in use.</p>\n<!----------------------------------------------------------------------------->\n<p>###bool hasChanged()</p>\n<!--\n_syntax: hasChanged()_\n_name: hasChanged_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool hasOutline()</p>\n<!--\n_syntax: hasOutline()_\n_name: hasOutline_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool isFilled()</p>\n<!--\n_syntax: isFilled()_\n_name: isFilled_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Get whether the path is using a fill or not.</p>\n<p>The default value is <code>true</code></p>\n<p>_description: _</p>\n<p>Whether the path is using a fill or not.</p>\n<!----------------------------------------------------------------------------->\n<p>###ofPolyline &amp; lastPolyline()</p>\n<!--\n_syntax: lastPolyline()_\n_name: lastPolyline_\n_returns: ofPolyline &_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>}</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void lineTo(&amp;p)</p>\n<!--\n_syntax: lineTo(&p)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Draw a straight line from the current drawing position to the\nlocation indicated by p.</p>\n<p>_description: _</p>\n<p>Draws a straight line from the current drawing position to the location indicated by p.</p>\n<!----------------------------------------------------------------------------->\n<p>###void lineTo(&amp;p)</p>\n<!--\n_syntax: lineTo(&p)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draws a straight line from the current drawing position to the location indicated by p.</p>\n<!----------------------------------------------------------------------------->\n<p>###void lineTo(x, y)</p>\n<!--\n_syntax: lineTo(x, y)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Draw a straight line from the current drawing position to the\nlocation indicated by x,y.</p>\n<p>_description: _</p>\n<p>Draws a straight line from the current drawing position to the location indicated by x,y.</p>\n<!----------------------------------------------------------------------------->\n<p>###void lineTo(x, y, z)</p>\n<!--\n_syntax: lineTo(x, y, z)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Draw a straight line from the current drawing position to the\nlocation indicated by x,y,z.</p>\n<p>_description: _</p>\n<p>Draws a straight line from the current drawing position to the location indicated by x,y,z.</p>\n<!----------------------------------------------------------------------------->\n<p>###void moveTo(&amp;p)</p>\n<!--\n_syntax: moveTo(&p)_\n_name: moveTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Move the drawing position to p. This means that a subsequent calls to,\nfor instance, lineTo() or curveTo() will connect the location p to the new\nlocation.</p>\n<p>_description: _</p>\n<p>Moves the drawing position to p. This means that a subsequent calls to, for instance, lineTo() or curveTo() will connect the location p to the new location.</p>\n<!----------------------------------------------------------------------------->\n<p>###void moveTo(&amp;p)</p>\n<!--\n_syntax: moveTo(&p)_\n_name: moveTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Moves the drawing position to p. This means that a subsequent calls to, for instance, lineTo() or curveTo() will connect the location p to the new location.</p>\n<!----------------------------------------------------------------------------->\n<p>###void moveTo(x, y, z)</p>\n<!--\n_syntax: moveTo(x, y, z)_\n_name: moveTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Move the drawing position to x,y.z. This means that a subsequent\ncalls to, for instance, lineTo() or curveTo() will connect the\nlocation x,y,z to the new location.</p>\n<p>_description: _</p>\n<p>Moves the drawing position to x,y.z. This means that a subsequent calls to, for instance, lineTo() or curveTo() will connect the location x,y,z to the new location.</p>\n<!----------------------------------------------------------------------------->\n<p>###void newSubPath()</p>\n<!--\n_syntax: newSubPath()_\n_name: newSubPath_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create a new subpath, either an ofPolyline instance or an ofSubPath\ninstance. All points added after a call to ofSubPath will be done in\nthe newly created subpath. Calling close() automatically calls create\nnewSubPath(), ensuring that the closed path doesn't have new points\nadded to it.</p>\n<p>_description: _</p>\n<p>Creates a new subpath, either an ofPolyline instance or an ofSubPath instance. All points added after a call to ofSubPath will be done in the newly created subpath. Calling close() automatically calls create newSubPath(), ensuring that the closed path doesn't have new points added to it.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofPath()</h3>\n<!--\n_syntax: ofPath()_\n_name: ofPath_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create a new ofPath instance.</p>\n<p>_description: _</p>\n<p>Creates a new ofPath instance.</p>\n<!----------------------------------------------------------------------------->\n<p>###void quadBezierTo(&amp;cp1, &amp;cp2, &amp;p)</p>\n<!--\n_syntax: quadBezierTo(&cp1, &cp2, &p)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &cp1, const glm::vec3 &cp2, const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Create a quadratic bezier line in 3D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, cz1,\nthe control point at cx2, cy2, cz2, and that ends at the coordinates\nx, y, z.\n<img src=\"graphics/curves.jpg\" alt=\"Curves\"></p>\n<p>_description: _</p>\n<p>Create a quadratic bezier line in 3D space from the current drawing point with the control points indicated by ofPoint cp1 and ofPoint cp2,  and that ends at ofPoint p.\n<img src=\"curves.png\" alt=\"polyline curves\"></p>\n<!----------------------------------------------------------------------------->\n<p>###void quadBezierTo(&amp;cp1, &amp;cp2, &amp;p)</p>\n<!--\n_syntax: quadBezierTo(&cp1, &cp2, &p)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &cp1, const glm::vec2 &cp2, const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Create a quadratic bezier line in 3D space from the current drawing point with the control points indicated by ofPoint cp1 and ofPoint cp2,  and that ends at ofPoint p.\n<img src=\"curves.png\" alt=\"polyline curves\"></p>\n<!----------------------------------------------------------------------------->\n<p>###void quadBezierTo(cx1, cy1, cx2, cy2, x, y)</p>\n<!--\n_syntax: quadBezierTo(cx1, cy1, cx2, cy2, x, y)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cx2, float cy2, float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Creates a quadratic bezier line in 2D space from the current drawing\npoint with the beginning indicated by the point p1, the control point\nat p2, and that ends at the point p3.</p>\n<p>_description: _</p>\n<p>Creates a quadratic bezier line in 2D space from the current drawing point with the control points indicated by the coordinates (cx1, cy1) and (cx2, cy2), and that ends at the coordinate (x, y)</p>\n<!----------------------------------------------------------------------------->\n<p>###void quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z)</p>\n<!--\n_syntax: quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cz1, float cx2, float cy2, float cz2, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Creates a quadratic bezier line in 3D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, the\ncontrol point at cx2, cy2, and that ends at the coordinates x, y.</p>\n<p>_description: _</p>\n<p>Creates a quadratic bezier line in 3D space from the current drawing point with the control points indicated by the coordinates (cx1, cy1, cz1) and (cx2, cy2, cz2), and that ends at the coordinate (x, y, z).</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectRounded(&amp;b, r)</p>\n<!--\n_syntax: rectRounded(&b, r)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &b, float r_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectRounded(&amp;b, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</p>\n<!--\n_syntax: rectRounded(&b, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &b, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectRounded(&amp;p, w, h, r)</p>\n<!--\n_syntax: rectRounded(&p, w, h, r)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h, float r_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectRounded(&amp;p, w, h, r)</p>\n<!--\n_syntax: rectRounded(&p, w, h, r)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h, float r_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectRounded(&amp;p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</p>\n<!--\n_syntax: rectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectRounded(&amp;p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</p>\n<!--\n_syntax: rectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectRounded(x, y, w, h, r)</p>\n<!--\n_syntax: rectRounded(x, y, w, h, r)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float w, float h, float r_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectRounded(x, y, z, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)</p>\n<!--\n_syntax: rectRounded(x, y, z, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectangle(&amp;p, w, h)</p>\n<!--\n_syntax: rectangle(&p, w, h)_\n_name: rectangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectangle(&amp;p, w, h)</p>\n<!--\n_syntax: rectangle(&p, w, h)_\n_name: rectangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectangle(&amp;r)</p>\n<!--\n_syntax: rectangle(&r)_\n_name: rectangle_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &r_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectangle(x, y, w, h)</p>\n<!--\n_syntax: rectangle(x, y, w, h)_\n_name: rectangle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float w, float h_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rectangle(x, y, z, w, h)</p>\n<!--\n_syntax: rectangle(x, y, z, w, h)_\n_name: rectangle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w, float h_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rotateDeg(degrees, &amp;axis)</p>\n<!--\n_syntax: rotateDeg(degrees, &axis)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, const glm::vec3 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rotateDeg(degrees, &amp;axis)</p>\n<!--\n_syntax: rotateDeg(degrees, &axis)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, const glm::vec2 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rotateRad(radians, &amp;axis)</p>\n<!--\n_syntax: rotateRad(radians, &axis)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians, const glm::vec3 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void rotateRad(radians, &amp;axis)</p>\n<!--\n_syntax: rotateRad(radians, &axis)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians, const glm::vec2 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void scale(x, y)</p>\n<!--\n_syntax: scale(x, y)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Change the size of either the ofPolyline or ofSubPath instances that\nthe ofPath contains. These changes are non-reversible, so for instance\nscaling by 0,0 zeros out all data.</p>\n<p>_description: _</p>\n<p>Changes the size of either the ofPolyline or ofSubPath instances that the ofPath contains. These changes are non-reversible, so for instance scaling by 0,0 zeroes out all data.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setCircleResolution(circleResolution)</p>\n<!--\n_syntax: setCircleResolution(circleResolution)_\n_name: setCircleResolution_\n_returns: void_\n_returns_description: _\n_parameters: int circleResolution_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setColor(&amp;color)</p>\n<!--\n_syntax: setColor(&color)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &color_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the color of the path. This affects both the line if the\npath is drawn as wireframe and the fill if the path is drawn with\nfill. All subpaths are affected.</p>\n<p>_description: _</p>\n<p>This sets the color of the path. This affects both the line if the path is drawn as wireframe and the fill if the path is drawn with fill. All subpaths are affected.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setCurveResolution(curveResolution)</p>\n<!--\n_syntax: setCurveResolution(curveResolution)_\n_name: setCurveResolution_\n_returns: void_\n_returns_description: _\n_parameters: int curveResolution_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setFillColor(&amp;color)</p>\n<!--\n_syntax: setFillColor(&color)_\n_name: setFillColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &color_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the fill color of the path. This has no affect if the path is\ndrawn as wireframe.</p>\n<p>_description: _</p>\n<p>This sets the fill color of the path. This has no affect if the path is drawn as wireframe.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setFillHexColor(hex)</p>\n<!--\n_syntax: setFillHexColor(hex)_\n_name: setFillHexColor_\n_returns: void_\n_returns_description: _\n_parameters: int hex_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the fill color of the path. This has no affect if the path is\ndrawn as wireframe.</p>\n<p>_description: _</p>\n<p>This sets the fill color of the path. This has no affect if the path is drawn as wireframe.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setFilled(hasFill)</p>\n<!--\n_syntax: setFilled(hasFill)_\n_name: setFilled_\n_returns: void_\n_returns_description: _\n_parameters: bool hasFill_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set whether the path should be drawn as wireframes or filled.</p>\n<p>_description: _</p>\n<p>Sets whether the path should be drawn as wireframes or filled.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setHexColor(hex)</p>\n<!--\n_syntax: setHexColor(hex)_\n_name: setHexColor_\n_returns: void_\n_returns_description: _\n_parameters: int hex_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the color of the path. This affects both the line if the path is\ndrawn as wireframe and the fill if the path is drawn with fill. All\nsubpaths are affected.</p>\n<p>_description: _</p>\n<p>This sets the color of the path. This affects both the line if the path is drawn as wireframe and the fill if the path is drawn with fill. All subpaths are affected.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setMode(mode)</p>\n<!--\n_syntax: setMode(mode)_\n_name: setMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPath::Mode mode_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setPolyWindingMode(mode)</p>\n<!--\n_syntax: setPolyWindingMode(mode)_\n_name: setPolyWindingMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPolyWindingMode mode_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the way that the points in the sub paths are connected.</p>\n<p>OpenGL can only render convex polygons which means that any shape that\nisn't convex, i.e. that has points which are concave, going inwards,\nneed to be tessellated into triangles so that OpenGL can render them.\nIf you're using filled shapes with your ofPath this is done\nautomatically for you.</p>\n<p>The possible options you can pass in are:</p>\n<pre><code>OF_POLY_WINDING_ODD\nOF_POLY_WINDING_NONZERO\nOF_POLY_WINDING_POSITIVE\nOF_POLY_WINDING_NEGATIVE\nOF_POLY_WINDING_ABS_GEQ_TWO\n</code></pre>\n<p>_description: _</p>\n<p>This sets the way that the points in the sub paths are connected. OpenGL can only render convex polygons which means that any shape that isn't convex, i.e. that has points which are concave, going inwards, need to be tessellated into triangles so that OpenGL can render them. If you're using filled shapes with your ofPath this is done automatically for you. The possible options you can pass in are:</p>\n<p>OF_POLY_WINDING_ODD\nOF_POLY_WINDING_NONZERO\nOF_POLY_WINDING_POSITIVE\nOF_POLY_WINDING_NEGATIVE\nOF_POLY_WINDING_ABS_GEQ_TWO</p>\n<p><img src=\"winding_modes.gif\" alt=\"ofPath winding modes\"></p>\n<p>So adding the following points:</p>\n<pre><code class=\"language-{.cpp}\"><span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outer</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// inner 1</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// inner 2 (backwards)</span>\n\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// outer</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// inner 1</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">moveTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">lineTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">150</span><span class=\"token punctuation\">,</span> <span class=\"token number\">150</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// inner 2 (fwds)</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">ofTranslate</span><span class=\"token punctuation\">(</span><span class=\"token number\">410</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> ofApp<span class=\"token operator\">::</span><span class=\"token function\">keyPressed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    mode<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> mode <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span> mode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    path<span class=\"token punctuation\">.</span><span class=\"token function\">setPolyWindingMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofPolyWindingMode<span class=\"token punctuation\">)</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    path2<span class=\"token punctuation\">.</span><span class=\"token function\">setPolyWindingMode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofPolyWindingMode<span class=\"token punctuation\">)</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>we can see non zero and positive handle the winding differently:</p>\n<p><img src=\"path_winding.png\" alt=\"ofPath winding\"></p>\n<!----------------------------------------------------------------------------->\n<p>###void setStrokeColor(&amp;color)</p>\n<!--\n_syntax: setStrokeColor(&color)_\n_name: setStrokeColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &color_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the stroke color of the path. This has no affect if the path\nis drawn filled.</p>\n<p>_description: _</p>\n<p>This sets the stroke color of the path. This has no affect if the path is drawn filled.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setStrokeHexColor(hex)</p>\n<!--\n_syntax: setStrokeHexColor(hex)_\n_name: setStrokeHexColor_\n_returns: void_\n_returns_description: _\n_parameters: int hex_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the stroke color of the path. This has no affect if the path\nis drawn filled.</p>\n<p>_description: _</p>\n<p>This sets the stroke color of the path. This has no affect if the path is drawn filled.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setStrokeWidth(width)</p>\n<!--\n_syntax: setStrokeWidth(width)_\n_name: setStrokeWidth_\n_returns: void_\n_returns_description: _\n_parameters: float width_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Set the stroke width of the line if the ofPath is to be drawn\nnot in wireframe.</p>\n<p>_description: _</p>\n<p>Sets the stroke width of the line if the ofPath is to be drawn not in wireframe.</p>\n<!----------------------------------------------------------------------------->\n<p>###void setUseShapeColor(useColor)</p>\n<!--\n_syntax: setUseShapeColor(useColor)_\n_name: setUseShapeColor_\n_returns: void_\n_returns_description: _\n_parameters: bool useColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void simplify(tolerance = 0.3f)</p>\n<!--\n_syntax: simplify(tolerance = 0.3f)_\n_name: simplify_\n_returns: void_\n_returns_description: _\n_parameters: float tolerance=0.3f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void tessellate()</p>\n<!--\n_syntax: tessellate()_\n_name: tessellate_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void translate(&amp;p)</p>\n<!--\n_syntax: translate(&p)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void translate(&amp;p)</p>\n<!--\n_syntax: translate(&p)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void triangle(&amp;p1, &amp;p2, &amp;p3)</p>\n<!--\n_syntax: triangle(&p1, &p2, &p3)_\n_name: triangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p1, const glm::vec3 &p2, const glm::vec3 &p3_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void triangle(&amp;p1, &amp;p2, &amp;p3)</p>\n<!--\n_syntax: triangle(&p1, &p2, &p3)_\n_name: triangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p1, const glm::vec2 &p2, const glm::vec2 &p3_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void triangle(x1, y1, x2, y2, x3, y3)</p>\n<!--\n_syntax: triangle(x1, y1, x2, y2, x3, y3)_\n_name: triangle_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float x2, float y2, float x3, float y3_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void triangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)</p>\n<!--\n_syntax: triangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)_\n_name: triangle_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###bool bFill</p>\n<!--\n_name: bFill_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool bHasChanged</p>\n<!--\n_name: bHasChanged_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool bNeedsPolylinesGeneration</p>\n<!--\n_name: bNeedsPolylinesGeneration_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool bNeedsTessellation</p>\n<!--\n_name: bNeedsTessellation_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###bool bUseShapeColor</p>\n<!--\n_name: bUseShapeColor_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofMesh cachedTessellation</p>\n<!--\n_name: cachedTessellation_\n_type: ofMesh_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int circleResolution</p>\n<!--\n_name: circleResolution_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###Command commands</p>\n<!--\n_name: commands_\n_type: Command_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int curveResolution</p>\n<!--\n_name: curveResolution_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofColor fillColor</p>\n<!--\n_name: fillColor_\n_type: ofColor_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###Mode mode</p>\n<!--\n_name: mode_\n_type: Mode_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofPolyline polylines</p>\n<!--\n_name: polylines_\n_type: ofPolyline_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int prevCurveRes</p>\n<!--\n_name: prevCurveRes_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofColor strokeColor</p>\n<!--\n_name: strokeColor_\n_type: ofColor_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float strokeWidth</p>\n<!--\n_name: strokeWidth_\n_type: float_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofPolyline tessellatedContour</p>\n<!--\n_name: tessellatedContour_\n_type: ofPolyline_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofTessellator tessellator</p>\n<!--\n_name: tessellator_\n_type: ofTessellator_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofPolyWindingMode windingMode</p>\n<!--\n_name: windingMode_\n_type: ofPolyWindingMode_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofPath\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\nofPath is a way to create a path or multiple paths consisting of\npoints. It allows you to combine multiple paths consisting of points into\na single vector data object that can be drawn to the screen, manipulated\npoint by point, or manipulated with it's child subpaths. It is better at\nrepresenting and manipulating complex shapes than the ofPolyline and more\neasily represents multiple child lines or shapes as either ofSubPath or\nofPolyline instances. By default ofPath uses ofSubPath instances. Closing\nthe path automatically creates a new path:\n\n~~~~{.cpp}\nfor( int i = 0; i < 5; i++) {\n    // create a new ofSubPath\n    path.arc( i * 50 + 20, i * 50 + 20, i * 40 + 10, i * 40 + 10, 0, 360);\n    path.close();\n}\n~~~~\n\nTo use ofPolyline instances, simply set the mode to POLYLINES\n\n~~~~{.cpp}\npath.setMode(POLYLINES);\n~~~~\n\n\n\n\n\n##Description\n\nofPath is a way to create a path or multiple paths consisting of points. It allows you to combine multiple paths consisting of points into a single vector data object that can be drawn to the screen, manipulated point by point, or manipulated with it's child subpaths. It is better at representing and manipulating complex shapes than the [ofPolyline](ofPolyline.html) and more easily represents multiple child lines or shapes as either ofSubPath or ofPolyline instances. By default ofPath uses ofSubPath instances. Closing the path automatically creates a new path:\n\n~~~~{.cpp}\nfor( int i = 0; i < 5; i++) {\n    path.arc( i * 50 + 20, i * 50 + 20, i * 40 + 10, i * 40 + 10, 0, 360); // creates a new ofSubPath\n    path.close();\n}\n~~~~\n\nTo use ofPolyline instances, simply set the mode to POLYLINES\n\n~~~~{.cpp}\npath.setMode(ofPath::POLYLINES);\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###void addCommand(&command)\n\n<!--\n_syntax: addCommand(&command)_\n_name: addCommand_\n_returns: void_\n_returns_description: _\n_parameters: const ofPath::Command &command_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void append(&path)\n\n<!--\n_syntax: append(&path)_\n_name: append_\n_returns: void_\n_returns_description: _\n_parameters: const ofPath &path_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arc(&centre, radiusX, radiusY, angleBegin, angleEnd)\n\n<!--\n_syntax: arc(&centre, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate an arc at centre, which has the radiusX, radiusY, and begins at\nangleBegin and ends at angleEnd. To draw a circle with a radius of 50 pixels\nat 100, 100:\n\n\\note angleBegin needs to be larger than angleEnd, i.e. 0,180 is ok,\nwhile 180,0 is not.\n\n\n\n\n\n_description: _\n\nCreates an arc at centre, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd. To draw a circle with a radius of 50 pixels at 100, 100:\n\n~~~~{.cpp}\npath.arc( 100, 100, 50, 50, 0, 360);\n~~~~\n\nNote that angleEnd needs to be larger than angleBegin, i.e. 0, 180 is ok, while 180,0 is not.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arc(&centre, radiusX, radiusY, angleBegin, angleEnd)\n\n<!--\n_syntax: arc(&centre, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arc(&centre, radiusX, radiusY, angleBegin, angleEnd, clockwise)\n\n<!--\n_syntax: arc(&centre, radiusX, radiusY, angleBegin, angleEnd, clockwise)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd, bool clockwise_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCreates an arc at centre, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd. To draw a circle with a radius of 50 pixels at 100, 100:\n\n~~~~{.cpp}\npath.arc( 100, 100, 50, 50, 0, 360);\n~~~~\n\nNote that angleEnd needs to be larger than angleBegin, i.e. 0, 180 is ok, while 180,0 is not.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arc(&centre, radiusX, radiusY, angleBegin, angleEnd, clockwise)\n\n<!--\n_syntax: arc(&centre, radiusX, radiusY, angleBegin, angleEnd, clockwise)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd, bool clockwise_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arc(x, y, radiusX, radiusY, angleBegin, angleEnd)\n\n<!--\n_syntax: arc(x, y, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate an arc at x,y, which has the radiusX, radiusY, and begins at\nangleBegin and ends at angleEnd. To draws a shape with a radius of 200 pixels\nat 300, 300:\n\n~~~~{.cpp}\npath.moveTo(300, 300);\npath.arc( 300, 300, 200, 200, 0, 271); // note 271, not 270 for precision\n~~~~\n\n![ofPath arc](graphics/ofPath_arc.jpg)\n\n\\note angleBegin needs to be larger than angleEnd, i.e. 0, 180 is ok,\nwhile 180,0 is not.\n\n\n\n\n\n_description: _\n\nCreates an arc at x,y, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd. To draws a shape with a radius of 200 pixels at 300, 300:\n\n~~~~{.cpp}\npath.moveTo(300, 300);\npath.arc( 300, 300, 200, 200, 0, 271); // note 271, not 270 for precision\n~~~~\n\n![ofPath arc](ofPath_arc.png)\n\nNote that angleEnd needs to be larger than angleBegin, i.e. 0, 180 is ok, while 180,0 is not.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arc(x, y, z, radiusX, radiusY, angleBegin, angleEnd)\n\n<!--\n_syntax: arc(x, y, z, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arc_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate an arc at x,y,z, which has the radiusX, radiusY, and begins at\nangleBegin and ends at angleEnd.\n\n\n\n\n\n_description: _\n\nCreates an arc at x,y,z, which has the radiusX, radiusY, and begins at angleBegin and ends at angleEnd.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arcNegative(&centre, radiusX, radiusY, angleBegin, angleEnd)\n\n<!--\n_syntax: arcNegative(&centre, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arcNegative(&centre, radiusX, radiusY, angleBegin, angleEnd)\n\n<!--\n_syntax: arcNegative(&centre, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &centre, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arcNegative(x, y, radiusX, radiusY, angleBegin, angleEnd)\n\n<!--\n_syntax: arcNegative(x, y, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void arcNegative(x, y, z, radiusX, radiusY, angleBegin, angleEnd)\n\n<!--\n_syntax: arcNegative(x, y, z, radiusX, radiusY, angleBegin, angleEnd)_\n_name: arcNegative_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radiusX, float radiusY, float angleBegin, float angleEnd_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void bezierTo(&cp1, &cp2, &p)\n\n<!--\n_syntax: bezierTo(&cp1, &cp2, &p)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &cp1, const glm::vec3 &cp2, const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by glm::vec3 `cp1` and `cp2`, that ends at glm::vec3\nto.\n\n~~~~{.cpp}\nline.addVertex(glm::vec3(200, 400));\nline.bezierTo(100, 100, 800, 100, 700, 400);\n~~~~\n![polyline bezier](graphics/bezier.jpg)\nThe control points are shown in red.\n\n\n\n\n\n_description: _\n\nCreate a cubic bezier line from the current drawing point with the two control points indicated by ofPoint cp1 and ofPoint cp2, that ends at ofPoint p.\n\n~~~~{.cpp}\npath.moveto(ofPoint(200, 400));\npath.bezierTo(100, 100, 800, 100, 700, 400);\n~~~~\nCreates this:\n![polyline bezier](bezier.png)\nThe control points are shown in yellow.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void bezierTo(&cp1, &cp2, &p)\n\n<!--\n_syntax: bezierTo(&cp1, &cp2, &p)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &cp1, const glm::vec2 &cp2, const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCreate a cubic bezier line from the current drawing point with the two control points indicated by ofPoint cp1 and ofPoint cp2, that ends at ofPoint p.\n\n~~~~{.cpp}\npath.moveto(ofPoint(200, 400));\npath.bezierTo(100, 100, 800, 100, 700, 400);\n~~~~\nCreates this:\n![polyline bezier](bezier.png)\nThe control points are shown in yellow.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void bezierTo(cx1, cy1, cx2, cy2, x, y)\n\n<!--\n_syntax: bezierTo(cx1, cy1, cx2, cy2, x, y)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cx2, float cy2, float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a cubic bezier line from the current drawing point with the 2\ncontrol points indicated by the coordinates cx1, cy1 and cx2, cy2,\nthat ends at the coordinates x, y.\n\n\n\n\n\n_description: _\n\nCreate a cubic bezier line from the current drawing point with the two control points indicated by the coordinates (cx1, cy1) and (cx2, cy2), that ends at the coordinate (x, y).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z)\n\n<!--\n_syntax: bezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z)_\n_name: bezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cz1, float cx2, float cy2, float cz2, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a cubic bezier line in 3D space from the current drawing point\nwith the 2 control points indicated by the coordinates cx1, cy1, cz1\nand cx2, cy2, cz2, that ends at the coordinates x, y, z.\n\n\n\n\n\n_description: _\n\nCreate a cubic bezier line in 3D space from the current drawing point with the two control points indicated by the coordinates (cx1, cy1, cz1) and (cx2, cy2, cz2), that ends at the coordinate (x, y, z).\n\n~~~~{.cpp}\nfloat cx = ofGetWidth()/2;\nfloat cy = 200;\nfloat step = TWO_PI / 60;\nfor (float i = 0.0; i < TWO_PI; i+=step) {\n\n    if(i == 0.0) {\n        path.moveTo(cx + (400*cos(i)), cy+400, 400 * sin(i));\n    } else {\n        path.bezierTo( cx - (200*cos(i)), cy-100, 400 * sin(i),\n                       cx + (200*cos(i)), cy+600, 400 * sin(i),\n                       cx + (400*cos(i)), cy+400, 400 * sin(i));\n    }\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void circle(&p, radius)\n\n<!--\n_syntax: circle(&p, radius)_\n_name: circle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void circle(&p, radius)\n\n<!--\n_syntax: circle(&p, radius)_\n_name: circle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void circle(x, y, radius)\n\n<!--\n_syntax: circle(x, y, radius)_\n_name: circle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void circle(x, y, z, radius)\n\n<!--\n_syntax: circle(x, y, z, radius)_\n_name: circle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemove all subpaths from the ofPath instance\n\n\n\n\n\n_description: _\n\nRemoves all subpaths from the ofPath instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void close()\n\n<!--\n_syntax: close()_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClose the current subpath and create a new subpath, either an\nofPolyline or ofSubPath by calling newSubPath(), ensuring that the\nclosed path doesn't have new points added to it.\n\n\n\n\n\n_description: _\n\nCloses the current subpath and creates a new subpath, either an ofPolyline or ofSubPath by calling newSubPath(), ensuring that the closed path doesn't have new points added to it.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void curveTo(&p)\n\n<!--\n_syntax: curveTo(&p)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a curve to p from the current drawing position\n\n\n\n\n\n_description: _\n\nDraws a curve to p from the current drawing position.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void curveTo(&p)\n\n<!--\n_syntax: curveTo(&p)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraws a curve to p from the current drawing position.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void curveTo(x, y)\n\n<!--\n_syntax: curveTo(x, y)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a curve to x,y from the current drawing position\n\n\n\n\n\n_description: _\n\nDraws a curve to x,y from the current drawing position. To draw a small rose curves at the mouse position:\n\n~~~~{.cpp}\nfloat scale = ofDist(mouseX, mouseY, px, py);\n\nfor( float theta = 0; theta < TWO_PI; theta += 0.1)\n{\n    float r =  cos(theta * (scale/6)) * scale;\n    path.curveTo(mouseX + r * cos(theta), mouseY + r * sin(theta));\n}\n\npx = mouseX;\npy = mouseY;\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void curveTo(x, y, z)\n\n<!--\n_syntax: curveTo(x, y, z)_\n_name: curveTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws a curve to x,y,z from the current drawing position\n\n\n\n\n\n_description: _\n\nDraws a curve to x,y,z from the current drawing position.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw()\n\n<!--\n_syntax: draw()_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws the path at 0,0. Calling draw() also calls tessellate()\n\n\n\n\n\n_description: _\n\nDraws the path at 0,0. Calling draw() also calls tessellate().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(x, y)\n\n<!--\n_syntax: draw(x, y)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraws the path at x,y. Calling draw() also calls tessellate()\n\n\n\n\n\n_description: _\n\nDraws the path at x,y. Calling draw() also calls tessellate().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ellipse(&p, width, height)\n\n<!--\n_syntax: ellipse(&p, width, height)_\n_name: ellipse_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float width, float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ellipse(&p, width, height)\n\n<!--\n_syntax: ellipse(&p, width, height)_\n_name: ellipse_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float width, float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ellipse(x, y, width, height)\n\n<!--\n_syntax: ellipse(x, y, width, height)_\n_name: ellipse_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float width, float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void ellipse(x, y, z, width, height)\n\n<!--\n_syntax: ellipse(x, y, z, width, height)_\n_name: ellipse_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float width, float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void flagShapeChanged()\n\n<!--\n_syntax: flagShapeChanged()_\n_name: flagShapeChanged_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void generatePolylinesFromCommands()\n\n<!--\n_syntax: generatePolylinesFromCommands()_\n_name: generatePolylinesFromCommands_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getCircleResolution()\n\n<!--\n_syntax: getCircleResolution()_\n_name: getCircleResolution_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int & getCommands()\n\n<!--\n_syntax: getCommands()_\n_name: getCommands_\n_returns: int &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const int & getCommands()\n\n<!--\n_syntax: getCommands()_\n_name: getCommands_\n_returns: const int &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getCurveResolution()\n\n<!--\n_syntax: getCurveResolution()_\n_name: getCurveResolution_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor getFillColor()\n\n<!--\n_syntax: getFillColor()_\n_name: getFillColor_\n_returns: ofColor_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the ofColor fill of the ofPath\n\n\n\n\n\n_description: _\n\nReturns the ofColor that the ofPath is using.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPath::Mode getMode()\n\n<!--\n_syntax: getMode()_\n_name: getMode_\n_returns: ofPath::Mode_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const int & getOutline()\n\n<!--\n_syntax: getOutline()_\n_name: getOutline_\n_returns: const int &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet an ofPolyline representing the outline of the ofPath.\n\n\n\n\n\n_description: _\n\nThis returns an ofPolyline representing the outline of an ofPath.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor getStrokeColor()\n\n<!--\n_syntax: getStrokeColor()_\n_name: getStrokeColor_\n_returns: ofColor_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the stroke color of the ofPath\n\n\n\n\n\n_description: _\n\nReturns the stroke color that the ofPath is using.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getStrokeWidth()\n\n<!--\n_syntax: getStrokeWidth()_\n_name: getStrokeWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the stroke width of the ofPath\n\nThe default value is `0\n\n\n\n\n\n_description: _\n\nReturns the stroke width.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofMesh & getTessellation()\n\n<!--\n_syntax: getTessellation()_\n_name: getTessellation_\n_returns: const ofMesh &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool getUseShapeColor()\n\n<!--\n_syntax: getUseShapeColor()_\n_name: getUseShapeColor_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPolyWindingMode getWindingMode()\n\n<!--\n_syntax: getWindingMode()_\n_name: getWindingMode_\n_returns: ofPolyWindingMode_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the poly winding mode currently in use.\n\n\n\n\n\n_description: _\n\nReturns the poly winding mode currently in use.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasChanged()\n\n<!--\n_syntax: hasChanged()_\n_name: hasChanged_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasOutline()\n\n<!--\n_syntax: hasOutline()_\n_name: hasOutline_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isFilled()\n\n<!--\n_syntax: isFilled()_\n_name: isFilled_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet whether the path is using a fill or not.\n\nThe default value is `true`\n\n\n\n\n\n_description: _\n\nWhether the path is using a fill or not.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPolyline & lastPolyline()\n\n<!--\n_syntax: lastPolyline()_\n_name: lastPolyline_\n_returns: ofPolyline &_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void lineTo(&p)\n\n<!--\n_syntax: lineTo(&p)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a straight line from the current drawing position to the\nlocation indicated by p.\n\n\n\n\n\n_description: _\n\nDraws a straight line from the current drawing position to the location indicated by p.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void lineTo(&p)\n\n<!--\n_syntax: lineTo(&p)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraws a straight line from the current drawing position to the location indicated by p.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void lineTo(x, y)\n\n<!--\n_syntax: lineTo(x, y)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a straight line from the current drawing position to the\nlocation indicated by x,y.\n\n\n\n\n\n_description: _\n\nDraws a straight line from the current drawing position to the location indicated by x,y.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void lineTo(x, y, z)\n\n<!--\n_syntax: lineTo(x, y, z)_\n_name: lineTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw a straight line from the current drawing position to the\nlocation indicated by x,y,z.\n\n\n\n\n\n_description: _\n\nDraws a straight line from the current drawing position to the location indicated by x,y,z.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void moveTo(&p)\n\n<!--\n_syntax: moveTo(&p)_\n_name: moveTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMove the drawing position to p. This means that a subsequent calls to,\nfor instance, lineTo() or curveTo() will connect the location p to the new\nlocation.\n\n\n\n\n\n_description: _\n\nMoves the drawing position to p. This means that a subsequent calls to, for instance, lineTo() or curveTo() will connect the location p to the new location.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void moveTo(&p)\n\n<!--\n_syntax: moveTo(&p)_\n_name: moveTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMoves the drawing position to p. This means that a subsequent calls to, for instance, lineTo() or curveTo() will connect the location p to the new location.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void moveTo(x, y, z)\n\n<!--\n_syntax: moveTo(x, y, z)_\n_name: moveTo_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMove the drawing position to x,y.z. This means that a subsequent\ncalls to, for instance, lineTo() or curveTo() will connect the\nlocation x,y,z to the new location.\n\n\n\n\n\n_description: _\n\nMoves the drawing position to x,y.z. This means that a subsequent calls to, for instance, lineTo() or curveTo() will connect the location x,y,z to the new location.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void newSubPath()\n\n<!--\n_syntax: newSubPath()_\n_name: newSubPath_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a new subpath, either an ofPolyline instance or an ofSubPath\ninstance. All points added after a call to ofSubPath will be done in\nthe newly created subpath. Calling close() automatically calls create\nnewSubPath(), ensuring that the closed path doesn't have new points\nadded to it.\n\n\n\n\n\n_description: _\n\nCreates a new subpath, either an ofPolyline instance or an ofSubPath instance. All points added after a call to ofSubPath will be done in the newly created subpath. Calling close() automatically calls create newSubPath(), ensuring that the closed path doesn't have new points added to it.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofPath()\n\n<!--\n_syntax: ofPath()_\n_name: ofPath_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a new ofPath instance.\n\n\n\n\n\n_description: _\n\nCreates a new ofPath instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void quadBezierTo(&cp1, &cp2, &p)\n\n<!--\n_syntax: quadBezierTo(&cp1, &cp2, &p)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &cp1, const glm::vec3 &cp2, const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a quadratic bezier line in 3D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, cz1,\nthe control point at cx2, cy2, cz2, and that ends at the coordinates\nx, y, z.\n![Curves](graphics/curves.jpg)\n\n\n\n\n\n_description: _\n\nCreate a quadratic bezier line in 3D space from the current drawing point with the control points indicated by ofPoint cp1 and ofPoint cp2,  and that ends at ofPoint p.\n![polyline curves](curves.png)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void quadBezierTo(&cp1, &cp2, &p)\n\n<!--\n_syntax: quadBezierTo(&cp1, &cp2, &p)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &cp1, const glm::vec2 &cp2, const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCreate a quadratic bezier line in 3D space from the current drawing point with the control points indicated by ofPoint cp1 and ofPoint cp2,  and that ends at ofPoint p.\n![polyline curves](curves.png)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void quadBezierTo(cx1, cy1, cx2, cy2, x, y)\n\n<!--\n_syntax: quadBezierTo(cx1, cy1, cx2, cy2, x, y)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cx2, float cy2, float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a quadratic bezier line in 2D space from the current drawing\npoint with the beginning indicated by the point p1, the control point\nat p2, and that ends at the point p3.\n\n\n\n\n\n_description: _\n\nCreates a quadratic bezier line in 2D space from the current drawing point with the control points indicated by the coordinates (cx1, cy1) and (cx2, cy2), and that ends at the coordinate (x, y)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z)\n\n<!--\n_syntax: quadBezierTo(cx1, cy1, cz1, cx2, cy2, cz2, x, y, z)_\n_name: quadBezierTo_\n_returns: void_\n_returns_description: _\n_parameters: float cx1, float cy1, float cz1, float cx2, float cy2, float cz2, float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreates a quadratic bezier line in 3D space from the current drawing\npoint with the beginning indicated by the coordinates cx1, cy1, the\ncontrol point at cx2, cy2, and that ends at the coordinates x, y.\n\n\n\n\n\n_description: _\n\nCreates a quadratic bezier line in 3D space from the current drawing point with the control points indicated by the coordinates (cx1, cy1, cz1) and (cx2, cy2, cz2), and that ends at the coordinate (x, y, z).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectRounded(&b, r)\n\n<!--\n_syntax: rectRounded(&b, r)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &b, float r_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectRounded(&b, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)\n\n<!--\n_syntax: rectRounded(&b, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &b, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectRounded(&p, w, h, r)\n\n<!--\n_syntax: rectRounded(&p, w, h, r)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h, float r_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectRounded(&p, w, h, r)\n\n<!--\n_syntax: rectRounded(&p, w, h, r)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h, float r_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)\n\n<!--\n_syntax: rectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)\n\n<!--\n_syntax: rectRounded(&p, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectRounded(x, y, w, h, r)\n\n<!--\n_syntax: rectRounded(x, y, w, h, r)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float w, float h, float r_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectRounded(x, y, z, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)\n\n<!--\n_syntax: rectRounded(x, y, z, w, h, topLeftRadius, topRightRadius, bottomRightRadius, bottomLeftRadius)_\n_name: rectRounded_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w, float h, float topLeftRadius, float topRightRadius, float bottomRightRadius, float bottomLeftRadius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectangle(&p, w, h)\n\n<!--\n_syntax: rectangle(&p, w, h)_\n_name: rectangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p, float w, float h_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectangle(&p, w, h)\n\n<!--\n_syntax: rectangle(&p, w, h)_\n_name: rectangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p, float w, float h_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectangle(&r)\n\n<!--\n_syntax: rectangle(&r)_\n_name: rectangle_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &r_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectangle(x, y, w, h)\n\n<!--\n_syntax: rectangle(x, y, w, h)_\n_name: rectangle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float w, float h_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rectangle(x, y, z, w, h)\n\n<!--\n_syntax: rectangle(x, y, z, w, h)_\n_name: rectangle_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z, float w, float h_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateDeg(degrees, &axis)\n\n<!--\n_syntax: rotateDeg(degrees, &axis)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, const glm::vec3 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateDeg(degrees, &axis)\n\n<!--\n_syntax: rotateDeg(degrees, &axis)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, const glm::vec2 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateRad(radians, &axis)\n\n<!--\n_syntax: rotateRad(radians, &axis)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians, const glm::vec3 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateRad(radians, &axis)\n\n<!--\n_syntax: rotateRad(radians, &axis)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians, const glm::vec2 &axis_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scale(x, y)\n\n<!--\n_syntax: scale(x, y)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nChange the size of either the ofPolyline or ofSubPath instances that\nthe ofPath contains. These changes are non-reversible, so for instance\nscaling by 0,0 zeros out all data.\n\n\n\n\n\n_description: _\n\nChanges the size of either the ofPolyline or ofSubPath instances that the ofPath contains. These changes are non-reversible, so for instance scaling by 0,0 zeroes out all data.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCircleResolution(circleResolution)\n\n<!--\n_syntax: setCircleResolution(circleResolution)_\n_name: setCircleResolution_\n_returns: void_\n_returns_description: _\n_parameters: int circleResolution_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(&color)\n\n<!--\n_syntax: setColor(&color)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &color_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the color of the path. This affects both the line if the\npath is drawn as wireframe and the fill if the path is drawn with\nfill. All subpaths are affected.\n\n\n\n\n\n_description: _\n\nThis sets the color of the path. This affects both the line if the path is drawn as wireframe and the fill if the path is drawn with fill. All subpaths are affected.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCurveResolution(curveResolution)\n\n<!--\n_syntax: setCurveResolution(curveResolution)_\n_name: setCurveResolution_\n_returns: void_\n_returns_description: _\n_parameters: int curveResolution_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFillColor(&color)\n\n<!--\n_syntax: setFillColor(&color)_\n_name: setFillColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &color_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the fill color of the path. This has no affect if the path is\ndrawn as wireframe.\n\n\n\n\n\n_description: _\n\nThis sets the fill color of the path. This has no affect if the path is drawn as wireframe.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFillHexColor(hex)\n\n<!--\n_syntax: setFillHexColor(hex)_\n_name: setFillHexColor_\n_returns: void_\n_returns_description: _\n_parameters: int hex_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the fill color of the path. This has no affect if the path is\ndrawn as wireframe.\n\n\n\n\n\n_description: _\n\nThis sets the fill color of the path. This has no affect if the path is drawn as wireframe.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFilled(hasFill)\n\n<!--\n_syntax: setFilled(hasFill)_\n_name: setFilled_\n_returns: void_\n_returns_description: _\n_parameters: bool hasFill_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet whether the path should be drawn as wireframes or filled.\n\n\n\n\n\n_description: _\n\nSets whether the path should be drawn as wireframes or filled.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHexColor(hex)\n\n<!--\n_syntax: setHexColor(hex)_\n_name: setHexColor_\n_returns: void_\n_returns_description: _\n_parameters: int hex_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the color of the path. This affects both the line if the path is\ndrawn as wireframe and the fill if the path is drawn with fill. All\nsubpaths are affected.\n\n\n\n\n\n_description: _\n\nThis sets the color of the path. This affects both the line if the path is drawn as wireframe and the fill if the path is drawn with fill. All subpaths are affected.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setMode(mode)\n\n<!--\n_syntax: setMode(mode)_\n_name: setMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPath::Mode mode_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPolyWindingMode(mode)\n\n<!--\n_syntax: setPolyWindingMode(mode)_\n_name: setPolyWindingMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPolyWindingMode mode_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the way that the points in the sub paths are connected.\n\nOpenGL can only render convex polygons which means that any shape that\nisn't convex, i.e. that has points which are concave, going inwards,\nneed to be tessellated into triangles so that OpenGL can render them.\nIf you're using filled shapes with your ofPath this is done\nautomatically for you.\n\nThe possible options you can pass in are:\n\n    OF_POLY_WINDING_ODD\n    OF_POLY_WINDING_NONZERO\n    OF_POLY_WINDING_POSITIVE\n    OF_POLY_WINDING_NEGATIVE\n    OF_POLY_WINDING_ABS_GEQ_TWO\n\n\n\n\n\n_description: _\n\nThis sets the way that the points in the sub paths are connected. OpenGL can only render convex polygons which means that any shape that isn't convex, i.e. that has points which are concave, going inwards, need to be tessellated into triangles so that OpenGL can render them. If you're using filled shapes with your ofPath this is done automatically for you. The possible options you can pass in are:\n\nOF_POLY_WINDING_ODD\nOF_POLY_WINDING_NONZERO\nOF_POLY_WINDING_POSITIVE\nOF_POLY_WINDING_NEGATIVE\nOF_POLY_WINDING_ABS_GEQ_TWO\n\n![ofPath winding modes](winding_modes.gif)\n\nSo adding the following points:\n\n~~~~{.cpp}\nvoid ofApp::setup(){\n\n    path.lineTo(0, 400);\n    path.lineTo(400, 400);\n    path.lineTo(400, 0);\n    path.lineTo(0, 0); // outer\n    path.close();\n    path.moveTo(100, 100);\n    path.lineTo(100, 300);\n    path.lineTo(300, 300);\n    path.lineTo(300, 100);\n    path.lineTo(100, 100); // inner 1\n    path.close();\n    path.moveTo(250, 150);\n    path.lineTo(150, 150);\n    path.lineTo(150, 250);\n    path.lineTo(250, 250);\n    path.lineTo(250, 150); // inner 2 (backwards)\n\n    path2.lineTo(0, 400);\n    path2.lineTo(400, 400);\n    path2.lineTo(400, 0);\n    path2.lineTo(0, 0); // outer\n    path2.close();\n    path2.moveTo(100, 100);\n    path2.lineTo(300, 100);\n    path2.lineTo(300, 300);\n    path2.lineTo(100, 300);\n    path2.lineTo(100, 100); // inner 1\n    path2.close();\n    path2.moveTo(150, 150);\n    path2.lineTo(250, 150);\n    path2.lineTo(250, 250);\n    path2.lineTo(150, 250);\n    path2.lineTo(150, 150); // inner 2 (fwds)\n\n}\n\nvoid ofApp::draw(){\n\n    ofTranslate(40,40);\n    path.draw();\n    ofTranslate(410, 0);\n    path2.draw();\n\n}\n\nvoid ofApp::keyPressed(int key){\n\n    mode++;\n    if( mode > 4 ) mode = 0;\n\n    path.setPolyWindingMode((ofPolyWindingMode) mode);\n    path2.setPolyWindingMode((ofPolyWindingMode) mode);\n\n}\n~~~~\n\nwe can see non zero and positive handle the winding differently:\n\n![ofPath winding](path_winding.png)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setStrokeColor(&color)\n\n<!--\n_syntax: setStrokeColor(&color)_\n_name: setStrokeColor_\n_returns: void_\n_returns_description: _\n_parameters: const ofColor &color_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the stroke color of the path. This has no affect if the path\nis drawn filled.\n\n\n\n\n\n_description: _\n\nThis sets the stroke color of the path. This has no affect if the path is drawn filled.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setStrokeHexColor(hex)\n\n<!--\n_syntax: setStrokeHexColor(hex)_\n_name: setStrokeHexColor_\n_returns: void_\n_returns_description: _\n_parameters: int hex_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the stroke color of the path. This has no affect if the path\nis drawn filled.\n\n\n\n\n\n_description: _\n\nThis sets the stroke color of the path. This has no affect if the path is drawn filled.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setStrokeWidth(width)\n\n<!--\n_syntax: setStrokeWidth(width)_\n_name: setStrokeWidth_\n_returns: void_\n_returns_description: _\n_parameters: float width_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the stroke width of the line if the ofPath is to be drawn\nnot in wireframe.\n\n\n\n\n\n_description: _\n\nSets the stroke width of the line if the ofPath is to be drawn not in wireframe.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setUseShapeColor(useColor)\n\n<!--\n_syntax: setUseShapeColor(useColor)_\n_name: setUseShapeColor_\n_returns: void_\n_returns_description: _\n_parameters: bool useColor_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void simplify(tolerance = 0.3f)\n\n<!--\n_syntax: simplify(tolerance = 0.3f)_\n_name: simplify_\n_returns: void_\n_returns_description: _\n_parameters: float tolerance=0.3f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void tessellate()\n\n<!--\n_syntax: tessellate()_\n_name: tessellate_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(&p)\n\n<!--\n_syntax: translate(&p)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(&p)\n\n<!--\n_syntax: translate(&p)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void triangle(&p1, &p2, &p3)\n\n<!--\n_syntax: triangle(&p1, &p2, &p3)_\n_name: triangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p1, const glm::vec3 &p2, const glm::vec3 &p3_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void triangle(&p1, &p2, &p3)\n\n<!--\n_syntax: triangle(&p1, &p2, &p3)_\n_name: triangle_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec2 &p1, const glm::vec2 &p2, const glm::vec2 &p3_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void triangle(x1, y1, x2, y2, x3, y3)\n\n<!--\n_syntax: triangle(x1, y1, x2, y2, x3, y3)_\n_name: triangle_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float x2, float y2, float x3, float y3_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void triangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)\n\n<!--\n_syntax: triangle(x1, y1, z1, x2, y2, z2, x3, y3, z3)_\n_name: triangle_\n_returns: void_\n_returns_description: _\n_parameters: float x1, float y1, float z1, float x2, float y2, float z2, float x3, float y3, float z3_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bFill\n\n<!--\n_name: bFill_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bHasChanged\n\n<!--\n_name: bHasChanged_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bNeedsPolylinesGeneration\n\n<!--\n_name: bNeedsPolylinesGeneration_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bNeedsTessellation\n\n<!--\n_name: bNeedsTessellation_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bUseShapeColor\n\n<!--\n_name: bUseShapeColor_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh cachedTessellation\n\n<!--\n_name: cachedTessellation_\n_type: ofMesh_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int circleResolution\n\n<!--\n_name: circleResolution_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###Command commands\n\n<!--\n_name: commands_\n_type: Command_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int curveResolution\n\n<!--\n_name: curveResolution_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor fillColor\n\n<!--\n_name: fillColor_\n_type: ofColor_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###Mode mode\n\n<!--\n_name: mode_\n_type: Mode_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPolyline polylines\n\n<!--\n_name: polylines_\n_type: ofPolyline_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int prevCurveRes\n\n<!--\n_name: prevCurveRes_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofColor strokeColor\n\n<!--\n_name: strokeColor_\n_type: ofColor_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float strokeWidth\n\n<!--\n_name: strokeWidth_\n_type: float_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPolyline tessellatedContour\n\n<!--\n_name: tessellatedContour_\n_type: ofPolyline_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTessellator tessellator\n\n<!--\n_name: tessellator_\n_type: ofTessellator_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPolyWindingMode windingMode\n\n<!--\n_name: windingMode_\n_type: ofPolyWindingMode_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}