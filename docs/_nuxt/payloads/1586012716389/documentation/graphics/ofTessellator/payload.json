{"data":[{"page":{"entry":{"name":"ofTessellator","filename":"ofTessellator.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/graphics/ofTessellator.markdown","path":"/documentation/graphics/ofTessellator","route":"/documentation/graphics/ofTessellator.markdown","dir":"../ofSite/documentation/graphics","ext":"markdown","type":"page","id":2359,"parent":2325,"breadcrumbs":[2325,1968],"siblings":[],"translations":{}},"description":{"short":"<p>\\brief\nofTessellator exists for one purpose: to turn ofPolylines into ofMeshes so\nthat they can be more efficiently displayed using OpenGL. The ofPath class\nuses tessellation to turn its paths into openGL-ready shapes under the hood,\nso if you're interested in just having ofPolyline instances converted to\nmeshes, it's handled for you by ofPath. If you're interested in using the\ntessellation multiple polylines at a time, then you'll find what you need in\nthe ofTessellator. Many shapes can't be drawn by OpenGL without tessellation,\nbut by breaking them into triangles or quads, they can be drawn easily.</p>\n<p>An example: The fairly simple shape shown on the left needs to be broken\ninto triangles to be displayed, an example of how this might be done is\nshown on the right.</p>\n<p><img src=\"graphics/tessellation.jpg\" alt=\"tessellation\"></p>\n","full":"<p>ofTessellator exists for one purpose: to turn ofPolylines into ofMeshes so that they can be more efficiently displayed using OpenGL. The ofPath class uses tessellation to turn its paths into openGL-ready shapes under the hood, so if you're interested in just having ofPolyline instances converted to meshes, it's handled for you by ofPath. If you're interested in using the tessellation multiple polylines at a time, then you'll find what you need in the ofTessellator. Many shapes can't be drawn by OpenGL without tessellation, but by breaking them into triangles or quads, they can be drawn easily, for instance:</p>\n<p>The fairly simple shape shown on the left needs to be broken into triangles to be displayed, an example of how this might be done is shown on the right.</p>\n<p><img src=\"tessellation.png\" alt=\"tessellation\"></p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"init()","name":"init","returns":"void","returns_description":null,"parameters":null,"access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofTessellator(&mom)","name":"ofTessellator","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofTessellator <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Copy constructor to copy properties from one tessellator to another.</p>\n","desc":"<p>Copy constructor to copy properties from one tessellator to another.</p>\n","counter":1},{"syntax":"ofTessellator()","name":"ofTessellator","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator=(&mom)","name":"operator=","returns":"ofTessellator &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofTessellator <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Operator overloading to copy properties from one tessellator to another.</p>\n","desc":"<p>Operator overloading to copy properties from one tessellator to another.</p>\n","counter":0},{"syntax":"performTessellation(polyWindingMode, &dstmesh, bIs2D)","name":"performTessellation","returns":"void","returns_description":null,"parameters":"ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> ofMesh <span class=\"token operator\">&amp;</span>dstmesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D","access":"private","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"short":"","desc":""},{"short":"<p>Tessellates a vector of ofPolyline instances into a single\nofMesh instance using the winding mode set in ofPolyWindingMode.</p>\n","desc":"<p>Tessellates a vector of ofPolyline instances into a single ofMesh instance using the winding mode set in ofPolyWindingMode.</p>\n"},{"syntax":"tessellateToMesh(&src, polyWindingMode, &dstmesh, bIs2D = false)","name":"tessellateToMesh","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPolyline <span class=\"token operator\">&amp;</span>src<span class=\"token punctuation\">,</span> ofPolyWindingMode polyWindingMode<span class=\"token punctuation\">,</span> ofMesh <span class=\"token operator\">&amp;</span>dstmesh<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bIs2D<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Tessellates a ofPolyline instance into a single ofMesh instance\nusing the winding mode set in ofPolyWindingMode.</p>\n","desc":"<p>Tessellates a vector of ofPolyline instances into a single ofMesh instance using the winding mode set in ofPolyWindingMode.</p>\n","counter":0},{"short":"<p>Tessellates a vector of ofPolyline instances into vector of\nofPolyline instances using the winding mode set in ofPolyWindingMode.</p>\n","desc":"<p>Tessellates a vector of ofPolyline instances into vector of ofPolyline instances using the winding mode set in ofPolyWindingMode.</p>\n"},{"short":"<p>Tessellate multiple polylines into a single polyline.</p>\n","desc":"<p>Tessellates a vector of ofPolyline instances into vector of ofPolyline instances using the winding mode set in ofPolyWindingMode.</p>\n"},{"syntax":"~ofTessellator()","name":"~ofTessellator","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"name":"cacheTess","type":"TESStesselator *","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"tessAllocator","type":"TESSalloc","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofTessellator</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>\\brief\nofTessellator exists for one purpose: to turn ofPolylines into ofMeshes so\nthat they can be more efficiently displayed using OpenGL. The ofPath class\nuses tessellation to turn its paths into openGL-ready shapes under the hood,\nso if you're interested in just having ofPolyline instances converted to\nmeshes, it's handled for you by ofPath. If you're interested in using the\ntessellation multiple polylines at a time, then you'll find what you need in\nthe ofTessellator. Many shapes can't be drawn by OpenGL without tessellation,\nbut by breaking them into triangles or quads, they can be drawn easily.</p>\n<p>An example: The fairly simple shape shown on the left needs to be broken\ninto triangles to be displayed, an example of how this might be done is\nshown on the right.</p>\n<p><img src=\"graphics/tessellation.jpg\" alt=\"tessellation\"></p>\n<p>##Description</p>\n<p>ofTessellator exists for one purpose: to turn ofPolylines into ofMeshes so that they can be more efficiently displayed using OpenGL. The ofPath class uses tessellation to turn its paths into openGL-ready shapes under the hood, so if you're interested in just having ofPolyline instances converted to meshes, it's handled for you by ofPath. If you're interested in using the tessellation multiple polylines at a time, then you'll find what you need in the ofTessellator. Many shapes can't be drawn by OpenGL without tessellation, but by breaking them into triangles or quads, they can be drawn easily, for instance:</p>\n<p>The fairly simple shape shown on the left needs to be broken into triangles to be displayed, an example of how this might be done is shown on the right.</p>\n<p><img src=\"tessellation.png\" alt=\"tessellation\"></p>\n<p>##Methods</p>\n<p>###void init()</p>\n<!--\n_syntax: init()_\n_name: init_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofTessellator(&amp;mom)</h3>\n<!--\n_syntax: ofTessellator(&mom)_\n_name: ofTessellator_\n_returns: _\n_returns_description: _\n_parameters: const ofTessellator &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Copy constructor to copy properties from one tessellator to another.</p>\n<p>_description: _</p>\n<p>Copy constructor to copy properties from one tessellator to another.</p>\n<!----------------------------------------------------------------------------->\n<h3>ofTessellator()</h3>\n<!--\n_syntax: ofTessellator()_\n_name: ofTessellator_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofTessellator &amp; operator=(&amp;mom)</p>\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: ofTessellator &_\n_returns_description: _\n_parameters: const ofTessellator &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Operator overloading to copy properties from one tessellator to another.</p>\n<p>_description: _</p>\n<p>Operator overloading to copy properties from one tessellator to another.</p>\n<!----------------------------------------------------------------------------->\n<p>###void performTessellation(polyWindingMode, &amp;dstmesh, bIs2D)</p>\n<!--\n_syntax: performTessellation(polyWindingMode, &dstmesh, bIs2D)_\n_name: performTessellation_\n_returns: void_\n_returns_description: _\n_parameters: ofPolyWindingMode polyWindingMode, ofMesh &dstmesh, bool bIs2D_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void performTessellation(polyWindingMode, &amp;dstpoly, bIs2D)</p>\n<!--\n_syntax: performTessellation(polyWindingMode, &dstpoly, bIs2D)_\n_name: performTessellation_\n_returns: void_\n_returns_description: _\n_parameters: ofPolyWindingMode polyWindingMode, vector< ofPolyline > &dstpoly, bool bIs2D_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void tessellateToMesh(&amp;src, polyWindingMode, &amp;dstmesh, bIs2D = false)</p>\n<!--\n_syntax: tessellateToMesh(&src, polyWindingMode, &dstmesh, bIs2D = false)_\n_name: tessellateToMesh_\n_returns: void_\n_returns_description: _\n_parameters: const vector< ofPolyline > &src, ofPolyWindingMode polyWindingMode, ofMesh &dstmesh, bool bIs2D=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Tessellates a vector of ofPolyline instances into a single\nofMesh instance using the winding mode set in ofPolyWindingMode.</p>\n<p>_description: _</p>\n<p>Tessellates a vector of ofPolyline instances into a single ofMesh instance using the winding mode set in ofPolyWindingMode.</p>\n<!----------------------------------------------------------------------------->\n<p>###void tessellateToMesh(&amp;src, polyWindingMode, &amp;dstmesh, bIs2D = false)</p>\n<!--\n_syntax: tessellateToMesh(&src, polyWindingMode, &dstmesh, bIs2D = false)_\n_name: tessellateToMesh_\n_returns: void_\n_returns_description: _\n_parameters: const ofPolyline &src, ofPolyWindingMode polyWindingMode, ofMesh &dstmesh, bool bIs2D=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Tessellates a ofPolyline instance into a single ofMesh instance\nusing the winding mode set in ofPolyWindingMode.</p>\n<p>_description: _</p>\n<p>Tessellates a vector of ofPolyline instances into a single ofMesh instance using the winding mode set in ofPolyWindingMode.</p>\n<!----------------------------------------------------------------------------->\n<p>###void tessellateToPolylines(&amp;src, polyWindingMode, &amp;dstpoly, bIs2D = false)</p>\n<!--\n_syntax: tessellateToPolylines(&src, polyWindingMode, &dstpoly, bIs2D = false)_\n_name: tessellateToPolylines_\n_returns: void_\n_returns_description: _\n_parameters: const vector< ofPolyline > &src, ofPolyWindingMode polyWindingMode, vector< ofPolyline > &dstpoly, bool bIs2D=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Tessellates a vector of ofPolyline instances into vector of\nofPolyline instances using the winding mode set in ofPolyWindingMode.</p>\n<p>_description: _</p>\n<p>Tessellates a vector of ofPolyline instances into vector of ofPolyline instances using the winding mode set in ofPolyWindingMode.</p>\n<!----------------------------------------------------------------------------->\n<p>###void tessellateToPolylines(&amp;src, polyWindingMode, &amp;dstpoly, bIs2D = false)</p>\n<!--\n_syntax: tessellateToPolylines(&src, polyWindingMode, &dstpoly, bIs2D = false)_\n_name: tessellateToPolylines_\n_returns: void_\n_returns_description: _\n_parameters: const ofPolyline &src, ofPolyWindingMode polyWindingMode, vector< ofPolyline > &dstpoly, bool bIs2D=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>Tessellate multiple polylines into a single polyline.</p>\n<p>_description: _</p>\n<p>Tessellates a vector of ofPolyline instances into vector of ofPolyline instances using the winding mode set in ofPolyWindingMode.</p>\n<!----------------------------------------------------------------------------->\n<h3>~ofTessellator()</h3>\n<!--\n_syntax: ~ofTessellator()_\n_name: ~ofTessellator_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###TESStesselator * cacheTess</p>\n<!--\n_name: cacheTess_\n_type: TESStesselator *_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###TESSalloc tessAllocator</p>\n<!--\n_name: tessAllocator_\n_type: TESSalloc_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofTessellator\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\\brief\nofTessellator exists for one purpose: to turn ofPolylines into ofMeshes so\nthat they can be more efficiently displayed using OpenGL. The ofPath class\nuses tessellation to turn its paths into openGL-ready shapes under the hood,\nso if you're interested in just having ofPolyline instances converted to\nmeshes, it's handled for you by ofPath. If you're interested in using the\ntessellation multiple polylines at a time, then you'll find what you need in\nthe ofTessellator. Many shapes can't be drawn by OpenGL without tessellation,\nbut by breaking them into triangles or quads, they can be drawn easily.\n\nAn example: The fairly simple shape shown on the left needs to be broken\ninto triangles to be displayed, an example of how this might be done is\nshown on the right.\n\n![tessellation](graphics/tessellation.jpg)\n\n\n\n\n\n##Description\n\nofTessellator exists for one purpose: to turn ofPolylines into ofMeshes so that they can be more efficiently displayed using OpenGL. The ofPath class uses tessellation to turn its paths into openGL-ready shapes under the hood, so if you're interested in just having ofPolyline instances converted to meshes, it's handled for you by ofPath. If you're interested in using the tessellation multiple polylines at a time, then you'll find what you need in the ofTessellator. Many shapes can't be drawn by OpenGL without tessellation, but by breaking them into triangles or quads, they can be drawn easily, for instance:\n\nThe fairly simple shape shown on the left needs to be broken into triangles to be displayed, an example of how this might be done is shown on the right.\n\n![tessellation](tessellation.png)\n\n\n\n\n\n##Methods\n\n\n\n###void init()\n\n<!--\n_syntax: init()_\n_name: init_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofTessellator(&mom)\n\n<!--\n_syntax: ofTessellator(&mom)_\n_name: ofTessellator_\n_returns: _\n_returns_description: _\n_parameters: const ofTessellator &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCopy constructor to copy properties from one tessellator to another.\n\n\n\n\n\n_description: _\n\nCopy constructor to copy properties from one tessellator to another. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofTessellator()\n\n<!--\n_syntax: ofTessellator()_\n_name: ofTessellator_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTessellator & operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: ofTessellator &_\n_returns_description: _\n_parameters: const ofTessellator &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOperator overloading to copy properties from one tessellator to another.\n\n\n\n\n\n_description: _\n\nOperator overloading to copy properties from one tessellator to another. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void performTessellation(polyWindingMode, &dstmesh, bIs2D)\n\n<!--\n_syntax: performTessellation(polyWindingMode, &dstmesh, bIs2D)_\n_name: performTessellation_\n_returns: void_\n_returns_description: _\n_parameters: ofPolyWindingMode polyWindingMode, ofMesh &dstmesh, bool bIs2D_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void performTessellation(polyWindingMode, &dstpoly, bIs2D)\n\n<!--\n_syntax: performTessellation(polyWindingMode, &dstpoly, bIs2D)_\n_name: performTessellation_\n_returns: void_\n_returns_description: _\n_parameters: ofPolyWindingMode polyWindingMode, vector< ofPolyline > &dstpoly, bool bIs2D_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void tessellateToMesh(&src, polyWindingMode, &dstmesh, bIs2D = false)\n\n<!--\n_syntax: tessellateToMesh(&src, polyWindingMode, &dstmesh, bIs2D = false)_\n_name: tessellateToMesh_\n_returns: void_\n_returns_description: _\n_parameters: const vector< ofPolyline > &src, ofPolyWindingMode polyWindingMode, ofMesh &dstmesh, bool bIs2D=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTessellates a vector of ofPolyline instances into a single\nofMesh instance using the winding mode set in ofPolyWindingMode.\n\n\n\n\n\n_description: _\n\nTessellates a vector of ofPolyline instances into a single ofMesh instance using the winding mode set in ofPolyWindingMode.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void tessellateToMesh(&src, polyWindingMode, &dstmesh, bIs2D = false)\n\n<!--\n_syntax: tessellateToMesh(&src, polyWindingMode, &dstmesh, bIs2D = false)_\n_name: tessellateToMesh_\n_returns: void_\n_returns_description: _\n_parameters: const ofPolyline &src, ofPolyWindingMode polyWindingMode, ofMesh &dstmesh, bool bIs2D=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTessellates a ofPolyline instance into a single ofMesh instance\nusing the winding mode set in ofPolyWindingMode.\n\n\n\n\n\n_description: _\n\nTessellates a vector of ofPolyline instances into a single ofMesh instance using the winding mode set in ofPolyWindingMode.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void tessellateToPolylines(&src, polyWindingMode, &dstpoly, bIs2D = false)\n\n<!--\n_syntax: tessellateToPolylines(&src, polyWindingMode, &dstpoly, bIs2D = false)_\n_name: tessellateToPolylines_\n_returns: void_\n_returns_description: _\n_parameters: const vector< ofPolyline > &src, ofPolyWindingMode polyWindingMode, vector< ofPolyline > &dstpoly, bool bIs2D=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTessellates a vector of ofPolyline instances into vector of\nofPolyline instances using the winding mode set in ofPolyWindingMode.\n\n\n\n\n\n_description: _\n\nTessellates a vector of ofPolyline instances into vector of ofPolyline instances using the winding mode set in ofPolyWindingMode.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void tessellateToPolylines(&src, polyWindingMode, &dstpoly, bIs2D = false)\n\n<!--\n_syntax: tessellateToPolylines(&src, polyWindingMode, &dstpoly, bIs2D = false)_\n_name: tessellateToPolylines_\n_returns: void_\n_returns_description: _\n_parameters: const ofPolyline &src, ofPolyWindingMode polyWindingMode, vector< ofPolyline > &dstpoly, bool bIs2D=false_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTessellate multiple polylines into a single polyline.\n\n\n\n\n\n_description: _\n\nTessellates a vector of ofPolyline instances into vector of ofPolyline instances using the winding mode set in ofPolyWindingMode.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofTessellator()\n\n<!--\n_syntax: ~ofTessellator()_\n_name: ~ofTessellator_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###TESStesselator * cacheTess\n\n<!--\n_name: cacheTess_\n_type: TESStesselator *_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###TESSalloc tessAllocator\n\n<!--\n_name: tessAllocator_\n_type: TESSalloc_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}