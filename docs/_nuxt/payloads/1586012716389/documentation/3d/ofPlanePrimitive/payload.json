{"data":[{"page":{"entry":{"name":"ofPlanePrimitive","filename":"ofPlanePrimitive.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/3d/ofPlanePrimitive.markdown","path":"/documentation/3d/ofPlanePrimitive","route":"/documentation/3d/ofPlanePrimitive.markdown","dir":"../ofSite/documentation/3d","ext":"markdown","type":"page","id":1989,"parent":1967,"breadcrumbs":[1967,1968],"siblings":[],"translations":{}},"description":{"short":"<p>The ofPlanePrimitive allows you to create an UV plane.\nCan be used for example as simple canvas for projecting simple texture .</p>\n<p>Like all primitives it allows you to set the size, in this case height\nand width, draw it, set positions, etc, as a simple example:</p>\n<pre><code class=\"language-{.cpp}\">\nofPlanePrimitive plane<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\nlet's say we have a window set to be at\n<span class=\"token comment\" spellcheck=\"true\">// resolution 640x480...</span>\n\n    plane<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   dimensions <span class=\"token keyword\">for</span> width <span class=\"token operator\">and</span> height in pixels\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> position in x y z\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">this</span> <span class=\"token function\">resolution</span> <span class=\"token punctuation\">(</span>as columns <span class=\"token operator\">and</span> rows<span class=\"token punctuation\">)</span> is enough\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">drawWireframe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>As you can see, plane is constructed from two triangles.\nTo draw a texture over any primitive, simply bind the ofTexture instance\nand then draw your primitive:</p>\n<pre><code class=\"language-{.cpp}\">\ntexture<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now draw filled...</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>The plane primitive also allows you to simply pass an ofTexture to the\nplane and generate the texture coordinates from that texture so that the\nofTexture fills the plane when it's drawn. This saves you the hassle of\ncreating all the texture coordinates for each vertex, which is nice.</p>\n","full":"<p>The ofPlanePrimitive allows you to create an UV plane, which can be used for example as simple canvas for projecting simple texture .</p>\n<p>Like all primitives it allows you to set the size, in this case height and width, draw it, set positions, etc, as a simple example:</p>\n<pre><code class=\"language-{.cpp}\">\nofPlanePrimitive plane<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">/// let's say we have a window set to be at </span>\n<span class=\"token comment\" spellcheck=\"true\">// resolution 640x480...</span>\n\n\tplane<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">///dimensions for width and height in pixels</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// position in x y z</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// this resolution (as columns and rows) is enough</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">drawWireframe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>As you can see, plane is constructed from two triangles.\nTo draw a texture over any primitive, simply bind the ofTexture instance and then draw your primitive:</p>\n<pre><code class=\"language-{.cpp}\">\ntexture<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now draw filled...</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>The plane primitive also allows you to simply pass an ofTexture to the plane and generate the texture coordinates from that texture so that the ofTexture fills the plane when it's drawn. This saves you the hassle of creating all the texture coordinates for each vertex, which is nice.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"of3dPrimitive"},"methods":[{"syntax":"getHeight()","name":"getHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getNumColumns()","name":"getNumColumns","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getNumRows()","name":"getNumRows","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getResolution()","name":"getResolution","returns":"glm::vec2","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getWidth()","name":"getWidth","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofPlanePrimitive()","name":"ofPlanePrimitive","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"ofPlanePrimitive(width, height, columns, rows, mode = OF_PRIMITIVE_TRIANGLE_STRIP)","name":"ofPlanePrimitive","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows<span class=\"token punctuation\">,</span> ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"resizeToTexture(&inTexture, scale = 1.f)","name":"resizeToTexture","returns":"void","returns_description":null,"parameters":"ofTexture <span class=\"token operator\">&amp;</span>inTexture<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> scale<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span>f","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"set(width, height)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"set(width, height, columns, rows, mode = OF_PRIMITIVE_TRIANGLE_STRIP)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows<span class=\"token punctuation\">,</span> ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setColumns(columns)","name":"setColumns","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> columns","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setHeight(height)","name":"setHeight","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> height","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setMode(mode)","name":"setMode","returns":"void","returns_description":null,"parameters":"ofPrimitiveMode mode","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setResolution(columns, rows)","name":"setResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> columns<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rows","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setRows(rows)","name":"setRows","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> rows","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setWidth(width)","name":"setWidth","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> width","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"~ofPlanePrimitive()","name":"~ofPlanePrimitive","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"name":"height","type":"float","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"resolution","type":"ofVec2f","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"width","type":"float","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofPlanePrimitive</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: of3dPrimitive_\n-->\n<p>##InlineDescription</p>\n<p>The ofPlanePrimitive allows you to create an UV plane.\nCan be used for example as simple canvas for projecting simple texture .</p>\n<p>Like all primitives it allows you to set the size, in this case height\nand width, draw it, set positions, etc, as a simple example:</p>\n<pre><code class=\"language-{.cpp}\">\nofPlanePrimitive plane<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\nlet's say we have a window set to be at\n<span class=\"token comment\" spellcheck=\"true\">// resolution 640x480...</span>\n\n    plane<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   dimensions <span class=\"token keyword\">for</span> width <span class=\"token operator\">and</span> height in pixels\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> position in x y z\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">this</span> <span class=\"token function\">resolution</span> <span class=\"token punctuation\">(</span>as columns <span class=\"token operator\">and</span> rows<span class=\"token punctuation\">)</span> is enough\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">drawWireframe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>As you can see, plane is constructed from two triangles.\nTo draw a texture over any primitive, simply bind the ofTexture instance\nand then draw your primitive:</p>\n<pre><code class=\"language-{.cpp}\">\ntexture<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now draw filled...</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>The plane primitive also allows you to simply pass an ofTexture to the\nplane and generate the texture coordinates from that texture so that the\nofTexture fills the plane when it's drawn. This saves you the hassle of\ncreating all the texture coordinates for each vertex, which is nice.</p>\n<p>##Description</p>\n<p>The ofPlanePrimitive allows you to create an UV plane, which can be used for example as simple canvas for projecting simple texture .</p>\n<p>Like all primitives it allows you to set the size, in this case height and width, draw it, set positions, etc, as a simple example:</p>\n<pre><code class=\"language-{.cpp}\">\nofPlanePrimitive plane<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token comment\" spellcheck=\"true\">/// let's say we have a window set to be at </span>\n<span class=\"token comment\" spellcheck=\"true\">// resolution 640x480...</span>\n\n\tplane<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">///dimensions for width and height in pixels</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// position in x y z</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">setResolution</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/// this resolution (as columns and rows) is enough</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">drawWireframe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>As you can see, plane is constructed from two triangles.\nTo draw a texture over any primitive, simply bind the ofTexture instance and then draw your primitive:</p>\n<pre><code class=\"language-{.cpp}\">\ntexture<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now draw filled...</span>\nplane<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>The plane primitive also allows you to simply pass an ofTexture to the plane and generate the texture coordinates from that texture so that the ofTexture fills the plane when it's drawn. This saves you the hassle of creating all the texture coordinates for each vertex, which is nice.</p>\n<p>##Methods</p>\n<p>###float getHeight()</p>\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int getNumColumns()</p>\n<!--\n_syntax: getNumColumns()_\n_name: getNumColumns_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int getNumRows()</p>\n<!--\n_syntax: getNumRows()_\n_name: getNumRows_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###glm::vec2 getResolution()</p>\n<!--\n_syntax: getResolution()_\n_name: getResolution_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float getWidth()</p>\n<!--\n_syntax: getWidth()_\n_name: getWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofPlanePrimitive()</h3>\n<!--\n_syntax: ofPlanePrimitive()_\n_name: ofPlanePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofPlanePrimitive(width, height, columns, rows, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</h3>\n<!--\n_syntax: ofPlanePrimitive(width, height, columns, rows, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: ofPlanePrimitive_\n_returns: _\n_returns_description: _\n_parameters: float width, float height, int columns, int rows, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void resizeToTexture(&amp;inTexture, scale = 1.f)</p>\n<!--\n_syntax: resizeToTexture(&inTexture, scale = 1.f)_\n_name: resizeToTexture_\n_returns: void_\n_returns_description: _\n_parameters: ofTexture &inTexture, float scale=1.f_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void set(width, height)</p>\n<!--\n_syntax: set(width, height)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void set(width, height, columns, rows, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</p>\n<!--\n_syntax: set(width, height, columns, rows, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height, int columns, int rows, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setColumns(columns)</p>\n<!--\n_syntax: setColumns(columns)_\n_name: setColumns_\n_returns: void_\n_returns_description: _\n_parameters: int columns_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setHeight(height)</p>\n<!--\n_syntax: setHeight(height)_\n_name: setHeight_\n_returns: void_\n_returns_description: _\n_parameters: float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setMode(mode)</p>\n<!--\n_syntax: setMode(mode)_\n_name: setMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPrimitiveMode mode_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setResolution(columns, rows)</p>\n<!--\n_syntax: setResolution(columns, rows)_\n_name: setResolution_\n_returns: void_\n_returns_description: _\n_parameters: int columns, int rows_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setRows(rows)</p>\n<!--\n_syntax: setRows(rows)_\n_name: setRows_\n_returns: void_\n_returns_description: _\n_parameters: int rows_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setWidth(width)</p>\n<!--\n_syntax: setWidth(width)_\n_name: setWidth_\n_returns: void_\n_returns_description: _\n_parameters: float width_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>~ofPlanePrimitive()</h3>\n<!--\n_syntax: ~ofPlanePrimitive()_\n_name: ~ofPlanePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###float height</p>\n<!--\n_name: height_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofVec2f resolution</p>\n<!--\n_name: resolution_\n_type: ofVec2f_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float width</p>\n<!--\n_name: width_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofPlanePrimitive\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: of3dPrimitive_\n-->\n\n##InlineDescription\n\nThe ofPlanePrimitive allows you to create an UV plane.\nCan be used for example as simple canvas for projecting simple texture .\n\nLike all primitives it allows you to set the size, in this case height\nand width, draw it, set positions, etc, as a simple example:\n\n~~~~{.cpp}\n\nofPlanePrimitive plane;\n\nvoid setup()\n{\nlet's say we have a window set to be at\n// resolution 640x480...\n\n    plane.set(640, 480);   dimensions for width and height in pixels\nplane.setPosition(320, 240, 0); position in x y z\nplane.setResolution(2, 2); this resolution (as columns and rows) is enough\n}\n\nvoid draw()\n{\nplane.drawWireframe();\n}\n~~~~\nAs you can see, plane is constructed from two triangles.\nTo draw a texture over any primitive, simply bind the ofTexture instance\nand then draw your primitive:\n\n~~~~{.cpp}\n\ntexture.getTextureReference().bind();\n// now draw filled...\nplane.draw();\n\n~~~~\n\nThe plane primitive also allows you to simply pass an ofTexture to the\nplane and generate the texture coordinates from that texture so that the\nofTexture fills the plane when it's drawn. This saves you the hassle of\ncreating all the texture coordinates for each vertex, which is nice.\n\n\n\n\n\n##Description\n\nThe ofPlanePrimitive allows you to create an UV plane, which can be used for example as simple canvas for projecting simple texture .\n\nLike all primitives it allows you to set the size, in this case height and width, draw it, set positions, etc, as a simple example:\n\n~~~~{.cpp}\n\nofPlanePrimitive plane;\n\nvoid setup()\n{\n/// let's say we have a window set to be at \n// resolution 640x480...\n\n\tplane.set(640, 480);   ///dimensions for width and height in pixels\nplane.setPosition(320, 240, 0); /// position in x y z\nplane.setResolution(2, 2); /// this resolution (as columns and rows) is enough\n}\n\nvoid draw()\n{\nplane.drawWireframe();\n}\n~~~~\nAs you can see, plane is constructed from two triangles.\nTo draw a texture over any primitive, simply bind the ofTexture instance and then draw your primitive:\n\n~~~~{.cpp}\n\ntexture.getTextureReference().bind();\n// now draw filled...\nplane.draw();\n\n~~~~\n\nThe plane primitive also allows you to simply pass an ofTexture to the plane and generate the texture coordinates from that texture so that the ofTexture fills the plane when it's drawn. This saves you the hassle of creating all the texture coordinates for each vertex, which is nice.\n\n\n\n\n\n##Methods\n\n\n\n###float getHeight()\n\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumColumns()\n\n<!--\n_syntax: getNumColumns()_\n_name: getNumColumns_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumRows()\n\n<!--\n_syntax: getNumRows()_\n_name: getNumRows_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec2 getResolution()\n\n<!--\n_syntax: getResolution()_\n_name: getResolution_\n_returns: glm::vec2_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getWidth()\n\n<!--\n_syntax: getWidth()_\n_name: getWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofPlanePrimitive()\n\n<!--\n_syntax: ofPlanePrimitive()_\n_name: ofPlanePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofPlanePrimitive(width, height, columns, rows, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: ofPlanePrimitive(width, height, columns, rows, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: ofPlanePrimitive_\n_returns: _\n_returns_description: _\n_parameters: float width, float height, int columns, int rows, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resizeToTexture(&inTexture, scale = 1.f)\n\n<!--\n_syntax: resizeToTexture(&inTexture, scale = 1.f)_\n_name: resizeToTexture_\n_returns: void_\n_returns_description: _\n_parameters: ofTexture &inTexture, float scale=1.f_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(width, height)\n\n<!--\n_syntax: set(width, height)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(width, height, columns, rows, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: set(width, height, columns, rows, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float width, float height, int columns, int rows, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColumns(columns)\n\n<!--\n_syntax: setColumns(columns)_\n_name: setColumns_\n_returns: void_\n_returns_description: _\n_parameters: int columns_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHeight(height)\n\n<!--\n_syntax: setHeight(height)_\n_name: setHeight_\n_returns: void_\n_returns_description: _\n_parameters: float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setMode(mode)\n\n<!--\n_syntax: setMode(mode)_\n_name: setMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPrimitiveMode mode_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setResolution(columns, rows)\n\n<!--\n_syntax: setResolution(columns, rows)_\n_name: setResolution_\n_returns: void_\n_returns_description: _\n_parameters: int columns, int rows_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRows(rows)\n\n<!--\n_syntax: setRows(rows)_\n_name: setRows_\n_returns: void_\n_returns_description: _\n_parameters: int rows_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setWidth(width)\n\n<!--\n_syntax: setWidth(width)_\n_name: setWidth_\n_returns: void_\n_returns_description: _\n_parameters: float width_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofPlanePrimitive()\n\n<!--\n_syntax: ~ofPlanePrimitive()_\n_name: ~ofPlanePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###float height\n\n<!--\n_name: height_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f resolution\n\n<!--\n_name: resolution_\n_type: ofVec2f_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float width\n\n<!--\n_name: width_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}