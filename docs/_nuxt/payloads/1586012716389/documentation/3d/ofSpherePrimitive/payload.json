{"data":[{"page":{"entry":{"name":"ofSpherePrimitive","filename":"ofSpherePrimitive.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/3d/ofSpherePrimitive.markdown","path":"/documentation/3d/ofSpherePrimitive","route":"/documentation/3d/ofSpherePrimitive.markdown","dir":"../ofSite/documentation/3d","ext":"markdown","type":"page","id":1990,"parent":1967,"breadcrumbs":[1967,1968],"siblings":[],"translations":{}},"description":{"short":null,"full":"<p>The ofSpherePrimitive allows you to create an UV sphere, which is a sphere based on UV slices rather than faces like the ofIcoSpherePrimitive. Note this:</p>\n<p><img src=\"spheretypes.png\" alt=\"IMG\"></p>\n<p>On the left is a UV sphere and on the right is an ICO sphere.</p>\n<p>Like all primitives it allows you to set the size (radius), draw it, set positions, etc, as a simple example:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tsphere<span class=\"token punctuation\">.</span><span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span> width <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tsphere<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get all the faces from the icoSphere, handy when you want to copy</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n\tvector<span class=\"token operator\">&lt;</span>ofMeshFace</code></pre>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"of3dPrimitive"},"methods":[{"syntax":"getRadius()","name":"getRadius","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"getResolution()","name":"getResolution","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"ofSpherePrimitive()","name":"ofSpherePrimitive","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":1},{"syntax":"ofSpherePrimitive(radius, res, mode = OF_PRIMITIVE_TRIANGLE_STRIP)","name":"ofSpherePrimitive","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> res<span class=\"token punctuation\">,</span> ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(radius, resolution, mode = OF_PRIMITIVE_TRIANGLE_STRIP)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> resolution<span class=\"token punctuation\">,</span> ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setMode(mode)","name":"setMode","returns":"void","returns_description":null,"parameters":"ofPrimitiveMode mode","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setRadius(radius)","name":"setRadius","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"setResolution(res)","name":"setResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> res","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"syntax":"~ofSpherePrimitive()","name":"~ofSpherePrimitive","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"","counter":0},{"name":"radius","type":"float","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"resolution","type":"int","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofSpherePrimitive</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: of3dPrimitive_\n-->\n<p>##InlineDescription</p>\n<p>The ofSpherePrimitive allows you to create a UV sphere.\nA UV spherewhich is a sphere based on UV slices rather than faces like\nthe ofIcoSpherePrimitive. Note this:</p>\n<p><img src=\"spheretypes.png\" alt=\"IMG\"></p>\n<p>On the left is a UV sphere and on the right is an ICO sphere.</p>\n<p>Like all primitives it allows you to set the size (radius), draw it,\nset positions, etc, as a simple example:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    sphere<span class=\"token punctuation\">.</span><span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span> width <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    sphere<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// get all the faces from the icoSphere, handy when you want to copy</span>\n    <span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n    vector<span class=\"token operator\">&lt;</span>ofMeshFace<span class=\"token operator\">></span> triangles <span class=\"token operator\">=</span> sphere<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUniqueFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// now draw</span>\n    sphere<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To draw a texture over any primitive, simply bind the ofTexture instance\nand then draw your primitive:</p>\n<pre><code class=\"language-{.cpp}\">\ntexture<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now draw</span>\nsphere<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>The sphere can look a little weird if you don't do ofEnabledDepthTesting()\nand ofDisableAlphaBlending().</p>\n<p>##Description</p>\n<p>The ofSpherePrimitive allows you to create an UV sphere, which is a sphere based on UV slices rather than faces like the ofIcoSpherePrimitive. Note this:</p>\n<p><img src=\"spheretypes.png\" alt=\"IMG\"></p>\n<p>On the left is a UV sphere and on the right is an ICO sphere.</p>\n<p>Like all primitives it allows you to set the size (radius), draw it, set positions, etc, as a simple example:</p>\n<pre><code class=\"language-{.cpp}\">\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tsphere<span class=\"token punctuation\">.</span><span class=\"token function\">setRadius</span><span class=\"token punctuation\">(</span> width <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tsphere<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tsphere<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get all the faces from the icoSphere, handy when you want to copy</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n\tvector<span class=\"token operator\">&lt;</span>ofMeshFace<span class=\"token operator\">></span> triangles <span class=\"token operator\">=</span> sphere<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUniqueFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// now draw</span>\n\tsphere<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To draw a texture over any primitive, simply bind the ofTexture instance and then draw your primitive:</p>\n<pre><code class=\"language-{.cpp}\">\ntexture<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now draw</span>\nsphere<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>The sphere can look a little weird if you don't do ofEnabledDepthTesting() and ofDisableAlphaBlending().</p>\n<p>##Methods</p>\n<p>###float getRadius()</p>\n<!--\n_syntax: getRadius()_\n_name: getRadius_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int getResolution()</p>\n<!--\n_syntax: getResolution()_\n_name: getResolution_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofSpherePrimitive()</h3>\n<!--\n_syntax: ofSpherePrimitive()_\n_name: ofSpherePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>ofSpherePrimitive(radius, res, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</h3>\n<!--\n_syntax: ofSpherePrimitive(radius, res, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: ofSpherePrimitive_\n_returns: _\n_returns_description: _\n_parameters: float radius, int res, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void set(radius, resolution, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</p>\n<!--\n_syntax: set(radius, resolution, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float radius, int resolution, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setMode(mode)</p>\n<!--\n_syntax: setMode(mode)_\n_name: setMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPrimitiveMode mode_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setRadius(radius)</p>\n<!--\n_syntax: setRadius(radius)_\n_name: setRadius_\n_returns: void_\n_returns_description: _\n_parameters: float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###void setResolution(res)</p>\n<!--\n_syntax: setResolution(res)_\n_name: setResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<h3>~ofSpherePrimitive()</h3>\n<!--\n_syntax: ~ofSpherePrimitive()_\n_name: ~ofSpherePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>##Variables</p>\n<p>###float radius</p>\n<!--\n_name: radius_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###int resolution</p>\n<!--\n_name: resolution_\n_type: int_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofSpherePrimitive\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: of3dPrimitive_\n-->\n\n##InlineDescription\n\nThe ofSpherePrimitive allows you to create a UV sphere.\nA UV spherewhich is a sphere based on UV slices rather than faces like\nthe ofIcoSpherePrimitive. Note this:\n\n![IMG](spheretypes.png)\n\nOn the left is a UV sphere and on the right is an ICO sphere.\n\nLike all primitives it allows you to set the size (radius), draw it,\nset positions, etc, as a simple example:\n\n~~~~{.cpp}\n\nvoid setup()\n{\n\n    sphere.setRadius( width );\n}\n\nvoid draw()\n{\n\n    sphere.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);\n    sphere.rotate(spinX, 1.0, 0.0, 0.0);\n    sphere.rotate(spinY, 0, 1.0, 0.0);\n\n    // get all the faces from the icoSphere, handy when you want to copy\n    // individual vertices or tweak them a little ;)\n    vector<ofMeshFace> triangles = sphere.getMesh().getUniqueFaces();\n\n    // now draw\n    sphere.draw();\n}\n~~~~\n\nTo draw a texture over any primitive, simply bind the ofTexture instance\nand then draw your primitive:\n\n~~~~{.cpp}\n\ntexture.getTextureReference().bind();\n// now draw\nsphere.draw();\n\n~~~~\n\nThe sphere can look a little weird if you don't do ofEnabledDepthTesting()\nand ofDisableAlphaBlending().\n\n\n\n\n\n\n##Description\n\nThe ofSpherePrimitive allows you to create an UV sphere, which is a sphere based on UV slices rather than faces like the ofIcoSpherePrimitive. Note this:\n\n![IMG](spheretypes.png)\n\nOn the left is a UV sphere and on the right is an ICO sphere.\n\nLike all primitives it allows you to set the size (radius), draw it, set positions, etc, as a simple example:\n\n~~~~{.cpp}\n\nvoid setup()\n{\n\n\tsphere.setRadius( width );\n}\n\nvoid draw()\n{\n\n\tsphere.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);\n\tsphere.rotate(spinX, 1.0, 0.0, 0.0);\n\tsphere.rotate(spinY, 0, 1.0, 0.0);\n\n\t// get all the faces from the icoSphere, handy when you want to copy\n\t// individual vertices or tweak them a little ;)\n\tvector<ofMeshFace> triangles = sphere.getMesh().getUniqueFaces();\n\n\t// now draw\n\tsphere.draw();\n}\n~~~~\n\nTo draw a texture over any primitive, simply bind the ofTexture instance and then draw your primitive:\n\n~~~~{.cpp}\n\ntexture.getTextureReference().bind();\n// now draw\nsphere.draw();\n\n~~~~\n\nThe sphere can look a little weird if you don't do ofEnabledDepthTesting() and ofDisableAlphaBlending().\n\n\n\n\n\n##Methods\n\n\n\n###float getRadius()\n\n<!--\n_syntax: getRadius()_\n_name: getRadius_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getResolution()\n\n<!--\n_syntax: getResolution()_\n_name: getResolution_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofSpherePrimitive()\n\n<!--\n_syntax: ofSpherePrimitive()_\n_name: ofSpherePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofSpherePrimitive(radius, res, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: ofSpherePrimitive(radius, res, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: ofSpherePrimitive_\n_returns: _\n_returns_description: _\n_parameters: float radius, int res, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(radius, resolution, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: set(radius, resolution, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float radius, int resolution, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setMode(mode)\n\n<!--\n_syntax: setMode(mode)_\n_name: setMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPrimitiveMode mode_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRadius(radius)\n\n<!--\n_syntax: setRadius(radius)_\n_name: setRadius_\n_returns: void_\n_returns_description: _\n_parameters: float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setResolution(res)\n\n<!--\n_syntax: setResolution(res)_\n_name: setResolution_\n_returns: void_\n_returns_description: _\n_parameters: int res_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofSpherePrimitive()\n\n<!--\n_syntax: ~ofSpherePrimitive()_\n_name: ~ofSpherePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###float radius\n\n<!--\n_name: radius_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int resolution\n\n<!--\n_name: resolution_\n_type: int_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}