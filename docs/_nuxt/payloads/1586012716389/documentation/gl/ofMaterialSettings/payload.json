{"data":[{"page":{"entry":{"name":"ofMaterialSettings","filename":"ofMaterialSettings.markdown","absolute":"/Users/Gilbert/Code/openFrameworks/ofSite/documentation/gl/ofMaterialSettings.markdown","path":"/documentation/gl/ofMaterialSettings","route":"/documentation/gl/ofMaterialSettings.markdown","dir":"../ofSite/documentation/gl","ext":"markdown","type":"page","id":2212,"parent":2192,"breadcrumbs":[2192,1968],"siblings":[],"translations":{}},"description":{"short":"<p>wrapper for material color properties and other settings</p>\n<p>customUniforms: adds some uniforms to the shader so they can be accessed\nfrom the postFragment function</p>\n<p>postFragment: Adds a function to the material shader that will get\nexecuted after all lighting and material calculations</p>\n<p>The source passed has to include a function with the\nsignature:</p>\n<p>vec4 postFragment(vec4 localColor){\nreturn localColor;\n}</p>\n<p>which will receive the final color after calculating all\nthe lights and material and can modify it and return a new color</p>\n<p>The function has access to the following variables:</p>\n<pre><code>vec2 v_texcoord;          // texture coordinate\nvec3 v_normal;            // normal at this fragment\nvec3 v_transformedNormal; // normal multiplied by the normal matrix\nvec3 v_eyePosition;       // position of this fragment in eye coordinates\nvec3 v_worldPosition;     // position of this fragment in world coordinates\nvec4 v_color;             // color interpolated from the vertex colors\nSAMPLER tex0;             // the bound texture if there's any\n\nvec4 mat_ambient;         // material ambient color\nvec4 mat_diffuse;         // material diffuse color\nvec4 mat_specular;        // material specular\nvec4 mat_emissive;        // material emissive\nfloat mat_shininess;      // material shininess\n\nvec4 global_ambient;      // global ambient light\nmat4 modelViewMatrix;     // model view matrix\nmat4 projectionMatrix;    // projection matrix\nmat4 textureMatrix;       // texture matrix\nmat4 modelViewProjectionMatrix; // model view projection matrix\n\nMAX_LIGHTS                // the total number of lights in the scen\n</code></pre>\n<p>And an array of lights\neach light has the following properties:</p>\n<pre><code>float lights[i].enabled;\nvec4 lights[i].ambient;\nfloat lights[i].type;     // 0 = pointlight\n                          // 1 = directionlight\n                          // 2 = spotlight\n                          // 3 = area\nvec4 lights[i].position;  // where are we\nvec4 lights[i].diffuse;   // how diffuse\nvec4 lights[i].specular;  // what kinda specular stuff we got going on?\n\n// attenuation, how the light attenuates with the distance\nfloat lights[i].constantAttenuation;\nfloat lights[i].linearAttenuation;\nfloat lights[i].quadraticAttenuation;\n\n// only for spot\nfloat lights[i].spotCutoff;\nfloat lights[i].spotCosCutoff;\nfloat lights[i].spotExponent;\n\n// spot and area\nvec3 lights[i].spotDirection;\n\n// only for directional\nvec3 lights[i].halfVector;\n\n// only for area\nfloat lights[i].width;\nfloat lights[i].height;\nvec3 lights[i].right;\nvec3 lights[i].up;\n</code></pre>\n","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"name":"ambient","type":"ofFloatColor","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; ambient reflectance</p>\n","desc":""},{"name":"customUniforms","type":"string","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"diffuse","type":"ofFloatColor","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; diffuse reflectance</p>\n","desc":""},{"name":"emissive","type":"ofFloatColor","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; emitted light intensity</p>\n","desc":""},{"name":"postFragment","type":"string","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"shininess","type":"float","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; specular exponent</p>\n","desc":""},{"name":"specular","type":"ofFloatColor","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; specular reflectance</p>\n","desc":""},{}],"document":"<p>#class ofMaterialSettings</p>\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n<p>##InlineDescription</p>\n<p>wrapper for material color properties and other settings</p>\n<p>customUniforms: adds some uniforms to the shader so they can be accessed\nfrom the postFragment function</p>\n<p>postFragment: Adds a function to the material shader that will get\nexecuted after all lighting and material calculations</p>\n<p>The source passed has to include a function with the\nsignature:</p>\n<p>vec4 postFragment(vec4 localColor){\nreturn localColor;\n}</p>\n<p>which will receive the final color after calculating all\nthe lights and material and can modify it and return a new color</p>\n<p>The function has access to the following variables:</p>\n<pre><code>vec2 v_texcoord;          // texture coordinate\nvec3 v_normal;            // normal at this fragment\nvec3 v_transformedNormal; // normal multiplied by the normal matrix\nvec3 v_eyePosition;       // position of this fragment in eye coordinates\nvec3 v_worldPosition;     // position of this fragment in world coordinates\nvec4 v_color;             // color interpolated from the vertex colors\nSAMPLER tex0;             // the bound texture if there's any\n\nvec4 mat_ambient;         // material ambient color\nvec4 mat_diffuse;         // material diffuse color\nvec4 mat_specular;        // material specular\nvec4 mat_emissive;        // material emissive\nfloat mat_shininess;      // material shininess\n\nvec4 global_ambient;      // global ambient light\nmat4 modelViewMatrix;     // model view matrix\nmat4 projectionMatrix;    // projection matrix\nmat4 textureMatrix;       // texture matrix\nmat4 modelViewProjectionMatrix; // model view projection matrix\n\nMAX_LIGHTS                // the total number of lights in the scen\n</code></pre>\n<p>And an array of lights\neach light has the following properties:</p>\n<pre><code>float lights[i].enabled;\nvec4 lights[i].ambient;\nfloat lights[i].type;     // 0 = pointlight\n                          // 1 = directionlight\n                          // 2 = spotlight\n                          // 3 = area\nvec4 lights[i].position;  // where are we\nvec4 lights[i].diffuse;   // how diffuse\nvec4 lights[i].specular;  // what kinda specular stuff we got going on?\n\n// attenuation, how the light attenuates with the distance\nfloat lights[i].constantAttenuation;\nfloat lights[i].linearAttenuation;\nfloat lights[i].quadraticAttenuation;\n\n// only for spot\nfloat lights[i].spotCutoff;\nfloat lights[i].spotCosCutoff;\nfloat lights[i].spotExponent;\n\n// spot and area\nvec3 lights[i].spotDirection;\n\n// only for directional\nvec3 lights[i].halfVector;\n\n// only for area\nfloat lights[i].width;\nfloat lights[i].height;\nvec3 lights[i].right;\nvec3 lights[i].up;\n</code></pre>\n<p>##Description</p>\n<p>##Methods</p>\n<p>##Variables</p>\n<p>###ofFloatColor ambient</p>\n<!--\n_name: ambient_\n_type: ofFloatColor_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>&lt; ambient reflectance</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string customUniforms</p>\n<!--\n_name: customUniforms_\n_type: string_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofFloatColor diffuse</p>\n<!--\n_name: diffuse_\n_type: ofFloatColor_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>&lt; diffuse reflectance</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofFloatColor emissive</p>\n<!--\n_name: emissive_\n_type: ofFloatColor_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>&lt; emitted light intensity</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###string postFragment</p>\n<!--\n_name: postFragment_\n_type: string_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###float shininess</p>\n<!--\n_name: shininess_\n_type: float_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>&lt; specular exponent</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n<p>###ofFloatColor specular</p>\n<!--\n_name: specular_\n_type: ofFloatColor_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n<p>_inlined_description: _</p>\n<p>&lt; specular reflectance</p>\n<p>_description: _</p>\n<!----------------------------------------------------------------------------->\n","raw":"#class ofMaterialSettings\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\nwrapper for material color properties and other settings\n\ncustomUniforms: adds some uniforms to the shader so they can be accessed\nfrom the postFragment function\n\npostFragment: Adds a function to the material shader that will get\nexecuted after all lighting and material calculations\n\nThe source passed has to include a function with the\nsignature:\n\nvec4 postFragment(vec4 localColor){\n    return localColor;\n}\n\nwhich will receive the final color after calculating all\nthe lights and material and can modify it and return a new color\n\nThe function has access to the following variables:\n\n    vec2 v_texcoord;          // texture coordinate\n    vec3 v_normal;            // normal at this fragment\n    vec3 v_transformedNormal; // normal multiplied by the normal matrix\n    vec3 v_eyePosition;       // position of this fragment in eye coordinates\n    vec3 v_worldPosition;     // position of this fragment in world coordinates\n    vec4 v_color;             // color interpolated from the vertex colors\n    SAMPLER tex0;             // the bound texture if there's any\n\n    vec4 mat_ambient;         // material ambient color\n    vec4 mat_diffuse;         // material diffuse color\n    vec4 mat_specular;        // material specular\n    vec4 mat_emissive;        // material emissive\n    float mat_shininess;      // material shininess\n\n    vec4 global_ambient;      // global ambient light\n    mat4 modelViewMatrix;     // model view matrix\n    mat4 projectionMatrix;    // projection matrix\n    mat4 textureMatrix;       // texture matrix\n    mat4 modelViewProjectionMatrix; // model view projection matrix\n\n    MAX_LIGHTS                // the total number of lights in the scen\n\nAnd an array of lights\neach light has the following properties:\n\n    float lights[i].enabled;\n    vec4 lights[i].ambient;\n    float lights[i].type;     // 0 = pointlight\n                              // 1 = directionlight\n                              // 2 = spotlight\n                              // 3 = area\n    vec4 lights[i].position;  // where are we\n    vec4 lights[i].diffuse;   // how diffuse\n    vec4 lights[i].specular;  // what kinda specular stuff we got going on?\n\n    // attenuation, how the light attenuates with the distance\n    float lights[i].constantAttenuation;\n    float lights[i].linearAttenuation;\n    float lights[i].quadraticAttenuation;\n\n    // only for spot\n    float lights[i].spotCutoff;\n    float lights[i].spotCosCutoff;\n    float lights[i].spotExponent;\n\n    // spot and area\n    vec3 lights[i].spotDirection;\n\n    // only for directional\n    vec3 lights[i].halfVector;\n\n    // only for area\n    float lights[i].width;\n    float lights[i].height;\n    vec3 lights[i].right;\n    vec3 lights[i].up;\n\n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n##Variables\n\n\n\n###ofFloatColor ambient\n\n<!--\n_name: ambient_\n_type: ofFloatColor_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< ambient reflectance\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string customUniforms\n\n<!--\n_name: customUniforms_\n_type: string_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFloatColor diffuse\n\n<!--\n_name: diffuse_\n_type: ofFloatColor_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< diffuse reflectance\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFloatColor emissive\n\n<!--\n_name: emissive_\n_type: ofFloatColor_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< emitted light intensity\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string postFragment\n\n<!--\n_name: postFragment_\n_type: string_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float shininess\n\n<!--\n_name: shininess_\n_type: float_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< specular exponent\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFloatColor specular\n\n<!--\n_name: specular_\n_type: ofFloatColor_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< specular reflectance\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page","static":true}}],"fetch":[]}