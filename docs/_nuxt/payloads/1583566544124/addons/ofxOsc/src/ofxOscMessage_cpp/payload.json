{"data":[{"page":{"entry":{"name":"ofxOscMessage.cpp","filename":"ofxOscMessage.cpp","absolute":"/Users/gilbertsinnott/Code/openFrameworks/addons/ofxOsc/src/ofxOscMessage.cpp","path":"/addons/ofxOsc/src/ofxOscMessage_cpp","route":"/addons/ofxOsc/src/ofxOscMessage.cpp","dir":"../addons/ofxOsc/src","ext":"cpp","type":"source","id":163,"parent":157,"breadcrumbs":[157,158,36],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">// copyright (c) openFrameworks team 2010-2017</span>\n<span class=\"token comment\" spellcheck=\"true\">// copyright (c) Damian Stewart 2007-2009</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxOscMessage.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofLog.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofUtils.h\"</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">ofxOscMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">remoteHost</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">remotePort</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofxOscMessage<span class=\"token operator\">::</span><span class=\"token operator\">~</span><span class=\"token function\">ofxOscMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">ofxOscMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxOscMessage <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofxOscMessage<span class=\"token operator\">&amp;</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxOscMessage <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofxOscMessage<span class=\"token operator\">&amp;</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxOscMessage <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// copy address &amp; remote info</span>\n\taddress <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>address<span class=\"token punctuation\">;</span>\n\tremoteHost <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>remoteHost<span class=\"token punctuation\">;</span>\n\tremotePort <span class=\"token operator\">=</span> other<span class=\"token punctuation\">.</span>remotePort<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// copy arguments</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> other<span class=\"token punctuation\">.</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_TRUE<span class=\"token operator\">:</span> <span class=\"token keyword\">case</span> OFXOSC_TYPE_FALSE<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgBool</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsBool</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_INT32<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgInt32</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsInt32</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_INT64<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgInt64</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsInt64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_FLOAT<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgFloat</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsFloat</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_DOUBLE<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgDouble</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsDouble</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_STRING<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgString</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_SYMBOL<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgSymbol</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsSymbol</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_CHAR<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgChar</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsChar</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_MIDI_MESSAGE<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgMidiMessage</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsMidiMessage</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_TRIGGER<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_TIMETAG<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgTimetag</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsTimetag</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_BLOB<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgBlob</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsBlob</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_RGBA_COLOR<span class=\"token operator\">:</span>\n\t\t\t\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgRgbaColor</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsRgbaColor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"copy(): bad argument type \"</span>\n\t\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" '\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> other<span class=\"token punctuation\">.</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">;</span>\t\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\taddress <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\tremoteHost <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\tremotePort <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">delete</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">setAddress</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token operator\">-</span><span class=\"token operator\">></span>address <span class=\"token operator\">=</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>string ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>string ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getRemoteIp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> remoteHost<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>string ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getRemoteHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> remoteHost<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">int</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getRemotePort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> remotePort<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// get methods</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>size_t ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getNumArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofxOscArgType ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgType(): index \"</span>\n\t\t                            <span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" out of bounds\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> OFXOSC_TYPE_INDEXOUTOFBOUNDS<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>string ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgTypeName</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgTypeName(): index \"</span>\n\t\t                            <span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" out of bounds\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"INDEX OUT OF BOUNDS\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getTypeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>string ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getTypeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n\tstd<span class=\"token operator\">::</span>string types <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> args<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\ttypes <span class=\"token operator\">+</span><span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">getTypeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> types<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>int32_t ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsInt</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getArgAsInt32</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>int32_t ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsInt32</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OFXOSC_TYPE_INT32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_INT64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// warn about possible lack of precision</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsInt32(): converting int64 to int32 for argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int32_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt64<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_FLOAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int32_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgFloat<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_DOUBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// warn about possible lack of precision</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsInt32(): converting double to int32 for argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int32_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgDouble<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_TRUE <span class=\"token operator\">||</span> \n\t\t\t    <span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int32_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgBool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsInt32(): argument \"</span>\n\t\t\t                            <span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a number\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt32<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>int64_t ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsInt64</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OFXOSC_TYPE_INT64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_INT32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int64_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt32<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_FLOAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int64_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgFloat<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_DOUBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int64_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgDouble<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_TRUE <span class=\"token operator\">||</span>\n\t\t\t    <span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int64_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgBool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsInt64(): argument \"</span>\n\t\t\t                            <span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a number\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt64<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">float</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsFloat</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OFXOSC_TYPE_FLOAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_INT32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt32<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_INT64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// warn about possible lack of precision</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsFloat(): converting int64 to float for argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt64<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_DOUBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// warn about possible lack of precision</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsFloat(): converting double to float for argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgDouble<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_TRUE <span class=\"token operator\">||</span>\n\t\t\t    <span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgBool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsFloat(): argument \"</span>\n\t\t\t                            <span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a number\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgFloat<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">double</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsDouble</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OFXOSC_TYPE_DOUBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_INT32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt32<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_INT64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt64<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_FLOAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgFloat<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_TRUE <span class=\"token operator\">||</span>\n\t\t\t     <span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_FALSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgBool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsDouble(): argument \"</span>\n\t\t\t                            <span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a number\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgDouble<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>string ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsString</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OFXOSC_TYPE_STRING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// warn about string conversions</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_INT32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsString(): converting int32 to string for argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt32<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_INT64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsString(): converting int64 to string for argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt64<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_FLOAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsString(): converting float to string for argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgFloat<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_DOUBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsString(): converting double to string for argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgDouble<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_SYMBOL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgSymbol<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_CHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsString(): converting char to string for argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgChar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsString(): argument \"</span> <span class=\"token operator\">&lt;&lt;</span> index\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a string interpretable value\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgString<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>string ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsSymbol</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OFXOSC_TYPE_SYMBOL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">// warn about string conversions</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_INT32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsSymbol(): converting int32 to symbol (string) \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"for argument \"</span> <span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt32<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_INT64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsSymbol(): converting int64 to symbol (string) \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"for argument \"</span> <span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt64<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_FLOAT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsSymbol(): converting float to symbol (string) \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"for argument \"</span> <span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgFloat<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_DOUBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsSymbol(): converting double to symbol (string) \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"for argument \"</span> <span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgDouble<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_STRING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgString<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_CHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsSymbol(): converting char to symbol (string) \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"for argument \"</span> <span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgChar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsSymbol(): argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a symbol (string) interpretable value\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgSymbol<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">char</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsChar</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_CHAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgChar<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsChar(): argument \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a char\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>uint32_t ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsMidiMessage</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_MIDI_MESSAGE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgMidiMessage<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsMidiMessage(): argument \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a midi message\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsBool</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_TRUE<span class=\"token operator\">:</span> <span class=\"token keyword\">case</span> OFXOSC_TYPE_FALSE<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgBool<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_INT32<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt32<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_INT64<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgInt64<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_FLOAT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgFloat<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_DOUBLE<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgDouble<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_STRING<span class=\"token operator\">:</span> <span class=\"token keyword\">case</span> OFXOSC_TYPE_SYMBOL<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgString<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsBool(): argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a boolean interpretable value\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsNone</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OFXOSC_TYPE_NONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsNone(): argument \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a none/nil\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgNone<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsTrigger</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OFXOSC_TYPE_TRIGGER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsTrigger(): argument \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a trigger\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgTrigger<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsImpulse</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getArgAsTrigger</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">bool</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsInfinitum</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">getArgAsTrigger</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>uint64_t ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsTimetag</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OFXOSC_TYPE_TIMETAG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> OFXOSC_TYPE_DOUBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">// warn about possible conversion issue</span>\n\t\t\t<span class=\"token function\">ofLogWarning</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsTimetag(): converting double to Timetag \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"for argument \"</span> <span class=\"token operator\">&lt;&lt;</span> index<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>uint64_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgDouble<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsTimetag(): argument \"</span>\n\t\t\t\t<span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a valid number\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgTimetag<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nofBuffer ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsBlob</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OFXOSC_TYPE_BLOB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsBlob(): argument \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not a blob\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">ofBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgBlob<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>uint32_t ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">getArgAsRgbaColor</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t index<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> OFXOSC_TYPE_RGBA_COLOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">ofLogError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ofxOscMessage\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"getArgAsRgbaColor(): argument \"</span>\n\t\t\t<span class=\"token operator\">&lt;&lt;</span> index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" is not an rgba color\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ofxOscArgRgbaColor<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>args<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// set methods</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addIntArg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int32_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgInt32</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addInt32Arg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int32_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgInt32</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addInt64Arg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>int64_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgInt64</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addFloatArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgFloat</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addDoubleArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgDouble</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addStringArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgString</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addSymbolArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgSymbol</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addCharArg</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">char</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgChar</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addMidiMessageArg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>uint32_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgMidiMessage</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addBoolArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgBool</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addNoneArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgNone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addTriggerArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addImpulseArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addInfinitumArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgTrigger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addTimetagArg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>uint64_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgTimetag</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addBlobArg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgBlob</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">addRgbaColorArg</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>uint32_t argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\targs<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token function\">ofxOscArgRgbaColor</span><span class=\"token punctuation\">(</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// util</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\n<span class=\"token keyword\">void</span> ofxOscMessage<span class=\"token operator\">::</span><span class=\"token function\">setRemoteEndpoint</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token operator\">::</span>string <span class=\"token operator\">&amp;</span>host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tremoteHost <span class=\"token operator\">=</span> host<span class=\"token punctuation\">;</span>\n\tremotePort <span class=\"token operator\">=</span> port<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// friend functions</span>\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------</span>\nstd<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream <span class=\"token operator\">&amp;</span>os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofxOscMessage <span class=\"token operator\">&amp;</span>message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tos <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getNumArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getArgType</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_INT32<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsInt32</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_INT64<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsInt64</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_FLOAT<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsFloat</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_DOUBLE<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsDouble</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_STRING<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsString</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_SYMBOL<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsSymbol</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_CHAR<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsChar</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_MIDI_MESSAGE<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToHex</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsMidiMessage</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_TRUE<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"T\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_FALSE<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"F\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_NONE<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"NONE\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_TRIGGER<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"TRIGGER\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_TIMETAG<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"TIMETAG\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_BLOB<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"BLOB\"</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">case</span> OFXOSC_TYPE_RGBA_COLOR<span class=\"token operator\">:</span>\n\t\t\t\tos <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">ofToHex</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getArgAsRgbaColor</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> os<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n","type":"source"}}],"fetch":[]}