{"data":[{"page":{"entry":{"name":"ofxTCPServer.h","filename":"ofxTCPServer.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/addons/ofxNetwork/src/ofxTCPServer.h","path":"/addons/ofxNetwork/src/ofxTCPServer_h","route":"/addons/ofxNetwork/src/ofxTCPServer.h","dir":"../addons/ofxNetwork/src","ext":"h","type":"source","id":133,"parent":123,"breadcrumbs":[123,124,36],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofThread.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxTCPManager.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofxTCPSettings.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;map></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;condition_variable></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> TCP_MAX_CLIENTS  32</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//forward decleration</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofxTCPClient</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofxTCPServer</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> ofThread<span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\n\t\t<span class=\"token function\">ofxTCPServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token operator\">~</span><span class=\"token function\">ofxTCPServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// ofxTCPServer can't be copied to avoid problems with destruction</span>\n\t\t<span class=\"token function\">ofxTCPServer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxTCPServer <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\t\tofxTCPServer <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxTCPServer <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">delete</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setVerbose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> _verbose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> _port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> blocking <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxTCPSettings <span class=\"token operator\">&amp;</span> settings<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">setMessageDelimiter</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string delim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">disconnectClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> <span class=\"token function\">disconnectAllClients</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">getNumClients</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//total number of clients - not sutible for iterating through clients with</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">getLastID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//this returns the last current id number if you want to loop through with a for loop </span>\n\t\t\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">getClientPort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">getClientIP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isClientConnected</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//send data as a string - a short message</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//is added to the end of the string which is</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//used to indicate the end of the message to</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//the receiver see: STR_END_MSG (ofTCPClient.h)</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> std<span class=\"token operator\">::</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">sendToAll</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>string message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// same as send for binary data</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">sendRawMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> rawMsg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">sendRawMsgToAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> rawMsg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//send and receive raw bytes lets you send and receive</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//byte (char) arrays without modifiying or appending the data.</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//Strings terminate on null bytes so this is the better option</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//if you are trying to send something other than just ascii strings</span>\n\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">sendRawBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> rawBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">sendRawBytesToAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> rawBytes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//the received message length in bytes</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">getNumReceivedBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//get the message as a string</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//this will only work with messages coming via</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//send() and sendToAll()</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//or from messages terminating with the STR_END_MSG</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//which by default is  [/TCP]</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//eg: if you want to send \"Hello World\" from other</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//software and want to receive it as a string</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//sender should send \"Hello World[/TCP]\"</span>\n\t\tstd<span class=\"token operator\">::</span>string <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">// same as receive for binary data</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">receiveRawMsg</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> receiveBytes<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//pass in buffer to be filled - make sure the buffer</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//is at least as big as numBytes</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">receiveRawBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> receiveBytes<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\" spellcheck=\"true\">//fill a buffer as much as possible but leave the data on the TCP stack</span>\n\t\t<span class=\"token comment\" spellcheck=\"true\">//amount of filled-bytes returned</span>\n\t\t<span class=\"token keyword\">int</span> <span class=\"token function\">peekReceiveRawBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> receiveBytes<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span> numBytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">waitConnectedClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">waitConnectedClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t\tofxTCPClient <span class=\"token operator\">&amp;</span> <span class=\"token function\">getClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span> <span class=\"token function\">isClientSetup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clientID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">void</span> <span class=\"token function\">threadedFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tofxTCPManager\t\t\tTCPServer<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>std<span class=\"token operator\">::</span>shared_ptr<span class=\"token operator\">&lt;</span>ofxTCPClient<span class=\"token operator\">></span> <span class=\"token operator\">></span>\tTCPConnections<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>mutex\t\t\t\t\tmConnectionsLock<span class=\"token punctuation\">;</span>\n        std<span class=\"token operator\">::</span>condition_variable serverReady<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">bool</span>\t\t\tconnected<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>string\t\t\tstr<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span>\t\t\t\tidCount<span class=\"token punctuation\">,</span> port<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">bool</span>\t\t\tbClientBlocking<span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token operator\">::</span>string\t\t\tmessageDelimiter<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}