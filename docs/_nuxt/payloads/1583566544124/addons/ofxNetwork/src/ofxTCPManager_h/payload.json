{"data":[{"page":{"entry":{"name":"ofxTCPManager.h","filename":"ofxTCPManager.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/addons/ofxNetwork/src/ofxTCPManager.h","path":"/addons/ofxNetwork/src/ofxTCPManager_h","route":"/addons/ofxNetwork/src/ofxTCPManager.h","dir":"../addons/ofxNetwork/src","ext":"h","type":"source","id":131,"parent":123,"breadcrumbs":[123,124,36],"siblings":[],"translations":{}},"document":"<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//////////////////////////////////////////////////////////////////////////////////////</span>\n<span class=\"token comment\" spellcheck=\"true\">// Original author: ???????? we think Christian Naglhofer</span>\n<span class=\"token comment\" spellcheck=\"true\">// Crossplatform port by: Theodore Watson May 2007 - update Jan 2008</span>\n<span class=\"token comment\" spellcheck=\"true\">// Changes: Mac (and should be nix) equivilant functions and data types for</span>\n<span class=\"token comment\" spellcheck=\"true\">// win32 calls, artificial nix version of GetTickCount() used for timestamp</span>\n<span class=\"token comment\" spellcheck=\"true\">//</span>\n<span class=\"token comment\" spellcheck=\"true\">//////////////////////////////////////////////////////////////////////////////////////</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/***************************************************************\n\tUSAGE\n****************************************************************\n\nTCP Socket Client:\n------------------\n\n1) create()\n2) connect()\n3) send()\n...\nx) close()\n\noptional:\nSetTimeoutSend()\n\n\nTCP Socket Server:\n------------------\n\n1) create()\n2) bind()\n3) listen()\n4) accept()\n5) receive()\n...\nx) close()\n\noptional:\nSetTimeoutAccept()\nSetTimeoutReceive()\n\n****************************************************************/</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;wchar.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_WIN32</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//unix includes - works for osx should be same for *nix</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ctype.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netdb.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;errno.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;netinet/in.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;arpa/inet.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/timeb.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/socket.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/ioctl.h></span></span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifndef</span> TARGET_ANDROID</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/signal.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;signal.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">//other types</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> INVALID_SOCKET -1</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SOCKET_ERROR -1</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FAR</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SO_MAX_MSG_SIZE TCP_MAXSEG</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token comment\" spellcheck=\"true\">//windows includes</span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;winsock2.h></span></span>\n\t<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;ws2tcpip.h></span>\t\t</span><span class=\"token comment\" spellcheck=\"true\">// TCP/IP annex needed for multicasting</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">InetAddr</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> sockaddr_in\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\" spellcheck=\"true\">// constructors</span>\n\t<span class=\"token function\">InetAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>InetAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsin_family<span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\t\tsin_port<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tsin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">InetAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sockaddr<span class=\"token operator\">&amp;</span> sockAddr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sockAddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">InetAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sockaddr_in<span class=\"token operator\">&amp;</span> sin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr_in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">InetAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> ulAddr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> ushPort<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>InetAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsin_family<span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\t\tsin_port<span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>ushPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token operator\">=</span> <span class=\"token function\">htonl</span><span class=\"token punctuation\">(</span>ulAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">InetAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">wchar_t</span><span class=\"token operator\">*</span> pStrIP<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">char</span> szStrIP<span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n\t\t\t<span class=\"token function\">WideCharToMultiByte</span><span class=\"token punctuation\">(</span>CP_ACP<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pStrIP<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token function\">wcslen</span><span class=\"token punctuation\">(</span>pStrIP<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> szStrIP<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//theo note:</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//do we need to set the codepage here first?</span>\n\t\t\t<span class=\"token comment\" spellcheck=\"true\">//or is the default one okay?</span>\n\t\t\t<span class=\"token function\">wcstombs</span><span class=\"token punctuation\">(</span>szStrIP<span class=\"token punctuation\">,</span> pStrIP<span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>InetAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsin_family<span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\t\tsin_port<span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>szStrIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token function\">InetAddr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pStrIP<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>InetAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsin_family<span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span>\n\t\tsin_port<span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tsin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token operator\">=</span> <span class=\"token function\">inet_addr</span><span class=\"token punctuation\">(</span>pStrIP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// returns the address in dotted-decimal format</span>\n\t<span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">DottedDecimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">inet_ntoa</span><span class=\"token punctuation\">(</span>sin_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token function\">GetPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ntohs</span><span class=\"token punctuation\">(</span>sin_port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token function\">GetIpAddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">ntohl</span><span class=\"token punctuation\">(</span>sin_addr<span class=\"token punctuation\">.</span>s_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// operators added for efficiency</span>\n\t<span class=\"token keyword\">const</span> InetAddr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sockaddr<span class=\"token operator\">&amp;</span> sa<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sa<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">const</span> InetAddr<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sockaddr_in<span class=\"token operator\">&amp;</span> sin<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>sin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sockaddr_in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">operator</span> <span class=\"token function\">sockaddr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>sockaddr <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">operator</span> sockaddr <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>sockaddr <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">operator</span> sockaddr_in<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>sockaddr_in<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> InetAddr<span class=\"token operator\">*</span>\t\tLPCINETADDR<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> InetAddr<span class=\"token operator\">*</span>\t\t\tLPINETADDR<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Socket constants.</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SOCKET_TIMEOUT      SOCKET_ERROR - 1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> NO_TIMEOUT          0xFFFF</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OF_TCP_DEFAULT_TIMEOUT     NO_TIMEOUT</span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">//--------------------------------------------------------------------------------</span>\n<span class=\"token comment\" spellcheck=\"true\">/// Implementation of a TCP socket.</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofxTCPManager</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t<span class=\"token function\">ofxTCPManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">virtual</span> <span class=\"token operator\">~</span><span class=\"token function\">ofxTCPManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>m_hSocket<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>m_hSocket <span class=\"token operator\">!=</span> INVALID_SOCKET<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Listen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> iMaxConnections<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pAddrStr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usPort<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bReuse <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">Accept</span><span class=\"token punctuation\">(</span>ofxTCPManager<span class=\"token operator\">&amp;</span> sock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//sends the data, but it is not guaranteed that really all data will be sent</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">Send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\" spellcheck=\"true\">//all data will be sent guaranteed.</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">SendAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">PeekReceive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">ReceiveAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> pBuff<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> iSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">GetRemoteAddr</span><span class=\"token punctuation\">(</span>LPINETADDR pIntAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">GetInetAddr</span><span class=\"token punctuation\">(</span>LPINETADDR pInetAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SetTimeoutConnect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeoutInSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">SetTimeoutSend</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeoutInSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SetTimeoutReceive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeoutInSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">SetTimeoutAccept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> timeoutInSeconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetTimeoutConnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span>  <span class=\"token function\">GetTimeoutSend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetTimeoutReceive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetTimeoutAccept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">SetReceiveBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">SetSendBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> sizeInByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetReceiveBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetSendBufferSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span>  <span class=\"token function\">GetMaxConnections</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">SetNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">bool</span> useNonBlocking<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">IsNonBlocking</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">CheckHost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pAddrStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">CleanUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// Tries to detect half open connection http://stackoverflow.com/a/283387</span>\n\t<span class=\"token keyword\">bool</span> <span class=\"token function\">CheckIsConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// private copy so this can't be copied to avoid problems with destruction</span>\n\t<span class=\"token function\">ofxTCPManager</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxTCPManager <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\tofxTCPManager <span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofxTCPManager <span class=\"token operator\">&amp;</span> mom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">WaitReceive</span><span class=\"token punctuation\">(</span>time_t timeoutSeconds<span class=\"token punctuation\">,</span> time_t timeoutMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> <span class=\"token function\">WaitSend</span><span class=\"token punctuation\">(</span>time_t timeoutSeconds<span class=\"token punctuation\">,</span> time_t timeoutMillis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> m_iListenPort<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> m_iMaxConnections<span class=\"token punctuation\">;</span>\n\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> TARGET_WIN32</span>\n    SOCKET m_hSocket<span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token keyword\">int</span> m_hSocket<span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> m_dwTimeoutConnect<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> m_dwTimeoutSend<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> m_dwTimeoutReceive<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> m_dwTimeoutAccept<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> nonBlocking<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> m_bWinsockInit<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">bool</span> m_closing<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n","type":"source"}}],"fetch":[]}