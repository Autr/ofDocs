{"data":[{"page":{"entry":{"name":"gtc_round_functions","filename":"gtc_round_functions.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/glm/gtc_round_functions.markdown","path":"/documentation/glm/gtc_round_functions","route":"/documentation/glm/gtc_round_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":2022,"parent":1985,"breadcrumbs":[1985,1718],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"glm::ceilMultiple(Source, Multiple)","name":"glm::ceilMultiple","returns":"genType","returns_description":null,"parameters":"genType Source<span class=\"token punctuation\">,</span> genType Multiple","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Higher multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"short":"<p>Higher multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"short":"<p>Return the power of two number which value is just higher the input value,\nround up to a power of two.</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"syntax":"glm::ceilPowerOfTwo(Value)","name":"glm::ceilPowerOfTwo","returns":"genIUType","returns_description":null,"parameters":"genIUType Value","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return the power of two number which value is just higher the input value,\nround up to a power of two.</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"syntax":"glm::floorMultiple(Source, Multiple)","name":"glm::floorMultiple","returns":"genType","returns_description":null,"parameters":"genType Source<span class=\"token punctuation\">,</span> genType Multiple","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Lower multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"short":"<p>Lower multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"short":"<p>Return the power of two number which value is just lower the input value,\nround down to a power of two.</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"syntax":"glm::floorPowerOfTwo(Value)","name":"glm::floorPowerOfTwo","returns":"genIUType","returns_description":null,"parameters":"genIUType Value","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return the power of two number which value is just lower the input value,\nround down to a power of two.</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"short":"<p>Return true if the 'Value' is a multiple of 'Multiple'.</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"short":"<p>Return true if the 'Value' is a multiple of 'Multiple'.</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"syntax":"glm::isMultiple(Value, Multiple)","name":"glm::isMultiple","returns":"bool","returns_description":null,"parameters":"genIUType Value<span class=\"token punctuation\">,</span> genIUType Multiple","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return true if the 'Value' is a multiple of 'Multiple'.</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"short":"<p>Return true if the value is a power of two number.</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"syntax":"glm::isPowerOfTwo(Value)","name":"glm::isPowerOfTwo","returns":"bool","returns_description":null,"parameters":"genIUType Value","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return true if the value is a power of two number.</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"syntax":"glm::roundMultiple(Source, Multiple)","name":"glm::roundMultiple","returns":"genType","returns_description":null,"parameters":"genType Source<span class=\"token punctuation\">,</span> genType Multiple","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Lower multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"short":"<p>Lower multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"short":"<p>Return the power of two number which value is the closet to the input value.</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{"syntax":"glm::roundPowerOfTwo(Value)","name":"glm::roundPowerOfTwo","returns":"genIUType","returns_description":null,"parameters":"genIUType Value","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return the power of two number which value is the closet to the input value.</p>\n<p><strong>See also</strong>: gtc_round</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###genType glm::ceilMultiple(Source, Multiple)</p>\n<p>&lt;!--\n<em>syntax: glm::ceilMultiple(Source, Multiple)</em>\n<em>name: glm::ceilMultiple</em>\n<em>returns: genType</em>\n_returns_description: _\n<em>parameters: genType Source, genType Multiple</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Higher multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; T, P &gt; glm::ceilMultiple(T, &amp;Source = P, T, &amp;Multiple = P)</p>\n<p>&lt;!--\n<em>syntax: glm::ceilMultiple(T, &amp;Source = P, T, &amp;Multiple = P)</em>\n<em>name: glm::ceilMultiple</em>\n<em>returns: vecType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;Source=P, const vecType&lt; T, P &gt; &amp;Multiple=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Higher multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; T, P &gt; glm::ceilPowerOfTwo(T, &amp;value = P)</p>\n<p>&lt;!--\n<em>syntax: glm::ceilPowerOfTwo(T, &amp;value = P)</em>\n<em>name: glm::ceilPowerOfTwo</em>\n<em>returns: vecType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;value=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the power of two number which value is just higher the input value,\nround up to a power of two.</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###genIUType glm::ceilPowerOfTwo(Value)</p>\n<p>&lt;!--\n<em>syntax: glm::ceilPowerOfTwo(Value)</em>\n<em>name: glm::ceilPowerOfTwo</em>\n<em>returns: genIUType</em>\n_returns_description: _\n<em>parameters: genIUType Value</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the power of two number which value is just higher the input value,\nround up to a power of two.</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###genType glm::floorMultiple(Source, Multiple)</p>\n<p>&lt;!--\n<em>syntax: glm::floorMultiple(Source, Multiple)</em>\n<em>name: glm::floorMultiple</em>\n<em>returns: genType</em>\n_returns_description: _\n<em>parameters: genType Source, genType Multiple</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Lower multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; T, P &gt; glm::floorMultiple(T, &amp;Source = P, T, &amp;Multiple = P)</p>\n<p>&lt;!--\n<em>syntax: glm::floorMultiple(T, &amp;Source = P, T, &amp;Multiple = P)</em>\n<em>name: glm::floorMultiple</em>\n<em>returns: vecType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;Source=P, const vecType&lt; T, P &gt; &amp;Multiple=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Lower multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; T, P &gt; glm::floorPowerOfTwo(T, &amp;value = P)</p>\n<p>&lt;!--\n<em>syntax: glm::floorPowerOfTwo(T, &amp;value = P)</em>\n<em>name: glm::floorPowerOfTwo</em>\n<em>returns: vecType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;value=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the power of two number which value is just lower the input value,\nround down to a power of two.</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###genIUType glm::floorPowerOfTwo(Value)</p>\n<p>&lt;!--\n<em>syntax: glm::floorPowerOfTwo(Value)</em>\n<em>name: glm::floorPowerOfTwo</em>\n<em>returns: genIUType</em>\n_returns_description: _\n<em>parameters: genIUType Value</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the power of two number which value is just lower the input value,\nround down to a power of two.</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; bool, P &gt; glm::isMultiple(T, &amp;Value = P, Multiple)</p>\n<p>&lt;!--\n<em>syntax: glm::isMultiple(T, &amp;Value = P, Multiple)</em>\n<em>name: glm::isMultiple</em>\n<em>returns: vecType&lt; bool, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;Value=P, T Multiple</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return true if the 'Value' is a multiple of 'Multiple'.</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; bool, P &gt; glm::isMultiple(T, &amp;Value = P, T, &amp;Multiple = P)</p>\n<p>&lt;!--\n<em>syntax: glm::isMultiple(T, &amp;Value = P, T, &amp;Multiple = P)</em>\n<em>name: glm::isMultiple</em>\n<em>returns: vecType&lt; bool, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;Value=P, const vecType&lt; T, P &gt; &amp;Multiple=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return true if the 'Value' is a multiple of 'Multiple'.</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool glm::isMultiple(Value, Multiple)</p>\n<p>&lt;!--\n<em>syntax: glm::isMultiple(Value, Multiple)</em>\n<em>name: glm::isMultiple</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: genIUType Value, genIUType Multiple</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return true if the 'Value' is a multiple of 'Multiple'.</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; bool, P &gt; glm::isPowerOfTwo(T, &amp;value = P)</p>\n<p>&lt;!--\n<em>syntax: glm::isPowerOfTwo(T, &amp;value = P)</em>\n<em>name: glm::isPowerOfTwo</em>\n<em>returns: vecType&lt; bool, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;value=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return true if the value is a power of two number.</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool glm::isPowerOfTwo(Value)</p>\n<p>&lt;!--\n<em>syntax: glm::isPowerOfTwo(Value)</em>\n<em>name: glm::isPowerOfTwo</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: genIUType Value</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return true if the value is a power of two number.</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###genType glm::roundMultiple(Source, Multiple)</p>\n<p>&lt;!--\n<em>syntax: glm::roundMultiple(Source, Multiple)</em>\n<em>name: glm::roundMultiple</em>\n<em>returns: genType</em>\n_returns_description: _\n<em>parameters: genType Source, genType Multiple</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Lower multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; T, P &gt; glm::roundMultiple(T, &amp;Source = P, T, &amp;Multiple = P)</p>\n<p>&lt;!--\n<em>syntax: glm::roundMultiple(T, &amp;Source = P, T, &amp;Multiple = P)</em>\n<em>name: glm::roundMultiple</em>\n<em>returns: vecType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;Source=P, const vecType&lt; T, P &gt; &amp;Multiple=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Lower multiple number of Source.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genType Floating-point or integer scalar or vector types.</p>\n<p><strong>Parameters:</strong></p>\n<p>Source</p>\n<p>Multiple Must be a null or positive value</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; T, P &gt; glm::roundPowerOfTwo(T, &amp;value = P)</p>\n<p>&lt;!--\n<em>syntax: glm::roundPowerOfTwo(T, &amp;value = P)</em>\n<em>name: glm::roundPowerOfTwo</em>\n<em>returns: vecType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;value=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the power of two number which value is the closet to the input value.</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###genIUType glm::roundPowerOfTwo(Value)</p>\n<p>&lt;!--\n<em>syntax: glm::roundPowerOfTwo(Value)</em>\n<em>name: glm::roundPowerOfTwo</em>\n<em>returns: genIUType</em>\n_returns_description: _\n<em>parameters: genIUType Value</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the power of two number which value is the closet to the input value.</p>\n<p><strong>See also</strong>: gtc_round</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::ceilMultiple(Source, Multiple)\n\n<!--\n_syntax: glm::ceilMultiple(Source, Multiple)_\n_name: glm::ceilMultiple_\n_returns: genType_\n_returns_description: _\n_parameters: genType Source, genType Multiple_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nHigher multiple number of Source.\n\n\n**Type parameters:**\n\ngenType Floating-point or integer scalar or vector types.\n\n**Parameters:**\n\nSource\n\nMultiple Must be a null or positive value\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::ceilMultiple(T, &Source = P, T, &Multiple = P)\n\n<!--\n_syntax: glm::ceilMultiple(T, &Source = P, T, &Multiple = P)_\n_name: glm::ceilMultiple_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &Source=P, const vecType< T, P > &Multiple=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nHigher multiple number of Source.\n\n\n**Type parameters:**\n\ngenType Floating-point or integer scalar or vector types.\n\n**Parameters:**\n\nSource\n\nMultiple Must be a null or positive value\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::ceilPowerOfTwo(T, &value = P)\n\n<!--\n_syntax: glm::ceilPowerOfTwo(T, &value = P)_\n_name: glm::ceilPowerOfTwo_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &value=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the power of two number which value is just higher the input value,\nround up to a power of two.\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genIUType glm::ceilPowerOfTwo(Value)\n\n<!--\n_syntax: glm::ceilPowerOfTwo(Value)_\n_name: glm::ceilPowerOfTwo_\n_returns: genIUType_\n_returns_description: _\n_parameters: genIUType Value_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the power of two number which value is just higher the input value,\nround up to a power of two.\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::floorMultiple(Source, Multiple)\n\n<!--\n_syntax: glm::floorMultiple(Source, Multiple)_\n_name: glm::floorMultiple_\n_returns: genType_\n_returns_description: _\n_parameters: genType Source, genType Multiple_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLower multiple number of Source.\n\n\n**Type parameters:**\n\ngenType Floating-point or integer scalar or vector types.\n\n**Parameters:**\n\nSource\n\nMultiple Must be a null or positive value\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::floorMultiple(T, &Source = P, T, &Multiple = P)\n\n<!--\n_syntax: glm::floorMultiple(T, &Source = P, T, &Multiple = P)_\n_name: glm::floorMultiple_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &Source=P, const vecType< T, P > &Multiple=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLower multiple number of Source.\n\n\n**Type parameters:**\n\ngenType Floating-point or integer scalar or vector types.\n\n**Parameters:**\n\nSource\n\nMultiple Must be a null or positive value\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::floorPowerOfTwo(T, &value = P)\n\n<!--\n_syntax: glm::floorPowerOfTwo(T, &value = P)_\n_name: glm::floorPowerOfTwo_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &value=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the power of two number which value is just lower the input value,\nround down to a power of two.\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genIUType glm::floorPowerOfTwo(Value)\n\n<!--\n_syntax: glm::floorPowerOfTwo(Value)_\n_name: glm::floorPowerOfTwo_\n_returns: genIUType_\n_returns_description: _\n_parameters: genIUType Value_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the power of two number which value is just lower the input value,\nround down to a power of two.\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< bool, P > glm::isMultiple(T, &Value = P, Multiple)\n\n<!--\n_syntax: glm::isMultiple(T, &Value = P, Multiple)_\n_name: glm::isMultiple_\n_returns: vecType< bool, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &Value=P, T Multiple_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn true if the 'Value' is a multiple of 'Multiple'.\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< bool, P > glm::isMultiple(T, &Value = P, T, &Multiple = P)\n\n<!--\n_syntax: glm::isMultiple(T, &Value = P, T, &Multiple = P)_\n_name: glm::isMultiple_\n_returns: vecType< bool, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &Value=P, const vecType< T, P > &Multiple=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn true if the 'Value' is a multiple of 'Multiple'.\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool glm::isMultiple(Value, Multiple)\n\n<!--\n_syntax: glm::isMultiple(Value, Multiple)_\n_name: glm::isMultiple_\n_returns: bool_\n_returns_description: _\n_parameters: genIUType Value, genIUType Multiple_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn true if the 'Value' is a multiple of 'Multiple'.\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< bool, P > glm::isPowerOfTwo(T, &value = P)\n\n<!--\n_syntax: glm::isPowerOfTwo(T, &value = P)_\n_name: glm::isPowerOfTwo_\n_returns: vecType< bool, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &value=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn true if the value is a power of two number.\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool glm::isPowerOfTwo(Value)\n\n<!--\n_syntax: glm::isPowerOfTwo(Value)_\n_name: glm::isPowerOfTwo_\n_returns: bool_\n_returns_description: _\n_parameters: genIUType Value_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn true if the value is a power of two number.\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genType glm::roundMultiple(Source, Multiple)\n\n<!--\n_syntax: glm::roundMultiple(Source, Multiple)_\n_name: glm::roundMultiple_\n_returns: genType_\n_returns_description: _\n_parameters: genType Source, genType Multiple_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLower multiple number of Source.\n\n\n**Type parameters:**\n\ngenType Floating-point or integer scalar or vector types.\n\n**Parameters:**\n\nSource\n\nMultiple Must be a null or positive value\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::roundMultiple(T, &Source = P, T, &Multiple = P)\n\n<!--\n_syntax: glm::roundMultiple(T, &Source = P, T, &Multiple = P)_\n_name: glm::roundMultiple_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &Source=P, const vecType< T, P > &Multiple=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLower multiple number of Source.\n\n\n**Type parameters:**\n\ngenType Floating-point or integer scalar or vector types.\n\n**Parameters:**\n\nSource\n\nMultiple Must be a null or positive value\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::roundPowerOfTwo(T, &value = P)\n\n<!--\n_syntax: glm::roundPowerOfTwo(T, &value = P)_\n_name: glm::roundPowerOfTwo_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &value=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the power of two number which value is the closet to the input value.\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###genIUType glm::roundPowerOfTwo(Value)\n\n<!--\n_syntax: glm::roundPowerOfTwo(Value)_\n_name: glm::roundPowerOfTwo_\n_returns: genIUType_\n_returns_description: _\n_parameters: genIUType Value_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the power of two number which value is the closet to the input value.\n\n\n**See also**: gtc_round\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}