{"data":[{"page":{"entry":{"name":"gtx_simd_quat_functions","filename":"gtx_simd_quat_functions.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/glm/gtx_simd_quat_functions.markdown","path":"/documentation/glm/gtx_simd_quat_functions","route":"/documentation/glm/gtx_simd_quat_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":2064,"parent":1985,"breadcrumbs":[1985,1718],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"glm::angleAxisSIMD(&angle, &axis)","name":"glm::angleAxisSIMD","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Build a quaternion from an angle and a normalized axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>angle Angle expressed in radians.</p>\n<p>axis Axis of the quaternion, must be normalized.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::angleAxisSIMD(&angle, &x, &y, &z)","name":"glm::angleAxisSIMD","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>z","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Build a quaternion from an angle and a normalized axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>angle Angle expressed in radians.</p>\n<p>x x component of the x-axis, x, y, z must be a normalized axis</p>\n<p>y y component of the y-axis, x, y, z must be a normalized axis</p>\n<p>z z component of the z-axis, x, y, z must be a normalized axis</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::conjugate(&q)","name":"glm::conjugate","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>q","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the q conjugate.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::dot(&q1, &q2)","name":"glm::dot","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>q1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>q2","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns dot product of q1 and q2, i.e., q1[0] * q2[0] + q1[1] * q2[1] + ...</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::fastMix(&x, &y, &a)","name":"glm::fastMix","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>a","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Faster spherical linear interpolation of two unit length quaternions.</p>\n<p>This is the same as mix(), except for two rules:</p>\n<ol>\n<li>The two quaternions must be unit length.</li>\n<li>The interpolation factor (a) must be in the range [0, 1].</li>\n</ol>\n<p>This will use the equivalent to fastAcos() and fastSin().</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p><strong>See also</strong>: - mix(detail::fquatSIMD const &amp; x, detail::fquatSIMD const &amp; y, T const &amp; a)</p>\n","desc":""},{"syntax":"glm::fastSin(x)","name":"glm::fastSin","returns":"__m128","returns_description":null,"parameters":"__m128 x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Performs the equivalent of glm::fastSin() on each component of the given __m128.</p>\n","desc":""},{"syntax":"glm::fastSlerp(&x, &y, &a)","name":"glm::fastSlerp","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>a","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Identical to fastMix() except takes the shortest path.</p>\n<p>The same rules apply here as those in fastMix(). Both quaternions must be unit length and 'a' must be\nin the range [0, 1].</p>\n<p><strong>See also</strong>: - fastMix(detail::fquatSIMD const &amp; x, detail::fquatSIMD const &amp; y, T const &amp; a)</p>\n<p><strong>See also</strong>: - slerp(detail::fquatSIMD const &amp; x, detail::fquatSIMD const &amp; y, T const &amp; a)</p>\n","desc":""},{"syntax":"glm::inverse(&q)","name":"glm::inverse","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>q","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the q inverse.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::length(&x)","name":"glm::length","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the length of the quaternion.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::lerp(&x, &y, &a)","name":"glm::lerp","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>a","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Linear interpolation of two quaternions.\nThe interpolation is oriented.</p>\n<p><strong>Parameters:</strong></p>\n<p>x A quaternion</p>\n<p>y A quaternion</p>\n<p>a Interpolation factor. The interpolation is defined in the range [0, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the quaternion. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::mat4SIMD_cast(&q)","name":"glm::mat4SIMD_cast","returns":"detail::fmat4x4SIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>q","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a simdQuat to a simdMat4</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::mat4_cast(&q)","name":"glm::mat4_cast","returns":"glm::mat4","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>q","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts a simdQuat to a standard mat4.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::mix(&x, &y, &a)","name":"glm::mix","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>a","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Spherical linear interpolation of two quaternions.\nThe interpolation is oriented and the rotation is performed at constant speed.\nFor short path spherical linear interpolation, use the slerp function.</p>\n<p><strong>Parameters:</strong></p>\n<p>x A quaternion</p>\n<p>y A quaternion</p>\n<p>a Interpolation factor. The interpolation is defined beyond the range [0, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the quaternion. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p><strong>See also</strong>: - slerp(detail::fquatSIMD const &amp; x, detail::fquatSIMD const &amp; y, T const &amp; a)</p>\n","desc":""},{"syntax":"glm::normalize(&x)","name":"glm::normalize","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the normalized quaternion.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::quatSIMD_cast(&m = P)","name":"glm::quatSIMD_cast","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat4 <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts a mat4 to a simdQuat.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::quatSIMD_cast(&m = P)","name":"glm::quatSIMD_cast","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat3 <span class=\"token operator\">&amp;</span>m<span class=\"token operator\">=</span>P","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Converts a mat3 to a simdQuat.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::quatSIMD_cast(&m)","name":"glm::quatSIMD_cast","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fmat4x4SIMD <span class=\"token operator\">&amp;</span>m","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a simdMat4 to a simdQuat.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::quat_cast(&x)","name":"glm::quat_cast","returns":"glm::quat","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Convert a simdQuat to a quat.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{"syntax":"glm::slerp(&x, &y, &a)","name":"glm::slerp","returns":"detail::fquatSIMD","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> detail<span class=\"token operator\">::</span>fquatSIMD <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> <span class=\"token operator\">&amp;</span>a","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Spherical linear interpolation of two quaternions.\nThe interpolation always take the short path and the rotation is performed at constant speed.</p>\n<p><strong>Parameters:</strong></p>\n<p>x A quaternion</p>\n<p>y A quaternion</p>\n<p>a Interpolation factor. The interpolation is defined beyond the range [0, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the quaternion. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::angleAxisSIMD(&amp;angle, &amp;axis)</p>\n<p>&lt;!--\n<em>syntax: glm::angleAxisSIMD(&amp;angle, &amp;axis)</em>\n<em>name: glm::angleAxisSIMD</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const float &amp;angle, const glm::vec3 &amp;axis</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Build a quaternion from an angle and a normalized axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>angle Angle expressed in radians.</p>\n<p>axis Axis of the quaternion, must be normalized.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::angleAxisSIMD(&amp;angle, &amp;x, &amp;y, &amp;z)</p>\n<p>&lt;!--\n<em>syntax: glm::angleAxisSIMD(&amp;angle, &amp;x, &amp;y, &amp;z)</em>\n<em>name: glm::angleAxisSIMD</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const float &amp;angle, const float &amp;x, const float &amp;y, const float &amp;z</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Build a quaternion from an angle and a normalized axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>angle Angle expressed in radians.</p>\n<p>x x component of the x-axis, x, y, z must be a normalized axis</p>\n<p>y y component of the y-axis, x, y, z must be a normalized axis</p>\n<p>z z component of the z-axis, x, y, z must be a normalized axis</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::conjugate(&amp;q)</p>\n<p>&lt;!--\n<em>syntax: glm::conjugate(&amp;q)</em>\n<em>name: glm::conjugate</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;q</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the q conjugate.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::dot(&amp;q1, &amp;q2)</p>\n<p>&lt;!--\n<em>syntax: glm::dot(&amp;q1, &amp;q2)</em>\n<em>name: glm::dot</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;q1, const detail::fquatSIMD &amp;q2</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns dot product of q1 and q2, i.e., q1[0] * q2[0] + q1[1] * q2[1] + ...</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::fastMix(&amp;x, &amp;y, &amp;a)</p>\n<p>&lt;!--\n<em>syntax: glm::fastMix(&amp;x, &amp;y, &amp;a)</em>\n<em>name: glm::fastMix</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;x, const detail::fquatSIMD &amp;y, const float &amp;a</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Faster spherical linear interpolation of two unit length quaternions.</p>\n<p>This is the same as mix(), except for two rules:</p>\n<ol>\n<li>The two quaternions must be unit length.</li>\n<li>The interpolation factor (a) must be in the range [0, 1].</li>\n</ol>\n<p>This will use the equivalent to fastAcos() and fastSin().</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p><strong>See also</strong>: - mix(detail::fquatSIMD const &amp; x, detail::fquatSIMD const &amp; y, T const &amp; a)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###__m128 glm::fastSin(x)</p>\n<p>&lt;!--\n<em>syntax: glm::fastSin(x)</em>\n<em>name: glm::fastSin</em>\n_returns: _<em>m128</em>\n_returns_description: _\n_parameters: _<em>m128 x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Performs the equivalent of glm::fastSin() on each component of the given __m128.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::fastSlerp(&amp;x, &amp;y, &amp;a)</p>\n<p>&lt;!--\n<em>syntax: glm::fastSlerp(&amp;x, &amp;y, &amp;a)</em>\n<em>name: glm::fastSlerp</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;x, const detail::fquatSIMD &amp;y, const float &amp;a</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Identical to fastMix() except takes the shortest path.</p>\n<p>The same rules apply here as those in fastMix(). Both quaternions must be unit length and 'a' must be\nin the range [0, 1].</p>\n<p><strong>See also</strong>: - fastMix(detail::fquatSIMD const &amp; x, detail::fquatSIMD const &amp; y, T const &amp; a)</p>\n<p><strong>See also</strong>: - slerp(detail::fquatSIMD const &amp; x, detail::fquatSIMD const &amp; y, T const &amp; a)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::inverse(&amp;q)</p>\n<p>&lt;!--\n<em>syntax: glm::inverse(&amp;q)</em>\n<em>name: glm::inverse</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;q</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the q inverse.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float glm::length(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::length(&amp;x)</em>\n<em>name: glm::length</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the length of the quaternion.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::lerp(&amp;x, &amp;y, &amp;a)</p>\n<p>&lt;!--\n<em>syntax: glm::lerp(&amp;x, &amp;y, &amp;a)</em>\n<em>name: glm::lerp</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;x, const detail::fquatSIMD &amp;y, const float &amp;a</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Linear interpolation of two quaternions.\nThe interpolation is oriented.</p>\n<p><strong>Parameters:</strong></p>\n<p>x A quaternion</p>\n<p>y A quaternion</p>\n<p>a Interpolation factor. The interpolation is defined in the range [0, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the quaternion. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fmat4x4SIMD glm::mat4SIMD_cast(&amp;q)</p>\n<p>&lt;!--\n<em>syntax: glm::mat4SIMD_cast(&amp;q)</em>\n<em>name: glm::mat4SIMD_cast</em>\n<em>returns: detail::fmat4x4SIMD</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;q</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert a simdQuat to a simdMat4</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 glm::mat4_cast(&amp;q)</p>\n<p>&lt;!--\n<em>syntax: glm::mat4_cast(&amp;q)</em>\n<em>name: glm::mat4_cast</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;q</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Converts a simdQuat to a standard mat4.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::mix(&amp;x, &amp;y, &amp;a)</p>\n<p>&lt;!--\n<em>syntax: glm::mix(&amp;x, &amp;y, &amp;a)</em>\n<em>name: glm::mix</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;x, const detail::fquatSIMD &amp;y, const float &amp;a</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Spherical linear interpolation of two quaternions.\nThe interpolation is oriented and the rotation is performed at constant speed.\nFor short path spherical linear interpolation, use the slerp function.</p>\n<p><strong>Parameters:</strong></p>\n<p>x A quaternion</p>\n<p>y A quaternion</p>\n<p>a Interpolation factor. The interpolation is defined beyond the range [0, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the quaternion. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p><strong>See also</strong>: - slerp(detail::fquatSIMD const &amp; x, detail::fquatSIMD const &amp; y, T const &amp; a)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::normalize(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::normalize(&amp;x)</em>\n<em>name: glm::normalize</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the normalized quaternion.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::quatSIMD_cast(&amp;m = P)</p>\n<p>&lt;!--\n<em>syntax: glm::quatSIMD_cast(&amp;m = P)</em>\n<em>name: glm::quatSIMD_cast</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const glm::mat4 &amp;m=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Converts a mat4 to a simdQuat.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::quatSIMD_cast(&amp;m = P)</p>\n<p>&lt;!--\n<em>syntax: glm::quatSIMD_cast(&amp;m = P)</em>\n<em>name: glm::quatSIMD_cast</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const glm::mat3 &amp;m=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Converts a mat3 to a simdQuat.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::quatSIMD_cast(&amp;m)</p>\n<p>&lt;!--\n<em>syntax: glm::quatSIMD_cast(&amp;m)</em>\n<em>name: glm::quatSIMD_cast</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const detail::fmat4x4SIMD &amp;m</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert a simdMat4 to a simdQuat.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::quat glm::quat_cast(&amp;x)</p>\n<p>&lt;!--\n<em>syntax: glm::quat_cast(&amp;x)</em>\n<em>name: glm::quat_cast</em>\n<em>returns: glm::quat</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert a simdQuat to a quat.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###detail::fquatSIMD glm::slerp(&amp;x, &amp;y, &amp;a)</p>\n<p>&lt;!--\n<em>syntax: glm::slerp(&amp;x, &amp;y, &amp;a)</em>\n<em>name: glm::slerp</em>\n<em>returns: detail::fquatSIMD</em>\n_returns_description: _\n<em>parameters: const detail::fquatSIMD &amp;x, const detail::fquatSIMD &amp;y, const float &amp;a</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Spherical linear interpolation of two quaternions.\nThe interpolation always take the short path and the rotation is performed at constant speed.</p>\n<p><strong>Parameters:</strong></p>\n<p>x A quaternion</p>\n<p>y A quaternion</p>\n<p>a Interpolation factor. The interpolation is defined beyond the range [0, 1].</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Value type used to build the quaternion. Supported: half, float or double.</p>\n<p><strong>See also</strong>: gtx_simd_quat</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::angleAxisSIMD(&angle, &axis)\n\n<!--\n_syntax: glm::angleAxisSIMD(&angle, &axis)_\n_name: glm::angleAxisSIMD_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const float &angle, const glm::vec3 &axis_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuild a quaternion from an angle and a normalized axis.\n\n\n**Parameters:**\n\nangle Angle expressed in radians.\n\naxis Axis of the quaternion, must be normalized.\n\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::angleAxisSIMD(&angle, &x, &y, &z)\n\n<!--\n_syntax: glm::angleAxisSIMD(&angle, &x, &y, &z)_\n_name: glm::angleAxisSIMD_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const float &angle, const float &x, const float &y, const float &z_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBuild a quaternion from an angle and a normalized axis.\n\n\n**Parameters:**\n\nangle Angle expressed in radians.\n\nx x component of the x-axis, x, y, z must be a normalized axis\n\ny y component of the y-axis, x, y, z must be a normalized axis\n\nz z component of the z-axis, x, y, z must be a normalized axis\n\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::conjugate(&q)\n\n<!--\n_syntax: glm::conjugate(&q)_\n_name: glm::conjugate_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const detail::fquatSIMD &q_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the q conjugate.\n\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::dot(&q1, &q2)\n\n<!--\n_syntax: glm::dot(&q1, &q2)_\n_name: glm::dot_\n_returns: float_\n_returns_description: _\n_parameters: const detail::fquatSIMD &q1, const detail::fquatSIMD &q2_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns dot product of q1 and q2, i.e., q1[0] * q2[0] + q1[1] * q2[1] + ...\n\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::fastMix(&x, &y, &a)\n\n<!--\n_syntax: glm::fastMix(&x, &y, &a)_\n_name: glm::fastMix_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const detail::fquatSIMD &x, const detail::fquatSIMD &y, const float &a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFaster spherical linear interpolation of two unit length quaternions.\n\nThis is the same as mix(), except for two rules:\n  1) The two quaternions must be unit length.\n  2) The interpolation factor (a) must be in the range [0, 1].\n\nThis will use the equivalent to fastAcos() and fastSin().\n\n\n**See also**: gtx_simd_quat\n\n**See also**: - mix(detail::fquatSIMD const & x, detail::fquatSIMD const & y, T const & a)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###__m128 glm::fastSin(x)\n\n<!--\n_syntax: glm::fastSin(x)_\n_name: glm::fastSin_\n_returns: __m128_\n_returns_description: _\n_parameters: __m128 x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPerforms the equivalent of glm::fastSin() on each component of the given __m128.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::fastSlerp(&x, &y, &a)\n\n<!--\n_syntax: glm::fastSlerp(&x, &y, &a)_\n_name: glm::fastSlerp_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const detail::fquatSIMD &x, const detail::fquatSIMD &y, const float &a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nIdentical to fastMix() except takes the shortest path.\n\nThe same rules apply here as those in fastMix(). Both quaternions must be unit length and 'a' must be\nin the range [0, 1].\n\n\n**See also**: - fastMix(detail::fquatSIMD const & x, detail::fquatSIMD const & y, T const & a)\n\n**See also**: - slerp(detail::fquatSIMD const & x, detail::fquatSIMD const & y, T const & a)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::inverse(&q)\n\n<!--\n_syntax: glm::inverse(&q)_\n_name: glm::inverse_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const detail::fquatSIMD &q_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the q inverse.\n\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float glm::length(&x)\n\n<!--\n_syntax: glm::length(&x)_\n_name: glm::length_\n_returns: float_\n_returns_description: _\n_parameters: const detail::fquatSIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the length of the quaternion.\n\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::lerp(&x, &y, &a)\n\n<!--\n_syntax: glm::lerp(&x, &y, &a)_\n_name: glm::lerp_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const detail::fquatSIMD &x, const detail::fquatSIMD &y, const float &a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLinear interpolation of two quaternions.\nThe interpolation is oriented.\n\n\n**Parameters:**\n\nx A quaternion\n\ny A quaternion\n\na Interpolation factor. The interpolation is defined in the range [0, 1].\n\n**Type parameters:**\n\nT Value type used to build the quaternion. Supported: half, float or double.\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fmat4x4SIMD glm::mat4SIMD_cast(&q)\n\n<!--\n_syntax: glm::mat4SIMD_cast(&q)_\n_name: glm::mat4SIMD_cast_\n_returns: detail::fmat4x4SIMD_\n_returns_description: _\n_parameters: const detail::fquatSIMD &q_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Convert a simdQuat to a simdMat4\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 glm::mat4_cast(&q)\n\n<!--\n_syntax: glm::mat4_cast(&q)_\n_name: glm::mat4_cast_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: const detail::fquatSIMD &q_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Converts a simdQuat to a standard mat4.\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::mix(&x, &y, &a)\n\n<!--\n_syntax: glm::mix(&x, &y, &a)_\n_name: glm::mix_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const detail::fquatSIMD &x, const detail::fquatSIMD &y, const float &a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSpherical linear interpolation of two quaternions.\nThe interpolation is oriented and the rotation is performed at constant speed.\nFor short path spherical linear interpolation, use the slerp function.\n\n\n**Parameters:**\n\nx A quaternion\n\ny A quaternion\n\na Interpolation factor. The interpolation is defined beyond the range [0, 1].\n\n**Type parameters:**\n\nT Value type used to build the quaternion. Supported: half, float or double.\n\n**See also**: gtx_simd_quat\n\n**See also**: - slerp(detail::fquatSIMD const & x, detail::fquatSIMD const & y, T const & a)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::normalize(&x)\n\n<!--\n_syntax: glm::normalize(&x)_\n_name: glm::normalize_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const detail::fquatSIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the normalized quaternion.\n\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::quatSIMD_cast(&m = P)\n\n<!--\n_syntax: glm::quatSIMD_cast(&m = P)_\n_name: glm::quatSIMD_cast_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const glm::mat4 &m=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Converts a mat4 to a simdQuat.\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::quatSIMD_cast(&m = P)\n\n<!--\n_syntax: glm::quatSIMD_cast(&m = P)_\n_name: glm::quatSIMD_cast_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const glm::mat3 &m=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Converts a mat3 to a simdQuat.\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::quatSIMD_cast(&m)\n\n<!--\n_syntax: glm::quatSIMD_cast(&m)_\n_name: glm::quatSIMD_cast_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const detail::fmat4x4SIMD &m_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Convert a simdMat4 to a simdQuat.\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat glm::quat_cast(&x)\n\n<!--\n_syntax: glm::quat_cast(&x)_\n_name: glm::quat_cast_\n_returns: glm::quat_\n_returns_description: _\n_parameters: const detail::fquatSIMD &x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Convert a simdQuat to a quat.\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###detail::fquatSIMD glm::slerp(&x, &y, &a)\n\n<!--\n_syntax: glm::slerp(&x, &y, &a)_\n_name: glm::slerp_\n_returns: detail::fquatSIMD_\n_returns_description: _\n_parameters: const detail::fquatSIMD &x, const detail::fquatSIMD &y, const float &a_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSpherical linear interpolation of two quaternions.\nThe interpolation always take the short path and the rotation is performed at constant speed.\n\n\n**Parameters:**\n\nx A quaternion\n\ny A quaternion\n\na Interpolation factor. The interpolation is defined beyond the range [0, 1].\n\n**Type parameters:**\n\nT Value type used to build the quaternion. Supported: half, float or double.\n\n**See also**: gtx_simd_quat\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}