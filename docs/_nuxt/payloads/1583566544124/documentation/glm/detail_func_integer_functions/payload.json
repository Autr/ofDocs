{"data":[{"page":{"entry":{"name":"detail_func_integer_functions","filename":"detail_func_integer_functions.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/glm/detail_func_integer_functions.markdown","path":"/documentation/glm/detail_func_integer_functions","route":"/documentation/glm/detail_func_integer_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":1989,"parent":1985,"breadcrumbs":[1985,1718],"siblings":[],"translations":{}},"description":{},"methods":[null,{"desc":""},{"syntax":"glm::bitCount(v)","name":"glm::bitCount","returns":"int","returns_description":null,"parameters":"genType v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{"syntax":"glm::findLSB(x)","name":"glm::findLSB","returns":"int","returns_description":null,"parameters":"genIUType x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"desc":""},{"syntax":"glm::findMSB(x)","name":"glm::findMSB","returns":"int","returns_description":null,"parameters":"genIUType x","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":""},{"desc":""},{"desc":""},{"desc":""},{"desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; int, P &gt; glm::bitCount(T, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::bitCount(T, &amp;v = P)</em>\n<em>name: glm::bitCount</em>\n<em>returns: vecType&lt; int, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the number of bits set to 1 in the binary representation of value.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Signed or unsigned integer scalar or vector types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/bitCount.xml&quot;&gt;GLSL bitCount man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int glm::bitCount(v)</p>\n<p>&lt;!--\n<em>syntax: glm::bitCount(v)</em>\n<em>name: glm::bitCount</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: genType v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the number of bits set to 1 in the binary representation of value.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Signed or unsigned integer scalar or vector types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/bitCount.xml&quot;&gt;GLSL bitCount man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; T, P &gt; glm::bitfieldExtract(T, &amp;Value = P, Offset, Bits)</p>\n<p>&lt;!--\n<em>syntax: glm::bitfieldExtract(T, &amp;Value = P, Offset, Bits)</em>\n<em>name: glm::bitfieldExtract</em>\n<em>returns: vecType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;Value=P, int Offset, int Bits</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Extracts bits [offset, offset + bits - 1] from value,\nreturning them in the least significant bits of the result.\nFor unsigned data types, the most significant bits of the\nresult will be set to zero. For signed data types, the\nmost significant bits will be set to the value of bit offset + base - 1.</p>\n<p>If bits is zero, the result will be zero. The result will be\nundefined if offset or bits is negative, or if the sum of\noffset and bits is greater than the number of bits used\nto store the operand.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Signed or unsigned integer scalar or vector types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/bitfieldExtract.xml&quot;&gt;GLSL bitfieldExtract man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; T, P &gt; glm::bitfieldInsert(T, &amp;Base = P, T, &amp;Insert = P, Offset, Bits)</p>\n<p>&lt;!--\n<em>syntax: glm::bitfieldInsert(T, &amp;Base = P, T, &amp;Insert = P, Offset, Bits)</em>\n<em>name: glm::bitfieldInsert</em>\n<em>returns: vecType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;Base=P, const vecType&lt; T, P &gt; &amp;Insert=P, int Offset, int Bits</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the insertion the bits least-significant bits of insert into base.</p>\n<p>The result will have bits [offset, offset + bits - 1] taken\nfrom bits [0, bits - 1] of insert, and all other bits taken\ndirectly from the corresponding bits of base. If bits is\nzero, the result will simply be base. The result will be\nundefined if offset or bits is negative, or if the sum of\noffset and bits is greater than the number of bits used to\nstore the operand.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Signed or unsigned integer scalar or vector types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/bitfieldInsert.xml&quot;&gt;GLSL bitfieldInsert man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; T, P &gt; glm::bitfieldReverse(T, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::bitfieldReverse(T, &amp;v = P)</em>\n<em>name: glm::bitfieldReverse</em>\n<em>returns: vecType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the reversal of the bits of value.\nThe bit numbered n of the result will be taken from bit (bits - 1) - n of value,\nwhere bits is the total number of bits used to represent value.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Signed or unsigned integer scalar or vector types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/bitfieldReverse.xml&quot;&gt;GLSL bitfieldReverse man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; int, P &gt; glm::findLSB(T, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::findLSB(T, &amp;v = P)</em>\n<em>name: glm::findLSB</em>\n<em>returns: vecType&lt; int, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the bit number of the least significant bit set to\n1 in the binary representation of value.\nIf value is zero, -1 will be returned.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Signed or unsigned integer scalar types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/findLSB.xml&quot;&gt;GLSL findLSB man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int glm::findLSB(x)</p>\n<p>&lt;!--\n<em>syntax: glm::findLSB(x)</em>\n<em>name: glm::findLSB</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: genIUType x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the bit number of the least significant bit set to\n1 in the binary representation of value.\nIf value is zero, -1 will be returned.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Signed or unsigned integer scalar types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/findLSB.xml&quot;&gt;GLSL findLSB man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; int, P &gt; glm::findMSB(T, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::findMSB(T, &amp;v = P)</em>\n<em>name: glm::findMSB</em>\n<em>returns: vecType&lt; int, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the bit number of the most significant bit in the binary representation of value.\nFor positive integers, the result will be the bit number of the most significant bit set to 1.\nFor negative integers, the result will be the bit number of the most significant\nbit set to 0. For a value of zero or negative one, -1 will be returned.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Signed or unsigned integer scalar types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/findMSB.xml&quot;&gt;GLSL findMSB man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int glm::findMSB(x)</p>\n<p>&lt;!--\n<em>syntax: glm::findMSB(x)</em>\n<em>name: glm::findMSB</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: genIUType x</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the bit number of the most significant bit in the binary representation of value.\nFor positive integers, the result will be the bit number of the most significant bit set to 1.\nFor negative integers, the result will be the bit number of the most significant\nbit set to 0. For a value of zero or negative one, -1 will be returned.</p>\n<p><strong>Type parameters:</strong></p>\n<p>T Signed or unsigned integer scalar types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/findMSB.xml&quot;&gt;GLSL findMSB man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void glm::imulExtended(int, &amp;x = P, int, &amp;y = P, int, &amp;msb = P, int, &amp;lsb = P)</p>\n<p>&lt;!--\n<em>syntax: glm::imulExtended(int, &amp;x = P, int, &amp;y = P, int, &amp;msb = P, int, &amp;lsb = P)</em>\n<em>name: glm::imulExtended</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vecType&lt; int, P &gt; &amp;x=P, const vecType&lt; int, P &gt; &amp;y=P, vecType&lt; int, P &gt; &amp;msb=P, vecType&lt; int, P &gt; &amp;lsb=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Multiplies 32-bit integers x and y, producing a 64-bit\nresult. The 32 least-significant bits are returned in lsb.\nThe 32 most-significant bits are returned in msb.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genIType Signed integer scalar or vector types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/imulExtended.xml&quot;&gt;GLSL imulExtended man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; glm::uint, P &gt; glm::uaddCarry(glm::uint, &amp;x = P, glm::uint, &amp;y = P, glm::uint, &amp;carry = P)</p>\n<p>&lt;!--\n<em>syntax: glm::uaddCarry(glm::uint, &amp;x = P, glm::uint, &amp;y = P, glm::uint, &amp;carry = P)</em>\n<em>name: glm::uaddCarry</em>\n<em>returns: vecType&lt; glm::uint, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; glm::uint, P &gt; &amp;x=P, const vecType&lt; glm::uint, P &gt; &amp;y=P, vecType&lt; glm::uint, P &gt; &amp;carry=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Adds 32-bit unsigned integer x and y, returning the sum\nmodulo pow(2, 32). The value carry is set to 0 if the sum was\nless than pow(2, 32), or to 1 otherwise.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genUType Unsigned integer scalar or vector types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/uaddCarry.xml&quot;&gt;GLSL uaddCarry man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void glm::umulExtended(glm::uint, &amp;x = P, glm::uint, &amp;y = P, glm::uint, &amp;msb = P, glm::uint, &amp;lsb = P)</p>\n<p>&lt;!--\n<em>syntax: glm::umulExtended(glm::uint, &amp;x = P, glm::uint, &amp;y = P, glm::uint, &amp;msb = P, glm::uint, &amp;lsb = P)</em>\n<em>name: glm::umulExtended</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vecType&lt; glm::uint, P &gt; &amp;x=P, const vecType&lt; glm::uint, P &gt; &amp;y=P, vecType&lt; glm::uint, P &gt; &amp;msb=P, vecType&lt; glm::uint, P &gt; &amp;lsb=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Multiplies 32-bit integers x and y, producing a 64-bit\nresult. The 32 least-significant bits are returned in lsb.\nThe 32 most-significant bits are returned in msb.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genUType Unsigned integer scalar or vector types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/umulExtended.xml&quot;&gt;GLSL umulExtended man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; glm::uint, P &gt; glm::usubBorrow(glm::uint, &amp;x = P, glm::uint, &amp;y = P, glm::uint, &amp;borrow = P)</p>\n<p>&lt;!--\n<em>syntax: glm::usubBorrow(glm::uint, &amp;x = P, glm::uint, &amp;y = P, glm::uint, &amp;borrow = P)</em>\n<em>name: glm::usubBorrow</em>\n<em>returns: vecType&lt; glm::uint, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; glm::uint, P &gt; &amp;x=P, const vecType&lt; glm::uint, P &gt; &amp;y=P, vecType&lt; glm::uint, P &gt; &amp;borrow=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Subtracts the 32-bit unsigned integer y from x, returning\nthe difference if non-negative, or pow(2, 32) plus the difference\notherwise. The value borrow is set to 0 if x &gt;= y, or to 1 otherwise.</p>\n<p><strong>Type parameters:</strong></p>\n<p>genUType Unsigned integer scalar or vector types.</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/sdk/docs/manglsl/xhtml/usubBorrow.xml&quot;&gt;GLSL usubBorrow man page&lt;/a&gt;</p>\n<p><strong>See also</strong>: &lt;a href=&quot;http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf&quot;&gt;GLSL 4.20.8 specification, section 8.8 Integer Functions&lt;/a&gt;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< int, P > glm::bitCount(T, &v = P)\n\n<!--\n_syntax: glm::bitCount(T, &v = P)_\n_name: glm::bitCount_\n_returns: vecType< int, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the number of bits set to 1 in the binary representation of value.\n\n\n**Type parameters:**\n\nT Signed or unsigned integer scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/bitCount.xml\">GLSL bitCount man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int glm::bitCount(v)\n\n<!--\n_syntax: glm::bitCount(v)_\n_name: glm::bitCount_\n_returns: int_\n_returns_description: _\n_parameters: genType v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the number of bits set to 1 in the binary representation of value.\n\n\n**Type parameters:**\n\nT Signed or unsigned integer scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/bitCount.xml\">GLSL bitCount man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::bitfieldExtract(T, &Value = P, Offset, Bits)\n\n<!--\n_syntax: glm::bitfieldExtract(T, &Value = P, Offset, Bits)_\n_name: glm::bitfieldExtract_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &Value=P, int Offset, int Bits_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nExtracts bits [offset, offset + bits - 1] from value,\nreturning them in the least significant bits of the result.\nFor unsigned data types, the most significant bits of the\nresult will be set to zero. For signed data types, the\nmost significant bits will be set to the value of bit offset + base - 1.\n\nIf bits is zero, the result will be zero. The result will be\nundefined if offset or bits is negative, or if the sum of\noffset and bits is greater than the number of bits used\nto store the operand.\n\n\n**Type parameters:**\n\nT Signed or unsigned integer scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/bitfieldExtract.xml\">GLSL bitfieldExtract man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::bitfieldInsert(T, &Base = P, T, &Insert = P, Offset, Bits)\n\n<!--\n_syntax: glm::bitfieldInsert(T, &Base = P, T, &Insert = P, Offset, Bits)_\n_name: glm::bitfieldInsert_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &Base=P, const vecType< T, P > &Insert=P, int Offset, int Bits_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the insertion the bits least-significant bits of insert into base.\n\nThe result will have bits [offset, offset + bits - 1] taken\nfrom bits [0, bits - 1] of insert, and all other bits taken\ndirectly from the corresponding bits of base. If bits is\nzero, the result will simply be base. The result will be\nundefined if offset or bits is negative, or if the sum of\noffset and bits is greater than the number of bits used to\nstore the operand.\n\n\n**Type parameters:**\n\nT Signed or unsigned integer scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/bitfieldInsert.xml\">GLSL bitfieldInsert man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::bitfieldReverse(T, &v = P)\n\n<!--\n_syntax: glm::bitfieldReverse(T, &v = P)_\n_name: glm::bitfieldReverse_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the reversal of the bits of value.\nThe bit numbered n of the result will be taken from bit (bits - 1) - n of value,\nwhere bits is the total number of bits used to represent value.\n\n\n**Type parameters:**\n\nT Signed or unsigned integer scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/bitfieldReverse.xml\">GLSL bitfieldReverse man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< int, P > glm::findLSB(T, &v = P)\n\n<!--\n_syntax: glm::findLSB(T, &v = P)_\n_name: glm::findLSB_\n_returns: vecType< int, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the bit number of the least significant bit set to\n1 in the binary representation of value.\nIf value is zero, -1 will be returned.\n\n\n**Type parameters:**\n\nT Signed or unsigned integer scalar types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/findLSB.xml\">GLSL findLSB man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int glm::findLSB(x)\n\n<!--\n_syntax: glm::findLSB(x)_\n_name: glm::findLSB_\n_returns: int_\n_returns_description: _\n_parameters: genIUType x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the bit number of the least significant bit set to\n1 in the binary representation of value.\nIf value is zero, -1 will be returned.\n\n\n**Type parameters:**\n\nT Signed or unsigned integer scalar types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/findLSB.xml\">GLSL findLSB man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< int, P > glm::findMSB(T, &v = P)\n\n<!--\n_syntax: glm::findMSB(T, &v = P)_\n_name: glm::findMSB_\n_returns: vecType< int, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the bit number of the most significant bit in the binary representation of value.\nFor positive integers, the result will be the bit number of the most significant bit set to 1.\nFor negative integers, the result will be the bit number of the most significant\nbit set to 0. For a value of zero or negative one, -1 will be returned.\n\n\n**Type parameters:**\n\nT Signed or unsigned integer scalar types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/findMSB.xml\">GLSL findMSB man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int glm::findMSB(x)\n\n<!--\n_syntax: glm::findMSB(x)_\n_name: glm::findMSB_\n_returns: int_\n_returns_description: _\n_parameters: genIUType x_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the bit number of the most significant bit in the binary representation of value.\nFor positive integers, the result will be the bit number of the most significant bit set to 1.\nFor negative integers, the result will be the bit number of the most significant\nbit set to 0. For a value of zero or negative one, -1 will be returned.\n\n\n**Type parameters:**\n\nT Signed or unsigned integer scalar types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/findMSB.xml\">GLSL findMSB man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void glm::imulExtended(int, &x = P, int, &y = P, int, &msb = P, int, &lsb = P)\n\n<!--\n_syntax: glm::imulExtended(int, &x = P, int, &y = P, int, &msb = P, int, &lsb = P)_\n_name: glm::imulExtended_\n_returns: void_\n_returns_description: _\n_parameters: const vecType< int, P > &x=P, const vecType< int, P > &y=P, vecType< int, P > &msb=P, vecType< int, P > &lsb=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiplies 32-bit integers x and y, producing a 64-bit\nresult. The 32 least-significant bits are returned in lsb.\nThe 32 most-significant bits are returned in msb.\n\n\n**Type parameters:**\n\ngenIType Signed integer scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/imulExtended.xml\">GLSL imulExtended man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< glm::uint, P > glm::uaddCarry(glm::uint, &x = P, glm::uint, &y = P, glm::uint, &carry = P)\n\n<!--\n_syntax: glm::uaddCarry(glm::uint, &x = P, glm::uint, &y = P, glm::uint, &carry = P)_\n_name: glm::uaddCarry_\n_returns: vecType< glm::uint, P >_\n_returns_description: _\n_parameters: const vecType< glm::uint, P > &x=P, const vecType< glm::uint, P > &y=P, vecType< glm::uint, P > &carry=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds 32-bit unsigned integer x and y, returning the sum\nmodulo pow(2, 32). The value carry is set to 0 if the sum was\nless than pow(2, 32), or to 1 otherwise.\n\n\n**Type parameters:**\n\ngenUType Unsigned integer scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/uaddCarry.xml\">GLSL uaddCarry man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void glm::umulExtended(glm::uint, &x = P, glm::uint, &y = P, glm::uint, &msb = P, glm::uint, &lsb = P)\n\n<!--\n_syntax: glm::umulExtended(glm::uint, &x = P, glm::uint, &y = P, glm::uint, &msb = P, glm::uint, &lsb = P)_\n_name: glm::umulExtended_\n_returns: void_\n_returns_description: _\n_parameters: const vecType< glm::uint, P > &x=P, const vecType< glm::uint, P > &y=P, vecType< glm::uint, P > &msb=P, vecType< glm::uint, P > &lsb=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiplies 32-bit integers x and y, producing a 64-bit\nresult. The 32 least-significant bits are returned in lsb.\nThe 32 most-significant bits are returned in msb.\n\n\n**Type parameters:**\n\ngenUType Unsigned integer scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/umulExtended.xml\">GLSL umulExtended man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< glm::uint, P > glm::usubBorrow(glm::uint, &x = P, glm::uint, &y = P, glm::uint, &borrow = P)\n\n<!--\n_syntax: glm::usubBorrow(glm::uint, &x = P, glm::uint, &y = P, glm::uint, &borrow = P)_\n_name: glm::usubBorrow_\n_returns: vecType< glm::uint, P >_\n_returns_description: _\n_parameters: const vecType< glm::uint, P > &x=P, const vecType< glm::uint, P > &y=P, vecType< glm::uint, P > &borrow=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSubtracts the 32-bit unsigned integer y from x, returning\nthe difference if non-negative, or pow(2, 32) plus the difference\notherwise. The value borrow is set to 0 if x >= y, or to 1 otherwise.\n\n\n**Type parameters:**\n\ngenUType Unsigned integer scalar or vector types.\n\n\n**See also**: <a href=\"http://www.opengl.org/sdk/docs/manglsl/xhtml/usubBorrow.xml\">GLSL usubBorrow man page</a>\n\n**See also**: <a href=\"http://www.opengl.org/registry/doc/GLSLangSpec.4.20.8.pdf\">GLSL 4.20.8 specification, section 8.8 Integer Functions</a>\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}