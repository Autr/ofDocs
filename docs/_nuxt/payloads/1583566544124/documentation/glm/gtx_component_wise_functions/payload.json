{"data":[{"page":{"entry":{"name":"gtx_component_wise_functions","filename":"gtx_component_wise_functions.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/glm/gtx_component_wise_functions.markdown","path":"/documentation/glm/gtx_component_wise_functions","route":"/documentation/glm/gtx_component_wise_functions.markdown","dir":"../ofSite/documentation/glm","ext":"markdown","type":"page","id":2032,"parent":1985,"breadcrumbs":[1985,1718],"siblings":[],"translations":{}},"description":{},"methods":[null,{"syntax":"glm::compAdd(&v)","name":"glm::compAdd","returns":"typename genType::value_type","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> genType <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Add all vector components together.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n","desc":""},{"syntax":"glm::compMax(&v)","name":"glm::compMax","returns":"typename genType::value_type","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> genType <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Find the maximum value between single vector components.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n","desc":""},{"syntax":"glm::compMin(&v)","name":"glm::compMin","returns":"typename genType::value_type","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> genType <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Find the minimum value between single vector components.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n","desc":""},{"syntax":"glm::compMul(&v)","name":"glm::compMul","returns":"typename genType::value_type","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> genType <span class=\"token operator\">&amp;</span>v","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Multiply all vector components together.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n","desc":""},{"short":"<p>Convert an integer vector to a normalized float vector.\nIf the parameter value type is already a floating precision type, the value is passed through.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n","desc":""},{"short":"<p>Convert a normalized float vector to an integer vector.\nIf the parameter value type is already a floating precision type, the value is passed through.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n","desc":""},{}],"document":"<p>#functions</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>##Description</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###typename genType::value_type glm::compAdd(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::compAdd(&amp;v)</em>\n<em>name: glm::compAdd</em>\n<em>returns: typename genType::value_type</em>\n_returns_description: _\n<em>parameters: const genType &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Add all vector components together.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###typename genType::value_type glm::compMax(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::compMax(&amp;v)</em>\n<em>name: glm::compMax</em>\n<em>returns: typename genType::value_type</em>\n_returns_description: _\n<em>parameters: const genType &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Find the maximum value between single vector components.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###typename genType::value_type glm::compMin(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::compMin(&amp;v)</em>\n<em>name: glm::compMin</em>\n<em>returns: typename genType::value_type</em>\n_returns_description: _\n<em>parameters: const genType &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Find the minimum value between single vector components.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###typename genType::value_type glm::compMul(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: glm::compMul(&amp;v)</em>\n<em>name: glm::compMul</em>\n<em>returns: typename genType::value_type</em>\n_returns_description: _\n<em>parameters: const genType &amp;v</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Multiply all vector components together.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; floatType, P &gt; glm::compNormalize(T, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::compNormalize(T, &amp;v = P)</em>\n<em>name: glm::compNormalize</em>\n<em>returns: vecType&lt; floatType, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; T, P &gt; &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert an integer vector to a normalized float vector.\nIf the parameter value type is already a floating precision type, the value is passed through.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vecType&lt; T, P &gt; glm::compScale(floatType, &amp;v = P)</p>\n<p>&lt;!--\n<em>syntax: glm::compScale(floatType, &amp;v = P)</em>\n<em>name: glm::compScale</em>\n<em>returns: vecType&lt; T, P &gt;</em>\n_returns_description: _\n<em>parameters: const vecType&lt; floatType, P &gt; &amp;v=P</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Convert a normalized float vector to an integer vector.\nIf the parameter value type is already a floating precision type, the value is passed through.</p>\n<p><strong>See also</strong>: gtx_component_wise</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#functions\n\n\n<!--\n_visible: True_\n_advanced: False_\n-->\n\n##Description\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename genType::value_type glm::compAdd(&v)\n\n<!--\n_syntax: glm::compAdd(&v)_\n_name: glm::compAdd_\n_returns: typename genType::value_type_\n_returns_description: _\n_parameters: const genType &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd all vector components together.\n\n**See also**: gtx_component_wise\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename genType::value_type glm::compMax(&v)\n\n<!--\n_syntax: glm::compMax(&v)_\n_name: glm::compMax_\n_returns: typename genType::value_type_\n_returns_description: _\n_parameters: const genType &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFind the maximum value between single vector components.\n\n**See also**: gtx_component_wise\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename genType::value_type glm::compMin(&v)\n\n<!--\n_syntax: glm::compMin(&v)_\n_name: glm::compMin_\n_returns: typename genType::value_type_\n_returns_description: _\n_parameters: const genType &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nFind the minimum value between single vector components.\n\n**See also**: gtx_component_wise\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###typename genType::value_type glm::compMul(&v)\n\n<!--\n_syntax: glm::compMul(&v)_\n_name: glm::compMul_\n_returns: typename genType::value_type_\n_returns_description: _\n_parameters: const genType &v_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMultiply all vector components together.\n\n**See also**: gtx_component_wise\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< floatType, P > glm::compNormalize(T, &v = P)\n\n<!--\n_syntax: glm::compNormalize(T, &v = P)_\n_name: glm::compNormalize_\n_returns: vecType< floatType, P >_\n_returns_description: _\n_parameters: const vecType< T, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert an integer vector to a normalized float vector.\nIf the parameter value type is already a floating precision type, the value is passed through.\n\n**See also**: gtx_component_wise\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vecType< T, P > glm::compScale(floatType, &v = P)\n\n<!--\n_syntax: glm::compScale(floatType, &v = P)_\n_name: glm::compScale_\n_returns: vecType< T, P >_\n_returns_description: _\n_parameters: const vecType< floatType, P > &v=P_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConvert a normalized float vector to an integer vector.\nIf the parameter value type is already a floating precision type, the value is passed through.\n\n**See also**: gtx_component_wise\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}