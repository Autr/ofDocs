{"data":[{"page":{"entry":{"name":"ofFilePath","filename":"ofFilePath.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/utils/ofFilePath.markdown","path":"/documentation/utils/ofFilePath","route":"/documentation/utils/ofFilePath.markdown","dir":"../ofSite/documentation/utils","ext":"markdown","type":"page","id":2209,"parent":2196,"breadcrumbs":[2196,1718],"siblings":[],"translations":{}},"description":{"short":"<p>Static class for working with file path strings.</p>\n","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"addLeadingSlash(&path)","name":"addLeadingSlash","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":""},{"syntax":"addTrailingSlash(&path)","name":"addTrailingSlash","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":""},{"syntax":"createEnclosingDirectory(&filePath, bRelativeToData = true, bRecursive = true)","name":"createEnclosingDirectory","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRecursive<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Create the enclosing parent directory of a path, ie.\n&quot;images&quot; is the enclosing directory of &quot;duck.jpg&quot; = &quot;images/duck.jpg&quot;.</p>\n<p>Assumes the path is in the data folder &amp; automatically creates nested\ndirectories as required.</p>\n<p><strong>Parameters:</strong></p>\n<p>bRecursive set to false to override automatically nested\ndirectory creation</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data folder and want the direct path without relative\n&quot;../../&quot;</p>\n<p><strong>Returns</strong>: true if the enclosing directory was created</p>\n","desc":""},{"syntax":"getAbsolutePath(&path, bRelativeToData = true)","name":"getAbsolutePath","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":""},{"syntax":"getBaseName(&filePath)","name":"getBaseName","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>filePath","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":"<pre><code>string baseName <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getBaseName</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>your<span class=\"token operator\">-</span>file<span class=\"token punctuation\">.</span>ext<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// baseName = &amp;quot;your-file&amp;quot;</span>\n</code></pre>\n"},{"syntax":"getCurrentExeDir()","name":"getCurrentExeDir","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Get the full path to the application's parent directory.</p>\n<p>Windows &amp; Linux: the application's parent directory\nMac: the Contents/MacOS folder within the application's .app bundle</p>\n<p><strong>Returns</strong>: current executable directory</p>\n","desc":""},{"syntax":"getCurrentExePath()","name":"getCurrentExePath","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Get the full path to the application's executable file.</p>\n<p>Mac: the binary within the application's .app bundle Contents/MacOS dir\nWindows: the .exe\nLinux: the binary file itself</p>\n<p><strong>Returns</strong>: current executable path</p>\n","desc":""},{"syntax":"getCurrentWorkingDirectory()","name":"getCurrentWorkingDirectory","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Get the full path to the app's current working directory.</p>\n<p>This may be the app's parent directory or the location the app was\nlaunched from (aka on the commandline).</p>\n<p><strong>Warning</strong>: This location <em>may</em> change if you or a library calls the cd()\nstd C function.</p>\n<p><strong>Returns</strong>: current working directory</p>\n","desc":""},{"syntax":"getEnclosingDirectory(&filePath, bRelativeToData = true)","name":"getEnclosingDirectory","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":""},{"syntax":"getFileExt(&filename)","name":"getFileExt","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>filename","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":"<pre><code>string ext <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getFileExt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>your<span class=\"token operator\">-</span>file<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ext = &amp;quot;jpg&amp;quot;</span>\n</code></pre>\n"},{"syntax":"getFileName(&filePath, bRelativeToData = true)","name":"getFileName","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>filePath<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bRelativeToData<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":"<pre><code>string fN <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>your<span class=\"token operator\">-</span>file<span class=\"token punctuation\">.</span>ext<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// fN = &amp;quot;your-file.ext&amp;quot;</span>\n</code></pre>\n"},{"syntax":"getPathForDirectory(&path)","name":"getPathForDirectory","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Cleaned up a directory path by adding a trailing slash if needed.</p>\n<p>For Windows-style path strings using &quot;&quot;, a &quot;&quot; will be added.\nFor Unix-style path strings using &quot;/&quot;, a &quot;/&quot; will be added.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n<p><strong>Returns</strong>: cleaned path + trailing slash (if needed)</p>\n","desc":""},{"syntax":"getUserHomeDir()","name":"getUserHomeDir","returns":"string","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":""},{"syntax":"isAbsolute(&path)","name":"isAbsolute","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":""},{"syntax":"join(&path1, &path2)","name":"join","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path2","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":""},{"syntax":"makeRelative(&from, &to)","name":"makeRelative","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>to","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"<p>Make one path relative to another,\nie. the relative path of &quot;images/felines/lions&quot; to\n&quot;images/felines/tigers&quot; is &quot;../tigers&quot;.</p>\n<p><strong>Parameters:</strong></p>\n<p>from starting path</p>\n<p>to destination path</p>\n<p><strong>Returns</strong>: relative path</p>\n","desc":""},{"syntax":"removeExt(&filename)","name":"removeExt","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>filename","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":""},{"syntax":"removeTrailingSlash(&path)","name":"removeTrailingSlash","returns":"string","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","desc":""},{}],"document":"<p>#class ofFilePath</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>Static class for working with file path strings.</p>\n<p>##Description</p>\n<p>##Methods</p>\n<p>###string addLeadingSlash(&amp;path)</p>\n<p>&lt;!--\n<em>syntax: addLeadingSlash(&amp;path)</em>\n<em>name: addLeadingSlash</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;path</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Prepend path with a slash, ie. &quot;images&quot; -&gt; &quot;/images&quot;.</p>\n<p><strong>Parameters:</strong></p>\n<p>path file or directory path</p>\n<p><strong>Returns</strong>: slah + path</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string addTrailingSlash(&amp;path)</p>\n<p>&lt;!--\n<em>syntax: addTrailingSlash(&amp;path)</em>\n<em>name: addTrailingSlash</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;path</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Append path with a slash, ie. &quot;images&quot; -&gt; &quot;images/&quot;.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n<p><strong>Returns</strong>: path + slash</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool createEnclosingDirectory(&amp;filePath, bRelativeToData = true, bRecursive = true)</p>\n<p>&lt;!--\n<em>syntax: createEnclosingDirectory(&amp;filePath, bRelativeToData = true, bRecursive = true)</em>\n<em>name: createEnclosingDirectory</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;filePath, bool bRelativeToData=true, bool bRecursive=true</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Create the enclosing parent directory of a path, ie.\n&quot;images&quot; is the enclosing directory of &quot;duck.jpg&quot; = &quot;images/duck.jpg&quot;.</p>\n<p>Assumes the path is in the data folder &amp; automatically creates nested\ndirectories as required.</p>\n<p><strong>Parameters:</strong></p>\n<p>bRecursive set to false to override automatically nested\ndirectory creation</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data folder and want the direct path without relative\n&quot;../../&quot;</p>\n<p><strong>Returns</strong>: true if the enclosing directory was created</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getAbsolutePath(&amp;path, bRelativeToData = true)</p>\n<p>&lt;!--\n<em>syntax: getAbsolutePath(&amp;path, bRelativeToData = true)</em>\n<em>name: getAbsolutePath</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;path, bool bRelativeToData=true</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the absolute, full path for a given path,\nie. &quot;images&quot; -&gt; &quot;/Users/mickey/of/apps/myApps/Donald/bin/data/images&quot;.</p>\n<p><strong>Parameters:</strong></p>\n<p>path file or directory path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data folder and want the direct path without relative\n&quot;../../&quot;</p>\n<p><strong>Returns</strong>: absolute path</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getBaseName(&amp;filePath)</p>\n<p>&lt;!--\n<em>syntax: getBaseName(&amp;filePath)</em>\n<em>name: getBaseName</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;filePath</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a file name without its extension,\nie. &quot;images/duck.jpg&quot; -&gt; &quot;duck&quot; and\n&quot;images/some/folder&quot; -&gt; &quot;folder&quot;</p>\n<p><strong>Parameters:</strong></p>\n<p>filePath file path</p>\n<p><strong>Returns</strong>: basename</p>\n<p>_description: _</p>\n<pre><code>string baseName <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getBaseName</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>your<span class=\"token operator\">-</span>file<span class=\"token punctuation\">.</span>ext<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// baseName = &amp;quot;your-file&amp;quot;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getCurrentExeDir()</p>\n<p>&lt;!--\n<em>syntax: getCurrentExeDir()</em>\n<em>name: getCurrentExeDir</em>\n<em>returns: string</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the full path to the application's parent directory.</p>\n<p>Windows &amp; Linux: the application's parent directory\nMac: the Contents/MacOS folder within the application's .app bundle</p>\n<p><strong>Returns</strong>: current executable directory</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getCurrentExePath()</p>\n<p>&lt;!--\n<em>syntax: getCurrentExePath()</em>\n<em>name: getCurrentExePath</em>\n<em>returns: string</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the full path to the application's executable file.</p>\n<p>Mac: the binary within the application's .app bundle Contents/MacOS dir\nWindows: the .exe\nLinux: the binary file itself</p>\n<p><strong>Returns</strong>: current executable path</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getCurrentWorkingDirectory()</p>\n<p>&lt;!--\n<em>syntax: getCurrentWorkingDirectory()</em>\n<em>name: getCurrentWorkingDirectory</em>\n<em>returns: string</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the full path to the app's current working directory.</p>\n<p>This may be the app's parent directory or the location the app was\nlaunched from (aka on the commandline).</p>\n<p><strong>Warning</strong>: This location <em>may</em> change if you or a library calls the cd()\nstd C function.</p>\n<p><strong>Returns</strong>: current working directory</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getEnclosingDirectory(&amp;filePath, bRelativeToData = true)</p>\n<p>&lt;!--\n<em>syntax: getEnclosingDirectory(&amp;filePath, bRelativeToData = true)</em>\n<em>name: getEnclosingDirectory</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;filePath, bool bRelativeToData=true</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the enclosing parent directory of a path,\nie. &quot;images/duck.jpg&quot; -&gt; &quot;images&quot;, assumes the path is in the data\ndirectory.</p>\n<p><strong>Parameters:</strong></p>\n<p>filePath file path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data folder and want the direct path without relative\n&quot;../../&quot;</p>\n<p><strong>Returns</strong>: enclosing directory</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getFileExt(&amp;filename)</p>\n<p>&lt;!--\n<em>syntax: getFileExt(&amp;filename)</em>\n<em>name: getFileExt</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;filename</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the extension of a filename, ie. &quot;duck.jpg&quot; -&gt; &quot;jpg&quot;.</p>\n<p><strong>Parameters:</strong></p>\n<p>filename file path</p>\n<p><strong>Returns</strong>: filename extension only</p>\n<p>_description: _</p>\n<pre><code>string ext <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getFileExt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>your<span class=\"token operator\">-</span>file<span class=\"token punctuation\">.</span>jpg<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ext = &amp;quot;jpg&amp;quot;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getFileName(&amp;filePath, bRelativeToData = true)</p>\n<p>&lt;!--\n<em>syntax: getFileName(&amp;filePath, bRelativeToData = true)</em>\n<em>name: getFileName</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;filePath, bool bRelativeToData=true</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the filename of a given path by stripping the parent\ndirectories ie. &quot;images/duck.jpg&quot; -&gt; &quot;duck.jpg&quot;, assumes the path is in\nthe data folder.</p>\n<p><strong>Parameters:</strong></p>\n<p>filePath file path</p>\n<p>bRelativeToData set to false if you are working with paths that\nare <em>not</em> in the data folder and want the direct path without relative\n&quot;../../&quot;</p>\n<p><strong>Returns</strong>: filename</p>\n<p>_description: _</p>\n<pre><code>string fN <span class=\"token operator\">=</span> ofFilePath<span class=\"token operator\">::</span><span class=\"token function\">getFileName</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>your<span class=\"token operator\">-</span>file<span class=\"token punctuation\">.</span>ext<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// fN = &amp;quot;your-file.ext&amp;quot;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getPathForDirectory(&amp;path)</p>\n<p>&lt;!--\n<em>syntax: getPathForDirectory(&amp;path)</em>\n<em>name: getPathForDirectory</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;path</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Cleaned up a directory path by adding a trailing slash if needed.</p>\n<p>For Windows-style path strings using &quot;&quot;, a &quot;&quot; will be added.\nFor Unix-style path strings using &quot;/&quot;, a &quot;/&quot; will be added.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n<p><strong>Returns</strong>: cleaned path + trailing slash (if needed)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string getUserHomeDir()</p>\n<p>&lt;!--\n<em>syntax: getUserHomeDir()</em>\n<em>name: getUserHomeDir</em>\n<em>returns: string</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the absolute path to the user's home directory.</p>\n<p>Mac OSX: /Users/&lt;username&gt;\nWindows: &lt;root&gt;\\Users&lt;username&gt;\nLinux: /home/&lt;username&gt;</p>\n<p><strong>Returns</strong>: home directory path</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isAbsolute(&amp;path)</p>\n<p>&lt;!--\n<em>syntax: isAbsolute(&amp;path)</em>\n<em>name: isAbsolute</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;path</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Check if a path is an absolute (aka a full path),\nie. &quot;images&quot; -&gt; false,\n&quot;/Users/mickey/of/apps/myApps/Donald/bin/data/images&quot; -&gt; true.</p>\n<p><strong>Parameters:</strong></p>\n<p>path file or directory path</p>\n<p><strong>Returns</strong>: true if the path is an absolute path</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string join(&amp;path1, &amp;path2)</p>\n<p>&lt;!--\n<em>syntax: join(&amp;path1, &amp;path2)</em>\n<em>name: join</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;path1, const filesystem::path &amp;path2</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Create a single path by joining path1 &amp; path2 using a slash,\nie. &quot;/hello/world&quot; + &quot;foo/bar&quot; -&gt; &quot;/hello/world/foo/bar&quot;.</p>\n<p><strong>Parameters:</strong></p>\n<p>path1 left half of the path to join</p>\n<p>path2 right half of the path to join</p>\n<p><strong>Returns</strong>: joined path</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string makeRelative(&amp;from, &amp;to)</p>\n<p>&lt;!--\n<em>syntax: makeRelative(&amp;from, &amp;to)</em>\n<em>name: makeRelative</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;from, const filesystem::path &amp;to</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Make one path relative to another,\nie. the relative path of &quot;images/felines/lions&quot; to\n&quot;images/felines/tigers&quot; is &quot;../tigers&quot;.</p>\n<p><strong>Parameters:</strong></p>\n<p>from starting path</p>\n<p>to destination path</p>\n<p><strong>Returns</strong>: relative path</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string removeExt(&amp;filename)</p>\n<p>&lt;!--\n<em>syntax: removeExt(&amp;filename)</em>\n<em>name: removeExt</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;filename</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Remove extension from a filename, ie. &quot;duck.jpg&quot; -&gt;&quot;duck&quot;.</p>\n<p><strong>Parameters:</strong></p>\n<p>filename file path</p>\n<p><strong>Returns</strong>: filename without extension</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string removeTrailingSlash(&amp;path)</p>\n<p>&lt;!--\n<em>syntax: removeTrailingSlash(&amp;path)</em>\n<em>name: removeTrailingSlash</em>\n<em>returns: string</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;path</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Remove a path's trailing slash (if found),\nie. &quot;images/&quot; -&gt; &quot;images&quot;.</p>\n<p><strong>Parameters:</strong></p>\n<p>path directory path</p>\n<p><strong>Returns</strong>: path minus trailing slash</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n","raw":"#class ofFilePath\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\nStatic class for working with file path strings.\n\n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n###string addLeadingSlash(&path)\n\n<!--\n_syntax: addLeadingSlash(&path)_\n_name: addLeadingSlash_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPrepend path with a slash, ie. \"images\" -> \"/images\".\n\n\n**Parameters:**\n\npath file or directory path\n\n**Returns**: slah + path\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string addTrailingSlash(&path)\n\n<!--\n_syntax: addTrailingSlash(&path)_\n_name: addTrailingSlash_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAppend path with a slash, ie. \"images\" -> \"images/\".\n\n\n**Parameters:**\n\npath directory path\n\n**Returns**: path + slash\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool createEnclosingDirectory(&filePath, bRelativeToData = true, bRecursive = true)\n\n<!--\n_syntax: createEnclosingDirectory(&filePath, bRelativeToData = true, bRecursive = true)_\n_name: createEnclosingDirectory_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &filePath, bool bRelativeToData=true, bool bRecursive=true_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate the enclosing parent directory of a path, ie.\n\"images\" is the enclosing directory of \"duck.jpg\" = \"images/duck.jpg\".\n\nAssumes the path is in the data folder & automatically creates nested\ndirectories as required.\n\n\n**Parameters:**\n\nbRecursive set to false to override automatically nested\ndirectory creation\n\nbRelativeToData set to false if you are working with paths that\nare *not* in the data folder and want the direct path without relative\n\"../../\"\n\n**Returns**: true if the enclosing directory was created\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getAbsolutePath(&path, bRelativeToData = true)\n\n<!--\n_syntax: getAbsolutePath(&path, bRelativeToData = true)_\n_name: getAbsolutePath_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &path, bool bRelativeToData=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the absolute, full path for a given path,\nie. \"images\" -> \"/Users/mickey/of/apps/myApps/Donald/bin/data/images\".\n\n\n**Parameters:**\n\npath file or directory path\n\nbRelativeToData set to false if you are working with paths that\nare *not* in the data folder and want the direct path without relative\n\"../../\"\n\n**Returns**: absolute path\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getBaseName(&filePath)\n\n<!--\n_syntax: getBaseName(&filePath)_\n_name: getBaseName_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &filePath_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a file name without its extension,\nie. \"images/duck.jpg\" -> \"duck\" and\n\"images/some/folder\" -> \"folder\"\n\n\n**Parameters:**\n\nfilePath file path\n\n**Returns**: basename\n\n\n\n\n\n_description: _\n\n~~~~{.cpp}\nstring baseName = ofFilePath::getBaseName(\"/path/to/your-file.ext\");\n// baseName = \"your-file\"\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getCurrentExeDir()\n\n<!--\n_syntax: getCurrentExeDir()_\n_name: getCurrentExeDir_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the full path to the application's parent directory.\n\nWindows & Linux: the application's parent directory\nMac: the Contents/MacOS folder within the application's .app bundle\n\n\n**Returns**: current executable directory\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getCurrentExePath()\n\n<!--\n_syntax: getCurrentExePath()_\n_name: getCurrentExePath_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the full path to the application's executable file.\n\nMac: the binary within the application's .app bundle Contents/MacOS dir\nWindows: the .exe\nLinux: the binary file itself\n\n\n**Returns**: current executable path\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getCurrentWorkingDirectory()\n\n<!--\n_syntax: getCurrentWorkingDirectory()_\n_name: getCurrentWorkingDirectory_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the full path to the app's current working directory.\n\nThis may be the app's parent directory or the location the app was\nlaunched from (aka on the commandline).\n\n\n**Warning**: This location *may* change if you or a library calls the cd()\nstd C function.\n\n**Returns**: current working directory\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getEnclosingDirectory(&filePath, bRelativeToData = true)\n\n<!--\n_syntax: getEnclosingDirectory(&filePath, bRelativeToData = true)_\n_name: getEnclosingDirectory_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &filePath, bool bRelativeToData=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the enclosing parent directory of a path,\nie. \"images/duck.jpg\" -> \"images\", assumes the path is in the data\ndirectory.\n\n\n**Parameters:**\n\nfilePath file path\n\nbRelativeToData set to false if you are working with paths that\nare *not* in the data folder and want the direct path without relative\n\"../../\"\n\n**Returns**: enclosing directory\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getFileExt(&filename)\n\n<!--\n_syntax: getFileExt(&filename)_\n_name: getFileExt_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &filename_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the extension of a filename, ie. \"duck.jpg\" -> \"jpg\".\n\n\n**Parameters:**\n\nfilename file path\n\n**Returns**: filename extension only\n\n\n\n\n\n_description: _\n\n~~~~{.cpp}\nstring ext = ofFilePath::getFileExt(\"/path/to/your-file.jpg\");\n// ext = \"jpg\"\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getFileName(&filePath, bRelativeToData = true)\n\n<!--\n_syntax: getFileName(&filePath, bRelativeToData = true)_\n_name: getFileName_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &filePath, bool bRelativeToData=true_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the filename of a given path by stripping the parent\ndirectories ie. \"images/duck.jpg\" -> \"duck.jpg\", assumes the path is in\nthe data folder.\n\n\n**Parameters:**\n\nfilePath file path\n\nbRelativeToData set to false if you are working with paths that\nare *not* in the data folder and want the direct path without relative\n\"../../\"\n\n**Returns**: filename\n\n\n\n\n\n_description: _\n\n~~~~{.cpp}\nstring fN = ofFilePath::getFileName(\"/path/to/your-file.ext\");\n// fN = \"your-file.ext\"\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getPathForDirectory(&path)\n\n<!--\n_syntax: getPathForDirectory(&path)_\n_name: getPathForDirectory_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCleaned up a directory path by adding a trailing slash if needed.\n\nFor Windows-style path strings using \"\\\", a \"\\\" will be added.\nFor Unix-style path strings using \"/\", a \"/\" will be added.\n\n\n**Parameters:**\n\npath directory path\n\n**Returns**: cleaned path + trailing slash (if needed)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string getUserHomeDir()\n\n<!--\n_syntax: getUserHomeDir()_\n_name: getUserHomeDir_\n_returns: string_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the absolute path to the user's home directory.\n\nMac OSX: /Users/<username>\nWindows: <root>\\Users\\<username>\nLinux: /home/<username>\n\n\n**Returns**: home directory path\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isAbsolute(&path)\n\n<!--\n_syntax: isAbsolute(&path)_\n_name: isAbsolute_\n_returns: bool_\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck if a path is an absolute (aka a full path),\nie. \"images\" -> false,\n\"/Users/mickey/of/apps/myApps/Donald/bin/data/images\" -> true.\n\n\n**Parameters:**\n\npath file or directory path\n\n**Returns**: true if the path is an absolute path\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string join(&path1, &path2)\n\n<!--\n_syntax: join(&path1, &path2)_\n_name: join_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &path1, const filesystem::path &path2_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a single path by joining path1 & path2 using a slash,\nie. \"/hello/world\" + \"foo/bar\" -> \"/hello/world/foo/bar\".\n\n\n**Parameters:**\n\npath1 left half of the path to join\n\npath2 right half of the path to join\n\n**Returns**: joined path\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string makeRelative(&from, &to)\n\n<!--\n_syntax: makeRelative(&from, &to)_\n_name: makeRelative_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &from, const filesystem::path &to_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMake one path relative to another,\nie. the relative path of \"images/felines/lions\" to\n\"images/felines/tigers\" is \"../tigers\".\n\n\n**Parameters:**\n\nfrom starting path\n\nto destination path\n\n**Returns**: relative path\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string removeExt(&filename)\n\n<!--\n_syntax: removeExt(&filename)_\n_name: removeExt_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &filename_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemove extension from a filename, ie. \"duck.jpg\" ->\"duck\".\n\n\n**Parameters:**\n\nfilename file path\n\n**Returns**: filename without extension\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string removeTrailingSlash(&path)\n\n<!--\n_syntax: removeTrailingSlash(&path)_\n_name: removeTrailingSlash_\n_returns: string_\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemove a path's trailing slash (if found),\nie. \"images/\" -> \"images\".\n\n\n**Parameters:**\n\npath directory path\n\n**Returns**: path minus trailing slash\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n","type":"page"}}],"fetch":[]}