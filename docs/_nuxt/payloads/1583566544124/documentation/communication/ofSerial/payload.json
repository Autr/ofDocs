{"data":[{"page":{"entry":{"name":"ofSerial","filename":"ofSerial.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/communication/ofSerial.markdown","path":"/documentation/communication/ofSerial","route":"/documentation/communication/ofSerial.markdown","dir":"../ofSite/documentation/communication","ext":"markdown","type":"page","id":1920,"parent":1917,"breadcrumbs":[1917,1718],"siblings":[],"translations":{}},"description":{"short":null,"full":"<p>ofSerial provides a cross platform system for interfacing with the serial port. You can choose the port and baud rate, and then read and send data. Please note that the port must be set manually in the code, so you should be clear what port your device is on. For example, Arduino users should check the arduino app to see what port their device is on. Alternatively the ofSerial class can attempt to communicate with the first available device it finds.</p>\n<p>To start up a serial connection to another device you do the following:</p>\n<pre><code>\nserial<span class=\"token punctuation\">.</span><span class=\"token function\">listDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvector <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofSerialDeviceInfo</code></pre>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"available()","name":"available","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>The available method is useful when you want to know how many bytes are available in the serial port. For instance, if you only want to read when there are 8 bytes waiting for you, you would do:</p>\n<pre><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </code></pre>\n"},{"syntax":"buildDeviceList()","name":"buildDeviceList","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Enumerate all devices attached to a serial port.</p>\n<p>This method tries to collect basic information about all devices\nattached to a serial port.\n\\see ofSerial::listDevices()\n\\see enumerateWin32Ports()</p>\n","desc":""},{"syntax":"close()","name":"close","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Closes the connection to the serial device.</p>\n","desc":"<p>Closes the connection to the serial device.</p>\n"},{"syntax":"drain()","name":"drain","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Drain is only available on OSX and Linux and is very similar to\nflush(), but blocks until all the data has been written to or read\nfrom the serial port.</p>\n","desc":"<p>drain is only available on OSX and Linux and is very similar to flush(), but blocks until all the data has been written to or read from the serial port.</p>\n"},{"syntax":"flush(flushIn = true, flushOut = true)","name":"flush","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> flushIn<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> flushOut<span class=\"token operator\">=</span><span class=\"token boolean\">true</span>","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Clears data from one or both of the serial buffers.</p>\n<p>Any data in the cleared buffers is discarded.</p>\n<p><strong>Parameters:</strong></p>\n<p>flushIn If true then it clears the incoming data buffer</p>\n<p>flushOut If true then it clears the outgoing data buffer.</p>\n","desc":"<p>Clears data from one or both of the serial buffers. Any data in the cleared buffers is discarded. flushIn = true clears the incoming data buffer and  fluhOut = true clear the outcoming data buffer.</p>\n"},{"short":"<p>Returns a vector of ofSerialDeviceInfo instances with the\ndevicePath, deviceName, deviceID set.</p>\n","desc":"<p>This returns a vector of ofSerialDeviceInfo instances with the devicePath, deviceName, deviceID set.</p>\n"},{"syntax":"isInitialized()","name":"isInitialized","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"listDevices()","name":"listDevices","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This lists all the available serial devices to the console or\nstandard output.</p>\n<p>On OSX and Linux this will return all the devices listed in /dev tty\nand cu, so you might want to compare it against a list of devices that\nyou're expecting if you want to use it to dynamically connect to a\ndevice.</p>\n","desc":"<p>This lists out all the available serial devices to the console or standard output. On OSX and Linux this will return all the devices listed in /dev tty and cu, so you might want to compare it against a list of devices that you're expecting if you want to use it to dynamically connect to a device.</p>\n"},{"syntax":"ofSerial()","name":"ofSerial","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"<p>Initializes the serial connection, but doesn't actually open the\nconnection to any devices. You'll need to use the setup() method\nbefore doing that.</p>\n","desc":"<p>This initializes the serial connection, but doesn't actually open the connection to any devices. You'll need to use the setup() method before doing that.</p>\n"},{"syntax":"readByte()","name":"readByte","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Reads and returns a single byte from the requested device.</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> myByte <span class=\"token operator\">=</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> myByte <span class=\"token operator\">==</span> OF_SERIAL_NO_DATA <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>no data was read<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> myByte <span class=\"token operator\">==</span> OF_SERIAL_ERROR <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>an error occurred<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>myByte is <span class=\"token operator\">%</span>d<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> myByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Returns</strong>: The single byte as integer. If there is no data it will return\n<code>OF_SERIAL_NO_DATA</code>, and on error it returns <code>OF_SERIAL_ERROR</code></p>\n","desc":"<p>Reads and returns a single byte from the requested device.</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> myByte <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nmyByte <span class=\"token operator\">=</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> myByte <span class=\"token operator\">==</span> OF_SERIAL_NO_DATA <span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>no data was read<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> myByte <span class=\"token operator\">==</span> OF_SERIAL_ERROR <span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>an error occurred<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>myByte is <span class=\"token operator\">%</span>d<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> myByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"readBytes(&buffer, length)","name":"readBytes","returns":"long","returns_description":null,"parameters":"ofBuffer <span class=\"token operator\">&amp;</span>buffer<span class=\"token punctuation\">,</span> size_t length","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"readBytes(*buffer, length)","name":"readBytes","returns":"long","returns_description":null,"parameters":"<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t length","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","desc":"<p>Tries to read 'length' bytes from the connected serial device. In some cases it may read less than 'length' bytes, so for reliable reading of</p>\n"},{"syntax":"readBytes(*buffer, length)","name":"readBytes","returns":"long","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t length","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setup()","name":"setup","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Attempts to setup the first available device at a baud rate of 9600.</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>serial is setup<span class=\"token operator\">!</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","desc":"<p>Attempts to setup the first available device at a baud rate of 9600.</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>serial is setup<span class=\"token operator\">!</span>\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n"},{"syntax":"setup(deviceNumber, baudrate)","name":"setup","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> deviceNumber<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baudrate","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Opens the serial port based on the order in which is listed and\nsets the baud rate.</p>\n<p>The code bellow would open the first serial device found by the system:</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","desc":"<p>Opens the serial port based on the order in which is listed and sets the baud rate. The code bellow would open the first serial device found by the system:</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"setup(portName, baudrate)","name":"setup","returns":"bool","returns_description":null,"parameters":"string portName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> baudrate","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Opens the serial port, with the given name and baud rate.</p>\n<p>On OSX and Linux, it might look like:</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>cu<span class=\"token punctuation\">.</span>USA19H181P1<span class=\"token number\">.1</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>On Windows, like:</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>COM4<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","desc":"<p>Opens the serial port, with the given name and baud rate. On mac and linux, it might look like:</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>cu<span class=\"token punctuation\">.</span>USA19H181P1<span class=\"token number\">.1</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>and on a pc, like:</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>COM4<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"writeByte(singleByte)","name":"writeByte","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> singleByte","access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Writes a single byte to the connected serial device.</p>\n<p>Check the return value to be sure the data was written.</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> myByte <span class=\"token operator\">=</span> <span class=\"token number\">225</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> byteWasWritten <span class=\"token operator\">=</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span>myByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>byteWasWritten <span class=\"token punctuation\">)</span>\n\t <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_ERROR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>Byte was <span class=\"token operator\">not</span> written to serial port<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","desc":"<p>Writes a single byte to the connected serial device. Check the return value to be sure the data was written.</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> myByte <span class=\"token operator\">=</span> <span class=\"token number\">225</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> byteWasWritten <span class=\"token operator\">=</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span>myByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>byteWasWritten <span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>byte was <span class=\"token operator\">not</span> written to serial port<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"writeByte(singleByte)","name":"writeByte","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">char</span> singleByte","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"writeBytes(&buffer)","name":"writeBytes","returns":"long","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofBuffer <span class=\"token operator\">&amp;</span>buffer","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"writeBytes(*buffer, length)","name":"writeBytes","returns":"long","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t length","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This writes bytes into the serial buffer from the buffer pointer passed in</p>\n<pre><code><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndevice<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n","desc":"<p>This writes bytes into the serial buffer from the buffer pointer passed in:</p>\n<pre><code><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndevice<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"writeBytes(*buffer, length)","name":"writeBytes","returns":"long","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buffer<span class=\"token punctuation\">,</span> size_t length","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"~ofSerial()","name":"~ofSerial","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"006","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"","desc":""},{"name":"bHaveEnumeratedDevices","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; This vector stores information about all serial devices found.</p>\n","desc":""},{"name":"bInited","type":"bool","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; Indicate having enumerated devices (serial ports) available.</p>\n","desc":"<p>h</p>\n"},{"name":"deviceType","type":"string","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"devices","type":"ofSerialDeviceInfo","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>&lt; Name of the device on the other end of the serial connection.</p>\n","desc":""},{"name":"fd","type":"int","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; File descriptor for the serial port.</p>\n","desc":""},{"name":"oldoptions","type":"struct termios","access":"protected","version_started":"006","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"<p>&lt; This is the set of (current) terminal attributes to be reused when changing a subset of options.</p>\n","desc":""},{}],"document":"<p>#class ofSerial</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>ofSerial provides a cross platform system for interfacing with the\nserial port. You can choose the port and baud rate, and then read and send\ndata. Please note that the port must be set manually in the code, so you\nshould be clear what port your device is on. For example, Arduino users should\ncheck the arduino app to see what port their device is on. Alternatively the\nofSerial class can attempt to communicate with the first available device it\nfinds.</p>\n<p>To start up a serial connection to another device you do the following:</p>\n<pre><code>serial<span class=\"token punctuation\">.</span><span class=\"token function\">listDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvector <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofSerialDeviceInfo<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> deviceList <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span><span class=\"token function\">getDeviceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Open the first device and talk to it at 57600 baud</span>\nserial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>##Description</p>\n<p>ofSerial provides a cross platform system for interfacing with the serial port. You can choose the port and baud rate, and then read and send data. Please note that the port must be set manually in the code, so you should be clear what port your device is on. For example, Arduino users should check the arduino app to see what port their device is on. Alternatively the ofSerial class can attempt to communicate with the first available device it finds.</p>\n<p>To start up a serial connection to another device you do the following:</p>\n<pre><code>\nserial<span class=\"token punctuation\">.</span><span class=\"token function\">listDevices</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvector <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofSerialDeviceInfo<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> deviceList <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span><span class=\"token function\">getDeviceList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token keyword\">int</span> baud <span class=\"token operator\">=</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">;</span>\nserial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//open the first device and talk to it at 57600 baud</span>\n\n</code></pre>\n<p>##Methods</p>\n<p>###int available()</p>\n<p>&lt;!--\n<em>syntax: available()</em>\n<em>name: available</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The available method is useful when you want to know how many bytes\nare available in the serial port. For instance, if you only want to\nread when there are 8 bytes waiting for you, you would do:</p>\n<pre><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t device<span class=\"token punctuation\">.</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This is useful when you know how long a complete message from a device\nis going to be.</p>\n<p>_description: _</p>\n<p>The available method is useful when you want to know how many bytes are available in the serial port. For instance, if you only want to read when there are 8 bytes waiting for you, you would do:</p>\n<pre><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  device<span class=\"token punctuation\">.</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>This is useful when you know how long a complete message from a device is going to be.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void buildDeviceList()</p>\n<p>&lt;!--\n<em>syntax: buildDeviceList()</em>\n<em>name: buildDeviceList</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Enumerate all devices attached to a serial port.</p>\n<p>This method tries to collect basic information about all devices\nattached to a serial port.\n\\see ofSerial::listDevices()\n\\see enumerateWin32Ports()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void close()</p>\n<p>&lt;!--\n<em>syntax: close()</em>\n<em>name: close</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Closes the connection to the serial device.</p>\n<p>_description: _</p>\n<p>Closes the connection to the serial device.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drain()</p>\n<p>&lt;!--\n<em>syntax: drain()</em>\n<em>name: drain</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Drain is only available on OSX and Linux and is very similar to\nflush(), but blocks until all the data has been written to or read\nfrom the serial port.</p>\n<p>_description: _</p>\n<p>drain is only available on OSX and Linux and is very similar to flush(), but blocks until all the data has been written to or read from the serial port.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void flush(flushIn = true, flushOut = true)</p>\n<p>&lt;!--\n<em>syntax: flush(flushIn = true, flushOut = true)</em>\n<em>name: flush</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool flushIn=true, bool flushOut=true</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clears data from one or both of the serial buffers.</p>\n<p>Any data in the cleared buffers is discarded.</p>\n<p><strong>Parameters:</strong></p>\n<p>flushIn If true then it clears the incoming data buffer</p>\n<p>flushOut If true then it clears the outgoing data buffer.</p>\n<p>_description: _</p>\n<p>Clears data from one or both of the serial buffers. Any data in the cleared buffers is discarded. flushIn = true clears the incoming data buffer and  fluhOut = true clear the outcoming data buffer.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; ofSerialDeviceInfo &gt; getDeviceList()</p>\n<p>&lt;!--\n<em>syntax: getDeviceList()</em>\n<em>name: getDeviceList</em>\n<em>returns: vector&lt; ofSerialDeviceInfo &gt;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a vector of ofSerialDeviceInfo instances with the\ndevicePath, deviceName, deviceID set.</p>\n<p>_description: _</p>\n<p>This returns a vector of ofSerialDeviceInfo instances with the devicePath, deviceName, deviceID set.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isInitialized()</p>\n<p>&lt;!--\n<em>syntax: isInitialized()</em>\n<em>name: isInitialized</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void listDevices()</p>\n<p>&lt;!--\n<em>syntax: listDevices()</em>\n<em>name: listDevices</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This lists all the available serial devices to the console or\nstandard output.</p>\n<p>On OSX and Linux this will return all the devices listed in /dev tty\nand cu, so you might want to compare it against a list of devices that\nyou're expecting if you want to use it to dynamically connect to a\ndevice.</p>\n<p>_description: _</p>\n<p>This lists out all the available serial devices to the console or standard output. On OSX and Linux this will return all the devices listed in /dev tty and cu, so you might want to compare it against a list of devices that you're expecting if you want to use it to dynamically connect to a device.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofSerial()</h3>\n<p>&lt;!--\n<em>syntax: ofSerial()</em>\n<em>name: ofSerial</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Initializes the serial connection, but doesn't actually open the\nconnection to any devices. You'll need to use the setup() method\nbefore doing that.</p>\n<p>_description: _</p>\n<p>This initializes the serial connection, but doesn't actually open the connection to any devices. You'll need to use the setup() method before doing that.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int readByte()</p>\n<p>&lt;!--\n<em>syntax: readByte()</em>\n<em>name: readByte</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Reads and returns a single byte from the requested device.</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> myByte <span class=\"token operator\">=</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> myByte <span class=\"token operator\">==</span> OF_SERIAL_NO_DATA <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>no data was read<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> myByte <span class=\"token operator\">==</span> OF_SERIAL_ERROR <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>an error occurred<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>myByte is <span class=\"token operator\">%</span>d<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> myByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p><strong>Returns</strong>: The single byte as integer. If there is no data it will return\n<code>OF_SERIAL_NO_DATA</code>, and on error it returns <code>OF_SERIAL_ERROR</code></p>\n<p>_description: _</p>\n<p>Reads and returns a single byte from the requested device.</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> myByte <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nmyByte <span class=\"token operator\">=</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">readByte</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> myByte <span class=\"token operator\">==</span> OF_SERIAL_NO_DATA <span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>no data was read<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> myByte <span class=\"token operator\">==</span> OF_SERIAL_ERROR <span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>an error occurred<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>myByte is <span class=\"token operator\">%</span>d<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> myByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###long readBytes(&amp;buffer, length)</p>\n<p>&lt;!--\n<em>syntax: readBytes(&amp;buffer, length)</em>\n<em>name: readBytes</em>\n<em>returns: long</em>\n_returns_description: _\n<em>parameters: ofBuffer &amp;buffer, size_t length</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###long readBytes(*buffer, length)</p>\n<p>&lt;!--\n<em>syntax: readBytes(*buffer, length)</em>\n<em>name: readBytes</em>\n<em>returns: long</em>\n_returns_description: _\n<em>parameters: unsigned char *buffer, size_t length</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Reads 'length' bytes from the connected serial device.</p>\n<p>In some cases it may read less than 'length' bytes, so for reliable\nreading of &gt;1 bytes of data the return value must be checked against the\nnumber of bytes requested, and if fewer bytes than requested were read\nthen the call must be tried again.</p>\n<p>This function should only be called when Serial.available() is reporting</p>\n<blockquote>\n<p>0 bytes available.</p>\n</blockquote>\n<p>An example of how to reliably read 8 bytes:</p>\n<pre><code><span class=\"token comment\" spellcheck=\"true\">// we want to read 8 bytes</span>\n<span class=\"token keyword\">int</span> bytesRequired <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> bytes<span class=\"token punctuation\">[</span>bytesRequired<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> bytesRemaining <span class=\"token operator\">=</span> bytesRequired<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// loop until we've read everything</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> bytesRemaining <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t <span class=\"token comment\" spellcheck=\"true\">// check for data</span>\n\t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> serial<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t <span class=\"token comment\" spellcheck=\"true\">// try to read - note offset into the bytes[] array, this is so</span>\n\t\t <span class=\"token comment\" spellcheck=\"true\">// that we don't overwrite the bytes we already have</span>\n\t\t <span class=\"token keyword\">int</span> bytesArrayOffset <span class=\"token operator\">=</span> bytesRequired <span class=\"token operator\">-</span> bytesRemaining<span class=\"token punctuation\">;</span>\n\t\t <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>bytes<span class=\"token punctuation\">[</span>bytesArrayOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> bytesRemaining <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t <span class=\"token comment\" spellcheck=\"true\">// check for error code</span>\n\t\t <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result <span class=\"token operator\">==</span> OF_SERIAL_ERROR <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t <span class=\"token comment\" spellcheck=\"true\">// something bad happened</span>\n\t\t\t <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span> OF_LOG_ERROR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>unrecoverable error reading from serial<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result <span class=\"token operator\">==</span> OF_SERIAL_NO_DATA <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t <span class=\"token comment\" spellcheck=\"true\">// nothing was read, try again</span>\n\t\t <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t <span class=\"token comment\" spellcheck=\"true\">// we read some data!</span>\n\t\t\t bytesRemaining <span class=\"token operator\">-</span><span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n\t\t <span class=\"token punctuation\">}</span>\n\t <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Be aware that the type of your buffer can only be unsigned char. If you're\ntrying to receieve ints or signed chars over a serial connection you'll\nneed to do some bit manipulation to correctly interpret that values.</p>\n<p>_description: _</p>\n<p>Tries to read 'length' bytes from the connected serial device. In some cases it may read less than 'length' bytes, so for reliable reading of &gt;1 bytes of data the return value must be checked against the number of bytes requested, and if fewer bytes than requested were read then the call must be tried again.</p>\n<p>This function should only be called when Serial.available() is reporting &gt;0 bytes available.</p>\n<p>An example of how to reliably read 8 bytes:</p>\n<pre><code>\n<span class=\"token comment\" spellcheck=\"true\">// we want to read 8 bytes</span>\n<span class=\"token keyword\">int</span> bytesRequired <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> bytes<span class=\"token punctuation\">[</span>bytesRequired<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> bytesRemaining <span class=\"token operator\">=</span> bytesRequired<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// loop until we've read everything</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> bytesRemaining <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\" spellcheck=\"true\">// check for data</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> serial<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// try to read - note offset into the bytes[] array, this is so</span>\n    <span class=\"token comment\" spellcheck=\"true\">// that we don't overwrite the bytes we already have</span>\n    <span class=\"token keyword\">int</span> bytesArrayOffset <span class=\"token operator\">=</span> bytesRequired <span class=\"token operator\">-</span> bytesRemaining<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> serial<span class=\"token punctuation\">.</span><span class=\"token function\">readBytes</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>bytes<span class=\"token punctuation\">[</span>bytesArrayOffset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      bytesRemaining <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// check for error code</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result <span class=\"token operator\">==</span> OF_SERIAL_ERROR <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// something bad happened</span>\n      <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span> OF_LOG_ERROR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>unrecoverable error reading from serial<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\" spellcheck=\"true\">// bail out</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> result <span class=\"token operator\">==</span> OF_SERIAL_NO_DATA <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// nothing was read, try again</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// we read some data!</span>\n      bytesRemaining <span class=\"token operator\">-</span><span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Be aware that the type of your buffer can only be unsigned char. If you're trying to receieve ints or signed chars over a serial connection you'll need to do some bit manipulation to correctly interpret that values.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###long readBytes(*buffer, length)</p>\n<p>&lt;!--\n<em>syntax: readBytes(*buffer, length)</em>\n<em>name: readBytes</em>\n<em>returns: long</em>\n_returns_description: _\n<em>parameters: char *buffer, size_t length</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool setup()</p>\n<p>&lt;!--\n<em>syntax: setup()</em>\n<em>name: setup</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Attempts to setup the first available device at a baud rate of 9600.</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>serial is setup<span class=\"token operator\">!</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>_description: _</p>\n<p>Attempts to setup the first available device at a baud rate of 9600.</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>serial is setup<span class=\"token operator\">!</span>\n<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool setup(deviceNumber, baudrate)</p>\n<p>&lt;!--\n<em>syntax: setup(deviceNumber, baudrate)</em>\n<em>name: setup</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: int deviceNumber, int baudrate</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Opens the serial port based on the order in which is listed and\nsets the baud rate.</p>\n<p>The code bellow would open the first serial device found by the system:</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>_description: _</p>\n<p>Opens the serial port based on the order in which is listed and sets the baud rate. The code bellow would open the first serial device found by the system:</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool setup(portName, baudrate)</p>\n<p>&lt;!--\n<em>syntax: setup(portName, baudrate)</em>\n<em>name: setup</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: string portName, int baudrate</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Opens the serial port, with the given name and baud rate.</p>\n<p>On OSX and Linux, it might look like:</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>cu<span class=\"token punctuation\">.</span>USA19H181P1<span class=\"token number\">.1</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>On Windows, like:</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>COM4<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>_description: _</p>\n<p>Opens the serial port, with the given name and baud rate. On mac and linux, it might look like:</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token operator\">/</span>dev<span class=\"token operator\">/</span>cu<span class=\"token punctuation\">.</span>USA19H181P1<span class=\"token number\">.1</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>and on a pc, like:</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>COM4<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool writeByte(singleByte)</p>\n<p>&lt;!--\n<em>syntax: writeByte(singleByte)</em>\n<em>name: writeByte</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: unsigned char singleByte</em>\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Writes a single byte to the connected serial device.</p>\n<p>Check the return value to be sure the data was written.</p>\n<pre><code>ofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> myByte <span class=\"token operator\">=</span> <span class=\"token number\">225</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> byteWasWritten <span class=\"token operator\">=</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span>myByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>byteWasWritten <span class=\"token punctuation\">)</span>\n\t <span class=\"token function\">ofLog</span><span class=\"token punctuation\">(</span>OF_LOG_ERROR<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>Byte was <span class=\"token operator\">not</span> written to serial port<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>_description: _</p>\n<p>Writes a single byte to the connected serial device. Check the return value to be sure the data was written.</p>\n<pre><code>\nofSerial mySerial<span class=\"token punctuation\">;</span>\nmySerial<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">57600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> myByte <span class=\"token operator\">=</span> <span class=\"token number\">225</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> byteWasWritten <span class=\"token operator\">=</span> mySerial<span class=\"token punctuation\">.</span><span class=\"token function\">writeByte</span><span class=\"token punctuation\">(</span>myByte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>byteWasWritten <span class=\"token punctuation\">)</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>byte was <span class=\"token operator\">not</span> written to serial port<span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool writeByte(singleByte)</p>\n<p>&lt;!--\n<em>syntax: writeByte(singleByte)</em>\n<em>name: writeByte</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: char singleByte</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###long writeBytes(&amp;buffer)</p>\n<p>&lt;!--\n<em>syntax: writeBytes(&amp;buffer)</em>\n<em>name: writeBytes</em>\n<em>returns: long</em>\n_returns_description: _\n<em>parameters: const ofBuffer &amp;buffer</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###long writeBytes(*buffer, length)</p>\n<p>&lt;!--\n<em>syntax: writeBytes(*buffer, length)</em>\n<em>name: writeBytes</em>\n<em>returns: long</em>\n_returns_description: _\n<em>parameters: const unsigned char *buffer, size_t length</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This writes bytes into the serial buffer from the buffer pointer passed in</p>\n<pre><code><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndevice<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>_description: _</p>\n<p>This writes bytes into the serial buffer from the buffer pointer passed in:</p>\n<pre><code><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'!'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ndevice<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###long writeBytes(*buffer, length)</p>\n<p>&lt;!--\n<em>syntax: writeBytes(*buffer, length)</em>\n<em>name: writeBytes</em>\n<em>returns: long</em>\n_returns_description: _\n<em>parameters: const char *buffer, size_t length</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofSerial()</h3>\n<p>&lt;!--\n<em>syntax: ~ofSerial()</em>\n<em>name: ~ofSerial</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###bool bHaveEnumeratedDevices</p>\n<p>&lt;!--\n<em>name: bHaveEnumeratedDevices</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; This vector stores information about all serial devices found.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bInited</p>\n<p>&lt;!--\n<em>name: bInited</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; Indicate having enumerated devices (serial ports) available.</p>\n<p>_description: _</p>\n<p>h</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###string deviceType</p>\n<p>&lt;!--\n<em>name: deviceType</em>\n<em>type: string</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofSerialDeviceInfo devices</p>\n<p>&lt;!--\n<em>name: devices</em>\n<em>type: ofSerialDeviceInfo</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; Name of the device on the other end of the serial connection.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int fd</p>\n<p>&lt;!--\n<em>name: fd</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; File descriptor for the serial port.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###struct termios oldoptions</p>\n<p>&lt;!--\n<em>name: oldoptions</em>\n<em>type: struct termios</em>\n<em>access: protected</em>\n<em>version_started: 006</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>&lt; This is the set of (current) terminal attributes to be reused when changing a subset of options.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofSerial\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\nofSerial provides a cross platform system for interfacing with the\nserial port. You can choose the port and baud rate, and then read and send\ndata. Please note that the port must be set manually in the code, so you\nshould be clear what port your device is on. For example, Arduino users should\ncheck the arduino app to see what port their device is on. Alternatively the\nofSerial class can attempt to communicate with the first available device it\nfinds.\n\nTo start up a serial connection to another device you do the following:\n\n~~~~{.cpp}\nserial.listDevices();\nvector <ofSerialDeviceInfo> deviceList = serial.getDeviceList();\n\n// Open the first device and talk to it at 57600 baud\nserial.setup(0, 57600);\n~~~~\n\n\n\n\n\n##Description\n\nofSerial provides a cross platform system for interfacing with the serial port. You can choose the port and baud rate, and then read and send data. Please note that the port must be set manually in the code, so you should be clear what port your device is on. For example, Arduino users should check the arduino app to see what port their device is on. Alternatively the ofSerial class can attempt to communicate with the first available device it finds.\n\nTo start up a serial connection to another device you do the following:\n\n~~~~{.cpp}\n\nserial.listDevices();\nvector <ofSerialDeviceInfo> deviceList = serial.getDeviceList();\n  \nint baud = 57600;\nserial.setup(0, 57600); //open the first device and talk to it at 57600 baud\n\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###int available()\n\n<!--\n_syntax: available()_\n_name: available_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe available method is useful when you want to know how many bytes\nare available in the serial port. For instance, if you only want to\nread when there are 8 bytes waiting for you, you would do:\n\n~~~~{.cpp}\nif(device.available() > 8) {\n\t device.readBytes(buffer, 8);\n}\n~~~~\n\nThis is useful when you know how long a complete message from a device\nis going to be.\n\n\n\n\n\n_description: _\n\nThe available method is useful when you want to know how many bytes are available in the serial port. For instance, if you only want to read when there are 8 bytes waiting for you, you would do:\n\n~~~~{.cpp}\nif(device.available() > 8) {\n  device.readBytes(buffer, 8);\n}\n~~~~\n\nThis is useful when you know how long a complete message from a device is going to be.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void buildDeviceList()\n\n<!--\n_syntax: buildDeviceList()_\n_name: buildDeviceList_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEnumerate all devices attached to a serial port.\n\nThis method tries to collect basic information about all devices\nattached to a serial port.\n\\see ofSerial::listDevices()\n\\see enumerateWin32Ports()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void close()\n\n<!--\n_syntax: close()_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCloses the connection to the serial device.\n\n\n\n\n\n_description: _\n\nCloses the connection to the serial device. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drain()\n\n<!--\n_syntax: drain()_\n_name: drain_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDrain is only available on OSX and Linux and is very similar to\nflush(), but blocks until all the data has been written to or read\nfrom the serial port.\n\n\n\n\n\n_description: _\n\ndrain is only available on OSX and Linux and is very similar to flush(), but blocks until all the data has been written to or read from the serial port.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void flush(flushIn = true, flushOut = true)\n\n<!--\n_syntax: flush(flushIn = true, flushOut = true)_\n_name: flush_\n_returns: void_\n_returns_description: _\n_parameters: bool flushIn=true, bool flushOut=true_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClears data from one or both of the serial buffers.\n\nAny data in the cleared buffers is discarded.\n\n**Parameters:**\n\nflushIn If true then it clears the incoming data buffer\n\nflushOut If true then it clears the outgoing data buffer.\n\n\n\n\n\n_description: _\n\nClears data from one or both of the serial buffers. Any data in the cleared buffers is discarded. flushIn = true clears the incoming data buffer and  fluhOut = true clear the outcoming data buffer. \n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofSerialDeviceInfo > getDeviceList()\n\n<!--\n_syntax: getDeviceList()_\n_name: getDeviceList_\n_returns: vector< ofSerialDeviceInfo >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a vector of ofSerialDeviceInfo instances with the\ndevicePath, deviceName, deviceID set.\n\n\n\n\n\n_description: _\n\nThis returns a vector of ofSerialDeviceInfo instances with the devicePath, deviceName, deviceID set.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isInitialized()\n\n<!--\n_syntax: isInitialized()_\n_name: isInitialized_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void listDevices()\n\n<!--\n_syntax: listDevices()_\n_name: listDevices_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis lists all the available serial devices to the console or\nstandard output.\n\nOn OSX and Linux this will return all the devices listed in /dev tty\nand cu, so you might want to compare it against a list of devices that\nyou're expecting if you want to use it to dynamically connect to a\ndevice.\n\n\n\n\n\n_description: _\n\nThis lists out all the available serial devices to the console or standard output. On OSX and Linux this will return all the devices listed in /dev tty and cu, so you might want to compare it against a list of devices that you're expecting if you want to use it to dynamically connect to a device.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofSerial()\n\n<!--\n_syntax: ofSerial()_\n_name: ofSerial_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nInitializes the serial connection, but doesn't actually open the\nconnection to any devices. You'll need to use the setup() method\nbefore doing that.\n\n\n\n\n\n_description: _\n\nThis initializes the serial connection, but doesn't actually open the connection to any devices. You'll need to use the setup() method before doing that.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int readByte()\n\n<!--\n_syntax: readByte()_\n_name: readByte_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReads and returns a single byte from the requested device.\n\n~~~~{.cpp}\nofSerial mySerial;\nmySerial.setup(0, 57600);\n\nint myByte = mySerial.readByte();\n\nif ( myByte == OF_SERIAL_NO_DATA ){\n\t printf(\"no data was read\");\n} else if ( myByte == OF_SERIAL_ERROR ){\n\t printf(\"an error occurred\");\n} else {\n\t printf(\"myByte is %d\", myByte);\n}\n~~~~\n\n\n**Returns**: The single byte as integer. If there is no data it will return\n`OF_SERIAL_NO_DATA`, and on error it returns `OF_SERIAL_ERROR`\n\n\n\n\n\n_description: _\n\nReads and returns a single byte from the requested device. \n\n~~~~{.cpp}\n\nofSerial mySerial;\nmySerial.setup(0, 57600);\nint myByte = 0;\nmyByte = mySerial.readByte();\nif ( myByte == OF_SERIAL_NO_DATA )\n  printf(\"no data was read\");\nelse if ( myByte == OF_SERIAL_ERROR )\n  printf(\"an error occurred\");\nelse\n  printf(\"myByte is %d\", myByte);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###long readBytes(&buffer, length)\n\n<!--\n_syntax: readBytes(&buffer, length)_\n_name: readBytes_\n_returns: long_\n_returns_description: _\n_parameters: ofBuffer &buffer, size_t length_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###long readBytes(*buffer, length)\n\n<!--\n_syntax: readBytes(*buffer, length)_\n_name: readBytes_\n_returns: long_\n_returns_description: _\n_parameters: unsigned char *buffer, size_t length_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReads 'length' bytes from the connected serial device.\n\nIn some cases it may read less than 'length' bytes, so for reliable\nreading of >1 bytes of data the return value must be checked against the\nnumber of bytes requested, and if fewer bytes than requested were read\nthen the call must be tried again.\n\nThis function should only be called when Serial.available() is reporting\n>0 bytes available.\n\nAn example of how to reliably read 8 bytes:\n~~~~{.cpp}\n// we want to read 8 bytes\nint bytesRequired = 8;\nunsigned char bytes[bytesRequired];\nint bytesRemaining = bytesRequired;\n// loop until we've read everything\nwhile ( bytesRemaining > 0 ){\n\t // check for data\n\t if ( serial.available() > 0 ){\n\t\t // try to read - note offset into the bytes[] array, this is so\n\t\t // that we don't overwrite the bytes we already have\n\t\t int bytesArrayOffset = bytesRequired - bytesRemaining;\n\t\t int result = serial.readBytes( &bytes[bytesArrayOffset], bytesRemaining );\n\n\t\t // check for error code\n\t\t if ( result == OF_SERIAL_ERROR ){\n\t\t\t // something bad happened\n\t\t\t ofLog( OF_LOG_ERROR, \"unrecoverable error reading from serial\" );\n\t\t\t break;\n\t\t } else if ( result == OF_SERIAL_NO_DATA ){\n\t\t\t // nothing was read, try again\n\t\t } else {\n\t\t\t // we read some data!\n\t\t\t bytesRemaining -= result;\n\t\t }\n\t }\n}\n~~~~\n\nBe aware that the type of your buffer can only be unsigned char. If you're\ntrying to receieve ints or signed chars over a serial connection you'll\nneed to do some bit manipulation to correctly interpret that values.\n\n\n\n\n\n_description: _\n\nTries to read 'length' bytes from the connected serial device. In some cases it may read less than 'length' bytes, so for reliable reading of >1 bytes of data the return value must be checked against the number of bytes requested, and if fewer bytes than requested were read then the call must be tried again.\n\nThis function should only be called when Serial.available() is reporting >0 bytes available.\n\nAn example of how to reliably read 8 bytes:\n~~~~{.cpp}\n\n// we want to read 8 bytes\nint bytesRequired = 8;\nunsigned char bytes[bytesRequired];\nint bytesRemaining = bytesRequired;\n// loop until we've read everything\nwhile ( bytesRemaining > 0 )\n{\n  // check for data\n  if ( serial.available() > 0 )\n  {\n    // try to read - note offset into the bytes[] array, this is so\n    // that we don't overwrite the bytes we already have\n    int bytesArrayOffset = bytesRequired - bytesRemaining;\n    int result = serial.readBytes( &bytes[bytesArrayOffset],\n      bytesRemaining );\n\n    // check for error code\n    if ( result == OF_SERIAL_ERROR )\n    {\n      // something bad happened\n      ofLog( OF_LOG_ERROR, \"unrecoverable error reading from serial\" );\n      // bail out\n      break;\n    }\n    else if ( result == OF_SERIAL_NO_DATA )\n    {\n      // nothing was read, try again\n    }\n    else\n    {\n      // we read some data!\n      bytesRemaining -= result;\n    }\n  }\n}\n~~~~\n\nBe aware that the type of your buffer can only be unsigned char. If you're trying to receieve ints or signed chars over a serial connection you'll need to do some bit manipulation to correctly interpret that values.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###long readBytes(*buffer, length)\n\n<!--\n_syntax: readBytes(*buffer, length)_\n_name: readBytes_\n_returns: long_\n_returns_description: _\n_parameters: char *buffer, size_t length_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool setup()\n\n<!--\n_syntax: setup()_\n_name: setup_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAttempts to setup the first available device at a baud rate of 9600.\n~~~~{.cpp}\nofSerial mySerial;\nif( mySerial.setup() ){\n\t ofLog(\"serial is setup!\");\n}\n~~~~\n\n\n\n\n\n_description: _\n\nAttempts to setup the first available device at a baud rate of 9600. \n~~~~{.cpp}\n\nofSerial mySerial;\nif( mySerial.setup() ){\n\tprintf(\"serial is setup!\n\");\t\n}\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool setup(deviceNumber, baudrate)\n\n<!--\n_syntax: setup(deviceNumber, baudrate)_\n_name: setup_\n_returns: bool_\n_returns_description: _\n_parameters: int deviceNumber, int baudrate_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOpens the serial port based on the order in which is listed and\nsets the baud rate.\n\nThe code bellow would open the first serial device found by the system:\n~~~~{.cpp}\nofSerial mySerial;\nmySerial.setup(0, 9600);\n~~~~\n\n\n\n\n\n_description: _\n\nOpens the serial port based on the order in which is listed and sets the baud rate. The code bellow would open the first serial device found by the system:\n~~~~{.cpp}\n\nofSerial mySerial;\nmySerial.setup(0, 9600);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool setup(portName, baudrate)\n\n<!--\n_syntax: setup(portName, baudrate)_\n_name: setup_\n_returns: bool_\n_returns_description: _\n_parameters: string portName, int baudrate_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOpens the serial port, with the given name and baud rate.\n\nOn OSX and Linux, it might look like:\n~~~~{.cpp}\nofSerial mySerial;\nmySerial.setup(\"/dev/cu.USA19H181P1.1\", 57600);\n~~~~\n\nOn Windows, like:\n~~~~{.cpp}\nofSerial mySerial;\nmySerial.setup(\"COM4\", 57600);\n~~~~\n\n\n\n\n\n_description: _\n\nOpens the serial port, with the given name and baud rate. On mac and linux, it might look like:\n~~~~{.cpp}\n\nofSerial mySerial;\nmySerial.setup(\"/dev/cu.USA19H181P1.1\", 57600);\n~~~~\n\nand on a pc, like:\n~~~~{.cpp}\n\nofSerial mySerial;\nmySerial.setup(\"COM4\", 57600);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool writeByte(singleByte)\n\n<!--\n_syntax: writeByte(singleByte)_\n_name: writeByte_\n_returns: bool_\n_returns_description: _\n_parameters: unsigned char singleByte_\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nWrites a single byte to the connected serial device.\n\nCheck the return value to be sure the data was written.\n~~~~{.cpp}\nofSerial mySerial;\nmySerial.setup(0, 57600);\nunsigned char myByte = 225;\nbool byteWasWritten = mySerial.writeByte(myByte);\nif ( !byteWasWritten )\n\t ofLog(OF_LOG_ERROR, \"Byte was not written to serial port\");\n~~~~\n\n\n\n\n\n_description: _\n\nWrites a single byte to the connected serial device. Check the return value to be sure the data was written.\n~~~~{.cpp}\n\nofSerial mySerial;\nmySerial.setup(0, 57600);\nunsigned char myByte = 225;\nbool byteWasWritten = mySerial.writeByte(myByte);\nif ( !byteWasWritten )\n  printf(\"byte was not written to serial port\");\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool writeByte(singleByte)\n\n<!--\n_syntax: writeByte(singleByte)_\n_name: writeByte_\n_returns: bool_\n_returns_description: _\n_parameters: char singleByte_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###long writeBytes(&buffer)\n\n<!--\n_syntax: writeBytes(&buffer)_\n_name: writeBytes_\n_returns: long_\n_returns_description: _\n_parameters: const ofBuffer &buffer_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###long writeBytes(*buffer, length)\n\n<!--\n_syntax: writeBytes(*buffer, length)_\n_name: writeBytes_\n_returns: long_\n_returns_description: _\n_parameters: const unsigned char *buffer, size_t length_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis writes bytes into the serial buffer from the buffer pointer passed in\n\n~~~~{.cpp}\nunsigned char buf[3] = {'o', 'f', '!'};\ndevice.writeBytes(&buf[0], 3);\n~~~~\n\n\n\n\n\n_description: _\n\nThis writes bytes into the serial buffer from the buffer pointer passed in:\n\n~~~~{.cpp}\nunsigned char buf[3] = {'o', 'f', '!'};\ndevice.writeBytes(&buf[0], 3);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###long writeBytes(*buffer, length)\n\n<!--\n_syntax: writeBytes(*buffer, length)_\n_name: writeBytes_\n_returns: long_\n_returns_description: _\n_parameters: const char *buffer, size_t length_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofSerial()\n\n<!--\n_syntax: ~ofSerial()_\n_name: ~ofSerial_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bHaveEnumeratedDevices\n\n<!--\n_name: bHaveEnumeratedDevices_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\< This vector stores information about all serial devices found.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bInited\n\n<!--\n_name: bInited_\n_type: bool_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\< Indicate having enumerated devices (serial ports) available.\n\n\n\n\n\n_description: _\n\nh\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###string deviceType\n\n<!--\n_name: deviceType_\n_type: string_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofSerialDeviceInfo devices\n\n<!--\n_name: devices_\n_type: ofSerialDeviceInfo_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\< Name of the device on the other end of the serial connection.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int fd\n\n<!--\n_name: fd_\n_type: int_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< File descriptor for the serial port.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###struct termios oldoptions\n\n<!--\n_name: oldoptions_\n_type: struct termios_\n_access: protected_\n_version_started: 006_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n< This is the set of (current) terminal attributes to be reused when changing a subset of options.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}