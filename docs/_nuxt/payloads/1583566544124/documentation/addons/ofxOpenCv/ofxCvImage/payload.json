{"data":[{"page":{"entry":{"name":"ofxCvImage","filename":"ofxCvImage.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/addons/ofxOpenCv/ofxCvImage.markdown","path":"/documentation/addons/ofxOpenCv/ofxCvImage","route":"/documentation/addons/ofxOpenCv/ofxCvImage.markdown","dir":"../ofSite/documentation/addons/ofxOpenCv","ext":"markdown","type":"page","id":1855,"parent":1834,"breadcrumbs":[1834,1743,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>This is the base class for all the ofxOpenCV image types: ofxCvShortImage, ofxCvColorImage, ofxCvFloatImage, ofxCvGrayscaleImage. It's made to provide interoperability between the core OF imaging types, ofImage and ofTexture, and OpenCv.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"allocate(w, h)","name":"allocate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Allocates the image with the w, h passed in. This must be done before the pixels of the image are created.</p>\n"},{"syntax":"allocatePixels(w, h)","name":"allocatePixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"allocateTexture()","name":"allocateTexture","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"blur(value = 3)","name":"blur","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> value<span class=\"token operator\">=</span><span class=\"token number\">3</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Blurs the image</p>\n<p>![Blurring] (../blur.png &quot;Blurring an image original on Left&quot;)</p>\n"},{"syntax":"blurGaussian(value = 3)","name":"blurGaussian","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> value<span class=\"token operator\">=</span><span class=\"token number\">3</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Blurs the using Gaussian blurring. Gaussian blurring is typically to reduce image noise and reduce detail.</p>\n"},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Clears the pixel data of the image. The image must be allocated again with a call to allocate() before it can be used.</p>\n"},{"syntax":"contrastStretch()","name":"contrastStretch","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This increases the contrast of the image remapping the brightest points in the image to 255 and the darkest points in the image to 0.</p>\n"},{"syntax":"convertToRange(min, max)","name":"convertToRange","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Maps the pixels of an image to the min and max range passed in.</p>\n<pre><code>\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>grabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will leave unaltered</span>\nsecond <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// change it</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">convertToRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super low contrast</span>\n\n</code></pre>\n<p><img src=\"../convertToRangeColor.png\" alt=\"Image convert to range\" title=\"Converting the range of an image\"></p>\n"},{"syntax":"countNonZeroInRegion(x, y, w, h)","name":"countNonZeroInRegion","returns":"int","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the number of non-zero pixels in an image.</p>\n"},{"syntax":"dilate()","name":"dilate","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>![Dilating] (../dilate.png &quot;Dilating an image, original on Left&quot;)</p>\n"},{"syntax":"draw(x, y)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draw the image at the x,y.</p>\n"},{"syntax":"draw(x, y, w, h)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draw the image at the x,y with the w,h.</p>\n"},{"syntax":"draw(&point)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPoint <span class=\"token operator\">&amp;</span>point","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draw the image at the ofPoint passed in.</p>\n"},{"syntax":"draw(&rect)","name":"draw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draw the image into the ofRectangle passed in.</p>\n"},{"syntax":"drawBlobIntoMe(&blob, color)","name":"drawBlobIntoMe","returns":"void","returns_description":null,"parameters":"ofxCvBlob <span class=\"token operator\">&amp;</span>blob<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> color","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draw the outline of an ofxCvblob into the ofxCvImage.</p>\n"},{"syntax":"drawROI(x, y)","name":"drawROI","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draw just the Region of Interest of the image at the x,y.</p>\n"},{"syntax":"drawROI(x, y, w, h)","name":"drawROI","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Draw just the Region of Interest of the image into the x,y with the w,h passed in.</p>\n"},{"syntax":"erode()","name":"erode","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Erodes the image.</p>\n<p>![Eroding] (../erode.png &quot;Eroding an image, original on Left&quot;)</p>\n"},{"syntax":"flagImageChanged()","name":"flagImageChanged","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Marks the image as changed so that the ofTexture can be updated, if the image contains one.</p>\n"},{"syntax":"getCv8BitsImage()","name":"getCv8BitsImage","returns":"int *","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getCv8BitsRoiImage()","name":"getCv8BitsRoiImage","returns":"int *","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getCvImage()","name":"getCvImage","returns":"int *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns a raw pointer to the OpenCV IplImage.</p>\n"},{"syntax":"getCvImage()","name":"getCvImage","returns":"const int *","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getHeight()","name":"getHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the height of the image in pixels.</p>\n"},{"syntax":"getIntersectionROI(&rec1, &rec2)","name":"getIntersectionROI","returns":"ofRectangle","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rec1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rec2","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getPixels()","name":"getPixels","returns":"ofPixels &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns a raw pointer to the pixel data within the image.</p>\n"},{"syntax":"getPixels()","name":"getPixels","returns":"const ofPixels &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getROI()","name":"getROI","returns":"ofRectangle","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the region of interest in an ofxCvImage.</p>\n"},{"syntax":"getRoiPixels()","name":"getRoiPixels","returns":"ofPixels &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns a raw pointer to the pixel data within the Region of Interest in the ofxCvImage.</p>\n"},{"syntax":"getRoiPixels()","name":"getRoiPixels","returns":"const ofPixels &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTexture()","name":"getTexture","returns":"ofTexture &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getTexture()","name":"getTexture","returns":"const ofTexture &","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getWidth()","name":"getWidth","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns the width of the image in pixels.</p>\n"},{"syntax":"invert()","name":"invert","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Flip the pixel values of the image.</p>\n<p>![Inverting an image] (../invert.png &quot;Original on Left&quot;)</p>\n"},{"syntax":"isUsingTexture()","name":"isUsingTexture","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"matchingROI(&rec1, &rec2)","name":"matchingROI","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rec1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rec2","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Returns whether the Region of Interests match position and dimension or not.</p>\n"},{"syntax":"mirror(bFlipVertically, bFlipHorizontally)","name":"mirror","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bFlipVertically<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bFlipHorizontally","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Flips the image horizontally and/or vertically.</p>\n"},{"syntax":"ofxCvImage()","name":"ofxCvImage","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Constructor.</p>\n"},{"syntax":"operator&=(&mom)","name":"operator&=","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Binary &amp; (Logical AND http://en.wikipedia.org/wiki/Bitwise_operation) the pixel data of the right hand side image from the current image:</p>\n<pre><code>cvPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncvPuppy <span class=\"token operator\">=</span> puppyImg<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// copy pixels from a loaded image</span>\n\nandPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nandPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make the AND image red</span>\nandPuppy <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">=</span> cvPuppy<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will &amp;amp; all the bits</span>\n</code></pre>\n<p><img src=\"../ANDoperation.png\" alt=\"puppy AND\"></p>\n"},{"syntax":"operator*=(&mom)","name":"operator*=","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Multiplies the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">*</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvImage instances</span>\n</code></pre>\n"},{"syntax":"operator+=(value)","name":"operator+=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">+</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvImage instances</span>\n</code></pre>\n"},{"syntax":"operator+=(&mom)","name":"operator+=","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">+</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvImage instances</span>\n</code></pre>\n"},{"syntax":"operator-=(value)","name":"operator-=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Subtracts the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">-</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvImage instances</span>\n</code></pre>\n"},{"syntax":"operator-=(&mom)","name":"operator-=","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Subtracts the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">-</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvImage instances</span>\n</code></pre>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy a ofxCvGrayscaleImage into the current ofxCvImage.</p>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvColorImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy the image data of an ofxCvColorImage into the ofxCvImage instance.</p>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvFloatImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy the image data ofxCvFloatImage into the ofxCvImage instance.</p>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvShortImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy the image data of a ofxCvShortImage into the ofxCvImage instance.</p>\n"},{"syntax":"operator=(*mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>mom","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rangeMap(*img, min1, max1, min2, max2)","name":"rangeMap","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>img<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> min1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> min2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max2","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"rangeMap(*mom, *kid, min1, max1, min2, max2)","name":"rangeMap","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>mom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>kid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> min1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> min2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max2","access":"protected","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"remap(*mapX, *mapY)","name":"remap","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>mapX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>mapY","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This uses a generic geometrical transformation to remap one image to another. This is particularly useful when doing camera calibration.</p>\n"},{"syntax":"resetAnchor()","name":"resetAnchor","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Reset the anchor point of the image, i.e. the center point for rotations,</p>\n"},{"syntax":"resetImageROI(*img)","name":"resetImageROI","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>img","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"resetROI()","name":"resetROI","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Removes the region of interest from an ofxCvImage.</p>\n"},{"syntax":"resize(w, h)","name":"resize","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Resizes the image to the w.h passed in.</p>\n"},{"syntax":"rotate(angle, centerX, centerY)","name":"rotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> centerX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> centerY","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Rotates the image. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.</p>\n"},{"syntax":"scale(scaleX, sclaeY)","name":"scale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> scaleX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sclaeY","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Scales the image to the scaleX, scaleY passed in. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.</p>\n"},{"syntax":"scaleIntoMe(&mom, interpolationMethod)","name":"scaleIntoMe","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> interpolationMethod","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Scales the image passed in to be the size of the current image,</p>\n<pre><code>\nofxCvImage first<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofxCvImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">scaleIntoMe</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// first is now 320,240</span>\n\n</code></pre>\n"},{"syntax":"set(value)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. the values are 1.0 to 255.0.</p>\n"},{"syntax":"setAnchorPercent(xPct, yPct)","name":"setAnchorPercent","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> xPct<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> yPct","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set the anchor point of the image, i.e. the center point for rotations, at the percentage positions passed in.</p>\n"},{"syntax":"setAnchorPoint(x, y)","name":"setAnchorPoint","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set the anchor point of the image, i.e. the center point for rotations, at the x,y passed in.</p>\n"},{"syntax":"setFromPixels(*_pixels, w, h)","name":"setFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in a ofxCvImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image.</p>\n"},{"syntax":"setFromPixels(&pixels)","name":"setFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPixels <span class=\"token operator\">&amp;</span>pixels","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in a ofxCvImage from an ofPixels reference.</p>\n"},{"syntax":"setImageROI(*img, &rect)","name":"setImageROI","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>img<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setROI(x, y, w, h)","name":"setROI","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the region of interest on the image.  Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n"},{"syntax":"setROI(&rect)","name":"setROI","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofRectangle <span class=\"token operator\">&amp;</span>rect","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets the region of interest on the image.  Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n"},{"syntax":"setRoiFromPixels(*_pixels, w, h)","name":"setRoiFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set the Region Of Interest using a pointer to an unsigned char array and a w,h to define the area of the ROI</p>\n"},{"syntax":"setRoiFromPixels(&pixels)","name":"setRoiFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPixels <span class=\"token operator\">&amp;</span>pixels","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set the Region Of Interest using an ofPixels reference The w,h of the ofPixels will define the area of the ROI</p>\n"},{"syntax":"setUseTexture(bUse)","name":"setUseTexture","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bUse","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Sets whether the image is using a texture or not. If the image is not using a texture then calls to getTextureReference() will return null and the image cannot be drawn. This is handy if you know that you won't be displaying the image to the screen.</p>\n"},{"syntax":"swapTemp()","name":"swapTemp","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"transform(angle, centerX, centerY, scaleX, scaleY, moveX, moveY)","name":"transform","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> centerX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> centerY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> scaleX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> scaleY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> moveX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> moveY","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Transforms the image with the angle, scaling, and transformation passed in. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.</p>\n"},{"syntax":"translate(x, y)","name":"translate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Moves the image by the x,y amount passed in. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.</p>\n"},{"syntax":"undistort(radialDistX, radialDistY, tangentDistX, tangentDistY, focalX, focalY, centerX, centerY)","name":"undistort","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radialDistX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radialDistY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tangentDistX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tangentDistY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> focalX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> focalY<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> centerX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> centerY","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>/**</p>\n<ul>\n<li>undistort Usage Example:</li>\n<li>undistort( 0, 1, 0, 0, 200, 200, cwidth/2, cheight/2 );</li>\n<li>creates kind of an old TV monitor distortion.\n*/</li>\n</ul>\n","desc":"<p>The function cvUnDistortOnce corrects camera lens distortion for the image. It requires that you have an estimate of the camera distortion from a call to cvCalibrateCamera() or other calibration method.</p>\n"},{"syntax":"updateTexture()","name":"updateTexture","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Updates the texture of the ofxCvImage if it contains one. This is handy after you've changed the image pixel data and want it to be uploaded to the texture on the graphics card.</p>\n"},{"syntax":"warpIntoMe(&mom, src = 4, dst = 4)","name":"warpIntoMe","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofPoint <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> src<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofPoint <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> dst<span class=\"token operator\">=</span><span class=\"token number\">4</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This warps the image perspective into the ofxCvImage using two sets four points passed in:</p>\n<pre><code>ofPoint<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> src<span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nofPoint<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> dst<span class=\"token punctuation\">;</span>\ndst<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndst<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">310</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndst<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">310</span><span class=\"token punctuation\">,</span> <span class=\"token number\">230</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndst<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">230</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nimage<span class=\"token punctuation\">.</span><span class=\"token function\">warpIntoMe</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>![Warping] (../warpPerspective.png &quot;Four corners for warping&quot;)</p>\n"},{"syntax":"warpPerspective(&A, &B, &C, &D)","name":"warpPerspective","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPoint <span class=\"token operator\">&amp;</span>A<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofPoint <span class=\"token operator\">&amp;</span>B<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofPoint <span class=\"token operator\">&amp;</span>C<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofPoint <span class=\"token operator\">&amp;</span>D","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This warps the image perspective to the four points passed in:</p>\n<p>![Warping] (../warpPerspective.png &quot;Four corners for warping&quot;)</p>\n"},{"syntax":"~ofxCvImage()","name":"~ofxCvImage","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Destructor.</p>\n"},{"name":"anchor","type":"ofPoint","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bAllocated","type":"bool","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bAnchorIsPct","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bPixelsDirty","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bRoiPixelsDirty","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bTextureDirty","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"bUseTexture","type":"bool","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"cvImage","type":"IplImage *","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"cvImageTemp","type":"IplImage *","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"height","type":"int","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"iplchannels","type":"int","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"ipldepth","type":"int","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"pixels","type":"ofPixels","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"roiPixels","type":"ofPixels","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"tex","type":"ofTexture","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"width","type":"int","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofxCvImage</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>This is the base class for all the ofxOpenCV image types: ofxCvShortImage, ofxCvColorImage, ofxCvFloatImage, ofxCvGrayscaleImage. It's made to provide interoperability between the core OF imaging types, ofImage and ofTexture, and OpenCv.</p>\n<p>##Methods</p>\n<p>###void allocate(w, h)</p>\n<p>&lt;!--\n<em>syntax: allocate(w, h)</em>\n<em>name: allocate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Allocates the image with the w, h passed in. This must be done before the pixels of the image are created.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void allocatePixels(w, h)</p>\n<p>&lt;!--\n<em>syntax: allocatePixels(w, h)</em>\n<em>name: allocatePixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int w, int h</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void allocateTexture()</p>\n<p>&lt;!--\n<em>syntax: allocateTexture()</em>\n<em>name: allocateTexture</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void blur(value = 3)</p>\n<p>&lt;!--\n<em>syntax: blur(value = 3)</em>\n<em>name: blur</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int value=3</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Blurs the image</p>\n<p>![Blurring] (../blur.png &quot;Blurring an image original on Left&quot;)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void blurGaussian(value = 3)</p>\n<p>&lt;!--\n<em>syntax: blurGaussian(value = 3)</em>\n<em>name: blurGaussian</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int value=3</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Blurs the using Gaussian blurring. Gaussian blurring is typically to reduce image noise and reduce detail.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clear()</p>\n<p>&lt;!--\n<em>syntax: clear()</em>\n<em>name: clear</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Clears the pixel data of the image. The image must be allocated again with a call to allocate() before it can be used.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void contrastStretch()</p>\n<p>&lt;!--\n<em>syntax: contrastStretch()</em>\n<em>name: contrastStretch</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This increases the contrast of the image remapping the brightest points in the image to 255 and the darkest points in the image to 0.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void convertToRange(min, max)</p>\n<p>&lt;!--\n<em>syntax: convertToRange(min, max)</em>\n<em>name: convertToRange</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float min, float max</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Maps the pixels of an image to the min and max range passed in.</p>\n<pre><code>\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>grabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will leave unaltered</span>\nsecond <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// change it</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">convertToRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super low contrast</span>\n\n</code></pre>\n<p><img src=\"../convertToRangeColor.png\" alt=\"Image convert to range\" title=\"Converting the range of an image\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int countNonZeroInRegion(x, y, w, h)</p>\n<p>&lt;!--\n<em>syntax: countNonZeroInRegion(x, y, w, h)</em>\n<em>name: countNonZeroInRegion</em>\n<em>returns: int</em>\n_returns_description: _\n<em>parameters: int x, int y, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the number of non-zero pixels in an image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void dilate()</p>\n<p>&lt;!--\n<em>syntax: dilate()</em>\n<em>name: dilate</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>![Dilating] (../dilate.png &quot;Dilating an image, original on Left&quot;)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(x, y)</p>\n<p>&lt;!--\n<em>syntax: draw(x, y)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draw the image at the x,y.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(x, y, w, h)</p>\n<p>&lt;!--\n<em>syntax: draw(x, y, w, h)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draw the image at the x,y with the w,h.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;point)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;point)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofPoint &amp;point</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draw the image at the ofPoint passed in.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(&amp;rect)</p>\n<p>&lt;!--\n<em>syntax: draw(&amp;rect)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draw the image into the ofRectangle passed in.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawBlobIntoMe(&amp;blob, color)</p>\n<p>&lt;!--\n<em>syntax: drawBlobIntoMe(&amp;blob, color)</em>\n<em>name: drawBlobIntoMe</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvBlob &amp;blob, int color</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draw the outline of an ofxCvblob into the ofxCvImage.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawROI(x, y)</p>\n<p>&lt;!--\n<em>syntax: drawROI(x, y)</em>\n<em>name: drawROI</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draw just the Region of Interest of the image at the x,y.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawROI(x, y, w, h)</p>\n<p>&lt;!--\n<em>syntax: drawROI(x, y, w, h)</em>\n<em>name: drawROI</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float w, float h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Draw just the Region of Interest of the image into the x,y with the w,h passed in.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void erode()</p>\n<p>&lt;!--\n<em>syntax: erode()</em>\n<em>name: erode</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Erodes the image.</p>\n<p>![Eroding] (../erode.png &quot;Eroding an image, original on Left&quot;)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void flagImageChanged()</p>\n<p>&lt;!--\n<em>syntax: flagImageChanged()</em>\n<em>name: flagImageChanged</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Marks the image as changed so that the ofTexture can be updated, if the image contains one.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int * getCv8BitsImage()</p>\n<p>&lt;!--\n<em>syntax: getCv8BitsImage()</em>\n<em>name: getCv8BitsImage</em>\n<em>returns: int *</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int * getCv8BitsRoiImage()</p>\n<p>&lt;!--\n<em>syntax: getCv8BitsRoiImage()</em>\n<em>name: getCv8BitsRoiImage</em>\n<em>returns: int *</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int * getCvImage()</p>\n<p>&lt;!--\n<em>syntax: getCvImage()</em>\n<em>name: getCvImage</em>\n<em>returns: int *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns a raw pointer to the OpenCV IplImage.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const int * getCvImage()</p>\n<p>&lt;!--\n<em>syntax: getCvImage()</em>\n<em>name: getCvImage</em>\n<em>returns: const int *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHeight()</p>\n<p>&lt;!--\n<em>syntax: getHeight()</em>\n<em>name: getHeight</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the height of the image in pixels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle getIntersectionROI(&amp;rec1, &amp;rec2)</p>\n<p>&lt;!--\n<em>syntax: getIntersectionROI(&amp;rec1, &amp;rec2)</em>\n<em>name: getIntersectionROI</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rec1, const ofRectangle &amp;rec2</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels &amp; getPixels()</p>\n<p>&lt;!--\n<em>syntax: getPixels()</em>\n<em>name: getPixels</em>\n<em>returns: ofPixels &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns a raw pointer to the pixel data within the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofPixels &amp; getPixels()</p>\n<p>&lt;!--\n<em>syntax: getPixels()</em>\n<em>name: getPixels</em>\n<em>returns: const ofPixels &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofRectangle getROI()</p>\n<p>&lt;!--\n<em>syntax: getROI()</em>\n<em>name: getROI</em>\n<em>returns: ofRectangle</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the region of interest in an ofxCvImage.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels &amp; getRoiPixels()</p>\n<p>&lt;!--\n<em>syntax: getRoiPixels()</em>\n<em>name: getRoiPixels</em>\n<em>returns: ofPixels &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns a raw pointer to the pixel data within the Region of Interest in the ofxCvImage.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofPixels &amp; getRoiPixels()</p>\n<p>&lt;!--\n<em>syntax: getRoiPixels()</em>\n<em>name: getRoiPixels</em>\n<em>returns: const ofPixels &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofTexture &amp; getTexture()</p>\n<p>&lt;!--\n<em>syntax: getTexture()</em>\n<em>name: getTexture</em>\n<em>returns: ofTexture &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofTexture &amp; getTexture()</p>\n<p>&lt;!--\n<em>syntax: getTexture()</em>\n<em>name: getTexture</em>\n<em>returns: const ofTexture &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getWidth()</p>\n<p>&lt;!--\n<em>syntax: getWidth()</em>\n<em>name: getWidth</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns the width of the image in pixels.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void invert()</p>\n<p>&lt;!--\n<em>syntax: invert()</em>\n<em>name: invert</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Flip the pixel values of the image.</p>\n<p>![Inverting an image] (../invert.png &quot;Original on Left&quot;)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isUsingTexture()</p>\n<p>&lt;!--\n<em>syntax: isUsingTexture()</em>\n<em>name: isUsingTexture</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool matchingROI(&amp;rec1, &amp;rec2)</p>\n<p>&lt;!--\n<em>syntax: matchingROI(&amp;rec1, &amp;rec2)</em>\n<em>name: matchingROI</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rec1, const ofRectangle &amp;rec2</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns whether the Region of Interests match position and dimension or not.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void mirror(bFlipVertically, bFlipHorizontally)</p>\n<p>&lt;!--\n<em>syntax: mirror(bFlipVertically, bFlipHorizontally)</em>\n<em>name: mirror</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bFlipVertically, bool bFlipHorizontally</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Flips the image horizontally and/or vertically.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofxCvImage()</h3>\n<p>&lt;!--\n<em>syntax: ofxCvImage()</em>\n<em>name: ofxCvImage</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Constructor.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator&amp;=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator&amp;=(&amp;mom)</em>\n<em>name: operator&amp;=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Binary &amp; (Logical AND http://en.wikipedia.org/wiki/Bitwise_operation) the pixel data of the right hand side image from the current image:</p>\n<pre><code>cvPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncvPuppy <span class=\"token operator\">=</span> puppyImg<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// copy pixels from a loaded image</span>\n\nandPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nandPuppy<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make the AND image red</span>\nandPuppy <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token operator\">=</span> cvPuppy<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will &amp;amp; all the bits</span>\n</code></pre>\n<p><img src=\"../ANDoperation.png\" alt=\"puppy AND\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator*=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator*=(&amp;mom)</em>\n<em>name: operator*=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Multiplies the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">*</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvImage instances</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator+=(value)</p>\n<p>&lt;!--\n<em>syntax: operator+=(value)</em>\n<em>name: operator+=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">+</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvImage instances</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator+=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator+=(&amp;mom)</em>\n<em>name: operator+=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">+</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvImage instances</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator-=(value)</p>\n<p>&lt;!--\n<em>syntax: operator-=(value)</em>\n<em>name: operator-=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Subtracts the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">-</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvImage instances</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator-=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator-=(&amp;mom)</em>\n<em>name: operator-=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Subtracts the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">-</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvImage instances</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofxCvGrayscaleImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy a ofxCvGrayscaleImage into the current ofxCvImage.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofxCvColorImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy the image data of an ofxCvColorImage into the ofxCvImage instance.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofxCvFloatImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy the image data ofxCvFloatImage into the ofxCvImage instance.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofxCvShortImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy the image data of a ofxCvShortImage into the ofxCvImage instance.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(*mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(*mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const int *mom</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rangeMap(*img, min1, max1, min2, max2)</p>\n<p>&lt;!--\n<em>syntax: rangeMap(*img, min1, max1, min2, max2)</em>\n<em>name: rangeMap</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int *img, float min1, float max1, float min2, float max2</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rangeMap(*mom, *kid, min1, max1, min2, max2)</p>\n<p>&lt;!--\n<em>syntax: rangeMap(*mom, *kid, min1, max1, min2, max2)</em>\n<em>name: rangeMap</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int *mom, int *kid, float min1, float max1, float min2, float max2</em>\n<em>access: protected</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void remap(*mapX, *mapY)</p>\n<p>&lt;!--\n<em>syntax: remap(*mapX, *mapY)</em>\n<em>name: remap</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int *mapX, int *mapY</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This uses a generic geometrical transformation to remap one image to another. This is particularly useful when doing camera calibration.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resetAnchor()</p>\n<p>&lt;!--\n<em>syntax: resetAnchor()</em>\n<em>name: resetAnchor</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Reset the anchor point of the image, i.e. the center point for rotations,</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resetImageROI(*img)</p>\n<p>&lt;!--\n<em>syntax: resetImageROI(*img)</em>\n<em>name: resetImageROI</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int *img</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resetROI()</p>\n<p>&lt;!--\n<em>syntax: resetROI()</em>\n<em>name: resetROI</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Removes the region of interest from an ofxCvImage.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resize(w, h)</p>\n<p>&lt;!--\n<em>syntax: resize(w, h)</em>\n<em>name: resize</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Resizes the image to the w.h passed in.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotate(angle, centerX, centerY)</p>\n<p>&lt;!--\n<em>syntax: rotate(angle, centerX, centerY)</em>\n<em>name: rotate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float angle, float centerX, float centerY</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Rotates the image. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scale(scaleX, sclaeY)</p>\n<p>&lt;!--\n<em>syntax: scale(scaleX, sclaeY)</em>\n<em>name: scale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float scaleX, float sclaeY</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Scales the image to the scaleX, scaleY passed in. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleIntoMe(&amp;mom, interpolationMethod)</p>\n<p>&lt;!--\n<em>syntax: scaleIntoMe(&amp;mom, interpolationMethod)</em>\n<em>name: scaleIntoMe</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvImage &amp;mom, int interpolationMethod</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Scales the image passed in to be the size of the current image,</p>\n<pre><code>\nofxCvImage first<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofxCvImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">scaleIntoMe</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// first is now 320,240</span>\n\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(value)</p>\n<p>&lt;!--\n<em>syntax: set(value)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. the values are 1.0 to 255.0.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setAnchorPercent(xPct, yPct)</p>\n<p>&lt;!--\n<em>syntax: setAnchorPercent(xPct, yPct)</em>\n<em>name: setAnchorPercent</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float xPct, float yPct</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set the anchor point of the image, i.e. the center point for rotations, at the percentage positions passed in.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setAnchorPoint(x, y)</p>\n<p>&lt;!--\n<em>syntax: setAnchorPoint(x, y)</em>\n<em>name: setAnchorPoint</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set the anchor point of the image, i.e. the center point for rotations, at the x,y passed in.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromPixels(*_pixels, w, h)</p>\n<p>&lt;!--\n_syntax: setFromPixels(*<em>pixels, w, h)</em>\n<em>name: setFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: const unsigned char *<em>pixels, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in a ofxCvImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromPixels(&amp;pixels)</p>\n<p>&lt;!--\n<em>syntax: setFromPixels(&amp;pixels)</em>\n<em>name: setFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofPixels &amp;pixels</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in a ofxCvImage from an ofPixels reference.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setImageROI(*img, &amp;rect)</p>\n<p>&lt;!--\n<em>syntax: setImageROI(*img, &amp;rect)</em>\n<em>name: setImageROI</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int *img, const ofRectangle &amp;rect</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setROI(x, y, w, h)</p>\n<p>&lt;!--\n<em>syntax: setROI(x, y, w, h)</em>\n<em>name: setROI</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int x, int y, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the region of interest on the image.  Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setROI(&amp;rect)</p>\n<p>&lt;!--\n<em>syntax: setROI(&amp;rect)</em>\n<em>name: setROI</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofRectangle &amp;rect</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets the region of interest on the image.  Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setRoiFromPixels(*_pixels, w, h)</p>\n<p>&lt;!--\n_syntax: setRoiFromPixels(*<em>pixels, w, h)</em>\n<em>name: setRoiFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: const unsigned char *<em>pixels, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set the Region Of Interest using a pointer to an unsigned char array and a w,h to define the area of the ROI</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setRoiFromPixels(&amp;pixels)</p>\n<p>&lt;!--\n<em>syntax: setRoiFromPixels(&amp;pixels)</em>\n<em>name: setRoiFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofPixels &amp;pixels</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set the Region Of Interest using an ofPixels reference The w,h of the ofPixels will define the area of the ROI</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setUseTexture(bUse)</p>\n<p>&lt;!--\n<em>syntax: setUseTexture(bUse)</em>\n<em>name: setUseTexture</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bUse</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Sets whether the image is using a texture or not. If the image is not using a texture then calls to getTextureReference() will return null and the image cannot be drawn. This is handy if you know that you won't be displaying the image to the screen.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void swapTemp()</p>\n<p>&lt;!--\n<em>syntax: swapTemp()</em>\n<em>name: swapTemp</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void transform(angle, centerX, centerY, scaleX, scaleY, moveX, moveY)</p>\n<p>&lt;!--\n<em>syntax: transform(angle, centerX, centerY, scaleX, scaleY, moveX, moveY)</em>\n<em>name: transform</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float angle, float centerX, float centerY, float scaleX, float scaleY, float moveX, float moveY</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Transforms the image with the angle, scaling, and transformation passed in. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void translate(x, y)</p>\n<p>&lt;!--\n<em>syntax: translate(x, y)</em>\n<em>name: translate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Moves the image by the x,y amount passed in. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void undistort(radialDistX, radialDistY, tangentDistX, tangentDistY, focalX, focalY, centerX, centerY)</p>\n<p>&lt;!--\n<em>syntax: undistort(radialDistX, radialDistY, tangentDistX, tangentDistY, focalX, focalY, centerX, centerY)</em>\n<em>name: undistort</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radialDistX, float radialDistY, float tangentDistX, float tangentDistY, float focalX, float focalY, float centerX, float centerY</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>/**</p>\n<ul>\n<li>undistort Usage Example:</li>\n<li>undistort( 0, 1, 0, 0, 200, 200, cwidth/2, cheight/2 );</li>\n<li>creates kind of an old TV monitor distortion.\n*/</li>\n</ul>\n<p>_description: _</p>\n<p>The function cvUnDistortOnce corrects camera lens distortion for the image. It requires that you have an estimate of the camera distortion from a call to cvCalibrateCamera() or other calibration method.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateTexture()</p>\n<p>&lt;!--\n<em>syntax: updateTexture()</em>\n<em>name: updateTexture</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Updates the texture of the ofxCvImage if it contains one. This is handy after you've changed the image pixel data and want it to be uploaded to the texture on the graphics card.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void warpIntoMe(&amp;mom, src = 4, dst = 4)</p>\n<p>&lt;!--\n<em>syntax: warpIntoMe(&amp;mom, src = 4, dst = 4)</em>\n<em>name: warpIntoMe</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvImage &amp;mom, const ofPoint [4] src=4, const ofPoint [4] dst=4</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This warps the image perspective into the ofxCvImage using two sets four points passed in:</p>\n<pre><code>ofPoint<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> src<span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsrc<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nofPoint<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span> dst<span class=\"token punctuation\">;</span>\ndst<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndst<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">310</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndst<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">310</span><span class=\"token punctuation\">,</span> <span class=\"token number\">230</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndst<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">230</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nimage<span class=\"token punctuation\">.</span><span class=\"token function\">warpIntoMe</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>![Warping] (../warpPerspective.png &quot;Four corners for warping&quot;)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void warpPerspective(&amp;A, &amp;B, &amp;C, &amp;D)</p>\n<p>&lt;!--\n<em>syntax: warpPerspective(&amp;A, &amp;B, &amp;C, &amp;D)</em>\n<em>name: warpPerspective</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofPoint &amp;A, const ofPoint &amp;B, const ofPoint &amp;C, const ofPoint &amp;D</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This warps the image perspective to the four points passed in:</p>\n<p>![Warping] (../warpPerspective.png &quot;Four corners for warping&quot;)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofxCvImage()</h3>\n<p>&lt;!--\n<em>syntax: ~ofxCvImage()</em>\n<em>name: ~ofxCvImage</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Destructor.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###ofPoint anchor</p>\n<p>&lt;!--\n<em>name: anchor</em>\n<em>type: ofPoint</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bAllocated</p>\n<p>&lt;!--\n<em>name: bAllocated</em>\n<em>type: bool</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bAnchorIsPct</p>\n<p>&lt;!--\n<em>name: bAnchorIsPct</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bPixelsDirty</p>\n<p>&lt;!--\n<em>name: bPixelsDirty</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bRoiPixelsDirty</p>\n<p>&lt;!--\n<em>name: bRoiPixelsDirty</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bTextureDirty</p>\n<p>&lt;!--\n<em>name: bTextureDirty</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bUseTexture</p>\n<p>&lt;!--\n<em>name: bUseTexture</em>\n<em>type: bool</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###IplImage * cvImage</p>\n<p>&lt;!--\n<em>name: cvImage</em>\n<em>type: IplImage *</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###IplImage * cvImageTemp</p>\n<p>&lt;!--\n<em>name: cvImageTemp</em>\n<em>type: IplImage *</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int height</p>\n<p>&lt;!--\n<em>name: height</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int iplchannels</p>\n<p>&lt;!--\n<em>name: iplchannels</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int ipldepth</p>\n<p>&lt;!--\n<em>name: ipldepth</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels pixels</p>\n<p>&lt;!--\n<em>name: pixels</em>\n<em>type: ofPixels</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPixels roiPixels</p>\n<p>&lt;!--\n<em>name: roiPixels</em>\n<em>type: ofPixels</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofTexture tex</p>\n<p>&lt;!--\n<em>name: tex</em>\n<em>type: ofTexture</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int width</p>\n<p>&lt;!--\n<em>name: width</em>\n<em>type: int</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofxCvImage\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nThis is the base class for all the ofxOpenCV image types: ofxCvShortImage, ofxCvColorImage, ofxCvFloatImage, ofxCvGrayscaleImage. It's made to provide interoperability between the core OF imaging types, ofImage and ofTexture, and OpenCv.\n\n\n\n\n\n##Methods\n\n\n\n###void allocate(w, h)\n\n<!--\n_syntax: allocate(w, h)_\n_name: allocate_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAllocates the image with the w, h passed in. This must be done before the pixels of the image are created.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void allocatePixels(w, h)\n\n<!--\n_syntax: allocatePixels(w, h)_\n_name: allocatePixels_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void allocateTexture()\n\n<!--\n_syntax: allocateTexture()_\n_name: allocateTexture_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void blur(value = 3)\n\n<!--\n_syntax: blur(value = 3)_\n_name: blur_\n_returns: void_\n_returns_description: _\n_parameters: int value=3_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nBlurs the image\n\n![Blurring] (../blur.png \"Blurring an image original on Left\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void blurGaussian(value = 3)\n\n<!--\n_syntax: blurGaussian(value = 3)_\n_name: blurGaussian_\n_returns: void_\n_returns_description: _\n_parameters: int value=3_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nBlurs the using Gaussian blurring. Gaussian blurring is typically to reduce image noise and reduce detail.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nClears the pixel data of the image. The image must be allocated again with a call to allocate() before it can be used.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void contrastStretch()\n\n<!--\n_syntax: contrastStretch()_\n_name: contrastStretch_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis increases the contrast of the image remapping the brightest points in the image to 255 and the darkest points in the image to 0.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertToRange(min, max)\n\n<!--\n_syntax: convertToRange(min, max)_\n_name: convertToRange_\n_returns: void_\n_returns_description: _\n_parameters: float min, float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMaps the pixels of an image to the min and max range passed in.\n\n~~~~{.cpp}\n\ncolors.setFromPixels(grabber.getPixels());\n\nfirst = colors; // will leave unaltered\nsecond = colors; // change it\nsecond.convertToRange(100, 140); // super low contrast\n\n~~~~\n\n![Image convert to range](../convertToRangeColor.png \"Converting the range of an image\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int countNonZeroInRegion(x, y, w, h)\n\n<!--\n_syntax: countNonZeroInRegion(x, y, w, h)_\n_name: countNonZeroInRegion_\n_returns: int_\n_returns_description: _\n_parameters: int x, int y, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the number of non-zero pixels in an image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void dilate()\n\n<!--\n_syntax: dilate()_\n_name: dilate_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n![Dilating] (../dilate.png \"Dilating an image, original on Left\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(x, y)\n\n<!--\n_syntax: draw(x, y)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraw the image at the x,y.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(x, y, w, h)\n\n<!--\n_syntax: draw(x, y, w, h)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraw the image at the x,y with the w,h.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&point)\n\n<!--\n_syntax: draw(&point)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofPoint &point_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraw the image at the ofPoint passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(&rect)\n\n<!--\n_syntax: draw(&rect)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraw the image into the ofRectangle passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawBlobIntoMe(&blob, color)\n\n<!--\n_syntax: drawBlobIntoMe(&blob, color)_\n_name: drawBlobIntoMe_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvBlob &blob, int color_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraw the outline of an ofxCvblob into the ofxCvImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawROI(x, y)\n\n<!--\n_syntax: drawROI(x, y)_\n_name: drawROI_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraw just the Region of Interest of the image at the x,y.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawROI(x, y, w, h)\n\n<!--\n_syntax: drawROI(x, y, w, h)_\n_name: drawROI_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float w, float h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDraw just the Region of Interest of the image into the x,y with the w,h passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void erode()\n\n<!--\n_syntax: erode()_\n_name: erode_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nErodes the image.\n\n![Eroding] (../erode.png \"Eroding an image, original on Left\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void flagImageChanged()\n\n<!--\n_syntax: flagImageChanged()_\n_name: flagImageChanged_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMarks the image as changed so that the ofTexture can be updated, if the image contains one.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getCv8BitsImage()\n\n<!--\n_syntax: getCv8BitsImage()_\n_name: getCv8BitsImage_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getCv8BitsRoiImage()\n\n<!--\n_syntax: getCv8BitsRoiImage()_\n_name: getCv8BitsRoiImage_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int * getCvImage()\n\n<!--\n_syntax: getCvImage()_\n_name: getCvImage_\n_returns: int *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns a raw pointer to the OpenCV IplImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const int * getCvImage()\n\n<!--\n_syntax: getCvImage()_\n_name: getCvImage_\n_returns: const int *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHeight()\n\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the height of the image in pixels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle getIntersectionROI(&rec1, &rec2)\n\n<!--\n_syntax: getIntersectionROI(&rec1, &rec2)_\n_name: getIntersectionROI_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: const ofRectangle &rec1, const ofRectangle &rec2_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels & getPixels()\n\n<!--\n_syntax: getPixels()_\n_name: getPixels_\n_returns: ofPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns a raw pointer to the pixel data within the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofPixels & getPixels()\n\n<!--\n_syntax: getPixels()_\n_name: getPixels_\n_returns: const ofPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofRectangle getROI()\n\n<!--\n_syntax: getROI()_\n_name: getROI_\n_returns: ofRectangle_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the region of interest in an ofxCvImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels & getRoiPixels()\n\n<!--\n_syntax: getRoiPixels()_\n_name: getRoiPixels_\n_returns: ofPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns a raw pointer to the pixel data within the Region of Interest in the ofxCvImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofPixels & getRoiPixels()\n\n<!--\n_syntax: getRoiPixels()_\n_name: getRoiPixels_\n_returns: const ofPixels &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTexture & getTexture()\n\n<!--\n_syntax: getTexture()_\n_name: getTexture_\n_returns: ofTexture &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofTexture & getTexture()\n\n<!--\n_syntax: getTexture()_\n_name: getTexture_\n_returns: const ofTexture &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getWidth()\n\n<!--\n_syntax: getWidth()_\n_name: getWidth_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns the width of the image in pixels.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void invert()\n\n<!--\n_syntax: invert()_\n_name: invert_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nFlip the pixel values of the image.\n\n![Inverting an image] (../invert.png \"Original on Left\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isUsingTexture()\n\n<!--\n_syntax: isUsingTexture()_\n_name: isUsingTexture_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool matchingROI(&rec1, &rec2)\n\n<!--\n_syntax: matchingROI(&rec1, &rec2)_\n_name: matchingROI_\n_returns: bool_\n_returns_description: _\n_parameters: const ofRectangle &rec1, const ofRectangle &rec2_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns whether the Region of Interests match position and dimension or not.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void mirror(bFlipVertically, bFlipHorizontally)\n\n<!--\n_syntax: mirror(bFlipVertically, bFlipHorizontally)_\n_name: mirror_\n_returns: void_\n_returns_description: _\n_parameters: bool bFlipVertically, bool bFlipHorizontally_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nFlips the image horizontally and/or vertically.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvImage()\n\n<!--\n_syntax: ofxCvImage()_\n_name: ofxCvImage_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConstructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator&=(&mom)\n\n<!--\n_syntax: operator&=(&mom)_\n_name: operator&=_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nBinary & (Logical AND http://en.wikipedia.org/wiki/Bitwise_operation) the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\ncvPuppy.allocate( 320, 240 );\ncvPuppy = puppyImg.getPixels(); // copy pixels from a loaded image\n\nandPuppy.allocate( 320, 240 );\n\nandPuppy.set(255, 0, 0); // make the AND image red\nandPuppy &= cvPuppy; // will & all the bits\n~~~~\n\n![puppy AND](../ANDoperation.png)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator*=(&mom)\n\n<!--\n_syntax: operator*=(&mom)_\n_name: operator*=_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMultiplies the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\nfirst *= second; // both are ofxCvImage instances\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator+=(value)\n\n<!--\n_syntax: operator+=(value)_\n_name: operator+=_\n_returns: void_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\nfirst += second; // both are ofxCvImage instances\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator+=(&mom)\n\n<!--\n_syntax: operator+=(&mom)_\n_name: operator+=_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\nfirst += second; // both are ofxCvImage instances\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator-=(value)\n\n<!--\n_syntax: operator-=(value)_\n_name: operator-=_\n_returns: void_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSubtracts the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\nfirst -= second; // both are ofxCvImage instances\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator-=(&mom)\n\n<!--\n_syntax: operator-=(&mom)_\n_name: operator-=_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSubtracts the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\nfirst -= second; // both are ofxCvImage instances\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy a ofxCvGrayscaleImage into the current ofxCvImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvColorImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy the image data of an ofxCvColorImage into the ofxCvImage instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvFloatImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy the image data ofxCvFloatImage into the ofxCvImage instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvShortImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy the image data of a ofxCvShortImage into the ofxCvImage instance.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(*mom)\n\n<!--\n_syntax: operator=(*mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const int *mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rangeMap(*img, min1, max1, min2, max2)\n\n<!--\n_syntax: rangeMap(*img, min1, max1, min2, max2)_\n_name: rangeMap_\n_returns: void_\n_returns_description: _\n_parameters: int *img, float min1, float max1, float min2, float max2_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rangeMap(*mom, *kid, min1, max1, min2, max2)\n\n<!--\n_syntax: rangeMap(*mom, *kid, min1, max1, min2, max2)_\n_name: rangeMap_\n_returns: void_\n_returns_description: _\n_parameters: int *mom, int *kid, float min1, float max1, float min2, float max2_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void remap(*mapX, *mapY)\n\n<!--\n_syntax: remap(*mapX, *mapY)_\n_name: remap_\n_returns: void_\n_returns_description: _\n_parameters: int *mapX, int *mapY_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis uses a generic geometrical transformation to remap one image to another. This is particularly useful when doing camera calibration.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resetAnchor()\n\n<!--\n_syntax: resetAnchor()_\n_name: resetAnchor_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReset the anchor point of the image, i.e. the center point for rotations,\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resetImageROI(*img)\n\n<!--\n_syntax: resetImageROI(*img)_\n_name: resetImageROI_\n_returns: void_\n_returns_description: _\n_parameters: int *img_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resetROI()\n\n<!--\n_syntax: resetROI()_\n_name: resetROI_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRemoves the region of interest from an ofxCvImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resize(w, h)\n\n<!--\n_syntax: resize(w, h)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nResizes the image to the w.h passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotate(angle, centerX, centerY)\n\n<!--\n_syntax: rotate(angle, centerX, centerY)_\n_name: rotate_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float centerX, float centerY_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nRotates the image. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scale(scaleX, sclaeY)\n\n<!--\n_syntax: scale(scaleX, sclaeY)_\n_name: scale_\n_returns: void_\n_returns_description: _\n_parameters: float scaleX, float sclaeY_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nScales the image to the scaleX, scaleY passed in. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleIntoMe(&mom, interpolationMethod)\n\n<!--\n_syntax: scaleIntoMe(&mom, interpolationMethod)_\n_name: scaleIntoMe_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom, int interpolationMethod_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nScales the image passed in to be the size of the current image,\n\n~~~~{.cpp}\n\nofxCvImage first;\nfirst.allocate(640, 480);\nofxCvImage second;\nsecond.allocate(320, 240);\n\nsecond.scaleIntoMe(first); // first is now 320,240\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(value)\n\n<!--\n_syntax: set(value)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. the values are 1.0 to 255.0.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAnchorPercent(xPct, yPct)\n\n<!--\n_syntax: setAnchorPercent(xPct, yPct)_\n_name: setAnchorPercent_\n_returns: void_\n_returns_description: _\n_parameters: float xPct, float yPct_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet the anchor point of the image, i.e. the center point for rotations, at the percentage positions passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setAnchorPoint(x, y)\n\n<!--\n_syntax: setAnchorPoint(x, y)_\n_name: setAnchorPoint_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet the anchor point of the image, i.e. the center point for rotations, at the x,y passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setFromPixels(*_pixels, w, h)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in a ofxCvImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(&pixels)\n\n<!--\n_syntax: setFromPixels(&pixels)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const ofPixels &pixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in a ofxCvImage from an ofPixels reference.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setImageROI(*img, &rect)\n\n<!--\n_syntax: setImageROI(*img, &rect)_\n_name: setImageROI_\n_returns: void_\n_returns_description: _\n_parameters: int *img, const ofRectangle &rect_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setROI(x, y, w, h)\n\n<!--\n_syntax: setROI(x, y, w, h)_\n_name: setROI_\n_returns: void_\n_returns_description: _\n_parameters: int x, int y, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the region of interest on the image.  Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setROI(&rect)\n\n<!--\n_syntax: setROI(&rect)_\n_name: setROI_\n_returns: void_\n_returns_description: _\n_parameters: const ofRectangle &rect_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets the region of interest on the image.  Region of Interest is a rectangular area in an image, to segment object for further processing. Once the ROI is defined, OpenCV functions will operate on the ROI, reducing the number of pixels that the operation will examine.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRoiFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setRoiFromPixels(*_pixels, w, h)_\n_name: setRoiFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet the Region Of Interest using a pointer to an unsigned char array and a w,h to define the area of the ROI\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRoiFromPixels(&pixels)\n\n<!--\n_syntax: setRoiFromPixels(&pixels)_\n_name: setRoiFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const ofPixels &pixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet the Region Of Interest using an ofPixels reference The w,h of the ofPixels will define the area of the ROI\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setUseTexture(bUse)\n\n<!--\n_syntax: setUseTexture(bUse)_\n_name: setUseTexture_\n_returns: void_\n_returns_description: _\n_parameters: bool bUse_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSets whether the image is using a texture or not. If the image is not using a texture then calls to getTextureReference() will return null and the image cannot be drawn. This is handy if you know that you won't be displaying the image to the screen.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void swapTemp()\n\n<!--\n_syntax: swapTemp()_\n_name: swapTemp_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void transform(angle, centerX, centerY, scaleX, scaleY, moveX, moveY)\n\n<!--\n_syntax: transform(angle, centerX, centerY, scaleX, scaleY, moveX, moveY)_\n_name: transform_\n_returns: void_\n_returns_description: _\n_parameters: float angle, float centerX, float centerY, float scaleX, float scaleY, float moveX, float moveY_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nTransforms the image with the angle, scaling, and transformation passed in. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void translate(x, y)\n\n<!--\n_syntax: translate(x, y)_\n_name: translate_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMoves the image by the x,y amount passed in. This is different than the OpenGL rotate as it actually sets the pixel data, rather than just the posotion of the drawing.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void undistort(radialDistX, radialDistY, tangentDistX, tangentDistY, focalX, focalY, centerX, centerY)\n\n<!--\n_syntax: undistort(radialDistX, radialDistY, tangentDistX, tangentDistY, focalX, focalY, centerX, centerY)_\n_name: undistort_\n_returns: void_\n_returns_description: _\n_parameters: float radialDistX, float radialDistY, float tangentDistX, float tangentDistY, float focalX, float focalY, float centerX, float centerY_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n/**\n* undistort Usage Example:\n* undistort( 0, 1, 0, 0, 200, 200, cwidth/2, cheight/2 );\n* creates kind of an old TV monitor distortion.\n*/\n\n\n\n\n\n_description: _\n\nThe function cvUnDistortOnce corrects camera lens distortion for the image. It requires that you have an estimate of the camera distortion from a call to cvCalibrateCamera() or other calibration method.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateTexture()\n\n<!--\n_syntax: updateTexture()_\n_name: updateTexture_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nUpdates the texture of the ofxCvImage if it contains one. This is handy after you've changed the image pixel data and want it to be uploaded to the texture on the graphics card.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void warpIntoMe(&mom, src = 4, dst = 4)\n\n<!--\n_syntax: warpIntoMe(&mom, src = 4, dst = 4)_\n_name: warpIntoMe_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom, const ofPoint [4] src=4, const ofPoint [4] dst=4_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis warps the image perspective into the ofxCvImage using two sets four points passed in:\n\n~~~~{.cpp}\nofPoint[4] src;\nsrc[0] = ofPoint(0, 0);\nsrc[1] = ofPoint(320, 0);\nsrc[2] = ofPoint(320, 240);\nsrc[3] = ofPoint(0, 240);\n\nofPoint[4] dst;\ndst[0] = ofPoint(10, 0);\ndst[1] = ofPoint(310, 0);\ndst[2] = ofPoint(310, 230);\ndst[3] = ofPoint(10, 230);\n\nimage.warpIntoMe(parent, src, dst);\n\n~~~~\n\n![Warping] (../warpPerspective.png \"Four corners for warping\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void warpPerspective(&A, &B, &C, &D)\n\n<!--\n_syntax: warpPerspective(&A, &B, &C, &D)_\n_name: warpPerspective_\n_returns: void_\n_returns_description: _\n_parameters: const ofPoint &A, const ofPoint &B, const ofPoint &C, const ofPoint &D_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis warps the image perspective to the four points passed in:\n\n![Warping] (../warpPerspective.png \"Four corners for warping\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofxCvImage()\n\n<!--\n_syntax: ~ofxCvImage()_\n_name: ~ofxCvImage_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nDestructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###ofPoint anchor\n\n<!--\n_name: anchor_\n_type: ofPoint_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bAllocated\n\n<!--\n_name: bAllocated_\n_type: bool_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bAnchorIsPct\n\n<!--\n_name: bAnchorIsPct_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bPixelsDirty\n\n<!--\n_name: bPixelsDirty_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bRoiPixelsDirty\n\n<!--\n_name: bRoiPixelsDirty_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bTextureDirty\n\n<!--\n_name: bTextureDirty_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bUseTexture\n\n<!--\n_name: bUseTexture_\n_type: bool_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###IplImage * cvImage\n\n<!--\n_name: cvImage_\n_type: IplImage *_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###IplImage * cvImageTemp\n\n<!--\n_name: cvImageTemp_\n_type: IplImage *_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int height\n\n<!--\n_name: height_\n_type: int_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int iplchannels\n\n<!--\n_name: iplchannels_\n_type: int_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int ipldepth\n\n<!--\n_name: ipldepth_\n_type: int_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels pixels\n\n<!--\n_name: pixels_\n_type: ofPixels_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPixels roiPixels\n\n<!--\n_name: roiPixels_\n_type: ofPixels_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofTexture tex\n\n<!--\n_name: tex_\n_type: ofTexture_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int width\n\n<!--\n_name: width_\n_type: int_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}