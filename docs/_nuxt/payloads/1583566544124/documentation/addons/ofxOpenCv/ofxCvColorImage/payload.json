{"data":[{"page":{"entry":{"name":"ofxCvColorImage","filename":"ofxCvColorImage.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/addons/ofxOpenCv/ofxCvColorImage.markdown","path":"/documentation/addons/ofxOpenCv/ofxCvColorImage","route":"/documentation/addons/ofxOpenCv/ofxCvColorImage.markdown","dir":"../ofSite/documentation/addons/ofxOpenCv","ext":"markdown","type":"page","id":1850,"parent":1834,"breadcrumbs":[1834,1743,1718],"siblings":[],"translations":{}},"description":{"short":"","full":"<p>The ofxCvColorImage represents the data of each pixel as unsigned char values, like the ofxCvGrayscaleImage, but has 3 channels, RGB, to represent color images.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"ofxCvImage"},"methods":[{"syntax":"allocatePixels(w, h)","name":"allocatePixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"allocateTexture()","name":"allocateTexture","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Clears the pixel data of the image. The image must be allocated again with a call to allocate() before it can be used.</p>\n"},{"syntax":"contrastStretch()","name":"contrastStretch","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This increases the contrast of the image remapping the brightest points in the image to white and the darkest points in the image to black.</p>\n"},{"syntax":"convertHsvToRgb()","name":"convertHsvToRgb","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Converts the image from values in the Hue Saturation and Value color space (sometimes called Hue Saturation Brightness) to values in the Red Green and Blue color space.</p>\n"},{"syntax":"convertRgbToHsv()","name":"convertRgbToHsv","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Converts the image from values in the Red Green and Blue color space to values in the Hue Saturation and Value color space (sometimes called Hue Saturation Brightness)</p>\n<p><img src=\"../../types/hsb-cone.jpg\" alt=\"HSV\" title=\"HSB\"></p>\n"},{"syntax":"convertToGrayscalePlanarImage(&grayImage, whichPlane)","name":"convertToGrayscalePlanarImage","returns":"void","returns_description":null,"parameters":"ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>grayImage<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> whichPlane","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies the pixels of the ofxCvColorImage into an ofxCvGrayscale image. You can optionally specify whether you want to use the R G or B channel of the ofxCvColorImage to set the values of the ofxCvGrayscale.</p>\n"},{"syntax":"convertToGrayscalePlanarImages(&red, &green, &blue)","name":"convertToGrayscalePlanarImages","returns":"void","returns_description":null,"parameters":"ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>red<span class=\"token punctuation\">,</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>green<span class=\"token punctuation\">,</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>blue","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies the different channels of the ofxCvColorImage into 3 different grayscale images using the R G and B channels of the ofxCvColorImage.</p>\n"},{"syntax":"convertToRange(min, max)","name":"convertToRange","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> min<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> max","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Maps the pixels of an image to the min and max range passed in.</p>\n<pre><code>\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>grabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will leave unaltered</span>\nsecond <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// change it</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">convertToRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super low contrast</span>\n\n</code></pre>\n<p><img src=\"convertToRange.png\" alt=\"Image convert to range\" title=\"Converting the range of an image\"></p>\n"},{"syntax":"init()","name":"init","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofxCvColorImage()","name":"ofxCvColorImage","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Constructor.</p>\n"},{"syntax":"ofxCvColorImage(&mom)","name":"ofxCvColorImage","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvColorImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copy constructor, which allows you to this:</p>\n<pre><code>ofxCvShortImage old<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// allocate old</span>\nofxCvShortImage <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"operator+=(value)","name":"operator+=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Adds the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">+</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvFloatImage instances</span>\n</code></pre>\n"},{"syntax":"operator-=(value)","name":"operator-=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Subtracts the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">-</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvFloatImage instances</span>\n</code></pre>\n"},{"syntax":"operator=(&_pixels)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofPixels <span class=\"token operator\">&amp;</span>_pixels","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies the data from an IplImage into the ofxCvColorImage using the = symbol.</p>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies ofxCvGrayscaleImage to another ofxCvShortImage using the = symbol.</p>\n<pre><code>imageOne <span class=\"token operator\">=</span> imageTwo<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n\n\n\n\n\n</code></pre>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvColorImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies the data from an ofxCvColorImage into the instance using the = symbol.</p>\n<pre><code>colorImage1 <span class=\"token operator\">=</span> colorImage2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvFloatImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies the data from an ofxCvFloatImage into a ofxCvShortImage using the = symbol.</p>\n<pre><code>colorImage <span class=\"token operator\">=</span> floatColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n"},{"syntax":"operator=(&mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofxCvShortImage <span class=\"token operator\">&amp;</span>mom","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Copies the data from a ofxCvShortImage into the ofxCvColorImage using the = symbol.</p>\n<pre><code>colorImage <span class=\"token operator\">=</span> shortColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n"},{"syntax":"operator=(*mom)","name":"operator=","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>mom","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"resize(w, h)","name":"resize","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Resizes the image to the w, h passed in.</p>\n"},{"syntax":"scaleIntoMe(&mom, interpolationMethod)","name":"scaleIntoMe","returns":"void","returns_description":null,"parameters":"ofxCvImage <span class=\"token operator\">&amp;</span>mom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> interpolationMethod","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Scales the image passed in to be the size of the current image,</p>\n<pre><code>\nofxCvImage first<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofxCvImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">scaleIntoMe</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// first is now 320,240</span>\n\n</code></pre>\n"},{"syntax":"set(value)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> value","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. The values are 0.0 to 1.0.</p>\n"},{"syntax":"set(valueR, valueG, valueB)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> valueR<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> valueG<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> valueB","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in the image to the float value passed in as a color using 0 to 255 scale for each channel. This is useful for blanking or filling an image quickly.</p>\n"},{"syntax":"setFromGrayscalePlanarImages(&red, &green, &blue)","name":"setFromGrayscalePlanarImages","returns":"void","returns_description":null,"parameters":"ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>red<span class=\"token punctuation\">,</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>green<span class=\"token punctuation\">,</span> ofxCvGrayscaleImage <span class=\"token operator\">&amp;</span>blue","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>This method allows you use multiple ofxCvGrayscaleImage images to create a full color image. Each ofxCvGrayscaleImage represents the data of one channel, r, g, b.</p>\n"},{"syntax":"setFromPixels(*_pixels, w, h)","name":"setFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set all the pixels in a ofxCvShortImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image.</p>\n"},{"syntax":"setRoiFromPixels(*_pixels, w, h)","name":"setRoiFromPixels","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>_pixels<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> w<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> h","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":"<p>Set the Region Of Interest using a pointer to an unsigned char array and a w,h to define the area of the ROI</p>\n"},{"name":"cvGrayscaleImage","type":"IplImage *","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofxCvColorImage</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n<em>extends: ofxCvImage</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>##Description</p>\n<p>The ofxCvColorImage represents the data of each pixel as unsigned char values, like the ofxCvGrayscaleImage, but has 3 channels, RGB, to represent color images.</p>\n<p>##Methods</p>\n<p>###void allocatePixels(w, h)</p>\n<p>&lt;!--\n<em>syntax: allocatePixels(w, h)</em>\n<em>name: allocatePixels</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int w, int h</em>\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void allocateTexture()</p>\n<p>&lt;!--\n<em>syntax: allocateTexture()</em>\n<em>name: allocateTexture</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clear()</p>\n<p>&lt;!--\n<em>syntax: clear()</em>\n<em>name: clear</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Clears the pixel data of the image. The image must be allocated again with a call to allocate() before it can be used.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void contrastStretch()</p>\n<p>&lt;!--\n<em>syntax: contrastStretch()</em>\n<em>name: contrastStretch</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This increases the contrast of the image remapping the brightest points in the image to white and the darkest points in the image to black.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void convertHsvToRgb()</p>\n<p>&lt;!--\n<em>syntax: convertHsvToRgb()</em>\n<em>name: convertHsvToRgb</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Converts the image from values in the Hue Saturation and Value color space (sometimes called Hue Saturation Brightness) to values in the Red Green and Blue color space.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void convertRgbToHsv()</p>\n<p>&lt;!--\n<em>syntax: convertRgbToHsv()</em>\n<em>name: convertRgbToHsv</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Converts the image from values in the Red Green and Blue color space to values in the Hue Saturation and Value color space (sometimes called Hue Saturation Brightness)</p>\n<p><img src=\"../../types/hsb-cone.jpg\" alt=\"HSV\" title=\"HSB\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void convertToGrayscalePlanarImage(&amp;grayImage, whichPlane)</p>\n<p>&lt;!--\n<em>syntax: convertToGrayscalePlanarImage(&amp;grayImage, whichPlane)</em>\n<em>name: convertToGrayscalePlanarImage</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvGrayscaleImage &amp;grayImage, int whichPlane</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies the pixels of the ofxCvColorImage into an ofxCvGrayscale image. You can optionally specify whether you want to use the R G or B channel of the ofxCvColorImage to set the values of the ofxCvGrayscale.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void convertToGrayscalePlanarImages(&amp;red, &amp;green, &amp;blue)</p>\n<p>&lt;!--\n<em>syntax: convertToGrayscalePlanarImages(&amp;red, &amp;green, &amp;blue)</em>\n<em>name: convertToGrayscalePlanarImages</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvGrayscaleImage &amp;red, ofxCvGrayscaleImage &amp;green, ofxCvGrayscaleImage &amp;blue</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies the different channels of the ofxCvColorImage into 3 different grayscale images using the R G and B channels of the ofxCvColorImage.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void convertToRange(min, max)</p>\n<p>&lt;!--\n<em>syntax: convertToRange(min, max)</em>\n<em>name: convertToRange</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float min, float max</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Maps the pixels of an image to the min and max range passed in.</p>\n<pre><code>\ncolors<span class=\"token punctuation\">.</span><span class=\"token function\">setFromPixels</span><span class=\"token punctuation\">(</span>grabber<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nfirst <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// will leave unaltered</span>\nsecond <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// change it</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">convertToRange</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// super low contrast</span>\n\n</code></pre>\n<p><img src=\"convertToRange.png\" alt=\"Image convert to range\" title=\"Converting the range of an image\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void init()</p>\n<p>&lt;!--\n<em>syntax: init()</em>\n<em>name: init</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofxCvColorImage()</h3>\n<p>&lt;!--\n<em>syntax: ofxCvColorImage()</em>\n<em>name: ofxCvColorImage</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Constructor.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofxCvColorImage(&amp;mom)</h3>\n<p>&lt;!--\n<em>syntax: ofxCvColorImage(&amp;mom)</em>\n<em>name: ofxCvColorImage</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofxCvColorImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copy constructor, which allows you to this:</p>\n<pre><code>ofxCvShortImage old<span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// allocate old</span>\nofxCvShortImage <span class=\"token keyword\">new</span><span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator+=(value)</p>\n<p>&lt;!--\n<em>syntax: operator+=(value)</em>\n<em>name: operator+=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Adds the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">+</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvFloatImage instances</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator-=(value)</p>\n<p>&lt;!--\n<em>syntax: operator-=(value)</em>\n<em>name: operator-=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Subtracts the pixel data of the right hand side image from the current image:</p>\n<pre><code>first <span class=\"token operator\">-</span><span class=\"token operator\">=</span> second<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// both are ofxCvFloatImage instances</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;_pixels)</p>\n<p>&lt;!--\n_syntax: operator=(&amp;<em>pixels)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: const ofPixels &amp;<em>pixels</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies the data from an IplImage into the ofxCvColorImage using the = symbol.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofxCvGrayscaleImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies ofxCvGrayscaleImage to another ofxCvShortImage using the = symbol.</p>\n<pre><code>imageOne <span class=\"token operator\">=</span> imageTwo<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n\n\n\n\n\n<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>\n\n###<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>mom<span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>\n_syntax<span class=\"token operator\">:</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>mom<span class=\"token punctuation\">)</span>_\n_name<span class=\"token operator\">:</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span>_\n_returns<span class=\"token operator\">:</span> void_\n_returns_description<span class=\"token operator\">:</span> _\n_parameters<span class=\"token operator\">:</span> <span class=\"token keyword\">const</span> ofxCvColorImage <span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span>mom_\n_access<span class=\"token operator\">:</span> public_\n_version_started<span class=\"token operator\">:</span> 007_\n_version_deprecated<span class=\"token operator\">:</span> _\n_summary<span class=\"token operator\">:</span> _\n_constant<span class=\"token operator\">:</span> False_\n_static<span class=\"token operator\">:</span> False_\n_visible<span class=\"token operator\">:</span> True_\n_advanced<span class=\"token operator\">:</span> False_\n<span class=\"token operator\">--</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>\n\n_inlined_description<span class=\"token operator\">:</span> _\n\n\n\n\n\n\n\n_description<span class=\"token operator\">:</span> _\n\nCopies the data from an ofxCvColorImage into the instance <span class=\"token keyword\">using</span> the <span class=\"token operator\">=</span> symbol<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span>cpp<span class=\"token punctuation\">}</span>\ncolorImage1 <span class=\"token operator\">=</span> colorImage2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofxCvFloatImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies the data from an ofxCvFloatImage into a ofxCvShortImage using the = symbol.</p>\n<pre><code>colorImage <span class=\"token operator\">=</span> floatColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(&amp;mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofxCvShortImage &amp;mom</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Copies the data from a ofxCvShortImage into the ofxCvColorImage using the = symbol.</p>\n<pre><code>colorImage <span class=\"token operator\">=</span> shortColorImage<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make sure that the dimensions and ROI match</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void operator=(*mom)</p>\n<p>&lt;!--\n<em>syntax: operator=(*mom)</em>\n<em>name: operator=</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const int *mom</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resize(w, h)</p>\n<p>&lt;!--\n<em>syntax: resize(w, h)</em>\n<em>name: resize</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Resizes the image to the w, h passed in.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void scaleIntoMe(&amp;mom, interpolationMethod)</p>\n<p>&lt;!--\n<em>syntax: scaleIntoMe(&amp;mom, interpolationMethod)</em>\n<em>name: scaleIntoMe</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvImage &amp;mom, int interpolationMethod</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Scales the image passed in to be the size of the current image,</p>\n<pre><code>\nofxCvImage first<span class=\"token punctuation\">;</span>\nfirst<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">640</span><span class=\"token punctuation\">,</span> <span class=\"token number\">480</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofxCvImage second<span class=\"token punctuation\">;</span>\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">320</span><span class=\"token punctuation\">,</span> <span class=\"token number\">240</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsecond<span class=\"token punctuation\">.</span><span class=\"token function\">scaleIntoMe</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// first is now 320,240</span>\n\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(value)</p>\n<p>&lt;!--\n<em>syntax: set(value)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float value</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. The values are 0.0 to 1.0.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(valueR, valueG, valueB)</p>\n<p>&lt;!--\n<em>syntax: set(valueR, valueG, valueB)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int valueR, int valueG, int valueB</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in the image to the float value passed in as a color using 0 to 255 scale for each channel. This is useful for blanking or filling an image quickly.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromGrayscalePlanarImages(&amp;red, &amp;green, &amp;blue)</p>\n<p>&lt;!--\n<em>syntax: setFromGrayscalePlanarImages(&amp;red, &amp;green, &amp;blue)</em>\n<em>name: setFromGrayscalePlanarImages</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofxCvGrayscaleImage &amp;red, ofxCvGrayscaleImage &amp;green, ofxCvGrayscaleImage &amp;blue</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>This method allows you use multiple ofxCvGrayscaleImage images to create a full color image. Each ofxCvGrayscaleImage represents the data of one channel, r, g, b.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromPixels(*_pixels, w, h)</p>\n<p>&lt;!--\n_syntax: setFromPixels(*<em>pixels, w, h)</em>\n<em>name: setFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: const unsigned char *<em>pixels, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set all the pixels in a ofxCvShortImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setRoiFromPixels(*_pixels, w, h)</p>\n<p>&lt;!--\n_syntax: setRoiFromPixels(*<em>pixels, w, h)</em>\n<em>name: setRoiFromPixels</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: const unsigned char *<em>pixels, int w, int h</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Set the Region Of Interest using a pointer to an unsigned char array and a w,h to define the area of the ROI</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###IplImage * cvGrayscaleImage</p>\n<p>&lt;!--\n<em>name: cvGrayscaleImage</em>\n<em>type: IplImage *</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofxCvColorImage\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: ofxCvImage_\n-->\n\n##InlineDescription\n\n\n\n\n\n\n##Description\n\nThe ofxCvColorImage represents the data of each pixel as unsigned char values, like the ofxCvGrayscaleImage, but has 3 channels, RGB, to represent color images.\n\n\n\n\n\n##Methods\n\n\n\n###void allocatePixels(w, h)\n\n<!--\n_syntax: allocatePixels(w, h)_\n_name: allocatePixels_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void allocateTexture()\n\n<!--\n_syntax: allocateTexture()_\n_name: allocateTexture_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nClears the pixel data of the image. The image must be allocated again with a call to allocate() before it can be used.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void contrastStretch()\n\n<!--\n_syntax: contrastStretch()_\n_name: contrastStretch_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis increases the contrast of the image remapping the brightest points in the image to white and the darkest points in the image to black.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertHsvToRgb()\n\n<!--\n_syntax: convertHsvToRgb()_\n_name: convertHsvToRgb_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConverts the image from values in the Hue Saturation and Value color space (sometimes called Hue Saturation Brightness) to values in the Red Green and Blue color space.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertRgbToHsv()\n\n<!--\n_syntax: convertRgbToHsv()_\n_name: convertRgbToHsv_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConverts the image from values in the Red Green and Blue color space to values in the Hue Saturation and Value color space (sometimes called Hue Saturation Brightness)\n\n![HSV](../../types/hsb-cone.jpg \"HSB\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertToGrayscalePlanarImage(&grayImage, whichPlane)\n\n<!--\n_syntax: convertToGrayscalePlanarImage(&grayImage, whichPlane)_\n_name: convertToGrayscalePlanarImage_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvGrayscaleImage &grayImage, int whichPlane_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies the pixels of the ofxCvColorImage into an ofxCvGrayscale image. You can optionally specify whether you want to use the R G or B channel of the ofxCvColorImage to set the values of the ofxCvGrayscale.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertToGrayscalePlanarImages(&red, &green, &blue)\n\n<!--\n_syntax: convertToGrayscalePlanarImages(&red, &green, &blue)_\n_name: convertToGrayscalePlanarImages_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvGrayscaleImage &red, ofxCvGrayscaleImage &green, ofxCvGrayscaleImage &blue_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies the different channels of the ofxCvColorImage into 3 different grayscale images using the R G and B channels of the ofxCvColorImage.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void convertToRange(min, max)\n\n<!--\n_syntax: convertToRange(min, max)_\n_name: convertToRange_\n_returns: void_\n_returns_description: _\n_parameters: float min, float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nMaps the pixels of an image to the min and max range passed in.\n\n~~~~{.cpp}\n\ncolors.setFromPixels(grabber.getPixels());\n\nfirst = colors; // will leave unaltered\nsecond = colors; // change it\nsecond.convertToRange(100, 140); // super low contrast\n\n~~~~\n\n![Image convert to range](convertToRange.png \"Converting the range of an image\")\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void init()\n\n<!--\n_syntax: init()_\n_name: init_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvColorImage()\n\n<!--\n_syntax: ofxCvColorImage()_\n_name: ofxCvColorImage_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nConstructor.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofxCvColorImage(&mom)\n\n<!--\n_syntax: ofxCvColorImage(&mom)_\n_name: ofxCvColorImage_\n_returns: _\n_returns_description: _\n_parameters: const ofxCvColorImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopy constructor, which allows you to this:\n\n~~~~{.cpp}\nofxCvShortImage old;\n// allocate old\nofxCvShortImage new(old);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator+=(value)\n\n<!--\n_syntax: operator+=(value)_\n_name: operator+=_\n_returns: void_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAdds the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\nfirst += second; // both are ofxCvFloatImage instances\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator-=(value)\n\n<!--\n_syntax: operator-=(value)_\n_name: operator-=_\n_returns: void_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSubtracts the pixel data of the right hand side image from the current image:\n\n~~~~{.cpp}\nfirst -= second; // both are ofxCvFloatImage instances\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&_pixels)\n\n<!--\n_syntax: operator=(&_pixels)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofPixels &_pixels_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies the data from an IplImage into the ofxCvColorImage using the = symbol.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvGrayscaleImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies ofxCvGrayscaleImage to another ofxCvShortImage using the = symbol.\n\n~~~~{.cpp}\nimageOne = imageTwo; // make sure that the dimensions and ROI match\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvColorImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies the data from an ofxCvColorImage into the instance using the = symbol.\n\n~~~~{.cpp}\ncolorImage1 = colorImage2; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvFloatImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies the data from an ofxCvFloatImage into a ofxCvShortImage using the = symbol.\n\n~~~~{.cpp}\ncolorImage = floatColorImage; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(&mom)\n\n<!--\n_syntax: operator=(&mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const ofxCvShortImage &mom_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nCopies the data from a ofxCvShortImage into the ofxCvColorImage using the = symbol.\n\n~~~~{.cpp}\ncolorImage = shortColorImage; // make sure that the dimensions and ROI match\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void operator=(*mom)\n\n<!--\n_syntax: operator=(*mom)_\n_name: operator=_\n_returns: void_\n_returns_description: _\n_parameters: const int *mom_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resize(w, h)\n\n<!--\n_syntax: resize(w, h)_\n_name: resize_\n_returns: void_\n_returns_description: _\n_parameters: int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nResizes the image to the w, h passed in.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void scaleIntoMe(&mom, interpolationMethod)\n\n<!--\n_syntax: scaleIntoMe(&mom, interpolationMethod)_\n_name: scaleIntoMe_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvImage &mom, int interpolationMethod_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nScales the image passed in to be the size of the current image, \n\n~~~~{.cpp}\n\nofxCvImage first;\nfirst.allocate(640, 480);\nofxCvImage second;\nsecond.allocate(320, 240);\n\nsecond.scaleIntoMe(first); // first is now 320,240\n\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(value)\n\n<!--\n_syntax: set(value)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float value_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in the image to the float value passed in. This is useful for blanking or filling an image quickly. The values are 0.0 to 1.0.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(valueR, valueG, valueB)\n\n<!--\n_syntax: set(valueR, valueG, valueB)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: int valueR, int valueG, int valueB_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in the image to the float value passed in as a color using 0 to 255 scale for each channel. This is useful for blanking or filling an image quickly.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromGrayscalePlanarImages(&red, &green, &blue)\n\n<!--\n_syntax: setFromGrayscalePlanarImages(&red, &green, &blue)_\n_name: setFromGrayscalePlanarImages_\n_returns: void_\n_returns_description: _\n_parameters: ofxCvGrayscaleImage &red, ofxCvGrayscaleImage &green, ofxCvGrayscaleImage &blue_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nThis method allows you use multiple ofxCvGrayscaleImage images to create a full color image. Each ofxCvGrayscaleImage represents the data of one channel, r, g, b.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setFromPixels(*_pixels, w, h)_\n_name: setFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet all the pixels in a ofxCvShortImage from a pointer to an array of unsigned char values, using the w and h parameters to determine the dimensions of the image.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRoiFromPixels(*_pixels, w, h)\n\n<!--\n_syntax: setRoiFromPixels(*_pixels, w, h)_\n_name: setRoiFromPixels_\n_returns: void_\n_returns_description: _\n_parameters: const unsigned char *_pixels, int w, int h_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nSet the Region Of Interest using a pointer to an unsigned char array and a w,h to define the area of the ROI\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###IplImage * cvGrayscaleImage\n\n<!--\n_name: cvGrayscaleImage_\n_type: IplImage *_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}