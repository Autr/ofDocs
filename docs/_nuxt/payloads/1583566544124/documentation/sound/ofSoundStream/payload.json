{"data":[{"page":{"entry":{"name":"ofSoundStream","filename":"ofSoundStream.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/sound/ofSoundStream.markdown","path":"/documentation/sound/ofSoundStream","route":"/documentation/sound/ofSoundStream.markdown","dir":"../ofSite/documentation/sound","ext":"markdown","type":"page","id":2152,"parent":2139,"breadcrumbs":[2139,1718],"siblings":[],"translations":{}},"description":{"short":"<p>Gives access to audio input and output devices</p>\n<p>ofSoundStream controls access to your computer's audio input and output\ndevices. For example, you could use an ofSoundStream to get live input from\na microphone, or generate sound in realtime for your computer's speakers.</p>\n<p>A typical openFrameworks app will use just one ofSoundStream, and you might\nnot even need to use this class directly at all if you don't need to query\nthings like the sample rate or buffer size. In order to start receiving or\ngenerating audio, your ofApp should implement either ofBaseApp::audioIn() or\nofBaseApp::audioOut() respectively, and then call ofSoundStreamSetup(). You\ncan find examples of this in either the audioInputExample or the\naudioOutputExample.</p>\n<p>Starting a stream with 0 input or output channels will prevent audioIn() or\naudioOut() from being called, respectively.</p>\n<p>Some platforms (iOS, for example) will expose additional platform-specific\nsound stream functionality. See the platform-specific examples for demos.</p>\n<p><strong>Warning</strong>: Be aware that audioIn() and audioOut() will be called on a different\nthread from your app's update() / draw() thread.</p>\n","full":"<p>ofSoundStream is used for more low-level access to the sound buffer and uses the RtAudio library developed at McGill University by Gary P. Scavone. RtAudio provides an API that lets you control and read data from the audio hardware of your computer. You can manipulate sound with openFrameworks using two approaches. The first option is to directly manipulate the sound data sent from the sound card by using the ofSoundStream class that is included as a part of the core oF distribution.\nThe ofBaseApp class defines two callback methods that let you work with sound: audioIn() is called when the system receives any sound, and audioOut() is called before the system sends sound to the sound card. Both of these callbacks require that the ofSoundStreamSetup() method is called before they will be activated. This tells the RtAudio library to start up, begin processing audio from the system microphone (or line in), and send data to the system sound card:\nofSoundStreamSetup(int nOutputs, int nInputs, int sampleRate, int bufferSize, int nBuffers)\nThe ofSoundStreamSetup() method has five parameters:\nnOutput\nIs the number of output channels that your computer supports. Usually this will be two: left and right. If you have a surround sound setup, it might be four or five.\nnInputs - Is the number of input channels that your system uses.\nsampleRate - Is usually 44,100 kHz, or CD quality, though you may want to make it higher or lower depending on the needs of your application.\nbufferSize - Is the size of the buffer that your system supports. At the time of writing this book, on any operating system, it’s probably 256 values.\nnBuffers - Is the number of buffers that your system will create and swap out. The more buffers, the faster your computer will write information into the buffer, but the more memory it will take up. You should probably use two for each channel that you’re using. Here’s an example call:</p>\n<p>ofSoundStreamSetup(2, 0, 44100, 256, 4);</p>\n<p>The previous snippet will send two channels of stereo sound to the audioIn() method each time the underlying RtAudio library sends information from the sound card. This should be called in the setup method of your openFrameworks application. Now, look at the first of two callback methods. The audioIn() method is called whenever the system microphone detects sound:\nvoid audioIn(float * input, int bufferSize, int nChannels) input\nIs a pointer to the array of data.\nbufferSize - Is the size of the buffer, the number of floating-point values in the input array.\nnChannels - Is the number of sound channels represented in the sound data.</p>\n<p>The input parameter is always an array of floating-point numbers with the length given in the bufferSize variable. This sounds a little tricky to work with, but as you can see, by using a for loop with a length determined by bufferSize, it isn’t that difficult:</p>\n<p>float samples[bufferSize];\nfor (int i = 0; i &lt; bufferSize; i++) {\n// increment the sample counter\nsamples[sampleCounter] = input[i]; }</p>\n<p>Note that this callback won’t be triggered unless you call ofSoundStreamSetup() with one or two channels set as the input, like so:</p>\n<p>ofSoundStreamSetup(0, 2, 44100, 256, 4);</p>\n<p>Next, the audioOut() method is called when the system needs one buffer worth of audio to send to the sound card. The method sends the array of floating-point information that represents the buffer of audio data, the size of the buffer, and the number of channels:\nvoid audioOut() (float * output, int bufferSize, int nChannels)\nTo have the audioOut() callback triggered by the system, you would need to call ofSoundStreamSetup() with one or two channels in the output. If you want to alter the data before it’s sent to the sound buffer, you must do it within this method.</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"close()","name":"close","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>stops the stream and cleans up its resources.</p>\n","desc":""},{"syntax":"getBufferSize()","name":"getBufferSize","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Queries the stream's buffer size.\n\\return the current buffer size of the stream.</p>\n","desc":""},{"short":"<p>Retrieves a list of available audio devices</p>\n","desc":""},{"short":"<p>Get all devices which match the arguments (name can be a partial match)</p>\n","desc":""},{"syntax":"getNumInputChannels()","name":"getNumInputChannels","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Queries the stream's number of input channels.\n\\return the number of input channels (e.g. 2 for stereo).</p>\n","desc":""},{"syntax":"getNumOutputChannels()","name":"getNumOutputChannels","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Queries the stream's number of output channels.\n\\return the number of output channels (e.g. 2 for stereo).</p>\n","desc":""},{"syntax":"getSampleRate()","name":"getSampleRate","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Queries the stream's sample rate\n\\return the current sample rate of the stream\n\\note The returned sample rate may differ from the requested sample rate.</p>\n","desc":""},{"short":"","desc":""},{"syntax":"getTickCount()","name":"getTickCount","returns":"uint64_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Queries the number of &quot;ticks&quot; passed since the stream started.</p>\n<p>This is a representation of how many buffers have passed through the\nstream since it started. This can be converted to seconds with the\nfollowing formula:</p>\n<p>secondsOfPlayback = (tickCount * bufferSize) / sampleRate</p>\n<p>\\return number of buffers passed through the stream since it started.</p>\n","desc":""},{"syntax":"ofSoundStream()","name":"ofSoundStream","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"printDeviceList()","name":"printDeviceList","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Prints a list of available audio devices to the console</p>\n","desc":""},{"syntax":"setInput(&soundInput)","name":"setInput","returns":"void","returns_description":null,"parameters":"ofBaseSoundInput <span class=\"token operator\">&amp;</span>soundInput","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the object which will have audioIn() called when the device receives audio.</p>\n","desc":""},{"syntax":"setInput(&soundInput)","name":"setInput","returns":"void","returns_description":null,"parameters":"ofBaseSoundInput <span class=\"token operator\">&amp;</span>soundInput","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the object which will have audioIn() called when the device receives audio.</p>\n","desc":""},{"syntax":"setOutput(&soundOutput)","name":"setOutput","returns":"void","returns_description":null,"parameters":"ofBaseSoundOutput <span class=\"token operator\">&amp;</span>soundOutput","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the object which will have audioOut() called when the device requests audio.</p>\n","desc":""},{"syntax":"setOutput(&soundOutput)","name":"setOutput","returns":"void","returns_description":null,"parameters":"ofBaseSoundOutput <span class=\"token operator\">&amp;</span>soundOutput","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Sets the object which will have audioOut() called when the device requests audio.</p>\n","desc":""},{"short":"","desc":""},{"syntax":"setup(&settings)","name":"setup","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofSoundStreamSettings <span class=\"token operator\">&amp;</span>settings","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"start()","name":"start","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Starts a stream (note that setup() will start the stream on its own).</p>\n","desc":""},{"syntax":"stop()","name":"stop","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Stops the stream.</p>\n","desc":""},{"name":"soundStream","type":"ofPtr","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"tmpDeviceId","type":"int","access":"protected","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofSoundStream</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>Gives access to audio input and output devices</p>\n<p>ofSoundStream controls access to your computer's audio input and output\ndevices. For example, you could use an ofSoundStream to get live input from\na microphone, or generate sound in realtime for your computer's speakers.</p>\n<p>A typical openFrameworks app will use just one ofSoundStream, and you might\nnot even need to use this class directly at all if you don't need to query\nthings like the sample rate or buffer size. In order to start receiving or\ngenerating audio, your ofApp should implement either ofBaseApp::audioIn() or\nofBaseApp::audioOut() respectively, and then call ofSoundStreamSetup(). You\ncan find examples of this in either the audioInputExample or the\naudioOutputExample.</p>\n<p>Starting a stream with 0 input or output channels will prevent audioIn() or\naudioOut() from being called, respectively.</p>\n<p>Some platforms (iOS, for example) will expose additional platform-specific\nsound stream functionality. See the platform-specific examples for demos.</p>\n<p><strong>Warning</strong>: Be aware that audioIn() and audioOut() will be called on a different\nthread from your app's update() / draw() thread.</p>\n<p>##Description</p>\n<p>ofSoundStream is used for more low-level access to the sound buffer and uses the RtAudio library developed at McGill University by Gary P. Scavone. RtAudio provides an API that lets you control and read data from the audio hardware of your computer. You can manipulate sound with openFrameworks using two approaches. The first option is to directly manipulate the sound data sent from the sound card by using the ofSoundStream class that is included as a part of the core oF distribution.\nThe ofBaseApp class defines two callback methods that let you work with sound: audioIn() is called when the system receives any sound, and audioOut() is called before the system sends sound to the sound card. Both of these callbacks require that the ofSoundStreamSetup() method is called before they will be activated. This tells the RtAudio library to start up, begin processing audio from the system microphone (or line in), and send data to the system sound card:\nofSoundStreamSetup(int nOutputs, int nInputs, int sampleRate, int bufferSize, int nBuffers)\nThe ofSoundStreamSetup() method has five parameters:\nnOutput\nIs the number of output channels that your computer supports. Usually this will be two: left and right. If you have a surround sound setup, it might be four or five.\nnInputs - Is the number of input channels that your system uses.\nsampleRate - Is usually 44,100 kHz, or CD quality, though you may want to make it higher or lower depending on the needs of your application.\nbufferSize - Is the size of the buffer that your system supports. At the time of writing this book, on any operating system, it’s probably 256 values.\nnBuffers - Is the number of buffers that your system will create and swap out. The more buffers, the faster your computer will write information into the buffer, but the more memory it will take up. You should probably use two for each channel that you’re using. Here’s an example call:</p>\n<p>ofSoundStreamSetup(2, 0, 44100, 256, 4);</p>\n<p>The previous snippet will send two channels of stereo sound to the audioIn() method each time the underlying RtAudio library sends information from the sound card. This should be called in the setup method of your openFrameworks application. Now, look at the first of two callback methods. The audioIn() method is called whenever the system microphone detects sound:\nvoid audioIn(float * input, int bufferSize, int nChannels) input\nIs a pointer to the array of data.\nbufferSize - Is the size of the buffer, the number of floating-point values in the input array.\nnChannels - Is the number of sound channels represented in the sound data.</p>\n<p>The input parameter is always an array of floating-point numbers with the length given in the bufferSize variable. This sounds a little tricky to work with, but as you can see, by using a for loop with a length determined by bufferSize, it isn’t that difficult:</p>\n<p>float samples[bufferSize];\nfor (int i = 0; i &lt; bufferSize; i++) {\n// increment the sample counter\nsamples[sampleCounter] = input[i]; }</p>\n<p>Note that this callback won’t be triggered unless you call ofSoundStreamSetup() with one or two channels set as the input, like so:</p>\n<p>ofSoundStreamSetup(0, 2, 44100, 256, 4);</p>\n<p>Next, the audioOut() method is called when the system needs one buffer worth of audio to send to the sound card. The method sends the array of floating-point information that represents the buffer of audio data, the size of the buffer, and the number of channels:\nvoid audioOut() (float * output, int bufferSize, int nChannels)\nTo have the audioOut() callback triggered by the system, you would need to call ofSoundStreamSetup() with one or two channels in the output. If you want to alter the data before it’s sent to the sound buffer, you must do it within this method.</p>\n<p>##Methods</p>\n<p>###void close()</p>\n<p>&lt;!--\n<em>syntax: close()</em>\n<em>name: close</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>stops the stream and cleans up its resources.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getBufferSize()</p>\n<p>&lt;!--\n<em>syntax: getBufferSize()</em>\n<em>name: getBufferSize</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Queries the stream's buffer size.\n\\return the current buffer size of the stream.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; ofSoundDevice &gt; getDeviceList(api = DEFAULT)</p>\n<p>&lt;!--\n<em>syntax: getDeviceList(api = DEFAULT)</em>\n<em>name: getDeviceList</em>\n<em>returns: vector&lt; ofSoundDevice &gt;</em>\n_returns_description: _\n<em>parameters: ofSoundDevice::Api api=DEFAULT</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Retrieves a list of available audio devices</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; ofSoundDevice &gt; getMatchingDevices(&amp;name, inChannels, outChannels, api = DEFAULT)</p>\n<p>&lt;!--\n<em>syntax: getMatchingDevices(&amp;name, inChannels, outChannels, api = DEFAULT)</em>\n<em>name: getMatchingDevices</em>\n<em>returns: vector&lt; ofSoundDevice &gt;</em>\n_returns_description: _\n<em>parameters: const string &amp;name, unsigned int inChannels, unsigned int outChannels, ofSoundDevice::Api api=DEFAULT</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get all devices which match the arguments (name can be a partial match)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getNumInputChannels()</p>\n<p>&lt;!--\n<em>syntax: getNumInputChannels()</em>\n<em>name: getNumInputChannels</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Queries the stream's number of input channels.\n\\return the number of input channels (e.g. 2 for stereo).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getNumOutputChannels()</p>\n<p>&lt;!--\n<em>syntax: getNumOutputChannels()</em>\n<em>name: getNumOutputChannels</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Queries the stream's number of output channels.\n\\return the number of output channels (e.g. 2 for stereo).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getSampleRate()</p>\n<p>&lt;!--\n<em>syntax: getSampleRate()</em>\n<em>name: getSampleRate</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Queries the stream's sample rate\n\\return the current sample rate of the stream\n\\note The returned sample rate may differ from the requested sample rate.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###shared_ptr&lt; ofBaseSoundStream &gt; getSoundStream()</p>\n<p>&lt;!--\n<em>syntax: getSoundStream()</em>\n<em>name: getSoundStream</em>\n<em>returns: shared_ptr&lt; ofBaseSoundStream &gt;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###uint64_t getTickCount()</p>\n<p>&lt;!--\n<em>syntax: getTickCount()</em>\n<em>name: getTickCount</em>\n<em>returns: uint64_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Queries the number of &quot;ticks&quot; passed since the stream started.</p>\n<p>This is a representation of how many buffers have passed through the\nstream since it started. This can be converted to seconds with the\nfollowing formula:</p>\n<p>secondsOfPlayback = (tickCount * bufferSize) / sampleRate</p>\n<p>\\return number of buffers passed through the stream since it started.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofSoundStream()</h3>\n<p>&lt;!--\n<em>syntax: ofSoundStream()</em>\n<em>name: ofSoundStream</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void printDeviceList()</p>\n<p>&lt;!--\n<em>syntax: printDeviceList()</em>\n<em>name: printDeviceList</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Prints a list of available audio devices to the console</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setInput(&amp;soundInput)</p>\n<p>&lt;!--\n<em>syntax: setInput(&amp;soundInput)</em>\n<em>name: setInput</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBaseSoundInput &amp;soundInput</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the object which will have audioIn() called when the device receives audio.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setInput(&amp;soundInput)</p>\n<p>&lt;!--\n<em>syntax: setInput(&amp;soundInput)</em>\n<em>name: setInput</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBaseSoundInput &amp;soundInput</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the object which will have audioIn() called when the device receives audio.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setOutput(&amp;soundOutput)</p>\n<p>&lt;!--\n<em>syntax: setOutput(&amp;soundOutput)</em>\n<em>name: setOutput</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBaseSoundOutput &amp;soundOutput</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the object which will have audioOut() called when the device requests audio.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setOutput(&amp;soundOutput)</p>\n<p>&lt;!--\n<em>syntax: setOutput(&amp;soundOutput)</em>\n<em>name: setOutput</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBaseSoundOutput &amp;soundOutput</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Sets the object which will have audioOut() called when the device requests audio.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setSoundStream(soundStreamPtr)</p>\n<p>&lt;!--\n<em>syntax: setSoundStream(soundStreamPtr)</em>\n<em>name: setSoundStream</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: shared_ptr&lt; ofBaseSoundStream &gt; soundStreamPtr</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool setup(&amp;settings)</p>\n<p>&lt;!--\n<em>syntax: setup(&amp;settings)</em>\n<em>name: setup</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofSoundStreamSettings &amp;settings</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void start()</p>\n<p>&lt;!--\n<em>syntax: start()</em>\n<em>name: start</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Starts a stream (note that setup() will start the stream on its own).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void stop()</p>\n<p>&lt;!--\n<em>syntax: stop()</em>\n<em>name: stop</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Stops the stream.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###ofPtr soundStream</p>\n<p>&lt;!--\n<em>name: soundStream</em>\n<em>type: ofPtr</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int tmpDeviceId</p>\n<p>&lt;!--\n<em>name: tmpDeviceId</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofSoundStream\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\nGives access to audio input and output devices\n\nofSoundStream controls access to your computer's audio input and output\ndevices. For example, you could use an ofSoundStream to get live input from\na microphone, or generate sound in realtime for your computer's speakers.\n\nA typical openFrameworks app will use just one ofSoundStream, and you might\nnot even need to use this class directly at all if you don't need to query\nthings like the sample rate or buffer size. In order to start receiving or\ngenerating audio, your ofApp should implement either ofBaseApp::audioIn() or\nofBaseApp::audioOut() respectively, and then call ofSoundStreamSetup(). You\ncan find examples of this in either the audioInputExample or the\naudioOutputExample.\n\nStarting a stream with 0 input or output channels will prevent audioIn() or\naudioOut() from being called, respectively.\n\nSome platforms (iOS, for example) will expose additional platform-specific\nsound stream functionality. See the platform-specific examples for demos.\n\n\n**Warning**: Be aware that audioIn() and audioOut() will be called on a different\nthread from your app's update() / draw() thread.\n\n\n\n\n\n##Description\n\nofSoundStream is used for more low-level access to the sound buffer and uses the RtAudio library developed at McGill University by Gary P. Scavone. RtAudio provides an API that lets you control and read data from the audio hardware of your computer. You can manipulate sound with openFrameworks using two approaches. The first option is to directly manipulate the sound data sent from the sound card by using the ofSoundStream class that is included as a part of the core oF distribution. \nThe ofBaseApp class defines two callback methods that let you work with sound: audioIn() is called when the system receives any sound, and audioOut() is called before the system sends sound to the sound card. Both of these callbacks require that the ofSoundStreamSetup() method is called before they will be activated. This tells the RtAudio library to start up, begin processing audio from the system microphone (or line in), and send data to the system sound card:\nofSoundStreamSetup(int nOutputs, int nInputs, int sampleRate, int bufferSize, int nBuffers)\nThe ofSoundStreamSetup() method has five parameters:\nnOutput\nIs the number of output channels that your computer supports. Usually this will be two: left and right. If you have a surround sound setup, it might be four or five.\nnInputs - Is the number of input channels that your system uses.\nsampleRate - Is usually 44,100 kHz, or CD quality, though you may want to make it higher or lower depending on the needs of your application.\nbufferSize - Is the size of the buffer that your system supports. At the time of writing this book, on any operating system, it’s probably 256 values.\nnBuffers - Is the number of buffers that your system will create and swap out. The more buffers, the faster your computer will write information into the buffer, but the more memory it will take up. You should probably use two for each channel that you’re using. Here’s an example call:\n\nofSoundStreamSetup(2, 0, 44100, 256, 4);\n\nThe previous snippet will send two channels of stereo sound to the audioIn() method each time the underlying RtAudio library sends information from the sound card. This should be called in the setup method of your openFrameworks application. Now, look at the first of two callback methods. The audioIn() method is called whenever the system microphone detects sound:\nvoid audioIn(float * input, int bufferSize, int nChannels) input\nIs a pointer to the array of data.\nbufferSize - Is the size of the buffer, the number of floating-point values in the input array.\nnChannels - Is the number of sound channels represented in the sound data.\n\nThe input parameter is always an array of floating-point numbers with the length given in the bufferSize variable. This sounds a little tricky to work with, but as you can see, by using a for loop with a length determined by bufferSize, it isn’t that difficult:\n\nfloat samples[bufferSize];\nfor (int i = 0; i < bufferSize; i++) {\n// increment the sample counter\nsamples[sampleCounter] = input[i]; }\n\nNote that this callback won’t be triggered unless you call ofSoundStreamSetup() with one or two channels set as the input, like so:\n\nofSoundStreamSetup(0, 2, 44100, 256, 4);\n\nNext, the audioOut() method is called when the system needs one buffer worth of audio to send to the sound card. The method sends the array of floating-point information that represents the buffer of audio data, the size of the buffer, and the number of channels:\nvoid audioOut() (float * output, int bufferSize, int nChannels)\nTo have the audioOut() callback triggered by the system, you would need to call ofSoundStreamSetup() with one or two channels in the output. If you want to alter the data before it’s sent to the sound buffer, you must do it within this method.\n\n\n\n\n\n##Methods\n\n\n\n###void close()\n\n<!--\n_syntax: close()_\n_name: close_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nstops the stream and cleans up its resources.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getBufferSize()\n\n<!--\n_syntax: getBufferSize()_\n_name: getBufferSize_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nQueries the stream's buffer size.\n\\return the current buffer size of the stream.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofSoundDevice > getDeviceList(api = DEFAULT)\n\n<!--\n_syntax: getDeviceList(api = DEFAULT)_\n_name: getDeviceList_\n_returns: vector< ofSoundDevice >_\n_returns_description: _\n_parameters: ofSoundDevice::Api api=DEFAULT_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRetrieves a list of available audio devices\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofSoundDevice > getMatchingDevices(&name, inChannels, outChannels, api = DEFAULT)\n\n<!--\n_syntax: getMatchingDevices(&name, inChannels, outChannels, api = DEFAULT)_\n_name: getMatchingDevices_\n_returns: vector< ofSoundDevice >_\n_returns_description: _\n_parameters: const string &name, unsigned int inChannels, unsigned int outChannels, ofSoundDevice::Api api=DEFAULT_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet all devices which match the arguments (name can be a partial match)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumInputChannels()\n\n<!--\n_syntax: getNumInputChannels()_\n_name: getNumInputChannels_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nQueries the stream's number of input channels.\n\\return the number of input channels (e.g. 2 for stereo).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getNumOutputChannels()\n\n<!--\n_syntax: getNumOutputChannels()_\n_name: getNumOutputChannels_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nQueries the stream's number of output channels.\n\\return the number of output channels (e.g. 2 for stereo).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getSampleRate()\n\n<!--\n_syntax: getSampleRate()_\n_name: getSampleRate_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nQueries the stream's sample rate\n\\return the current sample rate of the stream\n\\note The returned sample rate may differ from the requested sample rate.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###shared_ptr< ofBaseSoundStream > getSoundStream()\n\n<!--\n_syntax: getSoundStream()_\n_name: getSoundStream_\n_returns: shared_ptr< ofBaseSoundStream >_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###uint64_t getTickCount()\n\n<!--\n_syntax: getTickCount()_\n_name: getTickCount_\n_returns: uint64_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nQueries the number of \"ticks\" passed since the stream started.\n\nThis is a representation of how many buffers have passed through the\nstream since it started. This can be converted to seconds with the\nfollowing formula:\n\n   secondsOfPlayback = (tickCount * bufferSize) / sampleRate\n\n\\return number of buffers passed through the stream since it started.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofSoundStream()\n\n<!--\n_syntax: ofSoundStream()_\n_name: ofSoundStream_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void printDeviceList()\n\n<!--\n_syntax: printDeviceList()_\n_name: printDeviceList_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nPrints a list of available audio devices to the console\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setInput(&soundInput)\n\n<!--\n_syntax: setInput(&soundInput)_\n_name: setInput_\n_returns: void_\n_returns_description: _\n_parameters: ofBaseSoundInput &soundInput_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the object which will have audioIn() called when the device receives audio.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setInput(&soundInput)\n\n<!--\n_syntax: setInput(&soundInput)_\n_name: setInput_\n_returns: void_\n_returns_description: _\n_parameters: ofBaseSoundInput &soundInput_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the object which will have audioIn() called when the device receives audio.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setOutput(&soundOutput)\n\n<!--\n_syntax: setOutput(&soundOutput)_\n_name: setOutput_\n_returns: void_\n_returns_description: _\n_parameters: ofBaseSoundOutput &soundOutput_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the object which will have audioOut() called when the device requests audio.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setOutput(&soundOutput)\n\n<!--\n_syntax: setOutput(&soundOutput)_\n_name: setOutput_\n_returns: void_\n_returns_description: _\n_parameters: ofBaseSoundOutput &soundOutput_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSets the object which will have audioOut() called when the device requests audio.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setSoundStream(soundStreamPtr)\n\n<!--\n_syntax: setSoundStream(soundStreamPtr)_\n_name: setSoundStream_\n_returns: void_\n_returns_description: _\n_parameters: shared_ptr< ofBaseSoundStream > soundStreamPtr_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool setup(&settings)\n\n<!--\n_syntax: setup(&settings)_\n_name: setup_\n_returns: bool_\n_returns_description: _\n_parameters: const ofSoundStreamSettings &settings_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void start()\n\n<!--\n_syntax: start()_\n_name: start_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStarts a stream (note that setup() will start the stream on its own).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void stop()\n\n<!--\n_syntax: stop()_\n_name: stop_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStops the stream.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###ofPtr soundStream\n\n<!--\n_name: soundStream_\n_type: ofPtr_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int tmpDeviceId\n\n<!--\n_name: tmpDeviceId_\n_type: int_\n_access: protected_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}