{"data":[{"page":{"entry":{"name":"ofBaseMaterial","filename":"ofBaseMaterial.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/types/ofBaseMaterial.markdown","path":"/documentation/types/ofBaseMaterial","route":"/documentation/types/ofBaseMaterial.markdown","dir":"../ofSite/documentation/types","ext":"markdown","type":"page","id":2173,"parent":2157,"breadcrumbs":[2157,1718],"siblings":[],"translations":{}},"description":{"short":"<p>material parameter properties that can be applied to vertices in the OpenGL lighting model\nused in determining both the intensity and color of reflected light based on the lighting model in use\nand if the vertices are on a front or back sided face</p>\n","full":"<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"begin()","name":"begin","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>begin using this material's properties</p>\n","desc":""},{"syntax":"end()","name":"end","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>end using this material's properties</p>\n","desc":""},{"syntax":"getAmbientColor()","name":"getAmbientColor","returns":"ofFloatColor","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return the ambient reflectance</p>\n","desc":""},{"syntax":"getDiffuseColor()","name":"getDiffuseColor","returns":"ofFloatColor","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return the diffuse reflectance</p>\n","desc":""},{"syntax":"getEmissiveColor()","name":"getEmissiveColor","returns":"ofFloatColor","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return the emitted light intensity</p>\n","desc":""},{"syntax":"getShader(textureTarget, geometryHasColor, &renderer)","name":"getShader","returns":"const ofShader &","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> textureTarget<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> geometryHasColor<span class=\"token punctuation\">,</span> ofGLProgrammableRenderer <span class=\"token operator\">&amp;</span>renderer","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>create and return a shader used to implement the materials effect for a given renderer</p>\n<p><strong>Parameters:</strong></p>\n<p>textureTarget an implementation-specific value to specify the type of shader to use</p>\n<p>renderer programmable renderer instance to create the material shader for</p>\n","desc":""},{"syntax":"getShininess()","name":"getShininess","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return the specular exponent</p>\n","desc":""},{"syntax":"getSpecularColor()","name":"getSpecularColor","returns":"ofFloatColor","returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return the specular reflectance</p>\n","desc":""},{"syntax":"updateLights(&shader, &renderer)","name":"updateLights","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span>shader<span class=\"token punctuation\">,</span> ofGLProgrammableRenderer <span class=\"token operator\">&amp;</span>renderer","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>update the given renderer's lights to the material shader</p>\n<p><strong>Parameters:</strong></p>\n<p>shader the material shader, created by getShader()</p>\n<p>renderer programmable renderer instance that uses the material shader</p>\n","desc":""},{"syntax":"updateMaterial(&shader, &renderer)","name":"updateMaterial","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span>shader<span class=\"token punctuation\">,</span> ofGLProgrammableRenderer <span class=\"token operator\">&amp;</span>renderer","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>update the material properties to the material shader</p>\n<p><strong>Parameters:</strong></p>\n<p>shader the material shader, created by getShader()</p>\n<p>renderer programmable renderer instance that uses the material shader</p>\n","desc":""},{"syntax":"uploadMatrices(&shader, &renderer)","name":"uploadMatrices","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofShader <span class=\"token operator\">&amp;</span>shader<span class=\"token punctuation\">,</span> ofGLProgrammableRenderer <span class=\"token operator\">&amp;</span>renderer","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>upload the given renderer's normal matrix to the material shader</p>\n<p><strong>Parameters:</strong></p>\n<p>shader the material shader, created by getShader()</p>\n<p>renderer programmable renderer instance that uses the material shader</p>\n","desc":""},{"syntax":"~ofBaseMaterial()","name":"~ofBaseMaterial","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofBaseMaterial</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>material parameter properties that can be applied to vertices in the OpenGL lighting model\nused in determining both the intensity and color of reflected light based on the lighting model in use\nand if the vertices are on a front or back sided face</p>\n<p>##Description</p>\n<p>##Methods</p>\n<p>###void begin()</p>\n<p>&lt;!--\n<em>syntax: begin()</em>\n<em>name: begin</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>begin using this material's properties</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void end()</p>\n<p>&lt;!--\n<em>syntax: end()</em>\n<em>name: end</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>end using this material's properties</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofFloatColor getAmbientColor()</p>\n<p>&lt;!--\n<em>syntax: getAmbientColor()</em>\n<em>name: getAmbientColor</em>\n<em>returns: ofFloatColor</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return the ambient reflectance</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofFloatColor getDiffuseColor()</p>\n<p>&lt;!--\n<em>syntax: getDiffuseColor()</em>\n<em>name: getDiffuseColor</em>\n<em>returns: ofFloatColor</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return the diffuse reflectance</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofFloatColor getEmissiveColor()</p>\n<p>&lt;!--\n<em>syntax: getEmissiveColor()</em>\n<em>name: getEmissiveColor</em>\n<em>returns: ofFloatColor</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return the emitted light intensity</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofShader &amp; getShader(textureTarget, geometryHasColor, &amp;renderer)</p>\n<p>&lt;!--\n<em>syntax: getShader(textureTarget, geometryHasColor, &amp;renderer)</em>\n<em>name: getShader</em>\n<em>returns: const ofShader &amp;</em>\n_returns_description: _\n<em>parameters: int textureTarget, bool geometryHasColor, ofGLProgrammableRenderer &amp;renderer</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>create and return a shader used to implement the materials effect for a given renderer</p>\n<p><strong>Parameters:</strong></p>\n<p>textureTarget an implementation-specific value to specify the type of shader to use</p>\n<p>renderer programmable renderer instance to create the material shader for</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getShininess()</p>\n<p>&lt;!--\n<em>syntax: getShininess()</em>\n<em>name: getShininess</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return the specular exponent</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofFloatColor getSpecularColor()</p>\n<p>&lt;!--\n<em>syntax: getSpecularColor()</em>\n<em>name: getSpecularColor</em>\n<em>returns: ofFloatColor</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return the specular reflectance</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateLights(&amp;shader, &amp;renderer)</p>\n<p>&lt;!--\n<em>syntax: updateLights(&amp;shader, &amp;renderer)</em>\n<em>name: updateLights</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofShader &amp;shader, ofGLProgrammableRenderer &amp;renderer</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>update the given renderer's lights to the material shader</p>\n<p><strong>Parameters:</strong></p>\n<p>shader the material shader, created by getShader()</p>\n<p>renderer programmable renderer instance that uses the material shader</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateMaterial(&amp;shader, &amp;renderer)</p>\n<p>&lt;!--\n<em>syntax: updateMaterial(&amp;shader, &amp;renderer)</em>\n<em>name: updateMaterial</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofShader &amp;shader, ofGLProgrammableRenderer &amp;renderer</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>update the material properties to the material shader</p>\n<p><strong>Parameters:</strong></p>\n<p>shader the material shader, created by getShader()</p>\n<p>renderer programmable renderer instance that uses the material shader</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void uploadMatrices(&amp;shader, &amp;renderer)</p>\n<p>&lt;!--\n<em>syntax: uploadMatrices(&amp;shader, &amp;renderer)</em>\n<em>name: uploadMatrices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofShader &amp;shader, ofGLProgrammableRenderer &amp;renderer</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>upload the given renderer's normal matrix to the material shader</p>\n<p><strong>Parameters:</strong></p>\n<p>shader the material shader, created by getShader()</p>\n<p>renderer programmable renderer instance that uses the material shader</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofBaseMaterial()</h3>\n<p>&lt;!--\n<em>syntax: ~ofBaseMaterial()</em>\n<em>name: ~ofBaseMaterial</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n","raw":"#class ofBaseMaterial\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\nmaterial parameter properties that can be applied to vertices in the OpenGL lighting model\nused in determining both the intensity and color of reflected light based on the lighting model in use\nand if the vertices are on a front or back sided face\n\n\n\n\n\n##Description\n\n\n\n\n\n##Methods\n\n\n\n###void begin()\n\n<!--\n_syntax: begin()_\n_name: begin_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nbegin using this material's properties\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void end()\n\n<!--\n_syntax: end()_\n_name: end_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nend using this material's properties\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFloatColor getAmbientColor()\n\n<!--\n_syntax: getAmbientColor()_\n_name: getAmbientColor_\n_returns: ofFloatColor_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return the ambient reflectance\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFloatColor getDiffuseColor()\n\n<!--\n_syntax: getDiffuseColor()_\n_name: getDiffuseColor_\n_returns: ofFloatColor_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return the diffuse reflectance\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFloatColor getEmissiveColor()\n\n<!--\n_syntax: getEmissiveColor()_\n_name: getEmissiveColor_\n_returns: ofFloatColor_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return the emitted light intensity\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofShader & getShader(textureTarget, geometryHasColor, &renderer)\n\n<!--\n_syntax: getShader(textureTarget, geometryHasColor, &renderer)_\n_name: getShader_\n_returns: const ofShader &_\n_returns_description: _\n_parameters: int textureTarget, bool geometryHasColor, ofGLProgrammableRenderer &renderer_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\ncreate and return a shader used to implement the materials effect for a given renderer\n\n**Parameters:**\n\ntextureTarget an implementation-specific value to specify the type of shader to use\n\nrenderer programmable renderer instance to create the material shader for\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getShininess()\n\n<!--\n_syntax: getShininess()_\n_name: getShininess_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return the specular exponent\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofFloatColor getSpecularColor()\n\n<!--\n_syntax: getSpecularColor()_\n_name: getSpecularColor_\n_returns: ofFloatColor_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return the specular reflectance\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateLights(&shader, &renderer)\n\n<!--\n_syntax: updateLights(&shader, &renderer)_\n_name: updateLights_\n_returns: void_\n_returns_description: _\n_parameters: const ofShader &shader, ofGLProgrammableRenderer &renderer_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nupdate the given renderer's lights to the material shader\n\n**Parameters:**\n\nshader the material shader, created by getShader()\n\nrenderer programmable renderer instance that uses the material shader\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateMaterial(&shader, &renderer)\n\n<!--\n_syntax: updateMaterial(&shader, &renderer)_\n_name: updateMaterial_\n_returns: void_\n_returns_description: _\n_parameters: const ofShader &shader, ofGLProgrammableRenderer &renderer_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nupdate the material properties to the material shader\n\n**Parameters:**\n\nshader the material shader, created by getShader()\n\nrenderer programmable renderer instance that uses the material shader\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void uploadMatrices(&shader, &renderer)\n\n<!--\n_syntax: uploadMatrices(&shader, &renderer)_\n_name: uploadMatrices_\n_returns: void_\n_returns_description: _\n_parameters: const ofShader &shader, ofGLProgrammableRenderer &renderer_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nupload the given renderer's normal matrix to the material shader\n\n**Parameters:**\n\nshader the material shader, created by getShader()\n\nrenderer programmable renderer instance that uses the material shader\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofBaseMaterial()\n\n<!--\n_syntax: ~ofBaseMaterial()_\n_name: ~ofBaseMaterial_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n","type":"page"}}],"fetch":[]}