{"data":[{"page":{"entry":{"name":"ofVec2f","filename":"ofVec2f.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/math/ofVec2f.markdown","path":"/documentation/math/ofVec2f","route":"/documentation/math/ofVec2f.markdown","dir":"../ofSite/documentation/math","ext":"markdown","type":"page","id":2133,"parent":2123,"breadcrumbs":[2123,1718],"siblings":[],"translations":{}},"description":{"short":"<p>\\brief\nofVec2f is a class for storing a two dimensional vector.</p>\n<p>Moving through space requires knowledge of where things are and where they are going.\nVector Maths is the class of mathematics that gives us control over these\nthings in space, allowing for elegant and intuitive descriptions of complex\nstructures and movement. Vectors are at the heart of animations, particle\nsystems, and 2D and 3D graphics.</p>\n<p>Vectors in mathematics in general are entities with magnitude (also called\nlength) and direction. A vector whose magnitude is 1 (ie a vector that is\n<em>normalized</em>) is called a <em>unit vector</em>. Unit vectors are very handy for\nstoring directions as they can be easily scaled up (or down) to represent\nmotion in a particular direction with a particular length.</p>\n<p><em>You will also see the term vector used to describe an array of objects in C++\n(such as text strings). Don't let this confuse you, they are quite different:\none of them is a mathematical term for a fixed-length list of numbers that\nyou can do mathematical operations on, the other is a C++-specific term that\nmeans 'dynamically sizeable array'.</em></p>\n<p>ofVec2f has two member variables, x and y, which allow to conveniently store\n2D properties of an object such as its position, velocity, or acceleration.</p>\n<pre><code>ofVec2f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1.x is 0, v1.y is 0</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now v1.x is 10, v1.y is 50</span>\n</code></pre>\n<p>Using ofVec2f greatly simplifies arithmetic operations in two dimensions. For\nexample if you have two vectors v1 and v2, both of which represent a 2D change\nin position, you can find the total change of position of both of them just by\ndoing an addition v1 + v2:</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 represents walking 5 steps forward then 2 steps sideways</span>\nofVec2f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 represents walking 1 step forward then 1 step sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if you do v1 followed by v2? just add v1 and v2 together:</span>\nofVec2f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is 6 steps forward then 3 steps sideways</span>\n</code></pre>\n<p>You can scale an ofVec2f by multiplying it with a float:</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// walk 5 steps forward and 2 steps right</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if we do v1 three times?</span>\nofVec2f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is 15 steps forward and 6 steps right</span>\n</code></pre>\n<p>This also works for subtraction and division.</p>\n<p>As you can see this really makes dealing with vectors as easy as dealing with\nsingle floats or ints, and can reduce the number of lines of code you have to\nwrite by half, at the same time making your code much easier to read and\nunderstand!</p>\n<p><strong>See also</strong>: ofVec3f for 3D vectors</p>\n<p><strong>See also</strong>: ofVec4f for 4D vectors</p>\n","full":"<p>ofVec2f is a class for storing a two dimensional vector.</p>\n<p>Moving through space requires knowledge of where things are and where they are going. Vector Maths is the class of mathematics that gives us control over these things in space, allowing for elegant and intuitive descriptions of complex structures and movement. Vectors are at the heart of animations, particle systems, and 2D and 3D graphics.</p>\n<p>Vectors in mathematics in general are entities with magnitude (also called length) and direction. A vector whose magnitude is 1 (ie a vector that is <em>normalized</em>) is called a <em>unit vector</em>. Unit vectors are very handy for storing directions as they can be easily scaled up (or down) to represent motion in a particular direction with a particular length.</p>\n<p><em>You will also see the term vector used to describe an array of objects in C++ (such as text strings). Don't let this confuse you, they are quite different: one of them is a mathematical term for a fixed-length list of numbers that you can do mathematical operations on, the other is a C++-specific term that means 'dynamically sizeable array'.</em></p>\n<p>ofVec2f has two member variables, x and y, which allow to conveniently store 2D properties of an object such as its position, velocity, or acceleration.</p>\n<pre><code>ofVec2f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1.x is 0, v1.y is 0</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now v1.x is 10, v1.y is 50</span>\n</code></pre>\n<p>Using ofVec2f greatly simplifies arithmetic operations in two dimensions. For example if you have two vectors v1 and v2, both of which represent a 2D change in position, you can find the total change of position of both of them just by doing an addition v1 + v2:</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 represents walking 5 steps forward then 2 steps sideways</span>\nofVec2f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 represents walking 1 step forward then 1 step sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if you do v1 followed by v2? just add v1 and v2 together:</span>\nofVec2f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is 6 steps forward then 3 steps sideways</span>\n</code></pre>\n<p>You can scale an ofVec2f by multiplying it with a float:</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// walk 5 steps forward and 2 steps right</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if we do v1 three times?</span>\nofVec2f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is 15 steps forward and 6 steps right</span>\n</code></pre>\n<p>This also works for subtraction and division.</p>\n<p>As you can see this really makes dealing with vectors as easy as dealing with single floats or ints, and can reduce the number of lines of code you have to write by half, at the same time making your code much easier to read and understand!</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"align(&vec, tolerance = 0.0001f)","name":"align","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.0001f</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Determine if two vectors are aligned</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">align</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// returns true</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to compare alignment with</p>\n<p>tolerance an angle tolerance/threshold (specified in degrees) for deciding if the vectors are sufficiently aligned.</p>\n<p><strong>Returns</strong>: true if both vectors are aligned (pointing in the same direction).</p>\n","desc":"<p>Returns true if both vectors are aligned (pointing in the same direction). tolerance is an angle tolerance/threshold (specified in degrees) for deciding if the vectors are sufficiently aligned.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.align(v2) returns true</span>\n</code></pre>\n"},{"syntax":"alignRad(&vec, tolerance = 0.0001f)","name":"alignRad","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.0001f</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Determine if two vectors are aligned with tolerance in radians</p>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to compare alignment with</p>\n<p>tolerance an angle tolerance/threshold (specified in radians) for deciding if the vectors are sufficiently aligned.</p>\n<p><strong>See also</strong>: align()</p>\n","desc":"<p>Just like <a href=\"#align\">align</a> but the angle tolerance is specified in radians rather than degrees.</p>\n"},{"syntax":"angle(&vec)","name":"angle","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculate the angle to another vector in degrees</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to calculate the angle to</p>\n<p><strong>Returns</strong>: The angle in degrees (-180...180)</p>\n","desc":"<p>Calculate and return the angle in degrees between this vector and vec.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n"},{"syntax":"angleRad(&vec)","name":"angleRad","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculate the angle to another vector in radians</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angleRad</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is HALF_PI</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to calculate the angle to</p>\n<p><strong>Returns</strong>: The angle in radians (-PI...PI)</p>\n","desc":"<p>Calculate and return the angle in radians between this vector and vec.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angleRad</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is HALF_PI</span>\n</code></pre>\n"},{"syntax":"average(*points, num)","name":"average","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">*</span>points<span class=\"token punctuation\">,</span> size_t num","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Average vector over an array of points</p>\n<p>Sets this vector to be the average (<em>centre of gravity</em> or <em>centroid</em>)\nof a given array of ofVec2f.</p>\n<pre><code><span class=\"token keyword\">int</span> numPoints <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nofVec2f points<span class=\"token punctuation\">[</span>numPoints<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>numPoints<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nofVec2f centroid<span class=\"token punctuation\">;</span>\ncentroid<span class=\"token punctuation\">.</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span> points<span class=\"token punctuation\">,</span> numPoints <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// centroid now is the centre of gravity/average of all the random points</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>points The array of ofVec2f to avarage over</p>\n<p>num specifies the number of ofVec2f in the array.</p>\n<p><strong>Returns</strong>: Vector that is the avarage of the points in the array</p>\n","desc":"<p>Sets this vector to be the average (<em>centre of gravity</em> or <em>centroid</em>) of a given array of ofVec2fs. points is the array of ofVec2fs and num specifies the number of ofVec2fs in the array.</p>\n<pre><code><span class=\"token keyword\">int</span> numPoints <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nofVec2f points<span class=\"token punctuation\">[</span>numPoints<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>numPoints<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nofVec2f centroid<span class=\"token punctuation\">;</span>\ncentroid<span class=\"token punctuation\">.</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span> points<span class=\"token punctuation\">,</span> numPoints <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">// centroid now is the centre of gravity/average of all the random points</span>\n</code></pre>\n"},{"syntax":"distance(&pnt)","name":"distance","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Distance between two points.</p>\n<p>Treats both this vector and pnt as points in 2D space, and calculates and\nreturns the distance between them.</p>\n<pre><code>ofVec2f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5</span>\n</code></pre>\n<p>Distance involves a square root calculation, which is one of the slowest\nthings you can do in programming. If you don't need an exact number but rather\njust a rough idea of distance (for example when finding the shortest distance\nof a bunch of points to a reference point, where it doesn't matter exactly\nwhat the distances are, you just want the shortest), you can use\nsquareDistance() instead.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The point to calculate the distance to</p>\n<p><strong>Returns</strong>: The distance as float</p>\n<p><strong>See also</strong>: squareDistance()</p>\n","desc":"<p>Treats both this vector and pnt as points in 2D space, and calculates and returns the distance between them.</p>\n<pre><code>ofVec2f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5</span>\n</code></pre>\n<p>distance involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest), you can use <a href=\"#squareDistance\">squareDistance</a> instead.</p>\n"},{"syntax":"dot(&vec)","name":"dot","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns the dot product of this vector with 'vec'.</p>\n<p>The <em>dot product</em> of two vectors, also known as the <em>scalar product</em>, is\nthe product of the magnitude of the two vectors and the cosine of the\nangle between them.</p>\n<p>One interpretation of the dot product is as a measure of how closely two\nvectors align with each other. If they point in exactly the same\ndirection, their dot product will simply be the product of their\nmagnitudes, if they are perpendicular, their dot product will be 0, and\nif they point in opposite directions, their dot product will be\nnegative.</p>\n<p>The dot product is in contrast to the <em>cross product</em>, which returns a\nvector rather than a scalar.</p>\n<pre><code>ofVec2f <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 2, parallel to x-axis</span>\nofVec2f <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 5, 53.13 degree angle to a1</span>\n<span class=\"token keyword\">float</span> dot <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 2 * 5 * cos(53.13) = 6.0</span>\n\nofVec2f <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, parallel to x-axis</span>\nofVec2f <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, 90 degree angle to a2</span>\ndot <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 1 * 1 * cos(90) = 0.0</span>\n\nofVec2f <span class=\"token function\">a3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, parallel to y-axis</span>\nofVec2f <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, 180 degree angle to a3</span>\ndot <span class=\"token operator\">=</span> a3<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 1 * 1 * cos(180) = -1.0</span>\n</code></pre>\n","desc":"<p>Calculate and return the dot product of this vector with vec.</p>\n<p><em>Dot product</em> (less commonly known as <em>Euclidean inner product</em>) expresses the angular relationship between two vectors. In other words it is a measure of how <em>parallel</em> two vectors are. If they are completely perpendicular the dot product is 0; if they are completely parallel their dot product is either 1 if they are pointing in the same direction, or -1 if they are pointing in opposite directions.</p>\n<p><img src=\"../math/dotproduct.png\" alt=\"DOT\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofvec2f <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 90 degree angle to a1</span>\ndot <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 0, ie cos(90)</span>\n\nofVec2f <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 45 degree angle to a2</span>\nb2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// vectors should to be unit vectors (normalized)</span>\n<span class=\"token keyword\">float</span> dot <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 0.707, ie cos(45)</span>\n\nofVec2f <span class=\"token function\">a3</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 180 degree angle to a3</span>\ndot <span class=\"token operator\">=</span> a3<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is -1, ie cos(180)</span>\n</code></pre>\n"},{"syntax":"getInterpolated(&pnt, p)","name":"getInterpolated","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Linear interpolation</p>\n<p>Perform a linear interpolation of this vector's position towards pnt\nand return the interpolated position without altering the original\nvector.</p>\n<p><code>p</code> is normally between 0 and 1 and where 0 means stay the original position and 1\nmeans move all the way to pnt, but you can also have p greater than 1\novershoot pnt, or less than 0 to move backwards away from pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (5, 7.5)</span>\nofVec3f v4 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v4 is (8, 9)</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>pnt The point to move towards</p>\n<p>p The amount to move towards pnt</p>\n<p><strong>See also</strong>: interpolate()</p>\n","desc":"<p>Perform a linear interpolation of this vector's position towards pnt and return the interpolated position without altering the original vector. p controls the amount to move towards pnt. p is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to pnt, but you can also have p greater than 1 overshoot pnt, or less than 0 to move backwards away from pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (5, 7.5)</span>\nofVec3f v4 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v4 is (8, 9)</span>\n</code></pre>\n"},{"syntax":"getLimited(max)","name":"getLimited","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> max","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get vector limited by length</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nofVec2f v1Limited <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1Limited is (2.9417, 0.58835) which has length of 3 in the same direction as v1</span>\nofVec2f v2Limited <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2Limited is (2, 1) (same as v2)</span>\n</code></pre>\n<p><strong>See also</strong>: limit()</p>\n<p><strong>Parameters:</strong></p>\n<p>max The maximum length of the vector to return</p>\n<p><strong>Returns</strong>: A copy of this vector with its length (magnitude) restricted to a\nmaximum of max units by scaling down if necessary.</p>\n","desc":"<p>Return a copy of this vector with its length (magnitude) restricted to a maximum of max units by scaling down if necessary.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nofVec2f v1Limited <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">// v1Limited is (2.9417, 0.58835) which has length of 3 in the same direction as v1</span>\nofVec2f v2Limited <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2Limited is (2, 1) (same as v2)</span>\n</code></pre>\n"},{"syntax":"getMapped(&origin, &vx, &vy)","name":"getMapped","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>origin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vy","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Get vector mapped to new coordinate system</p>\n<p>In most cases you want <code>vx</code> and <code>vy</code> to be perpendicular and of unit length; if\nthey are not perpendicular you will have shearing as part of the mapping, and\nif they are not of unit length you will have scaling as part of the mapping.</p>\n<p><strong>Returns</strong>: A new ofVec2f calculated by copying this vector and then mapping from\nits default coordinate system -- origin (0,0), X direction (1,0), Y direction\n(0,1) -- to a new coordinate system defined with origin at origin, X direction\nvx, and Y direction vy.</p>\n","desc":"<p>Return a new ofVec2f calculated by copying this vector and then mapping from its default coordinate system -- origin (0,0), X direction (1,0), Y direction (0,1) -- to a new coordinate system defined with origin at origin, X direction vx, and Y direction vy.</p>\n<p><em>In most cases you want vx and vy to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.</em></p>\n"},{"syntax":"getMiddle(&pnt)","name":"getMiddle","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Calculate and return the midpoint between this vector and pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f mid <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// mid gets (7.5, 5)</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector to find the middle to</p>\n<p><strong>Returns</strong>: The middle between this vector and <code>pnt</code></p>\n<p><strong>See also</strong>: middle()</p>\n","desc":"<p>Calculate and return the midpoint between this vector and pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f mid <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// mid gets (7.5, 5)</span>\n</code></pre>\n"},{"syntax":"getNormalized()","name":"getNormalized","returns":"ofVec2f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a normalized copy of this vector.</p>\n<p><em>Normalization</em> means to scale the vector so that its length\n(magnitude) is exactly 1, at which stage all that is left is the\ndirection. A normalized vector is usually called a <em>unit vector</em>, and\ncan be used to represent a pure direction (heading).</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v1Normalized <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (1, 0)</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2Normalized <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, √2)</span>\n</code></pre>\n","desc":"<p>Return a normalized copy of this vector.</p>\n<p><em>Normalization</em> means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a <em>unit vector</em>, and can be used to represent a pure direction (heading).</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v1Normalized <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (1, 0)</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2Normalized <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, √2)</span>\n</code></pre>\n"},{"syntax":"getPerpendicular()","name":"getPerpendicular","returns":"ofVec2f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return the <em>normalized</em> ofVec2f that is perpendicular to this vector\n(ie rotated 90 degrees and normalized).</p>\n<p><img src=\"math/perpendicular.png\" alt=\"PERPENDICULAR\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f u <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// u is (0.928, -0.371)</span>\n</code></pre>\n<p><strong>See also</strong>: perpendicular()</p>\n","desc":"<p>Return the <strong>normalized</strong> ofVec2f that is perpendicular to this vector (ie rotated 90 degrees and normalized).</p>\n<p><img src=\"../math/perpendicular.png\" alt=\"PERPENDICULAR\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f u <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// u is (0.928, -0.371)</span>\n</code></pre>\n"},{"syntax":"getPtr()","name":"getPtr","returns":"float *","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a pointer to the memory position of the first element of the vector (x);\nthe second element (y) immediately follows it in memory.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> v1Ptr <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n</code></pre>\n<p>This is very useful when using arrays of ofVec2fs to store geometry\ninformation, as it allows the vector to be treated as a simple C array of\nfloats that can be passed verbatim to OpenGL.</p>\n","desc":""},{"syntax":"getPtr()","name":"getPtr","returns":"const float *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":"<p>Returns a pointer to the memory position of the first element of the vector  (x); the second element (y) immediately follows it in memory.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> v1Ptr <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n</code></pre>\n<p>This is very useful when using arrays of ofVec2fs to store geometry information, as it allows the vector to be treated as a simple C array of floats that can be passed verbatim to OpenGL.</p>\n"},{"syntax":"getRotated(angle)","name":"getRotated","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector that is the result of rotating this vector\nby 'angle' degrees about the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707)</span>\n</code></pre>\n<p><strong>See also</strong>: getRotatedRad()</p>\n<p><strong>See also</strong>: rotate()</p>\n","desc":"<p>Return a new ofVec2f that is the result of rotating this vector by angle degrees around the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0, 1)</span>\n</code></pre>\n"},{"syntax":"getRotated(angle, &pivot)","name":"getRotated","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>pivot","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector that is the result of rotating this vector\nby 'angle' degrees about the point 'pivot'.</p>\n","desc":"<p>Like <a href=\"#getRotated\">getRotated</a> but rotates around pivot rather than around the origin.</p>\n"},{"syntax":"getRotatedRad(angle)","name":"getRotatedRad","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector that is the result of rotating this vector\nby 'angle' radians about the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707)</span>\n</code></pre>\n","desc":"<p>Return a new ofVec2f that is the result of rotating this vector by angle radians around the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0, 1)</span>\n</code></pre>\n"},{"syntax":"getRotatedRad(angle, &pivot)","name":"getRotatedRad","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>pivot","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector that is the result of rotating this vector\nby 'angle' radians about the origin.</p>\n","desc":"<p>Like <a href=\"#getRotatedRad\">getRotatedRad</a> but rotates around pivot rather than around the origin.</p>\n"},{"syntax":"getScaled(length)","name":"getScaled","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return a new ofVec2f that is the result of scaling this vector up or down so\nthat it has the requested length.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ( 9, 12 ), length is now 15</span>\n<span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span>ofVec2f\n\n\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span>See also<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n\n\n\n</code></pre>\n","desc":"<p>Return a new ofVec2f that is the result of scaling this vector up or down so that it has the requested length.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ( 9, 12 ), length is now 15</span>\n</code></pre>\n"},{"syntax":"interpolate(&pnt, p)","name":"interpolate","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>pnt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Linear interpolation</p>\n<p>Perform a linear interpolation of this vector's position towards pnt. p\ncontrols the amount to move towards pnt. p is normally between 0 and 1 and\nwhere 0 means stay the original position and 1 means move all the way to pnt,\nbut you can also have p greater than 1 overshoot pnt, or less than 0 to move\nbackwards away from pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875)</span>\n</code></pre>\n<p><strong>See also</strong>: getInterpolated()</p>\n","desc":"<p>Perform a linear interpolation of this vector's position towards pnt. p controls the amount to move towards pnt. p is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to pnt, but you can also have p greater than 1 overshoot pnt, or less than 0 to move backwards away from pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875)</span>\n</code></pre>\n"},{"syntax":"isAligned(&vec, tolerance = 0.0001f)","name":"isAligned","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.0001f</span>","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Determine if two vectors are aligned</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">isAligned</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// returns true</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to compare alignment with</p>\n<p>tolerance an angle tolerance/threshold (specified in degrees) for deciding if the vectors are sufficiently aligned.</p>\n<p><strong>Returns</strong>: true if both vectors are aligned (pointing in the same direction).</p>\n","desc":""},{"syntax":"isAlignedRad(&vec, tolerance = 0.0001f)","name":"isAlignedRad","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.0001f</span>","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Determine if two vectors are aligned with tolerance in radians</p>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to compare alignment with</p>\n<p>tolerance an angle tolerance/threshold (specified in radians) for deciding if the vectors are sufficiently aligned.</p>\n<p><strong>See also</strong>: isAligned()</p>\n","desc":""},{"syntax":"length()","name":"length","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return the length (magnitude) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5 (3,4,5 triangle)</span>\n</code></pre>\n<p>length() involves a square root calculation, which is one of the slowest things\nyou can do in programming. If you don't need an exact number but rather just a\nrough idea of a length (for example when finding the shortest distance of a\nbunch of points to a reference point, where it doesn't matter exactly what the\nlengths are, you just want the shortest), you can use\nlengthSquared() instead.</p>\n<p><strong>See also</strong>: lengthSquared()</p>\n","desc":"<p>Return the length (magnitude) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5 (3,4,5 triangle)</span>\n</code></pre>\n<p>length involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest), you can use <a href=\"#squareLength\">squareLength</a> instead.</p>\n"},{"syntax":"lengthSquared()","name":"lengthSquared","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":"007","summary":null,"constant":"False","static":"False","visible":"False","advanced":"False","short":"<p>Return the squared length (squared magnitude) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5 (3,4,5 triangle)</span>\n</code></pre>\n<p>Use as a much faster alternative to length() if you don't\nneed to know an accurate length but rather just a rough idea of a\nlength (for example when finding the shortest distance of a bunch of\npoints to a reference point, where it doesn't matter exactly what the\nlengths are, you just want the shortest). It avoids the square root\ncalculation that is ordinarily required to calculate a length.</p>\n<p><strong>See also</strong>: length()</p>\n","desc":"<p>Return the squared length (squared magnitude) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5 (3,4,5 triangle)</span>\n</code></pre>\n<p>Use as a much faster alternative to <a href=\"#length\">length</a> if you don't need to know an accurate length but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.</p>\n"},{"syntax":"limit(max)","name":"limit","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> max","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Restrict the length (magnitude) of this vector to a maximum of max units by scaling down if necessary.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1 is now (2.9417, 0.58835) which has length of 3 in the same direction as at initialization</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2 is unchanged</span>\n</code></pre>\n<p><strong>See also</strong>: limit()</p>\n","desc":"<p>Restrict the length (magnitude) of this vector to a maximum of max units by scaling down if necessary.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">// v1 is now (2.9417, 0.58835) which has length of 3 in the same direction as at initialization</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2 is unchanged</span>\n</code></pre>\n"},{"syntax":"map(&origin, &vx, &vy)","name":"map","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>origin<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vy","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Maps this vector from its default coordinate system -- origin (0,0), X\ndirection (1,0), Y direction (0,1) -- to a new coordinate system defined with\norigin at origin, X direction vx, and Y direction vy.</p>\n<p>In most case you want vx and vy to be perpendicular and of unit length; if\nthey are not perpendicular you will have shearing as part of the mapping, and\nif they are not of unit length you will have scaling as part of the mapping.</p>\n<p><strong>See also</strong>: perpendicular()</p>\n","desc":"<p>Maps this vector from its default coordinate system -- origin (0,0), X direction (1,0), Y direction (0,1) -- to a new coordinate system defined with origin at origin, X direction vx, and Y direction vy.</p>\n<p><em>In most case you want vx and vy to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.</em></p>\n"},{"syntax":"match(&vec, tolerance = 0.0001f)","name":"match","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> tolerance<span class=\"token operator\">=</span><span class=\"token number\">0.0001f</span>","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns true if each component is <em>close enough</em> to its corresponding\ncomponent in vec, where what is <em>close enough</em> is determined by the value of\ntolerance:</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19.999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.1) returns true</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.001) returns false</span>\n</code></pre>\n<p>This is handy if, for example, you want to find out when a point becomes\n<em>close enough</em> to another point to trigger an event.</p>\n","desc":"<p>Returns true if each component is <em>close enough</em> to its corresponding component in vec, where what is <em>close enough</em> is determined by the value of tolerance:</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19.999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.1) returns true</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.001) returns false</span>\n</code></pre>\n<p>This is handy if, for example, you want to find out when a point becomes <em>close enough</em> to another point to trigger an event.</p>\n"},{"syntax":"middle(&pnt)","name":"middle","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this vector to the midpoint between itself and pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875)</span>\n</code></pre>\n<p><strong>See also</strong>: getMiddle()</p>\n","desc":"<p>Set this vector to the midpoint between itself and pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875)</span>\n</code></pre>\n"},{"syntax":"normalize()","name":"normalize","returns":"ofVec2f &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Normalize the vector.</p>\n<p><em>Normalizing</em> means to scale the vector so that its length (magnitude) is\nexactly 1, at which stage all that is left is the direction. A normalized\nvector is usually called a <em>unit vector</em>, and can be used to represent a pure\ndirection (heading).</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (1, 0)</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (√2, √2)</span>\n</code></pre>\n<p><strong>See also</strong>: getNormalized()</p>\n","desc":"<p>Normalize the vector.</p>\n<p><em>Normalizing</em> means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a <em>unit vector</em>, and can be used to represent a pure direction (heading).</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (1, 0)</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (√2, √2)</span>\n</code></pre>\n"},{"syntax":"ofVec2f(&v)","name":"ofVec2f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec2 <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>}</p>\n","desc":""},{"syntax":"ofVec2f(&v)","name":"ofVec2f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVec2f(&v)","name":"ofVec2f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec4 <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofVec2f(&vec)","name":"ofVec2f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec3f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a 2D vector (ofVec2f) from a 3D vector (ofVec3f) by\n\\throwing away the z component of the 3D vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">mom3d</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 3d vector</span>\nofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom3d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v.x is 40, v.y is 20</span>\n</code></pre>\n","desc":"<p>Create a 2D vector (ofVec2f) from a 3D vector (ofVec3f) by throwing away the z component of the 3D vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">mom3d</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 3d vector </span>\nofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom3d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v.x is 40, v.y is 20</span>\n</code></pre>\n"},{"syntax":"ofVec2f(&vec)","name":"ofVec2f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec4f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Create a 2D vector (ofVec2f) from a 4D vector (ofVec4f) by throwing away the z\nand w components of the 4D vector.</p>\n<pre><code>ofVec4f <span class=\"token function\">mom4d</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 4d vector</span>\nofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom4d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v.x is 40, v.y is 20</span>\n</code></pre>\n","desc":"<p>Create a 2D vector (ofVec2f) from a 4D vector (ofVec4f) by throwing away the z and w components of the 4D vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">mom4d</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 4d vector </span>\nofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom4d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v.x is 40, v.y is 20</span>\n</code></pre>\n"},{"syntax":"ofVec2f()","name":"ofVec2f","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a 2D vector.</p>\n<pre><code>ofVec2f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// default: v1.x is 0, v1.y is 0</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3.x is 0.1, v3.y is 0.3</span>\n</code></pre>\n","desc":""},{"syntax":"ofVec2f(scalar)","name":"ofVec2f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> scalar","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a 2D vector with <code>x</code> and <code>y</code> set to <code>scalar</code></p>\n","desc":""},{"syntax":"ofVec2f(x, y)","name":"ofVec2f","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Construct a 2D vector with specific <code>x</code> and `y components</p>\n<pre><code>ofVec2f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// default: v1.x is 0, v1.y is 0</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3.x is 0.1, v3.y is 0.3</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>x The x component</p>\n<p>y The y component</p>\n","desc":"<p>Construct a 2D vector. Defaults to (0,0).</p>\n<pre><code>ofVec2f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// default: v1.x is 0, v1.y is 0</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3.x is 0.1, v3.y is 0.3</span>\n</code></pre>\n"},{"syntax":"one()","name":"one","returns":"ofVec2f","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator!=(&vec)","name":"operator!=","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Check for inequality between two ofVec2f</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v2 ) is true</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v3 ) is false</span>\n</code></pre>\n<p><strong>Returns</strong>: true if any component is different to its corresponding\ncomponent in vec, ie if 'x != vec.x' or 'y != vec.y', otherwise returns\nfalse.</p>\n","desc":"<p>Returns true if any component is different to its corresponding component in vec, ie if x != vec.x or y != vec.y; otherwise returns false.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v2 ) is true</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v3 ) is false</span>\n</code></pre>\n"},{"syntax":"operator*(&vec)","name":"operator*","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Returns a new vector (x<em>vec.x , y</em>vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (80, 80)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n","desc":"<p>Returns a new vector (x<em>vec.x,y</em>vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (80, 80)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n"},{"syntax":"operator*(f)","name":"operator*","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return a new ofVec2f that is this vector scaled by multiplying both x\nand y members by the float.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20)</span>\n</code></pre>\n","desc":"<p>Return a new ofVec2f that is this vector scaled by multiplying both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20)</span>\n</code></pre>\n"},{"syntax":"operator*=(&vec)","name":"operator*=","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Multiplies x by vec.x, and multiplies y by vec.y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (80, 80)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n","desc":"<p>Multiplies x by vec.x, and multiplies y by vec.y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (80, 80)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n"},{"syntax":"operator*=(f)","name":"operator*=","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale this vector by multiplying both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20)</span>\n</code></pre>\n","desc":"<p>Scale this vector by multiplying both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20)</span>\n</code></pre>\n"},{"syntax":"operator+(&vec)","name":"operator+","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Super easy vector addition. Returns a new vector (x+vec.x,y+vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (65, 70)</span>\n</code></pre>\n","desc":"<p>Super easy vector addition. Returns a new vector (x+vec.x,y+vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (65, 70)</span>\n</code></pre>\n"},{"syntax":"operator+(f)","name":"operator+","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector with a float value f added to both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15)</span>\n</code></pre>\n","desc":"<p>Returns a new vector with a float value f added to both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15)</span>\n</code></pre>\n"},{"syntax":"operator+=(&vec)","name":"operator+=","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Super easy addition assignment. Adds vec.x to x, and adds vec.y to y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (65, 70)</span>\n</code></pre>\n","desc":"<p>Super easy addition assignment. Adds vec.x to x, and adds vec.y to y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (65, 70)</span>\n</code></pre>\n"},{"syntax":"operator+=(f)","name":"operator+=","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adds a float value f to both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15)</span>\n</code></pre>\n","desc":"<p>Adds a float value f to both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15)</span>\n</code></pre>\n"},{"syntax":"operator-(&vec)","name":"operator-","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Super easy vector subtraction. Returns a new vector (x-vec.x,y-vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (15, -30)</span>\n</code></pre>\n","desc":"<p>Super easy vector subtraction. Returns a new vector (x-vec.x,y-vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (15, -30)</span>\n</code></pre>\n"},{"syntax":"operator-()","name":"operator-","returns":"ofVec2f","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new ofVec2f that is the inverted version (mirrored in X and Y) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-2, -5)</span>\n</code></pre>\n","desc":"<p>Returns a new ofVec2f that is the inverted version (mirrored in X and Y) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-2, -5)</span>\n</code></pre>\n"},{"syntax":"operator-(f)","name":"operator-","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Returns a new vector with a float value f subtracted from both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5)</span>\n</code></pre>\n","desc":"<p>Returns a new vector with a float value f subtracted from both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5)</span>\n</code></pre>\n"},{"syntax":"operator-=(&vec)","name":"operator-=","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Super easy subtraction assignment. Subtracts vec.x from x, and subtracts vec.y from y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (15, -30)</span>\n</code></pre>\n","desc":"<p>Super easy subtraction assignment. Subtracts vec.x from x, and subtracts vec.y from y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (15, -30)</span>\n</code></pre>\n"},{"syntax":"operator-=(f)","name":"operator-=","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Subtract a float value f from both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5)</span>\n</code></pre>\n","desc":"<p>Subtract a float value f from both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5)</span>\n</code></pre>\n"},{"syntax":"operator/(&vec)","name":"operator/","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Returns a new vector (x/vec.x,y/vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (20, 5)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n","desc":"<p>Returns a new vector (x/vec.x,y/vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (20, 5)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n"},{"syntax":"operator/(f)","name":"operator/","returns":"ofVec2f","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Return a new ofVec2f that is this vector scaled by dividing\nboth x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25)</span>\n</code></pre>\n","desc":"<p>Return a new ofVec2f that is this vector scaled by dividing both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25)</span>\n</code></pre>\n"},{"syntax":"operator/=(&vec)","name":"operator/=","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"<p>Divides x by vec.x, and divides y by vec.y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (20, 5)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n","desc":"<p>Divides x by vec.x, and divides y by vec.y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (20, 5)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n"},{"syntax":"operator/=(f)","name":"operator/=","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> f","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scale this vector by dividing both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25)</span>\n</code></pre>\n","desc":"<p>Scale this vector by dividing both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25)</span>\n</code></pre>\n"},{"syntax":"operator==(&vec)","name":"operator==","returns":"bool","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Check for equality between two ofVec2f</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v2 ) is false</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v3 ) is true</span>\n</code></pre>\n<p><strong>Returns</strong>: true if each component is the same as the corresponding\ncomponent in vec, ie if x == vec.x and y == vec.y; otherwise returns\nfalse.</p>\n","desc":"<p>Returns true if each component is the same as the corresponding component in vec, ie if x == vec.x and y == vec.y; otherwise returns false.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v2 ) is false</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v3 ) is true</span>\n</code></pre>\n"},{"syntax":"operator[](n)","name":"operator[]","returns":"float &","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> n","access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Allows to access the x and y components of an ofVec2f as though it is an array</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n</code></pre>\n<p>This function can be handy if you want to do the same operation to both x and\ny components, as it means you can just make a for loop that repeats twice.</p>\n","desc":""},{"syntax":"operator[](n)","name":"operator[]","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> n","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"True","short":"","desc":"<p>Allows to access the x and y components of an ofVec2f as though it is an array:</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n</code></pre>\n<p>This function can be handy if you want to do the same operation to both x and y components, as it means you can just make a for loop that repeats twice.</p>\n"},{"syntax":"perpendicular()","name":"perpendicular","returns":"ofVec2f &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set this vector to its own <strong>normalized</strong> perpendicular (by\nrotating 90 degrees and normalizing).</p>\n<p><img src=\"math/perpendicular.png\" alt=\"PERPENDICULAR\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is (0.928, -0.371)</span>\n</code></pre>\n<p><strong>See also</strong>: getPerpendicular()</p>\n","desc":"<p>Set this vector to its own <strong>normalized</strong> perpendicular (by rotating 90 degrees and normalizing).</p>\n<p><img src=\"../math/perpendicular.png\" alt=\"PERPENDICULAR\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is (0.928, -0.371)</span>\n</code></pre>\n"},{"syntax":"rotate(angle)","name":"rotate","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates this vector by 'angle' degrees about the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707)</span>\n</code></pre>\n<p><strong>See also</strong>: getRotated()</p>\n","desc":"<p>Rotate this vector by angle degrees around the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, √2)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 1)</span>\n</code></pre>\n"},{"syntax":"rotate(angle, &pivot)","name":"rotate","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>pivot","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates this vector by 'angle' degrees about the point 'pivot'.</p>\n","desc":"<p>Like <a href=\"#rotate\">rotate</a> but rotates around pivot rather than around the origin.</p>\n"},{"syntax":"rotateRad(angle)","name":"rotateRad","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates this vector by 'angle' radians about the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707)</span>\n</code></pre>\n<p><strong>See also</strong>: getRotatedRad()</p>\n","desc":"<p>Rotate this vector by angle radians around the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, √2)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 1)</span>\n</code></pre>\n"},{"syntax":"rotateRad(angle, &pivot)","name":"rotateRad","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>pivot","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotates this vector by 'angle' radians about the point 'pivot'.</p>\n","desc":"<p>Like <a href=\"#rotateRad\">rotateRad</a> but rotates around pivot rather than around the origin.</p>\n"},{"syntax":"scale(length)","name":"scale","returns":"ofVec2f &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> <span class=\"token keyword\">float</span> length","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Scales this vector up or down so that it has the requested length.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9, 12), with length 15</span>\n</code></pre>\n<p><strong>See also</strong>: getScaled()</p>\n","desc":"<p>Scales this vector up or down so that it has the requested length.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9, 12), with length 15</span>\n</code></pre>\n"},{"syntax":"set(&vec)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>vec","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the x and y components of this vector by copying the corresponding values from vec.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20</span>\n</code></pre>\n","desc":"<p>Set the x and y components of this vector by copying the corresponding values from vec.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20</span>\n</code></pre>\n"},{"syntax":"set(scalar)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> scalar","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(x, y)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>v1.set(40, 20);</p>\n<pre><code>\n\n\n\n\n</code></pre>\n","desc":"<p>Set x and y components of this vector with just one function call.</p>\n<pre><code>ofVec2f v1<span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n"},{"syntax":"squareDistance(&pnt)","name":"squareDistance","returns":"float","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofVec2f <span class=\"token operator\">&amp;</span>pnt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Distance between two points squared.</p>\n<p>Treats both this vector and pnt as points in 2D space, and calculates and\nreturns the squared distance between them.</p>\n<pre><code>ofVec2f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5</span>\n</code></pre>\n<p>Use as a much faster alternative to <a href=\"#distance\">distance</a> if you don't need to\nknow an exact number but rather just a rough idea of distance (for example\nwhen finding the shortest distance of a bunch of points to a reference point,\nwhere it doesn't matter exactly what the distances are, you just want the\nshortest). It avoids the square root calculation that is ordinarily required\nto calculate a length.</p>\n<p><strong>Returns</strong>: The distance squared as float</p>\n<p><strong>See also</strong>: distance()</p>\n","desc":"<p>Treats both this vector and pnt as points in 2D space, and calculates and returns the squared distance between them.</p>\n<pre><code>ofVec2f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5</span>\n</code></pre>\n<p>Use as a much faster alternative to <a href=\"#distance\">distance</a> if you don't need to know an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.</p>\n"},{"syntax":"zero()","name":"zero","returns":"ofVec2f","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"True","visible":"True","advanced":"False","short":"","desc":""},{"name":"DIM","type":"const int","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>\\cond INTERNAL</p>\n","desc":""},{"name":"x","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>Stores the <code>x</code> component of the vector.</p>\n","desc":"<p>Stores the X component of this vector.</p>\n"},{"name":"y","type":"float","access":"public","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"<p>Stores the <code>y</code> component of the vector.</p>\n","desc":"<p>Stores the Y component of this vector.</p>\n"},{}],"document":"<p>#class ofVec2f</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>\\brief\nofVec2f is a class for storing a two dimensional vector.</p>\n<p>Moving through space requires knowledge of where things are and where they are going.\nVector Maths is the class of mathematics that gives us control over these\nthings in space, allowing for elegant and intuitive descriptions of complex\nstructures and movement. Vectors are at the heart of animations, particle\nsystems, and 2D and 3D graphics.</p>\n<p>Vectors in mathematics in general are entities with magnitude (also called\nlength) and direction. A vector whose magnitude is 1 (ie a vector that is\n<em>normalized</em>) is called a <em>unit vector</em>. Unit vectors are very handy for\nstoring directions as they can be easily scaled up (or down) to represent\nmotion in a particular direction with a particular length.</p>\n<p><em>You will also see the term vector used to describe an array of objects in C++\n(such as text strings). Don't let this confuse you, they are quite different:\none of them is a mathematical term for a fixed-length list of numbers that\nyou can do mathematical operations on, the other is a C++-specific term that\nmeans 'dynamically sizeable array'.</em></p>\n<p>ofVec2f has two member variables, x and y, which allow to conveniently store\n2D properties of an object such as its position, velocity, or acceleration.</p>\n<pre><code>ofVec2f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1.x is 0, v1.y is 0</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now v1.x is 10, v1.y is 50</span>\n</code></pre>\n<p>Using ofVec2f greatly simplifies arithmetic operations in two dimensions. For\nexample if you have two vectors v1 and v2, both of which represent a 2D change\nin position, you can find the total change of position of both of them just by\ndoing an addition v1 + v2:</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 represents walking 5 steps forward then 2 steps sideways</span>\nofVec2f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 represents walking 1 step forward then 1 step sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if you do v1 followed by v2? just add v1 and v2 together:</span>\nofVec2f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is 6 steps forward then 3 steps sideways</span>\n</code></pre>\n<p>You can scale an ofVec2f by multiplying it with a float:</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// walk 5 steps forward and 2 steps right</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if we do v1 three times?</span>\nofVec2f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is 15 steps forward and 6 steps right</span>\n</code></pre>\n<p>This also works for subtraction and division.</p>\n<p>As you can see this really makes dealing with vectors as easy as dealing with\nsingle floats or ints, and can reduce the number of lines of code you have to\nwrite by half, at the same time making your code much easier to read and\nunderstand!</p>\n<p><strong>See also</strong>: ofVec3f for 3D vectors</p>\n<p><strong>See also</strong>: ofVec4f for 4D vectors</p>\n<p>##Description</p>\n<p>ofVec2f is a class for storing a two dimensional vector.</p>\n<p>Moving through space requires knowledge of where things are and where they are going. Vector Maths is the class of mathematics that gives us control over these things in space, allowing for elegant and intuitive descriptions of complex structures and movement. Vectors are at the heart of animations, particle systems, and 2D and 3D graphics.</p>\n<p>Vectors in mathematics in general are entities with magnitude (also called length) and direction. A vector whose magnitude is 1 (ie a vector that is <em>normalized</em>) is called a <em>unit vector</em>. Unit vectors are very handy for storing directions as they can be easily scaled up (or down) to represent motion in a particular direction with a particular length.</p>\n<p><em>You will also see the term vector used to describe an array of objects in C++ (such as text strings). Don't let this confuse you, they are quite different: one of them is a mathematical term for a fixed-length list of numbers that you can do mathematical operations on, the other is a C++-specific term that means 'dynamically sizeable array'.</em></p>\n<p>ofVec2f has two member variables, x and y, which allow to conveniently store 2D properties of an object such as its position, velocity, or acceleration.</p>\n<pre><code>ofVec2f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1.x is 0, v1.y is 0</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// now v1.x is 10, v1.y is 50</span>\n</code></pre>\n<p>Using ofVec2f greatly simplifies arithmetic operations in two dimensions. For example if you have two vectors v1 and v2, both of which represent a 2D change in position, you can find the total change of position of both of them just by doing an addition v1 + v2:</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 represents walking 5 steps forward then 2 steps sideways</span>\nofVec2f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 represents walking 1 step forward then 1 step sideways</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if you do v1 followed by v2? just add v1 and v2 together:</span>\nofVec2f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is 6 steps forward then 3 steps sideways</span>\n</code></pre>\n<p>You can scale an ofVec2f by multiplying it with a float:</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// walk 5 steps forward and 2 steps right</span>\n<span class=\"token comment\" spellcheck=\"true\">// what happens if we do v1 three times?</span>\nofVec2f result <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// result is 15 steps forward and 6 steps right</span>\n</code></pre>\n<p>This also works for subtraction and division.</p>\n<p>As you can see this really makes dealing with vectors as easy as dealing with single floats or ints, and can reduce the number of lines of code you have to write by half, at the same time making your code much easier to read and understand!</p>\n<p>##Methods</p>\n<p>###bool align(&amp;vec, tolerance = 0.0001f)</p>\n<p>&lt;!--\n<em>syntax: align(&amp;vec, tolerance = 0.0001f)</em>\n<em>name: align</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec, float tolerance=0.0001f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Determine if two vectors are aligned</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">align</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// returns true</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to compare alignment with</p>\n<p>tolerance an angle tolerance/threshold (specified in degrees) for deciding if the vectors are sufficiently aligned.</p>\n<p><strong>Returns</strong>: true if both vectors are aligned (pointing in the same direction).</p>\n<p>_description: _</p>\n<p>Returns true if both vectors are aligned (pointing in the same direction). tolerance is an angle tolerance/threshold (specified in degrees) for deciding if the vectors are sufficiently aligned.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.align(v2) returns true</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool alignRad(&amp;vec, tolerance = 0.0001f)</p>\n<p>&lt;!--\n<em>syntax: alignRad(&amp;vec, tolerance = 0.0001f)</em>\n<em>name: alignRad</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec, float tolerance=0.0001f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Determine if two vectors are aligned with tolerance in radians</p>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to compare alignment with</p>\n<p>tolerance an angle tolerance/threshold (specified in radians) for deciding if the vectors are sufficiently aligned.</p>\n<p><strong>See also</strong>: align()</p>\n<p>_description: _</p>\n<p>Just like <a href=\"#align\">align</a> but the angle tolerance is specified in radians rather than degrees.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float angle(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: angle(&amp;vec)</em>\n<em>name: angle</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculate the angle to another vector in degrees</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to calculate the angle to</p>\n<p><strong>Returns</strong>: The angle in degrees (-180...180)</p>\n<p>_description: _</p>\n<p>Calculate and return the angle in degrees between this vector and vec.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is 90</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float angleRad(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: angleRad(&amp;vec)</em>\n<em>name: angleRad</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculate the angle to another vector in radians</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angleRad</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is HALF_PI</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to calculate the angle to</p>\n<p><strong>Returns</strong>: The angle in radians (-PI...PI)</p>\n<p>_description: _</p>\n<p>Calculate and return the angle in radians between this vector and vec.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> angle <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">angleRad</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// angle is HALF_PI</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; average(*points, num)</p>\n<p>&lt;!--\n<em>syntax: average(*points, num)</em>\n<em>name: average</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec2f *points, size_t num</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Average vector over an array of points</p>\n<p>Sets this vector to be the average (<em>centre of gravity</em> or <em>centroid</em>)\nof a given array of ofVec2f.</p>\n<pre><code><span class=\"token keyword\">int</span> numPoints <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nofVec2f points<span class=\"token punctuation\">[</span>numPoints<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>numPoints<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nofVec2f centroid<span class=\"token punctuation\">;</span>\ncentroid<span class=\"token punctuation\">.</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span> points<span class=\"token punctuation\">,</span> numPoints <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// centroid now is the centre of gravity/average of all the random points</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>points The array of ofVec2f to avarage over</p>\n<p>num specifies the number of ofVec2f in the array.</p>\n<p><strong>Returns</strong>: Vector that is the avarage of the points in the array</p>\n<p>_description: _</p>\n<p>Sets this vector to be the average (<em>centre of gravity</em> or <em>centroid</em>) of a given array of ofVec2fs. points is the array of ofVec2fs and num specifies the number of ofVec2fs in the array.</p>\n<pre><code><span class=\"token keyword\">int</span> numPoints <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nofVec2f points<span class=\"token punctuation\">[</span>numPoints<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>numPoints<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tpoints<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofRandom</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nofVec2f centroid<span class=\"token punctuation\">;</span>\ncentroid<span class=\"token punctuation\">.</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span> points<span class=\"token punctuation\">,</span> numPoints <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">// centroid now is the centre of gravity/average of all the random points</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float distance(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: distance(&amp;pnt)</em>\n<em>name: distance</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Distance between two points.</p>\n<p>Treats both this vector and pnt as points in 2D space, and calculates and\nreturns the distance between them.</p>\n<pre><code>ofVec2f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5</span>\n</code></pre>\n<p>Distance involves a square root calculation, which is one of the slowest\nthings you can do in programming. If you don't need an exact number but rather\njust a rough idea of distance (for example when finding the shortest distance\nof a bunch of points to a reference point, where it doesn't matter exactly\nwhat the distances are, you just want the shortest), you can use\nsquareDistance() instead.</p>\n<p><strong>Parameters:</strong></p>\n<p>pnt The point to calculate the distance to</p>\n<p><strong>Returns</strong>: The distance as float</p>\n<p><strong>See also</strong>: squareDistance()</p>\n<p>_description: _</p>\n<p>Treats both this vector and pnt as points in 2D space, and calculates and returns the distance between them.</p>\n<pre><code>ofVec2f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5</span>\n</code></pre>\n<p>distance involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest), you can use <a href=\"#squareDistance\">squareDistance</a> instead.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float dot(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: dot(&amp;vec)</em>\n<em>name: dot</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns the dot product of this vector with 'vec'.</p>\n<p>The <em>dot product</em> of two vectors, also known as the <em>scalar product</em>, is\nthe product of the magnitude of the two vectors and the cosine of the\nangle between them.</p>\n<p>One interpretation of the dot product is as a measure of how closely two\nvectors align with each other. If they point in exactly the same\ndirection, their dot product will simply be the product of their\nmagnitudes, if they are perpendicular, their dot product will be 0, and\nif they point in opposite directions, their dot product will be\nnegative.</p>\n<p>The dot product is in contrast to the <em>cross product</em>, which returns a\nvector rather than a scalar.</p>\n<pre><code>ofVec2f <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 2, parallel to x-axis</span>\nofVec2f <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 5, 53.13 degree angle to a1</span>\n<span class=\"token keyword\">float</span> dot <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 2 * 5 * cos(53.13) = 6.0</span>\n\nofVec2f <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, parallel to x-axis</span>\nofVec2f <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, 90 degree angle to a2</span>\ndot <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 1 * 1 * cos(90) = 0.0</span>\n\nofVec2f <span class=\"token function\">a3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, parallel to y-axis</span>\nofVec2f <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// magnitude 1, 180 degree angle to a3</span>\ndot <span class=\"token operator\">=</span> a3<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 1 * 1 * cos(180) = -1.0</span>\n</code></pre>\n<p>_description: _</p>\n<p>Calculate and return the dot product of this vector with vec.</p>\n<p><em>Dot product</em> (less commonly known as <em>Euclidean inner product</em>) expresses the angular relationship between two vectors. In other words it is a measure of how <em>parallel</em> two vectors are. If they are completely perpendicular the dot product is 0; if they are completely parallel their dot product is either 1 if they are pointing in the same direction, or -1 if they are pointing in opposite directions.</p>\n<p><img src=\"../math/dotproduct.png\" alt=\"DOT\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofvec2f <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">b1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 90 degree angle to a1</span>\ndot <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 0, ie cos(90)</span>\n\nofVec2f <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f <span class=\"token function\">b2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 45 degree angle to a2</span>\nb2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// vectors should to be unit vectors (normalized)</span>\n<span class=\"token keyword\">float</span> dot <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is 0.707, ie cos(45)</span>\n\nofVec2f <span class=\"token function\">a3</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">b3</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 180 degree angle to a3</span>\ndot <span class=\"token operator\">=</span> a3<span class=\"token punctuation\">.</span><span class=\"token function\">dot</span><span class=\"token punctuation\">(</span>b3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// dot is -1, ie cos(180)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f getInterpolated(&amp;pnt, p)</p>\n<p>&lt;!--\n<em>syntax: getInterpolated(&amp;pnt, p)</em>\n<em>name: getInterpolated</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;pnt, float p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Linear interpolation</p>\n<p>Perform a linear interpolation of this vector's position towards pnt\nand return the interpolated position without altering the original\nvector.</p>\n<p><code>p</code> is normally between 0 and 1 and where 0 means stay the original position and 1\nmeans move all the way to pnt, but you can also have p greater than 1\novershoot pnt, or less than 0 to move backwards away from pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (5, 7.5)</span>\nofVec3f v4 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v4 is (8, 9)</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>pnt The point to move towards</p>\n<p>p The amount to move towards pnt</p>\n<p><strong>See also</strong>: interpolate()</p>\n<p>_description: _</p>\n<p>Perform a linear interpolation of this vector's position towards pnt and return the interpolated position without altering the original vector. p controls the amount to move towards pnt. p is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to pnt, but you can also have p greater than 1 overshoot pnt, or less than 0 to move backwards away from pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (5, 7.5)</span>\nofVec3f v4 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getInterpolated</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v4 is (8, 9)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f getLimited(max)</p>\n<p>&lt;!--\n<em>syntax: getLimited(max)</em>\n<em>name: getLimited</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: float max</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get vector limited by length</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nofVec2f v1Limited <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1Limited is (2.9417, 0.58835) which has length of 3 in the same direction as v1</span>\nofVec2f v2Limited <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2Limited is (2, 1) (same as v2)</span>\n</code></pre>\n<p><strong>See also</strong>: limit()</p>\n<p><strong>Parameters:</strong></p>\n<p>max The maximum length of the vector to return</p>\n<p><strong>Returns</strong>: A copy of this vector with its length (magnitude) restricted to a\nmaximum of max units by scaling down if necessary.</p>\n<p>_description: _</p>\n<p>Return a copy of this vector with its length (magnitude) restricted to a maximum of max units by scaling down if necessary.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nofVec2f v1Limited <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">// v1Limited is (2.9417, 0.58835) which has length of 3 in the same direction as v1</span>\nofVec2f v2Limited <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getLimited</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2Limited is (2, 1) (same as v2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f getMapped(&amp;origin, &amp;vx, &amp;vy)</p>\n<p>&lt;!--\n<em>syntax: getMapped(&amp;origin, &amp;vx, &amp;vy)</em>\n<em>name: getMapped</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;origin, const ofVec2f &amp;vx, const ofVec2f &amp;vy</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get vector mapped to new coordinate system</p>\n<p>In most cases you want <code>vx</code> and <code>vy</code> to be perpendicular and of unit length; if\nthey are not perpendicular you will have shearing as part of the mapping, and\nif they are not of unit length you will have scaling as part of the mapping.</p>\n<p><strong>Returns</strong>: A new ofVec2f calculated by copying this vector and then mapping from\nits default coordinate system -- origin (0,0), X direction (1,0), Y direction\n(0,1) -- to a new coordinate system defined with origin at origin, X direction\nvx, and Y direction vy.</p>\n<p>_description: _</p>\n<p>Return a new ofVec2f calculated by copying this vector and then mapping from its default coordinate system -- origin (0,0), X direction (1,0), Y direction (0,1) -- to a new coordinate system defined with origin at origin, X direction vx, and Y direction vy.</p>\n<p><em>In most cases you want vx and vy to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.</em></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f getMiddle(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: getMiddle(&amp;pnt)</em>\n<em>name: getMiddle</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Calculate and return the midpoint between this vector and pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f mid <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// mid gets (7.5, 5)</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>pnt The vector to find the middle to</p>\n<p><strong>Returns</strong>: The middle between this vector and <code>pnt</code></p>\n<p><strong>See also</strong>: middle()</p>\n<p>_description: _</p>\n<p>Calculate and return the midpoint between this vector and pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f mid <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getMiddle</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// mid gets (7.5, 5)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f getNormalized()</p>\n<p>&lt;!--\n<em>syntax: getNormalized()</em>\n<em>name: getNormalized</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a normalized copy of this vector.</p>\n<p><em>Normalization</em> means to scale the vector so that its length\n(magnitude) is exactly 1, at which stage all that is left is the\ndirection. A normalized vector is usually called a <em>unit vector</em>, and\ncan be used to represent a pure direction (heading).</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v1Normalized <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (1, 0)</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2Normalized <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, √2)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a normalized copy of this vector.</p>\n<p><em>Normalization</em> means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a <em>unit vector</em>, and can be used to represent a pure direction (heading).</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v1Normalized <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (1, 0)</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2Normalized <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getNormalized</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, √2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f getPerpendicular()</p>\n<p>&lt;!--\n<em>syntax: getPerpendicular()</em>\n<em>name: getPerpendicular</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the <em>normalized</em> ofVec2f that is perpendicular to this vector\n(ie rotated 90 degrees and normalized).</p>\n<p><img src=\"math/perpendicular.png\" alt=\"PERPENDICULAR\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f u <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// u is (0.928, -0.371)</span>\n</code></pre>\n<p><strong>See also</strong>: perpendicular()</p>\n<p>_description: _</p>\n<p>Return the <strong>normalized</strong> ofVec2f that is perpendicular to this vector (ie rotated 90 degrees and normalized).</p>\n<p><img src=\"../math/perpendicular.png\" alt=\"PERPENDICULAR\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f u <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getPerpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// u is (0.928, -0.371)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float * getPtr()</p>\n<p>&lt;!--\n<em>syntax: getPtr()</em>\n<em>name: getPtr</em>\n<em>returns: float *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a pointer to the memory position of the first element of the vector (x);\nthe second element (y) immediately follows it in memory.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> v1Ptr <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n</code></pre>\n<p>This is very useful when using arrays of ofVec2fs to store geometry\ninformation, as it allows the vector to be treated as a simple C array of\nfloats that can be passed verbatim to OpenGL.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const float * getPtr()</p>\n<p>&lt;!--\n<em>syntax: getPtr()</em>\n<em>name: getPtr</em>\n<em>returns: const float *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Returns a pointer to the memory position of the first element of the vector  (x); the second element (y) immediately follows it in memory.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> <span class=\"token operator\">*</span> v1Ptr <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getPtr</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>v1Ptr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n</code></pre>\n<p>This is very useful when using arrays of ofVec2fs to store geometry information, as it allows the vector to be treated as a simple C array of floats that can be passed verbatim to OpenGL.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f getRotated(angle)</p>\n<p>&lt;!--\n<em>syntax: getRotated(angle)</em>\n<em>name: getRotated</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: float angle</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector that is the result of rotating this vector\nby 'angle' degrees about the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707)</span>\n</code></pre>\n<p><strong>See also</strong>: getRotatedRad()</p>\n<p><strong>See also</strong>: rotate()</p>\n<p>_description: _</p>\n<p>Return a new ofVec2f that is the result of rotating this vector by angle degrees around the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0, 1)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f getRotated(angle, &amp;pivot)</p>\n<p>&lt;!--\n<em>syntax: getRotated(angle, &amp;pivot)</em>\n<em>name: getRotated</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec2f &amp;pivot</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector that is the result of rotating this vector\nby 'angle' degrees about the point 'pivot'.</p>\n<p>_description: _</p>\n<p>Like <a href=\"#getRotated\">getRotated</a> but rotates around pivot rather than around the origin.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f getRotatedRad(angle)</p>\n<p>&lt;!--\n<em>syntax: getRotatedRad(angle)</em>\n<em>name: getRotatedRad</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: float angle</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector that is the result of rotating this vector\nby 'angle' radians about the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (0.707, 0.707)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a new ofVec2f that is the result of rotating this vector by angle radians around the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getRotatedRad</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is (√2, √2)</span>\nofVec3f v3 <span class=\"token operator\">=</span> v2<span class=\"token punctuation\">.</span><span class=\"token function\">getRotated</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (0, 1)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f getRotatedRad(angle, &amp;pivot)</p>\n<p>&lt;!--\n<em>syntax: getRotatedRad(angle, &amp;pivot)</em>\n<em>name: getRotatedRad</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec2f &amp;pivot</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector that is the result of rotating this vector\nby 'angle' radians about the origin.</p>\n<p>_description: _</p>\n<p>Like <a href=\"#getRotatedRad\">getRotatedRad</a> but rotates around pivot rather than around the origin.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f getScaled(length)</p>\n<p>&lt;!--\n<em>syntax: getScaled(length)</em>\n<em>name: getScaled</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const float length</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return a new ofVec2f that is the result of scaling this vector up or down so\nthat it has the requested length.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ( 9, 12 ), length is now 15</span>\n<span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span>ofVec2f\n\n\n<span class=\"token operator\">*</span><span class=\"token operator\">*</span>See also<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n\n\n\n_description<span class=\"token operator\">:</span> _\n\nReturn a <span class=\"token keyword\">new</span> ofVec2f that is the result of scaling <span class=\"token keyword\">this</span> vector up <span class=\"token operator\">or</span> down so that it has the requested length<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span>cpp<span class=\"token punctuation\">}</span>\nofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">.</span><span class=\"token function\">getScaled</span><span class=\"token punctuation\">(</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// ( 9, 12 ), length is now 15</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; interpolate(&amp;pnt, p)</p>\n<p>&lt;!--\n<em>syntax: interpolate(&amp;pnt, p)</em>\n<em>name: interpolate</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;pnt, float p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Linear interpolation</p>\n<p>Perform a linear interpolation of this vector's position towards pnt. p\ncontrols the amount to move towards pnt. p is normally between 0 and 1 and\nwhere 0 means stay the original position and 1 means move all the way to pnt,\nbut you can also have p greater than 1 overshoot pnt, or less than 0 to move\nbackwards away from pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875)</span>\n</code></pre>\n<p><strong>See also</strong>: getInterpolated()</p>\n<p>_description: _</p>\n<p>Perform a linear interpolation of this vector's position towards pnt. p controls the amount to move towards pnt. p is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to pnt, but you can also have p greater than 1 overshoot pnt, or less than 0 to move backwards away from pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">interpolate</span><span class=\"token punctuation\">(</span> v2<span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isAligned(&amp;vec, tolerance = 0.0001f)</p>\n<p>&lt;!--\n<em>syntax: isAligned(&amp;vec, tolerance = 0.0001f)</em>\n<em>name: isAligned</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec, float tolerance=0.0001f</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Determine if two vectors are aligned</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">isAligned</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">// returns true</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to compare alignment with</p>\n<p>tolerance an angle tolerance/threshold (specified in degrees) for deciding if the vectors are sufficiently aligned.</p>\n<p><strong>Returns</strong>: true if both vectors are aligned (pointing in the same direction).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool isAlignedRad(&amp;vec, tolerance = 0.0001f)</p>\n<p>&lt;!--\n<em>syntax: isAlignedRad(&amp;vec, tolerance = 0.0001f)</em>\n<em>name: isAlignedRad</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec, float tolerance=0.0001f</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Determine if two vectors are aligned with tolerance in radians</p>\n<p><strong>Parameters:</strong></p>\n<p>vec The vector to compare alignment with</p>\n<p>tolerance an angle tolerance/threshold (specified in radians) for deciding if the vectors are sufficiently aligned.</p>\n<p><strong>See also</strong>: isAligned()</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float length()</p>\n<p>&lt;!--\n<em>syntax: length()</em>\n<em>name: length</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the length (magnitude) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5 (3,4,5 triangle)</span>\n</code></pre>\n<p>length() involves a square root calculation, which is one of the slowest things\nyou can do in programming. If you don't need an exact number but rather just a\nrough idea of a length (for example when finding the shortest distance of a\nbunch of points to a reference point, where it doesn't matter exactly what the\nlengths are, you just want the shortest), you can use\nlengthSquared() instead.</p>\n<p><strong>See also</strong>: lengthSquared()</p>\n<p>_description: _</p>\n<p>Return the length (magnitude) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5 (3,4,5 triangle)</span>\n</code></pre>\n<p>length involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest), you can use <a href=\"#squareLength\">squareLength</a> instead.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float lengthSquared()</p>\n<p>&lt;!--\n<em>syntax: lengthSquared()</em>\n<em>name: lengthSquared</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n<em>version_deprecated: 007</em>\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return the squared length (squared magnitude) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5 (3,4,5 triangle)</span>\n</code></pre>\n<p>Use as a much faster alternative to length() if you don't\nneed to know an accurate length but rather just a rough idea of a\nlength (for example when finding the shortest distance of a bunch of\npoints to a reference point, where it doesn't matter exactly what the\nlengths are, you just want the shortest). It avoids the square root\ncalculation that is ordinarily required to calculate a length.</p>\n<p><strong>See also</strong>: length()</p>\n<p>_description: _</p>\n<p>Return the squared length (squared magnitude) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> len <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// len is 5 (3,4,5 triangle)</span>\n</code></pre>\n<p>Use as a much faster alternative to <a href=\"#length\">length</a> if you don't need to know an accurate length but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; limit(max)</p>\n<p>&lt;!--\n<em>syntax: limit(max)</em>\n<em>name: limit</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: float max</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Restrict the length (magnitude) of this vector to a maximum of max units by scaling down if necessary.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1 is now (2.9417, 0.58835) which has length of 3 in the same direction as at initialization</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2 is unchanged</span>\n</code></pre>\n<p><strong>See also</strong>: limit()</p>\n<p>_description: _</p>\n<p>Restrict the length (magnitude) of this vector to a maximum of max units by scaling down if necessary.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 5.1</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is about 2.2</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">// v1 is now (2.9417, 0.58835) which has length of 3 in the same direction as at initialization</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v2 is unchanged</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; map(&amp;origin, &amp;vx, &amp;vy)</p>\n<p>&lt;!--\n<em>syntax: map(&amp;origin, &amp;vx, &amp;vy)</em>\n<em>name: map</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;origin, const ofVec2f &amp;vx, const ofVec2f &amp;vy</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Maps this vector from its default coordinate system -- origin (0,0), X\ndirection (1,0), Y direction (0,1) -- to a new coordinate system defined with\norigin at origin, X direction vx, and Y direction vy.</p>\n<p>In most case you want vx and vy to be perpendicular and of unit length; if\nthey are not perpendicular you will have shearing as part of the mapping, and\nif they are not of unit length you will have scaling as part of the mapping.</p>\n<p><strong>See also</strong>: perpendicular()</p>\n<p>_description: _</p>\n<p>Maps this vector from its default coordinate system -- origin (0,0), X direction (1,0), Y direction (0,1) -- to a new coordinate system defined with origin at origin, X direction vx, and Y direction vy.</p>\n<p><em>In most case you want vx and vy to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.</em></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool match(&amp;vec, tolerance = 0.0001f)</p>\n<p>&lt;!--\n<em>syntax: match(&amp;vec, tolerance = 0.0001f)</em>\n<em>name: match</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec, float tolerance=0.0001f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns true if each component is <em>close enough</em> to its corresponding\ncomponent in vec, where what is <em>close enough</em> is determined by the value of\ntolerance:</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19.999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.1) returns true</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.001) returns false</span>\n</code></pre>\n<p>This is handy if, for example, you want to find out when a point becomes\n<em>close enough</em> to another point to trigger an event.</p>\n<p>_description: _</p>\n<p>Returns true if each component is <em>close enough</em> to its corresponding component in vec, where what is <em>close enough</em> is determined by the value of tolerance:</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40.01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19.999</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.1) returns true</span>\n<span class=\"token comment\" spellcheck=\"true\">// v1.match(v2, 0.001) returns false</span>\n</code></pre>\n<p>This is handy if, for example, you want to find out when a point becomes <em>close enough</em> to another point to trigger an event.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; middle(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: middle(&amp;pnt)</em>\n<em>name: middle</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this vector to the midpoint between itself and pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875)</span>\n</code></pre>\n<p><strong>See also</strong>: getMiddle()</p>\n<p>_description: _</p>\n<p>Set this vector to the midpoint between itself and pnt.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// go go gadget zeno</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (5, 7.5)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (7.5, 8.75)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (8.75, 9.375)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">middle</span><span class=\"token punctuation\">(</span> v2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9.375, 9.6875)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; normalize()</p>\n<p>&lt;!--\n<em>syntax: normalize()</em>\n<em>name: normalize</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Normalize the vector.</p>\n<p><em>Normalizing</em> means to scale the vector so that its length (magnitude) is\nexactly 1, at which stage all that is left is the direction. A normalized\nvector is usually called a <em>unit vector</em>, and can be used to represent a pure\ndirection (heading).</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (1, 0)</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (√2, √2)</span>\n</code></pre>\n<p><strong>See also</strong>: getNormalized()</p>\n<p>_description: _</p>\n<p>Normalize the vector.</p>\n<p><em>Normalizing</em> means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a <em>unit vector</em>, and can be used to represent a pure direction (heading).</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (1, 0)</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">normalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2 is now (√2, √2)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec2f(&amp;v)</h3>\n<p>&lt;!--\n<em>syntax: ofVec2f(&amp;v)</em>\n<em>name: ofVec2f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec2 &amp;v</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec2f(&amp;v)</h3>\n<p>&lt;!--\n<em>syntax: ofVec2f(&amp;v)</em>\n<em>name: ofVec2f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;v</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec2f(&amp;v)</h3>\n<p>&lt;!--\n<em>syntax: ofVec2f(&amp;v)</em>\n<em>name: ofVec2f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const glm::vec4 &amp;v</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec2f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec2f(&amp;vec)</em>\n<em>name: ofVec2f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofVec3f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Create a 2D vector (ofVec2f) from a 3D vector (ofVec3f) by\n\\throwing away the z component of the 3D vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">mom3d</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 3d vector</span>\nofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom3d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v.x is 40, v.y is 20</span>\n</code></pre>\n<p>_description: _</p>\n<p>Create a 2D vector (ofVec2f) from a 3D vector (ofVec3f) by throwing away the z component of the 3D vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">mom3d</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 3d vector </span>\nofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom3d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v.x is 40, v.y is 20</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec2f(&amp;vec)</h3>\n<p>&lt;!--\n<em>syntax: ofVec2f(&amp;vec)</em>\n<em>name: ofVec2f</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofVec4f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Create a 2D vector (ofVec2f) from a 4D vector (ofVec4f) by throwing away the z\nand w components of the 4D vector.</p>\n<pre><code>ofVec4f <span class=\"token function\">mom4d</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 4d vector</span>\nofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom4d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v.x is 40, v.y is 20</span>\n</code></pre>\n<p>_description: _</p>\n<p>Create a 2D vector (ofVec2f) from a 4D vector (ofVec4f) by throwing away the z and w components of the 4D vector.</p>\n<pre><code>ofVec3f <span class=\"token function\">mom4d</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 4d vector </span>\nofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span>mom4d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v.x is 40, v.y is 20</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec2f()</h3>\n<p>&lt;!--\n<em>syntax: ofVec2f()</em>\n<em>name: ofVec2f</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a 2D vector.</p>\n<pre><code>ofVec2f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// default: v1.x is 0, v1.y is 0</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3.x is 0.1, v3.y is 0.3</span>\n</code></pre>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec2f(scalar)</h3>\n<p>&lt;!--\n<em>syntax: ofVec2f(scalar)</em>\n<em>name: ofVec2f</em>\n_returns: _\n_returns_description: _\n<em>parameters: float scalar</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a 2D vector with <code>x</code> and <code>y</code> set to <code>scalar</code></p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofVec2f(x, y)</h3>\n<p>&lt;!--\n<em>syntax: ofVec2f(x, y)</em>\n<em>name: ofVec2f</em>\n_returns: _\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Construct a 2D vector with specific <code>x</code> and `y components</p>\n<pre><code>ofVec2f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// default: v1.x is 0, v1.y is 0</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3.x is 0.1, v3.y is 0.3</span>\n</code></pre>\n<p><strong>Parameters:</strong></p>\n<p>x The x component</p>\n<p>y The y component</p>\n<p>_description: _</p>\n<p>Construct a 2D vector. Defaults to (0,0).</p>\n<pre><code>ofVec2f v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// default: v1.x is 0, v1.y is 0</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20</span>\nofVec3f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3.x is 0.1, v3.y is 0.3</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f one()</p>\n<p>&lt;!--\n<em>syntax: one()</em>\n<em>name: one</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator!=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator!=(&amp;vec)</em>\n<em>name: operator!=</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Check for inequality between two ofVec2f</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v2 ) is true</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v3 ) is false</span>\n</code></pre>\n<p><strong>Returns</strong>: true if any component is different to its corresponding\ncomponent in vec, ie if 'x != vec.x' or 'y != vec.y', otherwise returns\nfalse.</p>\n<p>_description: _</p>\n<p>Returns true if any component is different to its corresponding component in vec, ie if x != vec.x or y != vec.y; otherwise returns false.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v2 ) is true</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 != v3 ) is false</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f operator*(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator*(&amp;vec)</em>\n<em>name: operator*</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector (x<em>vec.x , y</em>vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (80, 80)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n<p>_description: _</p>\n<p>Returns a new vector (x<em>vec.x,y</em>vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (80, 80)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f operator*(f)</p>\n<p>&lt;!--\n<em>syntax: operator*(f)</em>\n<em>name: operator*</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return a new ofVec2f that is this vector scaled by multiplying both x\nand y members by the float.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a new ofVec2f that is this vector scaled by multiplying both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; operator*=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator*=(&amp;vec)</em>\n<em>name: operator*=</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Multiplies x by vec.x, and multiplies y by vec.y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (80, 80)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n<p>_description: _</p>\n<p>Multiplies x by vec.x, and multiplies y by vec.y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (80, 80)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; operator*=(f)</p>\n<p>&lt;!--\n<em>syntax: operator*=(f)</em>\n<em>name: operator*=</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale this vector by multiplying both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Scale this vector by multiplying both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (8, 20)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f operator+(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator+(&amp;vec)</em>\n<em>name: operator+</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Super easy vector addition. Returns a new vector (x+vec.x,y+vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (65, 70)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Super easy vector addition. Returns a new vector (x+vec.x,y+vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (65, 70)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f operator+(f)</p>\n<p>&lt;!--\n<em>syntax: operator+(f)</em>\n<em>name: operator+</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector with a float value f added to both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Returns a new vector with a float value f added to both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; operator+=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator+=(&amp;vec)</em>\n<em>name: operator+=</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Super easy addition assignment. Adds vec.x to x, and adds vec.y to y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (65, 70)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Super easy addition assignment. Adds vec.x to x, and adds vec.y to y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (65, 70)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; operator+=(f)</p>\n<p>&lt;!--\n<em>syntax: operator+=(f)</em>\n<em>name: operator+=</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Adds a float value f to both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Adds a float value f to both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (12, 15)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f operator-(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator-(&amp;vec)</em>\n<em>name: operator-</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Super easy vector subtraction. Returns a new vector (x-vec.x,y-vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (15, -30)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Super easy vector subtraction. Returns a new vector (x-vec.x,y-vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v3 is (15, -30)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f operator-()</p>\n<p>&lt;!--\n<em>syntax: operator-()</em>\n<em>name: operator-</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new ofVec2f that is the inverted version (mirrored in X and Y) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-2, -5)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Returns a new ofVec2f that is the inverted version (mirrored in X and Y) of this vector.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>v1<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-2, -5)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f operator-(f)</p>\n<p>&lt;!--\n<em>syntax: operator-(f)</em>\n<em>name: operator-</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector with a float value f subtracted from both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Returns a new vector with a float value f subtracted from both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">-</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; operator-=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator-=(&amp;vec)</em>\n<em>name: operator-=</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Super easy subtraction assignment. Subtracts vec.x from x, and subtracts vec.y from y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (15, -30)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Super easy subtraction assignment. Subtracts vec.x from x, and subtracts vec.y from y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is (15, -30)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; operator-=(f)</p>\n<p>&lt;!--\n<em>syntax: operator-=(f)</em>\n<em>name: operator-=</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Subtract a float value f from both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Subtract a float value f from both x and y members.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">-</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (-8, -5)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f operator/(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator/(&amp;vec)</em>\n<em>name: operator/</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Returns a new vector (x/vec.x,y/vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (20, 5)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n<p>_description: _</p>\n<p>Returns a new vector (x/vec.x,y/vec.y).</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec3f v3 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (20, 5)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f operator/(f)</p>\n<p>&lt;!--\n<em>syntax: operator/(f)</em>\n<em>name: operator/</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Return a new ofVec2f that is this vector scaled by dividing\nboth x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Return a new ofVec2f that is this vector scaled by dividing both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> v1 <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; operator/=(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator/=(&amp;vec)</em>\n<em>name: operator/=</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Divides x by vec.x, and divides y by vec.y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (20, 5)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n<p>_description: _</p>\n<p>Divides x by vec.x, and divides y by vec.y.</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f v2 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">*</span><span class=\"token operator\">=</span> v2<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (20, 5)</span>\n</code></pre>\n<p>Useful for scaling a 2D point by a non-uniform scale.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; operator/=(f)</p>\n<p>&lt;!--\n<em>syntax: operator/=(f)</em>\n<em>name: operator/=</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const float f</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scale this vector by dividing both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25)</span>\n</code></pre>\n<p>_description: _</p>\n<p>Scale this vector by dividing both x and y members by f.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1 <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0.5, 1.25)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool operator==(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: operator==(&amp;vec)</em>\n<em>name: operator==</em>\n<em>returns: bool</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Check for equality between two ofVec2f</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v2 ) is false</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v3 ) is true</span>\n</code></pre>\n<p><strong>Returns</strong>: true if each component is the same as the corresponding\ncomponent in vec, ie if x == vec.x and y == vec.y; otherwise returns\nfalse.</p>\n<p>_description: _</p>\n<p>Returns true if each component is the same as the corresponding component in vec, ie if x == vec.x and y == vec.y; otherwise returns false.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f <span class=\"token function\">v2</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nofVec2f <span class=\"token function\">v3</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v2 ) is false</span>\n<span class=\"token comment\" spellcheck=\"true\">// ( v1 == v3 ) is true</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float &amp; operator<a href=\"n\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"n\"></a></em>\n<em>name: operator[]</em>\n<em>returns: float &amp;</em>\n_returns_description: _\n<em>parameters: int n</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Allows to access the x and y components of an ofVec2f as though it is an array</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n</code></pre>\n<p>This function can be handy if you want to do the same operation to both x and\ny components, as it means you can just make a for loop that repeats twice.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float operator<a href=\"n\"></a></p>\n<p>&lt;!--\n<em>syntax: operator<a href=\"n\"></a></em>\n<em>name: operator[]</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: int n</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: True</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>Allows to access the x and y components of an ofVec2f as though it is an array:</p>\n<pre><code>ofVec2f v1 <span class=\"token operator\">=</span> <span class=\"token function\">ofVec2f</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// x is 40</span>\n<span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> v1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// y is 20</span>\n</code></pre>\n<p>This function can be handy if you want to do the same operation to both x and y components, as it means you can just make a for loop that repeats twice.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; perpendicular()</p>\n<p>&lt;!--\n<em>syntax: perpendicular()</em>\n<em>name: perpendicular</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set this vector to its own <strong>normalized</strong> perpendicular (by\nrotating 90 degrees and normalizing).</p>\n<p><img src=\"math/perpendicular.png\" alt=\"PERPENDICULAR\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is (0.928, -0.371)</span>\n</code></pre>\n<p><strong>See also</strong>: getPerpendicular()</p>\n<p>_description: _</p>\n<p>Set this vector to its own <strong>normalized</strong> perpendicular (by rotating 90 degrees and normalizing).</p>\n<p><img src=\"../math/perpendicular.png\" alt=\"PERPENDICULAR\">\nImage courtesy of Wikipedia</p>\n<pre><code>ofVec2f <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv<span class=\"token punctuation\">.</span><span class=\"token function\">perpendicular</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v is (0.928, -0.371)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; rotate(angle)</p>\n<p>&lt;!--\n<em>syntax: rotate(angle)</em>\n<em>name: rotate</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: float angle</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotates this vector by 'angle' degrees about the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707)</span>\n</code></pre>\n<p><strong>See also</strong>: getRotated()</p>\n<p>_description: _</p>\n<p>Rotate this vector by angle degrees around the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, √2)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> <span class=\"token number\">45</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 1)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; rotate(angle, &amp;pivot)</p>\n<p>&lt;!--\n<em>syntax: rotate(angle, &amp;pivot)</em>\n<em>name: rotate</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec2f &amp;pivot</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotates this vector by 'angle' degrees about the point 'pivot'.</p>\n<p>_description: _</p>\n<p>Like <a href=\"#rotate\">rotate</a> but rotates around pivot rather than around the origin.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; rotateRad(angle)</p>\n<p>&lt;!--\n<em>syntax: rotateRad(angle)</em>\n<em>name: rotateRad</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: float angle</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotates this vector by 'angle' radians about the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotateRad</span><span class=\"token punctuation\">(</span>PI <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (0.707, 0.707)</span>\n</code></pre>\n<p><strong>See also</strong>: getRotatedRad()</p>\n<p>_description: _</p>\n<p>Rotate this vector by angle radians around the origin.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (√2, √2)</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span> PI<span class=\"token operator\">/</span><span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// (0, 1)</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; rotateRad(angle, &amp;pivot)</p>\n<p>&lt;!--\n<em>syntax: rotateRad(angle, &amp;pivot)</em>\n<em>name: rotateRad</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: float angle, const ofVec2f &amp;pivot</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotates this vector by 'angle' radians about the point 'pivot'.</p>\n<p>_description: _</p>\n<p>Like <a href=\"#rotateRad\">rotateRad</a> but rotates around pivot rather than around the origin.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f &amp; scale(length)</p>\n<p>&lt;!--\n<em>syntax: scale(length)</em>\n<em>name: scale</em>\n<em>returns: ofVec2f &amp;</em>\n_returns_description: _\n<em>parameters: const float length</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Scales this vector up or down so that it has the requested length.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9, 12), with length 15</span>\n</code></pre>\n<p><strong>See also</strong>: getScaled()</p>\n<p>_description: _</p>\n<p>Scales this vector up or down so that it has the requested length.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// length is 5</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">scale</span><span class=\"token punctuation\">(</span> <span class=\"token number\">15</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v1 is now (9, 12), with length 15</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(&amp;vec)</p>\n<p>&lt;!--\n<em>syntax: set(&amp;vec)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;vec</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the x and y components of this vector by copying the corresponding values from vec.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20</span>\n</code></pre>\n<p>_description: _</p>\n<p>Set the x and y components of this vector by copying the corresponding values from vec.</p>\n<pre><code>ofVec2f <span class=\"token function\">v1</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f v2<span class=\"token punctuation\">;</span>\nv2<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// v2.x is 40, v2.y is 20</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(scalar)</p>\n<p>&lt;!--\n<em>syntax: set(scalar)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float scalar</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(x, y)</p>\n<p>&lt;!--\n<em>syntax: set(x, y)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>v1.set(40, 20);</p>\n<pre><code>\n\n\n\n\n_description<span class=\"token operator\">:</span> _\n\nSet x <span class=\"token operator\">and</span> y components of <span class=\"token keyword\">this</span> vector with just one function call<span class=\"token punctuation\">.</span>\n\n<span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token operator\">~</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span>cpp<span class=\"token punctuation\">}</span>\nofVec2f v1<span class=\"token punctuation\">;</span>\nv1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float squareDistance(&amp;pnt)</p>\n<p>&lt;!--\n<em>syntax: squareDistance(&amp;pnt)</em>\n<em>name: squareDistance</em>\n<em>returns: float</em>\n_returns_description: _\n<em>parameters: const ofVec2f &amp;pnt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Distance between two points squared.</p>\n<p>Treats both this vector and pnt as points in 2D space, and calculates and\nreturns the squared distance between them.</p>\n<pre><code>ofVec2f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5</span>\n</code></pre>\n<p>Use as a much faster alternative to <a href=\"#distance\">distance</a> if you don't need to\nknow an exact number but rather just a rough idea of distance (for example\nwhen finding the shortest distance of a bunch of points to a reference point,\nwhere it doesn't matter exactly what the distances are, you just want the\nshortest). It avoids the square root calculation that is ordinarily required\nto calculate a length.</p>\n<p><strong>Returns</strong>: The distance squared as float</p>\n<p><strong>See also</strong>: distance()</p>\n<p>_description: _</p>\n<p>Treats both this vector and pnt as points in 2D space, and calculates and returns the squared distance between them.</p>\n<pre><code>ofVec2f <span class=\"token function\">p1</span><span class=\"token punctuation\">(</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nofVec2f <span class=\"token function\">p2</span><span class=\"token punctuation\">(</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">float</span> distance <span class=\"token operator\">=</span> p1<span class=\"token punctuation\">.</span><span class=\"token function\">distance</span><span class=\"token punctuation\">(</span> p2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// distance is 5</span>\n</code></pre>\n<p>Use as a much faster alternative to <a href=\"#distance\">distance</a> if you don't need to know an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec2f zero()</p>\n<p>&lt;!--\n<em>syntax: zero()</em>\n<em>name: zero</em>\n<em>returns: ofVec2f</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###const int DIM</p>\n<p>&lt;!--\n<em>name: DIM</em>\n<em>type: const int</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\cond INTERNAL</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float x</p>\n<p>&lt;!--\n<em>name: x</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Stores the <code>x</code> component of the vector.</p>\n<p>_description: _</p>\n<p>Stores the X component of this vector.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float y</p>\n<p>&lt;!--\n<em>name: y</em>\n<em>type: float</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Stores the <code>y</code> component of the vector.</p>\n<p>_description: _</p>\n<p>Stores the Y component of this vector.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofVec2f\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\n\\brief\nofVec2f is a class for storing a two dimensional vector.\n\nMoving through space requires knowledge of where things are and where they are going.\nVector Maths is the class of mathematics that gives us control over these\nthings in space, allowing for elegant and intuitive descriptions of complex\nstructures and movement. Vectors are at the heart of animations, particle\nsystems, and 2D and 3D graphics.\n\nVectors in mathematics in general are entities with magnitude (also called\nlength) and direction. A vector whose magnitude is 1 (ie a vector that is\n*normalized*) is called a *unit vector*. Unit vectors are very handy for\nstoring directions as they can be easily scaled up (or down) to represent\nmotion in a particular direction with a particular length.\n\n*You will also see the term vector used to describe an array of objects in C++\n(such as text strings). Don't let this confuse you, they are quite different:\none of them is a mathematical term for a fixed-length list of numbers that\nyou can do mathematical operations on, the other is a C++-specific term that\nmeans 'dynamically sizeable array'.*\n\nofVec2f has two member variables, x and y, which allow to conveniently store\n2D properties of an object such as its position, velocity, or acceleration.\n\n~~~~{.cpp}\nofVec2f v1; // v1.x is 0, v1.y is 0\nv1.set( 10, 50 ); // now v1.x is 10, v1.y is 50\n~~~~\n\nUsing ofVec2f greatly simplifies arithmetic operations in two dimensions. For\nexample if you have two vectors v1 and v2, both of which represent a 2D change\nin position, you can find the total change of position of both of them just by\ndoing an addition v1 + v2:\n\n~~~~{.cpp}\nofVec2f v1(5, 2); // v1 represents walking 5 steps forward then 2 steps sideways\nofVec2f v2;\nv2.set(1, 1); // v2 represents walking 1 step forward then 1 step sideways\n// what happens if you do v1 followed by v2? just add v1 and v2 together:\nofVec2f result = v1 + v2; // result is 6 steps forward then 3 steps sideways\n~~~~\n\nYou can scale an ofVec2f by multiplying it with a float:\n\n~~~~{.cpp}\nofVec2f v1(5, 2); // walk 5 steps forward and 2 steps right\n// what happens if we do v1 three times?\nofVec2f result = v1 * 3; // result is 15 steps forward and 6 steps right\n~~~~\n\nThis also works for subtraction and division.\n\nAs you can see this really makes dealing with vectors as easy as dealing with\nsingle floats or ints, and can reduce the number of lines of code you have to\nwrite by half, at the same time making your code much easier to read and\nunderstand!\n\n\n**See also**: ofVec3f for 3D vectors\n\n**See also**: ofVec4f for 4D vectors\n\n\n\n\n\n##Description\n\nofVec2f is a class for storing a two dimensional vector. \n\nMoving through space requires knowledge of where things are and where they are going. Vector Maths is the class of mathematics that gives us control over these things in space, allowing for elegant and intuitive descriptions of complex structures and movement. Vectors are at the heart of animations, particle systems, and 2D and 3D graphics.\n\nVectors in mathematics in general are entities with magnitude (also called length) and direction. A vector whose magnitude is 1 (ie a vector that is *normalized*) is called a *unit vector*. Unit vectors are very handy for storing directions as they can be easily scaled up (or down) to represent motion in a particular direction with a particular length.\n\n*You will also see the term vector used to describe an array of objects in C++ (such as text strings). Don't let this confuse you, they are quite different: one of them is a mathematical term for a fixed-length list of numbers that you can do mathematical operations on, the other is a C++-specific term that means 'dynamically sizeable array'.*\n\nofVec2f has two member variables, x and y, which allow to conveniently store 2D properties of an object such as its position, velocity, or acceleration. \n\n~~~~{.cpp}\nofVec2f v1; // v1.x is 0, v1.y is 0\nv1.set( 10, 50 ); // now v1.x is 10, v1.y is 50\n~~~~\n\nUsing ofVec2f greatly simplifies arithmetic operations in two dimensions. For example if you have two vectors v1 and v2, both of which represent a 2D change in position, you can find the total change of position of both of them just by doing an addition v1 + v2:\n\n~~~~{.cpp}\nofVec2f v1(5, 2); // v1 represents walking 5 steps forward then 2 steps sideways\nofVec2f v2;\nv2.set(1, 1); // v2 represents walking 1 step forward then 1 step sideways\n// what happens if you do v1 followed by v2? just add v1 and v2 together:\nofVec2f result = v1 + v2; // result is 6 steps forward then 3 steps sideways\n~~~~\n\nYou can scale an ofVec2f by multiplying it with a float:\n\n~~~~{.cpp}\nofVec2f v1(5, 2); // walk 5 steps forward and 2 steps right\n// what happens if we do v1 three times?\nofVec2f result = v1 * 3; // result is 15 steps forward and 6 steps right\n~~~~\n\nThis also works for subtraction and division.\n\nAs you can see this really makes dealing with vectors as easy as dealing with single floats or ints, and can reduce the number of lines of code you have to write by half, at the same time making your code much easier to read and understand! \n\n\n\n\n\n##Methods\n\n\n\n###bool align(&vec, tolerance = 0.0001f)\n\n<!--\n_syntax: align(&vec, tolerance = 0.0001f)_\n_name: align_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec2f &vec, float tolerance=0.0001f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermine if two vectors are aligned\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(4, 2);\nv1.align(v2) // returns true\n~~~~\n\n**Parameters:**\n\nvec The vector to compare alignment with\n\ntolerance an angle tolerance/threshold (specified in degrees) for deciding if the vectors are sufficiently aligned.\n\n**Returns**: true if both vectors are aligned (pointing in the same direction).\n\n\n\n\n\n_description: _\n\nReturns true if both vectors are aligned (pointing in the same direction). tolerance is an angle tolerance/threshold (specified in degrees) for deciding if the vectors are sufficiently aligned.\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(4, 2);\n// v1.align(v2) returns true\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool alignRad(&vec, tolerance = 0.0001f)\n\n<!--\n_syntax: alignRad(&vec, tolerance = 0.0001f)_\n_name: alignRad_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec2f &vec, float tolerance=0.0001f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermine if two vectors are aligned with tolerance in radians\n\n**Parameters:**\n\nvec The vector to compare alignment with\n\ntolerance an angle tolerance/threshold (specified in radians) for deciding if the vectors are sufficiently aligned.\n\n**See also**: align()\n\n\n\n\n\n_description: _\n\nJust like [align](#align) but the angle tolerance is specified in radians rather than degrees.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float angle(&vec)\n\n<!--\n_syntax: angle(&vec)_\n_name: angle_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculate the angle to another vector in degrees\n\n~~~~{.cpp}\nofVec2f v1(1,0);\nofVec2f v2(0,1);\nfloat angle = v1.angle(v2); // angle is 90\n~~~~\n\n**Parameters:**\n\nvec The vector to calculate the angle to\n\n**Returns**: The angle in degrees (-180...180)\n\n\n\n\n\n_description: _\n\nCalculate and return the angle in degrees between this vector and vec.\n\n~~~~{.cpp}\nofVec2f v1(1,0);\nofVec2f v2(0,1);\nfloat angle = v1.angle(v2); // angle is 90\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float angleRad(&vec)\n\n<!--\n_syntax: angleRad(&vec)_\n_name: angleRad_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculate the angle to another vector in radians\n\n~~~~{.cpp}\nofVec2f v1(1,0);\nofVec2f v2(0,1);\nfloat angle = v1.angleRad(v2); // angle is HALF_PI\n~~~~\n\n**Parameters:**\n\nvec The vector to calculate the angle to\n\n**Returns**: The angle in radians (-PI...PI)\n\n\n\n\n\n_description: _\n\nCalculate and return the angle in radians between this vector and vec.\n\n~~~~{.cpp}\nofVec2f v1(1,0);\nofVec2f v2(0,1);\nfloat angle = v1.angleRad(v2); // angle is HALF_PI\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & average(*points, num)\n\n<!--\n_syntax: average(*points, num)_\n_name: average_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const ofVec2f *points, size_t num_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAverage vector over an array of points\n\nSets this vector to be the average (*centre of gravity* or *centroid*)\nof a given array of ofVec2f.\n\n~~~~{.cpp}\nint numPoints = 10;\nofVec2f points[numPoints];\nfor ( int i=0; i<numPoints; i++ ) {\n\tpoints[i].set( ofRandom(0,100), ofRandom(0,100) );\n}\nofVec2f centroid;\ncentroid.average( points, numPoints );\n// centroid now is the centre of gravity/average of all the random points\n~~~~\n\n\n**Parameters:**\n\npoints The array of ofVec2f to avarage over\n\nnum specifies the number of ofVec2f in the array.\n\n**Returns**: Vector that is the avarage of the points in the array\n\n\n\n\n\n_description: _\n\nSets this vector to be the average (*centre of gravity* or *centroid*) of a given array of ofVec2fs. points is the array of ofVec2fs and num specifies the number of ofVec2fs in the array.\n\n~~~~{.cpp}\nint numPoints = 10;\nofVec2f points[numPoints];\nfor ( int i=0; i<numPoints; i++ ) {\n\tpoints[i].set( ofRandom(0,100), ofRandom(0,100) );\n}\nofVec2f centroid;\ncentroid.average( points, numPoints ); \n// centroid now is the centre of gravity/average of all the random points\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float distance(&pnt)\n\n<!--\n_syntax: distance(&pnt)_\n_name: distance_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec2f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDistance between two points.\n\nTreats both this vector and pnt as points in 2D space, and calculates and\nreturns the distance between them.\n\n~~~~{.cpp}\nofVec2f p1( 3, 4 );\nofVec2f p2( 6, 8 );\nfloat distance = p1.distance( p2 ); // distance is 5\n~~~~\n\nDistance involves a square root calculation, which is one of the slowest\nthings you can do in programming. If you don't need an exact number but rather\njust a rough idea of distance (for example when finding the shortest distance\nof a bunch of points to a reference point, where it doesn't matter exactly\nwhat the distances are, you just want the shortest), you can use\nsquareDistance() instead.\n\n\n**Parameters:**\n\npnt The point to calculate the distance to\n\n**Returns**: The distance as float\n\n**See also**: squareDistance()\n\n\n\n\n\n_description: _\n\nTreats both this vector and pnt as points in 2D space, and calculates and returns the distance between them.\n\n~~~~{.cpp}\nofVec2f p1( 3, 4 );\nofVec2f p2( 6, 8 );\nfloat distance = p1.distance( p2 ); // distance is 5\n~~~~\n\ndistance involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest), you can use [squareDistance](#squareDistance) instead.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float dot(&vec)\n\n<!--\n_syntax: dot(&vec)_\n_name: dot_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns the dot product of this vector with 'vec'.\n\nThe *dot product* of two vectors, also known as the *scalar product*, is\nthe product of the magnitude of the two vectors and the cosine of the\nangle between them.\n\nOne interpretation of the dot product is as a measure of how closely two\nvectors align with each other. If they point in exactly the same\ndirection, their dot product will simply be the product of their\nmagnitudes, if they are perpendicular, their dot product will be 0, and\nif they point in opposite directions, their dot product will be\nnegative.\n\nThe dot product is in contrast to the *cross product*, which returns a\nvector rather than a scalar.\n\n~~~~{.cpp}\nofVec2f a1(2, 0); // magnitude 2, parallel to x-axis\nofVec2f b1(3, 4); // magnitude 5, 53.13 degree angle to a1\nfloat dot = a1.dot(b1); // dot is 2 * 5 * cos(53.13) = 6.0\n\nofVec2f a2(1, 0); // magnitude 1, parallel to x-axis\nofVec2f b2(0, 1); // magnitude 1, 90 degree angle to a2\ndot = a2.dot(b2); // dot is 1 * 1 * cos(90) = 0.0\n\nofVec2f a3(0, 1); // magnitude 1, parallel to y-axis\nofVec2f b3(0, -1); // magnitude 1, 180 degree angle to a3\ndot = a3.dot(b3); // dot is 1 * 1 * cos(180) = -1.0\n~~~~\n\n\n\n\n\n_description: _\n\nCalculate and return the dot product of this vector with vec.\n\n*Dot product* (less commonly known as *Euclidean inner product*) expresses the angular relationship between two vectors. In other words it is a measure of how *parallel* two vectors are. If they are completely perpendicular the dot product is 0; if they are completely parallel their dot product is either 1 if they are pointing in the same direction, or -1 if they are pointing in opposite directions.\n\n![DOT](../math/dotproduct.png)\nImage courtesy of Wikipedia\n\n~~~~{.cpp}\nofvec2f a1(1, 0);\nofVec2f b1(0, 1); // 90 degree angle to a1\ndot = a1.dot(b1); // dot is 0, ie cos(90)\n\nofVec2f a2(1, 0); \nofVec2f b2(1, 1); // 45 degree angle to a2\nb2.normalize(); // vectors should to be unit vectors (normalized)\nfloat dot = a2.dot(b2); // dot is 0.707, ie cos(45)\n\nofVec2f a3(1, 0);\nofVec2f b3(-1, 0); // 180 degree angle to a3\ndot = a3.dot(b3); // dot is -1, ie cos(180)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f getInterpolated(&pnt, p)\n\n<!--\n_syntax: getInterpolated(&pnt, p)_\n_name: getInterpolated_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const ofVec2f &pnt, float p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLinear interpolation\n\nPerform a linear interpolation of this vector's position towards pnt\nand return the interpolated position without altering the original\nvector.\n\n`p` is normally between 0 and 1 and where 0 means stay the original position and 1\nmeans move all the way to pnt, but you can also have p greater than 1\novershoot pnt, or less than 0 to move backwards away from pnt.\n\n~~~~{.cpp}\nofVec2f v1( 0, 5 );\nofVec2f v2( 10, 10 );\nofVec3f v3 = v1.getInterpolated( v2, 0.5 ); // v3 is (5, 7.5)\nofVec3f v4 = v1.getInterpolated( v2, 0.8 ); // v4 is (8, 9)\n~~~~\n\n\n**Parameters:**\n\npnt The point to move towards\n\np The amount to move towards pnt\n\n**See also**: interpolate()\n\n\n\n\n\n_description: _\n\nPerform a linear interpolation of this vector's position towards pnt and return the interpolated position without altering the original vector. p controls the amount to move towards pnt. p is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to pnt, but you can also have p greater than 1 overshoot pnt, or less than 0 to move backwards away from pnt.\n\n~~~~{.cpp}\nofVec2f v1( 0, 5 );\nofVec2f v2( 10, 10 );\nofVec3f v3 = v1.getInterpolated( v2, 0.5 ); // v3 is (5, 7.5)\nofVec3f v4 = v1.getInterpolated( v2, 0.8 ); // v4 is (8, 9)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f getLimited(max)\n\n<!--\n_syntax: getLimited(max)_\n_name: getLimited_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet vector limited by length\n\n~~~~{.cpp}\nofVec2f v1(5, 1); // length is about 5.1\nofVec2f v2(2, 1); // length is about 2.2\nofVec2f v1Limited = v1.getLimited(3);\n// v1Limited is (2.9417, 0.58835) which has length of 3 in the same direction as v1\nofVec2f v2Limited = v2.getLimited(3);\n// v2Limited is (2, 1) (same as v2)\n~~~~\n\n\n**See also**: limit()\n\n**Parameters:**\n\nmax The maximum length of the vector to return\n\n**Returns**: A copy of this vector with its length (magnitude) restricted to a\nmaximum of max units by scaling down if necessary.\n\n\n\n\n\n_description: _\n\nReturn a copy of this vector with its length (magnitude) restricted to a maximum of max units by scaling down if necessary.\n\n~~~~{.cpp}\nofVec2f v1(5, 1); // length is about 5.1\nofVec2f v2(2, 1); // length is about 2.2\nofVec2f v1Limited = v1.getLimited(3); \n// v1Limited is (2.9417, 0.58835) which has length of 3 in the same direction as v1\nofVec2f v2Limited = v2.getLimited(3);\n// v2Limited is (2, 1) (same as v2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f getMapped(&origin, &vx, &vy)\n\n<!--\n_syntax: getMapped(&origin, &vx, &vy)_\n_name: getMapped_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const ofVec2f &origin, const ofVec2f &vx, const ofVec2f &vy_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nGet vector mapped to new coordinate system\n\nIn most cases you want `vx` and `vy` to be perpendicular and of unit length; if\nthey are not perpendicular you will have shearing as part of the mapping, and\nif they are not of unit length you will have scaling as part of the mapping.\n\n\n**Returns**: A new ofVec2f calculated by copying this vector and then mapping from\nits default coordinate system -- origin (0,0), X direction (1,0), Y direction\n(0,1) -- to a new coordinate system defined with origin at origin, X direction\nvx, and Y direction vy.\n\n\n\n\n\n_description: _\n\nReturn a new ofVec2f calculated by copying this vector and then mapping from its default coordinate system -- origin (0,0), X direction (1,0), Y direction (0,1) -- to a new coordinate system defined with origin at origin, X direction vx, and Y direction vy.\n\n*In most cases you want vx and vy to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.*\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f getMiddle(&pnt)\n\n<!--\n_syntax: getMiddle(&pnt)_\n_name: getMiddle_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const ofVec2f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCalculate and return the midpoint between this vector and pnt.\n\n~~~~{.cpp}\nofVec2f v1(5, 0);\nofVec2f v2(10, 10);\nofVec3f mid = v1.getMiddle(v2); // mid gets (7.5, 5)\n~~~~\n\n\n**Parameters:**\n\npnt The vector to find the middle to\n\n**Returns**: The middle between this vector and `pnt`\n\n**See also**: middle()\n\n\n\n\n\n_description: _\n\nCalculate and return the midpoint between this vector and pnt.\n\n~~~~{.cpp}\nofVec2f v1(5, 0);\nofVec2f v2(10, 10);\nofVec3f mid = v1.getMiddle(v2); // mid gets (7.5, 5)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f getNormalized()\n\n<!--\n_syntax: getNormalized()_\n_name: getNormalized_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a normalized copy of this vector.\n\n*Normalization* means to scale the vector so that its length\n(magnitude) is exactly 1, at which stage all that is left is the\ndirection. A normalized vector is usually called a *unit vector*, and\ncan be used to represent a pure direction (heading).\n\n~~~~{.cpp}\nofVec2f v1(5, 0);\nofVec2f v1Normalized = v1.getNormalized(); // (1, 0)\nofVec2f v2(5, 5);\nofVec2f v2Normalized = v2.getNormalized(); // (√2, √2)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a normalized copy of this vector. \n\n*Normalization* means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a *unit vector*, and can be used to represent a pure direction (heading).\n\n~~~~{.cpp}\nofVec2f v1(5, 0);\nofVec2f v1Normalized = v1.getNormalized(); // (1, 0)\nofVec2f v2(5, 5);\nofVec2f v2Normalized = v2.getNormalized(); // (√2, √2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f getPerpendicular()\n\n<!--\n_syntax: getPerpendicular()_\n_name: getPerpendicular_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the *normalized* ofVec2f that is perpendicular to this vector\n(ie rotated 90 degrees and normalized).\n\n![PERPENDICULAR](math/perpendicular.png)\nImage courtesy of Wikipedia\n\n~~~~{.cpp}\nofVec2f v(2, 5);\nofVec2f u = v.getPerpendicular(); // u is (0.928, -0.371)\n~~~~\n\n\n**See also**: perpendicular()\n\n\n\n\n\n_description: _\n\nReturn the **normalized** ofVec2f that is perpendicular to this vector (ie rotated 90 degrees and normalized).\n\n![PERPENDICULAR](../math/perpendicular.png)\nImage courtesy of Wikipedia\n\n~~~~{.cpp}\nofVec2f v(2, 5);\nofVec2f u = v.getPerpendicular(); // u is (0.928, -0.371)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float * getPtr()\n\n<!--\n_syntax: getPtr()_\n_name: getPtr_\n_returns: float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a pointer to the memory position of the first element of the vector (x);\nthe second element (y) immediately follows it in memory.\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nfloat * v1Ptr = v1.getPtr();\nfloat x = *(v1Ptr); // x is 40\nfloat y = *(v1Ptr+1); // y is 20\n~~~~\n\nThis is very useful when using arrays of ofVec2fs to store geometry\ninformation, as it allows the vector to be treated as a simple C array of\nfloats that can be passed verbatim to OpenGL.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const float * getPtr()\n\n<!--\n_syntax: getPtr()_\n_name: getPtr_\n_returns: const float *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nReturns a pointer to the memory position of the first element of the vector  (x); the second element (y) immediately follows it in memory.\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nfloat * v1Ptr = v1.getPtr();\nfloat x = *(v1Ptr); // x is 40\nfloat y = *(v1Ptr+1); // y is 20\n~~~~\n\nThis is very useful when using arrays of ofVec2fs to store geometry information, as it allows the vector to be treated as a simple C array of floats that can be passed verbatim to OpenGL.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f getRotated(angle)\n\n<!--\n_syntax: getRotated(angle)_\n_name: getRotated_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: float angle_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector that is the result of rotating this vector\nby 'angle' degrees about the origin.\n\n~~~~{.cpp}\nofVec2f v1(1, 0);\nofVec2f v2 = v1.getRotated(45); // v2 is (0.707, 0.707)\n~~~~\n\n\n**See also**: getRotatedRad()\n\n**See also**: rotate()\n\n\n\n\n\n_description: _\n\nReturn a new ofVec2f that is the result of rotating this vector by angle degrees around the origin.\n\n~~~~{.cpp}\nofVec2f v1(1, 0);\nofVec2f v2 = v1.getRotated( 45 ); // v2 is (√2, √2)\nofVec3f v3 = v2.getRotated( 45 ); // v3 is (0, 1)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f getRotated(angle, &pivot)\n\n<!--\n_syntax: getRotated(angle, &pivot)_\n_name: getRotated_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: float angle, const ofVec2f &pivot_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector that is the result of rotating this vector\nby 'angle' degrees about the point 'pivot'.\n\n\n\n\n\n_description: _\n\nLike [getRotated](#getRotated) but rotates around pivot rather than around the origin.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f getRotatedRad(angle)\n\n<!--\n_syntax: getRotatedRad(angle)_\n_name: getRotatedRad_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: float angle_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector that is the result of rotating this vector\nby 'angle' radians about the origin.\n\n~~~~{.cpp}\nofVec2f v1(1, 0);\nofVec2f v2 = v1.getRotatedRad(PI / 4); // v2 is (0.707, 0.707)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a new ofVec2f that is the result of rotating this vector by angle radians around the origin.\n\n~~~~{.cpp}\nofVec2f v1(1, 0);\nofVec2f v2 = v1.getRotatedRad( PI/4 ); // v2 is (√2, √2)\nofVec3f v3 = v2.getRotated( PI/4 ); // v3 is (0, 1)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f getRotatedRad(angle, &pivot)\n\n<!--\n_syntax: getRotatedRad(angle, &pivot)_\n_name: getRotatedRad_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: float angle, const ofVec2f &pivot_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector that is the result of rotating this vector\nby 'angle' radians about the origin.\n\n\n\n\n\n_description: _\n\nLike [getRotatedRad](#getRotatedRad) but rotates around pivot rather than around the origin.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f getScaled(length)\n\n<!--\n_syntax: getScaled(length)_\n_name: getScaled_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const float length_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn a new ofVec2f that is the result of scaling this vector up or down so\nthat it has the requested length.\n\n~~~~{.cpp}\nofVec2f v1( 3, 4 ); // length is 5\nofVec2f v2 = v1.getScaled( 15 ); // ( 9, 12 ), length is now 15\n~~~~ofVec2f\n\n\n**See also**: scale()\n\n\n\n\n\n_description: _\n\nReturn a new ofVec2f that is the result of scaling this vector up or down so that it has the requested length.\n\n~~~~{.cpp}\nofVec2f v1( 3, 4 ); // length is 5\nofVec2f v2 = v1.getScaled( 15 ); // ( 9, 12 ), length is now 15\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & interpolate(&pnt, p)\n\n<!--\n_syntax: interpolate(&pnt, p)_\n_name: interpolate_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const ofVec2f &pnt, float p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLinear interpolation\n\nPerform a linear interpolation of this vector's position towards pnt. p\ncontrols the amount to move towards pnt. p is normally between 0 and 1 and\nwhere 0 means stay the original position and 1 means move all the way to pnt,\nbut you can also have p greater than 1 overshoot pnt, or less than 0 to move\nbackwards away from pnt.\n\n~~~~{.cpp}\nofVec2f v1( 0, 5 );\nofVec2f v2( 10, 10 );\n// go go gadget zeno\nv1.interpolate( v2, 0.5 ); // v1 is now (5, 7.5)\nv1.interpolate( v2, 0.5 ); // v1 is now (7.5, 8.75)\nv1.interpolate( v2, 0.5 ); // v1 is now (8.75, 9.375)\nv1.interpolate( v2, 0.5 ); // v1 is now (9.375, 9.6875)\n~~~~\n\n\n**See also**: getInterpolated()\n\n\n\n\n\n_description: _\n\nPerform a linear interpolation of this vector's position towards pnt. p controls the amount to move towards pnt. p is normally between 0 and 1 and where 0 means stay the original position and 1 means move all the way to pnt, but you can also have p greater than 1 overshoot pnt, or less than 0 to move backwards away from pnt.\n\n~~~~{.cpp}\nofVec2f v1( 0, 5 );\nofVec2f v2( 10, 10 );\n// go go gadget zeno\nv1.interpolate( v2, 0.5 ); // v1 is now (5, 7.5)\nv1.interpolate( v2, 0.5 ); // v1 is now (7.5, 8.75)\nv1.interpolate( v2, 0.5 ); // v1 is now (8.75, 9.375)\nv1.interpolate( v2, 0.5 ); // v1 is now (9.375, 9.6875)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isAligned(&vec, tolerance = 0.0001f)\n\n<!--\n_syntax: isAligned(&vec, tolerance = 0.0001f)_\n_name: isAligned_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec2f &vec, float tolerance=0.0001f_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermine if two vectors are aligned\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(4, 2);\nv1.isAligned(v2) // returns true\n~~~~\n\n**Parameters:**\n\nvec The vector to compare alignment with\n\ntolerance an angle tolerance/threshold (specified in degrees) for deciding if the vectors are sufficiently aligned.\n\n**Returns**: true if both vectors are aligned (pointing in the same direction).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool isAlignedRad(&vec, tolerance = 0.0001f)\n\n<!--\n_syntax: isAlignedRad(&vec, tolerance = 0.0001f)_\n_name: isAlignedRad_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec2f &vec, float tolerance=0.0001f_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDetermine if two vectors are aligned with tolerance in radians\n\n**Parameters:**\n\nvec The vector to compare alignment with\n\ntolerance an angle tolerance/threshold (specified in radians) for deciding if the vectors are sufficiently aligned.\n\n**See also**: isAligned()\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float length()\n\n<!--\n_syntax: length()_\n_name: length_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the length (magnitude) of this vector.\n\n~~~~{.cpp}\nofVec2f v(3, 4);\nfloat len = v.length(); // len is 5 (3,4,5 triangle)\n~~~~\n\nlength() involves a square root calculation, which is one of the slowest things\nyou can do in programming. If you don't need an exact number but rather just a\nrough idea of a length (for example when finding the shortest distance of a\nbunch of points to a reference point, where it doesn't matter exactly what the\nlengths are, you just want the shortest), you can use\nlengthSquared() instead.\n\n\n**See also**: lengthSquared()\n\n\n\n\n\n_description: _\n\nReturn the length (magnitude) of this vector.\n\n~~~~{.cpp}\nofVec2f v(3, 4);\nfloat len = v.length(); // len is 5 (3,4,5 triangle)\n~~~~\n\nlength involves a square root calculation, which is one of the slowest things you can do in programming. If you don't need an exact number but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest), you can use [squareLength](#squareLength) instead.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float lengthSquared()\n\n<!--\n_syntax: lengthSquared()_\n_name: lengthSquared_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: 007_\n_summary: _\n_constant: False_\n_static: False_\n_visible: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn the squared length (squared magnitude) of this vector.\n\n~~~~{.cpp}\nofVec2f v(3, 4);\nfloat len = v.length(); // len is 5 (3,4,5 triangle)\n~~~~\n\nUse as a much faster alternative to length() if you don't\nneed to know an accurate length but rather just a rough idea of a\nlength (for example when finding the shortest distance of a bunch of\npoints to a reference point, where it doesn't matter exactly what the\nlengths are, you just want the shortest). It avoids the square root\ncalculation that is ordinarily required to calculate a length.\n\n\n**See also**: length()\n\n\n\n\n\n_description: _\n\nReturn the squared length (squared magnitude) of this vector.\n\n~~~~{.cpp}\nofVec2f v(3, 4);\nfloat len = v.length(); // len is 5 (3,4,5 triangle)\n~~~~\n\nUse as a much faster alternative to [length](#length) if you don't need to know an accurate length but rather just a rough idea of a length (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the lengths are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & limit(max)\n\n<!--\n_syntax: limit(max)_\n_name: limit_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: float max_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRestrict the length (magnitude) of this vector to a maximum of max units by scaling down if necessary.\n\n~~~~{.cpp}\nofVec2f v1(5, 1); // length is about 5.1\nofVec2f v2(2, 1); // length is about 2.2\nv1.limit(3);\n// v1 is now (2.9417, 0.58835) which has length of 3 in the same direction as at initialization\nv2.limit(3);\n// v2 is unchanged\n~~~~\n\n\n**See also**: limit()\n\n\n\n\n\n_description: _\n\nRestrict the length (magnitude) of this vector to a maximum of max units by scaling down if necessary.\n\n~~~~{.cpp}\nofVec2f v1(5, 1); // length is about 5.1\nofVec2f v2(2, 1); // length is about 2.2\nv1.limit(3); \n// v1 is now (2.9417, 0.58835) which has length of 3 in the same direction as at initialization\nv2.limit(3);\n// v2 is unchanged\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & map(&origin, &vx, &vy)\n\n<!--\n_syntax: map(&origin, &vx, &vy)_\n_name: map_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const ofVec2f &origin, const ofVec2f &vx, const ofVec2f &vy_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMaps this vector from its default coordinate system -- origin (0,0), X\ndirection (1,0), Y direction (0,1) -- to a new coordinate system defined with\norigin at origin, X direction vx, and Y direction vy.\n\nIn most case you want vx and vy to be perpendicular and of unit length; if\nthey are not perpendicular you will have shearing as part of the mapping, and\nif they are not of unit length you will have scaling as part of the mapping.\n\n\n**See also**: perpendicular()\n\n\n\n\n\n_description: _\n\nMaps this vector from its default coordinate system -- origin (0,0), X direction (1,0), Y direction (0,1) -- to a new coordinate system defined with origin at origin, X direction vx, and Y direction vy. \n\n*In most case you want vx and vy to be perpendicular and of unit length; if they are not perpendicular you will have shearing as part of the mapping, and if they are not of unit length you will have scaling as part of the mapping.*\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool match(&vec, tolerance = 0.0001f)\n\n<!--\n_syntax: match(&vec, tolerance = 0.0001f)_\n_name: match_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec2f &vec, float tolerance=0.0001f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns true if each component is *close enough* to its corresponding\ncomponent in vec, where what is *close enough* is determined by the value of\ntolerance:\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(40.01, 19.999);\n// v1.match(v2, 0.1) returns true\n// v1.match(v2, 0.001) returns false\n~~~~\n\nThis is handy if, for example, you want to find out when a point becomes\n*close enough* to another point to trigger an event.\n\n\n\n\n\n_description: _\n\nReturns true if each component is *close enough* to its corresponding component in vec, where what is *close enough* is determined by the value of tolerance: \n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(40.01, 19.999);\n// v1.match(v2, 0.1) returns true\n// v1.match(v2, 0.001) returns false\n~~~~\n\nThis is handy if, for example, you want to find out when a point becomes *close enough* to another point to trigger an event.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & middle(&pnt)\n\n<!--\n_syntax: middle(&pnt)_\n_name: middle_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const ofVec2f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this vector to the midpoint between itself and pnt.\n\n~~~~{.cpp}\nofVec2f v1( 0, 5 );\nofVec2f v2( 10, 10 );\nv1.middle( v2 ); // v1 is now (5, 7.5)\nv1.middle( v2 ); // v1 is now (7.5, 8.75)\nv1.middle( v2 ); // v1 is now (8.75, 9.375)\nv1.middle( v2 ); // v1 is now (9.375, 9.6875)\n~~~~\n\n\n**See also**: getMiddle()\n\n\n\n\n\n_description: _\n\nSet this vector to the midpoint between itself and pnt.\n\n~~~~{.cpp}\nofVec2f v1( 0, 5 );\nofVec2f v2( 10, 10 );\n// go go gadget zeno\nv1.middle( v2 ); // v1 is now (5, 7.5)\nv1.middle( v2 ); // v1 is now (7.5, 8.75)\nv1.middle( v2 ); // v1 is now (8.75, 9.375)\nv1.middle( v2 ); // v1 is now (9.375, 9.6875)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & normalize()\n\n<!--\n_syntax: normalize()_\n_name: normalize_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nNormalize the vector.\n\n*Normalizing* means to scale the vector so that its length (magnitude) is\nexactly 1, at which stage all that is left is the direction. A normalized\nvector is usually called a *unit vector*, and can be used to represent a pure\ndirection (heading).\n\n~~~~{.cpp}\nofVec2f v1(5, 0);\nv1.normalize(); // v1 is now (1, 0)\nofVec2f v2(5, 5);\nv2.normalize(); // v2 is now (√2, √2)\n~~~~\n\n**See also**: getNormalized()\n\n\n\n\n\n_description: _\n\nNormalize the vector.\n\n*Normalizing* means to scale the vector so that its length (magnitude) is exactly 1, at which stage all that is left is the direction. A normalized vector is usually called a *unit vector*, and can be used to represent a pure direction (heading).\n\n~~~~{.cpp}\nofVec2f v1(5, 0);\nv1.normalize(); // v1 is now (1, 0)\nofVec2f v2(5, 5);\nv2.normalize(); // v2 is now (√2, √2)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec2f(&v)\n\n<!--\n_syntax: ofVec2f(&v)_\n_name: ofVec2f_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec2 &v_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec2f(&v)\n\n<!--\n_syntax: ofVec2f(&v)_\n_name: ofVec2f_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec3 &v_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec2f(&v)\n\n<!--\n_syntax: ofVec2f(&v)_\n_name: ofVec2f_\n_returns: _\n_returns_description: _\n_parameters: const glm::vec4 &v_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec2f(&vec)\n\n<!--\n_syntax: ofVec2f(&vec)_\n_name: ofVec2f_\n_returns: _\n_returns_description: _\n_parameters: const ofVec3f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a 2D vector (ofVec2f) from a 3D vector (ofVec3f) by\n\\throwing away the z component of the 3D vector.\n\n~~~~{.cpp}\nofVec3f mom3d(40, 20, 50); // 3d vector\nofVec2f v(mom3d); // v.x is 40, v.y is 20\n~~~~\n\n\n\n\n\n_description: _\n\nCreate a 2D vector (ofVec2f) from a 3D vector (ofVec3f) by throwing away the z component of the 3D vector.\n\n~~~~{.cpp}\nofVec3f mom3d(40, 20, 50); // 3d vector \nofVec2f v(mom3d); // v.x is 40, v.y is 20\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec2f(&vec)\n\n<!--\n_syntax: ofVec2f(&vec)_\n_name: ofVec2f_\n_returns: _\n_returns_description: _\n_parameters: const ofVec4f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCreate a 2D vector (ofVec2f) from a 4D vector (ofVec4f) by throwing away the z\nand w components of the 4D vector.\n\n~~~~{.cpp}\nofVec4f mom4d(40, 20, 50, 80); // 4d vector\nofVec2f v(mom4d); // v.x is 40, v.y is 20\n~~~~\n\n\n\n\n\n_description: _\n\nCreate a 2D vector (ofVec2f) from a 4D vector (ofVec4f) by throwing away the z and w components of the 4D vector.\n\n~~~~{.cpp}\nofVec3f mom4d(40, 20, 50, 80); // 4d vector \nofVec2f v(mom4d); // v.x is 40, v.y is 20\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec2f()\n\n<!--\n_syntax: ofVec2f()_\n_name: ofVec2f_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a 2D vector.\n\n~~~~{.cpp}\nofVec2f v1; // default: v1.x is 0, v1.y is 0\nofVec2f v2 = ofVec2f(40, 20); // v2.x is 40, v2.y is 20\nofVec3f v3(0.1, 0.3); // v3.x is 0.1, v3.y is 0.3\n~~~~\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec2f(scalar)\n\n<!--\n_syntax: ofVec2f(scalar)_\n_name: ofVec2f_\n_returns: _\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a 2D vector with `x` and `y` set to `scalar`\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofVec2f(x, y)\n\n<!--\n_syntax: ofVec2f(x, y)_\n_name: ofVec2f_\n_returns: _\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nConstruct a 2D vector with specific `x` and `y components\n\n~~~~{.cpp}\nofVec2f v1; // default: v1.x is 0, v1.y is 0\nofVec2f v2 = ofVec2f(40, 20); // v2.x is 40, v2.y is 20\nofVec3f v3(0.1, 0.3); // v3.x is 0.1, v3.y is 0.3\n~~~~\n\n\n**Parameters:**\n\nx The x component\n\ny The y component\n\n\n\n\n\n_description: _\n\nConstruct a 2D vector. Defaults to (0,0).\n\n~~~~{.cpp}\nofVec2f v1; // default: v1.x is 0, v1.y is 0\nofVec2f v2 = ofVec2f(40, 20); // v2.x is 40, v2.y is 20\nofVec3f v3(0.1, 0.3); // v3.x is 0.1, v3.y is 0.3\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f one()\n\n<!--\n_syntax: one()_\n_name: one_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator!=(&vec)\n\n<!--\n_syntax: operator!=(&vec)_\n_name: operator!=_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck for inequality between two ofVec2f\n\n~~~~{.cpp}\nofVec2f v1(40, 20);\nofVec2f v2(50, 30);\nofVec2f v3(40, 20);\n// ( v1 != v2 ) is true\n// ( v1 != v3 ) is false\n~~~~\n\n\n**Returns**: true if any component is different to its corresponding\ncomponent in vec, ie if 'x != vec.x' or 'y != vec.y', otherwise returns\nfalse.\n\n\n\n\n\n_description: _\n\nReturns true if any component is different to its corresponding component in vec, ie if x != vec.x or y != vec.y; otherwise returns false.\n\n~~~~{.cpp}\nofVec2f v1(40, 20); \nofVec2f v2(50, 30); \nofVec2f v3(40, 20); \n// ( v1 != v2 ) is true\n// ( v1 != v3 ) is false\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f operator*(&vec)\n\n<!--\n_syntax: operator*(&vec)_\n_name: operator*_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nReturns a new vector (x*vec.x , y*vec.y).\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(2, 4);\nofVec2f v3 = v1 * v2; // (80, 80)\n~~~~\n\nUseful for scaling a 2D point by a non-uniform scale.\n\n\n\n\n\n_description: _\n\nReturns a new vector (x*vec.x,y*vec.y).\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20); \nofVec2f v2 = ofVec2f(2, 4);\nofVec2f v3 = v1 * v2; // (80, 80)\n~~~~\n\nUseful for scaling a 2D point by a non-uniform scale.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f operator*(f)\n\n<!--\n_syntax: operator*(f)_\n_name: operator*_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn a new ofVec2f that is this vector scaled by multiplying both x\nand y members by the float.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nofVec2f v2 = v1 * 4; // (8, 20)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a new ofVec2f that is this vector scaled by multiplying both x and y members by f.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nofVec2f v2 = v1 * 4; // (8, 20)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & operator*=(&vec)\n\n<!--\n_syntax: operator*=(&vec)_\n_name: operator*=_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nMultiplies x by vec.x, and multiplies y by vec.y.\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(2, 4);\nv1 *= v2; // v1 is now (80, 80)\n~~~~\n\nUseful for scaling a 2D point by a non-uniform scale.\n\n\n\n\n\n_description: _\n\nMultiplies x by vec.x, and multiplies y by vec.y.\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20); \nofVec2f v2 = ofVec2f(2, 4);\nv1 *= v2; // v1 is now (80, 80)\n~~~~\n\nUseful for scaling a 2D point by a non-uniform scale.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & operator*=(f)\n\n<!--\n_syntax: operator*=(f)_\n_name: operator*=_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale this vector by multiplying both x and y members by f.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nv1 *= 4; // (8, 20)\n~~~~\n\n\n\n\n\n_description: _\n\nScale this vector by multiplying both x and y members by f.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nv1 *= 4; // (8, 20)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f operator+(&vec)\n\n<!--\n_syntax: operator+(&vec)_\n_name: operator+_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSuper easy vector addition. Returns a new vector (x+vec.x,y+vec.y).\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(25, 50);\nofVec3f v3 = v1 + v2; // v3 is (65, 70)\n~~~~\n\n\n\n\n\n_description: _\n\nSuper easy vector addition. Returns a new vector (x+vec.x,y+vec.y).\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20); \nofVec2f v2 = ofVec2f(25, 50);\nofVec3f v3 = v1 + v2; // v3 is (65, 70)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f operator+(f)\n\n<!--\n_syntax: operator+(f)_\n_name: operator+_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector with a float value f added to both x and y members.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nofVec2f v2 = v1 + 10; // (12, 15)\n~~~~\n\n\n\n\n\n_description: _\n\nReturns a new vector with a float value f added to both x and y members.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nofVec2f v2 = v1 + 10; // (12, 15)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & operator+=(&vec)\n\n<!--\n_syntax: operator+=(&vec)_\n_name: operator+=_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSuper easy addition assignment. Adds vec.x to x, and adds vec.y to y.\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(25, 50);\nv1 += v2; // v1 is (65, 70)\n~~~~\n\n\n\n\n\n_description: _\n\nSuper easy addition assignment. Adds vec.x to x, and adds vec.y to y.\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20); \nofVec2f v2 = ofVec2f(25, 50);\nv1 += v2; // v1 is (65, 70)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & operator+=(f)\n\n<!--\n_syntax: operator+=(f)_\n_name: operator+=_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdds a float value f to both x and y members.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nv1 += 10; // (12, 15)\n~~~~\n\n\n\n\n\n_description: _\n\nAdds a float value f to both x and y members.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nv1 += 10; // (12, 15)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f operator-(&vec)\n\n<!--\n_syntax: operator-(&vec)_\n_name: operator-_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSuper easy vector subtraction. Returns a new vector (x-vec.x,y-vec.y).\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(25, 50);\nofVec3f v3 = v1 - v2; // v3 is (15, -30)\n~~~~\n\n\n\n\n\n_description: _\n\nSuper easy vector subtraction. Returns a new vector (x-vec.x,y-vec.y).\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20); \nofVec2f v2 = ofVec2f(25, 50);\nofVec3f v3 = v1 - v2; // v3 is (15, -30)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f operator-()\n\n<!--\n_syntax: operator-()_\n_name: operator-_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new ofVec2f that is the inverted version (mirrored in X and Y) of this vector.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nofVec2f v2 = -v1; // (-2, -5)\n~~~~\n\n\n\n\n\n_description: _\n\nReturns a new ofVec2f that is the inverted version (mirrored in X and Y) of this vector.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nofVec2f v2 = -v1; // (-2, -5)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f operator-(f)\n\n<!--\n_syntax: operator-(f)_\n_name: operator-_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturns a new vector with a float value f subtracted from both x and y members.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nofVec2f v2 = v1 - 10; // (-8, -5)\n~~~~\n\n\n\n\n\n_description: _\n\nReturns a new vector with a float value f subtracted from both x and y members.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nofVec2f v2 = v1 - 10; // (-8, -5)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & operator-=(&vec)\n\n<!--\n_syntax: operator-=(&vec)_\n_name: operator-=_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSuper easy subtraction assignment. Subtracts vec.x from x, and subtracts vec.y from y.\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(25, 50);\nv1 -= v2; // v1 is (15, -30)\n~~~~\n\n\n\n\n\n_description: _\n\nSuper easy subtraction assignment. Subtracts vec.x from x, and subtracts vec.y from y.\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20); \nofVec2f v2 = ofVec2f(25, 50);\nv1 -= v2; // v1 is (15, -30)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & operator-=(f)\n\n<!--\n_syntax: operator-=(f)_\n_name: operator-=_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSubtract a float value f from both x and y members.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nv1 -= 10; // (-8, -5)\n~~~~\n\n\n\n\n\n_description: _\n\nSubtract a float value f from both x and y members.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nv1 -= 10; // (-8, -5)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f operator/(&vec)\n\n<!--\n_syntax: operator/(&vec)_\n_name: operator/_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nReturns a new vector (x/vec.x,y/vec.y).\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(2, 4);\nofVec3f v3 = v1 / v2; // (20, 5)\n~~~~\n\nUseful for scaling a 2D point by a non-uniform scale.\n\n\n\n\n\n_description: _\n\nReturns a new vector (x/vec.x,y/vec.y).\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20); \nofVec2f v2 = ofVec2f(2, 4);\nofVec3f v3 = v1 / v2; // (20, 5)\n~~~~\n\nUseful for scaling a 2D point by a non-uniform scale.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f operator/(f)\n\n<!--\n_syntax: operator/(f)_\n_name: operator/_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReturn a new ofVec2f that is this vector scaled by dividing\nboth x and y members by f.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nofVec2f v2 = v1 / 4; // (0.5, 1.25)\n~~~~\n\n\n\n\n\n_description: _\n\nReturn a new ofVec2f that is this vector scaled by dividing both x and y members by f.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nofVec2f v2 = v1 / 4; // (0.5, 1.25)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & operator/=(&vec)\n\n<!--\n_syntax: operator/=(&vec)_\n_name: operator/=_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\nDivides x by vec.x, and divides y by vec.y.\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nofVec2f v2 = ofVec2f(2, 4);\nv1 *= v2; // v1 is now (20, 5)\n~~~~\n\nUseful for scaling a 2D point by a non-uniform scale.\n\n\n\n\n\n_description: _\n\nDivides x by vec.x, and divides y by vec.y.\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20); \nofVec2f v2 = ofVec2f(2, 4);\nv1 *= v2; // v1 is now (20, 5)\n~~~~\n\nUseful for scaling a 2D point by a non-uniform scale.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & operator/=(f)\n\n<!--\n_syntax: operator/=(f)_\n_name: operator/=_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const float f_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScale this vector by dividing both x and y members by f.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nv1 /= 4; // (0.5, 1.25)\n~~~~\n\n\n\n\n\n_description: _\n\nScale this vector by dividing both x and y members by f.\n\n~~~~{.cpp}\nofVec2f v1(2, 5);\nv1 /= 4; // (0.5, 1.25)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool operator==(&vec)\n\n<!--\n_syntax: operator==(&vec)_\n_name: operator==_\n_returns: bool_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nCheck for equality between two ofVec2f\n\n~~~~{.cpp}\nofVec2f v1(40, 20);\nofVec2f v2(50, 30);\nofVec2f v3(40, 20);\n// ( v1 == v2 ) is false\n// ( v1 == v3 ) is true\n~~~~\n\n\n**Returns**: true if each component is the same as the corresponding\ncomponent in vec, ie if x == vec.x and y == vec.y; otherwise returns\nfalse.\n\n\n\n\n\n_description: _\n\nReturns true if each component is the same as the corresponding component in vec, ie if x == vec.x and y == vec.y; otherwise returns false.\n\n~~~~{.cpp}\nofVec2f v1(40, 20); \nofVec2f v2(50, 30); \nofVec2f v3(40, 20); \n// ( v1 == v2 ) is false\n// ( v1 == v3 ) is true\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float & operator[](n)\n\n<!--\n_syntax: operator[](n)_\n_name: operator[]_\n_returns: float &_\n_returns_description: _\n_parameters: int n_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAllows to access the x and y components of an ofVec2f as though it is an array\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nfloat x = v1[0]; // x is 40\nfloat y = v1[1]; // y is 20\n~~~~\n\nThis function can be handy if you want to do the same operation to both x and\ny components, as it means you can just make a for loop that repeats twice.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float operator[](n)\n\n<!--\n_syntax: operator[](n)_\n_name: operator[]_\n_returns: float_\n_returns_description: _\n_parameters: int n_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: True_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\nAllows to access the x and y components of an ofVec2f as though it is an array:\n\n~~~~{.cpp}\nofVec2f v1 = ofVec2f(40, 20);\nfloat x = v1[0]; // x is 40\nfloat y = v1[1]; // y is 20\n~~~~\n\nThis function can be handy if you want to do the same operation to both x and y components, as it means you can just make a for loop that repeats twice.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & perpendicular()\n\n<!--\n_syntax: perpendicular()_\n_name: perpendicular_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet this vector to its own **normalized** perpendicular (by\nrotating 90 degrees and normalizing).\n\n![PERPENDICULAR](math/perpendicular.png)\nImage courtesy of Wikipedia\n\n~~~~{.cpp}\nofVec2f v(2, 5);\nv.perpendicular(); // v is (0.928, -0.371)\n~~~~\n\n**See also**: getPerpendicular()\n\n\n\n\n\n_description: _\n\nSet this vector to its own **normalized** perpendicular (by rotating 90 degrees and normalizing).\n\n![PERPENDICULAR](../math/perpendicular.png)\nImage courtesy of Wikipedia\n\n~~~~{.cpp}\nofVec2f v(2, 5);\nv.perpendicular(); // v is (0.928, -0.371)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & rotate(angle)\n\n<!--\n_syntax: rotate(angle)_\n_name: rotate_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: float angle_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates this vector by 'angle' degrees about the origin.\n\n~~~~{.cpp}\nofVec2f v1(1, 0);\nv1.rotate(45); // v1 is now (0.707, 0.707)\n~~~~\n\n\n**See also**: getRotated()\n\n\n\n\n\n_description: _\n\nRotate this vector by angle degrees around the origin.\n\n~~~~{.cpp}\nofVec2f v1(1, 0);\nv1.rotate( 45 ); // (√2, √2)\nv1.rotate( 45 ); // (0, 1)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & rotate(angle, &pivot)\n\n<!--\n_syntax: rotate(angle, &pivot)_\n_name: rotate_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: float angle, const ofVec2f &pivot_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates this vector by 'angle' degrees about the point 'pivot'.\n\n\n\n\n\n_description: _\n\nLike [rotate](#rotate) but rotates around pivot rather than around the origin.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & rotateRad(angle)\n\n<!--\n_syntax: rotateRad(angle)_\n_name: rotateRad_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: float angle_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates this vector by 'angle' radians about the origin.\n\n~~~~{.cpp}\nofVec2f v1(1, 0);\nv1.rotateRad(PI / 4); // v1 is now (0.707, 0.707)\n~~~~\n\n\n**See also**: getRotatedRad()\n\n\n\n\n\n_description: _\n\nRotate this vector by angle radians around the origin.\n\n~~~~{.cpp}\nofVec2f v1(1, 0);\nv1.rotate( PI/4 ); // (√2, √2)\nv1.rotate( PI/4 ); // (0, 1)\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & rotateRad(angle, &pivot)\n\n<!--\n_syntax: rotateRad(angle, &pivot)_\n_name: rotateRad_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: float angle, const ofVec2f &pivot_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotates this vector by 'angle' radians about the point 'pivot'.\n\n\n\n\n\n_description: _\n\nLike [rotateRad](#rotateRad) but rotates around pivot rather than around the origin.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f & scale(length)\n\n<!--\n_syntax: scale(length)_\n_name: scale_\n_returns: ofVec2f &_\n_returns_description: _\n_parameters: const float length_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nScales this vector up or down so that it has the requested length.\n\n~~~~{.cpp}\nofVec2f v1( 3, 4 ); // length is 5\nv1.scale( 15 ); // v1 is now (9, 12), with length 15\n~~~~\n\n\n**See also**: getScaled()\n\n\n\n\n\n_description: _\n\nScales this vector up or down so that it has the requested length.\n\n~~~~{.cpp}\nofVec2f v1( 3, 4 ); // length is 5\nv1.scale( 15 ); // v1 is now (9, 12), with length 15\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(&vec)\n\n<!--\n_syntax: set(&vec)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: const ofVec2f &vec_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the x and y components of this vector by copying the corresponding values from vec.\n\n~~~~{.cpp}\nofVec2f v1(40, 20);\nofVec2f v2;\nv2.set(v1); // v2.x is 40, v2.y is 20\n~~~~\n\n\n\n\n\n_description: _\n\nSet the x and y components of this vector by copying the corresponding values from vec.\n\n~~~~{.cpp}\nofVec2f v1(40, 20);\nofVec2f v2;\nv2.set(v1); // v2.x is 40, v2.y is 20\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(scalar)\n\n<!--\n_syntax: set(scalar)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float scalar_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(x, y)\n\n<!--\n_syntax: set(x, y)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nv1.set(40, 20);\n~~~~\n\n\n\n\n\n_description: _\n\nSet x and y components of this vector with just one function call.\n\n~~~~{.cpp}\nofVec2f v1;\nv1.set(40, 20);\n~~~~\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float squareDistance(&pnt)\n\n<!--\n_syntax: squareDistance(&pnt)_\n_name: squareDistance_\n_returns: float_\n_returns_description: _\n_parameters: const ofVec2f &pnt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDistance between two points squared.\n\nTreats both this vector and pnt as points in 2D space, and calculates and\nreturns the squared distance between them.\n\n~~~~{.cpp}\nofVec2f p1( 3, 4 );\nofVec2f p2( 6, 8 );\nfloat distance = p1.distance( p2 ); // distance is 5\n~~~~\n\nUse as a much faster alternative to [distance](#distance) if you don't need to\nknow an exact number but rather just a rough idea of distance (for example\nwhen finding the shortest distance of a bunch of points to a reference point,\nwhere it doesn't matter exactly what the distances are, you just want the\nshortest). It avoids the square root calculation that is ordinarily required\nto calculate a length.\n\n\n**Returns**: The distance squared as float\n\n**See also**: distance()\n\n\n\n\n\n_description: _\n\nTreats both this vector and pnt as points in 2D space, and calculates and returns the squared distance between them.\n\n~~~~{.cpp}\nofVec2f p1( 3, 4 );\nofVec2f p2( 6, 8 );\nfloat distance = p1.distance( p2 ); // distance is 5\n~~~~\n\nUse as a much faster alternative to [distance](#distance) if you don't need to know an exact number but rather just a rough idea of distance (for example when finding the shortest distance of a bunch of points to a reference point, where it doesn't matter exactly what the distances are, you just want the shortest). It avoids the square root calculation that is ordinarily required to calculate a length.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec2f zero()\n\n<!--\n_syntax: zero()_\n_name: zero_\n_returns: ofVec2f_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###const int DIM\n\n<!--\n_name: DIM_\n_type: const int_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\cond INTERNAL\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float x\n\n<!--\n_name: x_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStores the `x` component of the vector.\n\n\n\n\n\n_description: _\n\nStores the X component of this vector.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float y\n\n<!--\n_name: y_\n_type: float_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nStores the `y` component of the vector.\n\n\n\n\n\n_description: _\n\nStores the Y component of this vector.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}