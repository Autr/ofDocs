{"data":[{"page":{"entry":{"name":"ofNode","filename":"ofNode.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/3d/ofNode.markdown","path":"/documentation/3d/ofNode","route":"/documentation/3d/ofNode.markdown","dir":"../ofSite/documentation/3d","ext":"markdown","type":"page","id":1738,"parent":1717,"breadcrumbs":[1717,1718],"siblings":[],"translations":{}},"description":{"short":"<p>A generic 3d object in space with transformation (position, rotation, scale).</p>\n","full":"<p>The ofNode is the base of all things 3d. It lets you represent a location and orientation in 3d space and also allows you to add children or parents so that sets of nodes can move together. This is handy for representing complex 3d models that are linked together, the same way that your hand is linked to your wrist (hopefully), which is linked to your elbow (hopefully), and so on. Nodes are the base of the ofPrimitives, ofCamera, and ofEasyCamera, among other things.</p>\n<p>To get the current position, check out: getX(), getY(), getZ(). To get the axis of the node call getXAxis() (or the y and z variants for those other axes). Another really useful feature of the ofNode is that you can get the <a href=\"http://en.wikipedia.org/wiki/Euler_angles\">Eulerian angles</a> of each node: getPitch(), getHeading(), getRoll(). The global transformation matrix of the ofNode is also available using the getGlobalTransformMatrix(), very handy for figuring out things in relation to the OpenGL representation of your OF world. getGlobalOrientation() also is handy, returning a ofQuaternion that you can use to find out whether your node is upside down in relation to the rest of your OF world (really an OpenGL context, but let's not get into that quite yet).</p>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":null},"methods":[{"syntax":"addListener(&node)","name":"addListener","returns":"void","returns_description":null,"parameters":"ofNode <span class=\"token operator\">&amp;</span>node","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"boom(amount)","name":"boom","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> amount","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Move node up+down relative to current position (in local y axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative position change along local y axis as float.</p>\n","desc":"<p>Move up+down (in local y axis).</p>\n"},{"syntax":"clearParent(bMaintainGlobalTransform = false)","name":"clearParent","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">bool</span> bMaintainGlobalTransform<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Remove parent node linking.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Boolean if maintain child's global transformations (default = false).</p>\n","desc":""},{"syntax":"createMatrix()","name":"createMatrix","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>}</p>\n","desc":""},{"syntax":"customDraw()","name":"customDraw","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>If you extend ofNode and wish to change the way it draws, extend this.\n\\note Try to not use global functions for rendering and instead use the passed\nrenderer.</p>\n","desc":"<p>If you extend ofNode and wish to change the way it draws, extend this.</p>\n"},{"syntax":"customDraw(*renderer)","name":"customDraw","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofBaseRenderer <span class=\"token operator\">*</span>renderer","access":"public","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>If you extend ofNode and wish to change the way it draws, extend this.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 A pointer to the renderer you want to draw to.\n\\note Try to not use global functions for rendering and instead use the passed\nrenderer.</p>\n","desc":""},{"syntax":"dolly(amount)","name":"dolly","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> amount","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Move node backward+forward relative to current position (in local z axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative position change along local z axis as float.</p>\n","desc":"<p>Move forward+backward (in local z axis)</p>\n"},{"syntax":"draw()","name":"draw","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Draw the node as a white cube with xyz axes.\n\\note do NOT override this.\nIt transforms the node to its position+orientation+scale\nand calls the virtual 'customDraw' method above which you CAN override.</p>\n","desc":"<p>Draw function. do NOT override this transforms the node to its position+orientation+scale and calls the virtual 'customDraw' method above which you CAN override.</p>\n"},{"syntax":"getGlobalOrientation()","name":"getGlobalOrientation","returns":"glm::quat","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the global orientation of the node as a quaternion.</p>\n<p><strong>Returns</strong>: An quaternion of the global orientations(useful for complex rotations)</p>\n","desc":""},{"syntax":"getGlobalPosition()","name":"getGlobalPosition","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get node's global position as a 3D vector.</p>\n<p><strong>Returns</strong>: A 3D vector with the global coordinates.</p>\n","desc":""},{"syntax":"getGlobalScale()","name":"getGlobalScale","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get global scale of node in xyz axes where 1 is default.</p>\n<p><strong>Returns</strong>: The global scale in the xyz axes where 1 = 100% of size.</p>\n","desc":""},{"syntax":"getGlobalTransformMatrix()","name":"getGlobalTransformMatrix","returns":"glm::mat4","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get node's global transformations (position, orientation, scale).</p>\n<p><strong>Returns</strong>: A refrence to mat4 containing node's global transformations.</p>\n<p><strong>See also</strong>: https://open.gl/transformations</p>\n","desc":""},{"syntax":"getHeadingDeg()","name":"getHeadingDeg","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get heading of node, aka the rotation along local y axis.</p>\n<p><strong>Returns</strong>: The rotation around the local y axis in degrees, as a float.</p>\n","desc":""},{"syntax":"getHeadingRad()","name":"getHeadingRad","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get heading of node, aka the rotation along local y axis.</p>\n<p><strong>Returns</strong>: The rotation around the local y axis in degrees, as a float.</p>\n","desc":""},{"syntax":"getLocalTransformMatrix()","name":"getLocalTransformMatrix","returns":"const glm::mat4 &","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get node's local transformations (position, orientation, scale).</p>\n<p><strong>Returns</strong>: A refrence to mat4 containing node's local transformations.</p>\n<p><strong>See also</strong>: https://open.gl/transformations</p>\n","desc":""},{"syntax":"getLookAtDir()","name":"getLookAtDir","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get direction the node looks at aka local -z axis, as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local -z axis direction.</p>\n","desc":"<p>Get -z axis.</p>\n"},{"syntax":"getOrientationEulerDeg()","name":"getOrientationEulerDeg","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get local orientation of node in degrees around x, y, and z axes.</p>\n<p><strong>Returns</strong>: The local x, y and z axes orientation in degrees, as a 3D vector.</p>\n","desc":""},{"syntax":"getOrientationEulerRad()","name":"getOrientationEulerRad","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get local orientation of node in degrees around x, y, and z axes.</p>\n<p><strong>Returns</strong>: The local x, y and z axes orientation in degrees, as a 3D vector.</p>\n","desc":""},{"syntax":"getOrientationQuat()","name":"getOrientationQuat","returns":"glm::quat","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the local orientation of the node as a quaternion.</p>\n<p><strong>Returns</strong>: A quaternion of local orientation (useful for complex rotations)</p>\n","desc":""},{"syntax":"getParent()","name":"getParent","returns":"ofNode *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the parent node of this node.</p>\n<p><strong>Returns</strong>: Pointer to parent ofNode.</p>\n","desc":""},{"syntax":"getPitchDeg()","name":"getPitchDeg","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get pitch of node, aka the rotation along local x axis.</p>\n<p><strong>Returns</strong>: The rotation around the local x axis in degrees, as a float.</p>\n","desc":""},{"syntax":"getPitchRad()","name":"getPitchRad","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get pitch of node, aka the rotation along local x axis.</p>\n<p><strong>Returns</strong>: The rotation around the local x axis in degrees, as a float.</p>\n","desc":""},{"syntax":"getPosition()","name":"getPosition","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get node's local position as a 3D vector.</p>\n<p><strong>Returns</strong>: A 3D vector with the local coordinates.</p>\n","desc":""},{"syntax":"getRollDeg()","name":"getRollDeg","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get roll of node, aka the rotation along local z axis.</p>\n<p><strong>Returns</strong>: The rotation around the local z axis in degrees, as a float.</p>\n","desc":""},{"syntax":"getRollRad()","name":"getRollRad","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get roll of node, aka the rotation along local z axis.</p>\n<p><strong>Returns</strong>: The rotation around the local z axis in degrees, as a float.</p>\n","desc":""},{"syntax":"getScale()","name":"getScale","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get local scale of node in xyz axes where 1 is default.</p>\n<p><strong>Returns</strong>: The local scale in the xyz axes where 1 = 100% of size.</p>\n","desc":""},{"syntax":"getSideDir()","name":"getSideDir","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get direction of node's side aka local x axis, as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local x axis direction.</p>\n","desc":""},{"syntax":"getUpDir()","name":"getUpDir","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get direction of node's top aka local y axis, as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local y axis direction.</p>\n","desc":"<p>Get y axis.</p>\n"},{"syntax":"getX()","name":"getX","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get node's local x position.</p>\n<p><strong>Returns</strong>: Local x coordinate as a float.</p>\n","desc":"<p>Get x coodinate.</p>\n"},{"syntax":"getXAxis()","name":"getXAxis","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the node's local x axis as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local x axis direction.</p>\n","desc":"<p>Get x axis.</p>\n"},{"syntax":"getY()","name":"getY","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get node's local y position.</p>\n<p><strong>Returns</strong>: Local y coordinate as a float.</p>\n","desc":"<p>Get y coordinate.</p>\n"},{"syntax":"getYAxis()","name":"getYAxis","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the node's local y axis as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local y axis direction.</p>\n","desc":"<p>Get y axis.</p>\n"},{"syntax":"getZ()","name":"getZ","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get node's local z position.</p>\n<p><strong>Returns</strong>: Local z coordinate as a float.</p>\n","desc":"<p>Get z coordinate.</p>\n"},{"syntax":"getZAxis()","name":"getZAxis","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the node's local z axis as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local z axis direction.</p>\n","desc":"<p>Get z axis.</p>\n"},{"syntax":"lookAt(&lookAtNode)","name":"lookAt","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofNode <span class=\"token operator\">&amp;</span>lookAtNode","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Orient node to look at another node (-z axis pointing at other node).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 A reference to the node to look at.\n\\note This version calculates the up vector automatically to try to keep\nit relatively consistant with the original angle.</p>\n","desc":""},{"syntax":"lookAt(&lookAtNode, &upVector)","name":"lookAt","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofNode <span class=\"token operator\">&amp;</span>lookAtNode<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>upVector","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Orient node to look at another node (-z axis pointing at other node).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 A reference to the node to look at.</p>\n<p>param1 The desired up axis as a ref to cartesian 3D vector.</p>\n","desc":"<p>Orient node to look at node (-z axis pointing to node).</p>\n"},{"syntax":"lookAt(&lookAtPosition)","name":"lookAt","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>lookAtPosition","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Orient node to look at point (-z axis pointing to global position).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 XYZ coordinates of point to look at as ref to 3D vector.\n\\note This version calculates the up vector automatically to try to keep\nit relatively consistant with the original angle.</p>\n","desc":""},{"syntax":"lookAt(&lookAtPosition, upVector)","name":"lookAt","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>lookAtPosition<span class=\"token punctuation\">,</span> glm<span class=\"token operator\">::</span>vec3 upVector","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Orient node to look at point (-z axis pointing to global position).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 XYZ coordinates of point to look at as ref to 3D vector.</p>\n<p>param1 The desired up axis as a cartesian 3D vector.</p>\n","desc":"<p>Orient node to look at position (-z axis pointing to position).</p>\n"},{"syntax":"move(&offset)","name":"move","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>offset","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Move node by relative amount with xyz as ref to 3D vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative position change along all axes as ref to 3D vector.</p>\n","desc":"<p>Move by arbitrary amount.</p>\n"},{"syntax":"move(x, y, z)","name":"move","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> z","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Move node by relative amount with xyz coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative position change along x axis as a float.</p>\n<p>param1 Desired relative position change along y axis as a float.</p>\n<p>param2 Desired relative position change along z axis as a float.</p>\n","desc":"<p>Move by arbitrary amount.</p>\n"},{"syntax":"ofNode(&&node)","name":"ofNode","returns":null,"returns_description":null,"parameters":"ofNode <span class=\"token operator\">&amp;&amp;</span>node","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofNode(&node)","name":"ofNode","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofNode <span class=\"token operator\">&amp;</span>node","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofNode()","name":"ofNode","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\cond INTERNAL</p>\n","desc":""},{"syntax":"onOrientationChanged()","name":"onOrientationChanged","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>classes extending ofNode can override this methods to get notified when the orientation changed.</p>\n","desc":"<p>Classes extending ofNode can override these methods to get notified when the orientation changed.</p>\n"},{"syntax":"onParentOrientationChanged(&orientation)","name":"onParentOrientationChanged","returns":"void","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>orientation","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"onParentPositionChanged(&position)","name":"onParentPositionChanged","returns":"void","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>position","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"onParentScaleChanged(&scale)","name":"onParentScaleChanged","returns":"void","returns_description":null,"parameters":"glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>scale","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"onPositionChanged()","name":"onPositionChanged","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>classes extending ofNode can override this method to get\nnotified when the position changed.</p>\n","desc":"<p>Classes extending ofNode can override these methods to get notified when the position changed.</p>\n"},{"syntax":"onScaleChanged()","name":"onScaleChanged","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>classes extending ofNode can override this methods to get notified when the scale changed.</p>\n","desc":"<p>Classes extending ofNode can override these methods to get notified when the scale changed.</p>\n"},{"syntax":"operator=(&&node)","name":"operator=","returns":"ofNode &","returns_description":null,"parameters":"ofNode <span class=\"token operator\">&amp;&amp;</span>node","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"operator=(&node)","name":"operator=","returns":"ofNode &","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofNode <span class=\"token operator\">&amp;</span>node","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"orbitDeg(longitude, latitude, radius, &centerNode)","name":"orbitDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> longitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> latitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> ofNode <span class=\"token operator\">&amp;</span>centerNode","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Orbit node around another node at a specific radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 The longitudinal position of the node in degrees as float.</p>\n<p>param1 The latitudinal position of the node in degrees as float.</p>\n<p>param2 The desired radius from the other node in degrees as float.</p>\n<p>param3 A reference to the node to rotate around.</p>\n","desc":""},{"syntax":"orbitDeg(longitude, latitude, radius, &centerPoint)","name":"orbitDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> longitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> latitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>centerPoint","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Orbit node around a global position at a specific radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 The longitudinal position of the node in degrees as float.</p>\n<p>param1 The latitudinal position of the node in degrees as float.</p>\n<p>param2 The desired radius from the position in degrees as float.</p>\n<p>param3 The global position to orbit around as ref to 3D vector. Default = (0, 0, 0).</p>\n","desc":""},{"syntax":"orbitRad(longitude, latitude, radius, &centerNode)","name":"orbitRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> longitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> latitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> ofNode <span class=\"token operator\">&amp;</span>centerNode","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Orbit node around another node at a specific radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 The longitudinal position of the node in radians as float.</p>\n<p>param1 The latitudinal position of the node in radians as float.</p>\n<p>param2 The desired radius from the other node in radians as float.</p>\n<p>param3 A reference to the node to rotate around.</p>\n","desc":""},{"syntax":"orbitRad(longitude, latitude, radius, &centerPoint)","name":"orbitRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> longitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> latitude<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>centerPoint","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Orbit node around a global position at a specific radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 The longitudinal position of the node in radians as float.</p>\n<p>param1 The latitudinal position of the node in radians as float.</p>\n<p>param2 The desired radius from the position in radians as float.</p>\n<p>param3 The global position to orbit around as ref to 3D vector. Default = (0, 0, 0).</p>\n","desc":""},{"syntax":"panDeg(degrees)","name":"panDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate left+right relative to current orientation (around local y axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local y axis in degrees as float.</p>\n","desc":""},{"syntax":"panRad(radians)","name":"panRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radians","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate left+right relative to current orientation (around local y axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local y axis in radians as float.</p>\n","desc":""},{"syntax":"removeListener(&node)","name":"removeListener","returns":"void","returns_description":null,"parameters":"ofNode <span class=\"token operator\">&amp;</span>node","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"resetTransform()","name":"resetTransform","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Reset this node's transformations, position, rotation and scale.</p>\n","desc":""},{"syntax":"restoreTransformGL(*renderer)","name":"restoreTransformGL","returns":"void","returns_description":null,"parameters":"ofBaseRenderer <span class=\"token operator\">*</span>renderer","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Restore opengl renderer's previous modelview transform matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 A pointer to the renderer you want to restore transformation to;</p>\n","desc":""},{"syntax":"rollDeg(degrees)","name":"rollDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Roll left+right relative to current orientation (around local z axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local z axis in degrees as float.</p>\n","desc":""},{"syntax":"rollRad(radians)","name":"rollRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radians","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Roll left+right relative to current orientation (around local z axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local z axis in radians as float.</p>\n","desc":""},{"syntax":"rotate(&q)","name":"rotate","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate relative to current orientation by quaternion.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change as a ref to quaternion.</p>\n","desc":"<p>Rotate around arbitrary axis by angle.</p>\n"},{"syntax":"rotateAround(&q, &point)","name":"rotateAround","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>point","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate relative to current orientation by quaternion around point.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change as a ref to quaternion.</p>\n<p>param1 Point to rotate around in local xyz coordinates as ref to 3D vector.</p>\n","desc":"<p>Rotate around arbitrary axis by angle around point.</p>\n"},{"syntax":"rotateAroundDeg(degrees, &axis, &point)","name":"rotateAroundDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>point","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate relative to current orientation around arbitrary axis around point.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in degrees as float.</p>\n<p>param1 The arbitrary axis to rotate around as ref to cartesian 3D vector.</p>\n<p>param2 Point to rotate around in local xyz coordinates as ref to 3D vector.</p>\n","desc":""},{"syntax":"rotateAroundRad(radians, &axis, &point)","name":"rotateAroundRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>axis<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>point","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate relative to current orientation around arbitrary axis around point.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in degrees as float.</p>\n<p>param1 The arbitrary axis to rotate around as ref to cartesian 3D vector.</p>\n<p>param2 Point to rotate around in local xyz coordinates as ref to 3D vector.</p>\n","desc":""},{"syntax":"rotateDeg(degrees, &v)","name":"rotateDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate relative to current orientation around arbitrary axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in degrees as float.</p>\n<p>param1 Desired axis to rotate around as a ref to cartesian 3D Vector.</p>\n","desc":""},{"syntax":"rotateDeg(degrees, vx, vy, vz)","name":"rotateDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vz","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate relative to current orientation around arbitrary axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in degrees as float.</p>\n<p>param1 X angle of the axis to rotate around in degrees as float.</p>\n<p>param2 Y angle of the axis to rotate around in degrees as float.</p>\n<p>param3 Z angle of the axis to rotate around in degrees as float.</p>\n","desc":""},{"syntax":"rotateRad(radians, &v)","name":"rotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate relative to current orientation around arbitrary axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in radians as float.</p>\n<p>param1 Desired axis to rotate around as a ref to cartesian 3D Vector.</p>\n","desc":""},{"syntax":"rotateRad(radians, vx, vy, vz)","name":"rotateRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radians<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> vz","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Rotate relative to current orientation around arbitrary axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in radians as float.</p>\n<p>param1 X angle of the axis to rotate around in degrees as float.</p>\n<p>param2 Y angle of the axis to rotate around in degrees as float.</p>\n<p>param3 Z angle of the axis to rotate around in degrees as float.</p>\n","desc":""},{"syntax":"setGlobalOrientation(&q)","name":"setGlobalOrientation","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set global orientation with a quaternion.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired global orientation as ref to an glm::quat.</p>\n","desc":""},{"syntax":"setGlobalPosition(&p)","name":"setGlobalPosition","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the global position of the node using a 3D vector of coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired global xyz coordinates as ref to 3D vector.</p>\n","desc":""},{"syntax":"setGlobalPosition(px, py, pz)","name":"setGlobalPosition","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> px<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> py<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pz","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the global position of the node using xyz coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired global x coordinate as a float.</p>\n<p>param1 Desired global y coordinate as a float.</p>\n<p>param2 Desired global z coordinate as a float.</p>\n","desc":""},{"syntax":"setOrientation(&eulerAngles)","name":"setOrientation","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>eulerAngles","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set local orientation with xyz euler angles.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local xyz angles in degrees, as ref to 3D vector.\n\\note Using euler angles can cause gimbal lock.</p>\n<p><strong>See also</strong>: https://en.wikipedia.org/wiki/Gimbal_lock</p>\n","desc":""},{"syntax":"setOrientation(&q)","name":"setOrientation","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>quat <span class=\"token operator\">&amp;</span>q","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set local orientation with a quaternion.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local orientation as ref to an glm::quat.</p>\n","desc":""},{"syntax":"setParent(&parent, bMaintainGlobalTransform = false)","name":"setParent","returns":"void","returns_description":null,"parameters":"ofNode <span class=\"token operator\">&amp;</span>parent<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> bMaintainGlobalTransform<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set parent for the node. The node will inherit transformations from parent.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Reference to the ofNode which becomes the parent node.</p>\n<p>param1 Boolean if maintain child's global transformations (default = false).</p>\n","desc":"<p>Set parent to link nodes transformations are inherited from parent node set to NULL if not needed (default).</p>\n"},{"syntax":"setPosition(&p)","name":"setPosition","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>p","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the local position of the node using a 3D vector of coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local xyz coordinates as ref to 3D vector.</p>\n","desc":""},{"syntax":"setPosition(px, py, pz)","name":"setPosition","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> px<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> py<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> pz","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the local position of the node using xyz coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local x coordinate as a float.</p>\n<p>param1 Desired local y coordinate as a float.</p>\n<p>param2 Desired local z coordinate as a float.</p>\n","desc":""},{"syntax":"setScale(&s)","name":"setScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>vec3 <span class=\"token operator\">&amp;</span>s","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set local scale for xyz axes individually with a 3D vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local scale for all axes as ref to 3D vector where 1 = 100%.</p>\n","desc":""},{"syntax":"setScale(s)","name":"setScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> s","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set local uniform scale (x, y, and z are equally scaled).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired scale for all axes as a float where 1 = 100%.</p>\n","desc":""},{"syntax":"setScale(sx, sy, sz)","name":"setScale","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> sx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sy<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> sz","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set local scale for xyz axes individually.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local scale for x axis as a float where 1 = 100%.</p>\n<p>param1 Desired local scale for y axis as a float where 1 = 100%.</p>\n<p>param2 Desired local scale for z axis as a float where 1 = 100%.</p>\n","desc":""},{"syntax":"tiltDeg(degrees)","name":"tiltDeg","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> degrees","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Tilt up+down relative to current orientation (around local x axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local x axis in degrees as float.</p>\n","desc":""},{"syntax":"tiltRad(radians)","name":"tiltRad","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radians","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Tilt up+down relative to current orientation (around local x axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local x axis in radians as float.</p>\n","desc":""},{"syntax":"transformGL(*renderer)","name":"transformGL","returns":"void","returns_description":null,"parameters":"ofBaseRenderer <span class=\"token operator\">*</span>renderer","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set opengl renderer's modelview matrix to this nodes transform.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 A pointer to the renderer you want to set to this node's transform;\n\\note If you want to draw something at the position+orientation+scale of this node,\ncall ofNode::transform(); write your draw code, and ofNode::restoreTransform();\nOR A simpler way is to extend ofNode and override ofNode::customDraw();</p>\n","desc":"<p>Set opengl's modelview matrix to this nodes transform.\nIf you want to draw something at the position+orientation+scale of this node...\n...call ofNode::transform(); write your draw code, and ofNode::restoreTransform();\nOR A simpler way is to extend ofNode and override ofNode::customDraw().</p>\n"},{"syntax":"truck(amount)","name":"truck","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> amount","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Move node left+right relative to current position (in local x axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative position change along local x axis as float.</p>\n","desc":"<p>move sideways (in local x axis)</p>\n"},{"syntax":"updateAxis()","name":"updateAxis","returns":"void","returns_description":null,"parameters":null,"access":"protected","version_started":"0.9.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"~ofNode()","name":"~ofNode","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"axis","type":"ofVec3f","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"children","type":"int","access":"private","version_started":"0.10.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"legacyCustomDrawOverrided","type":"bool","access":"private","version_started":"0.9.0","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"localTransformMatrix","type":"ofMatrix4x4","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"orientation","type":"ofQuaternion","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"parent","type":"ofNode","access":"protected","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"position","type":"ofVec3f","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"scale","type":"ofVec3f","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofNode</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>A generic 3d object in space with transformation (position, rotation, scale).</p>\n<p>##Description</p>\n<p>The ofNode is the base of all things 3d. It lets you represent a location and orientation in 3d space and also allows you to add children or parents so that sets of nodes can move together. This is handy for representing complex 3d models that are linked together, the same way that your hand is linked to your wrist (hopefully), which is linked to your elbow (hopefully), and so on. Nodes are the base of the ofPrimitives, ofCamera, and ofEasyCamera, among other things.</p>\n<p>To get the current position, check out: getX(), getY(), getZ(). To get the axis of the node call getXAxis() (or the y and z variants for those other axes). Another really useful feature of the ofNode is that you can get the <a href=\"http://en.wikipedia.org/wiki/Euler_angles\">Eulerian angles</a> of each node: getPitch(), getHeading(), getRoll(). The global transformation matrix of the ofNode is also available using the getGlobalTransformMatrix(), very handy for figuring out things in relation to the OpenGL representation of your OF world. getGlobalOrientation() also is handy, returning a ofQuaternion that you can use to find out whether your node is upside down in relation to the rest of your OF world (really an OpenGL context, but let's not get into that quite yet).</p>\n<p>##Methods</p>\n<p>###void addListener(&amp;node)</p>\n<p>&lt;!--\n<em>syntax: addListener(&amp;node)</em>\n<em>name: addListener</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofNode &amp;node</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void boom(amount)</p>\n<p>&lt;!--\n<em>syntax: boom(amount)</em>\n<em>name: boom</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float amount</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Move node up+down relative to current position (in local y axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative position change along local y axis as float.</p>\n<p>_description: _</p>\n<p>Move up+down (in local y axis).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearParent(bMaintainGlobalTransform = false)</p>\n<p>&lt;!--\n<em>syntax: clearParent(bMaintainGlobalTransform = false)</em>\n<em>name: clearParent</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: bool bMaintainGlobalTransform=false</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Remove parent node linking.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Boolean if maintain child's global transformations (default = false).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void createMatrix()</p>\n<p>&lt;!--\n<em>syntax: createMatrix()</em>\n<em>name: createMatrix</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void customDraw()</p>\n<p>&lt;!--\n<em>syntax: customDraw()</em>\n<em>name: customDraw</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>If you extend ofNode and wish to change the way it draws, extend this.\n\\note Try to not use global functions for rendering and instead use the passed\nrenderer.</p>\n<p>_description: _</p>\n<p>If you extend ofNode and wish to change the way it draws, extend this.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void customDraw(*renderer)</p>\n<p>&lt;!--\n<em>syntax: customDraw(*renderer)</em>\n<em>name: customDraw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofBaseRenderer *renderer</em>\n<em>access: public</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>If you extend ofNode and wish to change the way it draws, extend this.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 A pointer to the renderer you want to draw to.\n\\note Try to not use global functions for rendering and instead use the passed\nrenderer.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void dolly(amount)</p>\n<p>&lt;!--\n<em>syntax: dolly(amount)</em>\n<em>name: dolly</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float amount</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Move node backward+forward relative to current position (in local z axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative position change along local z axis as float.</p>\n<p>_description: _</p>\n<p>Move forward+backward (in local z axis)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw()</p>\n<p>&lt;!--\n<em>syntax: draw()</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Draw the node as a white cube with xyz axes.\n\\note do NOT override this.\nIt transforms the node to its position+orientation+scale\nand calls the virtual 'customDraw' method above which you CAN override.</p>\n<p>_description: _</p>\n<p>Draw function. do NOT override this transforms the node to its position+orientation+scale and calls the virtual 'customDraw' method above which you CAN override.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::quat getGlobalOrientation()</p>\n<p>&lt;!--\n<em>syntax: getGlobalOrientation()</em>\n<em>name: getGlobalOrientation</em>\n<em>returns: glm::quat</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the global orientation of the node as a quaternion.</p>\n<p><strong>Returns</strong>: An quaternion of the global orientations(useful for complex rotations)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getGlobalPosition()</p>\n<p>&lt;!--\n<em>syntax: getGlobalPosition()</em>\n<em>name: getGlobalPosition</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get node's global position as a 3D vector.</p>\n<p><strong>Returns</strong>: A 3D vector with the global coordinates.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getGlobalScale()</p>\n<p>&lt;!--\n<em>syntax: getGlobalScale()</em>\n<em>name: getGlobalScale</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get global scale of node in xyz axes where 1 is default.</p>\n<p><strong>Returns</strong>: The global scale in the xyz axes where 1 = 100% of size.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::mat4 getGlobalTransformMatrix()</p>\n<p>&lt;!--\n<em>syntax: getGlobalTransformMatrix()</em>\n<em>name: getGlobalTransformMatrix</em>\n<em>returns: glm::mat4</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get node's global transformations (position, orientation, scale).</p>\n<p><strong>Returns</strong>: A refrence to mat4 containing node's global transformations.</p>\n<p><strong>See also</strong>: https://open.gl/transformations</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHeadingDeg()</p>\n<p>&lt;!--\n<em>syntax: getHeadingDeg()</em>\n<em>name: getHeadingDeg</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get heading of node, aka the rotation along local y axis.</p>\n<p><strong>Returns</strong>: The rotation around the local y axis in degrees, as a float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHeadingRad()</p>\n<p>&lt;!--\n<em>syntax: getHeadingRad()</em>\n<em>name: getHeadingRad</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get heading of node, aka the rotation along local y axis.</p>\n<p><strong>Returns</strong>: The rotation around the local y axis in degrees, as a float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const glm::mat4 &amp; getLocalTransformMatrix()</p>\n<p>&lt;!--\n<em>syntax: getLocalTransformMatrix()</em>\n<em>name: getLocalTransformMatrix</em>\n<em>returns: const glm::mat4 &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get node's local transformations (position, orientation, scale).</p>\n<p><strong>Returns</strong>: A refrence to mat4 containing node's local transformations.</p>\n<p><strong>See also</strong>: https://open.gl/transformations</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getLookAtDir()</p>\n<p>&lt;!--\n<em>syntax: getLookAtDir()</em>\n<em>name: getLookAtDir</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get direction the node looks at aka local -z axis, as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local -z axis direction.</p>\n<p>_description: _</p>\n<p>Get -z axis.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getOrientationEulerDeg()</p>\n<p>&lt;!--\n<em>syntax: getOrientationEulerDeg()</em>\n<em>name: getOrientationEulerDeg</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get local orientation of node in degrees around x, y, and z axes.</p>\n<p><strong>Returns</strong>: The local x, y and z axes orientation in degrees, as a 3D vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getOrientationEulerRad()</p>\n<p>&lt;!--\n<em>syntax: getOrientationEulerRad()</em>\n<em>name: getOrientationEulerRad</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get local orientation of node in degrees around x, y, and z axes.</p>\n<p><strong>Returns</strong>: The local x, y and z axes orientation in degrees, as a 3D vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::quat getOrientationQuat()</p>\n<p>&lt;!--\n<em>syntax: getOrientationQuat()</em>\n<em>name: getOrientationQuat</em>\n<em>returns: glm::quat</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the local orientation of the node as a quaternion.</p>\n<p><strong>Returns</strong>: A quaternion of local orientation (useful for complex rotations)</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofNode * getParent()</p>\n<p>&lt;!--\n<em>syntax: getParent()</em>\n<em>name: getParent</em>\n<em>returns: ofNode *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the parent node of this node.</p>\n<p><strong>Returns</strong>: Pointer to parent ofNode.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getPitchDeg()</p>\n<p>&lt;!--\n<em>syntax: getPitchDeg()</em>\n<em>name: getPitchDeg</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get pitch of node, aka the rotation along local x axis.</p>\n<p><strong>Returns</strong>: The rotation around the local x axis in degrees, as a float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getPitchRad()</p>\n<p>&lt;!--\n<em>syntax: getPitchRad()</em>\n<em>name: getPitchRad</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get pitch of node, aka the rotation along local x axis.</p>\n<p><strong>Returns</strong>: The rotation around the local x axis in degrees, as a float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getPosition()</p>\n<p>&lt;!--\n<em>syntax: getPosition()</em>\n<em>name: getPosition</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get node's local position as a 3D vector.</p>\n<p><strong>Returns</strong>: A 3D vector with the local coordinates.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getRollDeg()</p>\n<p>&lt;!--\n<em>syntax: getRollDeg()</em>\n<em>name: getRollDeg</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get roll of node, aka the rotation along local z axis.</p>\n<p><strong>Returns</strong>: The rotation around the local z axis in degrees, as a float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getRollRad()</p>\n<p>&lt;!--\n<em>syntax: getRollRad()</em>\n<em>name: getRollRad</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get roll of node, aka the rotation along local z axis.</p>\n<p><strong>Returns</strong>: The rotation around the local z axis in degrees, as a float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getScale()</p>\n<p>&lt;!--\n<em>syntax: getScale()</em>\n<em>name: getScale</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get local scale of node in xyz axes where 1 is default.</p>\n<p><strong>Returns</strong>: The local scale in the xyz axes where 1 = 100% of size.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getSideDir()</p>\n<p>&lt;!--\n<em>syntax: getSideDir()</em>\n<em>name: getSideDir</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get direction of node's side aka local x axis, as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local x axis direction.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getUpDir()</p>\n<p>&lt;!--\n<em>syntax: getUpDir()</em>\n<em>name: getUpDir</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get direction of node's top aka local y axis, as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local y axis direction.</p>\n<p>_description: _</p>\n<p>Get y axis.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getX()</p>\n<p>&lt;!--\n<em>syntax: getX()</em>\n<em>name: getX</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get node's local x position.</p>\n<p><strong>Returns</strong>: Local x coordinate as a float.</p>\n<p>_description: _</p>\n<p>Get x coodinate.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getXAxis()</p>\n<p>&lt;!--\n<em>syntax: getXAxis()</em>\n<em>name: getXAxis</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the node's local x axis as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local x axis direction.</p>\n<p>_description: _</p>\n<p>Get x axis.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getY()</p>\n<p>&lt;!--\n<em>syntax: getY()</em>\n<em>name: getY</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get node's local y position.</p>\n<p><strong>Returns</strong>: Local y coordinate as a float.</p>\n<p>_description: _</p>\n<p>Get y coordinate.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getYAxis()</p>\n<p>&lt;!--\n<em>syntax: getYAxis()</em>\n<em>name: getYAxis</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the node's local y axis as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local y axis direction.</p>\n<p>_description: _</p>\n<p>Get y axis.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getZ()</p>\n<p>&lt;!--\n<em>syntax: getZ()</em>\n<em>name: getZ</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get node's local z position.</p>\n<p><strong>Returns</strong>: Local z coordinate as a float.</p>\n<p>_description: _</p>\n<p>Get z coordinate.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getZAxis()</p>\n<p>&lt;!--\n<em>syntax: getZAxis()</em>\n<em>name: getZAxis</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the node's local z axis as 3d vector.</p>\n<p><strong>Returns</strong>: A normalized 3D vector of the node's local z axis direction.</p>\n<p>_description: _</p>\n<p>Get z axis.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void lookAt(&amp;lookAtNode)</p>\n<p>&lt;!--\n<em>syntax: lookAt(&amp;lookAtNode)</em>\n<em>name: lookAt</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofNode &amp;lookAtNode</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Orient node to look at another node (-z axis pointing at other node).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 A reference to the node to look at.\n\\note This version calculates the up vector automatically to try to keep\nit relatively consistant with the original angle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void lookAt(&amp;lookAtNode, &amp;upVector)</p>\n<p>&lt;!--\n<em>syntax: lookAt(&amp;lookAtNode, &amp;upVector)</em>\n<em>name: lookAt</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofNode &amp;lookAtNode, const glm::vec3 &amp;upVector</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Orient node to look at another node (-z axis pointing at other node).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 A reference to the node to look at.</p>\n<p>param1 The desired up axis as a ref to cartesian 3D vector.</p>\n<p>_description: _</p>\n<p>Orient node to look at node (-z axis pointing to node).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void lookAt(&amp;lookAtPosition)</p>\n<p>&lt;!--\n<em>syntax: lookAt(&amp;lookAtPosition)</em>\n<em>name: lookAt</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;lookAtPosition</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Orient node to look at point (-z axis pointing to global position).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 XYZ coordinates of point to look at as ref to 3D vector.\n\\note This version calculates the up vector automatically to try to keep\nit relatively consistant with the original angle.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void lookAt(&amp;lookAtPosition, upVector)</p>\n<p>&lt;!--\n<em>syntax: lookAt(&amp;lookAtPosition, upVector)</em>\n<em>name: lookAt</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;lookAtPosition, glm::vec3 upVector</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Orient node to look at point (-z axis pointing to global position).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 XYZ coordinates of point to look at as ref to 3D vector.</p>\n<p>param1 The desired up axis as a cartesian 3D vector.</p>\n<p>_description: _</p>\n<p>Orient node to look at position (-z axis pointing to position).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void move(&amp;offset)</p>\n<p>&lt;!--\n<em>syntax: move(&amp;offset)</em>\n<em>name: move</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;offset</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Move node by relative amount with xyz as ref to 3D vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative position change along all axes as ref to 3D vector.</p>\n<p>_description: _</p>\n<p>Move by arbitrary amount.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void move(x, y, z)</p>\n<p>&lt;!--\n<em>syntax: move(x, y, z)</em>\n<em>name: move</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float x, float y, float z</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Move node by relative amount with xyz coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative position change along x axis as a float.</p>\n<p>param1 Desired relative position change along y axis as a float.</p>\n<p>param2 Desired relative position change along z axis as a float.</p>\n<p>_description: _</p>\n<p>Move by arbitrary amount.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofNode(&amp;&amp;node)</h3>\n<p>&lt;!--\n<em>syntax: ofNode(&amp;&amp;node)</em>\n<em>name: ofNode</em>\n_returns: _\n_returns_description: _\n<em>parameters: ofNode &amp;&amp;node</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofNode(&amp;node)</h3>\n<p>&lt;!--\n<em>syntax: ofNode(&amp;node)</em>\n<em>name: ofNode</em>\n_returns: _\n_returns_description: _\n<em>parameters: const ofNode &amp;node</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofNode()</h3>\n<p>&lt;!--\n<em>syntax: ofNode()</em>\n<em>name: ofNode</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\cond INTERNAL</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void onOrientationChanged()</p>\n<p>&lt;!--\n<em>syntax: onOrientationChanged()</em>\n<em>name: onOrientationChanged</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>classes extending ofNode can override this methods to get notified when the orientation changed.</p>\n<p>_description: _</p>\n<p>Classes extending ofNode can override these methods to get notified when the orientation changed.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void onParentOrientationChanged(&amp;orientation)</p>\n<p>&lt;!--\n<em>syntax: onParentOrientationChanged(&amp;orientation)</em>\n<em>name: onParentOrientationChanged</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: glm::quat &amp;orientation</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void onParentPositionChanged(&amp;position)</p>\n<p>&lt;!--\n<em>syntax: onParentPositionChanged(&amp;position)</em>\n<em>name: onParentPositionChanged</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: glm::vec3 &amp;position</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void onParentScaleChanged(&amp;scale)</p>\n<p>&lt;!--\n<em>syntax: onParentScaleChanged(&amp;scale)</em>\n<em>name: onParentScaleChanged</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: glm::vec3 &amp;scale</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void onPositionChanged()</p>\n<p>&lt;!--\n<em>syntax: onPositionChanged()</em>\n<em>name: onPositionChanged</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>classes extending ofNode can override this method to get\nnotified when the position changed.</p>\n<p>_description: _</p>\n<p>Classes extending ofNode can override these methods to get notified when the position changed.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void onScaleChanged()</p>\n<p>&lt;!--\n<em>syntax: onScaleChanged()</em>\n<em>name: onScaleChanged</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>classes extending ofNode can override this methods to get notified when the scale changed.</p>\n<p>_description: _</p>\n<p>Classes extending ofNode can override these methods to get notified when the scale changed.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofNode &amp; operator=(&amp;&amp;node)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;&amp;node)</em>\n<em>name: operator=</em>\n<em>returns: ofNode &amp;</em>\n_returns_description: _\n<em>parameters: ofNode &amp;&amp;node</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofNode &amp; operator=(&amp;node)</p>\n<p>&lt;!--\n<em>syntax: operator=(&amp;node)</em>\n<em>name: operator=</em>\n<em>returns: ofNode &amp;</em>\n_returns_description: _\n<em>parameters: const ofNode &amp;node</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void orbitDeg(longitude, latitude, radius, &amp;centerNode)</p>\n<p>&lt;!--\n<em>syntax: orbitDeg(longitude, latitude, radius, &amp;centerNode)</em>\n<em>name: orbitDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float longitude, float latitude, float radius, ofNode &amp;centerNode</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Orbit node around another node at a specific radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 The longitudinal position of the node in degrees as float.</p>\n<p>param1 The latitudinal position of the node in degrees as float.</p>\n<p>param2 The desired radius from the other node in degrees as float.</p>\n<p>param3 A reference to the node to rotate around.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void orbitDeg(longitude, latitude, radius, &amp;centerPoint)</p>\n<p>&lt;!--\n<em>syntax: orbitDeg(longitude, latitude, radius, &amp;centerPoint)</em>\n<em>name: orbitDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float longitude, float latitude, float radius, const glm::vec3 &amp;centerPoint</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Orbit node around a global position at a specific radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 The longitudinal position of the node in degrees as float.</p>\n<p>param1 The latitudinal position of the node in degrees as float.</p>\n<p>param2 The desired radius from the position in degrees as float.</p>\n<p>param3 The global position to orbit around as ref to 3D vector. Default = (0, 0, 0).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void orbitRad(longitude, latitude, radius, &amp;centerNode)</p>\n<p>&lt;!--\n<em>syntax: orbitRad(longitude, latitude, radius, &amp;centerNode)</em>\n<em>name: orbitRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float longitude, float latitude, float radius, ofNode &amp;centerNode</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Orbit node around another node at a specific radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 The longitudinal position of the node in radians as float.</p>\n<p>param1 The latitudinal position of the node in radians as float.</p>\n<p>param2 The desired radius from the other node in radians as float.</p>\n<p>param3 A reference to the node to rotate around.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void orbitRad(longitude, latitude, radius, &amp;centerPoint)</p>\n<p>&lt;!--\n<em>syntax: orbitRad(longitude, latitude, radius, &amp;centerPoint)</em>\n<em>name: orbitRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float longitude, float latitude, float radius, const glm::vec3 &amp;centerPoint</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Orbit node around a global position at a specific radius.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 The longitudinal position of the node in radians as float.</p>\n<p>param1 The latitudinal position of the node in radians as float.</p>\n<p>param2 The desired radius from the position in radians as float.</p>\n<p>param3 The global position to orbit around as ref to 3D vector. Default = (0, 0, 0).</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void panDeg(degrees)</p>\n<p>&lt;!--\n<em>syntax: panDeg(degrees)</em>\n<em>name: panDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate left+right relative to current orientation (around local y axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local y axis in degrees as float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void panRad(radians)</p>\n<p>&lt;!--\n<em>syntax: panRad(radians)</em>\n<em>name: panRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radians</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate left+right relative to current orientation (around local y axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local y axis in radians as float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void removeListener(&amp;node)</p>\n<p>&lt;!--\n<em>syntax: removeListener(&amp;node)</em>\n<em>name: removeListener</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofNode &amp;node</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void resetTransform()</p>\n<p>&lt;!--\n<em>syntax: resetTransform()</em>\n<em>name: resetTransform</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Reset this node's transformations, position, rotation and scale.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void restoreTransformGL(*renderer)</p>\n<p>&lt;!--\n<em>syntax: restoreTransformGL(*renderer)</em>\n<em>name: restoreTransformGL</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBaseRenderer *renderer</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Restore opengl renderer's previous modelview transform matrix.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 A pointer to the renderer you want to restore transformation to;</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rollDeg(degrees)</p>\n<p>&lt;!--\n<em>syntax: rollDeg(degrees)</em>\n<em>name: rollDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Roll left+right relative to current orientation (around local z axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local z axis in degrees as float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rollRad(radians)</p>\n<p>&lt;!--\n<em>syntax: rollRad(radians)</em>\n<em>name: rollRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radians</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Roll left+right relative to current orientation (around local z axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local z axis in radians as float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotate(&amp;q)</p>\n<p>&lt;!--\n<em>syntax: rotate(&amp;q)</em>\n<em>name: rotate</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::quat &amp;q</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate relative to current orientation by quaternion.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change as a ref to quaternion.</p>\n<p>_description: _</p>\n<p>Rotate around arbitrary axis by angle.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateAround(&amp;q, &amp;point)</p>\n<p>&lt;!--\n<em>syntax: rotateAround(&amp;q, &amp;point)</em>\n<em>name: rotateAround</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::quat &amp;q, const glm::vec3 &amp;point</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate relative to current orientation by quaternion around point.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change as a ref to quaternion.</p>\n<p>param1 Point to rotate around in local xyz coordinates as ref to 3D vector.</p>\n<p>_description: _</p>\n<p>Rotate around arbitrary axis by angle around point.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateAroundDeg(degrees, &amp;axis, &amp;point)</p>\n<p>&lt;!--\n<em>syntax: rotateAroundDeg(degrees, &amp;axis, &amp;point)</em>\n<em>name: rotateAroundDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees, const glm::vec3 &amp;axis, const glm::vec3 &amp;point</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate relative to current orientation around arbitrary axis around point.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in degrees as float.</p>\n<p>param1 The arbitrary axis to rotate around as ref to cartesian 3D vector.</p>\n<p>param2 Point to rotate around in local xyz coordinates as ref to 3D vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateAroundRad(radians, &amp;axis, &amp;point)</p>\n<p>&lt;!--\n<em>syntax: rotateAroundRad(radians, &amp;axis, &amp;point)</em>\n<em>name: rotateAroundRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radians, const glm::vec3 &amp;axis, const glm::vec3 &amp;point</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate relative to current orientation around arbitrary axis around point.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in degrees as float.</p>\n<p>param1 The arbitrary axis to rotate around as ref to cartesian 3D vector.</p>\n<p>param2 Point to rotate around in local xyz coordinates as ref to 3D vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateDeg(degrees, &amp;v)</p>\n<p>&lt;!--\n<em>syntax: rotateDeg(degrees, &amp;v)</em>\n<em>name: rotateDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees, const glm::vec3 &amp;v</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate relative to current orientation around arbitrary axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in degrees as float.</p>\n<p>param1 Desired axis to rotate around as a ref to cartesian 3D Vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateDeg(degrees, vx, vy, vz)</p>\n<p>&lt;!--\n<em>syntax: rotateDeg(degrees, vx, vy, vz)</em>\n<em>name: rotateDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees, float vx, float vy, float vz</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate relative to current orientation around arbitrary axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in degrees as float.</p>\n<p>param1 X angle of the axis to rotate around in degrees as float.</p>\n<p>param2 Y angle of the axis to rotate around in degrees as float.</p>\n<p>param3 Z angle of the axis to rotate around in degrees as float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateRad(radians, &amp;v)</p>\n<p>&lt;!--\n<em>syntax: rotateRad(radians, &amp;v)</em>\n<em>name: rotateRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radians, const glm::vec3 &amp;v</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate relative to current orientation around arbitrary axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in radians as float.</p>\n<p>param1 Desired axis to rotate around as a ref to cartesian 3D Vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void rotateRad(radians, vx, vy, vz)</p>\n<p>&lt;!--\n<em>syntax: rotateRad(radians, vx, vy, vz)</em>\n<em>name: rotateRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radians, float vx, float vy, float vz</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Rotate relative to current orientation around arbitrary axis.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative angle change in radians as float.</p>\n<p>param1 X angle of the axis to rotate around in degrees as float.</p>\n<p>param2 Y angle of the axis to rotate around in degrees as float.</p>\n<p>param3 Z angle of the axis to rotate around in degrees as float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setGlobalOrientation(&amp;q)</p>\n<p>&lt;!--\n<em>syntax: setGlobalOrientation(&amp;q)</em>\n<em>name: setGlobalOrientation</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::quat &amp;q</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set global orientation with a quaternion.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired global orientation as ref to an glm::quat.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setGlobalPosition(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: setGlobalPosition(&amp;p)</em>\n<em>name: setGlobalPosition</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the global position of the node using a 3D vector of coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired global xyz coordinates as ref to 3D vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setGlobalPosition(px, py, pz)</p>\n<p>&lt;!--\n<em>syntax: setGlobalPosition(px, py, pz)</em>\n<em>name: setGlobalPosition</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float px, float py, float pz</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the global position of the node using xyz coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired global x coordinate as a float.</p>\n<p>param1 Desired global y coordinate as a float.</p>\n<p>param2 Desired global z coordinate as a float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setOrientation(&amp;eulerAngles)</p>\n<p>&lt;!--\n<em>syntax: setOrientation(&amp;eulerAngles)</em>\n<em>name: setOrientation</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;eulerAngles</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set local orientation with xyz euler angles.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local xyz angles in degrees, as ref to 3D vector.\n\\note Using euler angles can cause gimbal lock.</p>\n<p><strong>See also</strong>: https://en.wikipedia.org/wiki/Gimbal_lock</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setOrientation(&amp;q)</p>\n<p>&lt;!--\n<em>syntax: setOrientation(&amp;q)</em>\n<em>name: setOrientation</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::quat &amp;q</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set local orientation with a quaternion.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local orientation as ref to an glm::quat.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setParent(&amp;parent, bMaintainGlobalTransform = false)</p>\n<p>&lt;!--\n<em>syntax: setParent(&amp;parent, bMaintainGlobalTransform = false)</em>\n<em>name: setParent</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofNode &amp;parent, bool bMaintainGlobalTransform=false</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set parent for the node. The node will inherit transformations from parent.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Reference to the ofNode which becomes the parent node.</p>\n<p>param1 Boolean if maintain child's global transformations (default = false).</p>\n<p>_description: _</p>\n<p>Set parent to link nodes transformations are inherited from parent node set to NULL if not needed (default).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPosition(&amp;p)</p>\n<p>&lt;!--\n<em>syntax: setPosition(&amp;p)</em>\n<em>name: setPosition</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;p</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the local position of the node using a 3D vector of coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local xyz coordinates as ref to 3D vector.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setPosition(px, py, pz)</p>\n<p>&lt;!--\n<em>syntax: setPosition(px, py, pz)</em>\n<em>name: setPosition</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float px, float py, float pz</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the local position of the node using xyz coordinates.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local x coordinate as a float.</p>\n<p>param1 Desired local y coordinate as a float.</p>\n<p>param2 Desired local z coordinate as a float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setScale(&amp;s)</p>\n<p>&lt;!--\n<em>syntax: setScale(&amp;s)</em>\n<em>name: setScale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const glm::vec3 &amp;s</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set local scale for xyz axes individually with a 3D vector.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local scale for all axes as ref to 3D vector where 1 = 100%.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setScale(s)</p>\n<p>&lt;!--\n<em>syntax: setScale(s)</em>\n<em>name: setScale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float s</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set local uniform scale (x, y, and z are equally scaled).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired scale for all axes as a float where 1 = 100%.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setScale(sx, sy, sz)</p>\n<p>&lt;!--\n<em>syntax: setScale(sx, sy, sz)</em>\n<em>name: setScale</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float sx, float sy, float sz</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set local scale for xyz axes individually.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired local scale for x axis as a float where 1 = 100%.</p>\n<p>param1 Desired local scale for y axis as a float where 1 = 100%.</p>\n<p>param2 Desired local scale for z axis as a float where 1 = 100%.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void tiltDeg(degrees)</p>\n<p>&lt;!--\n<em>syntax: tiltDeg(degrees)</em>\n<em>name: tiltDeg</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float degrees</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Tilt up+down relative to current orientation (around local x axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local x axis in degrees as float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void tiltRad(radians)</p>\n<p>&lt;!--\n<em>syntax: tiltRad(radians)</em>\n<em>name: tiltRad</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radians</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Tilt up+down relative to current orientation (around local x axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative rotation change along local x axis in radians as float.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void transformGL(*renderer)</p>\n<p>&lt;!--\n<em>syntax: transformGL(*renderer)</em>\n<em>name: transformGL</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofBaseRenderer *renderer</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set opengl renderer's modelview matrix to this nodes transform.</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 A pointer to the renderer you want to set to this node's transform;\n\\note If you want to draw something at the position+orientation+scale of this node,\ncall ofNode::transform(); write your draw code, and ofNode::restoreTransform();\nOR A simpler way is to extend ofNode and override ofNode::customDraw();</p>\n<p>_description: _</p>\n<p>Set opengl's modelview matrix to this nodes transform.\nIf you want to draw something at the position+orientation+scale of this node...\n...call ofNode::transform(); write your draw code, and ofNode::restoreTransform();\nOR A simpler way is to extend ofNode and override ofNode::customDraw().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void truck(amount)</p>\n<p>&lt;!--\n<em>syntax: truck(amount)</em>\n<em>name: truck</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float amount</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Move node left+right relative to current position (in local x axis).</p>\n<p><strong>Parameters:</strong></p>\n<p>param0 Desired relative position change along local x axis as float.</p>\n<p>_description: _</p>\n<p>move sideways (in local x axis)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void updateAxis()</p>\n<p>&lt;!--\n<em>syntax: updateAxis()</em>\n<em>name: updateAxis</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofNode()</h3>\n<p>&lt;!--\n<em>syntax: ~ofNode()</em>\n<em>name: ~ofNode</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###ofVec3f axis</p>\n<p>&lt;!--\n<em>name: axis</em>\n<em>type: ofVec3f</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int children</p>\n<p>&lt;!--\n<em>name: children</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool legacyCustomDrawOverrided</p>\n<p>&lt;!--\n<em>name: legacyCustomDrawOverrided</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0.9.0</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMatrix4x4 localTransformMatrix</p>\n<p>&lt;!--\n<em>name: localTransformMatrix</em>\n<em>type: ofMatrix4x4</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofQuaternion orientation</p>\n<p>&lt;!--\n<em>name: orientation</em>\n<em>type: ofQuaternion</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofNode parent</p>\n<p>&lt;!--\n<em>name: parent</em>\n<em>type: ofNode</em>\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f position</p>\n<p>&lt;!--\n<em>name: position</em>\n<em>type: ofVec3f</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f scale</p>\n<p>&lt;!--\n<em>name: scale</em>\n<em>type: ofVec3f</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofNode\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: _\n-->\n\n##InlineDescription\n\nA generic 3d object in space with transformation (position, rotation, scale).\n\n\n\n\n\n##Description\n\nThe ofNode is the base of all things 3d. It lets you represent a location and orientation in 3d space and also allows you to add children or parents so that sets of nodes can move together. This is handy for representing complex 3d models that are linked together, the same way that your hand is linked to your wrist (hopefully), which is linked to your elbow (hopefully), and so on. Nodes are the base of the ofPrimitives, ofCamera, and ofEasyCamera, among other things.\n\nTo get the current position, check out: getX(), getY(), getZ(). To get the axis of the node call getXAxis() (or the y and z variants for those other axes). Another really useful feature of the ofNode is that you can get the [Eulerian angles](http://en.wikipedia.org/wiki/Euler_angles) of each node: getPitch(), getHeading(), getRoll(). The global transformation matrix of the ofNode is also available using the getGlobalTransformMatrix(), very handy for figuring out things in relation to the OpenGL representation of your OF world. getGlobalOrientation() also is handy, returning a ofQuaternion that you can use to find out whether your node is upside down in relation to the rest of your OF world (really an OpenGL context, but let's not get into that quite yet).\n\n\n\n\n\n##Methods\n\n\n\n###void addListener(&node)\n\n<!--\n_syntax: addListener(&node)_\n_name: addListener_\n_returns: void_\n_returns_description: _\n_parameters: ofNode &node_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void boom(amount)\n\n<!--\n_syntax: boom(amount)_\n_name: boom_\n_returns: void_\n_returns_description: _\n_parameters: float amount_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMove node up+down relative to current position (in local y axis).\n\n**Parameters:**\n\nparam0 Desired relative position change along local y axis as float.\n\n\n\n\n\n_description: _\n\nMove up+down (in local y axis).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearParent(bMaintainGlobalTransform = false)\n\n<!--\n_syntax: clearParent(bMaintainGlobalTransform = false)_\n_name: clearParent_\n_returns: void_\n_returns_description: _\n_parameters: bool bMaintainGlobalTransform=false_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemove parent node linking.\n\n**Parameters:**\n\nparam0 Boolean if maintain child's global transformations (default = false).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void createMatrix()\n\n<!--\n_syntax: createMatrix()_\n_name: createMatrix_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void customDraw()\n\n<!--\n_syntax: customDraw()_\n_name: customDraw_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nIf you extend ofNode and wish to change the way it draws, extend this.\n\\note Try to not use global functions for rendering and instead use the passed\nrenderer.\n\n\n\n\n\n_description: _\n\nIf you extend ofNode and wish to change the way it draws, extend this.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void customDraw(*renderer)\n\n<!--\n_syntax: customDraw(*renderer)_\n_name: customDraw_\n_returns: void_\n_returns_description: _\n_parameters: const ofBaseRenderer *renderer_\n_access: public_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nIf you extend ofNode and wish to change the way it draws, extend this.\n\n**Parameters:**\n\nparam0 A pointer to the renderer you want to draw to.\n\\note Try to not use global functions for rendering and instead use the passed\nrenderer.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void dolly(amount)\n\n<!--\n_syntax: dolly(amount)_\n_name: dolly_\n_returns: void_\n_returns_description: _\n_parameters: float amount_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMove node backward+forward relative to current position (in local z axis).\n\n**Parameters:**\n\nparam0 Desired relative position change along local z axis as float.\n\n\n\n\n\n_description: _\n\nMove forward+backward (in local z axis)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw()\n\n<!--\n_syntax: draw()_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDraw the node as a white cube with xyz axes.\n\\note do NOT override this.\nIt transforms the node to its position+orientation+scale\nand calls the virtual 'customDraw' method above which you CAN override.\n\n\n\n\n\n_description: _\n\nDraw function. do NOT override this transforms the node to its position+orientation+scale and calls the virtual 'customDraw' method above which you CAN override.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat getGlobalOrientation()\n\n<!--\n_syntax: getGlobalOrientation()_\n_name: getGlobalOrientation_\n_returns: glm::quat_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the global orientation of the node as a quaternion.\n\n**Returns**: An quaternion of the global orientations(useful for complex rotations)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getGlobalPosition()\n\n<!--\n_syntax: getGlobalPosition()_\n_name: getGlobalPosition_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet node's global position as a 3D vector.\n\n**Returns**: A 3D vector with the global coordinates.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getGlobalScale()\n\n<!--\n_syntax: getGlobalScale()_\n_name: getGlobalScale_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet global scale of node in xyz axes where 1 is default.\n\n**Returns**: The global scale in the xyz axes where 1 = 100% of size.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::mat4 getGlobalTransformMatrix()\n\n<!--\n_syntax: getGlobalTransformMatrix()_\n_name: getGlobalTransformMatrix_\n_returns: glm::mat4_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet node's global transformations (position, orientation, scale).\n\n**Returns**: A refrence to mat4 containing node's global transformations.\n\n**See also**: https://open.gl/transformations\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHeadingDeg()\n\n<!--\n_syntax: getHeadingDeg()_\n_name: getHeadingDeg_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet heading of node, aka the rotation along local y axis.\n\n**Returns**: The rotation around the local y axis in degrees, as a float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHeadingRad()\n\n<!--\n_syntax: getHeadingRad()_\n_name: getHeadingRad_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet heading of node, aka the rotation along local y axis.\n\n**Returns**: The rotation around the local y axis in degrees, as a float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const glm::mat4 & getLocalTransformMatrix()\n\n<!--\n_syntax: getLocalTransformMatrix()_\n_name: getLocalTransformMatrix_\n_returns: const glm::mat4 &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet node's local transformations (position, orientation, scale).\n\n**Returns**: A refrence to mat4 containing node's local transformations.\n\n**See also**: https://open.gl/transformations\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getLookAtDir()\n\n<!--\n_syntax: getLookAtDir()_\n_name: getLookAtDir_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet direction the node looks at aka local -z axis, as 3d vector.\n\n**Returns**: A normalized 3D vector of the node's local -z axis direction.\n\n\n\n\n\n_description: _\n\nGet -z axis.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getOrientationEulerDeg()\n\n<!--\n_syntax: getOrientationEulerDeg()_\n_name: getOrientationEulerDeg_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet local orientation of node in degrees around x, y, and z axes.\n\n**Returns**: The local x, y and z axes orientation in degrees, as a 3D vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getOrientationEulerRad()\n\n<!--\n_syntax: getOrientationEulerRad()_\n_name: getOrientationEulerRad_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet local orientation of node in degrees around x, y, and z axes.\n\n**Returns**: The local x, y and z axes orientation in degrees, as a 3D vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::quat getOrientationQuat()\n\n<!--\n_syntax: getOrientationQuat()_\n_name: getOrientationQuat_\n_returns: glm::quat_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the local orientation of the node as a quaternion.\n\n**Returns**: A quaternion of local orientation (useful for complex rotations)\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofNode * getParent()\n\n<!--\n_syntax: getParent()_\n_name: getParent_\n_returns: ofNode *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the parent node of this node.\n\n**Returns**: Pointer to parent ofNode.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getPitchDeg()\n\n<!--\n_syntax: getPitchDeg()_\n_name: getPitchDeg_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet pitch of node, aka the rotation along local x axis.\n\n**Returns**: The rotation around the local x axis in degrees, as a float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getPitchRad()\n\n<!--\n_syntax: getPitchRad()_\n_name: getPitchRad_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet pitch of node, aka the rotation along local x axis.\n\n**Returns**: The rotation around the local x axis in degrees, as a float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getPosition()\n\n<!--\n_syntax: getPosition()_\n_name: getPosition_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet node's local position as a 3D vector.\n\n**Returns**: A 3D vector with the local coordinates.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getRollDeg()\n\n<!--\n_syntax: getRollDeg()_\n_name: getRollDeg_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet roll of node, aka the rotation along local z axis.\n\n**Returns**: The rotation around the local z axis in degrees, as a float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getRollRad()\n\n<!--\n_syntax: getRollRad()_\n_name: getRollRad_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet roll of node, aka the rotation along local z axis.\n\n**Returns**: The rotation around the local z axis in degrees, as a float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getScale()\n\n<!--\n_syntax: getScale()_\n_name: getScale_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet local scale of node in xyz axes where 1 is default.\n\n**Returns**: The local scale in the xyz axes where 1 = 100% of size.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getSideDir()\n\n<!--\n_syntax: getSideDir()_\n_name: getSideDir_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet direction of node's side aka local x axis, as 3d vector.\n\n**Returns**: A normalized 3D vector of the node's local x axis direction.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getUpDir()\n\n<!--\n_syntax: getUpDir()_\n_name: getUpDir_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet direction of node's top aka local y axis, as 3d vector.\n\n**Returns**: A normalized 3D vector of the node's local y axis direction.\n\n\n\n\n\n_description: _\n\nGet y axis.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getX()\n\n<!--\n_syntax: getX()_\n_name: getX_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet node's local x position.\n\n**Returns**: Local x coordinate as a float.\n\n\n\n\n\n_description: _\n\nGet x coodinate.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getXAxis()\n\n<!--\n_syntax: getXAxis()_\n_name: getXAxis_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the node's local x axis as 3d vector.\n\n**Returns**: A normalized 3D vector of the node's local x axis direction.\n\n\n\n\n\n_description: _\n\nGet x axis.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getY()\n\n<!--\n_syntax: getY()_\n_name: getY_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet node's local y position.\n\n**Returns**: Local y coordinate as a float.\n\n\n\n\n\n_description: _\n\nGet y coordinate.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getYAxis()\n\n<!--\n_syntax: getYAxis()_\n_name: getYAxis_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the node's local y axis as 3d vector.\n\n**Returns**: A normalized 3D vector of the node's local y axis direction.\n\n\n\n\n\n_description: _\n\nGet y axis.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getZ()\n\n<!--\n_syntax: getZ()_\n_name: getZ_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet node's local z position.\n\n**Returns**: Local z coordinate as a float.\n\n\n\n\n\n_description: _\n\nGet z coordinate.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getZAxis()\n\n<!--\n_syntax: getZAxis()_\n_name: getZAxis_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the node's local z axis as 3d vector.\n\n**Returns**: A normalized 3D vector of the node's local z axis direction.\n\n\n\n\n\n_description: _\n\nGet z axis.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void lookAt(&lookAtNode)\n\n<!--\n_syntax: lookAt(&lookAtNode)_\n_name: lookAt_\n_returns: void_\n_returns_description: _\n_parameters: const ofNode &lookAtNode_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOrient node to look at another node (-z axis pointing at other node).\n\n**Parameters:**\n\nparam0 A reference to the node to look at.\n\\note This version calculates the up vector automatically to try to keep\n\t  it relatively consistant with the original angle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void lookAt(&lookAtNode, &upVector)\n\n<!--\n_syntax: lookAt(&lookAtNode, &upVector)_\n_name: lookAt_\n_returns: void_\n_returns_description: _\n_parameters: const ofNode &lookAtNode, const glm::vec3 &upVector_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOrient node to look at another node (-z axis pointing at other node).\n\n**Parameters:**\n\nparam0 A reference to the node to look at.\n\nparam1 The desired up axis as a ref to cartesian 3D vector.\n\n\n\n\n\n_description: _\n\nOrient node to look at node (-z axis pointing to node).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void lookAt(&lookAtPosition)\n\n<!--\n_syntax: lookAt(&lookAtPosition)_\n_name: lookAt_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &lookAtPosition_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOrient node to look at point (-z axis pointing to global position).\n\n**Parameters:**\n\nparam0 XYZ coordinates of point to look at as ref to 3D vector.\n\\note This version calculates the up vector automatically to try to keep\n\t  it relatively consistant with the original angle.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void lookAt(&lookAtPosition, upVector)\n\n<!--\n_syntax: lookAt(&lookAtPosition, upVector)_\n_name: lookAt_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &lookAtPosition, glm::vec3 upVector_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOrient node to look at point (-z axis pointing to global position).\n\n**Parameters:**\n\nparam0 XYZ coordinates of point to look at as ref to 3D vector.\n\nparam1 The desired up axis as a cartesian 3D vector.\n\n\n\n\n\n_description: _\n\nOrient node to look at position (-z axis pointing to position).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void move(&offset)\n\n<!--\n_syntax: move(&offset)_\n_name: move_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &offset_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMove node by relative amount with xyz as ref to 3D vector.\n\n**Parameters:**\n\nparam0 Desired relative position change along all axes as ref to 3D vector.\n\n\n\n\n\n_description: _\n\nMove by arbitrary amount.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void move(x, y, z)\n\n<!--\n_syntax: move(x, y, z)_\n_name: move_\n_returns: void_\n_returns_description: _\n_parameters: float x, float y, float z_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMove node by relative amount with xyz coordinates.\n\n**Parameters:**\n\nparam0 Desired relative position change along x axis as a float.\n\nparam1 Desired relative position change along y axis as a float.\n\nparam2 Desired relative position change along z axis as a float.\n\n\n\n\n\n_description: _\n\nMove by arbitrary amount.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofNode(&&node)\n\n<!--\n_syntax: ofNode(&&node)_\n_name: ofNode_\n_returns: _\n_returns_description: _\n_parameters: ofNode &&node_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofNode(&node)\n\n<!--\n_syntax: ofNode(&node)_\n_name: ofNode_\n_returns: _\n_returns_description: _\n_parameters: const ofNode &node_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofNode()\n\n<!--\n_syntax: ofNode()_\n_name: ofNode_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\cond INTERNAL\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void onOrientationChanged()\n\n<!--\n_syntax: onOrientationChanged()_\n_name: onOrientationChanged_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nclasses extending ofNode can override this methods to get notified when the orientation changed.\n\n\n\n\n\n_description: _\n\nClasses extending ofNode can override these methods to get notified when the orientation changed.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void onParentOrientationChanged(&orientation)\n\n<!--\n_syntax: onParentOrientationChanged(&orientation)_\n_name: onParentOrientationChanged_\n_returns: void_\n_returns_description: _\n_parameters: glm::quat &orientation_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void onParentPositionChanged(&position)\n\n<!--\n_syntax: onParentPositionChanged(&position)_\n_name: onParentPositionChanged_\n_returns: void_\n_returns_description: _\n_parameters: glm::vec3 &position_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void onParentScaleChanged(&scale)\n\n<!--\n_syntax: onParentScaleChanged(&scale)_\n_name: onParentScaleChanged_\n_returns: void_\n_returns_description: _\n_parameters: glm::vec3 &scale_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void onPositionChanged()\n\n<!--\n_syntax: onPositionChanged()_\n_name: onPositionChanged_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nclasses extending ofNode can override this method to get\nnotified when the position changed.\n\n\n\n\n\n_description: _\n\nClasses extending ofNode can override these methods to get notified when the position changed.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void onScaleChanged()\n\n<!--\n_syntax: onScaleChanged()_\n_name: onScaleChanged_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nclasses extending ofNode can override this methods to get notified when the scale changed.\n\n\n\n\n\n_description: _\n\nClasses extending ofNode can override these methods to get notified when the scale changed.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofNode & operator=(&&node)\n\n<!--\n_syntax: operator=(&&node)_\n_name: operator=_\n_returns: ofNode &_\n_returns_description: _\n_parameters: ofNode &&node_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofNode & operator=(&node)\n\n<!--\n_syntax: operator=(&node)_\n_name: operator=_\n_returns: ofNode &_\n_returns_description: _\n_parameters: const ofNode &node_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void orbitDeg(longitude, latitude, radius, &centerNode)\n\n<!--\n_syntax: orbitDeg(longitude, latitude, radius, &centerNode)_\n_name: orbitDeg_\n_returns: void_\n_returns_description: _\n_parameters: float longitude, float latitude, float radius, ofNode &centerNode_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOrbit node around another node at a specific radius.\n\n**Parameters:**\n\nparam0 The longitudinal position of the node in degrees as float.\n\nparam1 The latitudinal position of the node in degrees as float.\n\nparam2 The desired radius from the other node in degrees as float.\n\nparam3 A reference to the node to rotate around.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void orbitDeg(longitude, latitude, radius, &centerPoint)\n\n<!--\n_syntax: orbitDeg(longitude, latitude, radius, &centerPoint)_\n_name: orbitDeg_\n_returns: void_\n_returns_description: _\n_parameters: float longitude, float latitude, float radius, const glm::vec3 &centerPoint_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOrbit node around a global position at a specific radius.\n\n**Parameters:**\n\nparam0 The longitudinal position of the node in degrees as float.\n\nparam1 The latitudinal position of the node in degrees as float.\n\nparam2 The desired radius from the position in degrees as float.\n\nparam3 The global position to orbit around as ref to 3D vector. Default = (0, 0, 0).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void orbitRad(longitude, latitude, radius, &centerNode)\n\n<!--\n_syntax: orbitRad(longitude, latitude, radius, &centerNode)_\n_name: orbitRad_\n_returns: void_\n_returns_description: _\n_parameters: float longitude, float latitude, float radius, ofNode &centerNode_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOrbit node around another node at a specific radius.\n\n**Parameters:**\n\nparam0 The longitudinal position of the node in radians as float.\n\nparam1 The latitudinal position of the node in radians as float.\n\nparam2 The desired radius from the other node in radians as float.\n\nparam3 A reference to the node to rotate around.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void orbitRad(longitude, latitude, radius, &centerPoint)\n\n<!--\n_syntax: orbitRad(longitude, latitude, radius, &centerPoint)_\n_name: orbitRad_\n_returns: void_\n_returns_description: _\n_parameters: float longitude, float latitude, float radius, const glm::vec3 &centerPoint_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nOrbit node around a global position at a specific radius.\n\n**Parameters:**\n\nparam0 The longitudinal position of the node in radians as float.\n\nparam1 The latitudinal position of the node in radians as float.\n\nparam2 The desired radius from the position in radians as float.\n\nparam3 The global position to orbit around as ref to 3D vector. Default = (0, 0, 0).\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void panDeg(degrees)\n\n<!--\n_syntax: panDeg(degrees)_\n_name: panDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate left+right relative to current orientation (around local y axis).\n\n**Parameters:**\n\nparam0 Desired relative rotation change along local y axis in degrees as float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void panRad(radians)\n\n<!--\n_syntax: panRad(radians)_\n_name: panRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate left+right relative to current orientation (around local y axis).\n\n**Parameters:**\n\nparam0 Desired relative rotation change along local y axis in radians as float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void removeListener(&node)\n\n<!--\n_syntax: removeListener(&node)_\n_name: removeListener_\n_returns: void_\n_returns_description: _\n_parameters: ofNode &node_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void resetTransform()\n\n<!--\n_syntax: resetTransform()_\n_name: resetTransform_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nReset this node's transformations, position, rotation and scale.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void restoreTransformGL(*renderer)\n\n<!--\n_syntax: restoreTransformGL(*renderer)_\n_name: restoreTransformGL_\n_returns: void_\n_returns_description: _\n_parameters: ofBaseRenderer *renderer_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRestore opengl renderer's previous modelview transform matrix.\n\n**Parameters:**\n\nparam0 A pointer to the renderer you want to restore transformation to;\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rollDeg(degrees)\n\n<!--\n_syntax: rollDeg(degrees)_\n_name: rollDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRoll left+right relative to current orientation (around local z axis).\n\n**Parameters:**\n\nparam0 Desired relative rotation change along local z axis in degrees as float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rollRad(radians)\n\n<!--\n_syntax: rollRad(radians)_\n_name: rollRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRoll left+right relative to current orientation (around local z axis).\n\n**Parameters:**\n\nparam0 Desired relative rotation change along local z axis in radians as float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotate(&q)\n\n<!--\n_syntax: rotate(&q)_\n_name: rotate_\n_returns: void_\n_returns_description: _\n_parameters: const glm::quat &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate relative to current orientation by quaternion.\n\n**Parameters:**\n\nparam0 Desired relative rotation change as a ref to quaternion.\n\n\n\n\n\n_description: _\n\nRotate around arbitrary axis by angle.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateAround(&q, &point)\n\n<!--\n_syntax: rotateAround(&q, &point)_\n_name: rotateAround_\n_returns: void_\n_returns_description: _\n_parameters: const glm::quat &q, const glm::vec3 &point_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate relative to current orientation by quaternion around point.\n\n**Parameters:**\n\nparam0 Desired relative rotation change as a ref to quaternion.\n\nparam1 Point to rotate around in local xyz coordinates as ref to 3D vector.\n\n\n\n\n\n_description: _\n\nRotate around arbitrary axis by angle around point.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateAroundDeg(degrees, &axis, &point)\n\n<!--\n_syntax: rotateAroundDeg(degrees, &axis, &point)_\n_name: rotateAroundDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, const glm::vec3 &axis, const glm::vec3 &point_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate relative to current orientation around arbitrary axis around point.\n\n**Parameters:**\n\nparam0 Desired relative angle change in degrees as float.\n\nparam1 The arbitrary axis to rotate around as ref to cartesian 3D vector.\n\nparam2 Point to rotate around in local xyz coordinates as ref to 3D vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateAroundRad(radians, &axis, &point)\n\n<!--\n_syntax: rotateAroundRad(radians, &axis, &point)_\n_name: rotateAroundRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians, const glm::vec3 &axis, const glm::vec3 &point_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate relative to current orientation around arbitrary axis around point.\n\n**Parameters:**\n\nparam0 Desired relative angle change in degrees as float.\n\nparam1 The arbitrary axis to rotate around as ref to cartesian 3D vector.\n\nparam2 Point to rotate around in local xyz coordinates as ref to 3D vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateDeg(degrees, &v)\n\n<!--\n_syntax: rotateDeg(degrees, &v)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, const glm::vec3 &v_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate relative to current orientation around arbitrary axis.\n\n**Parameters:**\n\nparam0 Desired relative angle change in degrees as float.\n\nparam1 Desired axis to rotate around as a ref to cartesian 3D Vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateDeg(degrees, vx, vy, vz)\n\n<!--\n_syntax: rotateDeg(degrees, vx, vy, vz)_\n_name: rotateDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees, float vx, float vy, float vz_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate relative to current orientation around arbitrary axis.\n\n**Parameters:**\n\nparam0 Desired relative angle change in degrees as float.\n\nparam1 X angle of the axis to rotate around in degrees as float.\n\nparam2 Y angle of the axis to rotate around in degrees as float.\n\nparam3 Z angle of the axis to rotate around in degrees as float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateRad(radians, &v)\n\n<!--\n_syntax: rotateRad(radians, &v)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians, const glm::vec3 &v_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate relative to current orientation around arbitrary axis.\n\n**Parameters:**\n\nparam0 Desired relative angle change in radians as float.\n\nparam1 Desired axis to rotate around as a ref to cartesian 3D Vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void rotateRad(radians, vx, vy, vz)\n\n<!--\n_syntax: rotateRad(radians, vx, vy, vz)_\n_name: rotateRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians, float vx, float vy, float vz_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRotate relative to current orientation around arbitrary axis.\n\n**Parameters:**\n\nparam0 Desired relative angle change in radians as float.\n\nparam1 X angle of the axis to rotate around in degrees as float.\n\nparam2 Y angle of the axis to rotate around in degrees as float.\n\nparam3 Z angle of the axis to rotate around in degrees as float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setGlobalOrientation(&q)\n\n<!--\n_syntax: setGlobalOrientation(&q)_\n_name: setGlobalOrientation_\n_returns: void_\n_returns_description: _\n_parameters: const glm::quat &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet global orientation with a quaternion.\n\n**Parameters:**\n\nparam0 Desired global orientation as ref to an glm::quat.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setGlobalPosition(&p)\n\n<!--\n_syntax: setGlobalPosition(&p)_\n_name: setGlobalPosition_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the global position of the node using a 3D vector of coordinates.\n\n**Parameters:**\n\nparam0 Desired global xyz coordinates as ref to 3D vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setGlobalPosition(px, py, pz)\n\n<!--\n_syntax: setGlobalPosition(px, py, pz)_\n_name: setGlobalPosition_\n_returns: void_\n_returns_description: _\n_parameters: float px, float py, float pz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the global position of the node using xyz coordinates.\n\n**Parameters:**\n\nparam0 Desired global x coordinate as a float.\n\nparam1 Desired global y coordinate as a float.\n\nparam2 Desired global z coordinate as a float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setOrientation(&eulerAngles)\n\n<!--\n_syntax: setOrientation(&eulerAngles)_\n_name: setOrientation_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &eulerAngles_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet local orientation with xyz euler angles.\n\n**Parameters:**\n\nparam0 Desired local xyz angles in degrees, as ref to 3D vector.\n\\note Using euler angles can cause gimbal lock.\n\n**See also**: https://en.wikipedia.org/wiki/Gimbal_lock\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setOrientation(&q)\n\n<!--\n_syntax: setOrientation(&q)_\n_name: setOrientation_\n_returns: void_\n_returns_description: _\n_parameters: const glm::quat &q_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet local orientation with a quaternion.\n\n**Parameters:**\n\nparam0 Desired local orientation as ref to an glm::quat.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setParent(&parent, bMaintainGlobalTransform = false)\n\n<!--\n_syntax: setParent(&parent, bMaintainGlobalTransform = false)_\n_name: setParent_\n_returns: void_\n_returns_description: _\n_parameters: ofNode &parent, bool bMaintainGlobalTransform=false_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet parent for the node. The node will inherit transformations from parent.\n\n**Parameters:**\n\nparam0 Reference to the ofNode which becomes the parent node.\n\nparam1 Boolean if maintain child's global transformations (default = false).\n\n\n\n\n\n_description: _\n\nSet parent to link nodes transformations are inherited from parent node set to NULL if not needed (default).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPosition(&p)\n\n<!--\n_syntax: setPosition(&p)_\n_name: setPosition_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &p_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the local position of the node using a 3D vector of coordinates.\n\n**Parameters:**\n\nparam0 Desired local xyz coordinates as ref to 3D vector.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setPosition(px, py, pz)\n\n<!--\n_syntax: setPosition(px, py, pz)_\n_name: setPosition_\n_returns: void_\n_returns_description: _\n_parameters: float px, float py, float pz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the local position of the node using xyz coordinates.\n\n**Parameters:**\n\nparam0 Desired local x coordinate as a float.\n\nparam1 Desired local y coordinate as a float.\n\nparam2 Desired local z coordinate as a float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setScale(&s)\n\n<!--\n_syntax: setScale(&s)_\n_name: setScale_\n_returns: void_\n_returns_description: _\n_parameters: const glm::vec3 &s_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet local scale for xyz axes individually with a 3D vector.\n\n**Parameters:**\n\nparam0 Desired local scale for all axes as ref to 3D vector where 1 = 100%.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setScale(s)\n\n<!--\n_syntax: setScale(s)_\n_name: setScale_\n_returns: void_\n_returns_description: _\n_parameters: float s_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet local uniform scale (x, y, and z are equally scaled).\n\n**Parameters:**\n\nparam0 Desired scale for all axes as a float where 1 = 100%.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setScale(sx, sy, sz)\n\n<!--\n_syntax: setScale(sx, sy, sz)_\n_name: setScale_\n_returns: void_\n_returns_description: _\n_parameters: float sx, float sy, float sz_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet local scale for xyz axes individually.\n\n**Parameters:**\n\nparam0 Desired local scale for x axis as a float where 1 = 100%.\n\nparam1 Desired local scale for y axis as a float where 1 = 100%.\n\nparam2 Desired local scale for z axis as a float where 1 = 100%.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void tiltDeg(degrees)\n\n<!--\n_syntax: tiltDeg(degrees)_\n_name: tiltDeg_\n_returns: void_\n_returns_description: _\n_parameters: float degrees_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTilt up+down relative to current orientation (around local x axis).\n\n**Parameters:**\n\nparam0 Desired relative rotation change along local x axis in degrees as float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void tiltRad(radians)\n\n<!--\n_syntax: tiltRad(radians)_\n_name: tiltRad_\n_returns: void_\n_returns_description: _\n_parameters: float radians_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nTilt up+down relative to current orientation (around local x axis).\n\n**Parameters:**\n\nparam0 Desired relative rotation change along local x axis in radians as float.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void transformGL(*renderer)\n\n<!--\n_syntax: transformGL(*renderer)_\n_name: transformGL_\n_returns: void_\n_returns_description: _\n_parameters: ofBaseRenderer *renderer_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet opengl renderer's modelview matrix to this nodes transform.\n\n**Parameters:**\n\nparam0 A pointer to the renderer you want to set to this node's transform;\n\\note If you want to draw something at the position+orientation+scale of this node,\ncall ofNode::transform(); write your draw code, and ofNode::restoreTransform();\nOR A simpler way is to extend ofNode and override ofNode::customDraw();\n\n\n\n\n\n_description: _\n\nSet opengl's modelview matrix to this nodes transform.\nIf you want to draw something at the position+orientation+scale of this node...\n...call ofNode::transform(); write your draw code, and ofNode::restoreTransform();\nOR A simpler way is to extend ofNode and override ofNode::customDraw().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void truck(amount)\n\n<!--\n_syntax: truck(amount)_\n_name: truck_\n_returns: void_\n_returns_description: _\n_parameters: float amount_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nMove node left+right relative to current position (in local x axis).\n\n**Parameters:**\n\nparam0 Desired relative position change along local x axis as float.\n\n\n\n\n\n_description: _\n\nmove sideways (in local x axis)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void updateAxis()\n\n<!--\n_syntax: updateAxis()_\n_name: updateAxis_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofNode()\n\n<!--\n_syntax: ~ofNode()_\n_name: ~ofNode_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###ofVec3f axis\n\n<!--\n_name: axis_\n_type: ofVec3f_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int children\n\n<!--\n_name: children_\n_type: int_\n_access: private_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool legacyCustomDrawOverrided\n\n<!--\n_name: legacyCustomDrawOverrided_\n_type: bool_\n_access: private_\n_version_started: 0.9.0_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMatrix4x4 localTransformMatrix\n\n<!--\n_name: localTransformMatrix_\n_type: ofMatrix4x4_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofQuaternion orientation\n\n<!--\n_name: orientation_\n_type: ofQuaternion_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofNode parent\n\n<!--\n_name: parent_\n_type: ofNode_\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f position\n\n<!--\n_name: position_\n_type: ofVec3f_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f scale\n\n<!--\n_name: scale_\n_type: ofVec3f_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}