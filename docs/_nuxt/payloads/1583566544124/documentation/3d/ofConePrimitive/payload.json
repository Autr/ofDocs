{"data":[{"page":{"entry":{"name":"ofConePrimitive","filename":"ofConePrimitive.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/3d/ofConePrimitive.markdown","path":"/documentation/3d/ofConePrimitive","route":"/documentation/3d/ofConePrimitive.markdown","dir":"../ofSite/documentation/3d","ext":"markdown","type":"page","id":1732,"parent":1717,"breadcrumbs":[1717,1718],"siblings":[],"translations":{}},"description":{"short":null,"full":"<p>The ofConePrimitive allows you to create a 3D cone. Like all primitives it allows you to set the size, draw it, set positions, etc, as a simple example:</p>\n<pre><code>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tcone<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> coneRadius<span class=\"token punctuation\">,</span> coneHeight<span class=\"token punctuation\">,</span> coneRadiusSegments<span class=\"token punctuation\">,</span> coneHeightSegments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tcone<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcone<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcone<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get all the faces from the cpme, handy when you want to copy</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n\tvector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace</code></pre>\n"},"config":{"visible":"True","advanced":"False","istemplated":"False","extends":"of3dPrimitive"},"methods":[{"syntax":"getCapIndices()","name":"getCapIndices","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return a vector of the indices of vertices that make up the cap (as opposed to the cone indices).</p>\n","desc":"<p>This returns a vector of the indices of vertices that make up the cap (as opposed to the cone indices)</p>\n"},{"syntax":"getCapMesh()","name":"getCapMesh","returns":"ofMesh","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return an ofMesh made up of the cap (as opposed to the cone).</p>\n","desc":"<p>This returns an ofMesh made up of the cap (as opposed to the cone)</p>\n"},{"syntax":"getConeIndices()","name":"getConeIndices","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return a vector of the indices of vertices that make up the cone (as opposed to the cap indices).</p>\n","desc":"<p>This returns a vector of the indices of vertices that make up the cone (as opposed to the cap indices)</p>\n"},{"syntax":"getConeMesh()","name":"getConeMesh","returns":"ofMesh","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return This returns an ofMesh made up of the cone (as opposed to the cap).</p>\n","desc":"<p>This returns an ofMesh made up of the cone (as opposed to the cap)</p>\n"},{"syntax":"getHeight()","name":"getHeight","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return the height of the cone.</p>\n","desc":"<p>This returns the height of the cone.</p>\n"},{"syntax":"getRadius()","name":"getRadius","returns":"float","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return the radius of the cap.</p>\n","desc":"<p>This returns the radius of the cap</p>\n"},{"syntax":"getResolution()","name":"getResolution","returns":"glm::vec3","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return the resolution of the cone (rather than the cap).</p>\n","desc":"<p>This returns the resolution of the cone (rather than the cap)</p>\n"},{"syntax":"getResolutionCap()","name":"getResolutionCap","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\return the resolution of the cap (rather than the cone).</p>\n","desc":"<p>This returns the resolution of the cap (rather than the cone)</p>\n"},{"syntax":"getResolutionHeight()","name":"getResolutionHeight","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"getResolutionRadius()","name":"getResolutionRadius","returns":"int","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofConePrimitive()","name":"ofConePrimitive","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofConePrimitive(radius, height, radiusSegments, heightSegments, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)","name":"ofConePrimitive","returns":null,"returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(radius, height)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"set(radius, height, radiusSegments, heightSegments, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)","name":"set","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> radiusSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightSegments<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capSegments<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> ofPrimitiveMode mode<span class=\"token operator\">=</span>OF_PRIMITIVE_TRIANGLE_STRIP","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setCapColor(color)","name":"setCapColor","returns":"void","returns_description":null,"parameters":"ofColor color","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setHeight(height)","name":"setHeight","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> height","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setMode(mode)","name":"setMode","returns":"void","returns_description":null,"parameters":"ofPrimitiveMode mode","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setRadius(radius)","name":"setRadius","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> radius","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setResolution(radiusRes, heightRes, capRes)","name":"setResolution","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> radiusRes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> heightRes<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> capRes","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setResolutionCap(capRes)","name":"setResolutionCap","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> capRes","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setResolutionHeight(heightRes)","name":"setResolutionHeight","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> heightRes","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setResolutionRadius(radiusRes)","name":"setResolutionRadius","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">int</span> radiusRes","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setTopColor(color)","name":"setTopColor","returns":"void","returns_description":null,"parameters":"ofColor color","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"~ofConePrimitive()","name":"~ofConePrimitive","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"height","type":"float","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"radius","type":"float","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"resolution","type":"ofVec3f","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"strides","type":"int","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{"name":"vertices","type":"int","access":"protected","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"True","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofConePrimitive</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: False</em>\n<em>extends: of3dPrimitive</em>\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>The ofConePrimitive allows you to create a 3D cone.\nLike all primitives it allows you to set the size, draw it,\nset positions, etc, as a simple example:</p>\n<pre><code>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    cone<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> coneRadius<span class=\"token punctuation\">,</span> coneHeight<span class=\"token punctuation\">,</span> coneRadiusSegments<span class=\"token punctuation\">,</span> coneHeightSegments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    cone<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cone<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cone<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// get all the faces from the cpme, handy when you want to copy</span>\n    <span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n    vector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> triangles <span class=\"token operator\">=</span> cone<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUniqueFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// now draw</span>\n    cone<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To draw a texture over any primitive, simply bind the ofTexture instance\nand then draw your primitive:</p>\n<pre><code>\ntexture<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now draw</span>\ncone<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>Beware of the cone texture coordinates, they're a little strange.</p>\n<p>##Description</p>\n<p>The ofConePrimitive allows you to create a 3D cone. Like all primitives it allows you to set the size, draw it, set positions, etc, as a simple example:</p>\n<pre><code>\n<span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tcone<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span> coneRadius<span class=\"token punctuation\">,</span> coneHeight<span class=\"token punctuation\">,</span> coneRadiusSegments<span class=\"token punctuation\">,</span> coneHeightSegments <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n\tcone<span class=\"token punctuation\">.</span><span class=\"token function\">setPosition</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofGetWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ofGetHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token number\">75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcone<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinX<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tcone<span class=\"token punctuation\">.</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>spinY<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// get all the faces from the cpme, handy when you want to copy</span>\n\t<span class=\"token comment\" spellcheck=\"true\">// individual vertices or tweak them a little ;)</span>\n\tvector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>ofMeshFace<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> triangles <span class=\"token operator\">=</span> cone<span class=\"token punctuation\">.</span><span class=\"token function\">getMesh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUniqueFaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">// now draw</span>\n\tcone<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>To draw a texture over any primitive, simply bind the ofTexture instance and then draw your primitive:</p>\n<pre><code>\ntexture<span class=\"token punctuation\">.</span><span class=\"token function\">getTextureReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// now draw</span>\ncone<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n<p>Beware of the cone texture coordinates, they're a little strange.</p>\n<p>##Methods</p>\n<p>###int getCapIndices()</p>\n<p>&lt;!--\n<em>syntax: getCapIndices()</em>\n<em>name: getCapIndices</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return a vector of the indices of vertices that make up the cap (as opposed to the cone indices).</p>\n<p>_description: _</p>\n<p>This returns a vector of the indices of vertices that make up the cap (as opposed to the cone indices)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh getCapMesh()</p>\n<p>&lt;!--\n<em>syntax: getCapMesh()</em>\n<em>name: getCapMesh</em>\n<em>returns: ofMesh</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return an ofMesh made up of the cap (as opposed to the cone).</p>\n<p>_description: _</p>\n<p>This returns an ofMesh made up of the cap (as opposed to the cone)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getConeIndices()</p>\n<p>&lt;!--\n<em>syntax: getConeIndices()</em>\n<em>name: getConeIndices</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return a vector of the indices of vertices that make up the cone (as opposed to the cap indices).</p>\n<p>_description: _</p>\n<p>This returns a vector of the indices of vertices that make up the cone (as opposed to the cap indices)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh getConeMesh()</p>\n<p>&lt;!--\n<em>syntax: getConeMesh()</em>\n<em>name: getConeMesh</em>\n<em>returns: ofMesh</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return This returns an ofMesh made up of the cone (as opposed to the cap).</p>\n<p>_description: _</p>\n<p>This returns an ofMesh made up of the cone (as opposed to the cap)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getHeight()</p>\n<p>&lt;!--\n<em>syntax: getHeight()</em>\n<em>name: getHeight</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return the height of the cone.</p>\n<p>_description: _</p>\n<p>This returns the height of the cone.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float getRadius()</p>\n<p>&lt;!--\n<em>syntax: getRadius()</em>\n<em>name: getRadius</em>\n<em>returns: float</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return the radius of the cap.</p>\n<p>_description: _</p>\n<p>This returns the radius of the cap</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###glm::vec3 getResolution()</p>\n<p>&lt;!--\n<em>syntax: getResolution()</em>\n<em>name: getResolution</em>\n<em>returns: glm::vec3</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return the resolution of the cone (rather than the cap).</p>\n<p>_description: _</p>\n<p>This returns the resolution of the cone (rather than the cap)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getResolutionCap()</p>\n<p>&lt;!--\n<em>syntax: getResolutionCap()</em>\n<em>name: getResolutionCap</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\return the resolution of the cap (rather than the cone).</p>\n<p>_description: _</p>\n<p>This returns the resolution of the cap (rather than the cone)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getResolutionHeight()</p>\n<p>&lt;!--\n<em>syntax: getResolutionHeight()</em>\n<em>name: getResolutionHeight</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int getResolutionRadius()</p>\n<p>&lt;!--\n<em>syntax: getResolutionRadius()</em>\n<em>name: getResolutionRadius</em>\n<em>returns: int</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofConePrimitive()</h3>\n<p>&lt;!--\n<em>syntax: ofConePrimitive()</em>\n<em>name: ofConePrimitive</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofConePrimitive(radius, height, radiusSegments, heightSegments, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</h3>\n<p>&lt;!--\n<em>syntax: ofConePrimitive(radius, height, radiusSegments, heightSegments, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</em>\n<em>name: ofConePrimitive</em>\n_returns: _\n_returns_description: _\n<em>parameters: float radius, float height, int radiusSegments, int heightSegments, int capSegments=2, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(radius, height)</p>\n<p>&lt;!--\n<em>syntax: set(radius, height)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius, float height</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void set(radius, height, radiusSegments, heightSegments, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</p>\n<p>&lt;!--\n<em>syntax: set(radius, height, radiusSegments, heightSegments, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</em>\n<em>name: set</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius, float height, int radiusSegments, int heightSegments, int capSegments=2, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setCapColor(color)</p>\n<p>&lt;!--\n<em>syntax: setCapColor(color)</em>\n<em>name: setCapColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofColor color</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setHeight(height)</p>\n<p>&lt;!--\n<em>syntax: setHeight(height)</em>\n<em>name: setHeight</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float height</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setMode(mode)</p>\n<p>&lt;!--\n<em>syntax: setMode(mode)</em>\n<em>name: setMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofPrimitiveMode mode</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setRadius(radius)</p>\n<p>&lt;!--\n<em>syntax: setRadius(radius)</em>\n<em>name: setRadius</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float radius</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setResolution(radiusRes, heightRes, capRes)</p>\n<p>&lt;!--\n<em>syntax: setResolution(radiusRes, heightRes, capRes)</em>\n<em>name: setResolution</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int radiusRes, int heightRes, int capRes</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setResolutionCap(capRes)</p>\n<p>&lt;!--\n<em>syntax: setResolutionCap(capRes)</em>\n<em>name: setResolutionCap</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int capRes</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setResolutionHeight(heightRes)</p>\n<p>&lt;!--\n<em>syntax: setResolutionHeight(heightRes)</em>\n<em>name: setResolutionHeight</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int heightRes</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setResolutionRadius(radiusRes)</p>\n<p>&lt;!--\n<em>syntax: setResolutionRadius(radiusRes)</em>\n<em>name: setResolutionRadius</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: int radiusRes</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setTopColor(color)</p>\n<p>&lt;!--\n<em>syntax: setTopColor(color)</em>\n<em>name: setTopColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofColor color</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofConePrimitive()</h3>\n<p>&lt;!--\n<em>syntax: ~ofConePrimitive()</em>\n<em>name: ~ofConePrimitive</em>\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###float height</p>\n<p>&lt;!--\n<em>name: height</em>\n<em>type: float</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###float radius</p>\n<p>&lt;!--\n<em>name: radius</em>\n<em>type: float</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofVec3f resolution</p>\n<p>&lt;!--\n<em>name: resolution</em>\n<em>type: ofVec3f</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int strides</p>\n<p>&lt;!--\n<em>name: strides</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int vertices</p>\n<p>&lt;!--\n<em>name: vertices</em>\n<em>type: int</em>\n<em>access: protected</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofConePrimitive\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: False_\n_extends: of3dPrimitive_\n-->\n\n##InlineDescription\n\nThe ofConePrimitive allows you to create a 3D cone.\nLike all primitives it allows you to set the size, draw it,\nset positions, etc, as a simple example:\n\n~~~~{.cpp}\n\nvoid setup()\n{\n\n    cone.set( coneRadius, coneHeight, coneRadiusSegments, coneHeightSegments );\n}\n\nvoid draw()\n{\n\n    cone.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);\n    cone.rotate(spinX, 1.0, 0.0, 0.0);\n    cone.rotate(spinY, 0, 1.0, 0.0);\n\n    // get all the faces from the cpme, handy when you want to copy\n    // individual vertices or tweak them a little ;)\n    vector<ofMeshFace> triangles = cone.getMesh().getUniqueFaces();\n\n    // now draw\n    cone.draw();\n}\n~~~~\n\nTo draw a texture over any primitive, simply bind the ofTexture instance\nand then draw your primitive:\n\n~~~~{.cpp}\n\ntexture.getTextureReference().bind();\n// now draw\ncone.draw();\n\n~~~~\n\nBeware of the cone texture coordinates, they're a little strange.\n\n\n\n\n\n\n##Description\n\nThe ofConePrimitive allows you to create a 3D cone. Like all primitives it allows you to set the size, draw it, set positions, etc, as a simple example:\n\n~~~~{.cpp}\n\nvoid setup()\n{\n\n\tcone.set( coneRadius, coneHeight, coneRadiusSegments, coneHeightSegments );\n}\n\nvoid draw()\n{\n\n\tcone.setPosition(ofGetWidth()*.2, ofGetHeight()*.75, 0);\n\tcone.rotate(spinX, 1.0, 0.0, 0.0);\n\tcone.rotate(spinY, 0, 1.0, 0.0);\n\n\t// get all the faces from the cpme, handy when you want to copy\n\t// individual vertices or tweak them a little ;)\n\tvector<ofMeshFace> triangles = cone.getMesh().getUniqueFaces();\n\n\t// now draw\n\tcone.draw();\n}\n~~~~\n\nTo draw a texture over any primitive, simply bind the ofTexture instance and then draw your primitive:\n\n~~~~{.cpp}\n\ntexture.getTextureReference().bind();\n// now draw\ncone.draw();\n\n~~~~\n\nBeware of the cone texture coordinates, they're a little strange.\n\n\n\n\n\n##Methods\n\n\n\n###int getCapIndices()\n\n<!--\n_syntax: getCapIndices()_\n_name: getCapIndices_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return a vector of the indices of vertices that make up the cap (as opposed to the cone indices).\n\n\n\n\n\n_description: _\n\nThis returns a vector of the indices of vertices that make up the cap (as opposed to the cone indices)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh getCapMesh()\n\n<!--\n_syntax: getCapMesh()_\n_name: getCapMesh_\n_returns: ofMesh_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return an ofMesh made up of the cap (as opposed to the cone).\n\n\n\n\n\n_description: _\n\nThis returns an ofMesh made up of the cap (as opposed to the cone)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getConeIndices()\n\n<!--\n_syntax: getConeIndices()_\n_name: getConeIndices_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return a vector of the indices of vertices that make up the cone (as opposed to the cap indices).\n\n\n\n\n\n_description: _\n\nThis returns a vector of the indices of vertices that make up the cone (as opposed to the cap indices)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh getConeMesh()\n\n<!--\n_syntax: getConeMesh()_\n_name: getConeMesh_\n_returns: ofMesh_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return This returns an ofMesh made up of the cone (as opposed to the cap).\n\n\n\n\n\n_description: _\n\nThis returns an ofMesh made up of the cone (as opposed to the cap)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getHeight()\n\n<!--\n_syntax: getHeight()_\n_name: getHeight_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return the height of the cone.\n\n\n\n\n\n_description: _\n\nThis returns the height of the cone.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float getRadius()\n\n<!--\n_syntax: getRadius()_\n_name: getRadius_\n_returns: float_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return the radius of the cap.\n\n\n\n\n\n_description: _\n\nThis returns the radius of the cap\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###glm::vec3 getResolution()\n\n<!--\n_syntax: getResolution()_\n_name: getResolution_\n_returns: glm::vec3_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return the resolution of the cone (rather than the cap).\n\n\n\n\n\n_description: _\n\nThis returns the resolution of the cone (rather than the cap)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getResolutionCap()\n\n<!--\n_syntax: getResolutionCap()_\n_name: getResolutionCap_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\return the resolution of the cap (rather than the cone).\n\n\n\n\n\n_description: _\n\nThis returns the resolution of the cap (rather than the cone)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getResolutionHeight()\n\n<!--\n_syntax: getResolutionHeight()_\n_name: getResolutionHeight_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int getResolutionRadius()\n\n<!--\n_syntax: getResolutionRadius()_\n_name: getResolutionRadius_\n_returns: int_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofConePrimitive()\n\n<!--\n_syntax: ofConePrimitive()_\n_name: ofConePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofConePrimitive(radius, height, radiusSegments, heightSegments, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: ofConePrimitive(radius, height, radiusSegments, heightSegments, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: ofConePrimitive_\n_returns: _\n_returns_description: _\n_parameters: float radius, float height, int radiusSegments, int heightSegments, int capSegments=2, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(radius, height)\n\n<!--\n_syntax: set(radius, height)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float radius, float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void set(radius, height, radiusSegments, heightSegments, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: set(radius, height, radiusSegments, heightSegments, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: set_\n_returns: void_\n_returns_description: _\n_parameters: float radius, float height, int radiusSegments, int heightSegments, int capSegments=2, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setCapColor(color)\n\n<!--\n_syntax: setCapColor(color)_\n_name: setCapColor_\n_returns: void_\n_returns_description: _\n_parameters: ofColor color_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setHeight(height)\n\n<!--\n_syntax: setHeight(height)_\n_name: setHeight_\n_returns: void_\n_returns_description: _\n_parameters: float height_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setMode(mode)\n\n<!--\n_syntax: setMode(mode)_\n_name: setMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPrimitiveMode mode_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setRadius(radius)\n\n<!--\n_syntax: setRadius(radius)_\n_name: setRadius_\n_returns: void_\n_returns_description: _\n_parameters: float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setResolution(radiusRes, heightRes, capRes)\n\n<!--\n_syntax: setResolution(radiusRes, heightRes, capRes)_\n_name: setResolution_\n_returns: void_\n_returns_description: _\n_parameters: int radiusRes, int heightRes, int capRes_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setResolutionCap(capRes)\n\n<!--\n_syntax: setResolutionCap(capRes)_\n_name: setResolutionCap_\n_returns: void_\n_returns_description: _\n_parameters: int capRes_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setResolutionHeight(heightRes)\n\n<!--\n_syntax: setResolutionHeight(heightRes)_\n_name: setResolutionHeight_\n_returns: void_\n_returns_description: _\n_parameters: int heightRes_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setResolutionRadius(radiusRes)\n\n<!--\n_syntax: setResolutionRadius(radiusRes)_\n_name: setResolutionRadius_\n_returns: void_\n_returns_description: _\n_parameters: int radiusRes_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setTopColor(color)\n\n<!--\n_syntax: setTopColor(color)_\n_name: setTopColor_\n_returns: void_\n_returns_description: _\n_parameters: ofColor color_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofConePrimitive()\n\n<!--\n_syntax: ~ofConePrimitive()_\n_name: ~ofConePrimitive_\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###float height\n\n<!--\n_name: height_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###float radius\n\n<!--\n_name: radius_\n_type: float_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofVec3f resolution\n\n<!--\n_name: resolution_\n_type: ofVec3f_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int strides\n\n<!--\n_name: strides_\n_type: int_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int vertices\n\n<!--\n_name: vertices_\n_type: int_\n_access: protected_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}