{"data":[{"page":{"entry":{"name":"ofMesh_","filename":"ofMesh_.markdown","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/documentation/3d/ofMesh_.markdown","path":"/documentation/3d/ofMesh_","route":"/documentation/3d/ofMesh_.markdown","dir":"../ofSite/documentation/3d","ext":"markdown","type":"page","id":1736,"parent":1717,"breadcrumbs":[1717,1718],"siblings":[],"translations":{}},"description":{"short":"<p>Represents a set of vertices in 3D spaces with normals, colors,\nand texture coordinates at those points.</p>\n<p>Each of these different properties is stored in a vector.\nVertices are passed to your graphics card and your graphics card fill in\nthe spaces in between them in a processing usually called the rendering\npipeline. The rendering pipeline goes more or less like this:</p>\n<ol>\n<li>Say how you're going to connect all the points.</li>\n<li>Make some points.</li>\n<li>Say that you're done making points.</li>\n</ol>\n<p>You may be thinking: I'll just make eight vertices and voila: a cube.\nNot so quick. There's a hitch and that hitch is that the OpenGL renderer\nhas different ways of connecting the vertices that you pass to it and none\nare as efficient as to only need eight vertices to create a cube.</p>\n<p>You've probably seen a version of the following image somewhere before.\n<img src=\"3d/primitives_new-640x269.gif\" alt=\"PRIMATIVES\">\nGenerally you have to create your points to fit the drawing mode that\nyou've selected because of whats called winding.\nA vertex gets connected to another vertex in the order that the mode does\nits winding and this means that you might need multiple vertices in a given\nlocation to create the shape you want. The cube, for example, requires\neighteen vertices, not the eight that you would expect.\nIf you note the order of vertices in the GL chart above you'll see that all\nof them use their vertices slightly differently (in particular you should\nmake note of the GL_TRIANGLE_STRIP example). Drawing a shape requires that\nyou keep track of which drawing mode is being used and which order\nyour vertices are declared in.</p>\n<p>If you're thinking: it would be nice if there were an abstraction layer\nfor this you're thinking right. Enter the mesh, which is really just\nan abstraction of the vertex and drawing mode that we started with\nbut which has the added bonus of managing the draw order for you.\nThat may seem insignificant at first, but it provides some real benefits\nwhen working with complex geometry.</p>\n<p>A very typical usage is something like the following:</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>width<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make a new vertex</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofFloatColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// add a color at that vertex</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Now it's important to make sure that each vertex is correctly connected\nwith the other vertices around it. This is done using indices, which you\ncan set up like so:</p>\n<pre><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>height<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>width<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 0</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 1</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 10</span>\n\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 1</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">// 11</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 10</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n","full":"<p>An ofMesh represents a set of vertices in 3D spaces, and normals at those points, colors at those points, and texture coordinates at those points. Each of these different properties is stored in a vector.\nVertices are passed to your graphics card and your graphics card fill in the spaces in between them in a processing usually called the rendering pipeline. The rendering pipeline goes more or less like this:</p>\n<ol>\n<li>\n<p>Say how you're going to connect all the points.</p>\n</li>\n<li>\n<p>Make some points.</p>\n</li>\n<li>\n<p>Say that you're done making points.</p>\n</li>\n</ol>\n<p>You may be thinking: I'll just make eight vertices and voila: a cube. Not so quick. There's a hitch and that hitch is that the OpenGL renderer has different ways of connecting the vertices that you pass to it and none are as efficient as to only need eight vertices to create a cube.</p>\n<p>You've probably seen a version of the following image somewhere before.\n<img src=\"gl_primitives_640x269.png\" alt=\"PRIMATIVES\"></p>\n<p>Generally you have to create your points to fit the drawing mode that you've selected because of whats called winding. A vertex gets connected to another vertex in the order that the mode does its winding and this means that you might need multiple vertices in a given location to create the shape you want. The cube, for example, requires eighteen vertices, not the eight that you would expect. If you note the order of vertices in the GL chart above you'll see that all of them use their vertices slightly differently (in particular you should make note of the GL_TRIANGLE_STRIP example). Drawing a shape requires that you keep track of which drawing mode is being used and which order your vertices are declared in.</p>\n<p>If you're thinking: it would be nice if there were an abstraction layer for this you're thinking right. Enter the mesh, which is really just an abstraction of the vertex and drawing mode that we started with but which has the added bonus of managing the draw order for you. That may seem insignificant at first, but it provides some real benefits when working with complex geometry.</p>\n<p>A very typical usage is something like the following:</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>width<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make a new vertex</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofFloatColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// add a color at that vertex</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// now it's important to make sure that each vertex is correctly connected with the</span>\n<span class=\"token comment\" spellcheck=\"true\">// other vertices around it. This is done using indices, which you can set up like so:</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>height<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>width<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 0</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 1</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 10</span>\n\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 1</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">// 11</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 10</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h1></h1>\n"},"config":{"visible":"True","advanced":"False","istemplated":"True","extends":null},"methods":[{"syntax":"addColor(&c)","name":"addColor","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> C <span class=\"token operator\">&amp;</span>c","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This adds a color to the mesh,\nthe color will be associated with the vertex in the same position.</p>\n","desc":"<p>This adds a color to the mesh, the color will be associated with the vertex in the same position.</p>\n"},{"short":"<p>This adds colors using a reference to a vector of ofColors.\nFor each color in the vector, this will put the colors at the corresponding vertex.</p>\n","desc":"<p>This adds colors using a reference to a vector of ofColors. For each color in the vector, this will put the colors at the corresponding vertex.</p>\n"},{"syntax":"addColors(*cols, amt)","name":"addColors","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> C <span class=\"token operator\">*</span>cols<span class=\"token punctuation\">,</span> size_t amt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This adds a pointer of colors to the ofMesh instance with the amount passed as the second parameter.</p>\n","desc":"<p>This adds a pointer of colors to the ofMesh instance with the amount passed as the second parameter.</p>\n"},{"syntax":"addIndex(i)","name":"addIndex","returns":"void","returns_description":null,"parameters":"ofIndexType i","access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Will give you this shape:\n<img src=\"../index.jpg\" alt=\"image of basic use of indices\"></p>\n","desc":"<p>Add an index to the index vector. Each index represents the order of connection for  vertices. This determines the way that the vertices are connected according to the polygon type set in the primitiveMode. It important to note that a particular vertex might be used for several faces and so would be referenced several times in the index vector.</p>\n<pre><code>    ofMesh mesh<span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>OF_PRIMITIVE_TRIANGLES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//connect the first vertex we made, v0</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//to v1</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//to v2 to complete the face</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//now start a new face beginning with v1</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//that is connected to v2</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//and we complete the face with v3</span>\n</code></pre>\n<p>Will give you this shape:\n<img src=\"index.jpg\" alt=\"image of basic use of indices\"></p>\n"},{"short":"<p>This adds a vector of indices.</p>\n","desc":"<p>This adds a vector of indices.</p>\n"},{"syntax":"addIndices(*inds, amt)","name":"addIndices","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> ofIndexType <span class=\"token operator\">*</span>inds<span class=\"token punctuation\">,</span> size_t amt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This adds indices to the ofMesh by pointing to an array of indices.\nThe &quot;amt&quot; defines the length of the array.</p>\n","desc":"<p>This adds indices to the ofMesh by pointing to an array of indices. The &quot;amt&quot; defines the length of the array.</p>\n"},{"syntax":"addNormal(&n)","name":"addNormal","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> N <span class=\"token operator\">&amp;</span>n","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Add a normal to the mesh as a 3D vector,\ntypically perpendicular to the plane of the face. A normal is a vector\nthat defines how a surface responds to lighting, i.e. how it is lit.\nThe amount of light reflected by a surface is proportional to the angle\nbetween the light's direction and the normal. The smaller the angle the\nbrighter the surface will look. See the normalsExample for advice on\ncomputing the normals.\naddNormal adds the 3D vector to the end of the list, so you need to\nmake sure you add normals at the same index of the matching vertex.</p>\n","desc":"<p>Add a normal to the mesh as a 3D vector, typically perpendicular to the plane of the face. A normal is a vector that defines how a surface responds to lighting, i.e. how it is lit. The amount of light reflected by a surface is proportional to the angle between the light's direction and the normal. The smaller the angle the brighter the surface will look. See the normalsExample for advice on computing the normals.\naddNormal adds the 3D vector to the end of the list, so you need to make sure you add normals at the same index of the matching face.</p>\n"},{"short":"<p>Add a vector of normals to a mesh,\nallowing you to push out many normals at once rather than\nadding one at a time. The vector of normals is added after the end of\nthe current normals list.</p>\n","desc":"<p>Add a vector of normals to a mesh, allowing you to push out many normals at once rather than adding one at a time. The vector of normals is added after the end of the current normals list.</p>\n"},{"syntax":"addNormals(*norms, amt)","name":"addNormals","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> N <span class=\"token operator\">*</span>norms<span class=\"token punctuation\">,</span> size_t amt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Add an array of normals to the mesh.\nBecause you are using a pointer to the array you also have to define\nthe length of the array as an std::size_t (amt). The normals are added at the\nend of the current normals list.</p>\n","desc":"<p>Add an array of normals to the mesh. Because you are using a pointer to the array you also have to define the length of the array as an int (amt). The normals are added at the end of the current normals list.</p>\n"},{"syntax":"addTexCoord(&t)","name":"addTexCoord","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>t","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Add a Vec2f representing the texture coordinate.\nBecause OF uses ARB textures these are in pixels rather than\n0-1 normalized coordinates.</p>\n","desc":"<p>Add a Vec2f representing the texture coordinate. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.</p>\n"},{"short":"<p>Add a vector of texture coordinates to a mesh,\nallowing you to push out many at once rather than adding one at a time.\nThe vector of texture coordinates is added after the end of the current\ntexture coordinates list.</p>\n","desc":"<p>Add a vector of texture coordinates to a mesh, allowing you to push out many at once rather than adding one at a time. The vector of texture coordinates is added after the end of the current texture coordinates list.</p>\n"},{"syntax":"addTexCoords(*tCoords, amt)","name":"addTexCoords","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> T <span class=\"token operator\">*</span>tCoords<span class=\"token punctuation\">,</span> size_t amt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Add an array of texture coordinates to the mesh.\nBecause you are using a pointer to the array you also have to define\nthe length of the array as an std::size_t (amt).\nThe texture coordinates are added at the end of the current texture\ncoordinates list.</p>\n","desc":"<p>Add an array of texture coordinates to the mesh. Because you are using a pointer to the array you also have to define the length of the array as an int (amt). The texture coordinates are added at the end of the current texture coordinates list.</p>\n"},{"syntax":"addTriangle(index1, index2, index3)","name":"addTriangle","returns":"void","returns_description":null,"parameters":"ofIndexType index1<span class=\"token punctuation\">,</span> ofIndexType index2<span class=\"token punctuation\">,</span> ofIndexType index3","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Adding a triangle means using three of the vertices that have already been added to create a triangle.\nThis is an easy way to create triangles in the mesh. The indices refer to the index of the vertex in the vector of vertices.</p>\n","desc":"<p>Adding a triangle means using three of the vertices that have already been added to create a triangle. This is an easy way to create triangles in the mesh. The indices refer to the index of the vertex in the vector of vertices.</p>\n"},{"syntax":"addVertex(&v)","name":"addVertex","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> V <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Add a new vertex at the end of the current list of vertices.\nIt is important to remember that the order the vertices are added to\nthe list determines how they link they form the polygons and strips\n(assuming you do not change their indeces). See the ofMesh class\ndescription for details.</p>\n","desc":"<p>Add a new vertex at the end of the current list of vertices. It is important to remember that the order the vertices are added to the list determines how they link they form the polygons and strips (assuming you do not change their indeces). See the ofMesh class description for details.</p>\n"},{"short":"<p>Add a vector of vertices to a mesh, allowing you to push out\nmany at once rather than adding one at a time. The vector of vertices\nis added after the end of the current vertices list.</p>\n","desc":"<p>Add a vector of vertices to a mesh, allowing you to push out many at once rather than adding one at a time. The vector of vertices is added after the end of the current vertices list.</p>\n"},{"syntax":"addVertices(*verts, amt)","name":"addVertices","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> V <span class=\"token operator\">*</span>verts<span class=\"token punctuation\">,</span> size_t amt","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Add an array of vertices to the mesh.\nBecause you are using a pointer to the array you also have to define\nthe length of the array as an int (amt). The vertices are added at the\nend of the current vertices list.</p>\n","desc":"<p>Add an array of vertices to the mesh. Because you are using a pointer to the array you also have to define the length of the array as an int (amt). The vertices are added at the end of the current vertices list.</p>\n"},{"short":"<p>Add the vertices, normals, texture coordinates and indices of one mesh onto another mesh.\nEverything from the referenced mesh is simply added at the end\nof the current mesh's lists.</p>\n","desc":"<p>Add the vertices, normals, texture coordinates and indices of one mesh onto another mesh. Everything from the referenced mesh is simply added at the end of the current mesh's lists.</p>\n"},{"short":"<p><strong>Returns</strong>: an ofMesh representing an XYZ coordinate system.</p>\n","desc":""},{"short":"<p>A helper method that returns a box made of triangles.\nThe resolution settings for the width and height are optional\n(they are both set at a default of 2 triangles per side).</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\nmesh <span class=\"token operator\">=</span> ofMesh<span class=\"token operator\">::</span><span class=\"token function\">box</span><span class=\"token punctuation\">(</span><span class=\"token number\">200.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"3d/box.jpg\" alt=\"image of a simple box\"></p>\n","desc":"<p>A helper method that returns a box made of triangles. The resolution settings for the width and height are optional (they are both set at a default of 2 triangles per side).</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\nmesh <span class=\"token operator\">=</span> ofMesh<span class=\"token operator\">::</span><span class=\"token function\">box</span><span class=\"token punctuation\">(</span><span class=\"token number\">200.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"box.jpg\" alt=\"image of a simple box\"></p>\n"},{"syntax":"clear()","name":"clear","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Removes all the vertices, colors, and indices from the mesh.</p>\n","desc":"<p>This removes all the vertices, colors, and indices from the mesh.</p>\n"},{"syntax":"clearColors()","name":"clearColors","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Clear all the colors.</p>\n","desc":"<p>Clear all the colors.</p>\n"},{"syntax":"clearIndices()","name":"clearIndices","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Remove all the indices of the mesh.\nThis means that your mesh will be a point cloud.</p>\n","desc":"<p>Remove all the indices of the mesh. This means that your mesh will be a point cloud.</p>\n"},{"syntax":"clearNormals()","name":"clearNormals","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Remove all the normals.</p>\n","desc":"<p>Remove all the normals.</p>\n"},{"syntax":"clearTexCoords()","name":"clearTexCoords","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Clear all the texture coordinates.</p>\n","desc":"<p>Clear all the texture coordinates.</p>\n"},{"syntax":"clearVertices()","name":"clearVertices","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Removes all the vertices.</p>\n","desc":"<p>Removes all the vertices.</p>\n"},{"short":"<p>A helper method that returns a cone made of triangles.\nThe resolution settings for the radius, height, and cap are optional\n(they are set at a default of 12 segments around the radius, 6 segments\nin the height, and 2 on the cap). The only valid modes are the default\nOF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\nmesh <span class=\"token operator\">=</span> ofMesh<span class=\"token operator\">::</span><span class=\"token function\">cone</span><span class=\"token punctuation\">(</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"3d/cone.jpg\" alt=\"image of a simple cone\"></p>\n","desc":"<p>A helper method that returns a cone made of triangles. The resolution settings for the radius, height, and cap are optional (they are set at a default of 12 segments around the radius, 6 segments in the height, and 2 on the cap). The only valid modes are the default OF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\nmesh <span class=\"token operator\">=</span> ofMesh<span class=\"token operator\">::</span><span class=\"token function\">cone</span><span class=\"token punctuation\">(</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"cone.jpg\" alt=\"image of a simple cone\"></p>\n"},{"short":"<pre><code>A helper method that returns a cylinder made of triangles<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>The resolution settings for the radius, height, and cap are optional\n(they are set at a default of 12 segments around the radius, 6 segments\nin the height, and 2 on the cap). You have the option to cap the\ncylinder or not. The only valid modes are the default\nOF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.\n~~~~{.cpp}\nofMesh mesh;\nmesh = ofMesh::cylinder(100.0, 200.0);\n~~~~</p>\n<pre><code><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>image of a simple cylinder<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>3d<span class=\"token operator\">/</span>cylinder<span class=\"token punctuation\">.</span>jpg<span class=\"token punctuation\">)</span>\n</code></pre>\n","desc":"<p>A helper method that returns a cylinder made of triangles. The resolution settings for the radius, height, and cap are optional (they are set at a default of 12 segments around the radius, 6 segments in the height, and 2 on the cap). You have the option to cap the cylinder or not. The only valid modes are the default OF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\nmesh <span class=\"token operator\">=</span> ofMesh<span class=\"token operator\">::</span><span class=\"token function\">cylinder</span><span class=\"token punctuation\">(</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"cylinder.jpg\" alt=\"image of a simple cylinder\"></p>\n"},{"syntax":"disableColors()","name":"disableColors","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Disable mesh colors.\nUse enableColors() to turn colors back on.</p>\n","desc":"<p>Disable mesh colors. Use enableColors() to turn colors back on.</p>\n"},{"syntax":"disableIndices()","name":"disableIndices","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Disable mesh indices.\nUse enableIndices() to turn indices back on.</p>\n","desc":"<p>Disable mesh indices. Use enableIndices() to turn indices back on.</p>\n"},{"syntax":"disableNormals()","name":"disableNormals","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Disable mesh normals.\nUse enableNormals() to turn normals back on.</p>\n","desc":"<p>Disable mesh normals. Use enableNormals() to turn normals back on.</p>\n"},{"syntax":"disableTextures()","name":"disableTextures","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Disable mesh textures.\nUse enableTextures() to turn textures back on.</p>\n","desc":"<p>Disable mesh textures. Use enableTextures() to turn textures back on.</p>\n"},{"syntax":"draw()","name":"draw","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This draws the mesh using its primitive type, meaning that if\nyou set them up to be triangles, this will draw the triangles.</p>\n","desc":"<p>This draws the mesh using its primitive type, meaning that if you set them up to be triangles, this will draw the triangles.</p>\n"},{"syntax":"draw(renderType)","name":"draw","returns":"void","returns_description":null,"parameters":"ofPolyRenderMode renderType","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This draws the mesh using a defined renderType,\noverriding the renderType defined with setMode().</p>\n","desc":"<p>This draws the mesh using a defined renderType, overriding the renderType defined with setMode().</p>\n"},{"syntax":"drawFaces()","name":"drawFaces","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This draws the mesh as faces, meaning that you'll have a collection of faces.</p>\n","desc":"<p>This draws the mesh as faces, meaning that you'll have a collection of faces.</p>\n"},{"syntax":"drawVertices()","name":"drawVertices","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This allows you draw just the vertices, meaning that you'll have a point cloud.</p>\n","desc":"<p>This allows you draw just the vertices, meaning that you'll have a point cloud.</p>\n"},{"syntax":"drawWireframe()","name":"drawWireframe","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This draws the mesh as GL_LINES, meaning that you'll have a wireframe.</p>\n","desc":"<p>This draws the mesh as GL_LINES, meaning that you'll have a wireframe.</p>\n"},{"syntax":"enableColors()","name":"enableColors","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Enable mesh colors.\nUse disableColors() to turn colors off.\nColors are enabled by default when they are added to the mesh.</p>\n","desc":"<p>Enable mesh colors. Use disableColors() to turn colors off. Colors are enabled by default when they are added to the mesh.</p>\n"},{"syntax":"enableIndices()","name":"enableIndices","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Enable mesh indices.\nUse disableIndices() to turn indices off.\nIndices are enabled by default when they are added to the mesh.</p>\n","desc":"<p>Enable mesh indices. Use disableIndices() to turn indices off. Indices are enabled by default when they are added to the mesh.</p>\n"},{"syntax":"enableNormals()","name":"enableNormals","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Enable mesh normals.\nUse disableNormals() to turn normals off.\nNormals are enabled by default when they are added to the mesh.</p>\n","desc":"<p>Enable mesh normals. Use disableNormals() to turn normals off. Normals are enabled by default when they are added to the mesh.</p>\n"},{"syntax":"enableTextures()","name":"enableTextures","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Enable mesh textures.\nUse disableTextures() to turn textures off.\nTextures are enabled by default when they are added to the mesh.</p>\n","desc":"<p>Enable mesh textures. Use disableTextures() to turn textures off. Textures are enabled by default when they are added to the mesh.</p>\n"},{"syntax":"flatNormals()","name":"flatNormals","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Duplicates vertices and updates normals to get a low-poly look.</p>\n","desc":""},{"syntax":"getCentroid()","name":"getCentroid","returns":"V","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: a ofVec3f defining the centroid of all the vetices in the mesh.</p>\n","desc":"<p>Returns a ofVec3f defining the centroid of all the vetices in the mesh.</p>\n"},{"syntax":"getColor(i)","name":"getColor","returns":"C","returns_description":null,"parameters":"ofIndexType i","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get the color at the index in the colors vector.</p>\n<p><strong>Returns</strong>: the color at the index in the colors vector.</p>\n","desc":"<p>Returns the color at the index in the colors vector.</p>\n"},{"short":"<p>Use this if you plan to change the colors as part of this call as it will force a reset of the cache.</p>\n<p><strong>Returns</strong>: the vector that contains all of the colors of the mesh, if it has any.</p>\n","desc":"<p>Returns the vector that contains all of the colors of the mesh, if it has any. (read only)</p>\n"},{"short":"<p><strong>Returns</strong>: the vector that contains all of the colors of the mesh, if it has any. (read only)</p>\n","desc":"<p>Returns the vector that contains all of the colors of the mesh, if it has any. Use this if you plan to change the colors as part of this call as it will force a reset of the cache.</p>\n"},{"syntax":"getColorsPointer()","name":"getColorsPointer","returns":"C *","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Use this if you plan to change the colors as part of this call as it will force a reset of the cache.</p>\n<p><strong>Returns</strong>: a pointer that contains all of the colors of the mesh, if it has any.</p>\n","desc":"<p>Returns a pointer that contains all of the colors of the mesh, if it has any. Use this if you plan to change the colors as part of this call as it will force a reset of the cache.</p>\n"},{"syntax":"getColorsPointer()","name":"getColorsPointer","returns":"const C *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: a pointer that contains all of the colors of the mesh, if it has any. (read only)</p>\n","desc":"<p>Returns a pointer that contains all of the colors of the mesh, if it has any. (read only)</p>\n"},{"short":"<p><strong>Returns</strong>: the vector that contains all of the faces of the mesh. This isn't currently implemented.</p>\n","desc":"<p>Returns the vector that contains all of the faces of the mesh. This isn't currently implemented.</p>\n"},{"short":"<p>Get normals for each face\nAs a default it only calculates the normal for the face as a whole but\nby setting (perVertex = true) it will return the same normal value for\neach of the three vertices making up a face.</p>\n<p><strong>Returns</strong>: a vector containing the calculated normals of each face in the mesh.</p>\n","desc":"<p>Returns a vector containing the calculated normals of each face in the mesh. As a default it only calculates the normal for the face as a whole but by setting (perVertex = true) it will return the same normal value for each of the three vertices making up a face.</p>\n"},{"syntax":"getIndex(i)","name":"getIndex","returns":"ofIndexType","returns_description":null,"parameters":"ofIndexType i","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: the index from the index vector. Each index represents the index of the vertex in the vertices vector. This determines the way that the vertices are connected into the polgoynon type set in the primitiveMode.</p>\n","desc":"<p>Returns the index from the index vector. Each index represents the index of the vertex in the vertices vector. This determines the way that the vertices are connected into the polgoynon type set in the primitiveMode.</p>\n"},{"syntax":"getIndexPointer()","name":"getIndexPointer","returns":"ofIndexType *","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: a pointer to the indices that the mesh contains.</p>\n","desc":"<p>Returns a pointer to the indices that the mesh contains.</p>\n"},{"syntax":"getIndexPointer()","name":"getIndexPointer","returns":"const ofIndexType *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: a pointer to the indices that the mesh contains.</p>\n","desc":"<p>Returns a pointer to the indices that the mesh contains.</p>\n"},{"short":"<p>Use this if you plan to change the indices as part of this call as it\nwill force a reset of the cache.</p>\n<p><strong>Returns</strong>: the vector that contains all of the indices of the mesh, if it has any.</p>\n","desc":"<p>Returns the vector that contains all of the indices of the mesh, if it has any. (read only)</p>\n"},{"short":"<p><strong>Returns</strong>: the vector that contains all of the indices of the mesh, if it has any. (read only)</p>\n","desc":"<p>Returns the vector that contains all of the indices of the mesh, if it has any. Use this if you plan to change the indices as part of this call as it will force a reset of the cache.</p>\n"},{"short":"<p>The new mesh includes the mesh mode, colors, textures, and normals of the original mesh (assuming any were added).</p>\n<p><strong>Returns</strong>: a mesh made up of a range of indices from startIndex to the endIndex.</p>\n","desc":"<p>Returns a mesh made up of a range of indices from startIndex to the endIndex. The new mesh includes the mesh mode, colors, textures, and normals of the original mesh (assuming any were added).</p>\n"},{"short":"","desc":""},{"syntax":"getMode()","name":"getMode","returns":"ofPrimitiveMode","returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><br>\n<strong>Returns</strong>: the primitive mode that the mesh is using.</p>\n","desc":"<p>Returns the primitive mode that the mesh is using.</p>\n"},{"syntax":"getNormal(i)","name":"getNormal","returns":"N","returns_description":null,"parameters":"ofIndexType i","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><br>\n<strong>Returns</strong>: the normal at the index in the normals vector.</p>\n","desc":"<p>Returns the normal at the index in the normals vector.</p>\n"},{"short":"<p>Use this if you plan to change the normals as part of this call as it\nwill force a reset of the cache.</p>\n<p><strong>Returns</strong>: the vector that contains all of the normals of the mesh,\nif it has any.</p>\n","desc":"<p>Returns the vector that contains all of the normals of the mesh, if it has any. (read only)</p>\n"},{"short":"<p><strong>Returns</strong>: the vector that contains all of the normals of the mesh, if\nit has any. (read only)</p>\n","desc":"<p>Returns the vector that contains all of the normals of the mesh, if it has any. Use this if you plan to change the normals as part of this call as it will force a reset of the cache.</p>\n"},{"syntax":"getNormalsPointer()","name":"getNormalsPointer","returns":"N *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: a pointer to the normals that the mesh contains.</p>\n","desc":"<p>Returns a pointer to the normals that the mesh contains.</p>\n"},{"syntax":"getNormalsPointer()","name":"getNormalsPointer","returns":"const N *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: a pointer to the normals that the mesh contains.</p>\n","desc":"<p>Returns a pointer to the normals that the mesh contains.</p>\n"},{"syntax":"getNumColors()","name":"getNumColors","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: the size of the colors vector for the mesh.\nThis will tell you how many colors are contained in the mesh.</p>\n","desc":"<p>Returns the size of the colors vector for the mesh. This will tell you how many colors are contained in the mesh.</p>\n"},{"syntax":"getNumIndices()","name":"getNumIndices","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This will tell you how many indices are contained in the mesh.</p>\n<p><strong>Returns</strong>: the size of the indices vector for the mesh.</p>\n","desc":"<p>Returns the size of the indices vector for the mesh. This will tell you how many indices are contained in the mesh.</p>\n"},{"syntax":"getNumNormals()","name":"getNumNormals","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This will tell you how many normals are contained in the mesh.</p>\n<p><strong>Returns</strong>: the size of the normals vector for the mesh.</p>\n","desc":"<p>Returns the size of the normals vector for the mesh. This will tell you how many normals are contained in the mesh.</p>\n"},{"syntax":"getNumTexCoords()","name":"getNumTexCoords","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This will tell you how many texture coordinates are contained in the mesh.</p>\n<p><strong>Returns</strong>: the size of the texture coordinates vector for the mesh.</p>\n","desc":"<p>Returns the size of the texture coordinates vector for the mesh. This will tell you how many texture coordinates are contained in the mesh.</p>\n"},{"syntax":"getNumVertices()","name":"getNumVertices","returns":"size_t","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: the size of the vertices vector for the mesh.\nThis will tell you how many vertices are contained in the mesh.</p>\n","desc":"<p>Returns the size of the vertices vector for the mesh. This will tell you how many vertices are contained in the mesh.</p>\n"},{"syntax":"getTexCoord(i)","name":"getTexCoord","returns":"T","returns_description":null,"parameters":"ofIndexType i","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: the Vec2f representing the texture coordinate.\nBecause OF uses ARB textures these are in pixels rather than\n0-1 normalized coordinates.</p>\n","desc":"<p>Returns the Vec2f representing the texture coordinate. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.</p>\n"},{"short":"<p>Get a vector representing the texture coordinates of the mesh\nBecause OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.\nUse this if you plan to change the texture coordinates as part of this\ncall as it will force a reset of the cache.</p>\n<p><strong>Returns</strong>: a vector of Vec2f representing the texture coordinates for the whole mesh.</p>\n","desc":"<p>Returns a vector of Vec2f representing the texture coordinates for the whole mesh. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates. (read only)</p>\n"},{"short":"<p>Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.</p>\n<p><strong>Returns</strong>: a vector of Vec2f representing the texture coordinates for the whole mesh. (read only)</p>\n","desc":"<p>Returns a vector of Vec2f representing the texture coordinates for the whole mesh. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates. Use this if you plan to change the texture coordinates as part of this call as it will force a reset of the cache.</p>\n"},{"syntax":"getTexCoordsPointer()","name":"getTexCoordsPointer","returns":"T *","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: a pointer to the texture coords that the mesh contains.</p>\n","desc":"<p>Returns a pointer to the texture coords that the mesh contains.</p>\n"},{"syntax":"getTexCoordsPointer()","name":"getTexCoordsPointer","returns":"const T *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Get a pointer to the ofVec2f texture coordinates that the mesh contains.</p>\n","desc":"<p>Get a pointer to the ofVec2f texture coordinates that the mesh contains.</p>\n"},{"short":"<p><strong>Returns</strong>: the mesh as a vector of unique ofMeshFace_s\na list of triangles that do not share vertices or indices</p>\n","desc":"<p>Returns the mesh as a vector of unique ofMeshFaces.</p>\n"},{"syntax":"getVertex(i)","name":"getVertex","returns":"V","returns_description":null,"parameters":"ofIndexType i","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: the vertex at the index.</p>\n","desc":"<p>Returns the vertex at the index.</p>\n"},{"short":"<p><strong>Returns</strong>: the vector that contains all of the vertices of the mesh.</p>\n","desc":"<p>Returns the vector that contains all of the vertices of the mesh.</p>\n"},{"short":"<p><strong>Returns</strong>: the vector that contains all of the vertices of the mesh.</p>\n","desc":"<p>Returns the vector that contains all of the vertices of the mesh.</p>\n"},{"syntax":"getVerticesPointer()","name":"getVerticesPointer","returns":"V *","returns_description":null,"parameters":null,"access":"public","version_started":"0.8.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: a pointer to the vertices that the mesh contains.</p>\n","desc":"<p>Returns a pointer to the vertices that the mesh contains.</p>\n"},{"syntax":"getVerticesPointer()","name":"getVerticesPointer","returns":"const V *","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: a pointer to the vertices that the mesh contains.</p>\n","desc":"<p>Returns a pointer to the vertices that the mesh contains.</p>\n"},{"syntax":"hasColors()","name":"hasColors","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>/returns Whether the mesh has any colors.</p>\n","desc":"<p>Whether the mesh has any colors.</p>\n"},{"syntax":"hasIndices()","name":"hasIndices","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>/returns Whether the mesh has any indices assigned to it.</p>\n","desc":"<p>Whether the mesh has any indices assigned to it.</p>\n"},{"syntax":"hasNormals()","name":"hasNormals","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>/returnsWhether the mesh has any normals.</p>\n","desc":"<p>Whether the mesh has any normals.</p>\n"},{"syntax":"hasTexCoords()","name":"hasTexCoords","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>/returns Whether the mesh has any textures assigned to it.</p>\n","desc":"<p>Whether the mesh has any textures assigned to it.</p>\n"},{"syntax":"hasVertices()","name":"hasVertices","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: Whether the mesh has any vertices.</p>\n","desc":"<p>Whether the mesh has any vertices.</p>\n"},{"syntax":"haveColorsChanged()","name":"haveColorsChanged","returns":"bool","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: If the colors of the mesh have changed, been added or removed.</p>\n","desc":"<p>If the colors of the mesh have changed, been added or removed.</p>\n"},{"syntax":"haveIndicesChanged()","name":"haveIndicesChanged","returns":"bool","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: If the indices of the mesh have changed, been added or removed.</p>\n","desc":"<p>If the indices of the mesh have changed, been added or removed.</p>\n"},{"syntax":"haveNormalsChanged()","name":"haveNormalsChanged","returns":"bool","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: If the normals of the mesh have changed, been added or removed.</p>\n","desc":"<p>If the normals of the mesh have changed, been added or removed.</p>\n"},{"syntax":"haveTexCoordsChanged()","name":"haveTexCoordsChanged","returns":"bool","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: If the texture coords of the mesh have changed, been added or removed.</p>\n","desc":"<p>If the texture coords of the mesh have changed, been added or removed.</p>\n"},{"syntax":"haveVertsChanged()","name":"haveVertsChanged","returns":"bool","returns_description":null,"parameters":null,"access":"protected","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p><strong>Returns</strong>: If the vertices of the mesh have changed, been added or removed.</p>\n","desc":"<p>If the vertices of the mesh have changed, been added or removed.</p>\n"},{"short":"","desc":""},{"short":"","desc":""},{"syntax":"load(&path)","name":"load","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Loads a mesh from a file located at the provided path into the mesh.\nThis will replace any existing data within the mesh.</p>\n<p>It expects that the file will be in the <a href=\"http://en.wikipedia.org/wiki/PLY_(file_format)\">PLY Format</a>.\nIt will only load meshes saved in the PLY ASCII format; the binary format is not supported.</p>\n","desc":"<p>Loads a mesh from a file located at the provided path into the mesh.\nThis will replace any existing data within the mesh.</p>\n<p>It expects that the file will be in the <a href=\"http://en.wikipedia.org/wiki/PLY_(file_format)\">PLY Format</a>.\nIt will only load meshes saved in the PLY ASCII format; the binary format is not supported.</p>\n"},{"syntax":"mergeDuplicateVertices()","name":"mergeDuplicateVertices","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"ofMesh_()","name":"ofMesh_","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This creates the mesh,\nusing OF_PRIMITIVE_TRIANGLES without any initial vertices.</p>\n","desc":"<p>This creates the mesh, using OF_PRIMITIVE_TRIANGLES and without any initial vertices.</p>\n"},{"short":"<p>This allows to you to use one of the other ofPrimitiveModes:\nOF_PRIMITIVE_TRIANGLES, OF_PRIMITIVE_TRIANGLE_STRIP,\nOF_PRIMITIVE_TRIANGLE_FAN, OF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP,\nOF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS.\nSee <a href=\"../gl/ofGLUtils\">ofGLUtils</a> for more information on these types.</p>\n","desc":"<p>This allows to you to use one of the other ofPrimitiveModes: OF_PRIMITIVE_TRIANGLES, OF_PRIMITIVE_TRIANGLE_STRIP, OF_PRIMITIVE_TRIANGLE_FAN, OF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP, OF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS. See <a href=\"../gl/ofGLUtils\">ofGLUtils</a> for more information on these types.</p>\n"},{"short":"<p>}\n\\name Primitive constructor helper methods\n{</p>\n","desc":""},{"syntax":"removeColor(index)","name":"removeColor","returns":"void","returns_description":null,"parameters":"ofIndexType index","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Remove a color at the index in the colors vector.</p>\n","desc":"<p>Remove a color at the index in the colors vector.</p>\n"},{"syntax":"removeIndex(index)","name":"removeIndex","returns":"void","returns_description":null,"parameters":"ofIndexType index","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Removes an index.</p>\n","desc":"<p>Removes an index.</p>\n"},{"syntax":"removeNormal(index)","name":"removeNormal","returns":"void","returns_description":null,"parameters":"ofIndexType index","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Remove a normal.</p>\n","desc":"<p>Remove a normal.</p>\n"},{"syntax":"removeTexCoord(index)","name":"removeTexCoord","returns":"void","returns_description":null,"parameters":"ofIndexType index","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Remove a Vec2f representing the texture coordinate.</p>\n","desc":"<p>Remove a Vec2f representing the texture coordinate.</p>\n"},{"syntax":"removeVertex(index)","name":"removeVertex","returns":"void","returns_description":null,"parameters":"ofIndexType index","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Removes the vertex at the index in the vector.</p>\n","desc":"<p>Removes the vertex at the index in the vector.</p>\n"},{"syntax":"save(&path, useBinary = false)","name":"save","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">const</span> filesystem<span class=\"token operator\">::</span>path <span class=\"token operator\">&amp;</span>path<span class=\"token punctuation\">,</span> <span class=\"token keyword\">bool</span> useBinary<span class=\"token operator\">=</span><span class=\"token boolean\">false</span>","access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Saves the mesh at the passed path in the <a href=\"http://en.wikipedia.org/wiki/PLY_(file_format)\">PLY Format</a>.</p>\n<p>There are two format options for PLY: a binary format and an ASCII format.\nBy default, it will save using the ASCII format.\nPassing <code><span class=\"token boolean\">true</span></code> into the <code>useBinary</code> parameter will save it in the binary format.</p>\n<p>If you're planning on reloading the mesh into ofMesh, ofMesh currently only supports loading the ASCII format.</p>\n<p>For more information, see the <a href=\"http://paulbourke.net/dataformats/ply/\">PLY format specification</a>.</p>\n","desc":"<p>Saves the mesh at the passed path in the <a href=\"http://en.wikipedia.org/wiki/PLY_(file_format)\">PLY Format</a>.</p>\n<p>There are two format options for PLY: a binary format and an ASCII format.\nBy default, it will save using the ASCII format.\nPassing <code><span class=\"token boolean\">true</span></code> into the <code>useBinary</code> parameter will save it in the binary format.</p>\n<p>If you're planning on reloading the mesh into ofMesh, ofMesh currently only supports loading the ASCII format.</p>\n<p>For more information, see the <a href=\"http://paulbourke.net/dataformats/ply/\">PLY format specification</a>.</p>\n"},{"syntax":"setColor(index, &c)","name":"setColor","returns":"void","returns_description":null,"parameters":"ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> C <span class=\"token operator\">&amp;</span>c","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Set the color at the index in the colors vector.</p>\n","desc":"<p>Set the color at the index in the colors vector.</p>\n"},{"syntax":"setColorForIndices(startIndex, endIndex, color)","name":"setColorForIndices","returns":"void","returns_description":null,"parameters":"ofIndexType startIndex<span class=\"token punctuation\">,</span> ofIndexType endIndex<span class=\"token punctuation\">,</span> C color","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"syntax":"setIndex(index, val)","name":"setIndex","returns":"void","returns_description":null,"parameters":"ofIndexType index<span class=\"token punctuation\">,</span> ofIndexType val","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>This sets the index at i.</p>\n","desc":"<p>This sets the index at i.</p>\n"},{"syntax":"setMode(mode)","name":"setMode","returns":"void","returns_description":null,"parameters":"ofPrimitiveMode mode","access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Allows you to set the ofPrimitiveMode.\nThe available modes are OF_PRIMITIVE_TRIANGLES,\nOF_PRIMITIVE_TRIANGLE_STRIP, OF_PRIMITIVE_TRIANGLE_FAN,\nOF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP,\nOF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS</p>\n","desc":"<p>Allows you to set the ofPrimitiveMode. The available modes are OF_PRIMITIVE_TRIANGLES, OF_PRIMITIVE_TRIANGLE_STRIP, OF_PRIMITIVE_TRIANGLE_FAN, OF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP, OF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS</p>\n"},{"syntax":"setNormal(index, &n)","name":"setNormal","returns":"void","returns_description":null,"parameters":"ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> N <span class=\"token operator\">&amp;</span>n","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>\\todo Documentation.</p>\n","desc":""},{"syntax":"setTexCoord(index, &t)","name":"setTexCoord","returns":"void","returns_description":null,"parameters":"ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>t","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setVertex(index, &v)","name":"setVertex","returns":"void","returns_description":null,"parameters":"ofIndexType index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> V <span class=\"token operator\">&amp;</span>v","access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"setupIndicesAuto()","name":"setupIndicesAuto","returns":"void","returns_description":null,"parameters":null,"access":"public","version_started":"007","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"<p>Allow you to set up the indices automatically when you add a vertex.</p>\n","desc":"<p>Allow you to set up the indices automatically when you add a vertex.</p>\n"},{"syntax":"smoothNormals(angle)","name":"smoothNormals","returns":"void","returns_description":null,"parameters":"<span class=\"token keyword\">float</span> angle","access":"public","version_started":"0073","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"short":"","desc":""},{"syntax":"usingColors()","name":"usingColors","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"usingIndices()","name":"usingIndices","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0072","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"usingNormals()","name":"usingNormals","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"usingTextures()","name":"usingTextures","returns":"bool","returns_description":null,"parameters":null,"access":"public","version_started":"0071","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"syntax":"~ofMesh_()","name":"~ofMesh_","returns":null,"returns_description":null,"parameters":null,"access":"public","version_started":"0.10.0","version_deprecated":null,"summary":null,"constant":"False","static":"False","visible":"True","advanced":"False","short":"","desc":""},{"name":"bColorsChanged","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bFacesDirty","type":"bool","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bIndicesChanged","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bNormalsChanged","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bTexCoordsChanged","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"bVertsChanged","type":"bool","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"colors","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"faces","type":"int","access":"private","version_started":"0073","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"indices","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"mode","type":"ofPrimitiveMode","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"normals","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"texCoords","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"useColors","type":"bool","access":"private","version_started":"0071","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"useIndices","type":"bool","access":"private","version_started":"0072","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"useNormals","type":"bool","access":"private","version_started":"0071","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"useTextures","type":"bool","access":"private","version_started":"0071","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{"name":"vertices","type":"int","access":"private","version_started":"007","version_deprecated":null,"summary":null,"visible":"True","constant":"False","advanced":"False","short":"","desc":""},{}],"document":"<p>#class ofMesh_</p>\n<p>&lt;!--\n<em>visible: True</em>\n<em>advanced: False</em>\n<em>istemplated: True</em>\n_extends: _\n--&gt;</p>\n<p>##InlineDescription</p>\n<p>Represents a set of vertices in 3D spaces with normals, colors,\nand texture coordinates at those points.</p>\n<p>Each of these different properties is stored in a vector.\nVertices are passed to your graphics card and your graphics card fill in\nthe spaces in between them in a processing usually called the rendering\npipeline. The rendering pipeline goes more or less like this:</p>\n<ol>\n<li>Say how you're going to connect all the points.</li>\n<li>Make some points.</li>\n<li>Say that you're done making points.</li>\n</ol>\n<p>You may be thinking: I'll just make eight vertices and voila: a cube.\nNot so quick. There's a hitch and that hitch is that the OpenGL renderer\nhas different ways of connecting the vertices that you pass to it and none\nare as efficient as to only need eight vertices to create a cube.</p>\n<p>You've probably seen a version of the following image somewhere before.\n<img src=\"3d/primitives_new-640x269.gif\" alt=\"PRIMATIVES\">\nGenerally you have to create your points to fit the drawing mode that\nyou've selected because of whats called winding.\nA vertex gets connected to another vertex in the order that the mode does\nits winding and this means that you might need multiple vertices in a given\nlocation to create the shape you want. The cube, for example, requires\neighteen vertices, not the eight that you would expect.\nIf you note the order of vertices in the GL chart above you'll see that all\nof them use their vertices slightly differently (in particular you should\nmake note of the GL_TRIANGLE_STRIP example). Drawing a shape requires that\nyou keep track of which drawing mode is being used and which order\nyour vertices are declared in.</p>\n<p>If you're thinking: it would be nice if there were an abstraction layer\nfor this you're thinking right. Enter the mesh, which is really just\nan abstraction of the vertex and drawing mode that we started with\nbut which has the added bonus of managing the draw order for you.\nThat may seem insignificant at first, but it provides some real benefits\nwhen working with complex geometry.</p>\n<p>A very typical usage is something like the following:</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>width<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span>glm<span class=\"token operator\">::</span><span class=\"token function\">vec3</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make a new vertex</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofFloatColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// add a color at that vertex</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Now it's important to make sure that each vertex is correctly connected\nwith the other vertices around it. This is done using indices, which you\ncan set up like so:</p>\n<pre><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>height<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>width<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 0</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 1</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 10</span>\n\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 1</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">// 11</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 10</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>##Description</p>\n<p>An ofMesh represents a set of vertices in 3D spaces, and normals at those points, colors at those points, and texture coordinates at those points. Each of these different properties is stored in a vector.\nVertices are passed to your graphics card and your graphics card fill in the spaces in between them in a processing usually called the rendering pipeline. The rendering pipeline goes more or less like this:</p>\n<ol>\n<li>\n<p>Say how you're going to connect all the points.</p>\n</li>\n<li>\n<p>Make some points.</p>\n</li>\n<li>\n<p>Say that you're done making points.</p>\n</li>\n</ol>\n<p>You may be thinking: I'll just make eight vertices and voila: a cube. Not so quick. There's a hitch and that hitch is that the OpenGL renderer has different ways of connecting the vertices that you pass to it and none are as efficient as to only need eight vertices to create a cube.</p>\n<p>You've probably seen a version of the following image somewhere before.\n<img src=\"gl_primitives_640x269.png\" alt=\"PRIMATIVES\"></p>\n<p>Generally you have to create your points to fit the drawing mode that you've selected because of whats called winding. A vertex gets connected to another vertex in the order that the mode does its winding and this means that you might need multiple vertices in a given location to create the shape you want. The cube, for example, requires eighteen vertices, not the eight that you would expect. If you note the order of vertices in the GL chart above you'll see that all of them use their vertices slightly differently (in particular you should make note of the GL_TRIANGLE_STRIP example). Drawing a shape requires that you keep track of which drawing mode is being used and which order your vertices are declared in.</p>\n<p>If you're thinking: it would be nice if there were an abstraction layer for this you're thinking right. Enter the mesh, which is really just an abstraction of the vertex and drawing mode that we started with but which has the added bonus of managing the draw order for you. That may seem insignificant at first, but it provides some real benefits when working with complex geometry.</p>\n<p>A very typical usage is something like the following:</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span> height<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>width<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// make a new vertex</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofFloatColor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// add a color at that vertex</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// now it's important to make sure that each vertex is correctly connected with the</span>\n<span class=\"token comment\" spellcheck=\"true\">// other vertices around it. This is done using indices, which you can set up like so:</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>height<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>width<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 0</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 1</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 10</span>\n\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>y<span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 1</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\" spellcheck=\"true\">// 11</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\" spellcheck=\"true\">// 10</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>##Methods</p>\n<p>###void addColor(&amp;c)</p>\n<p>&lt;!--\n<em>syntax: addColor(&amp;c)</em>\n<em>name: addColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const C &amp;c</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This adds a color to the mesh,\nthe color will be associated with the vertex in the same position.</p>\n<p>_description: _</p>\n<p>This adds a color to the mesh, the color will be associated with the vertex in the same position.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addColors(&amp;cols)</p>\n<p>&lt;!--\n<em>syntax: addColors(&amp;cols)</em>\n<em>name: addColors</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; C &gt; &amp;cols</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This adds colors using a reference to a vector of ofColors.\nFor each color in the vector, this will put the colors at the corresponding vertex.</p>\n<p>_description: _</p>\n<p>This adds colors using a reference to a vector of ofColors. For each color in the vector, this will put the colors at the corresponding vertex.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addColors(*cols, amt)</p>\n<p>&lt;!--\n<em>syntax: addColors(*cols, amt)</em>\n<em>name: addColors</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const C *cols, size_t amt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This adds a pointer of colors to the ofMesh instance with the amount passed as the second parameter.</p>\n<p>_description: _</p>\n<p>This adds a pointer of colors to the ofMesh instance with the amount passed as the second parameter.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addIndex(i)</p>\n<p>&lt;!--\n<em>syntax: addIndex(i)</em>\n<em>name: addIndex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType i</em>\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Will give you this shape:\n<img src=\"../index.jpg\" alt=\"image of basic use of indices\"></p>\n<p>_description: _</p>\n<p>Add an index to the index vector. Each index represents the order of connection for  vertices. This determines the way that the vertices are connected according to the polygon type set in the primitiveMode. It important to note that a particular vertex might be used for several faces and so would be referenced several times in the index vector.</p>\n<pre><code>    ofMesh mesh<span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">setMode</span><span class=\"token punctuation\">(</span>OF_PRIMITIVE_TRIANGLES<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addVertex</span><span class=\"token punctuation\">(</span><span class=\"token function\">ofPoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//connect the first vertex we made, v0</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//to v1</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//to v2 to complete the face</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//now start a new face beginning with v1</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//that is connected to v2</span>\n    mesh<span class=\"token punctuation\">.</span><span class=\"token function\">addIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//and we complete the face with v3</span>\n</code></pre>\n<p>Will give you this shape:\n<img src=\"index.jpg\" alt=\"image of basic use of indices\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addIndices(&amp;inds)</p>\n<p>&lt;!--\n<em>syntax: addIndices(&amp;inds)</em>\n<em>name: addIndices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; ofIndexType &gt; &amp;inds</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This adds a vector of indices.</p>\n<p>_description: _</p>\n<p>This adds a vector of indices.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addIndices(*inds, amt)</p>\n<p>&lt;!--\n<em>syntax: addIndices(*inds, amt)</em>\n<em>name: addIndices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const ofIndexType *inds, size_t amt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This adds indices to the ofMesh by pointing to an array of indices.\nThe &quot;amt&quot; defines the length of the array.</p>\n<p>_description: _</p>\n<p>This adds indices to the ofMesh by pointing to an array of indices. The &quot;amt&quot; defines the length of the array.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addNormal(&amp;n)</p>\n<p>&lt;!--\n<em>syntax: addNormal(&amp;n)</em>\n<em>name: addNormal</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const N &amp;n</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Add a normal to the mesh as a 3D vector,\ntypically perpendicular to the plane of the face. A normal is a vector\nthat defines how a surface responds to lighting, i.e. how it is lit.\nThe amount of light reflected by a surface is proportional to the angle\nbetween the light's direction and the normal. The smaller the angle the\nbrighter the surface will look. See the normalsExample for advice on\ncomputing the normals.\naddNormal adds the 3D vector to the end of the list, so you need to\nmake sure you add normals at the same index of the matching vertex.</p>\n<p>_description: _</p>\n<p>Add a normal to the mesh as a 3D vector, typically perpendicular to the plane of the face. A normal is a vector that defines how a surface responds to lighting, i.e. how it is lit. The amount of light reflected by a surface is proportional to the angle between the light's direction and the normal. The smaller the angle the brighter the surface will look. See the normalsExample for advice on computing the normals.\naddNormal adds the 3D vector to the end of the list, so you need to make sure you add normals at the same index of the matching face.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addNormals(&amp;norms)</p>\n<p>&lt;!--\n<em>syntax: addNormals(&amp;norms)</em>\n<em>name: addNormals</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; N &gt; &amp;norms</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Add a vector of normals to a mesh,\nallowing you to push out many normals at once rather than\nadding one at a time. The vector of normals is added after the end of\nthe current normals list.</p>\n<p>_description: _</p>\n<p>Add a vector of normals to a mesh, allowing you to push out many normals at once rather than adding one at a time. The vector of normals is added after the end of the current normals list.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addNormals(*norms, amt)</p>\n<p>&lt;!--\n<em>syntax: addNormals(*norms, amt)</em>\n<em>name: addNormals</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const N *norms, size_t amt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Add an array of normals to the mesh.\nBecause you are using a pointer to the array you also have to define\nthe length of the array as an std::size_t (amt). The normals are added at the\nend of the current normals list.</p>\n<p>_description: _</p>\n<p>Add an array of normals to the mesh. Because you are using a pointer to the array you also have to define the length of the array as an int (amt). The normals are added at the end of the current normals list.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addTexCoord(&amp;t)</p>\n<p>&lt;!--\n<em>syntax: addTexCoord(&amp;t)</em>\n<em>name: addTexCoord</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const T &amp;t</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Add a Vec2f representing the texture coordinate.\nBecause OF uses ARB textures these are in pixels rather than\n0-1 normalized coordinates.</p>\n<p>_description: _</p>\n<p>Add a Vec2f representing the texture coordinate. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addTexCoords(&amp;tCoords)</p>\n<p>&lt;!--\n<em>syntax: addTexCoords(&amp;tCoords)</em>\n<em>name: addTexCoords</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; T &gt; &amp;tCoords</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Add a vector of texture coordinates to a mesh,\nallowing you to push out many at once rather than adding one at a time.\nThe vector of texture coordinates is added after the end of the current\ntexture coordinates list.</p>\n<p>_description: _</p>\n<p>Add a vector of texture coordinates to a mesh, allowing you to push out many at once rather than adding one at a time. The vector of texture coordinates is added after the end of the current texture coordinates list.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addTexCoords(*tCoords, amt)</p>\n<p>&lt;!--\n<em>syntax: addTexCoords(*tCoords, amt)</em>\n<em>name: addTexCoords</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const T *tCoords, size_t amt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Add an array of texture coordinates to the mesh.\nBecause you are using a pointer to the array you also have to define\nthe length of the array as an std::size_t (amt).\nThe texture coordinates are added at the end of the current texture\ncoordinates list.</p>\n<p>_description: _</p>\n<p>Add an array of texture coordinates to the mesh. Because you are using a pointer to the array you also have to define the length of the array as an int (amt). The texture coordinates are added at the end of the current texture coordinates list.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addTriangle(index1, index2, index3)</p>\n<p>&lt;!--\n<em>syntax: addTriangle(index1, index2, index3)</em>\n<em>name: addTriangle</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index1, ofIndexType index2, ofIndexType index3</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Adding a triangle means using three of the vertices that have already been added to create a triangle.\nThis is an easy way to create triangles in the mesh. The indices refer to the index of the vertex in the vector of vertices.</p>\n<p>_description: _</p>\n<p>Adding a triangle means using three of the vertices that have already been added to create a triangle. This is an easy way to create triangles in the mesh. The indices refer to the index of the vertex in the vector of vertices.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addVertex(&amp;v)</p>\n<p>&lt;!--\n<em>syntax: addVertex(&amp;v)</em>\n<em>name: addVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const V &amp;v</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Add a new vertex at the end of the current list of vertices.\nIt is important to remember that the order the vertices are added to\nthe list determines how they link they form the polygons and strips\n(assuming you do not change their indeces). See the ofMesh class\ndescription for details.</p>\n<p>_description: _</p>\n<p>Add a new vertex at the end of the current list of vertices. It is important to remember that the order the vertices are added to the list determines how they link they form the polygons and strips (assuming you do not change their indeces). See the ofMesh class description for details.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addVertices(&amp;verts)</p>\n<p>&lt;!--\n<em>syntax: addVertices(&amp;verts)</em>\n<em>name: addVertices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const vector&lt; V &gt; &amp;verts</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Add a vector of vertices to a mesh, allowing you to push out\nmany at once rather than adding one at a time. The vector of vertices\nis added after the end of the current vertices list.</p>\n<p>_description: _</p>\n<p>Add a vector of vertices to a mesh, allowing you to push out many at once rather than adding one at a time. The vector of vertices is added after the end of the current vertices list.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void addVertices(*verts, amt)</p>\n<p>&lt;!--\n<em>syntax: addVertices(*verts, amt)</em>\n<em>name: addVertices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const V *verts, size_t amt</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Add an array of vertices to the mesh.\nBecause you are using a pointer to the array you also have to define\nthe length of the array as an int (amt). The vertices are added at the\nend of the current vertices list.</p>\n<p>_description: _</p>\n<p>Add an array of vertices to the mesh. Because you are using a pointer to the array you also have to define the length of the array as an int (amt). The vertices are added at the end of the current vertices list.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void append(V, N, C, &amp;mesh)</p>\n<p>&lt;!--\n<em>syntax: append(V, N, C, &amp;mesh)</em>\n<em>name: append</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: const ofMesh</em>&lt; V, N, C, T &gt; &amp;mesh</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Add the vertices, normals, texture coordinates and indices of one mesh onto another mesh.\nEverything from the referenced mesh is simply added at the end\nof the current mesh's lists.</p>\n<p>_description: _</p>\n<p>Add the vertices, normals, texture coordinates and indices of one mesh onto another mesh. Everything from the referenced mesh is simply added at the end of the current mesh's lists.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh_&lt; V, N, C, T &gt; axis(size)</p>\n<p>&lt;!--\n<em>syntax: axis(size)</em>\n<em>name: axis</em>\n<em>returns: ofMesh</em>&lt; V, N, C, T &gt;_\n_returns_description: _\n<em>parameters: float size</em>\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: an ofMesh representing an XYZ coordinate system.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh_&lt; V, N, C, T &gt; box(width, height, depth, resX = 2, resY = 2, resZ = 2)</p>\n<p>&lt;!--\n<em>syntax: box(width, height, depth, resX = 2, resY = 2, resZ = 2)</em>\n<em>name: box</em>\n<em>returns: ofMesh</em>&lt; V, N, C, T &gt;_\n_returns_description: _\n<em>parameters: float width, float height, float depth, int resX=2, int resY=2, int resZ=2</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A helper method that returns a box made of triangles.\nThe resolution settings for the width and height are optional\n(they are both set at a default of 2 triangles per side).</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\nmesh <span class=\"token operator\">=</span> ofMesh<span class=\"token operator\">::</span><span class=\"token function\">box</span><span class=\"token punctuation\">(</span><span class=\"token number\">200.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"3d/box.jpg\" alt=\"image of a simple box\"></p>\n<p>_description: _</p>\n<p>A helper method that returns a box made of triangles. The resolution settings for the width and height are optional (they are both set at a default of 2 triangles per side).</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\nmesh <span class=\"token operator\">=</span> ofMesh<span class=\"token operator\">::</span><span class=\"token function\">box</span><span class=\"token punctuation\">(</span><span class=\"token number\">200.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"box.jpg\" alt=\"image of a simple box\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clear()</p>\n<p>&lt;!--\n<em>syntax: clear()</em>\n<em>name: clear</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Removes all the vertices, colors, and indices from the mesh.</p>\n<p>_description: _</p>\n<p>This removes all the vertices, colors, and indices from the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearColors()</p>\n<p>&lt;!--\n<em>syntax: clearColors()</em>\n<em>name: clearColors</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clear all the colors.</p>\n<p>_description: _</p>\n<p>Clear all the colors.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearIndices()</p>\n<p>&lt;!--\n<em>syntax: clearIndices()</em>\n<em>name: clearIndices</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Remove all the indices of the mesh.\nThis means that your mesh will be a point cloud.</p>\n<p>_description: _</p>\n<p>Remove all the indices of the mesh. This means that your mesh will be a point cloud.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearNormals()</p>\n<p>&lt;!--\n<em>syntax: clearNormals()</em>\n<em>name: clearNormals</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Remove all the normals.</p>\n<p>_description: _</p>\n<p>Remove all the normals.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearTexCoords()</p>\n<p>&lt;!--\n<em>syntax: clearTexCoords()</em>\n<em>name: clearTexCoords</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Clear all the texture coordinates.</p>\n<p>_description: _</p>\n<p>Clear all the texture coordinates.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void clearVertices()</p>\n<p>&lt;!--\n<em>syntax: clearVertices()</em>\n<em>name: clearVertices</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Removes all the vertices.</p>\n<p>_description: _</p>\n<p>Removes all the vertices.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh_&lt; V, N, C, T &gt; cone(radius, height, radiusSegments = 12, heightSegments = 6, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</p>\n<p>&lt;!--\n<em>syntax: cone(radius, height, radiusSegments = 12, heightSegments = 6, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</em>\n<em>name: cone</em>\n<em>returns: ofMesh</em>&lt; V, N, C, T &gt;_\n_returns_description: _\n<em>parameters: float radius, float height, int radiusSegments=12, int heightSegments=6, int capSegments=2, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>A helper method that returns a cone made of triangles.\nThe resolution settings for the radius, height, and cap are optional\n(they are set at a default of 12 segments around the radius, 6 segments\nin the height, and 2 on the cap). The only valid modes are the default\nOF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\nmesh <span class=\"token operator\">=</span> ofMesh<span class=\"token operator\">::</span><span class=\"token function\">cone</span><span class=\"token punctuation\">(</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"3d/cone.jpg\" alt=\"image of a simple cone\"></p>\n<p>_description: _</p>\n<p>A helper method that returns a cone made of triangles. The resolution settings for the radius, height, and cap are optional (they are set at a default of 12 segments around the radius, 6 segments in the height, and 2 on the cap). The only valid modes are the default OF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\nmesh <span class=\"token operator\">=</span> ofMesh<span class=\"token operator\">::</span><span class=\"token function\">cone</span><span class=\"token punctuation\">(</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"cone.jpg\" alt=\"image of a simple cone\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh_&lt; V, N, C, T &gt; cylinder(radius, height, radiusSegments = 12, heightSegments = 6, numCapSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</p>\n<p>&lt;!--\n<em>syntax: cylinder(radius, height, radiusSegments = 12, heightSegments = 6, numCapSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</em>\n<em>name: cylinder</em>\n<em>returns: ofMesh</em>&lt; V, N, C, T &gt;_\n_returns_description: _\n<em>parameters: float radius, float height, int radiusSegments=12, int heightSegments=6, int numCapSegments=2, bool bCapped=true, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<pre><code>A helper method that returns a cylinder made of triangles<span class=\"token punctuation\">.</span>\n</code></pre>\n<p>The resolution settings for the radius, height, and cap are optional\n(they are set at a default of 12 segments around the radius, 6 segments\nin the height, and 2 on the cap). You have the option to cap the\ncylinder or not. The only valid modes are the default\nOF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.\n~~~~{.cpp}\nofMesh mesh;\nmesh = ofMesh::cylinder(100.0, 200.0);\n~~~~</p>\n<pre><code><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>image of a simple cylinder<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>3d<span class=\"token operator\">/</span>cylinder<span class=\"token punctuation\">.</span>jpg<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>_description: _</p>\n<p>A helper method that returns a cylinder made of triangles. The resolution settings for the radius, height, and cap are optional (they are set at a default of 12 segments around the radius, 6 segments in the height, and 2 on the cap). You have the option to cap the cylinder or not. The only valid modes are the default OF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.</p>\n<pre><code>ofMesh mesh<span class=\"token punctuation\">;</span>\nmesh <span class=\"token operator\">=</span> ofMesh<span class=\"token operator\">::</span><span class=\"token function\">cylinder</span><span class=\"token punctuation\">(</span><span class=\"token number\">100.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"cylinder.jpg\" alt=\"image of a simple cylinder\"></p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disableColors()</p>\n<p>&lt;!--\n<em>syntax: disableColors()</em>\n<em>name: disableColors</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Disable mesh colors.\nUse enableColors() to turn colors back on.</p>\n<p>_description: _</p>\n<p>Disable mesh colors. Use enableColors() to turn colors back on.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disableIndices()</p>\n<p>&lt;!--\n<em>syntax: disableIndices()</em>\n<em>name: disableIndices</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Disable mesh indices.\nUse enableIndices() to turn indices back on.</p>\n<p>_description: _</p>\n<p>Disable mesh indices. Use enableIndices() to turn indices back on.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disableNormals()</p>\n<p>&lt;!--\n<em>syntax: disableNormals()</em>\n<em>name: disableNormals</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Disable mesh normals.\nUse enableNormals() to turn normals back on.</p>\n<p>_description: _</p>\n<p>Disable mesh normals. Use enableNormals() to turn normals back on.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void disableTextures()</p>\n<p>&lt;!--\n<em>syntax: disableTextures()</em>\n<em>name: disableTextures</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Disable mesh textures.\nUse enableTextures() to turn textures back on.</p>\n<p>_description: _</p>\n<p>Disable mesh textures. Use enableTextures() to turn textures back on.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw()</p>\n<p>&lt;!--\n<em>syntax: draw()</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This draws the mesh using its primitive type, meaning that if\nyou set them up to be triangles, this will draw the triangles.</p>\n<p>_description: _</p>\n<p>This draws the mesh using its primitive type, meaning that if you set them up to be triangles, this will draw the triangles.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void draw(renderType)</p>\n<p>&lt;!--\n<em>syntax: draw(renderType)</em>\n<em>name: draw</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofPolyRenderMode renderType</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This draws the mesh using a defined renderType,\noverriding the renderType defined with setMode().</p>\n<p>_description: _</p>\n<p>This draws the mesh using a defined renderType, overriding the renderType defined with setMode().</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawFaces()</p>\n<p>&lt;!--\n<em>syntax: drawFaces()</em>\n<em>name: drawFaces</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This draws the mesh as faces, meaning that you'll have a collection of faces.</p>\n<p>_description: _</p>\n<p>This draws the mesh as faces, meaning that you'll have a collection of faces.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawVertices()</p>\n<p>&lt;!--\n<em>syntax: drawVertices()</em>\n<em>name: drawVertices</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This allows you draw just the vertices, meaning that you'll have a point cloud.</p>\n<p>_description: _</p>\n<p>This allows you draw just the vertices, meaning that you'll have a point cloud.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void drawWireframe()</p>\n<p>&lt;!--\n<em>syntax: drawWireframe()</em>\n<em>name: drawWireframe</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This draws the mesh as GL_LINES, meaning that you'll have a wireframe.</p>\n<p>_description: _</p>\n<p>This draws the mesh as GL_LINES, meaning that you'll have a wireframe.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void enableColors()</p>\n<p>&lt;!--\n<em>syntax: enableColors()</em>\n<em>name: enableColors</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Enable mesh colors.\nUse disableColors() to turn colors off.\nColors are enabled by default when they are added to the mesh.</p>\n<p>_description: _</p>\n<p>Enable mesh colors. Use disableColors() to turn colors off. Colors are enabled by default when they are added to the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void enableIndices()</p>\n<p>&lt;!--\n<em>syntax: enableIndices()</em>\n<em>name: enableIndices</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Enable mesh indices.\nUse disableIndices() to turn indices off.\nIndices are enabled by default when they are added to the mesh.</p>\n<p>_description: _</p>\n<p>Enable mesh indices. Use disableIndices() to turn indices off. Indices are enabled by default when they are added to the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void enableNormals()</p>\n<p>&lt;!--\n<em>syntax: enableNormals()</em>\n<em>name: enableNormals</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Enable mesh normals.\nUse disableNormals() to turn normals off.\nNormals are enabled by default when they are added to the mesh.</p>\n<p>_description: _</p>\n<p>Enable mesh normals. Use disableNormals() to turn normals off. Normals are enabled by default when they are added to the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void enableTextures()</p>\n<p>&lt;!--\n<em>syntax: enableTextures()</em>\n<em>name: enableTextures</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Enable mesh textures.\nUse disableTextures() to turn textures off.\nTextures are enabled by default when they are added to the mesh.</p>\n<p>_description: _</p>\n<p>Enable mesh textures. Use disableTextures() to turn textures off. Textures are enabled by default when they are added to the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void flatNormals()</p>\n<p>&lt;!--\n<em>syntax: flatNormals()</em>\n<em>name: flatNormals</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Duplicates vertices and updates normals to get a low-poly look.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###V getCentroid()</p>\n<p>&lt;!--\n<em>syntax: getCentroid()</em>\n<em>name: getCentroid</em>\n<em>returns: V</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a ofVec3f defining the centroid of all the vetices in the mesh.</p>\n<p>_description: _</p>\n<p>Returns a ofVec3f defining the centroid of all the vetices in the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###C getColor(i)</p>\n<p>&lt;!--\n<em>syntax: getColor(i)</em>\n<em>name: getColor</em>\n<em>returns: C</em>\n_returns_description: _\n<em>parameters: ofIndexType i</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get the color at the index in the colors vector.</p>\n<p><strong>Returns</strong>: the color at the index in the colors vector.</p>\n<p>_description: _</p>\n<p>Returns the color at the index in the colors vector.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; C &gt; &amp; getColors()</p>\n<p>&lt;!--\n<em>syntax: getColors()</em>\n<em>name: getColors</em>\n<em>returns: vector&lt; C &gt; &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Use this if you plan to change the colors as part of this call as it will force a reset of the cache.</p>\n<p><strong>Returns</strong>: the vector that contains all of the colors of the mesh, if it has any.</p>\n<p>_description: _</p>\n<p>Returns the vector that contains all of the colors of the mesh, if it has any. (read only)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const vector&lt; C &gt; &amp; getColors()</p>\n<p>&lt;!--\n<em>syntax: getColors()</em>\n<em>name: getColors</em>\n<em>returns: const vector&lt; C &gt; &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the vector that contains all of the colors of the mesh, if it has any. (read only)</p>\n<p>_description: _</p>\n<p>Returns the vector that contains all of the colors of the mesh, if it has any. Use this if you plan to change the colors as part of this call as it will force a reset of the cache.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###C * getColorsPointer()</p>\n<p>&lt;!--\n<em>syntax: getColorsPointer()</em>\n<em>name: getColorsPointer</em>\n<em>returns: C *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Use this if you plan to change the colors as part of this call as it will force a reset of the cache.</p>\n<p><strong>Returns</strong>: a pointer that contains all of the colors of the mesh, if it has any.</p>\n<p>_description: _</p>\n<p>Returns a pointer that contains all of the colors of the mesh, if it has any. Use this if you plan to change the colors as part of this call as it will force a reset of the cache.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const C * getColorsPointer()</p>\n<p>&lt;!--\n<em>syntax: getColorsPointer()</em>\n<em>name: getColorsPointer</em>\n<em>returns: const C *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a pointer that contains all of the colors of the mesh, if it has any. (read only)</p>\n<p>_description: _</p>\n<p>Returns a pointer that contains all of the colors of the mesh, if it has any. (read only)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMeshFace_&lt; V, N, C, T &gt; getFace(faceId)</p>\n<p>&lt;!--\n<em>syntax: getFace(faceId)</em>\n<em>name: getFace</em>\n<em>returns: ofMeshFace</em>&lt; V, N, C, T &gt;_\n_returns_description: _\n<em>parameters: ofIndexType faceId</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the vector that contains all of the faces of the mesh. This isn't currently implemented.</p>\n<p>_description: _</p>\n<p>Returns the vector that contains all of the faces of the mesh. This isn't currently implemented.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; N &gt; getFaceNormals(perVetex = false)</p>\n<p>&lt;!--\n<em>syntax: getFaceNormals(perVetex = false)</em>\n<em>name: getFaceNormals</em>\n<em>returns: vector&lt; N &gt;</em>\n_returns_description: _\n<em>parameters: bool perVetex=false</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get normals for each face\nAs a default it only calculates the normal for the face as a whole but\nby setting (perVertex = true) it will return the same normal value for\neach of the three vertices making up a face.</p>\n<p><strong>Returns</strong>: a vector containing the calculated normals of each face in the mesh.</p>\n<p>_description: _</p>\n<p>Returns a vector containing the calculated normals of each face in the mesh. As a default it only calculates the normal for the face as a whole but by setting (perVertex = true) it will return the same normal value for each of the three vertices making up a face.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofIndexType getIndex(i)</p>\n<p>&lt;!--\n<em>syntax: getIndex(i)</em>\n<em>name: getIndex</em>\n<em>returns: ofIndexType</em>\n_returns_description: _\n<em>parameters: ofIndexType i</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the index from the index vector. Each index represents the index of the vertex in the vertices vector. This determines the way that the vertices are connected into the polgoynon type set in the primitiveMode.</p>\n<p>_description: _</p>\n<p>Returns the index from the index vector. Each index represents the index of the vertex in the vertices vector. This determines the way that the vertices are connected into the polgoynon type set in the primitiveMode.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofIndexType * getIndexPointer()</p>\n<p>&lt;!--\n<em>syntax: getIndexPointer()</em>\n<em>name: getIndexPointer</em>\n<em>returns: ofIndexType *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a pointer to the indices that the mesh contains.</p>\n<p>_description: _</p>\n<p>Returns a pointer to the indices that the mesh contains.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const ofIndexType * getIndexPointer()</p>\n<p>&lt;!--\n<em>syntax: getIndexPointer()</em>\n<em>name: getIndexPointer</em>\n<em>returns: const ofIndexType *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a pointer to the indices that the mesh contains.</p>\n<p>_description: _</p>\n<p>Returns a pointer to the indices that the mesh contains.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; ofIndexType &gt; &amp; getIndices()</p>\n<p>&lt;!--\n<em>syntax: getIndices()</em>\n<em>name: getIndices</em>\n<em>returns: vector&lt; ofIndexType &gt; &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Use this if you plan to change the indices as part of this call as it\nwill force a reset of the cache.</p>\n<p><strong>Returns</strong>: the vector that contains all of the indices of the mesh, if it has any.</p>\n<p>_description: _</p>\n<p>Returns the vector that contains all of the indices of the mesh, if it has any. (read only)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const vector&lt; ofIndexType &gt; &amp; getIndices()</p>\n<p>&lt;!--\n<em>syntax: getIndices()</em>\n<em>name: getIndices</em>\n<em>returns: const vector&lt; ofIndexType &gt; &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the vector that contains all of the indices of the mesh, if it has any. (read only)</p>\n<p>_description: _</p>\n<p>Returns the vector that contains all of the indices of the mesh, if it has any. Use this if you plan to change the indices as part of this call as it will force a reset of the cache.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh_&lt; V, N, C, T &gt; getMeshForIndices(startIndex, endIndex)</p>\n<p>&lt;!--\n<em>syntax: getMeshForIndices(startIndex, endIndex)</em>\n<em>name: getMeshForIndices</em>\n<em>returns: ofMesh</em>&lt; V, N, C, T &gt;_\n_returns_description: _\n<em>parameters: ofIndexType startIndex, ofIndexType endIndex</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>The new mesh includes the mesh mode, colors, textures, and normals of the original mesh (assuming any were added).</p>\n<p><strong>Returns</strong>: a mesh made up of a range of indices from startIndex to the endIndex.</p>\n<p>_description: _</p>\n<p>Returns a mesh made up of a range of indices from startIndex to the endIndex. The new mesh includes the mesh mode, colors, textures, and normals of the original mesh (assuming any were added).</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh_&lt; V, N, C, T &gt; getMeshForIndices(startIndex, endIndex, startVertIndex, endVertIndex)</p>\n<p>&lt;!--\n<em>syntax: getMeshForIndices(startIndex, endIndex, startVertIndex, endVertIndex)</em>\n<em>name: getMeshForIndices</em>\n<em>returns: ofMesh</em>&lt; V, N, C, T &gt;_\n_returns_description: _\n<em>parameters: ofIndexType startIndex, ofIndexType endIndex, ofIndexType startVertIndex, ofIndexType endVertIndex</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPrimitiveMode getMode()</p>\n<p>&lt;!--\n<em>syntax: getMode()</em>\n<em>name: getMode</em>\n<em>returns: ofPrimitiveMode</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><br>\n<strong>Returns</strong>: the primitive mode that the mesh is using.</p>\n<p>_description: _</p>\n<p>Returns the primitive mode that the mesh is using.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###N getNormal(i)</p>\n<p>&lt;!--\n<em>syntax: getNormal(i)</em>\n<em>name: getNormal</em>\n<em>returns: N</em>\n_returns_description: _\n<em>parameters: ofIndexType i</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><br>\n<strong>Returns</strong>: the normal at the index in the normals vector.</p>\n<p>_description: _</p>\n<p>Returns the normal at the index in the normals vector.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; N &gt; &amp; getNormals()</p>\n<p>&lt;!--\n<em>syntax: getNormals()</em>\n<em>name: getNormals</em>\n<em>returns: vector&lt; N &gt; &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Use this if you plan to change the normals as part of this call as it\nwill force a reset of the cache.</p>\n<p><strong>Returns</strong>: the vector that contains all of the normals of the mesh,\nif it has any.</p>\n<p>_description: _</p>\n<p>Returns the vector that contains all of the normals of the mesh, if it has any. (read only)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const vector&lt; N &gt; &amp; getNormals()</p>\n<p>&lt;!--\n<em>syntax: getNormals()</em>\n<em>name: getNormals</em>\n<em>returns: const vector&lt; N &gt; &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the vector that contains all of the normals of the mesh, if\nit has any. (read only)</p>\n<p>_description: _</p>\n<p>Returns the vector that contains all of the normals of the mesh, if it has any. Use this if you plan to change the normals as part of this call as it will force a reset of the cache.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###N * getNormalsPointer()</p>\n<p>&lt;!--\n<em>syntax: getNormalsPointer()</em>\n<em>name: getNormalsPointer</em>\n<em>returns: N *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a pointer to the normals that the mesh contains.</p>\n<p>_description: _</p>\n<p>Returns a pointer to the normals that the mesh contains.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const N * getNormalsPointer()</p>\n<p>&lt;!--\n<em>syntax: getNormalsPointer()</em>\n<em>name: getNormalsPointer</em>\n<em>returns: const N *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a pointer to the normals that the mesh contains.</p>\n<p>_description: _</p>\n<p>Returns a pointer to the normals that the mesh contains.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getNumColors()</p>\n<p>&lt;!--\n<em>syntax: getNumColors()</em>\n<em>name: getNumColors</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the size of the colors vector for the mesh.\nThis will tell you how many colors are contained in the mesh.</p>\n<p>_description: _</p>\n<p>Returns the size of the colors vector for the mesh. This will tell you how many colors are contained in the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getNumIndices()</p>\n<p>&lt;!--\n<em>syntax: getNumIndices()</em>\n<em>name: getNumIndices</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This will tell you how many indices are contained in the mesh.</p>\n<p><strong>Returns</strong>: the size of the indices vector for the mesh.</p>\n<p>_description: _</p>\n<p>Returns the size of the indices vector for the mesh. This will tell you how many indices are contained in the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getNumNormals()</p>\n<p>&lt;!--\n<em>syntax: getNumNormals()</em>\n<em>name: getNumNormals</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This will tell you how many normals are contained in the mesh.</p>\n<p><strong>Returns</strong>: the size of the normals vector for the mesh.</p>\n<p>_description: _</p>\n<p>Returns the size of the normals vector for the mesh. This will tell you how many normals are contained in the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getNumTexCoords()</p>\n<p>&lt;!--\n<em>syntax: getNumTexCoords()</em>\n<em>name: getNumTexCoords</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This will tell you how many texture coordinates are contained in the mesh.</p>\n<p><strong>Returns</strong>: the size of the texture coordinates vector for the mesh.</p>\n<p>_description: _</p>\n<p>Returns the size of the texture coordinates vector for the mesh. This will tell you how many texture coordinates are contained in the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###size_t getNumVertices()</p>\n<p>&lt;!--\n<em>syntax: getNumVertices()</em>\n<em>name: getNumVertices</em>\n<em>returns: size_t</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the size of the vertices vector for the mesh.\nThis will tell you how many vertices are contained in the mesh.</p>\n<p>_description: _</p>\n<p>Returns the size of the vertices vector for the mesh. This will tell you how many vertices are contained in the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###T getTexCoord(i)</p>\n<p>&lt;!--\n<em>syntax: getTexCoord(i)</em>\n<em>name: getTexCoord</em>\n<em>returns: T</em>\n_returns_description: _\n<em>parameters: ofIndexType i</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the Vec2f representing the texture coordinate.\nBecause OF uses ARB textures these are in pixels rather than\n0-1 normalized coordinates.</p>\n<p>_description: _</p>\n<p>Returns the Vec2f representing the texture coordinate. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; T &gt; &amp; getTexCoords()</p>\n<p>&lt;!--\n<em>syntax: getTexCoords()</em>\n<em>name: getTexCoords</em>\n<em>returns: vector&lt; T &gt; &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a vector representing the texture coordinates of the mesh\nBecause OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.\nUse this if you plan to change the texture coordinates as part of this\ncall as it will force a reset of the cache.</p>\n<p><strong>Returns</strong>: a vector of Vec2f representing the texture coordinates for the whole mesh.</p>\n<p>_description: _</p>\n<p>Returns a vector of Vec2f representing the texture coordinates for the whole mesh. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates. (read only)</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const vector&lt; T &gt; &amp; getTexCoords()</p>\n<p>&lt;!--\n<em>syntax: getTexCoords()</em>\n<em>name: getTexCoords</em>\n<em>returns: const vector&lt; T &gt; &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.</p>\n<p><strong>Returns</strong>: a vector of Vec2f representing the texture coordinates for the whole mesh. (read only)</p>\n<p>_description: _</p>\n<p>Returns a vector of Vec2f representing the texture coordinates for the whole mesh. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates. Use this if you plan to change the texture coordinates as part of this call as it will force a reset of the cache.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###T * getTexCoordsPointer()</p>\n<p>&lt;!--\n<em>syntax: getTexCoordsPointer()</em>\n<em>name: getTexCoordsPointer</em>\n<em>returns: T *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a pointer to the texture coords that the mesh contains.</p>\n<p>_description: _</p>\n<p>Returns a pointer to the texture coords that the mesh contains.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const T * getTexCoordsPointer()</p>\n<p>&lt;!--\n<em>syntax: getTexCoordsPointer()</em>\n<em>name: getTexCoordsPointer</em>\n<em>returns: const T *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Get a pointer to the ofVec2f texture coordinates that the mesh contains.</p>\n<p>_description: _</p>\n<p>Get a pointer to the ofVec2f texture coordinates that the mesh contains.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const vector&lt;ofMeshFace_&lt; V, N, C, T&gt;  &gt; &amp; getUniqueFaces()</p>\n<p>&lt;!--\n<em>syntax: getUniqueFaces()</em>\n<em>name: getUniqueFaces</em>\n<em>returns: const vector&lt;ofMeshFace</em>&lt; V, N, C, T&gt;  &gt; &amp;_\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the mesh as a vector of unique ofMeshFace_s\na list of triangles that do not share vertices or indices</p>\n<p>_description: _</p>\n<p>Returns the mesh as a vector of unique ofMeshFaces.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###V getVertex(i)</p>\n<p>&lt;!--\n<em>syntax: getVertex(i)</em>\n<em>name: getVertex</em>\n<em>returns: V</em>\n_returns_description: _\n<em>parameters: ofIndexType i</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the vertex at the index.</p>\n<p>_description: _</p>\n<p>Returns the vertex at the index.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###vector&lt; V &gt; &amp; getVertices()</p>\n<p>&lt;!--\n<em>syntax: getVertices()</em>\n<em>name: getVertices</em>\n<em>returns: vector&lt; V &gt; &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the vector that contains all of the vertices of the mesh.</p>\n<p>_description: _</p>\n<p>Returns the vector that contains all of the vertices of the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const vector&lt; V &gt; &amp; getVertices()</p>\n<p>&lt;!--\n<em>syntax: getVertices()</em>\n<em>name: getVertices</em>\n<em>returns: const vector&lt; V &gt; &amp;</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: the vector that contains all of the vertices of the mesh.</p>\n<p>_description: _</p>\n<p>Returns the vector that contains all of the vertices of the mesh.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###V * getVerticesPointer()</p>\n<p>&lt;!--\n<em>syntax: getVerticesPointer()</em>\n<em>name: getVerticesPointer</em>\n<em>returns: V *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.8.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a pointer to the vertices that the mesh contains.</p>\n<p>_description: _</p>\n<p>Returns a pointer to the vertices that the mesh contains.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###const V * getVerticesPointer()</p>\n<p>&lt;!--\n<em>syntax: getVerticesPointer()</em>\n<em>name: getVerticesPointer</em>\n<em>returns: const V *</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: a pointer to the vertices that the mesh contains.</p>\n<p>_description: _</p>\n<p>Returns a pointer to the vertices that the mesh contains.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool hasColors()</p>\n<p>&lt;!--\n<em>syntax: hasColors()</em>\n<em>name: hasColors</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>/returns Whether the mesh has any colors.</p>\n<p>_description: _</p>\n<p>Whether the mesh has any colors.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool hasIndices()</p>\n<p>&lt;!--\n<em>syntax: hasIndices()</em>\n<em>name: hasIndices</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>/returns Whether the mesh has any indices assigned to it.</p>\n<p>_description: _</p>\n<p>Whether the mesh has any indices assigned to it.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool hasNormals()</p>\n<p>&lt;!--\n<em>syntax: hasNormals()</em>\n<em>name: hasNormals</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>/returnsWhether the mesh has any normals.</p>\n<p>_description: _</p>\n<p>Whether the mesh has any normals.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool hasTexCoords()</p>\n<p>&lt;!--\n<em>syntax: hasTexCoords()</em>\n<em>name: hasTexCoords</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>/returns Whether the mesh has any textures assigned to it.</p>\n<p>_description: _</p>\n<p>Whether the mesh has any textures assigned to it.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool hasVertices()</p>\n<p>&lt;!--\n<em>syntax: hasVertices()</em>\n<em>name: hasVertices</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: Whether the mesh has any vertices.</p>\n<p>_description: _</p>\n<p>Whether the mesh has any vertices.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool haveColorsChanged()</p>\n<p>&lt;!--\n<em>syntax: haveColorsChanged()</em>\n<em>name: haveColorsChanged</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: If the colors of the mesh have changed, been added or removed.</p>\n<p>_description: _</p>\n<p>If the colors of the mesh have changed, been added or removed.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool haveIndicesChanged()</p>\n<p>&lt;!--\n<em>syntax: haveIndicesChanged()</em>\n<em>name: haveIndicesChanged</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: If the indices of the mesh have changed, been added or removed.</p>\n<p>_description: _</p>\n<p>If the indices of the mesh have changed, been added or removed.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool haveNormalsChanged()</p>\n<p>&lt;!--\n<em>syntax: haveNormalsChanged()</em>\n<em>name: haveNormalsChanged</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: If the normals of the mesh have changed, been added or removed.</p>\n<p>_description: _</p>\n<p>If the normals of the mesh have changed, been added or removed.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool haveTexCoordsChanged()</p>\n<p>&lt;!--\n<em>syntax: haveTexCoordsChanged()</em>\n<em>name: haveTexCoordsChanged</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: If the texture coords of the mesh have changed, been added or removed.</p>\n<p>_description: _</p>\n<p>If the texture coords of the mesh have changed, been added or removed.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool haveVertsChanged()</p>\n<p>&lt;!--\n<em>syntax: haveVertsChanged()</em>\n<em>name: haveVertsChanged</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: protected</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p><strong>Returns</strong>: If the vertices of the mesh have changed, been added or removed.</p>\n<p>_description: _</p>\n<p>If the vertices of the mesh have changed, been added or removed.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh_&lt; V, N, C, T &gt; icosahedron(radius)</p>\n<p>&lt;!--\n<em>syntax: icosahedron(radius)</em>\n<em>name: icosahedron</em>\n<em>returns: ofMesh</em>&lt; V, N, C, T &gt;_\n_returns_description: _\n<em>parameters: float radius</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh_&lt; V, N, C, T &gt; icosphere(radius, iterations)</p>\n<p>&lt;!--\n<em>syntax: icosphere(radius, iterations)</em>\n<em>name: icosphere</em>\n<em>returns: ofMesh</em>&lt; V, N, C, T &gt;_\n_returns_description: _\n<em>parameters: float radius, size_t iterations</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void load(&amp;path)</p>\n<p>&lt;!--\n<em>syntax: load(&amp;path)</em>\n<em>name: load</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;path</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Loads a mesh from a file located at the provided path into the mesh.\nThis will replace any existing data within the mesh.</p>\n<p>It expects that the file will be in the <a href=\"http://en.wikipedia.org/wiki/PLY_(file_format)\">PLY Format</a>.\nIt will only load meshes saved in the PLY ASCII format; the binary format is not supported.</p>\n<p>_description: _</p>\n<p>Loads a mesh from a file located at the provided path into the mesh.\nThis will replace any existing data within the mesh.</p>\n<p>It expects that the file will be in the <a href=\"http://en.wikipedia.org/wiki/PLY_(file_format)\">PLY Format</a>.\nIt will only load meshes saved in the PLY ASCII format; the binary format is not supported.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void mergeDuplicateVertices()</p>\n<p>&lt;!--\n<em>syntax: mergeDuplicateVertices()</em>\n<em>name: mergeDuplicateVertices</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofMesh_()</h3>\n<p>&lt;!--\n<em>syntax: ofMesh</em>()_\n<em>name: ofMesh</em>_\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This creates the mesh,\nusing OF_PRIMITIVE_TRIANGLES without any initial vertices.</p>\n<p>_description: _</p>\n<p>This creates the mesh, using OF_PRIMITIVE_TRIANGLES and without any initial vertices.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>ofMesh_(mode, &amp;verts)</h3>\n<p>&lt;!--\n<em>syntax: ofMesh</em>(mode, &amp;verts)_\n<em>name: ofMesh</em>_\n_returns: _\n_returns_description: _\n<em>parameters: ofPrimitiveMode mode, const vector&lt; V &gt; &amp;verts</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This allows to you to use one of the other ofPrimitiveModes:\nOF_PRIMITIVE_TRIANGLES, OF_PRIMITIVE_TRIANGLE_STRIP,\nOF_PRIMITIVE_TRIANGLE_FAN, OF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP,\nOF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS.\nSee <a href=\"../gl/ofGLUtils\">ofGLUtils</a> for more information on these types.</p>\n<p>_description: _</p>\n<p>This allows to you to use one of the other ofPrimitiveModes: OF_PRIMITIVE_TRIANGLES, OF_PRIMITIVE_TRIANGLE_STRIP, OF_PRIMITIVE_TRIANGLE_FAN, OF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP, OF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS. See <a href=\"../gl/ofGLUtils\">ofGLUtils</a> for more information on these types.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh_&lt; V, N, C, T &gt; plane(width, height, columns = 2, rows = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</p>\n<p>&lt;!--\n<em>syntax: plane(width, height, columns = 2, rows = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</em>\n<em>name: plane</em>\n<em>returns: ofMesh</em>&lt; V, N, C, T &gt;_\n_returns_description: _\n<em>parameters: float width, float height, int columns=2, int rows=2, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>}\n\\name Primitive constructor helper methods\n{</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void removeColor(index)</p>\n<p>&lt;!--\n<em>syntax: removeColor(index)</em>\n<em>name: removeColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Remove a color at the index in the colors vector.</p>\n<p>_description: _</p>\n<p>Remove a color at the index in the colors vector.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void removeIndex(index)</p>\n<p>&lt;!--\n<em>syntax: removeIndex(index)</em>\n<em>name: removeIndex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Removes an index.</p>\n<p>_description: _</p>\n<p>Removes an index.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void removeNormal(index)</p>\n<p>&lt;!--\n<em>syntax: removeNormal(index)</em>\n<em>name: removeNormal</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Remove a normal.</p>\n<p>_description: _</p>\n<p>Remove a normal.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void removeTexCoord(index)</p>\n<p>&lt;!--\n<em>syntax: removeTexCoord(index)</em>\n<em>name: removeTexCoord</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Remove a Vec2f representing the texture coordinate.</p>\n<p>_description: _</p>\n<p>Remove a Vec2f representing the texture coordinate.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void removeVertex(index)</p>\n<p>&lt;!--\n<em>syntax: removeVertex(index)</em>\n<em>name: removeVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Removes the vertex at the index in the vector.</p>\n<p>_description: _</p>\n<p>Removes the vertex at the index in the vector.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void save(&amp;path, useBinary = false)</p>\n<p>&lt;!--\n<em>syntax: save(&amp;path, useBinary = false)</em>\n<em>name: save</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: const filesystem::path &amp;path, bool useBinary=false</em>\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Saves the mesh at the passed path in the <a href=\"http://en.wikipedia.org/wiki/PLY_(file_format)\">PLY Format</a>.</p>\n<p>There are two format options for PLY: a binary format and an ASCII format.\nBy default, it will save using the ASCII format.\nPassing <code><span class=\"token boolean\">true</span></code> into the <code>useBinary</code> parameter will save it in the binary format.</p>\n<p>If you're planning on reloading the mesh into ofMesh, ofMesh currently only supports loading the ASCII format.</p>\n<p>For more information, see the <a href=\"http://paulbourke.net/dataformats/ply/\">PLY format specification</a>.</p>\n<p>_description: _</p>\n<p>Saves the mesh at the passed path in the <a href=\"http://en.wikipedia.org/wiki/PLY_(file_format)\">PLY Format</a>.</p>\n<p>There are two format options for PLY: a binary format and an ASCII format.\nBy default, it will save using the ASCII format.\nPassing <code><span class=\"token boolean\">true</span></code> into the <code>useBinary</code> parameter will save it in the binary format.</p>\n<p>If you're planning on reloading the mesh into ofMesh, ofMesh currently only supports loading the ASCII format.</p>\n<p>For more information, see the <a href=\"http://paulbourke.net/dataformats/ply/\">PLY format specification</a>.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColor(index, &amp;c)</p>\n<p>&lt;!--\n<em>syntax: setColor(index, &amp;c)</em>\n<em>name: setColor</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index, const C &amp;c</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Set the color at the index in the colors vector.</p>\n<p>_description: _</p>\n<p>Set the color at the index in the colors vector.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setColorForIndices(startIndex, endIndex, color)</p>\n<p>&lt;!--\n<em>syntax: setColorForIndices(startIndex, endIndex, color)</em>\n<em>name: setColorForIndices</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType startIndex, ofIndexType endIndex, C color</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setFromTriangles(V, N, C, &amp;tris, bUseFaceNormal = false)</p>\n<p>&lt;!--\n<em>syntax: setFromTriangles(V, N, C, &amp;tris, bUseFaceNormal = false)</em>\n<em>name: setFromTriangles</em>\n<em>returns: void</em>\n<em>returns_description: _\n<em>parameters: const vector&lt;ofMeshFace</em>&lt; V, N, C, T&gt;  &gt; &amp;tris, bool bUseFaceNormal=false</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setIndex(index, val)</p>\n<p>&lt;!--\n<em>syntax: setIndex(index, val)</em>\n<em>name: setIndex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index, ofIndexType val</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>This sets the index at i.</p>\n<p>_description: _</p>\n<p>This sets the index at i.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setMode(mode)</p>\n<p>&lt;!--\n<em>syntax: setMode(mode)</em>\n<em>name: setMode</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofPrimitiveMode mode</em>\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Allows you to set the ofPrimitiveMode.\nThe available modes are OF_PRIMITIVE_TRIANGLES,\nOF_PRIMITIVE_TRIANGLE_STRIP, OF_PRIMITIVE_TRIANGLE_FAN,\nOF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP,\nOF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS</p>\n<p>_description: _</p>\n<p>Allows you to set the ofPrimitiveMode. The available modes are OF_PRIMITIVE_TRIANGLES, OF_PRIMITIVE_TRIANGLE_STRIP, OF_PRIMITIVE_TRIANGLE_FAN, OF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP, OF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setNormal(index, &amp;n)</p>\n<p>&lt;!--\n<em>syntax: setNormal(index, &amp;n)</em>\n<em>name: setNormal</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index, const N &amp;n</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>\\todo Documentation.</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setTexCoord(index, &amp;t)</p>\n<p>&lt;!--\n<em>syntax: setTexCoord(index, &amp;t)</em>\n<em>name: setTexCoord</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index, const T &amp;t</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setVertex(index, &amp;v)</p>\n<p>&lt;!--\n<em>syntax: setVertex(index, &amp;v)</em>\n<em>name: setVertex</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: ofIndexType index, const V &amp;v</em>\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void setupIndicesAuto()</p>\n<p>&lt;!--\n<em>syntax: setupIndicesAuto()</em>\n<em>name: setupIndicesAuto</em>\n<em>returns: void</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>Allow you to set up the indices automatically when you add a vertex.</p>\n<p>_description: _</p>\n<p>Allow you to set up the indices automatically when you add a vertex.</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###void smoothNormals(angle)</p>\n<p>&lt;!--\n<em>syntax: smoothNormals(angle)</em>\n<em>name: smoothNormals</em>\n<em>returns: void</em>\n_returns_description: _\n<em>parameters: float angle</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofMesh_&lt; V, N, C, T &gt; sphere(radius, res = 12, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</p>\n<p>&lt;!--\n<em>syntax: sphere(radius, res = 12, mode = OF_PRIMITIVE_TRIANGLE_STRIP)</em>\n<em>name: sphere</em>\n<em>returns: ofMesh</em>&lt; V, N, C, T &gt;_\n_returns_description: _\n<em>parameters: float radius, int res=12, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP</em>\n<em>access: public</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: True</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool usingColors()</p>\n<p>&lt;!--\n<em>syntax: usingColors()</em>\n<em>name: usingColors</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool usingIndices()</p>\n<p>&lt;!--\n<em>syntax: usingIndices()</em>\n<em>name: usingIndices</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool usingNormals()</p>\n<p>&lt;!--\n<em>syntax: usingNormals()</em>\n<em>name: usingNormals</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool usingTextures()</p>\n<p>&lt;!--\n<em>syntax: usingTextures()</em>\n<em>name: usingTextures</em>\n<em>returns: bool</em>\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<h3>~ofMesh_()</h3>\n<p>&lt;!--\n<em>syntax: ~ofMesh</em>()_\n<em>name: ~ofMesh</em>_\n_returns: _\n_returns_description: _\n_parameters: _\n<em>access: public</em>\n<em>version_started: 0.10.0</em>\n_version_deprecated: _\n_summary: _\n<em>constant: False</em>\n<em>static: False</em>\n<em>visible: True</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>##Variables</p>\n<p>###bool bColorsChanged</p>\n<p>&lt;!--\n<em>name: bColorsChanged</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bFacesDirty</p>\n<p>&lt;!--\n<em>name: bFacesDirty</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bIndicesChanged</p>\n<p>&lt;!--\n<em>name: bIndicesChanged</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bNormalsChanged</p>\n<p>&lt;!--\n<em>name: bNormalsChanged</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bTexCoordsChanged</p>\n<p>&lt;!--\n<em>name: bTexCoordsChanged</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool bVertsChanged</p>\n<p>&lt;!--\n<em>name: bVertsChanged</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int colors</p>\n<p>&lt;!--\n<em>name: colors</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int faces</p>\n<p>&lt;!--\n<em>name: faces</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 0073</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int indices</p>\n<p>&lt;!--\n<em>name: indices</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###ofPrimitiveMode mode</p>\n<p>&lt;!--\n<em>name: mode</em>\n<em>type: ofPrimitiveMode</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int normals</p>\n<p>&lt;!--\n<em>name: normals</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int texCoords</p>\n<p>&lt;!--\n<em>name: texCoords</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool useColors</p>\n<p>&lt;!--\n<em>name: useColors</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool useIndices</p>\n<p>&lt;!--\n<em>name: useIndices</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0072</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool useNormals</p>\n<p>&lt;!--\n<em>name: useNormals</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###bool useTextures</p>\n<p>&lt;!--\n<em>name: useTextures</em>\n<em>type: bool</em>\n<em>access: private</em>\n<em>version_started: 0071</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n<p>###int vertices</p>\n<p>&lt;!--\n<em>name: vertices</em>\n<em>type: int</em>\n<em>access: private</em>\n<em>version_started: 007</em>\n_version_deprecated: _\n_summary: _\n<em>visible: True</em>\n<em>constant: False</em>\n<em>advanced: False</em>\n--&gt;</p>\n<p>_inlined_description: _</p>\n<p>_description: _</p>\n<p>&lt;!-----------------------------------------------------------------------------&gt;</p>\n","raw":"#class ofMesh_\n\n\n<!--\n_visible: True_\n_advanced: False_\n_istemplated: True_\n_extends: _\n-->\n\n##InlineDescription\n\nRepresents a set of vertices in 3D spaces with normals, colors,\nand texture coordinates at those points.\n\nEach of these different properties is stored in a vector.\nVertices are passed to your graphics card and your graphics card fill in\nthe spaces in between them in a processing usually called the rendering\npipeline. The rendering pipeline goes more or less like this:\n\n1. Say how you're going to connect all the points.\n2. Make some points.\n3. Say that you're done making points.\n\nYou may be thinking: I'll just make eight vertices and voila: a cube.\nNot so quick. There's a hitch and that hitch is that the OpenGL renderer\nhas different ways of connecting the vertices that you pass to it and none\nare as efficient as to only need eight vertices to create a cube.\n\nYou've probably seen a version of the following image somewhere before.\n![PRIMATIVES](3d/primitives_new-640x269.gif)\nGenerally you have to create your points to fit the drawing mode that\nyou've selected because of whats called winding.\nA vertex gets connected to another vertex in the order that the mode does\nits winding and this means that you might need multiple vertices in a given\nlocation to create the shape you want. The cube, for example, requires\neighteen vertices, not the eight that you would expect.\nIf you note the order of vertices in the GL chart above you'll see that all\nof them use their vertices slightly differently (in particular you should\nmake note of the GL_TRIANGLE_STRIP example). Drawing a shape requires that\nyou keep track of which drawing mode is being used and which order\nyour vertices are declared in.\n\nIf you're thinking: it would be nice if there were an abstraction layer\nfor this you're thinking right. Enter the mesh, which is really just\nan abstraction of the vertex and drawing mode that we started with\nbut which has the added bonus of managing the draw order for you.\nThat may seem insignificant at first, but it provides some real benefits\nwhen working with complex geometry.\n\nA very typical usage is something like the following:\n\n~~~~{.cpp}\nofMesh mesh;\nfor (int y = 0; y < height; y++){\n\tfor (int x = 0; x<width; x++){\n\t\tmesh.addVertex(glm::vec3(x,y,0)); // make a new vertex\n\t\tmesh.addColor(ofFloatColor(0,0,0));  // add a color at that vertex\n\t}\n}\n~~~~\n\nNow it's important to make sure that each vertex is correctly connected\nwith the other vertices around it. This is done using indices, which you\ncan set up like so:\n~~~~{.cpp}\nfor (int y = 0; y<height-1; y++){\n\tfor (int x=0; x<width-1; x++){\n\t\tmesh.addIndex(x+y*width);\t\t\t\t// 0\n\t\tmesh.addIndex((x+1)+y*width);\t\t\t// 1\n\t\tmesh.addIndex(x+(y+1)*width);\t\t\t// 10\n\n\t\tmesh.addIndex((x+1)+y*width);\t\t\t// 1\n\t\tmesh.addIndex((x+1)+(y+1)*width);\t\t// 11\n\t\tmesh.addIndex(x+(y+1)*width);\t\t\t// 10\n\t}\n}\n~~~~\n\n\n\n\n\n##Description\n\nAn ofMesh represents a set of vertices in 3D spaces, and normals at those points, colors at those points, and texture coordinates at those points. Each of these different properties is stored in a vector.\nVertices are passed to your graphics card and your graphics card fill in the spaces in between them in a processing usually called the rendering pipeline. The rendering pipeline goes more or less like this:\n\n1. Say how you're going to connect all the points.\n\n2. Make some points.\n\n3. Say that you're done making points.\n\nYou may be thinking: I'll just make eight vertices and voila: a cube. Not so quick. There's a hitch and that hitch is that the OpenGL renderer has different ways of connecting the vertices that you pass to it and none are as efficient as to only need eight vertices to create a cube.\n\nYou've probably seen a version of the following image somewhere before.\n![PRIMATIVES](gl_primitives_640x269.png)\n\nGenerally you have to create your points to fit the drawing mode that you've selected because of whats called winding. A vertex gets connected to another vertex in the order that the mode does its winding and this means that you might need multiple vertices in a given location to create the shape you want. The cube, for example, requires eighteen vertices, not the eight that you would expect. If you note the order of vertices in the GL chart above you'll see that all of them use their vertices slightly differently (in particular you should make note of the GL_TRIANGLE_STRIP example). Drawing a shape requires that you keep track of which drawing mode is being used and which order your vertices are declared in.\n\nIf you're thinking: it would be nice if there were an abstraction layer for this you're thinking right. Enter the mesh, which is really just an abstraction of the vertex and drawing mode that we started with but which has the added bonus of managing the draw order for you. That may seem insignificant at first, but it provides some real benefits when working with complex geometry.\n\nA very typical usage is something like the following:\n\n~~~~{.cpp}\nofMesh mesh;\nfor (int y = 0; y < height; y++){\n\tfor (int x = 0; x<width; x++){\n\t\tmesh.addVertex(ofPoint(x,y,0)); // make a new vertex\n\t\tmesh.addColor(ofFloatColor(0,0,0));  // add a color at that vertex\n\t}\n}\n\n// now it's important to make sure that each vertex is correctly connected with the\n// other vertices around it. This is done using indices, which you can set up like so:\nfor (int y = 0; y<height-1; y++){\n\tfor (int x=0; x<width-1; x++){\n\t\tmesh.addIndex(x+y*width);\t\t\t\t// 0\n\t\tmesh.addIndex((x+1)+y*width);\t\t\t// 1\n\t\tmesh.addIndex(x+(y+1)*width);\t\t\t// 10\n\n\t\tmesh.addIndex((x+1)+y*width);\t\t\t// 1\n\t\tmesh.addIndex((x+1)+(y+1)*width);\t\t// 11\n\t\tmesh.addIndex(x+(y+1)*width);\t\t\t// 10\n\t}\n}\n~~~~\n\n\n\n\n\n##Methods\n\n\n\n###void addColor(&c)\n\n<!--\n_syntax: addColor(&c)_\n_name: addColor_\n_returns: void_\n_returns_description: _\n_parameters: const C &c_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis adds a color to the mesh,\nthe color will be associated with the vertex in the same position.\n\n\n\n\n\n_description: _\n\nThis adds a color to the mesh, the color will be associated with the vertex in the same position.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addColors(&cols)\n\n<!--\n_syntax: addColors(&cols)_\n_name: addColors_\n_returns: void_\n_returns_description: _\n_parameters: const vector< C > &cols_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis adds colors using a reference to a vector of ofColors.\nFor each color in the vector, this will put the colors at the corresponding vertex.\n\n\n\n\n\n_description: _\n\nThis adds colors using a reference to a vector of ofColors. For each color in the vector, this will put the colors at the corresponding vertex.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addColors(*cols, amt)\n\n<!--\n_syntax: addColors(*cols, amt)_\n_name: addColors_\n_returns: void_\n_returns_description: _\n_parameters: const C *cols, size_t amt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis adds a pointer of colors to the ofMesh instance with the amount passed as the second parameter.\n\n\n\n\n\n_description: _\n\nThis adds a pointer of colors to the ofMesh instance with the amount passed as the second parameter.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addIndex(i)\n\n<!--\n_syntax: addIndex(i)_\n_name: addIndex_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType i_\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nWill give you this shape:\n![image of basic use of indices](../index.jpg)\n\n\n\n\n\n_description: _\n\nAdd an index to the index vector. Each index represents the order of connection for  vertices. This determines the way that the vertices are connected according to the polygon type set in the primitiveMode. It important to note that a particular vertex might be used for several faces and so would be referenced several times in the index vector.\n~~~~{.cpp}\n    ofMesh mesh;\n    mesh.setMode(OF_PRIMITIVE_TRIANGLES);\n    mesh.addVertex(ofPoint(0,-200,0));\n    mesh.addVertex(ofPoint(200, 0, 0 ));\n    mesh.addVertex(ofPoint(-200, 0, 0 ));\n    mesh.addVertex(ofPoint(0, 200, 0 ));\n    mesh.addIndex(0); //connect the first vertex we made, v0\n    mesh.addIndex(1); //to v1\n    mesh.addIndex(2); //to v2 to complete the face\n    mesh.addIndex(1); //now start a new face beginning with v1\n    mesh.addIndex(2); //that is connected to v2\n    mesh.addIndex(3); //and we complete the face with v3\n~~~~\n\nWill give you this shape:\n![image of basic use of indices](index.jpg)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addIndices(&inds)\n\n<!--\n_syntax: addIndices(&inds)_\n_name: addIndices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< ofIndexType > &inds_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis adds a vector of indices.\n\n\n\n\n\n_description: _\n\nThis adds a vector of indices.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addIndices(*inds, amt)\n\n<!--\n_syntax: addIndices(*inds, amt)_\n_name: addIndices_\n_returns: void_\n_returns_description: _\n_parameters: const ofIndexType *inds, size_t amt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis adds indices to the ofMesh by pointing to an array of indices.\nThe \"amt\" defines the length of the array.\n\n\n\n\n\n_description: _\n\nThis adds indices to the ofMesh by pointing to an array of indices. The \"amt\" defines the length of the array.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addNormal(&n)\n\n<!--\n_syntax: addNormal(&n)_\n_name: addNormal_\n_returns: void_\n_returns_description: _\n_parameters: const N &n_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd a normal to the mesh as a 3D vector,\ntypically perpendicular to the plane of the face. A normal is a vector\nthat defines how a surface responds to lighting, i.e. how it is lit.\nThe amount of light reflected by a surface is proportional to the angle\nbetween the light's direction and the normal. The smaller the angle the\nbrighter the surface will look. See the normalsExample for advice on\ncomputing the normals.\naddNormal adds the 3D vector to the end of the list, so you need to\nmake sure you add normals at the same index of the matching vertex.\n\n\n\n\n\n_description: _\n\nAdd a normal to the mesh as a 3D vector, typically perpendicular to the plane of the face. A normal is a vector that defines how a surface responds to lighting, i.e. how it is lit. The amount of light reflected by a surface is proportional to the angle between the light's direction and the normal. The smaller the angle the brighter the surface will look. See the normalsExample for advice on computing the normals.\naddNormal adds the 3D vector to the end of the list, so you need to make sure you add normals at the same index of the matching face.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addNormals(&norms)\n\n<!--\n_syntax: addNormals(&norms)_\n_name: addNormals_\n_returns: void_\n_returns_description: _\n_parameters: const vector< N > &norms_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd a vector of normals to a mesh,\nallowing you to push out many normals at once rather than\nadding one at a time. The vector of normals is added after the end of\nthe current normals list.\n\n\n\n\n\n_description: _\n\nAdd a vector of normals to a mesh, allowing you to push out many normals at once rather than adding one at a time. The vector of normals is added after the end of the current normals list.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addNormals(*norms, amt)\n\n<!--\n_syntax: addNormals(*norms, amt)_\n_name: addNormals_\n_returns: void_\n_returns_description: _\n_parameters: const N *norms, size_t amt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd an array of normals to the mesh.\nBecause you are using a pointer to the array you also have to define\nthe length of the array as an std::size_t (amt). The normals are added at the\nend of the current normals list.\n\n\n\n\n\n_description: _\n\nAdd an array of normals to the mesh. Because you are using a pointer to the array you also have to define the length of the array as an int (amt). The normals are added at the end of the current normals list.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addTexCoord(&t)\n\n<!--\n_syntax: addTexCoord(&t)_\n_name: addTexCoord_\n_returns: void_\n_returns_description: _\n_parameters: const T &t_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd a Vec2f representing the texture coordinate.\nBecause OF uses ARB textures these are in pixels rather than\n0-1 normalized coordinates.\n\n\n\n\n\n_description: _\n\nAdd a Vec2f representing the texture coordinate. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addTexCoords(&tCoords)\n\n<!--\n_syntax: addTexCoords(&tCoords)_\n_name: addTexCoords_\n_returns: void_\n_returns_description: _\n_parameters: const vector< T > &tCoords_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd a vector of texture coordinates to a mesh,\nallowing you to push out many at once rather than adding one at a time.\nThe vector of texture coordinates is added after the end of the current\ntexture coordinates list.\n\n\n\n\n\n_description: _\n\nAdd a vector of texture coordinates to a mesh, allowing you to push out many at once rather than adding one at a time. The vector of texture coordinates is added after the end of the current texture coordinates list.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addTexCoords(*tCoords, amt)\n\n<!--\n_syntax: addTexCoords(*tCoords, amt)_\n_name: addTexCoords_\n_returns: void_\n_returns_description: _\n_parameters: const T *tCoords, size_t amt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Add an array of texture coordinates to the mesh.\nBecause you are using a pointer to the array you also have to define\nthe length of the array as an std::size_t (amt).\nThe texture coordinates are added at the end of the current texture\ncoordinates list.\n\n\n\n\n\n_description: _\n\nAdd an array of texture coordinates to the mesh. Because you are using a pointer to the array you also have to define the length of the array as an int (amt). The texture coordinates are added at the end of the current texture coordinates list.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addTriangle(index1, index2, index3)\n\n<!--\n_syntax: addTriangle(index1, index2, index3)_\n_name: addTriangle_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index1, ofIndexType index2, ofIndexType index3_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdding a triangle means using three of the vertices that have already been added to create a triangle.\nThis is an easy way to create triangles in the mesh. The indices refer to the index of the vertex in the vector of vertices.\n\n\n\n\n\n_description: _\n\nAdding a triangle means using three of the vertices that have already been added to create a triangle. This is an easy way to create triangles in the mesh. The indices refer to the index of the vertex in the vector of vertices.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addVertex(&v)\n\n<!--\n_syntax: addVertex(&v)_\n_name: addVertex_\n_returns: void_\n_returns_description: _\n_parameters: const V &v_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd a new vertex at the end of the current list of vertices.\nIt is important to remember that the order the vertices are added to\nthe list determines how they link they form the polygons and strips\n(assuming you do not change their indeces). See the ofMesh class\ndescription for details.\n\n\n\n\n\n_description: _\n\nAdd a new vertex at the end of the current list of vertices. It is important to remember that the order the vertices are added to the list determines how they link they form the polygons and strips (assuming you do not change their indeces). See the ofMesh class description for details.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addVertices(&verts)\n\n<!--\n_syntax: addVertices(&verts)_\n_name: addVertices_\n_returns: void_\n_returns_description: _\n_parameters: const vector< V > &verts_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd a vector of vertices to a mesh, allowing you to push out\nmany at once rather than adding one at a time. The vector of vertices\nis added after the end of the current vertices list.\n\n\n\n\n\n_description: _\n\nAdd a vector of vertices to a mesh, allowing you to push out many at once rather than adding one at a time. The vector of vertices is added after the end of the current vertices list.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void addVertices(*verts, amt)\n\n<!--\n_syntax: addVertices(*verts, amt)_\n_name: addVertices_\n_returns: void_\n_returns_description: _\n_parameters: const V *verts, size_t amt_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd an array of vertices to the mesh.\nBecause you are using a pointer to the array you also have to define\nthe length of the array as an int (amt). The vertices are added at the\nend of the current vertices list.\n\n\n\n\n\n_description: _\n\nAdd an array of vertices to the mesh. Because you are using a pointer to the array you also have to define the length of the array as an int (amt). The vertices are added at the end of the current vertices list.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void append(V, N, C, &mesh)\n\n<!--\n_syntax: append(V, N, C, &mesh)_\n_name: append_\n_returns: void_\n_returns_description: _\n_parameters: const ofMesh_< V, N, C, T > &mesh_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAdd the vertices, normals, texture coordinates and indices of one mesh onto another mesh.\nEverything from the referenced mesh is simply added at the end\nof the current mesh's lists.\n\n\n\n\n\n_description: _\n\nAdd the vertices, normals, texture coordinates and indices of one mesh onto another mesh. Everything from the referenced mesh is simply added at the end of the current mesh's lists.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh_< V, N, C, T > axis(size)\n\n<!--\n_syntax: axis(size)_\n_name: axis_\n_returns: ofMesh_< V, N, C, T >_\n_returns_description: _\n_parameters: float size_\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: an ofMesh representing an XYZ coordinate system.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh_< V, N, C, T > box(width, height, depth, resX = 2, resY = 2, resZ = 2)\n\n<!--\n_syntax: box(width, height, depth, resX = 2, resY = 2, resZ = 2)_\n_name: box_\n_returns: ofMesh_< V, N, C, T >_\n_returns_description: _\n_parameters: float width, float height, float depth, int resX=2, int resY=2, int resZ=2_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nA helper method that returns a box made of triangles.\nThe resolution settings for the width and height are optional\n(they are both set at a default of 2 triangles per side).\n~~~~{.cpp}\nofMesh mesh;\nmesh = ofMesh::box(200.0, 200.0, 200.0);\n~~~~\n\n![image of a simple box](3d/box.jpg)\n\n\n\n\n\n_description: _\n\nA helper method that returns a box made of triangles. The resolution settings for the width and height are optional (they are both set at a default of 2 triangles per side).\n~~~~{.cpp}\nofMesh mesh;\nmesh = ofMesh::box(200.0, 200.0, 200.0);\n~~~~\n\n![image of a simple box](box.jpg)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clear()\n\n<!--\n_syntax: clear()_\n_name: clear_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemoves all the vertices, colors, and indices from the mesh.\n\n\n\n\n\n_description: _\n\nThis removes all the vertices, colors, and indices from the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearColors()\n\n<!--\n_syntax: clearColors()_\n_name: clearColors_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nClear all the colors.\n\n\n\n\n\n_description: _\n\nClear all the colors.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearIndices()\n\n<!--\n_syntax: clearIndices()_\n_name: clearIndices_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemove all the indices of the mesh.\nThis means that your mesh will be a point cloud.\n\n\n\n\n\n_description: _\n\nRemove all the indices of the mesh. This means that your mesh will be a point cloud.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearNormals()\n\n<!--\n_syntax: clearNormals()_\n_name: clearNormals_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemove all the normals.\n\n\n\n\n\n_description: _\n\nRemove all the normals.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearTexCoords()\n\n<!--\n_syntax: clearTexCoords()_\n_name: clearTexCoords_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Clear all the texture coordinates.\n\n\n\n\n\n_description: _\n\nClear all the texture coordinates.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void clearVertices()\n\n<!--\n_syntax: clearVertices()_\n_name: clearVertices_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemoves all the vertices.\n\n\n\n\n\n_description: _\n\nRemoves all the vertices.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh_< V, N, C, T > cone(radius, height, radiusSegments = 12, heightSegments = 6, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: cone(radius, height, radiusSegments = 12, heightSegments = 6, capSegments = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: cone_\n_returns: ofMesh_< V, N, C, T >_\n_returns_description: _\n_parameters: float radius, float height, int radiusSegments=12, int heightSegments=6, int capSegments=2, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nA helper method that returns a cone made of triangles.\nThe resolution settings for the radius, height, and cap are optional\n(they are set at a default of 12 segments around the radius, 6 segments\nin the height, and 2 on the cap). The only valid modes are the default\nOF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.\n~~~~{.cpp}\nofMesh mesh;\nmesh = ofMesh::cone(100.0, 200.0);\n~~~~\n\n![image of a simple cone](3d/cone.jpg)\n\n\n\n\n\n_description: _\n\nA helper method that returns a cone made of triangles. The resolution settings for the radius, height, and cap are optional (they are set at a default of 12 segments around the radius, 6 segments in the height, and 2 on the cap). The only valid modes are the default OF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.\n~~~~{.cpp}\nofMesh mesh;\nmesh = ofMesh::cone(100.0, 200.0);\n~~~~\n\n![image of a simple cone](cone.jpg)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh_< V, N, C, T > cylinder(radius, height, radiusSegments = 12, heightSegments = 6, numCapSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: cylinder(radius, height, radiusSegments = 12, heightSegments = 6, numCapSegments = 2, bCapped = true, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: cylinder_\n_returns: ofMesh_< V, N, C, T >_\n_returns_description: _\n_parameters: float radius, float height, int radiusSegments=12, int heightSegments=6, int numCapSegments=2, bool bCapped=true, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\tA helper method that returns a cylinder made of triangles.\nThe resolution settings for the radius, height, and cap are optional\n(they are set at a default of 12 segments around the radius, 6 segments\nin the height, and 2 on the cap). You have the option to cap the\ncylinder or not. The only valid modes are the default\nOF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.\n\t~~~~{.cpp}\n\tofMesh mesh;\n\tmesh = ofMesh::cylinder(100.0, 200.0);\n\t~~~~\n\n\t![image of a simple cylinder](3d/cylinder.jpg)\n\n\n\n\n\n_description: _\n\nA helper method that returns a cylinder made of triangles. The resolution settings for the radius, height, and cap are optional (they are set at a default of 12 segments around the radius, 6 segments in the height, and 2 on the cap). You have the option to cap the cylinder or not. The only valid modes are the default OF_PRIMITIVE_TRIANGLE_STRIP and OF_PRIMITIVE_TRIANGLES.\n~~~~{.cpp}\nofMesh mesh;\nmesh = ofMesh::cylinder(100.0, 200.0);\n~~~~\n\n![image of a simple cylinder](cylinder.jpg)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disableColors()\n\n<!--\n_syntax: disableColors()_\n_name: disableColors_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDisable mesh colors.\nUse enableColors() to turn colors back on.\n\n\n\n\n\n_description: _\n\nDisable mesh colors. Use enableColors() to turn colors back on.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disableIndices()\n\n<!--\n_syntax: disableIndices()_\n_name: disableIndices_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDisable mesh indices.\nUse enableIndices() to turn indices back on.\n\n\n\n\n\n_description: _\n\nDisable mesh indices. Use enableIndices() to turn indices back on.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disableNormals()\n\n<!--\n_syntax: disableNormals()_\n_name: disableNormals_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDisable mesh normals.\nUse enableNormals() to turn normals back on.\n\n\n\n\n\n_description: _\n\nDisable mesh normals. Use enableNormals() to turn normals back on.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void disableTextures()\n\n<!--\n_syntax: disableTextures()_\n_name: disableTextures_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDisable mesh textures.\nUse enableTextures() to turn textures back on.\n\n\n\n\n\n_description: _\n\nDisable mesh textures. Use enableTextures() to turn textures back on.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw()\n\n<!--\n_syntax: draw()_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis draws the mesh using its primitive type, meaning that if\nyou set them up to be triangles, this will draw the triangles.\n\n\n\n\n\n_description: _\n\nThis draws the mesh using its primitive type, meaning that if you set them up to be triangles, this will draw the triangles.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void draw(renderType)\n\n<!--\n_syntax: draw(renderType)_\n_name: draw_\n_returns: void_\n_returns_description: _\n_parameters: ofPolyRenderMode renderType_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis draws the mesh using a defined renderType,\noverriding the renderType defined with setMode().\n\n\n\n\n\n_description: _\n\nThis draws the mesh using a defined renderType, overriding the renderType defined with setMode().\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawFaces()\n\n<!--\n_syntax: drawFaces()_\n_name: drawFaces_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis draws the mesh as faces, meaning that you'll have a collection of faces.\n\n\n\n\n\n_description: _\n\nThis draws the mesh as faces, meaning that you'll have a collection of faces.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawVertices()\n\n<!--\n_syntax: drawVertices()_\n_name: drawVertices_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis allows you draw just the vertices, meaning that you'll have a point cloud.\n\n\n\n\n\n_description: _\n\nThis allows you draw just the vertices, meaning that you'll have a point cloud.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void drawWireframe()\n\n<!--\n_syntax: drawWireframe()_\n_name: drawWireframe_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis draws the mesh as GL_LINES, meaning that you'll have a wireframe.\n\n\n\n\n\n_description: _\n\nThis draws the mesh as GL_LINES, meaning that you'll have a wireframe.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void enableColors()\n\n<!--\n_syntax: enableColors()_\n_name: enableColors_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEnable mesh colors.\nUse disableColors() to turn colors off.\nColors are enabled by default when they are added to the mesh.\n\n\n\n\n\n_description: _\n\nEnable mesh colors. Use disableColors() to turn colors off. Colors are enabled by default when they are added to the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void enableIndices()\n\n<!--\n_syntax: enableIndices()_\n_name: enableIndices_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEnable mesh indices.\nUse disableIndices() to turn indices off.\nIndices are enabled by default when they are added to the mesh.\n\n\n\n\n\n_description: _\n\nEnable mesh indices. Use disableIndices() to turn indices off. Indices are enabled by default when they are added to the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void enableNormals()\n\n<!--\n_syntax: enableNormals()_\n_name: enableNormals_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEnable mesh normals.\nUse disableNormals() to turn normals off.\nNormals are enabled by default when they are added to the mesh.\n\n\n\n\n\n_description: _\n\nEnable mesh normals. Use disableNormals() to turn normals off. Normals are enabled by default when they are added to the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void enableTextures()\n\n<!--\n_syntax: enableTextures()_\n_name: enableTextures_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nEnable mesh textures.\nUse disableTextures() to turn textures off.\nTextures are enabled by default when they are added to the mesh.\n\n\n\n\n\n_description: _\n\nEnable mesh textures. Use disableTextures() to turn textures off. Textures are enabled by default when they are added to the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void flatNormals()\n\n<!--\n_syntax: flatNormals()_\n_name: flatNormals_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nDuplicates vertices and updates normals to get a low-poly look.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###V getCentroid()\n\n<!--\n_syntax: getCentroid()_\n_name: getCentroid_\n_returns: V_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: a ofVec3f defining the centroid of all the vetices in the mesh.\n\n\n\n\n\n_description: _\n\nReturns a ofVec3f defining the centroid of all the vetices in the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###C getColor(i)\n\n<!--\n_syntax: getColor(i)_\n_name: getColor_\n_returns: C_\n_returns_description: _\n_parameters: ofIndexType i_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet the color at the index in the colors vector.\n\n**Returns**: the color at the index in the colors vector.\n\n\n\n\n\n_description: _\n\nReturns the color at the index in the colors vector.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< C > & getColors()\n\n<!--\n_syntax: getColors()_\n_name: getColors_\n_returns: vector< C > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nUse this if you plan to change the colors as part of this call as it will force a reset of the cache.\n\n**Returns**: the vector that contains all of the colors of the mesh, if it has any.\n\n\n\n\n\n_description: _\n\nReturns the vector that contains all of the colors of the mesh, if it has any. (read only)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const vector< C > & getColors()\n\n<!--\n_syntax: getColors()_\n_name: getColors_\n_returns: const vector< C > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the vector that contains all of the colors of the mesh, if it has any. (read only)\n\n\n\n\n\n_description: _\n\nReturns the vector that contains all of the colors of the mesh, if it has any. Use this if you plan to change the colors as part of this call as it will force a reset of the cache.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###C * getColorsPointer()\n\n<!--\n_syntax: getColorsPointer()_\n_name: getColorsPointer_\n_returns: C *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nUse this if you plan to change the colors as part of this call as it will force a reset of the cache.\n\n**Returns**: a pointer that contains all of the colors of the mesh, if it has any.\n\n\n\n\n\n_description: _\n\nReturns a pointer that contains all of the colors of the mesh, if it has any. Use this if you plan to change the colors as part of this call as it will force a reset of the cache.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const C * getColorsPointer()\n\n<!--\n_syntax: getColorsPointer()_\n_name: getColorsPointer_\n_returns: const C *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: a pointer that contains all of the colors of the mesh, if it has any. (read only)\n\n\n\n\n\n_description: _\n\nReturns a pointer that contains all of the colors of the mesh, if it has any. (read only)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMeshFace_< V, N, C, T > getFace(faceId)\n\n<!--\n_syntax: getFace(faceId)_\n_name: getFace_\n_returns: ofMeshFace_< V, N, C, T >_\n_returns_description: _\n_parameters: ofIndexType faceId_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the vector that contains all of the faces of the mesh. This isn't currently implemented.\n\n\n\n\n\n_description: _\n\nReturns the vector that contains all of the faces of the mesh. This isn't currently implemented.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< N > getFaceNormals(perVetex = false)\n\n<!--\n_syntax: getFaceNormals(perVetex = false)_\n_name: getFaceNormals_\n_returns: vector< N >_\n_returns_description: _\n_parameters: bool perVetex=false_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet normals for each face\nAs a default it only calculates the normal for the face as a whole but\nby setting (perVertex = true) it will return the same normal value for\neach of the three vertices making up a face.\n\n**Returns**: a vector containing the calculated normals of each face in the mesh.\n\n\n\n\n\n_description: _\n\nReturns a vector containing the calculated normals of each face in the mesh. As a default it only calculates the normal for the face as a whole but by setting (perVertex = true) it will return the same normal value for each of the three vertices making up a face.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofIndexType getIndex(i)\n\n<!--\n_syntax: getIndex(i)_\n_name: getIndex_\n_returns: ofIndexType_\n_returns_description: _\n_parameters: ofIndexType i_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the index from the index vector. Each index represents the index of the vertex in the vertices vector. This determines the way that the vertices are connected into the polgoynon type set in the primitiveMode.\n\n\n\n\n\n_description: _\n\nReturns the index from the index vector. Each index represents the index of the vertex in the vertices vector. This determines the way that the vertices are connected into the polgoynon type set in the primitiveMode.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofIndexType * getIndexPointer()\n\n<!--\n_syntax: getIndexPointer()_\n_name: getIndexPointer_\n_returns: ofIndexType *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: a pointer to the indices that the mesh contains.\n\n\n\n\n\n_description: _\n\nReturns a pointer to the indices that the mesh contains.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const ofIndexType * getIndexPointer()\n\n<!--\n_syntax: getIndexPointer()_\n_name: getIndexPointer_\n_returns: const ofIndexType *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: a pointer to the indices that the mesh contains.\n\n\n\n\n\n_description: _\n\nReturns a pointer to the indices that the mesh contains.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< ofIndexType > & getIndices()\n\n<!--\n_syntax: getIndices()_\n_name: getIndices_\n_returns: vector< ofIndexType > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nUse this if you plan to change the indices as part of this call as it\nwill force a reset of the cache.\n\n**Returns**: the vector that contains all of the indices of the mesh, if it has any.\n\n\n\n\n\n_description: _\n\nReturns the vector that contains all of the indices of the mesh, if it has any. (read only)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const vector< ofIndexType > & getIndices()\n\n<!--\n_syntax: getIndices()_\n_name: getIndices_\n_returns: const vector< ofIndexType > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the vector that contains all of the indices of the mesh, if it has any. (read only)\n\n\n\n\n\n_description: _\n\nReturns the vector that contains all of the indices of the mesh, if it has any. Use this if you plan to change the indices as part of this call as it will force a reset of the cache.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh_< V, N, C, T > getMeshForIndices(startIndex, endIndex)\n\n<!--\n_syntax: getMeshForIndices(startIndex, endIndex)_\n_name: getMeshForIndices_\n_returns: ofMesh_< V, N, C, T >_\n_returns_description: _\n_parameters: ofIndexType startIndex, ofIndexType endIndex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThe new mesh includes the mesh mode, colors, textures, and normals of the original mesh (assuming any were added).\n\n**Returns**: a mesh made up of a range of indices from startIndex to the endIndex.\n\n\n\n\n\n_description: _\n\nReturns a mesh made up of a range of indices from startIndex to the endIndex. The new mesh includes the mesh mode, colors, textures, and normals of the original mesh (assuming any were added).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh_< V, N, C, T > getMeshForIndices(startIndex, endIndex, startVertIndex, endVertIndex)\n\n<!--\n_syntax: getMeshForIndices(startIndex, endIndex, startVertIndex, endVertIndex)_\n_name: getMeshForIndices_\n_returns: ofMesh_< V, N, C, T >_\n_returns_description: _\n_parameters: ofIndexType startIndex, ofIndexType endIndex, ofIndexType startVertIndex, ofIndexType endVertIndex_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPrimitiveMode getMode()\n\n<!--\n_syntax: getMode()_\n_name: getMode_\n_returns: ofPrimitiveMode_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\\n**Returns**: the primitive mode that the mesh is using.\n\n\n\n\n\n_description: _\n\nReturns the primitive mode that the mesh is using.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###N getNormal(i)\n\n<!--\n_syntax: getNormal(i)_\n_name: getNormal_\n_returns: N_\n_returns_description: _\n_parameters: ofIndexType i_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\\n**Returns**: the normal at the index in the normals vector.\n\n\n\n\n\n_description: _\n\nReturns the normal at the index in the normals vector.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< N > & getNormals()\n\n<!--\n_syntax: getNormals()_\n_name: getNormals_\n_returns: vector< N > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nUse this if you plan to change the normals as part of this call as it\nwill force a reset of the cache.\n\n**Returns**: the vector that contains all of the normals of the mesh,\nif it has any.\n\n\n\n\n\n_description: _\n\nReturns the vector that contains all of the normals of the mesh, if it has any. (read only)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const vector< N > & getNormals()\n\n<!--\n_syntax: getNormals()_\n_name: getNormals_\n_returns: const vector< N > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the vector that contains all of the normals of the mesh, if\nit has any. (read only)\n\n\n\n\n\n_description: _\n\nReturns the vector that contains all of the normals of the mesh, if it has any. Use this if you plan to change the normals as part of this call as it will force a reset of the cache.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###N * getNormalsPointer()\n\n<!--\n_syntax: getNormalsPointer()_\n_name: getNormalsPointer_\n_returns: N *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: a pointer to the normals that the mesh contains.\n\n\n\n\n\n_description: _\n\nReturns a pointer to the normals that the mesh contains.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const N * getNormalsPointer()\n\n<!--\n_syntax: getNormalsPointer()_\n_name: getNormalsPointer_\n_returns: const N *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: a pointer to the normals that the mesh contains.\n\n\n\n\n\n_description: _\n\nReturns a pointer to the normals that the mesh contains.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getNumColors()\n\n<!--\n_syntax: getNumColors()_\n_name: getNumColors_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the size of the colors vector for the mesh.\nThis will tell you how many colors are contained in the mesh.\n\n\n\n\n\n_description: _\n\nReturns the size of the colors vector for the mesh. This will tell you how many colors are contained in the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getNumIndices()\n\n<!--\n_syntax: getNumIndices()_\n_name: getNumIndices_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis will tell you how many indices are contained in the mesh.\n\n**Returns**: the size of the indices vector for the mesh.\n\n\n\n\n\n_description: _\n\nReturns the size of the indices vector for the mesh. This will tell you how many indices are contained in the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getNumNormals()\n\n<!--\n_syntax: getNumNormals()_\n_name: getNumNormals_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis will tell you how many normals are contained in the mesh.\n\n**Returns**: the size of the normals vector for the mesh.\n\n\n\n\n\n_description: _\n\nReturns the size of the normals vector for the mesh. This will tell you how many normals are contained in the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getNumTexCoords()\n\n<!--\n_syntax: getNumTexCoords()_\n_name: getNumTexCoords_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis will tell you how many texture coordinates are contained in the mesh.\n\n**Returns**: the size of the texture coordinates vector for the mesh.\n\n\n\n\n\n_description: _\n\nReturns the size of the texture coordinates vector for the mesh. This will tell you how many texture coordinates are contained in the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###size_t getNumVertices()\n\n<!--\n_syntax: getNumVertices()_\n_name: getNumVertices_\n_returns: size_t_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the size of the vertices vector for the mesh.\nThis will tell you how many vertices are contained in the mesh.\n\n\n\n\n\n_description: _\n\nReturns the size of the vertices vector for the mesh. This will tell you how many vertices are contained in the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T getTexCoord(i)\n\n<!--\n_syntax: getTexCoord(i)_\n_name: getTexCoord_\n_returns: T_\n_returns_description: _\n_parameters: ofIndexType i_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the Vec2f representing the texture coordinate.\nBecause OF uses ARB textures these are in pixels rather than\n0-1 normalized coordinates.\n\n\n\n\n\n_description: _\n\nReturns the Vec2f representing the texture coordinate. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< T > & getTexCoords()\n\n<!--\n_syntax: getTexCoords()_\n_name: getTexCoords_\n_returns: vector< T > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a vector representing the texture coordinates of the mesh\nBecause OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.\nUse this if you plan to change the texture coordinates as part of this\ncall as it will force a reset of the cache.\n\n**Returns**: a vector of Vec2f representing the texture coordinates for the whole mesh.\n\n\n\n\n\n_description: _\n\nReturns a vector of Vec2f representing the texture coordinates for the whole mesh. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates. (read only)\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const vector< T > & getTexCoords()\n\n<!--\n_syntax: getTexCoords()_\n_name: getTexCoords_\n_returns: const vector< T > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nBecause OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates.\n\n**Returns**: a vector of Vec2f representing the texture coordinates for the whole mesh. (read only)\n\n\n\n\n\n_description: _\n\nReturns a vector of Vec2f representing the texture coordinates for the whole mesh. Because OF uses ARB textures these are in pixels rather than 0-1 normalized coordinates. Use this if you plan to change the texture coordinates as part of this call as it will force a reset of the cache.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###T * getTexCoordsPointer()\n\n<!--\n_syntax: getTexCoordsPointer()_\n_name: getTexCoordsPointer_\n_returns: T *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: a pointer to the texture coords that the mesh contains.\n\n\n\n\n\n_description: _\n\nReturns a pointer to the texture coords that the mesh contains.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const T * getTexCoordsPointer()\n\n<!--\n_syntax: getTexCoordsPointer()_\n_name: getTexCoordsPointer_\n_returns: const T *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nGet a pointer to the ofVec2f texture coordinates that the mesh contains.\n\n\n\n\n\n_description: _\n\nGet a pointer to the ofVec2f texture coordinates that the mesh contains.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const vector<ofMeshFace_< V, N, C, T>  > & getUniqueFaces()\n\n<!--\n_syntax: getUniqueFaces()_\n_name: getUniqueFaces_\n_returns: const vector<ofMeshFace_< V, N, C, T>  > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the mesh as a vector of unique ofMeshFace_s\na list of triangles that do not share vertices or indices\n\n\n\n\n\n_description: _\n\nReturns the mesh as a vector of unique ofMeshFaces.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###V getVertex(i)\n\n<!--\n_syntax: getVertex(i)_\n_name: getVertex_\n_returns: V_\n_returns_description: _\n_parameters: ofIndexType i_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the vertex at the index.\n\n\n\n\n\n_description: _\n\nReturns the vertex at the index.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###vector< V > & getVertices()\n\n<!--\n_syntax: getVertices()_\n_name: getVertices_\n_returns: vector< V > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the vector that contains all of the vertices of the mesh.\n\n\n\n\n\n_description: _\n\nReturns the vector that contains all of the vertices of the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const vector< V > & getVertices()\n\n<!--\n_syntax: getVertices()_\n_name: getVertices_\n_returns: const vector< V > &_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: the vector that contains all of the vertices of the mesh.\n\n\n\n\n\n_description: _\n\nReturns the vector that contains all of the vertices of the mesh.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###V * getVerticesPointer()\n\n<!--\n_syntax: getVerticesPointer()_\n_name: getVerticesPointer_\n_returns: V *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.8.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: a pointer to the vertices that the mesh contains.\n\n\n\n\n\n_description: _\n\nReturns a pointer to the vertices that the mesh contains.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###const V * getVerticesPointer()\n\n<!--\n_syntax: getVerticesPointer()_\n_name: getVerticesPointer_\n_returns: const V *_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: a pointer to the vertices that the mesh contains.\n\n\n\n\n\n_description: _\n\nReturns a pointer to the vertices that the mesh contains.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasColors()\n\n<!--\n_syntax: hasColors()_\n_name: hasColors_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n/returns Whether the mesh has any colors.\n\n\n\n\n\n_description: _\n\nWhether the mesh has any colors.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasIndices()\n\n<!--\n_syntax: hasIndices()_\n_name: hasIndices_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n/returns Whether the mesh has any indices assigned to it.\n\n\n\n\n\n_description: _\n\nWhether the mesh has any indices assigned to it.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasNormals()\n\n<!--\n_syntax: hasNormals()_\n_name: hasNormals_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n/returnsWhether the mesh has any normals.\n\n\n\n\n\n_description: _\n\nWhether the mesh has any normals.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasTexCoords()\n\n<!--\n_syntax: hasTexCoords()_\n_name: hasTexCoords_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n/returns Whether the mesh has any textures assigned to it.\n\n\n\n\n\n_description: _\n\nWhether the mesh has any textures assigned to it.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool hasVertices()\n\n<!--\n_syntax: hasVertices()_\n_name: hasVertices_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: Whether the mesh has any vertices.\n\n\n\n\n\n_description: _\n\nWhether the mesh has any vertices.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool haveColorsChanged()\n\n<!--\n_syntax: haveColorsChanged()_\n_name: haveColorsChanged_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: If the colors of the mesh have changed, been added or removed.\n\n\n\n\n\n_description: _\n\nIf the colors of the mesh have changed, been added or removed.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool haveIndicesChanged()\n\n<!--\n_syntax: haveIndicesChanged()_\n_name: haveIndicesChanged_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: If the indices of the mesh have changed, been added or removed.\n\n\n\n\n\n_description: _\n\nIf the indices of the mesh have changed, been added or removed.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool haveNormalsChanged()\n\n<!--\n_syntax: haveNormalsChanged()_\n_name: haveNormalsChanged_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: If the normals of the mesh have changed, been added or removed.\n\n\n\n\n\n_description: _\n\nIf the normals of the mesh have changed, been added or removed.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool haveTexCoordsChanged()\n\n<!--\n_syntax: haveTexCoordsChanged()_\n_name: haveTexCoordsChanged_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: If the texture coords of the mesh have changed, been added or removed.\n\n\n\n\n\n_description: _\n\nIf the texture coords of the mesh have changed, been added or removed.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool haveVertsChanged()\n\n<!--\n_syntax: haveVertsChanged()_\n_name: haveVertsChanged_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: protected_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n**Returns**: If the vertices of the mesh have changed, been added or removed.\n\n\n\n\n\n_description: _\n\nIf the vertices of the mesh have changed, been added or removed.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh_< V, N, C, T > icosahedron(radius)\n\n<!--\n_syntax: icosahedron(radius)_\n_name: icosahedron_\n_returns: ofMesh_< V, N, C, T >_\n_returns_description: _\n_parameters: float radius_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh_< V, N, C, T > icosphere(radius, iterations)\n\n<!--\n_syntax: icosphere(radius, iterations)_\n_name: icosphere_\n_returns: ofMesh_< V, N, C, T >_\n_returns_description: _\n_parameters: float radius, size_t iterations_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void load(&path)\n\n<!--\n_syntax: load(&path)_\n_name: load_\n_returns: void_\n_returns_description: _\n_parameters: const filesystem::path &path_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nLoads a mesh from a file located at the provided path into the mesh.\nThis will replace any existing data within the mesh.\n\nIt expects that the file will be in the [PLY Format](http://en.wikipedia.org/wiki/PLY_(file_format)).\nIt will only load meshes saved in the PLY ASCII format; the binary format is not supported.\n\n\n\n\n\n_description: _\n\nLoads a mesh from a file located at the provided path into the mesh.\nThis will replace any existing data within the mesh.\n\nIt expects that the file will be in the [PLY Format](http://en.wikipedia.org/wiki/PLY_(file_format)).\nIt will only load meshes saved in the PLY ASCII format; the binary format is not supported.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void mergeDuplicateVertices()\n\n<!--\n_syntax: mergeDuplicateVertices()_\n_name: mergeDuplicateVertices_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofMesh_()\n\n<!--\n_syntax: ofMesh_()_\n_name: ofMesh__\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis creates the mesh,\nusing OF_PRIMITIVE_TRIANGLES without any initial vertices.\n\n\n\n\n\n_description: _\n\nThis creates the mesh, using OF_PRIMITIVE_TRIANGLES and without any initial vertices.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ofMesh_(mode, &verts)\n\n<!--\n_syntax: ofMesh_(mode, &verts)_\n_name: ofMesh__\n_returns: _\n_returns_description: _\n_parameters: ofPrimitiveMode mode, const vector< V > &verts_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis allows to you to use one of the other ofPrimitiveModes:\nOF_PRIMITIVE_TRIANGLES, OF_PRIMITIVE_TRIANGLE_STRIP,\nOF_PRIMITIVE_TRIANGLE_FAN, OF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP,\nOF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS.\nSee [ofGLUtils](../gl/ofGLUtils) for more information on these types.\n\n\n\n\n\n_description: _\n\nThis allows to you to use one of the other ofPrimitiveModes: OF_PRIMITIVE_TRIANGLES, OF_PRIMITIVE_TRIANGLE_STRIP, OF_PRIMITIVE_TRIANGLE_FAN, OF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP, OF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS. See [ofGLUtils](../gl/ofGLUtils) for more information on these types.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh_< V, N, C, T > plane(width, height, columns = 2, rows = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: plane(width, height, columns = 2, rows = 2, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: plane_\n_returns: ofMesh_< V, N, C, T >_\n_returns_description: _\n_parameters: float width, float height, int columns=2, int rows=2, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\}\n\\name Primitive constructor helper methods\n\\{\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void removeColor(index)\n\n<!--\n_syntax: removeColor(index)_\n_name: removeColor_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemove a color at the index in the colors vector.\n\n\n\n\n\n_description: _\n\nRemove a color at the index in the colors vector.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void removeIndex(index)\n\n<!--\n_syntax: removeIndex(index)_\n_name: removeIndex_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemoves an index.\n\n\n\n\n\n_description: _\n\nRemoves an index.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void removeNormal(index)\n\n<!--\n_syntax: removeNormal(index)_\n_name: removeNormal_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemove a normal.\n\n\n\n\n\n_description: _\n\nRemove a normal.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void removeTexCoord(index)\n\n<!--\n_syntax: removeTexCoord(index)_\n_name: removeTexCoord_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Remove a Vec2f representing the texture coordinate.\n\n\n\n\n\n_description: _\n\nRemove a Vec2f representing the texture coordinate.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void removeVertex(index)\n\n<!--\n_syntax: removeVertex(index)_\n_name: removeVertex_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nRemoves the vertex at the index in the vector.\n\n\n\n\n\n_description: _\n\nRemoves the vertex at the index in the vector.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void save(&path, useBinary = false)\n\n<!--\n_syntax: save(&path, useBinary = false)_\n_name: save_\n_returns: void_\n_returns_description: _\n_parameters: const filesystem::path &path, bool useBinary=false_\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n Saves the mesh at the passed path in the [PLY Format](http://en.wikipedia.org/wiki/PLY_(file_format)).\n\n There are two format options for PLY: a binary format and an ASCII format.\n By default, it will save using the ASCII format.\n Passing ``true`` into the ``useBinary`` parameter will save it in the binary format.\n\n If you're planning on reloading the mesh into ofMesh, ofMesh currently only supports loading the ASCII format.\n\n For more information, see the [PLY format specification](http://paulbourke.net/dataformats/ply/).\n\n\n\n\n\n_description: _\n\nSaves the mesh at the passed path in the [PLY Format](http://en.wikipedia.org/wiki/PLY_(file_format)).\n\nThere are two format options for PLY: a binary format and an ASCII format.\nBy default, it will save using the ASCII format.\nPassing ``true`` into the ``useBinary`` parameter will save it in the binary format.\n\nIf you're planning on reloading the mesh into ofMesh, ofMesh currently only supports loading the ASCII format.\n\nFor more information, see the [PLY format specification](http://paulbourke.net/dataformats/ply/).\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColor(index, &c)\n\n<!--\n_syntax: setColor(index, &c)_\n_name: setColor_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index, const C &c_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nSet the color at the index in the colors vector.\n\n\n\n\n\n_description: _\n\nSet the color at the index in the colors vector.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setColorForIndices(startIndex, endIndex, color)\n\n<!--\n_syntax: setColorForIndices(startIndex, endIndex, color)_\n_name: setColorForIndices_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType startIndex, ofIndexType endIndex, C color_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setFromTriangles(V, N, C, &tris, bUseFaceNormal = false)\n\n<!--\n_syntax: setFromTriangles(V, N, C, &tris, bUseFaceNormal = false)_\n_name: setFromTriangles_\n_returns: void_\n_returns_description: _\n_parameters: const vector<ofMeshFace_< V, N, C, T>  > &tris, bool bUseFaceNormal=false_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setIndex(index, val)\n\n<!--\n_syntax: setIndex(index, val)_\n_name: setIndex_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index, ofIndexType val_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nThis sets the index at i.\n\n\n\n\n\n_description: _\n\nThis sets the index at i.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setMode(mode)\n\n<!--\n_syntax: setMode(mode)_\n_name: setMode_\n_returns: void_\n_returns_description: _\n_parameters: ofPrimitiveMode mode_\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAllows you to set the ofPrimitiveMode.\nThe available modes are OF_PRIMITIVE_TRIANGLES,\nOF_PRIMITIVE_TRIANGLE_STRIP, OF_PRIMITIVE_TRIANGLE_FAN,\nOF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP,\nOF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS\n\n\n\n\n\n_description: _\n\nAllows you to set the ofPrimitiveMode. The available modes are OF_PRIMITIVE_TRIANGLES, OF_PRIMITIVE_TRIANGLE_STRIP, OF_PRIMITIVE_TRIANGLE_FAN, OF_PRIMITIVE_LINES, OF_PRIMITIVE_LINE_STRIP, OF_PRIMITIVE_LINE_LOOP, OF_PRIMITIVE_POINTS\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setNormal(index, &n)\n\n<!--\n_syntax: setNormal(index, &n)_\n_name: setNormal_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index, const N &n_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\\todo Documentation.\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setTexCoord(index, &t)\n\n<!--\n_syntax: setTexCoord(index, &t)_\n_name: setTexCoord_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index, const T &t_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setVertex(index, &v)\n\n<!--\n_syntax: setVertex(index, &v)_\n_name: setVertex_\n_returns: void_\n_returns_description: _\n_parameters: ofIndexType index, const V &v_\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void setupIndicesAuto()\n\n<!--\n_syntax: setupIndicesAuto()_\n_name: setupIndicesAuto_\n_returns: void_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\nAllow you to set up the indices automatically when you add a vertex.\n\n\n\n\n\n_description: _\n\nAllow you to set up the indices automatically when you add a vertex.\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###void smoothNormals(angle)\n\n<!--\n_syntax: smoothNormals(angle)_\n_name: smoothNormals_\n_returns: void_\n_returns_description: _\n_parameters: float angle_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofMesh_< V, N, C, T > sphere(radius, res = 12, mode = OF_PRIMITIVE_TRIANGLE_STRIP)\n\n<!--\n_syntax: sphere(radius, res = 12, mode = OF_PRIMITIVE_TRIANGLE_STRIP)_\n_name: sphere_\n_returns: ofMesh_< V, N, C, T >_\n_returns_description: _\n_parameters: float radius, int res=12, ofPrimitiveMode mode=OF_PRIMITIVE_TRIANGLE_STRIP_\n_access: public_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: True_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool usingColors()\n\n<!--\n_syntax: usingColors()_\n_name: usingColors_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool usingIndices()\n\n<!--\n_syntax: usingIndices()_\n_name: usingIndices_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool usingNormals()\n\n<!--\n_syntax: usingNormals()_\n_name: usingNormals_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool usingTextures()\n\n<!--\n_syntax: usingTextures()_\n_name: usingTextures_\n_returns: bool_\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n### ~ofMesh_()\n\n<!--\n_syntax: ~ofMesh_()_\n_name: ~ofMesh__\n_returns: _\n_returns_description: _\n_parameters: _\n_access: public_\n_version_started: 0.10.0_\n_version_deprecated: _\n_summary: _\n_constant: False_\n_static: False_\n_visible: True_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n##Variables\n\n\n\n###bool bColorsChanged\n\n<!--\n_name: bColorsChanged_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bFacesDirty\n\n<!--\n_name: bFacesDirty_\n_type: bool_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bIndicesChanged\n\n<!--\n_name: bIndicesChanged_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bNormalsChanged\n\n<!--\n_name: bNormalsChanged_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bTexCoordsChanged\n\n<!--\n_name: bTexCoordsChanged_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool bVertsChanged\n\n<!--\n_name: bVertsChanged_\n_type: bool_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int colors\n\n<!--\n_name: colors_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int faces\n\n<!--\n_name: faces_\n_type: int_\n_access: private_\n_version_started: 0073_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int indices\n\n<!--\n_name: indices_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###ofPrimitiveMode mode\n\n<!--\n_name: mode_\n_type: ofPrimitiveMode_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int normals\n\n<!--\n_name: normals_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int texCoords\n\n<!--\n_name: texCoords_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool useColors\n\n<!--\n_name: useColors_\n_type: bool_\n_access: private_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool useIndices\n\n<!--\n_name: useIndices_\n_type: bool_\n_access: private_\n_version_started: 0072_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool useNormals\n\n<!--\n_name: useNormals_\n_type: bool_\n_access: private_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###bool useTextures\n\n<!--\n_name: useTextures_\n_type: bool_\n_access: private_\n_version_started: 0071_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n###int vertices\n\n<!--\n_name: vertices_\n_type: int_\n_access: private_\n_version_started: 007_\n_version_deprecated: _\n_summary: _\n_visible: True_\n_constant: False_\n_advanced: False_\n-->\n\n_inlined_description: _\n\n\n\n\n\n\n\n_description: _\n\n\n\n\n\n\n\n<!----------------------------------------------------------------------------->\n\n","type":"page"}}],"fetch":[]}