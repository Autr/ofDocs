{"data":[{"page":{"entry":{"name":"msys2","filename":"msys2.md","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/content/setup/msys2.md","path":"/guides/msys2","route":"/guides/msys2.md","dir":"../ofSite/content/setup","ext":"md","type":"page","id":21,"parent":3,"breadcrumbs":[3],"siblings":[],"translations":{"ja":{"name":"msys2-ja","filename":"msys2.ja.md","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/content/setup/msys2.ja.md","path":"/guides/msys2-ja","route":"/guides/msys2.ja.md","dir":"../ofSite/content/setup","ext":"md","type":"page","id":19,"parent":3,"breadcrumbs":[3],"siblings":[],"translations":{}},"ko":{"name":"msys2-ko","filename":"msys2.ko.md","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/content/setup/msys2.ko.md","path":"/guides/msys2-ko","route":"/guides/msys2.ko.md","dir":"../ofSite/content/setup","ext":"md","type":"page","id":20,"parent":3,"breadcrumbs":[3],"siblings":[],"translations":{}}}},"description":{},"document":"<h2>-<em>- coding: utf-8 -</em>-</h2>\n<p>.. title: msys2</p>\n<p><a href=\"/\">openFrameworks</a> | <a href=\"table_of_contents.md\">Documentation table of contents</a></p>\n<h1>msys2</h1>\n<h2>Installing msys2</h2>\n<p>First, install MSYS2 using the <a href=\"https://msys2.github.io/\">one-click installer</a> or\ndirectly unzipping the archive from their <a href=\"http://sourceforge.net/projects/msys2/files/Base/x86_64/\">repository</a></p>\n<p>If you have an old install of MSYS2 (before 2018), it's recommended to do a fresh install.</p>\n<p>If you are going to use QtCreator you should install msys2 in the default install folder, c:\\msys64</p>\n<p>Now, let's update the MSYS2 installation.\nFrom an MSYS2 shell (it can be MSYS, MINGW32 or MINGW64), run :</p>\n<pre><code>pacman <span class=\"token operator\">-</span>Syu <span class=\"token operator\">--</span>noconfirm <span class=\"token operator\">--</span>needed\n</code></pre>\n<p>If some system files are updated, you may be requested to close the shell.\nIf that happens, close the shell as instructed and open a new one to update the remaining packages using the same command :</p>\n<pre><code>pacman <span class=\"token operator\">-</span>Syu <span class=\"token operator\">--</span>noconfirm <span class=\"token operator\">--</span>needed\n</code></pre>\n<p>You are now ready to install openFrameworks.</p>\n<h2>Installing openFrameworks</h2>\n<p><strong>IMPORTANT</strong>\nMSYS2 comes in 3 flavors : MSYS (msys2.exe), MINGW32 (mingw32.exe), MINGW64 (mingw64.exe).\nThis really important to remember as lots of problem with running OF with MSYS2 come from using the wrong flavor.</p>\n<p>As of 0.11.0, <strong>MINGW32</strong> and <strong>MINGW64</strong> is supported as two different releases on the <a href=\"https://openframeworks.cc/download\">download page</a>.\nBut you must use the correct corresponding shell. ie: <strong>mingw32.exe</strong> shell to run the <strong>32bit OF release</strong> and <strong>mingw64.exe</strong> to run the <strong>64bit OF release</strong>.</p>\n<p>For the following instructions, it assumed that MSYS2 is installed in <code>C<span class=\"token operator\">:</span>\\msys64</code> and you are using the 32bit OF release.\nIf it has been installed elsewhere, adapt the instructions to reflect your MSYS2 installation path.</p>\n<p><strong>NOTE: If you are using the 64bit OF release, use the <code>mingw64<span class=\"token punctuation\">.</span>exe</code> wherever <code>mingw32<span class=\"token punctuation\">.</span>exe</code> is referenced below.</strong></p>\n<p>Download and unzip the <strong>qt creator / msys2</strong> version of oF.\n<strong>DO NOT INSTALL</strong> oF in a folder having space or other</p>\n<p>Open an <strong>MINGW32</strong> shell (<code>C<span class=\"token operator\">:</span>\\msys64\\mingw32<span class=\"token punctuation\">.</span>exe</code> ) and install OF dependencies:</p>\n<pre><code>cd your_oF_directory<span class=\"token operator\">/</span>scripts<span class=\"token operator\">/</span>msys2\n<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>install_dependencies<span class=\"token punctuation\">.</span>sh\n</code></pre>\n<p>next, compile oF libraries:</p>\n<pre><code>cd your_oF_directory<span class=\"token operator\">/</span>libs<span class=\"token operator\">/</span>openFrameworksCompiled<span class=\"token operator\">/</span>project\nmake\n</code></pre>\n<p>You can speed-up compilation using parallel build <code>make <span class=\"token operator\">-</span>j4</code> or the number of cores you want it to use</p>\n<h2>Setting the PATH variable</h2>\n<p>Setting the PATH variable is an optional step but is also the cause of many trouble.</p>\n<p>As of v0.10.1, the install_dependencies.sh script does it in an wrong way!</p>\n<h3>Why would you need to set the PATH variable ?</h3>\n<p><strong>To be able to run my oF application by double clicking on it.</strong></p>\n<p>To run, the application needs to have the dll it was compiled with.\nIf the required dll is not found at the location of your application, Windows will traverse the folders in your PATH to find it.\nIf <code>C<span class=\"token operator\">:</span>\\msys64\\mingw32\\bin</code> is included in your PATH, it will hopefully find the right dll.\nHowever, it may find a dll with a matching name in a different folder that is not compatible...<br>\nIt may also happen that, after an MSYS2 update, it finds a newer version in <code>C<span class=\"token operator\">:</span>\\msys64\\mingw32\\bin</code> that is also incompatible...</p>\n<p>The solution is to copy all the needed dlls in the application folder.\nThis can be easily done with the command :</p>\n<pre><code>make copy_dlls\n</code></pre>\n<p>This will also ease the installation of the application on a different computer....</p>\n<p><strong>To compile oF in IDE (Qt Creator or VS Code )</strong></p>\n<p>These softwares will try to detect compiler programs (gcc, make) by scanning the PATH variable.\nSo it's an easy way to setup up your IDE.\nThere may also be some settings in the IDE to configure where to find the programs.\nThat gives you better control.\nAs in the previous point, relying on the PATH variable to find the programs may result in unexpected behaviours (for example, using Windows C:\\Windows\\System32\\find.exe instead of MSYS C:\\msys64\\usr\\bin\\find.exe)</p>\n<p>It may be interesting to write a wrapper batch file to lauch your IDE where you set the PATH to use.\nThis way you do not pollute your PATH system-wide.</p>\n<h3>I've decided to use the PATH variable. How do I set it ?</h3>\n<p>You can find how to set the PATH in windows here: http://www.computerhope.com/issues/ch000549.htm</p>\n<p>You'll need to add <code>c<span class=\"token operator\">:</span>\\msys64\\mingw32\\bin</code> and <code>c<span class=\"token operator\">:</span>\\msys64\\usr\\bin</code> to your PATH in <strong>that order</strong>.\nThere are two ways:</p>\n<ol>\n<li>Either add them via 'Environment Variables' from the Control Panel &gt; System &gt; Advanced System Settings.</li>\n<li>Or you can also set the PATH from the command line: open a Windows cmd prompt and set you user PATH.</li>\n</ol>\n<pre><code>setx PATH <span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>c<span class=\"token operator\">:</span>\\msys64\\mingw32\\bin<span class=\"token punctuation\">;</span>c<span class=\"token operator\">:</span>\\msys64\\usr\\bin<span class=\"token punctuation\">;</span><span class=\"token operator\">%</span>PATH<span class=\"token operator\">%</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Don't forget to logoff/logon as PATH is updated at logon.</p>\n<p>That's all, now go to the your_oF_directory/examples folder, where you will find\nthe examples, and have fun!</p>\n<h2>Running examples</h2>\n<p>Compile the example (for example the 3DPrimitivesExample)</p>\n<pre><code>cd your_oF_directory<span class=\"token operator\">/</span>examples<span class=\"token operator\">/</span>3d<span class=\"token operator\">/</span>3DPrimitivesExample\nmake\n</code></pre>\n<p>At this point, <code>make run</code> to launch.</p>\n<p>To be able to double-click on the exe file to run it, run <code>make copy_dlls</code> (if you haven't set the PATH!)</p>\n<h2>Makefile</h2>\n<p>Every example has a Makefile you can configure using the files config.make\nand addons.make.</p>\n<p>config.make: This file has options to add search paths, libraries, etc., the\nsyntax is the usual syntax in makefiles, there's help comments inside the file.</p>\n<p>addons.make: if you want to use an addon which is inside the addons folder, just\nadd its name in a new line in this file.</p>\n<h2>QtCreator</h2>\n<p>With msys2 you can also use QtCreator as an IDE, you can find more information in the corresponding <a href=\"../qtcreator\">setup guide</a>:</p>\n<h2>FAQ / Common problems</h2>\n<ul>\n<li>&quot;I have a TLSv1_1_client_method missing error&quot; when I double-click the exe ?&quot;</li>\n</ul>\n<p>The executable looks for ssleay32.dll and libeay32.dll and it first finds a version that doesn't support TLS v1.1. Often it happens with Intel iCls software. The solution is to move the your_msys2_directory\\mingw32\\bin path before the conflicting path. If the conflicting path is in the system PATH and you do not have administrative privileges, copy/link ssleay32.dll and libeay32.dll from your_msys2_directory\\mingw32\\bin to the executable folder.</p>\n<ul>\n<li>&quot;I'm on a corporate network with a proxy. I cannot download packages with pacman.&quot;</li>\n</ul>\n<p>You may need to set HTTP_PROXY and HTTPS_PROXY environment variables.</p>\n<pre><code>From a DOS<span class=\"token operator\">/</span>CMD prompt <span class=\"token operator\">:</span>\nset http_proxy<span class=\"token operator\">=</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>your_proxy<span class=\"token operator\">:</span>your_port\nset http_proxy<span class=\"token operator\">=</span>http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>username<span class=\"token operator\">:</span>password@your_proxy<span class=\"token operator\">:</span>your_port\nset https_proxy<span class=\"token operator\">=</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>your_proxy<span class=\"token operator\">:</span>your_port\nset https_proxy<span class=\"token operator\">=</span>https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>username<span class=\"token operator\">:</span>password@your_proxy<span class=\"token operator\">:</span>your_port\n</code></pre>\n<p>Don't forget to escape special characters in your password...</p>\n<p>many thanks!! OFteam</p>\n","raw":"## -*- coding: utf-8 -*-\n.. title: msys2\n\n[openFrameworks](/) | [Documentation table of contents](table_of_contents.md)\n\nmsys2\n=====\n\nInstalling msys2\n----------------\n\nFirst, install MSYS2 using the [one-click installer](https://msys2.github.io/) or\ndirectly unzipping the archive from their [repository](http://sourceforge.net/projects/msys2/files/Base/x86_64/)\n\nIf you have an old install of MSYS2 (before 2018), it's recommended to do a fresh install.\n\nIf you are going to use QtCreator you should install msys2 in the default install folder, c:\\msys64\n\n\n\nNow, let's update the MSYS2 installation.\nFrom an MSYS2 shell (it can be MSYS, MINGW32 or MINGW64), run :\n\n```sh\npacman -Syu --noconfirm --needed\n```\n\nIf some system files are updated, you may be requested to close the shell.\nIf that happens, close the shell as instructed and open a new one to update the remaining packages using the same command :\n\n```sh\npacman -Syu --noconfirm --needed\n```\n\nYou are now ready to install openFrameworks.\n\n\nInstalling openFrameworks\n-------------------------\n\n**IMPORTANT**\nMSYS2 comes in 3 flavors : MSYS (msys2.exe), MINGW32 (mingw32.exe), MINGW64 (mingw64.exe).\nThis really important to remember as lots of problem with running OF with MSYS2 come from using the wrong flavor.\n\nAs of 0.11.0, **MINGW32** and **MINGW64** is supported as two different releases on the [download page](https://openframeworks.cc/download).\nBut you must use the correct corresponding shell. ie: **mingw32.exe** shell to run the **32bit OF release** and **mingw64.exe** to run the **64bit OF release**.\n\nFor the following instructions, it assumed that MSYS2 is installed in `C:\\msys64` and you are using the 32bit OF release. \nIf it has been installed elsewhere, adapt the instructions to reflect your MSYS2 installation path.\n\n**NOTE: If you are using the 64bit OF release, use the `mingw64.exe` wherever `mingw32.exe` is referenced below.** \n\nDownload and unzip the **qt creator / msys2** version of oF. \n**DO NOT INSTALL** oF in a folder having space or other \n\nOpen an **MINGW32** shell (`C:\\msys64\\mingw32.exe` ) and install OF dependencies:\n\n```sh\ncd your_oF_directory/scripts/msys2\n./install_dependencies.sh\n```\n\nnext, compile oF libraries:\n\n```sh\ncd your_oF_directory/libs/openFrameworksCompiled/project\nmake\n```\n\nYou can speed-up compilation using parallel build `make -j4` or the number of cores you want it to use\n\n\nSetting the PATH variable\n-------------------------\n\nSetting the PATH variable is an optional step but is also the cause of many trouble.\n\nAs of v0.10.1, the install_dependencies.sh script does it in an wrong way!\n\n### Why would you need to set the PATH variable ?\n\n__To be able to run my oF application by double clicking on it.__\n\nTo run, the application needs to have the dll it was compiled with.\nIf the required dll is not found at the location of your application, Windows will traverse the folders in your PATH to find it.\nIf `C:\\msys64\\mingw32\\bin` is included in your PATH, it will hopefully find the right dll.\nHowever, it may find a dll with a matching name in a different folder that is not compatible...  \nIt may also happen that, after an MSYS2 update, it finds a newer version in `C:\\msys64\\mingw32\\bin` that is also incompatible...\n\nThe solution is to copy all the needed dlls in the application folder.\nThis can be easily done with the command : \n\n```sh\nmake copy_dlls\n```\nThis will also ease the installation of the application on a different computer....\n\n\n__To compile oF in IDE (Qt Creator or VS Code )__\n\nThese softwares will try to detect compiler programs (gcc, make) by scanning the PATH variable.\nSo it's an easy way to setup up your IDE.\nThere may also be some settings in the IDE to configure where to find the programs.\nThat gives you better control.\nAs in the previous point, relying on the PATH variable to find the programs may result in unexpected behaviours (for example, using Windows C:\\Windows\\System32\\find.exe instead of MSYS C:\\msys64\\usr\\bin\\find.exe)\n\nIt may be interesting to write a wrapper batch file to lauch your IDE where you set the PATH to use.\nThis way you do not pollute your PATH system-wide.\n\n### I've decided to use the PATH variable. How do I set it ?\n\nYou can find how to set the PATH in windows here: http://www.computerhope.com/issues/ch000549.htm\n\nYou'll need to add `c:\\msys64\\mingw32\\bin` and `c:\\msys64\\usr\\bin` to your PATH in **that order**.\nThere are two ways:\n\n1. Either add them via 'Environment Variables' from the Control Panel > System > Advanced System Settings.\n2. Or you can also set the PATH from the command line: open a Windows cmd prompt and set you user PATH.\n```\nsetx PATH \"c:\\msys64\\mingw32\\bin;c:\\msys64\\usr\\bin;%PATH%\"\n```\n\nDon't forget to logoff/logon as PATH is updated at logon.\n\nThat's all, now go to the your_oF_directory/examples folder, where you will find\nthe examples, and have fun!\n\nRunning examples\n----------------\nCompile the example (for example the 3DPrimitivesExample)\n\n```sh\ncd your_oF_directory/examples/3d/3DPrimitivesExample\nmake\n```\n\nAt this point, `make run` to launch.\n\nTo be able to double-click on the exe file to run it, run `make copy_dlls` (if you haven't set the PATH!)\n\nMakefile\n--------\n\nEvery example has a Makefile you can configure using the files config.make\nand addons.make.\n\nconfig.make: This file has options to add search paths, libraries, etc., the\nsyntax is the usual syntax in makefiles, there's help comments inside the file.\n\naddons.make: if you want to use an addon which is inside the addons folder, just\nadd its name in a new line in this file.\n\nQtCreator\n---------\n\nWith msys2 you can also use QtCreator as an IDE, you can find more information in the corresponding [setup guide](../qtcreator):\n\nFAQ / Common problems\n---------------------\n- \"I have a TLSv1_1_client_method missing error\" when I double-click the exe ?\"\n\nThe executable looks for ssleay32.dll and libeay32.dll and it first finds a version that doesn't support TLS v1.1. Often it happens with Intel iCls software. The solution is to move the your_msys2_directory\\mingw32\\bin path before the conflicting path. If the conflicting path is in the system PATH and you do not have administrative privileges, copy/link ssleay32.dll and libeay32.dll from your_msys2_directory\\mingw32\\bin to the executable folder.\n\n- \"I'm on a corporate network with a proxy. I cannot download packages with pacman.\"\n\nYou may need to set HTTP_PROXY and HTTPS_PROXY environment variables.\n\n    From a DOS/CMD prompt :\n    set http_proxy=http://your_proxy:your_port\n    set http_proxy=http://username:password@your_proxy:your_port\n    set https_proxy=https://your_proxy:your_port\n    set https_proxy=https://username:password@your_proxy:your_port\nDon't forget to escape special characters in your password...\n\n\n\n\n\nmany thanks!! OFteam\n\n","type":"page"}}],"fetch":[]}