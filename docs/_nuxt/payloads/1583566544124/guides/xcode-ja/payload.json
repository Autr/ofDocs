{"data":[{"page":{"entry":{"name":"xcode-ja","filename":"xcode.ja.md","absolute":"/Users/gilbertsinnott/Code/openFrameworks/ofSite/content/setup/xcode.ja.md","path":"/guides/xcode-ja","route":"/guides/xcode.ja.md","dir":"../ofSite/content/setup","ext":"md","type":"page","id":31,"parent":3,"breadcrumbs":[3],"siblings":[],"translations":{}},"description":{},"document":"<h2>-<em>- coding: utf-8 -</em>-</h2>\n<p>.. title: xcode</p>\n<h1>Xcodeセットアップガイド</h1>\n<h2>最初の準備</h2>\n<ol>\n<li>Xcodeを、<a href=\"https://itunes.apple.com/ca/app/xcode/id497799835?mt=12\">OS XのApp Store</a>からインストールします。</li>\n<li>Xcodeのコマンドラインツール（command line tools）をインストールします。</li>\n</ol>\n<p>コマンドラインツールをインストールするには、まずXcodeをインストールしてから、ターミナル（Applications/Utilities/Terminal.app にあります）を起動して以下のコマンドを入力してエンターキーを押します。</p>\n<pre><code>xcode<span class=\"token operator\">-</span>select <span class=\"token operator\">--</span>install\n</code></pre>\n<p>すると、コマンドラインツールのインストーラーが起動します。「Install」ボタンでインストールを開始します。</p>\n<p><img src=\"/setup/xcode/install-dialog.png\" alt=\"install dialog for the command line tools\"></p>\n<p>もし、アップデート・サーバーが利用できないというエラーが出ても、気にしないでください。このエラーは、既にコマンドラインツールがインストールされている際に起こるようです。この場合は、既に準備はできています!</p>\n<p><img src=\"/setup/xcode/install-dialog-server-error.png\" alt=\"server error when installing command line tools\"></p>\n<h2>セットアップのテスト</h2>\n<p>これで、openFrameworksのアプリケーションをビルドする全てが整いました！ openFrameworksに付属してくるサンプルを一つ開いて、テストしてみましょう。</p>\n<p>まず始めに、このサイトからダウンロードして圧縮を展開したフォルダーを、どこか適当な場所に移動します。このフォルダーは、あなたのopenFrameworksのルート（OF_ROOTと呼ばれます）として参照されます。このopenFrameworksnのルートフォルダに、いくつかキーとなるサブフォルダーが入っています。</p>\n<ul>\n<li><strong>apps</strong> は、あなたが作成するアプリケーションを配置することになります。</li>\n<li><strong>examples</strong> には、ビデオや3Dグラフィクス、サウンド、フォントなど様々な機能をデモするアプリケーションが含まれています。</li>\n<li><strong>addons</strong> は、<a href=\"http://ofxaddons.com/\">openFrameworksのアドオン（addons）</a>が含まれます (開発者コミュニティーの貢献による、openFrameworksのコア機能を拡張する機能です)。</li>\n<li><strong>projectGenerator_osx</strong> には、新規にopenFramworksのプロジェクトを生成するのに便利な、project generatorが入っています。</li>\n</ul>\n<p>では、3DPrimitivesExampleを例にして、セットアップをテストしてみましょう。<strong>example</strong> フォルダを開いて、その中の <strong>3d</strong> のさらに中にある <strong>3DPrimitivesExample</strong> フォルダを開きます。この中には2つのフォルダといくつかのファイルが入っています。</p>\n<p><img src=\"/setup/xcode/example-selecting.png\" alt=\"selecting the 3D primitives example\"></p>\n<p>openFrameworksのアプリケーションの基本的な構造は以下のようになっています。</p>\n<ul>\n<li><strong>src</strong> には、アプリケーションのソースファイルが入っています。</li>\n<li><strong>bin</strong> は、最終的に実行するアプリケーションが配置されます。さらにその中の<strong>data</strong>フォルダには、画像、サウンド、フォントといったアプリケーションのアセット（素材）が入っています。</li>\n</ul>\n<p><code><span class=\"token punctuation\">.</span>xcodeproj</code>という拡張子のファイルを、Xcodeで開きます。では、早速開いてみましょう。下記のキャプチャー画像ような画面が表示されるはずです。ウィンドウの左コラムのプロジェクトの項目を展開して、プロジェクトの内容を表示して、この画像のように<code>ofApp<span class=\"token punctuation\">.</span>cpp</code>まで下がっていきましょう。</p>\n<p>（この解説は、Xcodeのバージョン6で書かれています。あなたが未来に生きていない限り、表示は若干異なります。）</p>\n<p><img src=\"/setup/xcode/example-open.png\" alt=\"xcode showing an openframeworks example\"></p>\n<p>左側のバーは、プロジェクト内を閲覧する汎用的なブラウザです。プロジェクト内のファイルや、アプリケーションをビルドした際のエラーが表示されます（エラーは三角形のアイコンで表示されます）。小さな画面で作業する際は、Command+0でサイドバーの表示/非表示を切り替えると便利です。Command+1やCommnd+2で、さらに別のタブを表示します。</p>\n<p>画面中央がメインのエディターです。このエディター内に、左側のブラウザで選択したファイルが表示されます。通常は、ソースファイル（<code><span class=\"token punctuation\">.</span>cpp</code>と<code><span class=\"token punctuation\">.</span>h</code>ファイル）のためのテキストエディターとして使用します。しかし、一番上にあるプロジェクトファイルのアイコンを選択すると、プロジェクトの設定画面になります。また、画像/ビデオ/サウンドなどのファイルを選択して内容を調査することが可能です。</p>\n<p>右側は、補助的なサイドバーで、あまりopenFrameworksでは関係ありません。右上にあるアイコンの青く表示されたサイドバーの部分をクリックするか、command+option+0で隠すことができます。</p>\n<p>画面の上部のツールバーには、大きな「run」ボタンがあります（再生ボタンのような見た目です）。また、Xcodeでビルドするプロジェクトの種類（Xcodeではこれを「スキーム」と呼んでいます）を表示するダイアログでもあります。</p>\n<p><strong>間違ったスキームが選択されていることがよくあります。</strong> Xcodeはアプリケーションのビルドではなく、「openFrameworks」という名前のスキームが選択される傾向にあります。スキームに「openFrameworks」が表示されている場合は、ドロップダウンメニューからアプリケーションの名前のスキームを選択しましょう。もしrunボタンを選択しても何も起こらない場合、ほとんどの場合これが原因になっています。</p>\n<p><img src=\"/setup/xcode/example-scheme.gif\" alt=\"selecting the correct scheme in xcode\"></p>\n<p>正しいスキームを選択したら、もう準備は完了です！ 左上のrunボタン（もしくはCommand +r）を押してXcodeにサンプルをビルドして起動するよう命令します。</p>\n<p>最初にopenFrameworksのプロジェクトをビルドする際には、openFramworks自体がコンパイルされるので、ビルドには数分かかります。openFramworksをアップデートしたり内部のファイルを編集しない限りは、この処理が必要なのは一度だけです。openFrameworks自体のビルドが完了すると、Xcodeはサンプルをコンパイルし「Build Succeeded」というメッセージが表示されて、サンプルのアプリケーションが開始します。</p>\n<p><img src=\"/setup/xcode/example-running.png\" alt=\"example running in a window in front of xcode\"></p>\n<p>サンプルを閉じた後、Xcode画面の下に新たなパネルが開いているのに気づくでしょう。これは「コンソール」といって、<code>ofLog</code>のメッセージを表示したり、その他デバッグの際に使用します。このパネルの表示/非表示は、command+shift+yで切り替えられます。</p>\n<p>openFrameworksがコンパイルされるとき、いくつかの注意メッセージが表示されます。不吉な感じがしますが、全く問題ありません。</p>\n<h2>新規プロジェクトの生成</h2>\n<p>セットアップの確認ができました。今度は、新規のプロジェクトをスクラッチから始めてみましょう。<strong>projectGenerator_osx</strong> フォルダーの中に、<code>projectGenerator<span class=\"token punctuation\">.</span>app</code>があります。これは、openFrameworksの新規プロジェクト生成が簡単に可能なアプリケーションです。アプリケーション名に「firstSketch」という名前に設定し、残りは全て初期設定のままで新規のスケッチを生成し、generateボタンをクリックしましょう。</p>\n<p>その後、project generatorを閉じて、<strong>apps/myApps/firstSketch</strong> フォルダに移動します。Xcodeで<code>firstSketch<span class=\"token punctuation\">.</span>xcodeproj</code>を開いて、左側のブラウザのプロジェクトのアイコンを展開します。さらに、<strong>src</strong> フォルダを展開して<code>ofApp<span class=\"token punctuation\">.</span>cpp</code>ファイルを選択します。</p>\n<p>空の<code><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code>、<code><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code>、<code><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code> という関数（その他別のいろいろな空の関数）の入った、空欄のアプリケーションのテンプレートがエディターに表示されるでしょう。</p>\n<p><img src=\"/setup/xcode/generate-blank.png\" alt=\"blank openframeworks project template\"></p>\n<p>ウィンドウの左上コーナーにテキストを表示するシンプルなアプリケーションを作成しましょう。<code><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code>関数の中に、下記のコードを記入して、command+r（もしくはrunボタンをクリック）でアプリケーションをビルドして起動しましょう。</p>\n<pre><code><span class=\"token function\">ofDrawBitmapStringHighlight</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span>Everything works<span class=\"token operator\">!</span><span class=\"token operator\">&amp;</span>quot<span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><img src=\"/setup/xcode/generate-text.gif\" alt=\"filling in the draw function while showing xcode autocomplete\"></p>\n<p>タイピングした際に、Xcodeにあなたが既に入力した内容から類推した、自動補完機能によるサジェスチョンが表示されたでしょう。この中で上下矢印のキーで選択をし、enterキーで確定します。</p>\n<p>もし、自動補完が表示されない場合は、Xcodeの速度を上げるため、まずクイックビルドを先にする必要があります。command+bを押して、アプリケーションを起動せずにビルドします。</p>\n<h2>エラーとデバッグ</h2>\n<p>エラーには必然的に遭遇します。コンパイルエラーとランタイムエラーの、2種類のエラーがあります。コンパイルエラーは、通常、タイプミスやビルド設定の間違いで引き起され、アプリケーションがコンパイルの途中のままになります。ランタイムエラーは、アプリケーションが起動した後に発生し、<code>EXC_BAD_ACCESS</code>や<code>SIGSEGV</code>といった大文字のメッセージで警告してきます。</p>\n<p>タイプミスによるコンパイルエラーは、特定の行まで、場合によっては特定の文字まで、たどっていくことが可能です。Xcodeは問題の行を赤くハイライトして、問題と思われる部分に小さな赤い三角形の枠内に文字で表示します。下の例は、forループの中で「+」の文字が多すぎる際の表示です。</p>\n<p><img src=\"/setup/xcode/errors-compilation.png\" alt=\"compilation error in xcode\"></p>\n<p>Xcodeはランタイムエラーでも特定の行まで辿ろうとしますが、ちょっと気難しい感じです。正しい場合もありますが、あなたが一切記述していないファイルを指摘してくることもあり、混乱しがちです。下記の例では、アプリケーションのクラッシュの原因となった行を正しく指摘います（間違ったポインタを使おうとしています）。</p>\n<p><img src=\"/setup/xcode/errors-runtime.png\" alt=\"runtime error in xcode\"></p>\n<p>もし、Xcodeが指摘した行が、問題箇所ではなさそうな場合、左側のサイドバーから別の場所（番号リストになったアイテム）を試すことができます。</p>\n<p>ランタイムエラーは、想定しなかった状態で変数が使われた際（想定したよりも大きな値が<code><span class=\"token keyword\">int</span></code>に代入されたり、可能と思っていたのにポインタが<code><span class=\"token constant\">NULL</span></code>になっていたり）に起こることがあります。Xcodeには便利なデバッガが装備されていて、特定の行でアプリケーションの実行を止める機能（ブレイクポイント）があります。この機能で、全ての変数について、チェックして回ることが可能です。</p>\n<p>ブレイクポイントは、テキストエディターの全ての行の左の枠の小さな隙間をクリックすることで設定可能です。青の矢印で表示され、ドラッグして消去することが可能です。</p>\n<p><img src=\"/setup/xcode/errors-breakpoint.gif\" alt=\"setting breakpoints\"></p>\n<p>アプリケーションがブレイクポイントに当たると、一時停止して、Xcode下部のデバッグ用の枠に、現状での全ての変数の値を表示します。下記のスクリーンショットは、forループが完了した後の変数<code>a</code>と<code>b</code>の最終値を表示しています。</p>\n<p><img src=\"/setup/xcode/errors-breakpoint-triggered.png\" alt=\"triggering breakpoints\"></p>\n<p>ブレイクポイントのもう一つの使用法として、特定の状況でのみ引き起される状態をセットすることが可能です。下記の画面は、変数<code>a</code>が50のときの状況を設定したブレイクポイントです。</p>\n<p><img src=\"/setup/xcode/errors-condition.gif\" alt=\"conditional breakpoint being triggered\"></p>\n<h2>プロジェクトにファイルを追加する（アドオンなど）</h2>\n<p>プロジェクトが大きくなってくると、新しくファイルを追加したくなってくるでしょう。追加するファイルは、自分のプロジェクト専用に書かれたものであったり、他の人が作成したアドオンや外部ライブラリだったりします。</p>\n<p>新規ファイルの生成は、いくつかの方法で可能です。Xcode内のsrcフォルダを右クリックして、「New File...」を選択するのが一つの方法です。また、Xcodeのメニューから「File &gt; New File..」を選択する方法もあります。</p>\n<p>ダイアログボックスが表示されたら、「OS X &gt; Source」に移動して「C++ file」を選択します。Xcodeは<code><span class=\"token punctuation\">.</span>cpp</code>と<code><span class=\"token punctuation\">.</span>h</code>ファイルのペアを自動的に生成します。ですので、基本となる名前、例えば「myNewClass」だけを指定すれば、残りは処理してくれます。この操作で、Xcodeが新規のファイルをsrcフォルダ以下に生成したことを確認してください。</p>\n<p>openFramworksのアドオン（addons）の追加は、もう少し複雑です。しかし、比較的間違いの少ない方法が存在します。もしアドオンにREADMEがある場合は、どのようにアドオンをプロジェクトに追加するのかの説明があります。もしREADMEが無いのであれば、以下の方法が良いでしょう :</p>\n<ul>\n<li>アドオンをopenFrameworksのルートの下にある<strong>addons</strong>フォルダ内に入れます</li>\n<li>Xcodeのプロジェクト内の<strong>addons</strong>フォルダを右クリックします</li>\n<li>「Add file to (name of your project)...」を選択します。</li>\n<li>ファイルダイアログでアドオンのフォルダまで移動して、追加するアドオンに移動します</li>\n<li><strong>src</strong> フォルダと <strong>libs</strong> フォルダ（ <strong>libs</strong> フォルダが無い場合もあります）を選択します</li>\n<li>下記のスクリーンショットのようになります</li>\n</ul>\n<p><img src=\"/setup/xcode/files-addons.png\" alt=\"adding src and libs folders for an addon\"></p>\n<ul>\n<li>「Add」をクリックします</li>\n<li>Xcodeのプロジェクト内の追加したいフォルダを選択して、右クリックして「New Group from Selection」を選びます</li>\n<li>グループの名前をアドオンの名前に変更します</li>\n</ul>\n<p><img src=\"/setup/xcode/files-new-group.gif\" alt=\"renaming addon group\"></p>\n<p>この段階で、プロジェクトのビルドを試しましょう。もしうまくいったなら、めでたく完了です！ もし「file not found」というエラーが出たら、ヘッダーのサーチパスにアドオンのフォルダを追加する必要があります。そのフォルダーは大抵は「include」という名前で、プロジェクトの<strong>src</strong>または<strong>libs</strong>内にあります。</p>\n<p><img src=\"/setup/xcode/files-include-folder.png\" alt=\"finding the include folder in ofxjson\"></p>\n<p>もしincludeフォルダのパス（openFrameworksのルートから見た場所）がわかったら、Xcodeの左バーの先頭にあるプロジェクトのビルド設定に移動して「Build Settings&quot;」のタブを選択します。そして、検索欄に「header search paths」と記入して検索します。</p>\n<p><img src=\"/setup/xcode/files-finding-build-settings.gif\" alt=\"finding the build settings dialog\"></p>\n<p>正しい設定欄が見付かったら、ダブルクリックで編集します。「+」ボタンをクリックして新規パスを追加して、アドオンの「include」フォルダへのパスを入力します。設定欄の<code>$<span class=\"token punctuation\">(</span>OF_PATH<span class=\"token punctuation\">)</span></code>というのは、openFrameworksのルートフォルダへのパスをあらわしています。</p>\n<p><img src=\"/setup/xcode/files-adding-header-path.gif\" alt=\"adding a header search path to a project\"></p>\n<p>もしアドオンに複数の <strong>include</strong> フォルダがある場合には、この操作をくりかえして行う必要があります。</p>\n","raw":"## -*- coding: utf-8 -*-\n.. title: xcode\n\nXcodeセットアップガイド\n==================\n\n最初の準備\n----------\n\n1. Xcodeを、[OS XのApp Store](https://itunes.apple.com/ca/app/xcode/id497799835?mt=12)からインストールします。\n2. Xcodeのコマンドラインツール（command line tools）をインストールします。\n\nコマンドラインツールをインストールするには、まずXcodeをインストールしてから、ターミナル（Applications/Utilities/Terminal.app にあります）を起動して以下のコマンドを入力してエンターキーを押します。\n\n```\nxcode-select --install\n```\n\nすると、コマンドラインツールのインストーラーが起動します。「Install」ボタンでインストールを開始します。\n\n![install dialog for the command line tools](/setup/xcode/install-dialog.png)\n\nもし、アップデート・サーバーが利用できないというエラーが出ても、気にしないでください。このエラーは、既にコマンドラインツールがインストールされている際に起こるようです。この場合は、既に準備はできています!\n\n![server error when installing command line tools](/setup/xcode/install-dialog-server-error.png)\n\n\nセットアップのテスト\n------------------\n\nこれで、openFrameworksのアプリケーションをビルドする全てが整いました！ openFrameworksに付属してくるサンプルを一つ開いて、テストしてみましょう。\n\nまず始めに、このサイトからダウンロードして圧縮を展開したフォルダーを、どこか適当な場所に移動します。このフォルダーは、あなたのopenFrameworksのルート（OF_ROOTと呼ばれます）として参照されます。このopenFrameworksnのルートフォルダに、いくつかキーとなるサブフォルダーが入っています。\n\n- **apps** は、あなたが作成するアプリケーションを配置することになります。\n- **examples** には、ビデオや3Dグラフィクス、サウンド、フォントなど様々な機能をデモするアプリケーションが含まれています。\n- **addons** は、[openFrameworksのアドオン（addons）](http://ofxaddons.com/)が含まれます (開発者コミュニティーの貢献による、openFrameworksのコア機能を拡張する機能です)。\n- **projectGenerator_osx** には、新規にopenFramworksのプロジェクトを生成するのに便利な、project generatorが入っています。\n\nでは、3DPrimitivesExampleを例にして、セットアップをテストしてみましょう。**example** フォルダを開いて、その中の **3d** のさらに中にある **3DPrimitivesExample** フォルダを開きます。この中には2つのフォルダといくつかのファイルが入っています。\n\n![selecting the 3D primitives example](/setup/xcode/example-selecting.png)\n\nopenFrameworksのアプリケーションの基本的な構造は以下のようになっています。\n\n- **src** には、アプリケーションのソースファイルが入っています。\n- **bin** は、最終的に実行するアプリケーションが配置されます。さらにその中の**data**フォルダには、画像、サウンド、フォントといったアプリケーションのアセット（素材）が入っています。\n\n`.xcodeproj`という拡張子のファイルを、Xcodeで開きます。では、早速開いてみましょう。下記のキャプチャー画像ような画面が表示されるはずです。ウィンドウの左コラムのプロジェクトの項目を展開して、プロジェクトの内容を表示して、この画像のように`ofApp.cpp`まで下がっていきましょう。\n\n（この解説は、Xcodeのバージョン6で書かれています。あなたが未来に生きていない限り、表示は若干異なります。）\n\n![xcode showing an openframeworks example](/setup/xcode/example-open.png)\n\n左側のバーは、プロジェクト内を閲覧する汎用的なブラウザです。プロジェクト内のファイルや、アプリケーションをビルドした際のエラーが表示されます（エラーは三角形のアイコンで表示されます）。小さな画面で作業する際は、Command+0でサイドバーの表示/非表示を切り替えると便利です。Command+1やCommnd+2で、さらに別のタブを表示します。\n\n画面中央がメインのエディターです。このエディター内に、左側のブラウザで選択したファイルが表示されます。通常は、ソースファイル（`.cpp`と`.h`ファイル）のためのテキストエディターとして使用します。しかし、一番上にあるプロジェクトファイルのアイコンを選択すると、プロジェクトの設定画面になります。また、画像/ビデオ/サウンドなどのファイルを選択して内容を調査することが可能です。\n\n右側は、補助的なサイドバーで、あまりopenFrameworksでは関係ありません。右上にあるアイコンの青く表示されたサイドバーの部分をクリックするか、command+option+0で隠すことができます。\n\n画面の上部のツールバーには、大きな「run」ボタンがあります（再生ボタンのような見た目です）。また、Xcodeでビルドするプロジェクトの種類（Xcodeではこれを「スキーム」と呼んでいます）を表示するダイアログでもあります。\n\n**間違ったスキームが選択されていることがよくあります。** Xcodeはアプリケーションのビルドではなく、「openFrameworks」という名前のスキームが選択される傾向にあります。スキームに「openFrameworks」が表示されている場合は、ドロップダウンメニューからアプリケーションの名前のスキームを選択しましょう。もしrunボタンを選択しても何も起こらない場合、ほとんどの場合これが原因になっています。\n\n![selecting the correct scheme in xcode](/setup/xcode/example-scheme.gif)\n\n\n正しいスキームを選択したら、もう準備は完了です！ 左上のrunボタン（もしくはCommand +r）を押してXcodeにサンプルをビルドして起動するよう命令します。\n\n最初にopenFrameworksのプロジェクトをビルドする際には、openFramworks自体がコンパイルされるので、ビルドには数分かかります。openFramworksをアップデートしたり内部のファイルを編集しない限りは、この処理が必要なのは一度だけです。openFrameworks自体のビルドが完了すると、Xcodeはサンプルをコンパイルし「Build Succeeded」というメッセージが表示されて、サンプルのアプリケーションが開始します。\n\n![example running in a window in front of xcode](/setup/xcode/example-running.png)\n\nサンプルを閉じた後、Xcode画面の下に新たなパネルが開いているのに気づくでしょう。これは「コンソール」といって、`ofLog`のメッセージを表示したり、その他デバッグの際に使用します。このパネルの表示/非表示は、command+shift+yで切り替えられます。\n\nopenFrameworksがコンパイルされるとき、いくつかの注意メッセージが表示されます。不吉な感じがしますが、全く問題ありません。\n\n新規プロジェクトの生成\n------------------------\n\nセットアップの確認ができました。今度は、新規のプロジェクトをスクラッチから始めてみましょう。**projectGenerator_osx** フォルダーの中に、`projectGenerator.app`があります。これは、openFrameworksの新規プロジェクト生成が簡単に可能なアプリケーションです。アプリケーション名に「firstSketch」という名前に設定し、残りは全て初期設定のままで新規のスケッチを生成し、generateボタンをクリックしましょう。\n\nその後、project generatorを閉じて、**apps/myApps/firstSketch** フォルダに移動します。Xcodeで`firstSketch.xcodeproj`を開いて、左側のブラウザのプロジェクトのアイコンを展開します。さらに、**src** フォルダを展開して`ofApp.cpp`ファイルを選択します。\n\n空の`setup()`、`update()`、`draw()` という関数（その他別のいろいろな空の関数）の入った、空欄のアプリケーションのテンプレートがエディターに表示されるでしょう。\n\n![blank openframeworks project template](/setup/xcode/generate-blank.png)\n\nウィンドウの左上コーナーにテキストを表示するシンプルなアプリケーションを作成しましょう。`draw()`関数の中に、下記のコードを記入して、command+r（もしくはrunボタンをクリック）でアプリケーションをビルドして起動しましょう。\n\n```\nofDrawBitmapStringHighlight(\"Everything works!\", 20, 20);\n```\n\n![filling in the draw function while showing xcode autocomplete](/setup/xcode/generate-text.gif)\n\nタイピングした際に、Xcodeにあなたが既に入力した内容から類推した、自動補完機能によるサジェスチョンが表示されたでしょう。この中で上下矢印のキーで選択をし、enterキーで確定します。\n\nもし、自動補完が表示されない場合は、Xcodeの速度を上げるため、まずクイックビルドを先にする必要があります。command+bを押して、アプリケーションを起動せずにビルドします。\n\nエラーとデバッグ\n--------------------\n\nエラーには必然的に遭遇します。コンパイルエラーとランタイムエラーの、2種類のエラーがあります。コンパイルエラーは、通常、タイプミスやビルド設定の間違いで引き起され、アプリケーションがコンパイルの途中のままになります。ランタイムエラーは、アプリケーションが起動した後に発生し、`EXC_BAD_ACCESS`や`SIGSEGV`といった大文字のメッセージで警告してきます。\n\nタイプミスによるコンパイルエラーは、特定の行まで、場合によっては特定の文字まで、たどっていくことが可能です。Xcodeは問題の行を赤くハイライトして、問題と思われる部分に小さな赤い三角形の枠内に文字で表示します。下の例は、forループの中で「+」の文字が多すぎる際の表示です。\n\n![compilation error in xcode](/setup/xcode/errors-compilation.png)\n\nXcodeはランタイムエラーでも特定の行まで辿ろうとしますが、ちょっと気難しい感じです。正しい場合もありますが、あなたが一切記述していないファイルを指摘してくることもあり、混乱しがちです。下記の例では、アプリケーションのクラッシュの原因となった行を正しく指摘います（間違ったポインタを使おうとしています）。\n\n![runtime error in xcode](/setup/xcode/errors-runtime.png)\n\nもし、Xcodeが指摘した行が、問題箇所ではなさそうな場合、左側のサイドバーから別の場所（番号リストになったアイテム）を試すことができます。\n\nランタイムエラーは、想定しなかった状態で変数が使われた際（想定したよりも大きな値が`int`に代入されたり、可能と思っていたのにポインタが`NULL`になっていたり）に起こることがあります。Xcodeには便利なデバッガが装備されていて、特定の行でアプリケーションの実行を止める機能（ブレイクポイント）があります。この機能で、全ての変数について、チェックして回ることが可能です。\n\nブレイクポイントは、テキストエディターの全ての行の左の枠の小さな隙間をクリックすることで設定可能です。青の矢印で表示され、ドラッグして消去することが可能です。\n\n![setting breakpoints](/setup/xcode/errors-breakpoint.gif)\n\nアプリケーションがブレイクポイントに当たると、一時停止して、Xcode下部のデバッグ用の枠に、現状での全ての変数の値を表示します。下記のスクリーンショットは、forループが完了した後の変数`a`と`b`の最終値を表示しています。\n\n![triggering breakpoints](/setup/xcode/errors-breakpoint-triggered.png)\n\nブレイクポイントのもう一つの使用法として、特定の状況でのみ引き起される状態をセットすることが可能です。下記の画面は、変数`a`が50のときの状況を設定したブレイクポイントです。\n\n![conditional breakpoint being triggered](/setup/xcode/errors-condition.gif)\n\nプロジェクトにファイルを追加する（アドオンなど）\n---------------------------------------------\n\nプロジェクトが大きくなってくると、新しくファイルを追加したくなってくるでしょう。追加するファイルは、自分のプロジェクト専用に書かれたものであったり、他の人が作成したアドオンや外部ライブラリだったりします。\n\n新規ファイルの生成は、いくつかの方法で可能です。Xcode内のsrcフォルダを右クリックして、「New File...」を選択するのが一つの方法です。また、Xcodeのメニューから「File > New File..」を選択する方法もあります。\n\nダイアログボックスが表示されたら、「OS X > Source」に移動して「C++ file」を選択します。Xcodeは`.cpp`と`.h`ファイルのペアを自動的に生成します。ですので、基本となる名前、例えば「myNewClass」だけを指定すれば、残りは処理してくれます。この操作で、Xcodeが新規のファイルをsrcフォルダ以下に生成したことを確認してください。\n\nopenFramworksのアドオン（addons）の追加は、もう少し複雑です。しかし、比較的間違いの少ない方法が存在します。もしアドオンにREADMEがある場合は、どのようにアドオンをプロジェクトに追加するのかの説明があります。もしREADMEが無いのであれば、以下の方法が良いでしょう :\n\n- アドオンをopenFrameworksのルートの下にある**addons**フォルダ内に入れます\n- Xcodeのプロジェクト内の**addons**フォルダを右クリックします\n- 「Add file to (name of your project)...」を選択します。\n- ファイルダイアログでアドオンのフォルダまで移動して、追加するアドオンに移動します\n- **src** フォルダと **libs** フォルダ（ **libs** フォルダが無い場合もあります）を選択します\n- 下記のスクリーンショットのようになります\n\n![adding src and libs folders for an addon](/setup/xcode/files-addons.png)\n\n- 「Add」をクリックします\n- Xcodeのプロジェクト内の追加したいフォルダを選択して、右クリックして「New Group from Selection」を選びます\n- グループの名前をアドオンの名前に変更します\n\n![renaming addon group](/setup/xcode/files-new-group.gif)\n\nこの段階で、プロジェクトのビルドを試しましょう。もしうまくいったなら、めでたく完了です！ もし「file not found」というエラーが出たら、ヘッダーのサーチパスにアドオンのフォルダを追加する必要があります。そのフォルダーは大抵は「include」という名前で、プロジェクトの**src**または**libs**内にあります。\n\n![finding the include folder in ofxjson](/setup/xcode/files-include-folder.png)\n\nもしincludeフォルダのパス（openFrameworksのルートから見た場所）がわかったら、Xcodeの左バーの先頭にあるプロジェクトのビルド設定に移動して「Build Settings\"」のタブを選択します。そして、検索欄に「header search paths」と記入して検索します。\n\n![finding the build settings dialog](/setup/xcode/files-finding-build-settings.gif)\n\n正しい設定欄が見付かったら、ダブルクリックで編集します。「+」ボタンをクリックして新規パスを追加して、アドオンの「include」フォルダへのパスを入力します。設定欄の`$(OF_PATH)`というのは、openFrameworksのルートフォルダへのパスをあらわしています。\n\n![adding a header search path to a project](/setup/xcode/files-adding-header-path.gif)\n\nもしアドオンに複数の **include** フォルダがある場合には、この操作をくりかえして行う必要があります。\n","type":"page"}}],"fetch":[]}