{"data":[{"page":{"entry":{"name":"ofMatrix3x3.h","filename":"ofMatrix3x3.h","absolute":"/Users/gilbertsinnott/Code/openFrameworks/libs/openFrameworks/math/ofMatrix3x3.h","path":"/openframeworks/math/ofMatrix3x3_h","route":"/openframeworks/math/ofMatrix3x3.h","dir":"../libs/openFrameworks/math","ext":"h","type":"source","id":289,"parent":284,"breadcrumbs":[284,195],"siblings":[],"translations":{}},"document":"<span class=\"token comment\" spellcheck=\"true\">/*\n * Credits:\n * Code adopted from Lode Vandevenne http://student.kuleuven.be/~m0216922/CG/\n */</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">pragma</span> once</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"ofConstants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;glm/mat3x3.hpp></span></span>\n\n\n<span class=\"token comment\" spellcheck=\"true\">/// \\brief A 3x3 Matrix</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">/// The layout is like this:</span>\n<span class=\"token comment\" spellcheck=\"true\">///</span>\n<span class=\"token comment\" spellcheck=\"true\">///     [ a b c ]</span>\n<span class=\"token comment\" spellcheck=\"true\">///     [ d e f ]</span>\n<span class=\"token comment\" spellcheck=\"true\">///     [ g h i ]</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ofMatrix3x3</span> <span class=\"token punctuation\">{</span>\n\t\n\t\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n\t\n\t<span class=\"token keyword\">float</span> a<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> b<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> d<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> e<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> g<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> h<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">float</span> i<span class=\"token punctuation\">;</span>\n\t\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Constructor</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n\t<span class=\"token function\">ofMatrix3x3</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _a<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _b<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _c<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token keyword\">float</span> _d<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _e<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _f<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n\t\t\t\t<span class=\"token keyword\">float</span> _g<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _h<span class=\"token operator\">=</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _i<span class=\"token operator\">=</span><span class=\"token number\">0.0</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\t<span class=\"token function\">ofMatrix3x3</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat3 <span class=\"token operator\">&amp;</span> mat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span><span class=\"token keyword\">this</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>mat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">operator</span> glm<span class=\"token operator\">::</span><span class=\"token function\">mat3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">reinterpret_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> glm<span class=\"token operator\">::</span>mat3<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Matrix access</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">float</span> _a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _c<span class=\"token punctuation\">,</span>\n\t\t\t <span class=\"token keyword\">float</span> _d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _f<span class=\"token punctuation\">,</span>\n\t\t\t <span class=\"token keyword\">float</span> _g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _h<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> _i <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token keyword\">float</span><span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span><span class=\"token operator\">&amp;</span> index <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Functions</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Transpose the matrix</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This changes the matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     [ a b c ]T    [ a d g ]</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     [ d e f ]  =  [ b e h ]</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///     [ g h i ]     [ c f i ]</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">transpose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Transpose without changing the matrix.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// Uses the \"swap\" method with additions and subtractions to swap the elements that aren't on the main diagonal.</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\returns transposed matrix.\t</span>\n\tofMatrix3x3 <span class=\"token function\">transpose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Find the determinant of the matrix</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa [Wolfram explanation](http://mathworld.wolfram.com/Determinant.html)</span>\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">determinant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">float</span> <span class=\"token function\">determinant</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Inverse of a 3x3 matrix</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// the inverse is the adjoint divided through the determinant</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// find the matrix of minors (minor = determinant of 2x2 matrix of the 2 rows/colums current element is NOT in)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// turn them in cofactors (= change some of the signs)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// find the adjoint by transposing the matrix of cofactors</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// divide this through the determinant to get the inverse</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\sa invert();\t</span>\n\tofMatrix3x3 <span class=\"token function\">inverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">invert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Multiply a matrix by a matrix entry by entry (i.e. a*a, b*b, c*c...)</span>\n\t<span class=\"token comment\" spellcheck=\"true\">///</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// This is referred to as an entrywise, Hadamard, or Schur product.</span>\n\tofMatrix3x3 <span class=\"token function\">entrywiseTimes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">//---------------------</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\name Operators</span>\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\{</span>\n\t\n\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add two matrices</span>\n\tofMatrix3x3 <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Add matrix to existing matrix</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Subtract two matrices</span>\n\tofMatrix3x3 <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Subtract matrix from existing matrix</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Multiply a matrix with a scalar\t\t</span>\n\tofMatrix3x3 <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> scalar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Multiply a matrix by a matrix this = this*B (in that order)\t </span>\n\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Multiply a matrix by a scalar (multiples all entries by scalar)\t </span>\n\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> scalar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Multiply a 3x3 matrix with a 3x3 matrix\t </span>\n\tofMatrix3x3 <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\brief Divide a matrix through a scalar\t\t</span>\n\tofMatrix3x3 <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> scalar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">/</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> scalar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>ostream<span class=\"token operator\">&amp;</span> os<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">friend</span> std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span>std<span class=\"token operator\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> ofMatrix3x3<span class=\"token operator\">&amp;</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token comment\" spellcheck=\"true\">/// \\}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n","type":"source"}}],"fetch":[]}